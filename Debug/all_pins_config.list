
all_pins_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f690  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800f820  0800f820  00010820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010040  08010040  0001224c  2**0
                  CONTENTS
  4 .ARM          00000008  08010040  08010040  00011040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010048  08010048  0001224c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010048  08010048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801004c  0801004c  0001104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08010050  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001224c  2**0
                  CONTENTS
 10 .bss          000009e0  20000250  20000250  00012250  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000c30  20000c30  00012250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001224c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ce9  00000000  00000000  0001227c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002759  00000000  00000000  00025f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  000286c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5e  00000000  00000000  00029a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cce  00000000  00000000  0002a98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161ad  00000000  00000000  0004e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000debcb  00000000  00000000  00064809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001433d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c60  00000000  00000000  00143418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0014a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f808 	.word	0x0800f808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800f808 	.word	0x0800f808

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4619      	mov	r1, r3
 800102e:	2007      	movs	r0, #7
 8001030:	f000 f890 	bl	8001154 <bno055_writeData>
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4619      	mov	r1, r3
 800104a:	203d      	movs	r0, #61	@ 0x3d
 800104c:	f000 f882 	bl	8001154 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001056:	2013      	movs	r0, #19
 8001058:	f000 f870 	bl	800113c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800105c:	e002      	b.n	8001064 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800105e:	2007      	movs	r0, #7
 8001060:	f000 f86c 	bl	800113c <bno055_delay>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ffe3 	bl	800103c <bno055_setOperationMode>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}

0800107a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800107e:	200c      	movs	r0, #12
 8001080:	f7ff ffdc 	bl	800103c <bno055_setOperationMode>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800108c:	2120      	movs	r1, #32
 800108e:	203f      	movs	r0, #63	@ 0x3f
 8001090:	f000 f860 	bl	8001154 <bno055_writeData>
  bno055_delay(700);
 8001094:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001098:	f000 f850 	bl	800113c <bno055_delay>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  bno055_reset();
 80010a6:	f7ff ffef 	bl	8001088 <bno055_reset>

  uint8_t id = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 f939 	bl	800132c <bno055_readData>
  if (id != BNO055_ID) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80010be:	d004      	beq.n	80010ca <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4809      	ldr	r0, [pc, #36]	@ (80010ec <bno055_setup+0x4c>)
 80010c6:	f00a fe6b 	bl	800bda0 <iprintf>
  }
  bno055_setPage(0);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ffa8 	bl	8001020 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80010d0:	2100      	movs	r1, #0
 80010d2:	203f      	movs	r0, #63	@ 0x3f
 80010d4:	f000 f83e 	bl	8001154 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80010d8:	f7ff ffc8 	bl	800106c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f000 f82d 	bl	800113c <bno055_delay>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0800f820 	.word	0x0800f820

080010f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010f4:	f3bf 8f4f 	dsb	sy
}
 80010f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <__NVIC_SystemReset+0x24>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001102:	4904      	ldr	r1, [pc, #16]	@ (8001114 <__NVIC_SystemReset+0x24>)
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_SystemReset+0x28>)
 8001106:	4313      	orrs	r3, r2
 8001108:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800110a:	f3bf 8f4f 	dsb	sy
}
 800110e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <__NVIC_SystemReset+0x20>
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	05fa0004 	.word	0x05fa0004

0800111c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <bno055_assignI2C+0x1c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000026c 	.word	0x2000026c

0800113c <bno055_delay>:

void bno055_delay(int time) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	f004 fac0 	bl	80056cc <HAL_Delay>
#endif
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af02      	add	r7, sp, #8
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	733b      	strb	r3, [r7, #12]
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800116c:	4b5a      	ldr	r3, [pc, #360]	@ (80012d8 <bno055_writeData+0x184>)
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	f107 020c 	add.w	r2, r7, #12
 8001174:	230a      	movs	r3, #10
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2302      	movs	r3, #2
 800117a:	2150      	movs	r1, #80	@ 0x50
 800117c:	f006 f804 	bl	8007188 <HAL_I2C_Master_Transmit>
 8001180:	4603      	mov	r3, r0
 8001182:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a0 	beq.w	80012cc <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d103      	bne.n	800119a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001192:	4852      	ldr	r0, [pc, #328]	@ (80012dc <bno055_writeData+0x188>)
 8001194:	f00a fe6c 	bl	800be70 <puts>
 8001198:	e012      	b.n	80011c0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d103      	bne.n	80011a8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80011a0:	484f      	ldr	r0, [pc, #316]	@ (80012e0 <bno055_writeData+0x18c>)
 80011a2:	f00a fe65 	bl	800be70 <puts>
 80011a6:	e00b      	b.n	80011c0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d103      	bne.n	80011b6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80011ae:	484d      	ldr	r0, [pc, #308]	@ (80012e4 <bno055_writeData+0x190>)
 80011b0:	f00a fe5e 	bl	800be70 <puts>
 80011b4:	e004      	b.n	80011c0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4619      	mov	r1, r3
 80011ba:	484b      	ldr	r0, [pc, #300]	@ (80012e8 <bno055_writeData+0x194>)
 80011bc:	f00a fdf0 	bl	800bda0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80011c0:	4b45      	ldr	r3, [pc, #276]	@ (80012d8 <bno055_writeData+0x184>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 fb1d 	bl	8007804 <HAL_I2C_GetError>
 80011ca:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d07e      	beq.n	80012d0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d103      	bne.n	80011e0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80011d8:	4844      	ldr	r0, [pc, #272]	@ (80012ec <bno055_writeData+0x198>)
 80011da:	f00a fe49 	bl	800be70 <puts>
 80011de:	e021      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d103      	bne.n	80011ee <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80011e6:	4842      	ldr	r0, [pc, #264]	@ (80012f0 <bno055_writeData+0x19c>)
 80011e8:	f00a fe42 	bl	800be70 <puts>
 80011ec:	e01a      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d103      	bne.n	80011fc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80011f4:	483f      	ldr	r0, [pc, #252]	@ (80012f4 <bno055_writeData+0x1a0>)
 80011f6:	f00a fe3b 	bl	800be70 <puts>
 80011fa:	e013      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d103      	bne.n	800120a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001202:	483d      	ldr	r0, [pc, #244]	@ (80012f8 <bno055_writeData+0x1a4>)
 8001204:	f00a fe34 	bl	800be70 <puts>
 8001208:	e00c      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2b10      	cmp	r3, #16
 800120e:	d103      	bne.n	8001218 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001210:	483a      	ldr	r0, [pc, #232]	@ (80012fc <bno055_writeData+0x1a8>)
 8001212:	f00a fe2d 	bl	800be70 <puts>
 8001216:	e005      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b20      	cmp	r3, #32
 800121c:	d102      	bne.n	8001224 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800121e:	4838      	ldr	r0, [pc, #224]	@ (8001300 <bno055_writeData+0x1ac>)
 8001220:	f00a fe26 	bl	800be70 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001224:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <bno055_writeData+0x184>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fadd 	bl	80077e8 <HAL_I2C_GetState>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d103      	bne.n	8001240 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001238:	4832      	ldr	r0, [pc, #200]	@ (8001304 <bno055_writeData+0x1b0>)
 800123a:	f00a fe19 	bl	800be70 <puts>
 800123e:	e048      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b20      	cmp	r3, #32
 8001244:	d103      	bne.n	800124e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001246:	482f      	ldr	r0, [pc, #188]	@ (8001304 <bno055_writeData+0x1b0>)
 8001248:	f00a fe12 	bl	800be70 <puts>
 800124c:	e041      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b24      	cmp	r3, #36	@ 0x24
 8001252:	d103      	bne.n	800125c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001254:	482c      	ldr	r0, [pc, #176]	@ (8001308 <bno055_writeData+0x1b4>)
 8001256:	f00a fe0b 	bl	800be70 <puts>
 800125a:	e03a      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b21      	cmp	r3, #33	@ 0x21
 8001260:	d103      	bne.n	800126a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001262:	482a      	ldr	r0, [pc, #168]	@ (800130c <bno055_writeData+0x1b8>)
 8001264:	f00a fe04 	bl	800be70 <puts>
 8001268:	e033      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b22      	cmp	r3, #34	@ 0x22
 800126e:	d103      	bne.n	8001278 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001270:	4827      	ldr	r0, [pc, #156]	@ (8001310 <bno055_writeData+0x1bc>)
 8001272:	f00a fdfd 	bl	800be70 <puts>
 8001276:	e02c      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b28      	cmp	r3, #40	@ 0x28
 800127c:	d103      	bne.n	8001286 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800127e:	4825      	ldr	r0, [pc, #148]	@ (8001314 <bno055_writeData+0x1c0>)
 8001280:	f00a fdf6 	bl	800be70 <puts>
 8001284:	e025      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b29      	cmp	r3, #41	@ 0x29
 800128a:	d103      	bne.n	8001294 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 800128c:	4822      	ldr	r0, [pc, #136]	@ (8001318 <bno055_writeData+0x1c4>)
 800128e:	f00a fdef 	bl	800be70 <puts>
 8001292:	e01e      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b2a      	cmp	r3, #42	@ 0x2a
 8001298:	d103      	bne.n	80012a2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800129a:	4820      	ldr	r0, [pc, #128]	@ (800131c <bno055_writeData+0x1c8>)
 800129c:	f00a fde8 	bl	800be70 <puts>
 80012a0:	e017      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b60      	cmp	r3, #96	@ 0x60
 80012a6:	d103      	bne.n	80012b0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80012a8:	481d      	ldr	r0, [pc, #116]	@ (8001320 <bno055_writeData+0x1cc>)
 80012aa:	f00a fde1 	bl	800be70 <puts>
 80012ae:	e010      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80012b4:	d103      	bne.n	80012be <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80012b6:	481b      	ldr	r0, [pc, #108]	@ (8001324 <bno055_writeData+0x1d0>)
 80012b8:	f00a fdda 	bl	800be70 <puts>
 80012bc:	e009      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2be0      	cmp	r3, #224	@ 0xe0
 80012c2:	d106      	bne.n	80012d2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80012c4:	4818      	ldr	r0, [pc, #96]	@ (8001328 <bno055_writeData+0x1d4>)
 80012c6:	f00a fdd3 	bl	800be70 <puts>
 80012ca:	e002      	b.n	80012d2 <bno055_writeData+0x17e>
    return;
 80012cc:	bf00      	nop
 80012ce:	e000      	b.n	80012d2 <bno055_writeData+0x17e>
    return;
 80012d0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000026c 	.word	0x2000026c
 80012dc:	0800f85c 	.word	0x0800f85c
 80012e0:	0800f880 	.word	0x0800f880
 80012e4:	0800f8a8 	.word	0x0800f8a8
 80012e8:	0800f8cc 	.word	0x0800f8cc
 80012ec:	0800f8e4 	.word	0x0800f8e4
 80012f0:	0800f8f8 	.word	0x0800f8f8
 80012f4:	0800f90c 	.word	0x0800f90c
 80012f8:	0800f920 	.word	0x0800f920
 80012fc:	0800f934 	.word	0x0800f934
 8001300:	0800f948 	.word	0x0800f948
 8001304:	0800f960 	.word	0x0800f960
 8001308:	0800f978 	.word	0x0800f978
 800130c:	0800f98c 	.word	0x0800f98c
 8001310:	0800f9a4 	.word	0x0800f9a4
 8001314:	0800f9bc 	.word	0x0800f9bc
 8001318:	0800f9d4 	.word	0x0800f9d4
 800131c:	0800f9f4 	.word	0x0800f9f4
 8001320:	0800fa14 	.word	0x0800fa14
 8001324:	0800fa2c 	.word	0x0800fa2c
 8001328:	0800fa44 	.word	0x0800fa44

0800132c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af02      	add	r7, sp, #8
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <bno055_readData+0x40>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	1dfa      	adds	r2, r7, #7
 8001342:	2364      	movs	r3, #100	@ 0x64
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	2150      	movs	r1, #80	@ 0x50
 800134a:	f005 ff1d 	bl	8007188 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <bno055_readData+0x40>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	b29b      	uxth	r3, r3
 8001356:	2264      	movs	r2, #100	@ 0x64
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	2150      	movs	r1, #80	@ 0x50
 800135e:	f006 f811 	bl	8007384 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000026c 	.word	0x2000026c

08001370 <constrain>:
volatile int lower_base = 40000;

int prev = 0;
int prev_loco = 0;

int constrain(int value, int min, int max) {
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	if (value < min)
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	429a      	cmp	r2, r3
 8001382:	da01      	bge.n	8001388 <constrain+0x18>
		return min;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	e006      	b.n	8001396 <constrain+0x26>
	else if (value > max)
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dd01      	ble.n	8001394 <constrain+0x24>
		return max;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	e000      	b.n	8001396 <constrain+0x26>
	else
		return value;
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <constrain_float>:

float constrain_float(float value,float min,float max){
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	ed87 0a03 	vstr	s0, [r7, #12]
 80013ac:	edc7 0a02 	vstr	s1, [r7, #8]
 80013b0:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value<min){
 80013b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	d501      	bpl.n	80013ca <constrain_float+0x28>
		return min;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	e00b      	b.n	80013e2 <constrain_float+0x40>
	}
	else if(value> max){
 80013ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	dd01      	ble.n	80013e0 <constrain_float+0x3e>
		return max;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	e000      	b.n	80013e2 <constrain_float+0x40>
	}
	else{
		return value;
 80013e0:	68fb      	ldr	r3, [r7, #12]
	}
}
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	0000      	movs	r0, r0
	...

080013f8 <dis_cal>:
		*value = (~*value) + 1;
	}
//	return value;
}

void dis_cal() {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	af00      	add	r7, sp, #0

	// if (ARdistance > 0.0) {
	ARdistance = 5;
 80013fc:	4b7c      	ldr	r3, [pc, #496]	@ (80015f0 <dis_cal+0x1f8>)
 80013fe:	4a7d      	ldr	r2, [pc, #500]	@ (80015f4 <dis_cal+0x1fc>)
 8001400:	601a      	str	r2, [r3, #0]
	RPM_set_lower =(isthreepointer) ?(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 200)<0? (~(int)(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 200) +1):(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 200) :2900;
 8001402:	4b7d      	ldr	r3, [pc, #500]	@ (80015f8 <dis_cal+0x200>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80fa 	beq.w	8001600 <dis_cal+0x208>
 800140c:	4b78      	ldr	r3, [pc, #480]	@ (80015f0 <dis_cal+0x1f8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f899 	bl	8000548 <__aeabi_f2d>
 8001416:	a370      	add	r3, pc, #448	@ (adr r3, 80015d8 <dis_cal+0x1e0>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f8ec 	bl	80005f8 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4614      	mov	r4, r2
 8001426:	461d      	mov	r5, r3
 8001428:	4b71      	ldr	r3, [pc, #452]	@ (80015f0 <dis_cal+0x1f8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff f8dd 	bl	80005f8 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4614      	mov	r4, r2
 8001444:	461d      	mov	r5, r3
 8001446:	4b6a      	ldr	r3, [pc, #424]	@ (80015f0 <dis_cal+0x1f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f87c 	bl	8000548 <__aeabi_f2d>
 8001450:	a363      	add	r3, pc, #396	@ (adr r3, 80015e0 <dis_cal+0x1e8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f8cf 	bl	80005f8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7fe ff11 	bl	8000288 <__aeabi_dsub>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	a35e      	add	r3, pc, #376	@ (adr r3, 80015e8 <dis_cal+0x1f0>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7fe ff0a 	bl	800028c <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b5d      	ldr	r3, [pc, #372]	@ (80015fc <dis_cal+0x204>)
 8001486:	f7fe feff 	bl	8000288 <__aeabi_dsub>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	f7ff fb1f 	bl	8000adc <__aeabi_dcmplt>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d051      	beq.n	8001548 <dis_cal+0x150>
 80014a4:	4b52      	ldr	r3, [pc, #328]	@ (80015f0 <dis_cal+0x1f8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f84d 	bl	8000548 <__aeabi_f2d>
 80014ae:	a34a      	add	r3, pc, #296	@ (adr r3, 80015d8 <dis_cal+0x1e0>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff f8a0 	bl	80005f8 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4614      	mov	r4, r2
 80014be:	461d      	mov	r5, r3
 80014c0:	4b4b      	ldr	r3, [pc, #300]	@ (80015f0 <dis_cal+0x1f8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f83f 	bl	8000548 <__aeabi_f2d>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4620      	mov	r0, r4
 80014d0:	4629      	mov	r1, r5
 80014d2:	f7ff f891 	bl	80005f8 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4614      	mov	r4, r2
 80014dc:	461d      	mov	r5, r3
 80014de:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <dis_cal+0x1f8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f830 	bl	8000548 <__aeabi_f2d>
 80014e8:	a33d      	add	r3, pc, #244	@ (adr r3, 80015e0 <dis_cal+0x1e8>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f883 	bl	80005f8 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4620      	mov	r0, r4
 80014f8:	4629      	mov	r1, r5
 80014fa:	f7fe fec5 	bl	8000288 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	a338      	add	r3, pc, #224	@ (adr r3, 80015e8 <dis_cal+0x1f0>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7fe febe 	bl	800028c <__adddf3>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <dis_cal+0x204>)
 800151e:	f7fe feb3 	bl	8000288 <__aeabi_dsub>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fb15 	bl	8000b58 <__aeabi_d2iz>
 800152e:	4603      	mov	r3, r0
 8001530:	425b      	negs	r3, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fff6 	bl	8000524 <__aeabi_i2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb0a 	bl	8000b58 <__aeabi_d2iz>
 8001544:	4603      	mov	r3, r0
 8001546:	e05d      	b.n	8001604 <dis_cal+0x20c>
 8001548:	4b29      	ldr	r3, [pc, #164]	@ (80015f0 <dis_cal+0x1f8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	a321      	add	r3, pc, #132	@ (adr r3, 80015d8 <dis_cal+0x1e0>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f84e 	bl	80005f8 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4614      	mov	r4, r2
 8001562:	461d      	mov	r5, r3
 8001564:	4b22      	ldr	r3, [pc, #136]	@ (80015f0 <dis_cal+0x1f8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffed 	bl	8000548 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4620      	mov	r0, r4
 8001574:	4629      	mov	r1, r5
 8001576:	f7ff f83f 	bl	80005f8 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4614      	mov	r4, r2
 8001580:	461d      	mov	r5, r3
 8001582:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <dis_cal+0x1f8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ffde 	bl	8000548 <__aeabi_f2d>
 800158c:	a314      	add	r3, pc, #80	@ (adr r3, 80015e0 <dis_cal+0x1e8>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f831 	bl	80005f8 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe fe73 	bl	8000288 <__aeabi_dsub>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	a30f      	add	r3, pc, #60	@ (adr r3, 80015e8 <dis_cal+0x1f0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe fe6c 	bl	800028c <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <dis_cal+0x204>)
 80015c2:	f7fe fe61 	bl	8000288 <__aeabi_dsub>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fac3 	bl	8000b58 <__aeabi_d2iz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	e016      	b.n	8001604 <dis_cal+0x20c>
 80015d6:	bf00      	nop
 80015d8:	20c49ba6 	.word	0x20c49ba6
 80015dc:	403812b0 	.word	0x403812b0
 80015e0:	f5c28f5c 	.word	0xf5c28f5c
 80015e4:	40724828 	.word	0x40724828
 80015e8:	cccccccd 	.word	0xcccccccd
 80015ec:	40af3ccc 	.word	0x40af3ccc
 80015f0:	20000050 	.word	0x20000050
 80015f4:	40a00000 	.word	0x40a00000
 80015f8:	20000054 	.word	0x20000054
 80015fc:	40690000 	.word	0x40690000
 8001600:	f640 3354 	movw	r3, #2900	@ 0xb54
 8001604:	4ab6      	ldr	r2, [pc, #728]	@ (80018e0 <dis_cal+0x4e8>)
 8001606:	6013      	str	r3, [r2, #0]
	RPM_set_lower = constrain(RPM_set_lower, 0, 3200);
 8001608:	4bb5      	ldr	r3, [pc, #724]	@ (80018e0 <dis_cal+0x4e8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff feac 	bl	8001370 <constrain>
 8001618:	4603      	mov	r3, r0
 800161a:	4ab1      	ldr	r2, [pc, #708]	@ (80018e0 <dis_cal+0x4e8>)
 800161c:	6013      	str	r3, [r2, #0]
	RPM_set_upper =(isthreepointer) ?(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 220)<0? (~(int)(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 220) +1):(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 220) :900;
 800161e:	4bb1      	ldr	r3, [pc, #708]	@ (80018e4 <dis_cal+0x4ec>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80e5 	beq.w	80017f2 <dis_cal+0x3fa>
 8001628:	4baf      	ldr	r3, [pc, #700]	@ (80018e8 <dis_cal+0x4f0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff8b 	bl	8000548 <__aeabi_f2d>
 8001632:	a39d      	add	r3, pc, #628	@ (adr r3, 80018a8 <dis_cal+0x4b0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe ffde 	bl	80005f8 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4614      	mov	r4, r2
 8001642:	461d      	mov	r5, r3
 8001644:	4ba8      	ldr	r3, [pc, #672]	@ (80018e8 <dis_cal+0x4f0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff7d 	bl	8000548 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7fe ffcf 	bl	80005f8 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4614      	mov	r4, r2
 8001660:	461d      	mov	r5, r3
 8001662:	4ba1      	ldr	r3, [pc, #644]	@ (80018e8 <dis_cal+0x4f0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff6e 	bl	8000548 <__aeabi_f2d>
 800166c:	a390      	add	r3, pc, #576	@ (adr r3, 80018b0 <dis_cal+0x4b8>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe ffc1 	bl	80005f8 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe05 	bl	800028c <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	a38b      	add	r3, pc, #556	@ (adr r3, 80018b8 <dis_cal+0x4c0>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe fdfa 	bl	8000288 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b92      	ldr	r3, [pc, #584]	@ (80018ec <dis_cal+0x4f4>)
 80016a2:	f7fe fdf1 	bl	8000288 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	f7ff fa11 	bl	8000adc <__aeabi_dcmplt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d051      	beq.n	8001764 <dis_cal+0x36c>
 80016c0:	4b89      	ldr	r3, [pc, #548]	@ (80018e8 <dis_cal+0x4f0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff3f 	bl	8000548 <__aeabi_f2d>
 80016ca:	a377      	add	r3, pc, #476	@ (adr r3, 80018a8 <dis_cal+0x4b0>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff92 	bl	80005f8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4614      	mov	r4, r2
 80016da:	461d      	mov	r5, r3
 80016dc:	4b82      	ldr	r3, [pc, #520]	@ (80018e8 <dis_cal+0x4f0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe ff83 	bl	80005f8 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	4b7b      	ldr	r3, [pc, #492]	@ (80018e8 <dis_cal+0x4f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff22 	bl	8000548 <__aeabi_f2d>
 8001704:	a36a      	add	r3, pc, #424	@ (adr r3, 80018b0 <dis_cal+0x4b8>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe ff75 	bl	80005f8 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7fe fdb9 	bl	800028c <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	a365      	add	r3, pc, #404	@ (adr r3, 80018b8 <dis_cal+0x4c0>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7fe fdae 	bl	8000288 <__aeabi_dsub>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b6c      	ldr	r3, [pc, #432]	@ (80018ec <dis_cal+0x4f4>)
 800173a:	f7fe fda5 	bl	8000288 <__aeabi_dsub>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff fa07 	bl	8000b58 <__aeabi_d2iz>
 800174a:	4603      	mov	r3, r0
 800174c:	425b      	negs	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fee8 	bl	8000524 <__aeabi_i2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f9fc 	bl	8000b58 <__aeabi_d2iz>
 8001760:	4603      	mov	r3, r0
 8001762:	e048      	b.n	80017f6 <dis_cal+0x3fe>
 8001764:	4b60      	ldr	r3, [pc, #384]	@ (80018e8 <dis_cal+0x4f0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe feed 	bl	8000548 <__aeabi_f2d>
 800176e:	a34e      	add	r3, pc, #312	@ (adr r3, 80018a8 <dis_cal+0x4b0>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ff40 	bl	80005f8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <dis_cal+0x4f0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fedf 	bl	8000548 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7fe ff31 	bl	80005f8 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4614      	mov	r4, r2
 800179c:	461d      	mov	r5, r3
 800179e:	4b52      	ldr	r3, [pc, #328]	@ (80018e8 <dis_cal+0x4f0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fed0 	bl	8000548 <__aeabi_f2d>
 80017a8:	a341      	add	r3, pc, #260	@ (adr r3, 80018b0 <dis_cal+0x4b8>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff23 	bl	80005f8 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd67 	bl	800028c <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	a33c      	add	r3, pc, #240	@ (adr r3, 80018b8 <dis_cal+0x4c0>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fd5c 	bl	8000288 <__aeabi_dsub>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b43      	ldr	r3, [pc, #268]	@ (80018ec <dis_cal+0x4f4>)
 80017de:	f7fe fd53 	bl	8000288 <__aeabi_dsub>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9b5 	bl	8000b58 <__aeabi_d2iz>
 80017ee:	4603      	mov	r3, r0
 80017f0:	e001      	b.n	80017f6 <dis_cal+0x3fe>
 80017f2:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80017f6:	4a3e      	ldr	r2, [pc, #248]	@ (80018f0 <dis_cal+0x4f8>)
 80017f8:	6013      	str	r3, [r2, #0]
	RPM_set_upper = constrain(RPM_set_upper, 0, 3200);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	@ (80018f0 <dis_cal+0x4f8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fdb3 	bl	8001370 <constrain>
 800180a:	4603      	mov	r3, r0
 800180c:	4a38      	ldr	r2, [pc, #224]	@ (80018f0 <dis_cal+0x4f8>)
 800180e:	6013      	str	r3, [r2, #0]
	lower_base = 17.2*RPM_set_lower + 4088.9+1400;
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <dis_cal+0x4e8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe85 	bl	8000524 <__aeabi_i2d>
 800181a:	a329      	add	r3, pc, #164	@ (adr r3, 80018c0 <dis_cal+0x4c8>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe feea 	bl	80005f8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	a326      	add	r3, pc, #152	@ (adr r3, 80018c8 <dis_cal+0x4d0>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fd2b 	bl	800028c <__adddf3>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b2c      	ldr	r3, [pc, #176]	@ (80018f4 <dis_cal+0x4fc>)
 8001844:	f7fe fd22 	bl	800028c <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f982 	bl	8000b58 <__aeabi_d2iz>
 8001854:	4603      	mov	r3, r0
 8001856:	4a28      	ldr	r2, [pc, #160]	@ (80018f8 <dis_cal+0x500>)
 8001858:	6013      	str	r3, [r2, #0]
	upper_base = 16.877*RPM_set_upper + 5313.2+1000;
 800185a:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <dis_cal+0x4f8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe60 	bl	8000524 <__aeabi_i2d>
 8001864:	a31a      	add	r3, pc, #104	@ (adr r3, 80018d0 <dis_cal+0x4d8>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fec5 	bl	80005f8 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	a318      	add	r3, pc, #96	@ (adr r3, 80018d8 <dis_cal+0x4e0>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fd06 	bl	800028c <__adddf3>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <dis_cal+0x504>)
 800188e:	f7fe fcfd 	bl	800028c <__adddf3>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f95d 	bl	8000b58 <__aeabi_d2iz>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <dis_cal+0x508>)
 80018a2:	6013      	str	r3, [r2, #0]
	// }
}
 80018a4:	bf00      	nop
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	66666666 	.word	0x66666666
 80018ac:	c05a1666 	.word	0xc05a1666
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	40965ccc 	.word	0x40965ccc
 80018b8:	9999999a 	.word	0x9999999a
 80018bc:	40a44999 	.word	0x40a44999
 80018c0:	33333333 	.word	0x33333333
 80018c4:	40313333 	.word	0x40313333
 80018c8:	cccccccd 	.word	0xcccccccd
 80018cc:	40aff1cc 	.word	0x40aff1cc
 80018d0:	126e978d 	.word	0x126e978d
 80018d4:	4030e083 	.word	0x4030e083
 80018d8:	33333333 	.word	0x33333333
 80018dc:	40b4c133 	.word	0x40b4c133
 80018e0:	20000068 	.word	0x20000068
 80018e4:	20000054 	.word	0x20000054
 80018e8:	20000050 	.word	0x20000050
 80018ec:	406b8000 	.word	0x406b8000
 80018f0:	2000006c 	.word	0x2000006c
 80018f4:	4095e000 	.word	0x4095e000
 80018f8:	20000074 	.word	0x20000074
 80018fc:	408f4000 	.word	0x408f4000
 8001900:	20000070 	.word	0x20000070

08001904 <rotors>:

void rotors(bool flag) {
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	// upper pwm  PE5 tim9 channel 1
	// lower pwm  PE6 tim9 channel 2

	// upper direction PE1
	// lower direction PE3
	if (!flag) {
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <rotors+0x24>
		TIM9->CCR1 = 0;
 800191a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b04 <rotors+0x200>)
 800191c:	2200      	movs	r2, #0
 800191e:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM9->CCR2 = 0;
 8001920:	4b78      	ldr	r3, [pc, #480]	@ (8001b04 <rotors+0x200>)
 8001922:	2200      	movs	r2, #0
 8001924:	639a      	str	r2, [r3, #56]	@ 0x38
		return;
 8001926:	e0ea      	b.n	8001afe <rotors+0x1fa>
	} else
		dis_cal();
 8001928:	f7ff fd66 	bl	80013f8 <dis_cal>
	if (HAL_GetTick() - prev >= 80)
 800192c:	f003 fec2 	bl	80056b4 <HAL_GetTick>
 8001930:	4603      	mov	r3, r0
 8001932:	4a75      	ldr	r2, [pc, #468]	@ (8001b08 <rotors+0x204>)
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	2b4f      	cmp	r3, #79	@ 0x4f
 800193a:	f240 80e0 	bls.w	8001afe <rotors+0x1fa>

	{
		counter_upper = TIM4->CNT;
 800193e:	4b73      	ldr	r3, [pc, #460]	@ (8001b0c <rotors+0x208>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	b21a      	sxth	r2, r3
 8001944:	4b72      	ldr	r3, [pc, #456]	@ (8001b10 <rotors+0x20c>)
 8001946:	801a      	strh	r2, [r3, #0]
		counter_lower = TIM8->CNT;
 8001948:	4b72      	ldr	r3, [pc, #456]	@ (8001b14 <rotors+0x210>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b72      	ldr	r3, [pc, #456]	@ (8001b18 <rotors+0x214>)
 8001950:	801a      	strh	r2, [r3, #0]
		counter_upper = counter_upper / 4;
 8001952:	4b6f      	ldr	r3, [pc, #444]	@ (8001b10 <rotors+0x20c>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da00      	bge.n	800195e <rotors+0x5a>
 800195c:	3303      	adds	r3, #3
 800195e:	109b      	asrs	r3, r3, #2
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b6b      	ldr	r3, [pc, #428]	@ (8001b10 <rotors+0x20c>)
 8001964:	801a      	strh	r2, [r3, #0]
		rpm_upper = (counter_upper * 60000)/(360*((int32_t)HAL_GetTick() - prev));
 8001966:	4b6a      	ldr	r3, [pc, #424]	@ (8001b10 <rotors+0x20c>)
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	461a      	mov	r2, r3
 800196e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001972:	fb03 f402 	mul.w	r4, r3, r2
 8001976:	f003 fe9d 	bl	80056b4 <HAL_GetTick>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b62      	ldr	r3, [pc, #392]	@ (8001b08 <rotors+0x204>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	fb94 f3f3 	sdiv	r3, r4, r3
 8001990:	4a62      	ldr	r2, [pc, #392]	@ (8001b1c <rotors+0x218>)
 8001992:	6013      	str	r3, [r2, #0]

		counter_lower = counter_lower / 4;
 8001994:	4b60      	ldr	r3, [pc, #384]	@ (8001b18 <rotors+0x214>)
 8001996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da00      	bge.n	80019a0 <rotors+0x9c>
 800199e:	3303      	adds	r3, #3
 80019a0:	109b      	asrs	r3, r3, #2
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b18 <rotors+0x214>)
 80019a6:	801a      	strh	r2, [r3, #0]
		rpm_lower =(counter_lower * 60000)/(360*((int32_t)HAL_GetTick() - prev));
 80019a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b18 <rotors+0x214>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80019b4:	fb03 f402 	mul.w	r4, r3, r2
 80019b8:	f003 fe7c 	bl	80056b4 <HAL_GetTick>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	4b51      	ldr	r3, [pc, #324]	@ (8001b08 <rotors+0x204>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	fb94 f3f3 	sdiv	r3, r4, r3
 80019d2:	4a53      	ldr	r2, [pc, #332]	@ (8001b20 <rotors+0x21c>)
 80019d4:	6013      	str	r3, [r2, #0]
		rpm_upper = (rpm_upper)<0?(~rpm_upper +1):rpm_upper;
 80019d6:	4b51      	ldr	r3, [pc, #324]	@ (8001b1c <rotors+0x218>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da03      	bge.n	80019e6 <rotors+0xe2>
 80019de:	4b4f      	ldr	r3, [pc, #316]	@ (8001b1c <rotors+0x218>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	425b      	negs	r3, r3
 80019e4:	e001      	b.n	80019ea <rotors+0xe6>
 80019e6:	4b4d      	ldr	r3, [pc, #308]	@ (8001b1c <rotors+0x218>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a4c      	ldr	r2, [pc, #304]	@ (8001b1c <rotors+0x218>)
 80019ec:	6013      	str	r3, [r2, #0]
		rpm_lower = (rpm_lower)<0?(~rpm_lower +1):rpm_lower;
 80019ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001b20 <rotors+0x21c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da03      	bge.n	80019fe <rotors+0xfa>
 80019f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001b20 <rotors+0x21c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	425b      	negs	r3, r3
 80019fc:	e001      	b.n	8001a02 <rotors+0xfe>
 80019fe:	4b48      	ldr	r3, [pc, #288]	@ (8001b20 <rotors+0x21c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a47      	ldr	r2, [pc, #284]	@ (8001b20 <rotors+0x21c>)
 8001a04:	6013      	str	r3, [r2, #0]
		error_upper = RPM_set_upper - rpm_upper;
 8001a06:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <rotors+0x220>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b44      	ldr	r3, [pc, #272]	@ (8001b1c <rotors+0x218>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a45      	ldr	r2, [pc, #276]	@ (8001b28 <rotors+0x224>)
 8001a12:	6013      	str	r3, [r2, #0]
		error_lower = RPM_set_lower - rpm_lower;
 8001a14:	4b45      	ldr	r3, [pc, #276]	@ (8001b2c <rotors+0x228>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b41      	ldr	r3, [pc, #260]	@ (8001b20 <rotors+0x21c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	4a44      	ldr	r2, [pc, #272]	@ (8001b30 <rotors+0x22c>)
 8001a20:	6013      	str	r3, [r2, #0]

		pwm_upper = upper_base +(kpUpper * error_upper);
 8001a22:	4b44      	ldr	r3, [pc, #272]	@ (8001b34 <rotors+0x230>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b28 <rotors+0x224>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b38 <rotors+0x234>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4c:	ee17 2a90 	vmov	r2, s15
 8001a50:	4b3a      	ldr	r3, [pc, #232]	@ (8001b3c <rotors+0x238>)
 8001a52:	601a      	str	r2, [r3, #0]
		pwm_lower = lower_base +(kpLower * error_lower);
 8001a54:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <rotors+0x23c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a60:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <rotors+0x22c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a6c:	4b35      	ldr	r3, [pc, #212]	@ (8001b44 <rotors+0x240>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7e:	ee17 2a90 	vmov	r2, s15
 8001a82:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <rotors+0x244>)
 8001a84:	601a      	str	r2, [r3, #0]

		pwm_upper = constrain(pwm_upper, 0, 65500);
 8001a86:	4b2d      	ldr	r3, [pc, #180]	@ (8001b3c <rotors+0x238>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fc6d 	bl	8001370 <constrain>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <rotors+0x238>)
 8001a9a:	6013      	str	r3, [r2, #0]
		pwm_lower = constrain(pwm_lower, 0, 65500);
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <rotors+0x244>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc62 	bl	8001370 <constrain>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4a26      	ldr	r2, [pc, #152]	@ (8001b48 <rotors+0x244>)
 8001ab0:	6013      	str	r3, [r2, #0]



		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4825      	ldr	r0, [pc, #148]	@ (8001b4c <rotors+0x248>)
 8001ab8:	f005 f9d8 	bl	8006e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2108      	movs	r1, #8
 8001ac0:	4822      	ldr	r0, [pc, #136]	@ (8001b4c <rotors+0x248>)
 8001ac2:	f005 f9d3 	bl	8006e6c <HAL_GPIO_WritePin>

		TIM9->CCR1 =pwm_upper;  //UPPER
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <rotors+0x238>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <rotors+0x200>)
 8001acc:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM9->CCR2 =pwm_lower;  //LOWER
 8001ace:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <rotors+0x244>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <rotors+0x200>)
 8001ad4:	639a      	str	r2, [r3, #56]	@ 0x38
		prev = HAL_GetTick();
 8001ad6:	f003 fded 	bl	80056b4 <HAL_GetTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <rotors+0x204>)
 8001ae0:	601a      	str	r2, [r3, #0]
		counter_upper=0;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <rotors+0x20c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
		counter_lower = 0;
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <rotors+0x214>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <rotors+0x24c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim8, 0);
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <rotors+0x250>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24

	}

}
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	40014000 	.word	0x40014000
 8001b08:	20000540 	.word	0x20000540
 8001b0c:	40000800 	.word	0x40000800
 8001b10:	20000510 	.word	0x20000510
 8001b14:	40010400 	.word	0x40010400
 8001b18:	20000512 	.word	0x20000512
 8001b1c:	2000051c 	.word	0x2000051c
 8001b20:	20000520 	.word	0x20000520
 8001b24:	2000006c 	.word	0x2000006c
 8001b28:	20000530 	.word	0x20000530
 8001b2c:	20000068 	.word	0x20000068
 8001b30:	20000534 	.word	0x20000534
 8001b34:	20000070 	.word	0x20000070
 8001b38:	20000048 	.word	0x20000048
 8001b3c:	20000538 	.word	0x20000538
 8001b40:	20000074 	.word	0x20000074
 8001b44:	20000044 	.word	0x20000044
 8001b48:	2000053c 	.word	0x2000053c
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	20000438 	.word	0x20000438
 8001b54:	200004c8 	.word	0x200004c8

08001b58 <feed>:

void feed() {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pistonUp_Port, pistonUp_Pin, 1);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2180      	movs	r1, #128	@ 0x80
 8001b60:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <feed+0x44>)
 8001b62:	f005 f983 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001b66:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001b6a:	f003 fdaf 	bl	80056cc <HAL_Delay>
	HAL_GPIO_WritePin(pistonUp_Port, pistonUp_Pin, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	480a      	ldr	r0, [pc, #40]	@ (8001b9c <feed+0x44>)
 8001b74:	f005 f97a 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4808      	ldr	r0, [pc, #32]	@ (8001ba0 <feed+0x48>)
 8001b7e:	f005 f975 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b82:	20c8      	movs	r0, #200	@ 0xc8
 8001b84:	f003 fda2 	bl	80056cc <HAL_Delay>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <feed+0x48>)
 8001b8e:	f005 f96d 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b92:	20c8      	movs	r0, #200	@ 0xc8
 8001b94:	f003 fd9a 	bl	80056cc <HAL_Delay>
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <rpm_cal>:

void rpm_cal() {
 8001ba4:	b598      	push	{r3, r4, r7, lr}
 8001ba6:	af00      	add	r7, sp, #0

	if (HAL_GetTick() - prev_loco >= 80) {
 8001ba8:	f003 fd84 	bl	80056b4 <HAL_GetTick>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a59      	ldr	r2, [pc, #356]	@ (8001d14 <rpm_cal+0x170>)
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	2b4f      	cmp	r3, #79	@ 0x4f
 8001bb6:	f240 80ab 	bls.w	8001d10 <rpm_cal+0x16c>

		counter_4 = TIM1->CNT;
 8001bba:	4b57      	ldr	r3, [pc, #348]	@ (8001d18 <rpm_cal+0x174>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	4b56      	ldr	r3, [pc, #344]	@ (8001d1c <rpm_cal+0x178>)
 8001bc2:	801a      	strh	r2, [r3, #0]
		counter_5 = TIM3->CNT;
 8001bc4:	4b56      	ldr	r3, [pc, #344]	@ (8001d20 <rpm_cal+0x17c>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	4b56      	ldr	r3, [pc, #344]	@ (8001d24 <rpm_cal+0x180>)
 8001bcc:	801a      	strh	r2, [r3, #0]
		counter_8 = TIM5->CNT;
 8001bce:	4b56      	ldr	r3, [pc, #344]	@ (8001d28 <rpm_cal+0x184>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	4b55      	ldr	r3, [pc, #340]	@ (8001d2c <rpm_cal+0x188>)
 8001bd6:	801a      	strh	r2, [r3, #0]

		counter_8 = counter_8 / 4;
 8001bd8:	4b54      	ldr	r3, [pc, #336]	@ (8001d2c <rpm_cal+0x188>)
 8001bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da00      	bge.n	8001be4 <rpm_cal+0x40>
 8001be2:	3303      	adds	r3, #3
 8001be4:	109b      	asrs	r3, r3, #2
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b50      	ldr	r3, [pc, #320]	@ (8001d2c <rpm_cal+0x188>)
 8001bea:	801a      	strh	r2, [r3, #0]
		rpm1 = (counter_8 *60000)/(360*((int32_t)HAL_GetTick()-prev_loco));
 8001bec:	4b4f      	ldr	r3, [pc, #316]	@ (8001d2c <rpm_cal+0x188>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001bf8:	fb03 f402 	mul.w	r4, r3, r2
 8001bfc:	f003 fd5a 	bl	80056b4 <HAL_GetTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <rpm_cal+0x170>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	fb94 f3f3 	sdiv	r3, r4, r3
 8001c16:	4a46      	ldr	r2, [pc, #280]	@ (8001d30 <rpm_cal+0x18c>)
 8001c18:	6013      	str	r3, [r2, #0]

		counter_5 = counter_5 / 4;
 8001c1a:	4b42      	ldr	r3, [pc, #264]	@ (8001d24 <rpm_cal+0x180>)
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da00      	bge.n	8001c26 <rpm_cal+0x82>
 8001c24:	3303      	adds	r3, #3
 8001c26:	109b      	asrs	r3, r3, #2
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d24 <rpm_cal+0x180>)
 8001c2c:	801a      	strh	r2, [r3, #0]
		rpm2 = (counter_5 *60000)/(600*((int32_t)HAL_GetTick()-prev_loco));
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d24 <rpm_cal+0x180>)
 8001c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c34:	461a      	mov	r2, r3
 8001c36:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001c3a:	fb03 f402 	mul.w	r4, r3, r2
 8001c3e:	f003 fd39 	bl	80056b4 <HAL_GetTick>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b33      	ldr	r3, [pc, #204]	@ (8001d14 <rpm_cal+0x170>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	fb94 f3f3 	sdiv	r3, r4, r3
 8001c58:	4a36      	ldr	r2, [pc, #216]	@ (8001d34 <rpm_cal+0x190>)
 8001c5a:	6013      	str	r3, [r2, #0]
//		rpm1 = (counter_8 *60000)/(600*((int32_t)HAL_GetTick()-prev_loco));
//
//		counter_5 = counter_5 / 4;
//		rpm2 = (counter_5 *60000)/(360*((int32_t)HAL_GetTick()-prev_loco));

		counter_4 = counter_4 / 4;
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d1c <rpm_cal+0x178>)
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da00      	bge.n	8001c68 <rpm_cal+0xc4>
 8001c66:	3303      	adds	r3, #3
 8001c68:	109b      	asrs	r3, r3, #2
 8001c6a:	b21a      	sxth	r2, r3
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <rpm_cal+0x178>)
 8001c6e:	801a      	strh	r2, [r3, #0]
		rpm3 =(counter_4 *60000)/(360*((int32_t)HAL_GetTick() -prev_loco));
 8001c70:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <rpm_cal+0x178>)
 8001c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001c7c:	fb03 f402 	mul.w	r4, r3, r2
 8001c80:	f003 fd18 	bl	80056b4 <HAL_GetTick>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <rpm_cal+0x170>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	fb94 f3f3 	sdiv	r3, r4, r3
 8001c9a:	4a27      	ldr	r2, [pc, #156]	@ (8001d38 <rpm_cal+0x194>)
 8001c9c:	6013      	str	r3, [r2, #0]

		rpm1 = (rpm1<0)?(~rpm1) +1 : rpm1;
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <rpm_cal+0x18c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da03      	bge.n	8001cae <rpm_cal+0x10a>
 8001ca6:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <rpm_cal+0x18c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	425b      	negs	r3, r3
 8001cac:	e001      	b.n	8001cb2 <rpm_cal+0x10e>
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <rpm_cal+0x18c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d30 <rpm_cal+0x18c>)
 8001cb4:	6013      	str	r3, [r2, #0]
		rpm2 = (rpm2<0)?(~rpm2) +1: rpm2;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <rpm_cal+0x190>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da03      	bge.n	8001cc6 <rpm_cal+0x122>
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <rpm_cal+0x190>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	e001      	b.n	8001cca <rpm_cal+0x126>
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <rpm_cal+0x190>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1a      	ldr	r2, [pc, #104]	@ (8001d34 <rpm_cal+0x190>)
 8001ccc:	6013      	str	r3, [r2, #0]
		rpm3 = (rpm3<0)?(~rpm3)+1:rpm3;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <rpm_cal+0x194>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da03      	bge.n	8001cde <rpm_cal+0x13a>
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <rpm_cal+0x194>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	e001      	b.n	8001ce2 <rpm_cal+0x13e>
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <rpm_cal+0x194>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a15      	ldr	r2, [pc, #84]	@ (8001d38 <rpm_cal+0x194>)
 8001ce4:	6013      	str	r3, [r2, #0]
//			  rotors();

		prev_loco = HAL_GetTick();
 8001ce6:	f003 fce5 	bl	80056b4 <HAL_GetTick>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <rpm_cal+0x170>)
 8001cf0:	601a      	str	r2, [r3, #0]
		counter_4, counter_5, counter_8 = 0;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <rpm_cal+0x188>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001cf8:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <rpm_cal+0x198>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001d00:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <rpm_cal+0x19c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001d08:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <rpm_cal+0x1a0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	@ 0x24

	}
}
 8001d10:	bf00      	nop
 8001d12:	bd98      	pop	{r3, r4, r7, pc}
 8001d14:	20000544 	.word	0x20000544
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	20000514 	.word	0x20000514
 8001d20:	40000400 	.word	0x40000400
 8001d24:	20000516 	.word	0x20000516
 8001d28:	40000c00 	.word	0x40000c00
 8001d2c:	20000518 	.word	0x20000518
 8001d30:	20000524 	.word	0x20000524
 8001d34:	20000528 	.word	0x20000528
 8001d38:	2000052c 	.word	0x2000052c
 8001d3c:	200003a8 	.word	0x200003a8
 8001d40:	200003f0 	.word	0x200003f0
 8001d44:	20000480 	.word	0x20000480

08001d48 <Rxvalueslo>:
#ifndef SRC_COMMUNICATION_H_
#define SRC_COMMUNICATION_H_

#include "variables.h"
#include "cJSON.h"
int Rxvalueslo(char *Rx_data){
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	if(Rx_data!=NULL && Rx_data[0] =='{'){
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80b3 	beq.w	8001ebe <Rxvalueslo+0x176>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b7b      	cmp	r3, #123	@ 0x7b
 8001d5e:	f040 80ae 	bne.w	8001ebe <Rxvalueslo+0x176>
		loco = Rx_data[8];
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7a1a      	ldrb	r2, [r3, #8]
 8001d66:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed8 <Rxvalueslo+0x190>)
 8001d68:	701a      	strb	r2, [r3, #0]
		char Rotate[4];
		strncpy(Rotate, Rx_data +9, 3);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f103 0109 	add.w	r1, r3, #9
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2203      	movs	r2, #3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f00a f9c4 	bl	800c104 <strncpy>
		rotationstrength = atoi(Rotate);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4618      	mov	r0, r3
 8001d82:	f008 fdc5 	bl	800a910 <atoi>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a54      	ldr	r2, [pc, #336]	@ (8001edc <Rxvalueslo+0x194>)
 8001d8a:	6013      	str	r3, [r2, #0]
		char Angle[4];
		strncpy(Angle, Rx_data +12, 3);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f103 010c 	add.w	r1, r3, #12
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	2203      	movs	r2, #3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f00a f9b3 	bl	800c104 <strncpy>
		angle = atoi(Angle);
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	4618      	mov	r0, r3
 8001da4:	f008 fdb4 	bl	800a910 <atoi>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee0 <Rxvalueslo+0x198>)
 8001dac:	6013      	str	r3, [r2, #0]
//		angle = (angle == 400) ? 400 : (angle + 180) % 360;

		char Strength[4];
		strncpy(Strength, Rx_data +15, 3);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f103 010f 	add.w	r1, r3, #15
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2203      	movs	r2, #3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00a f9a2 	bl	800c104 <strncpy>
		strengthX = atoi(Strength);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f008 fda3 	bl	800a910 <atoi>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a45      	ldr	r2, [pc, #276]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001dce:	6013      	str	r3, [r2, #0]
		 if ((int32_t)HAL_GetTick() - strengthsampling > 30) {
 8001dd0:	f003 fc70 	bl	80056b4 <HAL_GetTick>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ee8 <Rxvalueslo+0x1a0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b1e      	cmp	r3, #30
 8001de0:	dd63      	ble.n	8001eaa <Rxvalueslo+0x162>
			if (strengthX - strengthc >30) {
 8001de2:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <Rxvalueslo+0x1a4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b1e      	cmp	r3, #30
 8001dee:	dd23      	ble.n	8001e38 <Rxvalueslo+0xf0>
				strengthX -= (strengthX - strengthc) * 0.89;
 8001df0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb95 	bl	8000524 <__aeabi_i2d>
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	460d      	mov	r5, r1
 8001dfe:	4b39      	ldr	r3, [pc, #228]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4b3a      	ldr	r3, [pc, #232]	@ (8001eec <Rxvalueslo+0x1a4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb8b 	bl	8000524 <__aeabi_i2d>
 8001e0e:	a32e      	add	r3, pc, #184	@ (adr r3, 8001ec8 <Rxvalueslo+0x180>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fbf0 	bl	80005f8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	4629      	mov	r1, r5
 8001e20:	f7fe fa32 	bl	8000288 <__aeabi_dsub>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fe94 	bl	8000b58 <__aeabi_d2iz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e02a      	b.n	8001e8e <Rxvalueslo+0x146>
			 } else if (strengthX - strengthc < -30) {
 8001e38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <Rxvalueslo+0x1a4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f113 0f1e 	cmn.w	r3, #30
 8001e46:	da22      	bge.n	8001e8e <Rxvalueslo+0x146>
					   strengthX -= (strengthX - strengthc) * 0.90;
 8001e48:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fb69 	bl	8000524 <__aeabi_i2d>
 8001e52:	4604      	mov	r4, r0
 8001e54:	460d      	mov	r5, r1
 8001e56:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b24      	ldr	r3, [pc, #144]	@ (8001eec <Rxvalueslo+0x1a4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb5f 	bl	8000524 <__aeabi_i2d>
 8001e66:	a31a      	add	r3, pc, #104	@ (adr r3, 8001ed0 <Rxvalueslo+0x188>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa06 	bl	8000288 <__aeabi_dsub>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7fe fe68 	bl	8000b58 <__aeabi_d2iz>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001e8c:	6013      	str	r3, [r2, #0]
			 }
			 strengthc = strengthX;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <Rxvalueslo+0x1a4>)
 8001e94:	6013      	str	r3, [r2, #0]
					strength = strengthX;
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <Rxvalueslo+0x19c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <Rxvalueslo+0x1a8>)
 8001e9c:	6013      	str	r3, [r2, #0]
					   strengthsampling = HAL_GetTick();
 8001e9e:	f003 fc09 	bl	80056b4 <HAL_GetTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <Rxvalueslo+0x1a0>)
 8001ea8:	601a      	str	r2, [r3, #0]
					 }
					 strength  = constrain(strength,0,85);
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <Rxvalueslo+0x1a8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2255      	movs	r2, #85	@ 0x55
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fa5c 	bl	8001370 <constrain>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <Rxvalueslo+0x1a8>)
 8001ebc:	6013      	str	r3, [r2, #0]


	}
}
 8001ebe:	bf00      	nop
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec8:	47ae147b 	.word	0x47ae147b
 8001ecc:	3fec7ae1 	.word	0x3fec7ae1
 8001ed0:	cccccccd 	.word	0xcccccccd
 8001ed4:	3feccccc 	.word	0x3feccccc
 8001ed8:	20000040 	.word	0x20000040
 8001edc:	2000031c 	.word	0x2000031c
 8001ee0:	20000330 	.word	0x20000330
 8001ee4:	20000328 	.word	0x20000328
 8001ee8:	2000032c 	.word	0x2000032c
 8001eec:	20000324 	.word	0x20000324
 8001ef0:	20000320 	.word	0x20000320

08001ef4 <Arvalueslo>:
int Arvalueslo(char *Ar_data){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
   if(Ar_data!= NULL){
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d017      	beq.n	8001f32 <Arvalueslo+0x3e>
	   strncpy(disString,Ar_data +6,7);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3306      	adds	r3, #6
 8001f06:	2207      	movs	r2, #7
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480c      	ldr	r0, [pc, #48]	@ (8001f3c <Arvalueslo+0x48>)
 8001f0c:	f00a f8fa 	bl	800c104 <strncpy>
	   strncpy(angleString,Ar_data + 20,7);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3314      	adds	r3, #20
 8001f14:	2207      	movs	r2, #7
 8001f16:	4619      	mov	r1, r3
 8001f18:	4809      	ldr	r0, [pc, #36]	@ (8001f40 <Arvalueslo+0x4c>)
 8001f1a:	f00a f8f3 	bl	800c104 <strncpy>
	   sscanf(disString,"%f",&ARdistance);
 8001f1e:	4a09      	ldr	r2, [pc, #36]	@ (8001f44 <Arvalueslo+0x50>)
 8001f20:	4909      	ldr	r1, [pc, #36]	@ (8001f48 <Arvalueslo+0x54>)
 8001f22:	4806      	ldr	r0, [pc, #24]	@ (8001f3c <Arvalueslo+0x48>)
 8001f24:	f009 ffce 	bl	800bec4 <siscanf>
	   sscanf(angleString,"%f",&alpha);
 8001f28:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <Arvalueslo+0x58>)
 8001f2a:	4907      	ldr	r1, [pc, #28]	@ (8001f48 <Arvalueslo+0x54>)
 8001f2c:	4804      	ldr	r0, [pc, #16]	@ (8001f40 <Arvalueslo+0x4c>)
 8001f2e:	f009 ffc9 	bl	800bec4 <siscanf>
   }
}
 8001f32:	bf00      	nop
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200002d4 	.word	0x200002d4
 8001f40:	200002dc 	.word	0x200002dc
 8001f44:	20000050 	.word	0x20000050
 8001f48:	0800fa5c 	.word	0x0800fa5c
 8001f4c:	200002ac 	.word	0x200002ac

08001f50 <Mpuvalueslo>:
int Mpuvalueslo(char *Mp_data){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	sscanf(Mp_data,"%f",&Z_Val);
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <Mpuvalueslo+0x1c>)
 8001f5a:	4905      	ldr	r1, [pc, #20]	@ (8001f70 <Mpuvalueslo+0x20>)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f009 ffb1 	bl	800bec4 <siscanf>
}
 8001f62:	bf00      	nop
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000318 	.word	0x20000318
 8001f70:	0800fa5c 	.word	0x0800fa5c
 8001f74:	00000000 	.word	0x00000000

08001f78 <align>:
 */

#ifndef SRC_ALIGNMENT_H_
#define SRC_ALIGNMENT_H_

bool align(float target) {
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	ed87 0a01 	vstr	s0, [r7, #4]

  float delta = target - Z_Val;
 8001f82:	4bb9      	ldr	r3, [pc, #740]	@ (8002268 <align+0x2f0>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f90:	edc7 7a03 	vstr	s15, [r7, #12]
  if (delta > 180) {
 8001f94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f98:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800226c <align+0x2f4>
 8001f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa4:	dd07      	ble.n	8001fb6 <align+0x3e>
    delta = delta - 360;
 8001fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001faa:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002270 <align+0x2f8>
 8001fae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fb2:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  if (delta < -180) {
 8001fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fba:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8002274 <align+0x2fc>
 8001fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	d507      	bpl.n	8001fd8 <align+0x60>
    delta = delta + 360;
 8001fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fcc:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8002270 <align+0x2f8>
 8001fd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fd4:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  if (initialdelta == 0) {
 8001fd8:	4ba7      	ldr	r3, [pc, #668]	@ (8002278 <align+0x300>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	d102      	bne.n	8001fee <align+0x76>
    initialdelta = delta;
 8001fe8:	4aa3      	ldr	r2, [pc, #652]	@ (8002278 <align+0x300>)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6013      	str	r3, [r2, #0]
  }


  s = delta;
 8001fee:	4aa3      	ldr	r2, [pc, #652]	@ (800227c <align+0x304>)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6013      	str	r3, [r2, #0]
  if (initialdelta < 0) {
 8001ff4:	4ba0      	ldr	r3, [pc, #640]	@ (8002278 <align+0x300>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	d52f      	bpl.n	8002064 <align+0xec>
    if (delta > -1.6 + initialdelta*0.05 && delta < 1.6) {
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7fe fa9f 	bl	8000548 <__aeabi_f2d>
 800200a:	4604      	mov	r4, r0
 800200c:	460d      	mov	r5, r1
 800200e:	4b9a      	ldr	r3, [pc, #616]	@ (8002278 <align+0x300>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa98 	bl	8000548 <__aeabi_f2d>
 8002018:	a38b      	add	r3, pc, #556	@ (adr r3, 8002248 <align+0x2d0>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe faeb 	bl	80005f8 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	a389      	add	r3, pc, #548	@ (adr r3, 8002250 <align+0x2d8>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe f92a 	bl	8000288 <__aeabi_dsub>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4620      	mov	r0, r4
 800203a:	4629      	mov	r1, r5
 800203c:	f7fe fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03d      	beq.n	80020c2 <align+0x14a>
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7fe fa7e 	bl	8000548 <__aeabi_f2d>
 800204c:	a380      	add	r3, pc, #512	@ (adr r3, 8002250 <align+0x2d8>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe fd43 	bl	8000adc <__aeabi_dcmplt>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d032      	beq.n	80020c2 <align+0x14a>
      donealign = true;
 800205c:	4b88      	ldr	r3, [pc, #544]	@ (8002280 <align+0x308>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e02e      	b.n	80020c2 <align+0x14a>
    }
  } else {
    if (delta > -1.6 && delta < 1.6 + initialdelta*0.05) {
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7fe fa6f 	bl	8000548 <__aeabi_f2d>
 800206a:	a37b      	add	r3, pc, #492	@ (adr r3, 8002258 <align+0x2e0>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe fd52 	bl	8000b18 <__aeabi_dcmpgt>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d023      	beq.n	80020c2 <align+0x14a>
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7fe fa64 	bl	8000548 <__aeabi_f2d>
 8002080:	4604      	mov	r4, r0
 8002082:	460d      	mov	r5, r1
 8002084:	4b7c      	ldr	r3, [pc, #496]	@ (8002278 <align+0x300>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa5d 	bl	8000548 <__aeabi_f2d>
 800208e:	a36e      	add	r3, pc, #440	@ (adr r3, 8002248 <align+0x2d0>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fab0 	bl	80005f8 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	a36b      	add	r3, pc, #428	@ (adr r3, 8002250 <align+0x2d8>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe f8f1 	bl	800028c <__adddf3>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4620      	mov	r0, r4
 80020b0:	4629      	mov	r1, r5
 80020b2:	f7fe fd13 	bl	8000adc <__aeabi_dcmplt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <align+0x14a>
      donealign = true;
 80020bc:	4b70      	ldr	r3, [pc, #448]	@ (8002280 <align+0x308>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
    }
  }
  // if (abs(delta) < 1) {
  if (donealign) {
 80020c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002280 <align+0x308>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d02b      	beq.n	8002122 <align+0x1aa>
	if(delta < 2 && delta >-2){
 80020ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ce:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80020d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d51c      	bpl.n	8002116 <align+0x19e>
 80020dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80020e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	dd13      	ble.n	8002116 <align+0x19e>
    w = 0;
 80020ee:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <align+0x30c>)
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
    alignn = true;
 80020f6:	4b64      	ldr	r3, [pc, #400]	@ (8002288 <align+0x310>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
    integralalign = 0;
 80020fc:	4b63      	ldr	r3, [pc, #396]	@ (800228c <align+0x314>)
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
    donealign = false;
 8002104:	4b5e      	ldr	r3, [pc, #376]	@ (8002280 <align+0x308>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
    initialdelta = 0;
 800210a:	4b5b      	ldr	r3, [pc, #364]	@ (8002278 <align+0x300>)
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    return true;}
 8002112:	2301      	movs	r3, #1
 8002114:	e137      	b.n	8002386 <align+0x40e>
	else{
		initialdelta =0;
 8002116:	4b58      	ldr	r3, [pc, #352]	@ (8002278 <align+0x300>)
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
		return false;
 800211e:	2300      	movs	r3, #0
 8002120:	e131      	b.n	8002386 <align+0x40e>
	}
  }
  if (HAL_GetTick() - previousalignsampling > 20) {
 8002122:	f003 fac7 	bl	80056b4 <HAL_GetTick>
 8002126:	4603      	mov	r3, r0
 8002128:	4a59      	ldr	r2, [pc, #356]	@ (8002290 <align+0x318>)
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	2b14      	cmp	r3, #20
 8002130:	f240 8128 	bls.w	8002384 <align+0x40c>

    if (s< 120.0 && s > -120.0) {
 8002134:	4b51      	ldr	r3, [pc, #324]	@ (800227c <align+0x304>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002294 <align+0x31c>
 800213e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	f140 80fc 	bpl.w	8002342 <align+0x3ca>
 800214a:	4b4c      	ldr	r3, [pc, #304]	@ (800227c <align+0x304>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002298 <align+0x320>
 8002154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	f340 80f1 	ble.w	8002342 <align+0x3ca>
      if (s < 10.0 && s > -10.0) {
 8002160:	4b46      	ldr	r3, [pc, #280]	@ (800227c <align+0x304>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800216a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002172:	d522      	bpl.n	80021ba <align+0x242>
 8002174:	4b41      	ldr	r3, [pc, #260]	@ (800227c <align+0x304>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 800217e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	dd18      	ble.n	80021ba <align+0x242>
        integralalign += s;
 8002188:	4b40      	ldr	r3, [pc, #256]	@ (800228c <align+0x314>)
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	4b3b      	ldr	r3, [pc, #236]	@ (800227c <align+0x304>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002198:	4b3c      	ldr	r3, [pc, #240]	@ (800228c <align+0x314>)
 800219a:	edc3 7a00 	vstr	s15, [r3]
        if (integralalign > 100) {
 800219e:	4b3b      	ldr	r3, [pc, #236]	@ (800228c <align+0x314>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800229c <align+0x324>
 80021a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	dd07      	ble.n	80021c2 <align+0x24a>
          integralalign = 100.0;
 80021b2:	4b36      	ldr	r3, [pc, #216]	@ (800228c <align+0x314>)
 80021b4:	4a3a      	ldr	r2, [pc, #232]	@ (80022a0 <align+0x328>)
 80021b6:	601a      	str	r2, [r3, #0]
        if (integralalign > 100) {
 80021b8:	e003      	b.n	80021c2 <align+0x24a>
        }
      }
      else{
         integralalign = 0;
 80021ba:	4b34      	ldr	r3, [pc, #208]	@ (800228c <align+0x314>)
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
      }

      // w = (s < 0) ? s * 0.02 + (s - previousS) * 0.089 + 0.0000018*integralalign  : (s * 0.02  + (s - previousS) * 0.089 + 0.0000018*integralalign );
      errordiff_align = s - previousS;
 80021c2:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <align+0x304>)
 80021c4:	ed93 7a00 	vldr	s14, [r3]
 80021c8:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <align+0x32c>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d2:	4b35      	ldr	r3, [pc, #212]	@ (80022a8 <align+0x330>)
 80021d4:	edc3 7a00 	vstr	s15, [r3]
      if (s < 0) {
 80021d8:	4b28      	ldr	r3, [pc, #160]	@ (800227c <align+0x304>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	d569      	bpl.n	80022bc <align+0x344>
        w_align = kp_align * s + kd_align * errordiff_align + ki_align * integralalign - 0.2;
 80021e8:	4b30      	ldr	r3, [pc, #192]	@ (80022ac <align+0x334>)
 80021ea:	ed93 7a00 	vldr	s14, [r3]
 80021ee:	4b23      	ldr	r3, [pc, #140]	@ (800227c <align+0x304>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f8:	4b2d      	ldr	r3, [pc, #180]	@ (80022b0 <align+0x338>)
 80021fa:	edd3 6a00 	vldr	s13, [r3]
 80021fe:	4b2a      	ldr	r3, [pc, #168]	@ (80022a8 <align+0x330>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220c:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <align+0x33c>)
 800220e:	edd3 6a00 	vldr	s13, [r3]
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <align+0x314>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002220:	ee17 0a90 	vmov	r0, s15
 8002224:	f7fe f990 	bl	8000548 <__aeabi_f2d>
 8002228:	a30d      	add	r3, pc, #52	@ (adr r3, 8002260 <align+0x2e8>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fe f82b 	bl	8000288 <__aeabi_dsub>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7fe fcd5 	bl	8000be8 <__aeabi_d2f>
 800223e:	4603      	mov	r3, r0
 8002240:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <align+0x340>)
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e068      	b.n	8002318 <align+0x3a0>
 8002246:	bf00      	nop
 8002248:	9999999a 	.word	0x9999999a
 800224c:	3fa99999 	.word	0x3fa99999
 8002250:	9999999a 	.word	0x9999999a
 8002254:	3ff99999 	.word	0x3ff99999
 8002258:	9999999a 	.word	0x9999999a
 800225c:	bff99999 	.word	0xbff99999
 8002260:	9999999a 	.word	0x9999999a
 8002264:	3fc99999 	.word	0x3fc99999
 8002268:	20000318 	.word	0x20000318
 800226c:	43340000 	.word	0x43340000
 8002270:	43b40000 	.word	0x43b40000
 8002274:	c3340000 	.word	0xc3340000
 8002278:	200002ec 	.word	0x200002ec
 800227c:	200002f0 	.word	0x200002f0
 8002280:	200002f4 	.word	0x200002f4
 8002284:	20000348 	.word	0x20000348
 8002288:	20000020 	.word	0x20000020
 800228c:	200002f8 	.word	0x200002f8
 8002290:	20000300 	.word	0x20000300
 8002294:	42f00000 	.word	0x42f00000
 8002298:	c2f00000 	.word	0xc2f00000
 800229c:	42c80000 	.word	0x42c80000
 80022a0:	42c80000 	.word	0x42c80000
 80022a4:	20000304 	.word	0x20000304
 80022a8:	20000308 	.word	0x20000308
 80022ac:	20000028 	.word	0x20000028
 80022b0:	2000002c 	.word	0x2000002c
 80022b4:	20000030 	.word	0x20000030
 80022b8:	200002fc 	.word	0x200002fc
      } else {
        w_align = kp_align * s + kd_align * errordiff_align + ki_align * integralalign + 0.2;
 80022bc:	4b36      	ldr	r3, [pc, #216]	@ (8002398 <align+0x420>)
 80022be:	ed93 7a00 	vldr	s14, [r3]
 80022c2:	4b36      	ldr	r3, [pc, #216]	@ (800239c <align+0x424>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022cc:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <align+0x428>)
 80022ce:	edd3 6a00 	vldr	s13, [r3]
 80022d2:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <align+0x42c>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e0:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <align+0x430>)
 80022e2:	edd3 6a00 	vldr	s13, [r3]
 80022e6:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <align+0x434>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f4:	ee17 0a90 	vmov	r0, s15
 80022f8:	f7fe f926 	bl	8000548 <__aeabi_f2d>
 80022fc:	a324      	add	r3, pc, #144	@ (adr r3, 8002390 <align+0x418>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fd ffc3 	bl	800028c <__adddf3>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f7fe fc6b 	bl	8000be8 <__aeabi_d2f>
 8002312:	4603      	mov	r3, r0
 8002314:	4a26      	ldr	r2, [pc, #152]	@ (80023b0 <align+0x438>)
 8002316:	6013      	str	r3, [r2, #0]
      }

      w_align = constrain_float(w_align, -2, 2);
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <align+0x438>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8002322:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 8002326:	eeb0 0a67 	vmov.f32	s0, s15
 800232a:	f7ff f83a 	bl	80013a2 <constrain_float>
 800232e:	eef0 7a40 	vmov.f32	s15, s0
 8002332:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <align+0x438>)
 8002334:	edc3 7a00 	vstr	s15, [r3]
      w = w_align;
 8002338:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <align+0x438>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1d      	ldr	r2, [pc, #116]	@ (80023b4 <align+0x43c>)
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e00e      	b.n	8002360 <align+0x3e8>
    } else {
      w = (s < 0) ? -2 : 2;
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <align+0x424>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	d502      	bpl.n	8002358 <align+0x3e0>
 8002352:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002356:	e001      	b.n	800235c <align+0x3e4>
 8002358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800235c:	4a15      	ldr	r2, [pc, #84]	@ (80023b4 <align+0x43c>)
 800235e:	6013      	str	r3, [r2, #0]
    }
    w = -w;
 8002360:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <align+0x43c>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	eef1 7a67 	vneg.f32	s15, s15
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <align+0x43c>)
 800236c:	edc3 7a00 	vstr	s15, [r3]
    previousalignsampling = HAL_GetTick();
 8002370:	f003 f9a0 	bl	80056b4 <HAL_GetTick>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <align+0x440>)
 800237a:	601a      	str	r2, [r3, #0]
    previousS = s;
 800237c:	4b07      	ldr	r3, [pc, #28]	@ (800239c <align+0x424>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0e      	ldr	r2, [pc, #56]	@ (80023bc <align+0x444>)
 8002382:	6013      	str	r3, [r2, #0]
  }
  // Serial.print("::");
  // Serial.print(w);
//   digitalWrite(A14,0);
  return false;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bdb0      	pop	{r4, r5, r7, pc}
 800238e:	bf00      	nop
 8002390:	9999999a 	.word	0x9999999a
 8002394:	3fc99999 	.word	0x3fc99999
 8002398:	20000028 	.word	0x20000028
 800239c:	200002f0 	.word	0x200002f0
 80023a0:	2000002c 	.word	0x2000002c
 80023a4:	20000308 	.word	0x20000308
 80023a8:	20000030 	.word	0x20000030
 80023ac:	200002f8 	.word	0x200002f8
 80023b0:	200002fc 	.word	0x200002fc
 80023b4:	20000348 	.word	0x20000348
 80023b8:	20000300 	.word	0x20000300
 80023bc:	20000304 	.word	0x20000304

080023c0 <toradian>:
#define SRC_LOCOMOTION_H_
#include "variables.h"
#include "alignment.h"
void calc();
void locomote();
double toradian(double x) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	ed87 0b00 	vstr	d0, [r7]
  return x * pi / 180;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <toradian+0x40>)
 80023cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023d4:	f7fe f910 	bl	80005f8 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <toradian+0x44>)
 80023e6:	f7fe fa31 	bl	800084c <__aeabi_ddiv>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80023f2:	eeb0 0a47 	vmov.f32	s0, s14
 80023f6:	eef0 0a67 	vmov.f32	s1, s15
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000038 	.word	0x20000038
 8002404:	40668000 	.word	0x40668000

08002408 <locomotion>:


void locomotion() {
 8002408:	b5b0      	push	{r4, r5, r7, lr}
 800240a:	af00      	add	r7, sp, #0
  // alignn = false;
  if (!alignn) {
 800240c:	4b8f      	ldr	r3, [pc, #572]	@ (800264c <locomotion+0x244>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <locomotion+0x28>
    alignn = align(alignvalue);
 800241a:	4b8d      	ldr	r3, [pc, #564]	@ (8002650 <locomotion+0x248>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eeb0 0a67 	vmov.f32	s0, s15
 8002424:	f7ff fda8 	bl	8001f78 <align>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b87      	ldr	r3, [pc, #540]	@ (800264c <locomotion+0x244>)
 800242e:	701a      	strb	r2, [r3, #0]
  // Serial.print(s);
  // Serial.print("  ");
  // Serial.print(alpha);
  // Serial.print("  ");
  // Serial.println(Z_Val);
  switch (loco) {
 8002430:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <locomotion+0x24c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	3b4b      	subs	r3, #75	@ 0x4b
 8002436:	2b24      	cmp	r3, #36	@ 0x24
 8002438:	f200 80f9 	bhi.w	800262e <locomotion+0x226>
 800243c:	a201      	add	r2, pc, #4	@ (adr r2, 8002444 <locomotion+0x3c>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	0800260b 	.word	0x0800260b
 8002448:	0800252d 	.word	0x0800252d
 800244c:	0800262f 	.word	0x0800262f
 8002450:	0800262f 	.word	0x0800262f
 8002454:	08002623 	.word	0x08002623
 8002458:	0800262f 	.word	0x0800262f
 800245c:	0800262f 	.word	0x0800262f
 8002460:	08002593 	.word	0x08002593
 8002464:	080024d9 	.word	0x080024d9
 8002468:	0800262f 	.word	0x0800262f
 800246c:	0800262f 	.word	0x0800262f
 8002470:	0800262f 	.word	0x0800262f
 8002474:	0800262f 	.word	0x0800262f
 8002478:	0800262f 	.word	0x0800262f
 800247c:	0800262f 	.word	0x0800262f
 8002480:	0800262f 	.word	0x0800262f
 8002484:	0800262f 	.word	0x0800262f
 8002488:	0800262f 	.word	0x0800262f
 800248c:	0800262f 	.word	0x0800262f
 8002490:	0800262f 	.word	0x0800262f
 8002494:	0800262f 	.word	0x0800262f
 8002498:	0800262f 	.word	0x0800262f
 800249c:	0800262f 	.word	0x0800262f
 80024a0:	0800262f 	.word	0x0800262f
 80024a4:	0800262f 	.word	0x0800262f
 80024a8:	0800262f 	.word	0x0800262f
 80024ac:	0800262f 	.word	0x0800262f
 80024b0:	0800262f 	.word	0x0800262f
 80024b4:	0800262f 	.word	0x0800262f
 80024b8:	0800262f 	.word	0x0800262f
 80024bc:	0800262f 	.word	0x0800262f
 80024c0:	0800262f 	.word	0x0800262f
 80024c4:	080025ff 	.word	0x080025ff
 80024c8:	0800262f 	.word	0x0800262f
 80024cc:	0800262f 	.word	0x0800262f
 80024d0:	0800262f 	.word	0x0800262f
 80024d4:	08002617 	.word	0x08002617

    case 'S':
      if (angle == 400) {
 80024d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002658 <locomotion+0x250>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80024e0:	d10e      	bne.n	8002500 <locomotion+0xf8>
        angle = prevangle;
 80024e2:	4b5e      	ldr	r3, [pc, #376]	@ (800265c <locomotion+0x254>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002658 <locomotion+0x250>)
 80024e8:	6013      	str	r3, [r2, #0]
        calc();
 80024ea:	f000 f8cd 	bl	8002688 <calc>
        if (alignn) {
 80024ee:	4b57      	ldr	r3, [pc, #348]	@ (800264c <locomotion+0x244>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <locomotion+0x104>
          w = 0;
 80024f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002660 <locomotion+0x258>)
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e005      	b.n	800250c <locomotion+0x104>
        }
      } else {
    	prevangle = angle;
 8002500:	4b55      	ldr	r3, [pc, #340]	@ (8002658 <locomotion+0x250>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a55      	ldr	r2, [pc, #340]	@ (800265c <locomotion+0x254>)
 8002506:	6013      	str	r3, [r2, #0]
        calc();
 8002508:	f000 f8be 	bl	8002688 <calc>
      }
      if (angle != 400) {
 800250c:	4b52      	ldr	r3, [pc, #328]	@ (8002658 <locomotion+0x250>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002514:	f000 8096 	beq.w	8002644 <locomotion+0x23c>
        if (alignn) {
 8002518:	4b4c      	ldr	r3, [pc, #304]	@ (800264c <locomotion+0x244>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8091 	beq.w	8002644 <locomotion+0x23c>
          w = 0;
 8002522:	4b4f      	ldr	r3, [pc, #316]	@ (8002660 <locomotion+0x258>)
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
        }
      }
      break;
 800252a:	e08b      	b.n	8002644 <locomotion+0x23c>
    case 'L':

      w = (1.2 * rotationstrength) / 100;
 800252c:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <locomotion+0x25c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd fff7 	bl	8000524 <__aeabi_i2d>
 8002536:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800253a:	4b4b      	ldr	r3, [pc, #300]	@ (8002668 <locomotion+0x260>)
 800253c:	f7fe f85c 	bl	80005f8 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	4b47      	ldr	r3, [pc, #284]	@ (800266c <locomotion+0x264>)
 800254e:	f7fe f97d 	bl	800084c <__aeabi_ddiv>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fb45 	bl	8000be8 <__aeabi_d2f>
 800255e:	4603      	mov	r3, r0
 8002560:	4a3f      	ldr	r2, [pc, #252]	@ (8002660 <locomotion+0x258>)
 8002562:	6013      	str	r3, [r2, #0]
      if (angle == 400) {
 8002564:	4b3c      	ldr	r3, [pc, #240]	@ (8002658 <locomotion+0x250>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800256c:	d10e      	bne.n	800258c <locomotion+0x184>
        vx = 0;
 800256e:	4940      	ldr	r1, [pc, #256]	@ (8002670 <locomotion+0x268>)
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9c1 2300 	strd	r2, r3, [r1]
        vy = 0;
 800257c:	493d      	ldr	r1, [pc, #244]	@ (8002674 <locomotion+0x26c>)
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 800258a:	e05c      	b.n	8002646 <locomotion+0x23e>
      } else {
        calc();
 800258c:	f000 f87c 	bl	8002688 <calc>
        break;
 8002590:	e059      	b.n	8002646 <locomotion+0x23e>
      }
      break;
    case 'R':
      w = -(1.2 * rotationstrength) / 100;
 8002592:	4b34      	ldr	r3, [pc, #208]	@ (8002664 <locomotion+0x25c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ffc4 	bl	8000524 <__aeabi_i2d>
 800259c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80025a0:	4b31      	ldr	r3, [pc, #196]	@ (8002668 <locomotion+0x260>)
 80025a2:	f7fe f829 	bl	80005f8 <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4614      	mov	r4, r2
 80025ac:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <locomotion+0x264>)
 80025b6:	4620      	mov	r0, r4
 80025b8:	4629      	mov	r1, r5
 80025ba:	f7fe f947 	bl	800084c <__aeabi_ddiv>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f7fe fb0f 	bl	8000be8 <__aeabi_d2f>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a24      	ldr	r2, [pc, #144]	@ (8002660 <locomotion+0x258>)
 80025ce:	6013      	str	r3, [r2, #0]
      if (angle == 400) {
 80025d0:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <locomotion+0x250>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80025d8:	d10e      	bne.n	80025f8 <locomotion+0x1f0>
        vx = 0;
 80025da:	4925      	ldr	r1, [pc, #148]	@ (8002670 <locomotion+0x268>)
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9c1 2300 	strd	r2, r3, [r1]
        vy = 0;
 80025e8:	4922      	ldr	r1, [pc, #136]	@ (8002674 <locomotion+0x26c>)
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 80025f6:	e026      	b.n	8002646 <locomotion+0x23e>
      } else {
        calc();
 80025f8:	f000 f846 	bl	8002688 <calc>
        break;
 80025fc:	e023      	b.n	8002646 <locomotion+0x23e>
      // case 'f':
      // angle = 270;
      // strength = (rotationstrength>)

    case 'k':
      w = -1.1;
 80025fe:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <locomotion+0x258>)
 8002600:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <locomotion+0x270>)
 8002602:	601a      	str	r2, [r3, #0]
      calc();
 8002604:	f000 f840 	bl	8002688 <calc>

      break;
 8002608:	e01d      	b.n	8002646 <locomotion+0x23e>
    case 'K':
      w = 1.1;
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <locomotion+0x258>)
 800260c:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <locomotion+0x274>)
 800260e:	601a      	str	r2, [r3, #0]

      calc();
 8002610:	f000 f83a 	bl	8002688 <calc>

      break;
 8002614:	e017      	b.n	8002646 <locomotion+0x23e>
    case 'o':
      w = 0.9;
 8002616:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <locomotion+0x258>)
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <locomotion+0x278>)
 800261a:	601a      	str	r2, [r3, #0]

      calc();
 800261c:	f000 f834 	bl	8002688 <calc>

      break;
 8002620:	e011      	b.n	8002646 <locomotion+0x23e>
    case 'O':
      w = -0.9;
 8002622:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <locomotion+0x258>)
 8002624:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <locomotion+0x27c>)
 8002626:	601a      	str	r2, [r3, #0]

      calc();
 8002628:	f000 f82e 	bl	8002688 <calc>

      break;
 800262c:	e00b      	b.n	8002646 <locomotion+0x23e>

    default:
      if (alignn) {
 800262e:	4b07      	ldr	r3, [pc, #28]	@ (800264c <locomotion+0x244>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <locomotion+0x236>
        w = 0;
 8002636:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <locomotion+0x258>)
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
      }
      calc();
 800263e:	f000 f823 	bl	8002688 <calc>
  }
  }
 8002642:	e000      	b.n	8002646 <locomotion+0x23e>
      break;
 8002644:	bf00      	nop
  }
 8002646:	bf00      	nop
 8002648:	bdb0      	pop	{r4, r5, r7, pc}
 800264a:	bf00      	nop
 800264c:	20000020 	.word	0x20000020
 8002650:	200002e4 	.word	0x200002e4
 8002654:	20000040 	.word	0x20000040
 8002658:	20000330 	.word	0x20000330
 800265c:	20000334 	.word	0x20000334
 8002660:	20000348 	.word	0x20000348
 8002664:	2000031c 	.word	0x2000031c
 8002668:	3ff33333 	.word	0x3ff33333
 800266c:	40590000 	.word	0x40590000
 8002670:	20000338 	.word	0x20000338
 8002674:	20000340 	.word	0x20000340
 8002678:	bf8ccccd 	.word	0xbf8ccccd
 800267c:	3f8ccccd 	.word	0x3f8ccccd
 8002680:	3f666666 	.word	0x3f666666
 8002684:	bf666666 	.word	0xbf666666

08002688 <calc>:
//}

void calc() {
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	af00      	add	r7, sp, #0
  // Serial.println("Strength: " + String(strength));
  radiann = toradian(angle);
 800268c:	4b3f      	ldr	r3, [pc, #252]	@ (800278c <calc+0x104>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff47 	bl	8000524 <__aeabi_i2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	ec43 2b10 	vmov	d0, r2, r3
 800269e:	f7ff fe8f 	bl	80023c0 <toradian>
 80026a2:	ec53 2b10 	vmov	r2, r3, d0
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fa9d 	bl	8000be8 <__aeabi_d2f>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4a37      	ldr	r2, [pc, #220]	@ (8002790 <calc+0x108>)
 80026b2:	6013      	str	r3, [r2, #0]
  vx = cos(radiann) * strength / 100 * multi;
 80026b4:	4b36      	ldr	r3, [pc, #216]	@ (8002790 <calc+0x108>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd ff45 	bl	8000548 <__aeabi_f2d>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	ec43 2b10 	vmov	d0, r2, r3
 80026c6:	f00c f827 	bl	800e718 <cos>
 80026ca:	ec55 4b10 	vmov	r4, r5, d0
 80026ce:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <calc+0x10c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff26 	bl	8000524 <__aeabi_i2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4620      	mov	r0, r4
 80026de:	4629      	mov	r1, r5
 80026e0:	f7fd ff8a 	bl	80005f8 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <calc+0x110>)
 80026f2:	f7fe f8ab 	bl	800084c <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4614      	mov	r4, r2
 80026fc:	461d      	mov	r5, r3
 80026fe:	4b27      	ldr	r3, [pc, #156]	@ (800279c <calc+0x114>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd ff0e 	bl	8000524 <__aeabi_i2d>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4620      	mov	r0, r4
 800270e:	4629      	mov	r1, r5
 8002710:	f7fd ff72 	bl	80005f8 <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4921      	ldr	r1, [pc, #132]	@ (80027a0 <calc+0x118>)
 800271a:	e9c1 2300 	strd	r2, r3, [r1]
  vy = sin(radiann) * strength / 100 * multi;
 800271e:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <calc+0x108>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd ff10 	bl	8000548 <__aeabi_f2d>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	ec43 2b10 	vmov	d0, r2, r3
 8002730:	f00c f846 	bl	800e7c0 <sin>
 8002734:	ec55 4b10 	vmov	r4, r5, d0
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <calc+0x10c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fef1 	bl	8000524 <__aeabi_i2d>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4620      	mov	r0, r4
 8002748:	4629      	mov	r1, r5
 800274a:	f7fd ff55 	bl	80005f8 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <calc+0x110>)
 800275c:	f7fe f876 	bl	800084c <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4614      	mov	r4, r2
 8002766:	461d      	mov	r5, r3
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <calc+0x114>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fed9 	bl	8000524 <__aeabi_i2d>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4620      	mov	r0, r4
 8002778:	4629      	mov	r1, r5
 800277a:	f7fd ff3d 	bl	80005f8 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <calc+0x11c>)
 8002784:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002788:	bf00      	nop
 800278a:	bdb0      	pop	{r4, r5, r7, pc}
 800278c:	20000330 	.word	0x20000330
 8002790:	200003a4 	.word	0x200003a4
 8002794:	20000320 	.word	0x20000320
 8002798:	40590000 	.word	0x40590000
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000338 	.word	0x20000338
 80027a4:	20000340 	.word	0x20000340

080027a8 <locomote>:
void locomote() {
 80027a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ac:	b08e      	sub	sp, #56	@ 0x38
 80027ae:	af00      	add	r7, sp, #0
//  w = -w;
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80027b0:	4bd1      	ldr	r3, [pc, #836]	@ (8002af8 <locomote+0x350>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8002afc <locomote+0x354>
 80027ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027be:	ee17 0a90 	vmov	r0, s15
 80027c2:	f7fd fec1 	bl	8000548 <__aeabi_f2d>
 80027c6:	4bce      	ldr	r3, [pc, #824]	@ (8002b00 <locomote+0x358>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd ff14 	bl	80005f8 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	4bc9      	ldr	r3, [pc, #804]	@ (8002b04 <locomote+0x35c>)
 80027de:	f7fe f835 	bl	800084c <__aeabi_ddiv>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	ec43 2b17 	vmov	d7, r2, r3
 80027ea:	eeb0 0a47 	vmov.f32	s0, s14
 80027ee:	eef0 0a67 	vmov.f32	s1, s15
 80027f2:	f00b ff91 	bl	800e718 <cos>
 80027f6:	ec53 2b10 	vmov	r2, r3, d0
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fe f9f3 	bl	8000be8 <__aeabi_d2f>
 8002802:	4603      	mov	r3, r0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4bbc      	ldr	r3, [pc, #752]	@ (8002af8 <locomote+0x350>)
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8002afc <locomote+0x354>
 8002810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002814:	ee17 0a90 	vmov	r0, s15
 8002818:	f7fd fe96 	bl	8000548 <__aeabi_f2d>
 800281c:	4bb8      	ldr	r3, [pc, #736]	@ (8002b00 <locomote+0x358>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd fee9 	bl	80005f8 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	4bb4      	ldr	r3, [pc, #720]	@ (8002b04 <locomote+0x35c>)
 8002834:	f7fe f80a 	bl	800084c <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	ec43 2b17 	vmov	d7, r2, r3
 8002840:	eeb0 0a47 	vmov.f32	s0, s14
 8002844:	eef0 0a67 	vmov.f32	s1, s15
 8002848:	f00b ffba 	bl	800e7c0 <sin>
 800284c:	ec53 2b10 	vmov	r2, r3, d0
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f9c8 	bl	8000be8 <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	4baa      	ldr	r3, [pc, #680]	@ (8002b08 <locomote+0x360>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61fb      	str	r3, [r7, #28]
                         { cos((120 + Z_Val) * pi / 180), sin((120 + Z_Val) * pi / 180), d },
 8002862:	4ba5      	ldr	r3, [pc, #660]	@ (8002af8 <locomote+0x350>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8002b0c <locomote+0x364>
 800286c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002870:	ee17 0a90 	vmov	r0, s15
 8002874:	f7fd fe68 	bl	8000548 <__aeabi_f2d>
 8002878:	4ba1      	ldr	r3, [pc, #644]	@ (8002b00 <locomote+0x358>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	f7fd febb 	bl	80005f8 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	4b9d      	ldr	r3, [pc, #628]	@ (8002b04 <locomote+0x35c>)
 8002890:	f7fd ffdc 	bl	800084c <__aeabi_ddiv>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	ec43 2b17 	vmov	d7, r2, r3
 800289c:	eeb0 0a47 	vmov.f32	s0, s14
 80028a0:	eef0 0a67 	vmov.f32	s1, s15
 80028a4:	f00b ff38 	bl	800e718 <cos>
 80028a8:	ec53 2b10 	vmov	r2, r3, d0
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f99a 	bl	8000be8 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80028b6:	623b      	str	r3, [r7, #32]
                         { cos((120 + Z_Val) * pi / 180), sin((120 + Z_Val) * pi / 180), d },
 80028b8:	4b8f      	ldr	r3, [pc, #572]	@ (8002af8 <locomote+0x350>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8002b0c <locomote+0x364>
 80028c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c6:	ee17 0a90 	vmov	r0, s15
 80028ca:	f7fd fe3d 	bl	8000548 <__aeabi_f2d>
 80028ce:	4b8c      	ldr	r3, [pc, #560]	@ (8002b00 <locomote+0x358>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fd fe90 	bl	80005f8 <__aeabi_dmul>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	4b87      	ldr	r3, [pc, #540]	@ (8002b04 <locomote+0x35c>)
 80028e6:	f7fd ffb1 	bl	800084c <__aeabi_ddiv>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	ec43 2b17 	vmov	d7, r2, r3
 80028f2:	eeb0 0a47 	vmov.f32	s0, s14
 80028f6:	eef0 0a67 	vmov.f32	s1, s15
 80028fa:	f00b ff61 	bl	800e7c0 <sin>
 80028fe:	ec53 2b10 	vmov	r2, r3, d0
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fe f96f 	bl	8000be8 <__aeabi_d2f>
 800290a:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
 800290e:	4b7e      	ldr	r3, [pc, #504]	@ (8002b08 <locomote+0x360>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
                         { cos((240 + Z_Val) * pi / 180), sin((240 + Z_Val) * pi / 180), d } };
 8002914:	4b78      	ldr	r3, [pc, #480]	@ (8002af8 <locomote+0x350>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002b10 <locomote+0x368>
 800291e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002922:	ee17 0a90 	vmov	r0, s15
 8002926:	f7fd fe0f 	bl	8000548 <__aeabi_f2d>
 800292a:	4b75      	ldr	r3, [pc, #468]	@ (8002b00 <locomote+0x358>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd fe62 	bl	80005f8 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	4b70      	ldr	r3, [pc, #448]	@ (8002b04 <locomote+0x35c>)
 8002942:	f7fd ff83 	bl	800084c <__aeabi_ddiv>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	ec43 2b17 	vmov	d7, r2, r3
 800294e:	eeb0 0a47 	vmov.f32	s0, s14
 8002952:	eef0 0a67 	vmov.f32	s1, s15
 8002956:	f00b fedf 	bl	800e718 <cos>
 800295a:	ec53 2b10 	vmov	r2, r3, d0
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	f7fe f941 	bl	8000be8 <__aeabi_d2f>
 8002966:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
                         { cos((240 + Z_Val) * pi / 180), sin((240 + Z_Val) * pi / 180), d } };
 800296a:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <locomote+0x350>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8002b10 <locomote+0x368>
 8002974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002978:	ee17 0a90 	vmov	r0, s15
 800297c:	f7fd fde4 	bl	8000548 <__aeabi_f2d>
 8002980:	4b5f      	ldr	r3, [pc, #380]	@ (8002b00 <locomote+0x358>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd fe37 	bl	80005f8 <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b5b      	ldr	r3, [pc, #364]	@ (8002b04 <locomote+0x35c>)
 8002998:	f7fd ff58 	bl	800084c <__aeabi_ddiv>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	ec43 2b17 	vmov	d7, r2, r3
 80029a4:	eeb0 0a47 	vmov.f32	s0, s14
 80029a8:	eef0 0a67 	vmov.f32	s1, s15
 80029ac:	f00b ff08 	bl	800e7c0 <sin>
 80029b0:	ec53 2b10 	vmov	r2, r3, d0
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f916 	bl	8000be8 <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80029be:	633b      	str	r3, [r7, #48]	@ 0x30
 80029c0:	4b51      	ldr	r3, [pc, #324]	@ (8002b08 <locomote+0x360>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	637b      	str	r3, [r7, #52]	@ 0x34
  base[0] = (matrix[0][0] * vx + matrix[0][1] * vy + w * matrix[0][2]) / r;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fdbd 	bl	8000548 <__aeabi_f2d>
 80029ce:	4b51      	ldr	r3, [pc, #324]	@ (8002b14 <locomote+0x36c>)
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f7fd fe10 	bl	80005f8 <__aeabi_dmul>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fdb0 	bl	8000548 <__aeabi_f2d>
 80029e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <locomote+0x370>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f7fd fe03 	bl	80005f8 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc47 	bl	800028c <__adddf3>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4614      	mov	r4, r2
 8002a04:	461d      	mov	r5, r3
 8002a06:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a0a:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <locomote+0x374>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a14:	ee17 0a90 	vmov	r0, s15
 8002a18:	f7fd fd96 	bl	8000548 <__aeabi_f2d>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd fc32 	bl	800028c <__adddf3>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
 8002a30:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <locomote+0x378>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd87 	bl	8000548 <__aeabi_f2d>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4620      	mov	r0, r4
 8002a40:	4629      	mov	r1, r5
 8002a42:	f7fd ff03 	bl	800084c <__aeabi_ddiv>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f7fe f883 	bl	8000b58 <__aeabi_d2iz>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4a33      	ldr	r2, [pc, #204]	@ (8002b24 <locomote+0x37c>)
 8002a56:	6013      	str	r3, [r2, #0]
  base[1] = (matrix[1][0] * vx + matrix[1][1] * vy + w * matrix[1][2]) / r;
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd74 	bl	8000548 <__aeabi_f2d>
 8002a60:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <locomote+0x36c>)
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	f7fd fdc7 	bl	80005f8 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4614      	mov	r4, r2
 8002a70:	461d      	mov	r5, r3
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd67 	bl	8000548 <__aeabi_f2d>
 8002a7a:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <locomote+0x370>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fdba 	bl	80005f8 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fbfe 	bl	800028c <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	461d      	mov	r5, r3
 8002a98:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <locomote+0x374>)
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa6:	ee17 0a90 	vmov	r0, s15
 8002aaa:	f7fd fd4d 	bl	8000548 <__aeabi_f2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fbe9 	bl	800028c <__adddf3>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <locomote+0x378>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fd3e 	bl	8000548 <__aeabi_f2d>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd feba 	bl	800084c <__aeabi_ddiv>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f83a 	bl	8000b58 <__aeabi_d2iz>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b24 <locomote+0x37c>)
 8002ae8:	6053      	str	r3, [r2, #4]
  base[2] = (matrix[2][0] * vx + matrix[2][1] * vy + w * matrix[2][2]) / r;
 8002aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd2b 	bl	8000548 <__aeabi_f2d>
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <locomote+0x36c>)
 8002af4:	e018      	b.n	8002b28 <locomote+0x380>
 8002af6:	bf00      	nop
 8002af8:	20000318 	.word	0x20000318
 8002afc:	00000000 	.word	0x00000000
 8002b00:	20000038 	.word	0x20000038
 8002b04:	40668000 	.word	0x40668000
 8002b08:	20000034 	.word	0x20000034
 8002b0c:	42f00000 	.word	0x42f00000
 8002b10:	43700000 	.word	0x43700000
 8002b14:	20000338 	.word	0x20000338
 8002b18:	20000340 	.word	0x20000340
 8002b1c:	20000348 	.word	0x20000348
 8002b20:	20000004 	.word	0x20000004
 8002b24:	200002c8 	.word	0x200002c8
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f7fd fd64 	bl	80005f8 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	461d      	mov	r5, r3
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd04 	bl	8000548 <__aeabi_f2d>
 8002b40:	4bbb      	ldr	r3, [pc, #748]	@ (8002e30 <locomote+0x688>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fd57 	bl	80005f8 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fd fb9b 	bl	800028c <__adddf3>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	461d      	mov	r5, r3
 8002b5e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002b62:	4bb4      	ldr	r3, [pc, #720]	@ (8002e34 <locomote+0x68c>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6c:	ee17 0a90 	vmov	r0, s15
 8002b70:	f7fd fcea 	bl	8000548 <__aeabi_f2d>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f7fd fb86 	bl	800028c <__adddf3>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
 8002b88:	4bab      	ldr	r3, [pc, #684]	@ (8002e38 <locomote+0x690>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fcdb 	bl	8000548 <__aeabi_f2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd fe57 	bl	800084c <__aeabi_ddiv>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fd ffd7 	bl	8000b58 <__aeabi_d2iz>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4aa3      	ldr	r2, [pc, #652]	@ (8002e3c <locomote+0x694>)
 8002bae:	6093      	str	r3, [r2, #8]

  if ((base[0] != 0) || (base[1] != 0) || base[2] != 0) {
 8002bb0:	4ba2      	ldr	r3, [pc, #648]	@ (8002e3c <locomote+0x694>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <locomote+0x420>
 8002bb8:	4ba0      	ldr	r3, [pc, #640]	@ (8002e3c <locomote+0x694>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d103      	bne.n	8002bc8 <locomote+0x420>
 8002bc0:	4b9e      	ldr	r3, [pc, #632]	@ (8002e3c <locomote+0x694>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <locomote+0x448>
    dir[0] = (base[0] < 0) ? 1 : 0;
 8002bc8:	4b9c      	ldr	r3, [pc, #624]	@ (8002e3c <locomote+0x694>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0fdb      	lsrs	r3, r3, #31
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b9b      	ldr	r3, [pc, #620]	@ (8002e40 <locomote+0x698>)
 8002bd2:	601a      	str	r2, [r3, #0]
    dir[1] = (base[1] < 0) ? 0 : 1;
 8002bd4:	4b99      	ldr	r3, [pc, #612]	@ (8002e3c <locomote+0x694>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	0fdb      	lsrs	r3, r3, #31
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b97      	ldr	r3, [pc, #604]	@ (8002e40 <locomote+0x698>)
 8002be2:	605a      	str	r2, [r3, #4]
    dir[2] = (base[2] < 0) ? 1 : 0;
 8002be4:	4b95      	ldr	r3, [pc, #596]	@ (8002e3c <locomote+0x694>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	0fdb      	lsrs	r3, r3, #31
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b94      	ldr	r3, [pc, #592]	@ (8002e40 <locomote+0x698>)
 8002bee:	609a      	str	r2, [r3, #8]
  }
//  setpoint1 = absolute((int)base[0] * 9.549);
//  setpoint2 = absolute((int)base[1] * 9.549);
//  setpoint3 = absolute((int)base[2] * 9.549);
  setpoint1 = base[0] * 9.549;
 8002bf0:	4b92      	ldr	r3, [pc, #584]	@ (8002e3c <locomote+0x694>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fc95 	bl	8000524 <__aeabi_i2d>
 8002bfa:	a389      	add	r3, pc, #548	@ (adr r3, 8002e20 <locomote+0x678>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fcfa 	bl	80005f8 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f7fd ffa4 	bl	8000b58 <__aeabi_d2iz>
 8002c10:	4603      	mov	r3, r0
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	4b8b      	ldr	r3, [pc, #556]	@ (8002e44 <locomote+0x69c>)
 8002c16:	801a      	strh	r2, [r3, #0]
  setpoint2 = base[1] * 9.549;
 8002c18:	4b88      	ldr	r3, [pc, #544]	@ (8002e3c <locomote+0x694>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fc81 	bl	8000524 <__aeabi_i2d>
 8002c22:	a37f      	add	r3, pc, #508	@ (adr r3, 8002e20 <locomote+0x678>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f7fd fce6 	bl	80005f8 <__aeabi_dmul>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd ff90 	bl	8000b58 <__aeabi_d2iz>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b21a      	sxth	r2, r3
 8002c3c:	4b82      	ldr	r3, [pc, #520]	@ (8002e48 <locomote+0x6a0>)
 8002c3e:	801a      	strh	r2, [r3, #0]
  setpoint3 = base[2] * 9.549;
 8002c40:	4b7e      	ldr	r3, [pc, #504]	@ (8002e3c <locomote+0x694>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fc6d 	bl	8000524 <__aeabi_i2d>
 8002c4a:	a375      	add	r3, pc, #468	@ (adr r3, 8002e20 <locomote+0x678>)
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	f7fd fcd2 	bl	80005f8 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fd ff7c 	bl	8000b58 <__aeabi_d2iz>
 8002c60:	4603      	mov	r3, r0
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	4b79      	ldr	r3, [pc, #484]	@ (8002e4c <locomote+0x6a4>)
 8002c66:	801a      	strh	r2, [r3, #0]
  setpoint1 = (setpoint1 < 0)?(~setpoint1)+ 1: setpoint1;
 8002c68:	4b76      	ldr	r3, [pc, #472]	@ (8002e44 <locomote+0x69c>)
 8002c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bfb8      	it	lt
 8002c72:	425b      	neglt	r3, r3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	b21a      	sxth	r2, r3
 8002c78:	4b72      	ldr	r3, [pc, #456]	@ (8002e44 <locomote+0x69c>)
 8002c7a:	801a      	strh	r2, [r3, #0]
  setpoint2= (setpoint2 < 0)?(~setpoint2)+ 1: setpoint2;
 8002c7c:	4b72      	ldr	r3, [pc, #456]	@ (8002e48 <locomote+0x6a0>)
 8002c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bfb8      	it	lt
 8002c86:	425b      	neglt	r3, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b21a      	sxth	r2, r3
 8002c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e48 <locomote+0x6a0>)
 8002c8e:	801a      	strh	r2, [r3, #0]
  setpoint3 =(setpoint3 < 0)?(~setpoint3)+ 1: setpoint3;
 8002c90:	4b6e      	ldr	r3, [pc, #440]	@ (8002e4c <locomote+0x6a4>)
 8002c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bfb8      	it	lt
 8002c9a:	425b      	neglt	r3, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b21a      	sxth	r2, r3
 8002ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e4c <locomote+0x6a4>)
 8002ca2:	801a      	strh	r2, [r3, #0]
  basepwm[0] = base[0] * 1000;
 8002ca4:	4b65      	ldr	r3, [pc, #404]	@ (8002e3c <locomote+0x694>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cac:	fb02 f303 	mul.w	r3, r2, r3
 8002cb0:	4a67      	ldr	r2, [pc, #412]	@ (8002e50 <locomote+0x6a8>)
 8002cb2:	6013      	str	r3, [r2, #0]
  basepwm[1] = base[1] * 1000;
 8002cb4:	4b61      	ldr	r3, [pc, #388]	@ (8002e3c <locomote+0x694>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	4a63      	ldr	r2, [pc, #396]	@ (8002e50 <locomote+0x6a8>)
 8002cc2:	6053      	str	r3, [r2, #4]
  basepwm[2] = base[2] * 1050;
 8002cc4:	4b5d      	ldr	r3, [pc, #372]	@ (8002e3c <locomote+0x694>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	4a5f      	ldr	r2, [pc, #380]	@ (8002e50 <locomote+0x6a8>)
 8002cd2:	6093      	str	r3, [r2, #8]

  basepwm[0] = (basepwm[0]<0)?(~basepwm[0]) + 1:basepwm[0];
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e50 <locomote+0x6a8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bfb8      	it	lt
 8002cdc:	425b      	neglt	r3, r3
 8002cde:	4a5c      	ldr	r2, [pc, #368]	@ (8002e50 <locomote+0x6a8>)
 8002ce0:	6013      	str	r3, [r2, #0]
  basepwm[1] = (basepwm[1]<0)?(~basepwm[1]) + 1:basepwm[1];
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e50 <locomote+0x6a8>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bfb8      	it	lt
 8002cea:	425b      	neglt	r3, r3
 8002cec:	4a58      	ldr	r2, [pc, #352]	@ (8002e50 <locomote+0x6a8>)
 8002cee:	6053      	str	r3, [r2, #4]
  basepwm[2] = (basepwm[2]<0)?(~basepwm[2]) + 1:basepwm[2];
 8002cf0:	4b57      	ldr	r3, [pc, #348]	@ (8002e50 <locomote+0x6a8>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bfb8      	it	lt
 8002cf8:	425b      	neglt	r3, r3
 8002cfa:	4a55      	ldr	r2, [pc, #340]	@ (8002e50 <locomote+0x6a8>)
 8002cfc:	6093      	str	r3, [r2, #8]

  // previous 4.28  high 4.36
  error1 = ((setpoint1 - rpm1) / 9.549) * 1075.2;
 8002cfe:	4b51      	ldr	r3, [pc, #324]	@ (8002e44 <locomote+0x69c>)
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b53      	ldr	r3, [pc, #332]	@ (8002e54 <locomote+0x6ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fc09 	bl	8000524 <__aeabi_i2d>
 8002d12:	a343      	add	r3, pc, #268	@ (adr r3, 8002e20 <locomote+0x678>)
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	f7fd fd98 	bl	800084c <__aeabi_ddiv>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	a340      	add	r3, pc, #256	@ (adr r3, 8002e28 <locomote+0x680>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fc65 	bl	80005f8 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd ff57 	bl	8000be8 <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a46      	ldr	r2, [pc, #280]	@ (8002e58 <locomote+0x6b0>)
 8002d3e:	6013      	str	r3, [r2, #0]
  error2 = ((setpoint2 - rpm2) / 9.549) * 1075.2;
 8002d40:	4b41      	ldr	r3, [pc, #260]	@ (8002e48 <locomote+0x6a0>)
 8002d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d46:	461a      	mov	r2, r3
 8002d48:	4b44      	ldr	r3, [pc, #272]	@ (8002e5c <locomote+0x6b4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbe8 	bl	8000524 <__aeabi_i2d>
 8002d54:	a332      	add	r3, pc, #200	@ (adr r3, 8002e20 <locomote+0x678>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fd77 	bl	800084c <__aeabi_ddiv>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	a330      	add	r3, pc, #192	@ (adr r3, 8002e28 <locomote+0x680>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd fc44 	bl	80005f8 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd ff36 	bl	8000be8 <__aeabi_d2f>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4a38      	ldr	r2, [pc, #224]	@ (8002e60 <locomote+0x6b8>)
 8002d80:	6013      	str	r3, [r2, #0]
  error3 = ((setpoint3 - rpm3) / 9.549) * 1075.2;
 8002d82:	4b32      	ldr	r3, [pc, #200]	@ (8002e4c <locomote+0x6a4>)
 8002d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b36      	ldr	r3, [pc, #216]	@ (8002e64 <locomote+0x6bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fbc7 	bl	8000524 <__aeabi_i2d>
 8002d96:	a322      	add	r3, pc, #136	@ (adr r3, 8002e20 <locomote+0x678>)
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f7fd fd56 	bl	800084c <__aeabi_ddiv>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	a31f      	add	r3, pc, #124	@ (adr r3, 8002e28 <locomote+0x680>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	f7fd fc23 	bl	80005f8 <__aeabi_dmul>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd ff15 	bl	8000be8 <__aeabi_d2f>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4a29      	ldr	r2, [pc, #164]	@ (8002e68 <locomote+0x6c0>)
 8002dc2:	6013      	str	r3, [r2, #0]


  if (HAL_GetTick() - previousmillis >= sampletime) {
 8002dc4:	f002 fc76 	bl	80056b4 <HAL_GetTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	60fa      	str	r2, [r7, #12]
 8002dd0:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <locomote+0x6c4>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dda:	4621      	mov	r1, r4
 8002ddc:	ebb1 0802 	subs.w	r8, r1, r2
 8002de0:	4629      	mov	r1, r5
 8002de2:	eb61 0903 	sbc.w	r9, r1, r3
 8002de6:	4b22      	ldr	r3, [pc, #136]	@ (8002e70 <locomote+0x6c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	17da      	asrs	r2, r3, #31
 8002dec:	469a      	mov	sl, r3
 8002dee:	4693      	mov	fp, r2
 8002df0:	45d0      	cmp	r8, sl
 8002df2:	eb79 030b 	sbcs.w	r3, r9, fp
 8002df6:	f2c0 80d6 	blt.w	8002fa6 <locomote+0x7fe>
    pwm1 = basepwm[0] + kp1 * (error1) + kd1 * (error1 - preverror1);
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <locomote+0x6a8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e06:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <locomote+0x6cc>)
 8002e08:	edd3 6a00 	vldr	s13, [r3]
 8002e0c:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <locomote+0x6b0>)
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e1a:	e02d      	b.n	8002e78 <locomote+0x6d0>
 8002e1c:	f3af 8000 	nop.w
 8002e20:	872b020c 	.word	0x872b020c
 8002e24:	40231916 	.word	0x40231916
 8002e28:	cccccccd 	.word	0xcccccccd
 8002e2c:	4090cccc 	.word	0x4090cccc
 8002e30:	20000340 	.word	0x20000340
 8002e34:	20000348 	.word	0x20000348
 8002e38:	20000004 	.word	0x20000004
 8002e3c:	200002c8 	.word	0x200002c8
 8002e40:	200002b0 	.word	0x200002b0
 8002e44:	2000034c 	.word	0x2000034c
 8002e48:	2000034e 	.word	0x2000034e
 8002e4c:	20000350 	.word	0x20000350
 8002e50:	200002bc 	.word	0x200002bc
 8002e54:	20000524 	.word	0x20000524
 8002e58:	20000360 	.word	0x20000360
 8002e5c:	20000528 	.word	0x20000528
 8002e60:	20000364 	.word	0x20000364
 8002e64:	2000052c 	.word	0x2000052c
 8002e68:	20000368 	.word	0x20000368
 8002e6c:	20000310 	.word	0x20000310
 8002e70:	20000024 	.word	0x20000024
 8002e74:	20000008 	.word	0x20000008
 8002e78:	4b62      	ldr	r3, [pc, #392]	@ (8003004 <locomote+0x85c>)
 8002e7a:	edd3 6a00 	vldr	s13, [r3]
 8002e7e:	4b62      	ldr	r3, [pc, #392]	@ (8003008 <locomote+0x860>)
 8002e80:	edd3 7a00 	vldr	s15, [r3]
 8002e84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e88:	4b60      	ldr	r3, [pc, #384]	@ (800300c <locomote+0x864>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9a:	ee17 2a90 	vmov	r2, s15
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8003010 <locomote+0x868>)
 8002ea0:	601a      	str	r2, [r3, #0]
    //     dir[0] = (dir[0] == 0) ? 1 : 0;
    //     dirchanged1_flag = true;
    //   }
    // }

    pwm1 = constrain(pwm1, 0, 40000);
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8003010 <locomote+0x868>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fa5f 	bl	8001370 <constrain>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a56      	ldr	r2, [pc, #344]	@ (8003010 <locomote+0x868>)
 8002eb6:	6013      	str	r3, [r2, #0]
    // prevPwm1 = currPwm1;
    pwm2 = basepwm[1] + kp2 * (error2) + kd2 * (error2 - preverror2);
 8002eb8:	4b56      	ldr	r3, [pc, #344]	@ (8003014 <locomote+0x86c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec4:	4b54      	ldr	r3, [pc, #336]	@ (8003018 <locomote+0x870>)
 8002ec6:	edd3 6a00 	vldr	s13, [r3]
 8002eca:	4b54      	ldr	r3, [pc, #336]	@ (800301c <locomote+0x874>)
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed8:	4b50      	ldr	r3, [pc, #320]	@ (800301c <locomote+0x874>)
 8002eda:	edd3 6a00 	vldr	s13, [r3]
 8002ede:	4b50      	ldr	r3, [pc, #320]	@ (8003020 <locomote+0x878>)
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8003024 <locomote+0x87c>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002efa:	ee17 2a90 	vmov	r2, s15
 8002efe:	4b4a      	ldr	r3, [pc, #296]	@ (8003028 <locomote+0x880>)
 8002f00:	601a      	str	r2, [r3, #0]
    //     dir[1] = (dir[1] == 0) ? 1 : 0;
    //     dirchanged2_flag = true;
    //   }
    // }

    pwm2 = constrain(pwm2, 0, 40000);
 8002f02:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <locomote+0x880>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fa2f 	bl	8001370 <constrain>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4a44      	ldr	r2, [pc, #272]	@ (8003028 <locomote+0x880>)
 8002f16:	6013      	str	r3, [r2, #0]
    // prevPwm2 = currPwm2;
    pwm3 = basepwm[2]+ kp3 * (error3) + kd3 * (error3 - preverror3);
 8002f18:	4b3e      	ldr	r3, [pc, #248]	@ (8003014 <locomote+0x86c>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f24:	4b41      	ldr	r3, [pc, #260]	@ (800302c <locomote+0x884>)
 8002f26:	edd3 6a00 	vldr	s13, [r3]
 8002f2a:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <locomote+0x888>)
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f38:	4b3d      	ldr	r3, [pc, #244]	@ (8003030 <locomote+0x888>)
 8002f3a:	edd3 6a00 	vldr	s13, [r3]
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003034 <locomote+0x88c>)
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f48:	4b3b      	ldr	r3, [pc, #236]	@ (8003038 <locomote+0x890>)
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f5a:	ee17 2a90 	vmov	r2, s15
 8002f5e:	4b37      	ldr	r3, [pc, #220]	@ (800303c <locomote+0x894>)
 8002f60:	601a      	str	r2, [r3, #0]

    //     dir[2] = (dir[2] == 0) ? 1 : 0;
    //     dirchanged3_flag = true;
    //   }
    // }
    pwm3 = constrain(pwm3, 0, 40000);
 8002f62:	4b36      	ldr	r3, [pc, #216]	@ (800303c <locomote+0x894>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe f9ff 	bl	8001370 <constrain>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4a31      	ldr	r2, [pc, #196]	@ (800303c <locomote+0x894>)
 8002f76:	6013      	str	r3, [r2, #0]
    // prevPwm3 = currPwm3;
    preverror1 = error1;
 8002f78:	4b22      	ldr	r3, [pc, #136]	@ (8003004 <locomote+0x85c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a22      	ldr	r2, [pc, #136]	@ (8003008 <locomote+0x860>)
 8002f7e:	6013      	str	r3, [r2, #0]
    preverror2 = error2;
 8002f80:	4b26      	ldr	r3, [pc, #152]	@ (800301c <locomote+0x874>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a26      	ldr	r2, [pc, #152]	@ (8003020 <locomote+0x878>)
 8002f86:	6013      	str	r3, [r2, #0]
    preverror3 = error3;
 8002f88:	4b29      	ldr	r3, [pc, #164]	@ (8003030 <locomote+0x888>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a29      	ldr	r2, [pc, #164]	@ (8003034 <locomote+0x88c>)
 8002f8e:	6013      	str	r3, [r2, #0]
    previousmillis = HAL_GetTick();
 8002f90:	f002 fb90 	bl	80056b4 <HAL_GetTick>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2200      	movs	r2, #0
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	4b28      	ldr	r3, [pc, #160]	@ (8003040 <locomote+0x898>)
 8002f9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002fa2:	e9c3 1200 	strd	r1, r2, [r3]
//   TIM2->CCR3=pwm2;
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, dir[1]);
//  TIM2->CCR4=pwm2;
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, dir[2]);
//   TIM2->CCR2=pwm3;
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, dir[0]);
 8002fa6:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <locomote+0x89c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fb2:	4825      	ldr	r0, [pc, #148]	@ (8003048 <locomote+0x8a0>)
 8002fb4:	f003 ff5a 	bl	8006e6c <HAL_GPIO_WritePin>
  TIM2->CCR3 = pwm1;
 8002fb8:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <locomote+0x868>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,dir[1]);
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <locomote+0x89c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fce:	481f      	ldr	r0, [pc, #124]	@ (800304c <locomote+0x8a4>)
 8002fd0:	f003 ff4c 	bl	8006e6c <HAL_GPIO_WritePin>
  TIM12->CCR1 = pwm2;
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <locomote+0x880>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <locomote+0x8a8>)
 8002fda:	635a      	str	r2, [r3, #52]	@ 0x34


 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, dir[2]);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <locomote+0x89c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fe8:	4817      	ldr	r0, [pc, #92]	@ (8003048 <locomote+0x8a0>)
 8002fea:	f003 ff3f 	bl	8006e6c <HAL_GPIO_WritePin>
  TIM2->CCR4 = pwm3;
 8002fee:	4b13      	ldr	r3, [pc, #76]	@ (800303c <locomote+0x894>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  // Serial.print(pwm2);
  // Serial.print(" Pwm3: ");
  // Serial.println(pwm3);


}
 8002ff8:	bf00      	nop
 8002ffa:	3738      	adds	r7, #56	@ 0x38
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003002:	bf00      	nop
 8003004:	20000360 	.word	0x20000360
 8003008:	2000036c 	.word	0x2000036c
 800300c:	20000014 	.word	0x20000014
 8003010:	20000354 	.word	0x20000354
 8003014:	200002bc 	.word	0x200002bc
 8003018:	2000000c 	.word	0x2000000c
 800301c:	20000364 	.word	0x20000364
 8003020:	20000370 	.word	0x20000370
 8003024:	20000018 	.word	0x20000018
 8003028:	20000358 	.word	0x20000358
 800302c:	20000010 	.word	0x20000010
 8003030:	20000368 	.word	0x20000368
 8003034:	20000374 	.word	0x20000374
 8003038:	2000001c 	.word	0x2000001c
 800303c:	2000035c 	.word	0x2000035c
 8003040:	20000310 	.word	0x20000310
 8003044:	200002b0 	.word	0x200002b0
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40020400 	.word	0x40020400
 8003050:	40001800 	.word	0x40001800

08003054 <analogRead_pa4>:
//    else if (value > max) return max;
//    else return value;
//}

ADC_HandleTypeDef hadc1;
uint16_t analogRead_pa4() {
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 8003066:	2304      	movs	r3, #4
 8003068:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 800306a:	2301      	movs	r3, #1
 800306c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800306e:	2304      	movs	r3, #4
 8003070:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	4619      	mov	r1, r3
 8003076:	480e      	ldr	r0, [pc, #56]	@ (80030b0 <analogRead_pa4+0x5c>)
 8003078:	f002 fd2e 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <analogRead_pa4+0x32>
		Error_Handler();
 8003082:	f001 fa6f 	bl	8004564 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8003086:	480a      	ldr	r0, [pc, #40]	@ (80030b0 <analogRead_pa4+0x5c>)
 8003088:	f002 fb88 	bl	800579c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 800308c:	2114      	movs	r1, #20
 800308e:	4808      	ldr	r0, [pc, #32]	@ (80030b0 <analogRead_pa4+0x5c>)
 8003090:	f002 fc89 	bl	80059a6 <HAL_ADC_PollForConversion>
	uint16_t pot = HAL_ADC_GetValue(&hadc1);
 8003094:	4806      	ldr	r0, [pc, #24]	@ (80030b0 <analogRead_pa4+0x5c>)
 8003096:	f002 fd11 	bl	8005abc <HAL_ADC_GetValue>
 800309a:	4603      	mov	r3, r0
 800309c:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 800309e:	4804      	ldr	r0, [pc, #16]	@ (80030b0 <analogRead_pa4+0x5c>)
 80030a0:	f002 fc4e 	bl	8005940 <HAL_ADC_Stop>
	return pot;
 80030a4:	8afb      	ldrh	r3, [r7, #22]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000548 	.word	0x20000548

080030b4 <dribble>:

void dribble() {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	temp_pot = analogRead_pa4();
 80030b8:	f7ff ffcc 	bl	8003054 <analogRead_pa4>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	4b83      	ldr	r3, [pc, #524]	@ (80032d0 <dribble+0x21c>)
 80030c2:	601a      	str	r2, [r3, #0]

	if (!f_dribble) {
 80030c4:	4b83      	ldr	r3, [pc, #524]	@ (80032d4 <dribble+0x220>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	f083 0301 	eor.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 80fc 	bne.w	80032cc <dribble+0x218>
		return;
	}

	if (fOperation == 1) {
 80030d4:	4b80      	ldr	r3, [pc, #512]	@ (80032d8 <dribble+0x224>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 80f8 	bne.w	80032ce <dribble+0x21a>

		if (HAL_GetTick() - prevmillis_d >= 50) {
 80030de:	f002 fae9 	bl	80056b4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b7d      	ldr	r3, [pc, #500]	@ (80032dc <dribble+0x228>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b31      	cmp	r3, #49	@ 0x31
 80030ec:	f240 80ef 	bls.w	80032ce <dribble+0x21a>
			error_d = dribble_sp - temp_pot;
 80030f0:	4b7b      	ldr	r3, [pc, #492]	@ (80032e0 <dribble+0x22c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b76      	ldr	r3, [pc, #472]	@ (80032d0 <dribble+0x21c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	4a7a      	ldr	r2, [pc, #488]	@ (80032e4 <dribble+0x230>)
 80030fc:	6013      	str	r3, [r2, #0]
			(error_d >= 0) ?
 80030fe:	4b79      	ldr	r3, [pc, #484]	@ (80032e4 <dribble+0x230>)
 8003100:	681b      	ldr	r3, [r3, #0]
					HAL_GPIO_WritePin(dirPort_d, dirPin_d, 1) :
 8003102:	2b00      	cmp	r3, #0
 8003104:	db05      	blt.n	8003112 <dribble+0x5e>
 8003106:	2201      	movs	r2, #1
 8003108:	2101      	movs	r1, #1
 800310a:	4877      	ldr	r0, [pc, #476]	@ (80032e8 <dribble+0x234>)
 800310c:	f003 feae 	bl	8006e6c <HAL_GPIO_WritePin>
 8003110:	e004      	b.n	800311c <dribble+0x68>
					HAL_GPIO_WritePin(dirPort_d, dirPin_d, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2101      	movs	r1, #1
 8003116:	4874      	ldr	r0, [pc, #464]	@ (80032e8 <dribble+0x234>)
 8003118:	f003 fea8 	bl	8006e6c <HAL_GPIO_WritePin>
//			kart = abs(error_d);
			if (abs(error_d) <= 30) {
 800311c:	4b71      	ldr	r3, [pc, #452]	@ (80032e4 <dribble+0x230>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f113 0f1e 	cmn.w	r3, #30
 8003124:	db70      	blt.n	8003208 <dribble+0x154>
 8003126:	4b6f      	ldr	r3, [pc, #444]	@ (80032e4 <dribble+0x230>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b1e      	cmp	r3, #30
 800312c:	dc6c      	bgt.n	8003208 <dribble+0x154>

				TIM2->CCR1 = 0;
 800312e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003132:	2200      	movs	r2, #0
 8003134:	635a      	str	r2, [r3, #52]	@ 0x34
				dalay(500);
 8003136:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800313a:	f000 f8eb 	bl	8003314 <dalay>
				switch (count) {
 800313e:	4b6b      	ldr	r3, [pc, #428]	@ (80032ec <dribble+0x238>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d006      	beq.n	8003154 <dribble+0xa0>
 8003146:	2b02      	cmp	r3, #2
 8003148:	dc5c      	bgt.n	8003204 <dribble+0x150>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d02b      	beq.n	80031a6 <dribble+0xf2>
 800314e:	2b01      	cmp	r3, #1
 8003150:	d011      	beq.n	8003176 <dribble+0xc2>
					count = 1;

					break;
//					}
				default:
					break;
 8003152:	e057      	b.n	8003204 <dribble+0x150>
					dribble_sp = var;
 8003154:	4b62      	ldr	r3, [pc, #392]	@ (80032e0 <dribble+0x22c>)
 8003156:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 800315a:	601a      	str	r2, [r3, #0]
					flag_amkette = true;
 800315c:	4b64      	ldr	r3, [pc, #400]	@ (80032f0 <dribble+0x23c>)
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
					f_dribble = false;
 8003162:	4b5c      	ldr	r3, [pc, #368]	@ (80032d4 <dribble+0x220>)
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
					fOperation = 0;
 8003168:	4b5b      	ldr	r3, [pc, #364]	@ (80032d8 <dribble+0x224>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
					count = 0;
 800316e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <dribble+0x238>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
					break;
 8003174:	e047      	b.n	8003206 <dribble+0x152>
					dribble_sp = khali;
 8003176:	4b5a      	ldr	r3, [pc, #360]	@ (80032e0 <dribble+0x22c>)
 8003178:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800317c:	601a      	str	r2, [r3, #0]
					temp_pot = analogRead_pa4();
 800317e:	f7ff ff69 	bl	8003054 <analogRead_pa4>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	4b52      	ldr	r3, [pc, #328]	@ (80032d0 <dribble+0x21c>)
 8003188:	601a      	str	r2, [r3, #0]
					prev_error_pot = 0;
 800318a:	4b5a      	ldr	r3, [pc, #360]	@ (80032f4 <dribble+0x240>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
					error_d = dribble_sp - temp_pot;
 8003190:	4b53      	ldr	r3, [pc, #332]	@ (80032e0 <dribble+0x22c>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b4e      	ldr	r3, [pc, #312]	@ (80032d0 <dribble+0x21c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	4a52      	ldr	r2, [pc, #328]	@ (80032e4 <dribble+0x230>)
 800319c:	6013      	str	r3, [r2, #0]
					count = 2;
 800319e:	4b53      	ldr	r3, [pc, #332]	@ (80032ec <dribble+0x238>)
 80031a0:	2202      	movs	r2, #2
 80031a2:	601a      	str	r2, [r3, #0]
					break;
 80031a4:	e02f      	b.n	8003206 <dribble+0x152>
					HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 80031a6:	2201      	movs	r2, #1
 80031a8:	2102      	movs	r1, #2
 80031aa:	484f      	ldr	r0, [pc, #316]	@ (80032e8 <dribble+0x234>)
 80031ac:	f003 fe5e 	bl	8006e6c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 80031b0:	2201      	movs	r2, #1
 80031b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031b6:	4850      	ldr	r0, [pc, #320]	@ (80032f8 <dribble+0x244>)
 80031b8:	f003 fe58 	bl	8006e6c <HAL_GPIO_WritePin>
					dalay(1000);
 80031bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031c0:	f000 f8a8 	bl	8003314 <dalay>
					HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2102      	movs	r1, #2
 80031c8:	4847      	ldr	r0, [pc, #284]	@ (80032e8 <dribble+0x234>)
 80031ca:	f003 fe4f 	bl	8006e6c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031d4:	4848      	ldr	r0, [pc, #288]	@ (80032f8 <dribble+0x244>)
 80031d6:	f003 fe49 	bl	8006e6c <HAL_GPIO_WritePin>
					dribble_sp = madhe;
 80031da:	4b41      	ldr	r3, [pc, #260]	@ (80032e0 <dribble+0x22c>)
 80031dc:	f240 62f1 	movw	r2, #1777	@ 0x6f1
 80031e0:	601a      	str	r2, [r3, #0]
					temp_pot = analogRead_pa4();
 80031e2:	f7ff ff37 	bl	8003054 <analogRead_pa4>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b39      	ldr	r3, [pc, #228]	@ (80032d0 <dribble+0x21c>)
 80031ec:	601a      	str	r2, [r3, #0]
					error_d = dribble_sp - temp_pot;
 80031ee:	4b3c      	ldr	r3, [pc, #240]	@ (80032e0 <dribble+0x22c>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b37      	ldr	r3, [pc, #220]	@ (80032d0 <dribble+0x21c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	4a3a      	ldr	r2, [pc, #232]	@ (80032e4 <dribble+0x230>)
 80031fa:	6013      	str	r3, [r2, #0]
					count = 1;
 80031fc:	4b3b      	ldr	r3, [pc, #236]	@ (80032ec <dribble+0x238>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
					break;
 8003202:	e000      	b.n	8003206 <dribble+0x152>
					break;
 8003204:	bf00      	nop
				switch (count) {
 8003206:	e057      	b.n	80032b8 <dribble+0x204>
				}

			} else {
				error_d = abs(error_d);
 8003208:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <dribble+0x230>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	bfb8      	it	lt
 8003210:	425b      	neglt	r3, r3
 8003212:	4a34      	ldr	r2, [pc, #208]	@ (80032e4 <dribble+0x230>)
 8003214:	6013      	str	r3, [r2, #0]
				if (error_d < 100) {
 8003216:	4b33      	ldr	r3, [pc, #204]	@ (80032e4 <dribble+0x230>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b63      	cmp	r3, #99	@ 0x63
 800321c:	dc07      	bgt.n	800322e <dribble+0x17a>
					integral_d += error_d;
 800321e:	4b37      	ldr	r3, [pc, #220]	@ (80032fc <dribble+0x248>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <dribble+0x230>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4413      	add	r3, r2
 8003228:	4a34      	ldr	r2, [pc, #208]	@ (80032fc <dribble+0x248>)
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e002      	b.n	8003234 <dribble+0x180>
				} else {
					integral_d = 0;
 800322e:	4b33      	ldr	r3, [pc, #204]	@ (80032fc <dribble+0x248>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
				}
				pwm_dribble = 12000 + (error_d * kp_d)
 8003234:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <dribble+0x230>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003240:	4b2f      	ldr	r3, [pc, #188]	@ (8003300 <dribble+0x24c>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003304 <dribble+0x250>
 800324e:	ee37 7a87 	vadd.f32	s14, s15, s14
						+ kd_d * (error_d - prev_error_pot) + ki_d * integral_d; // + 0.014 * (error_d - prev_error_pot) + 0.001 * (integral);
 8003252:	4b24      	ldr	r3, [pc, #144]	@ (80032e4 <dribble+0x230>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b27      	ldr	r3, [pc, #156]	@ (80032f4 <dribble+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003264:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <dribble+0x254>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800326e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003272:	4b22      	ldr	r3, [pc, #136]	@ (80032fc <dribble+0x248>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <dribble+0x258>)
 8003280:	edd3 7a00 	vldr	s15, [r3]
 8003284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003288:	ee77 7a27 	vadd.f32	s15, s14, s15
				pwm_dribble = 12000 + (error_d * kp_d)
 800328c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003290:	ee17 2a90 	vmov	r2, s15
 8003294:	4b1e      	ldr	r3, [pc, #120]	@ (8003310 <dribble+0x25c>)
 8003296:	601a      	str	r2, [r3, #0]
				pwm_dribble = constrain(pwm_dribble, 0, 65535);
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <dribble+0x25c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe f864 	bl	8001370 <constrain>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4a19      	ldr	r2, [pc, #100]	@ (8003310 <dribble+0x25c>)
 80032ac:	6013      	str	r3, [r2, #0]
				TIM2->CCR1 = pwm_dribble;
 80032ae:	4b18      	ldr	r3, [pc, #96]	@ (8003310 <dribble+0x25c>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80032b6:	635a      	str	r2, [r3, #52]	@ 0x34
//        analogWrite(pwmpin_d, pwm_dribble);
			}
			prevmillis_d = HAL_GetTick();
 80032b8:	f002 f9fc 	bl	80056b4 <HAL_GetTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a07      	ldr	r2, [pc, #28]	@ (80032dc <dribble+0x228>)
 80032c0:	6013      	str	r3, [r2, #0]
			prev_error_pot = error_d;
 80032c2:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <dribble+0x230>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a0b      	ldr	r2, [pc, #44]	@ (80032f4 <dribble+0x240>)
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e000      	b.n	80032ce <dribble+0x21a>
		return;
 80032cc:	bf00      	nop
		}
	}
}
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	2000038c 	.word	0x2000038c
 80032d4:	20000388 	.word	0x20000388
 80032d8:	20000384 	.word	0x20000384
 80032dc:	20000394 	.word	0x20000394
 80032e0:	20000058 	.word	0x20000058
 80032e4:	200003a0 	.word	0x200003a0
 80032e8:	40020c00 	.word	0x40020c00
 80032ec:	20000398 	.word	0x20000398
 80032f0:	2000004c 	.word	0x2000004c
 80032f4:	200002a8 	.word	0x200002a8
 80032f8:	40020800 	.word	0x40020800
 80032fc:	20000390 	.word	0x20000390
 8003300:	2000005c 	.word	0x2000005c
 8003304:	463b8000 	.word	0x463b8000
 8003308:	20000060 	.word	0x20000060
 800330c:	20000064 	.word	0x20000064
 8003310:	2000039c 	.word	0x2000039c

08003314 <dalay>:
//     }
//     prev_error_pot = error_pot;
//   }
// }

void dalay(int d) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	unsigned long prevmillis1 = HAL_GetTick();
 800331c:	f002 f9ca 	bl	80056b4 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - prevmillis1 <= d) {
 8003322:	bf00      	nop
 8003324:	f002 f9c6 	bl	80056b4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad2      	subs	r2, r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d9f7      	bls.n	8003324 <dalay+0x10>
		// locomotion();
		// locomote();
		// recievecmd();
		// encoders();
	}
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_TIM_IC_CaptureCallback>:
int u = 0;
bno055_vector_t v;

//uint32_t prev=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
//	else if(htim == &htim3)counter_lower= __HAL_TIM_GetCounter(&htim3);
//	else if(htim == &htim4) counter_4= __HAL_TIM_GetCounter(&htim4);
//	else if(htim == &htim5) counter_5= __HAL_TIM_GetCounter(&htim5);
//	else counter_8= __HAL_TIM_GetCounter(&htim8);

}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
//	if (huart == &huart2)
//		HAL_UART_Receive(&huart2, Ar_data, 29,10);
	if (huart == &huart5)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a10      	ldr	r2, [pc, #64]	@ (80033a0 <HAL_UART_RxCpltCallback+0x4c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d105      	bne.n	8003370 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_DMA(&huart5, Rx_data, 20);
 8003364:	2214      	movs	r2, #20
 8003366:	490f      	ldr	r1, [pc, #60]	@ (80033a4 <HAL_UART_RxCpltCallback+0x50>)
 8003368:	480d      	ldr	r0, [pc, #52]	@ (80033a0 <HAL_UART_RxCpltCallback+0x4c>)
 800336a:	f006 fa1d 	bl	80097a8 <HAL_UART_Receive_DMA>
	}
	else if (huart == &huart2) {
		HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
		}

}
 800336e:	e012      	b.n	8003396 <HAL_UART_RxCpltCallback+0x42>
	else if (huart == &huart4) {
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0d      	ldr	r2, [pc, #52]	@ (80033a8 <HAL_UART_RxCpltCallback+0x54>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d105      	bne.n	8003384 <HAL_UART_RxCpltCallback+0x30>
		HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
 8003378:	2203      	movs	r2, #3
 800337a:	490c      	ldr	r1, [pc, #48]	@ (80033ac <HAL_UART_RxCpltCallback+0x58>)
 800337c:	480a      	ldr	r0, [pc, #40]	@ (80033a8 <HAL_UART_RxCpltCallback+0x54>)
 800337e:	f006 fa13 	bl	80097a8 <HAL_UART_Receive_DMA>
}
 8003382:	e008      	b.n	8003396 <HAL_UART_RxCpltCallback+0x42>
	else if (huart == &huart2) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <HAL_UART_RxCpltCallback+0x5c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d104      	bne.n	8003396 <HAL_UART_RxCpltCallback+0x42>
		HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
 800338c:	221d      	movs	r2, #29
 800338e:	4909      	ldr	r1, [pc, #36]	@ (80033b4 <HAL_UART_RxCpltCallback+0x60>)
 8003390:	4807      	ldr	r0, [pc, #28]	@ (80033b0 <HAL_UART_RxCpltCallback+0x5c>)
 8003392:	f006 fa09 	bl	80097a8 <HAL_UART_Receive_DMA>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000704 	.word	0x20000704
 80033a4:	20000270 	.word	0x20000270
 80033a8:	200006bc 	.word	0x200006bc
 80033ac:	200002a4 	.word	0x200002a4
 80033b0:	20000794 	.word	0x20000794
 80033b4:	20000284 	.word	0x20000284

080033b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80033bc:	f002 f914 	bl	80055e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c0:	f000 fae4 	bl	800398c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c4:	f001 f806 	bl	80043d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80033c8:	f000 ff9e 	bl	8004308 <MX_DMA_Init>
  MX_ADC1_Init();
 80033cc:	f000 fb48 	bl	8003a60 <MX_ADC1_Init>
  MX_I2C1_Init();
 80033d0:	f000 fbfe 	bl	8003bd0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80033d4:	f000 fc2a 	bl	8003c2c <MX_TIM1_Init>
  MX_TIM2_Init();
 80033d8:	f000 fc80 	bl	8003cdc <MX_TIM2_Init>
  MX_TIM3_Init();
 80033dc:	f000 fcf8 	bl	8003dd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80033e0:	f000 fd4a 	bl	8003e78 <MX_TIM4_Init>
  MX_TIM5_Init();
 80033e4:	f000 fd9c 	bl	8003f20 <MX_TIM5_Init>
  MX_TIM8_Init();
 80033e8:	f000 fdee 	bl	8003fc8 <MX_TIM8_Init>
  MX_TIM9_Init();
 80033ec:	f000 fe44 	bl	8004078 <MX_TIM9_Init>
  MX_TIM12_Init();
 80033f0:	f000 fe92 	bl	8004118 <MX_TIM12_Init>
  MX_UART4_Init();
 80033f4:	f000 fee0 	bl	80041b8 <MX_UART4_Init>
  MX_UART5_Init();
 80033f8:	f000 ff08 	bl	800420c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80033fc:	f000 ff30 	bl	8004260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003400:	f000 ff58 	bl	80042b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8003404:	213c      	movs	r1, #60	@ 0x3c
 8003406:	48ad      	ldr	r0, [pc, #692]	@ (80036bc <main+0x304>)
 8003408:	f005 fbe4 	bl	8008bd4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800340c:	213c      	movs	r1, #60	@ 0x3c
 800340e:	48ac      	ldr	r0, [pc, #688]	@ (80036c0 <main+0x308>)
 8003410:	f005 fbe0 	bl	8008bd4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8003414:	213c      	movs	r1, #60	@ 0x3c
 8003416:	48ab      	ldr	r0, [pc, #684]	@ (80036c4 <main+0x30c>)
 8003418:	f005 fbdc 	bl	8008bd4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800341c:	213c      	movs	r1, #60	@ 0x3c
 800341e:	48aa      	ldr	r0, [pc, #680]	@ (80036c8 <main+0x310>)
 8003420:	f005 fbd8 	bl	8008bd4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8003424:	213c      	movs	r1, #60	@ 0x3c
 8003426:	48a9      	ldr	r0, [pc, #676]	@ (80036cc <main+0x314>)
 8003428:	f005 fbd4 	bl	8008bd4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800342c:	2100      	movs	r1, #0
 800342e:	48a8      	ldr	r0, [pc, #672]	@ (80036d0 <main+0x318>)
 8003430:	f005 fa62 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003434:	2104      	movs	r1, #4
 8003436:	48a6      	ldr	r0, [pc, #664]	@ (80036d0 <main+0x318>)
 8003438:	f005 fa5e 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800343c:	2108      	movs	r1, #8
 800343e:	48a4      	ldr	r0, [pc, #656]	@ (80036d0 <main+0x318>)
 8003440:	f005 fa5a 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003444:	210c      	movs	r1, #12
 8003446:	48a2      	ldr	r0, [pc, #648]	@ (80036d0 <main+0x318>)
 8003448:	f005 fa56 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800344c:	2100      	movs	r1, #0
 800344e:	48a1      	ldr	r0, [pc, #644]	@ (80036d4 <main+0x31c>)
 8003450:	f005 fa52 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8003454:	2104      	movs	r1, #4
 8003456:	489f      	ldr	r0, [pc, #636]	@ (80036d4 <main+0x31c>)
 8003458:	f005 fa4e 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_3);
 800345c:	2108      	movs	r1, #8
 800345e:	489d      	ldr	r0, [pc, #628]	@ (80036d4 <main+0x31c>)
 8003460:	f005 fa4a 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8003464:	2100      	movs	r1, #0
 8003466:	489c      	ldr	r0, [pc, #624]	@ (80036d8 <main+0x320>)
 8003468:	f005 fa46 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800346c:	2104      	movs	r1, #4
 800346e:	489a      	ldr	r0, [pc, #616]	@ (80036d8 <main+0x320>)
 8003470:	f005 fa42 	bl	80088f8 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_DMA(&huart5, Rx_data, 20);
 8003474:	2214      	movs	r2, #20
 8003476:	4999      	ldr	r1, [pc, #612]	@ (80036dc <main+0x324>)
 8003478:	4899      	ldr	r0, [pc, #612]	@ (80036e0 <main+0x328>)
 800347a:	f006 f995 	bl	80097a8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
 800347e:	2203      	movs	r2, #3
 8003480:	4998      	ldr	r1, [pc, #608]	@ (80036e4 <main+0x32c>)
 8003482:	4899      	ldr	r0, [pc, #612]	@ (80036e8 <main+0x330>)
 8003484:	f006 f990 	bl	80097a8 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
 8003488:	221d      	movs	r2, #29
 800348a:	4998      	ldr	r1, [pc, #608]	@ (80036ec <main+0x334>)
 800348c:	4898      	ldr	r0, [pc, #608]	@ (80036f0 <main+0x338>)
 800348e:	f006 f98b 	bl	80097a8 <HAL_UART_Receive_DMA>

	bno055_assignI2C(&hi2c1);
 8003492:	4898      	ldr	r0, [pc, #608]	@ (80036f4 <main+0x33c>)
 8003494:	f7fd fe42 	bl	800111c <bno055_assignI2C>
	bno055_setup();
 8003498:	f7fd fe02 	bl	80010a0 <bno055_setup>
	HAL_Delay(200);
 800349c:	20c8      	movs	r0, #200	@ 0xc8
 800349e:	f002 f915 	bl	80056cc <HAL_Delay>
	bno055_setOperationModeNDOF();
 80034a2:	f7fd fdea 	bl	800107a <bno055_setOperationModeNDOF>
	if (hi2c1.State != HAL_I2C_STATE_READY) {
 80034a6:	4b93      	ldr	r3, [pc, #588]	@ (80036f4 <main+0x33c>)
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d005      	beq.n	80034be <main+0x106>
		HAL_I2C_DeInit(&hi2c1);
 80034b2:	4890      	ldr	r0, [pc, #576]	@ (80036f4 <main+0x33c>)
 80034b4:	f003 fe38 	bl	8007128 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c1);
 80034b8:	488e      	ldr	r0, [pc, #568]	@ (80036f4 <main+0x33c>)
 80034ba:	f003 fcf1 	bl	8006ea0 <HAL_I2C_Init>
	}
	HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 80034be:	2201      	movs	r2, #1
 80034c0:	2102      	movs	r1, #2
 80034c2:	488d      	ldr	r0, [pc, #564]	@ (80036f8 <main+0x340>)
 80034c4:	f003 fcd2 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 80034c8:	2201      	movs	r2, #1
 80034ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034ce:	488b      	ldr	r0, [pc, #556]	@ (80036fc <main+0x344>)
 80034d0:	f003 fccc 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 80034d4:	2201      	movs	r2, #1
 80034d6:	2110      	movs	r1, #16
 80034d8:	4889      	ldr	r0, [pc, #548]	@ (8003700 <main+0x348>)
 80034da:	f003 fcc7 	bl	8006e6c <HAL_GPIO_WritePin>
	dalay(200);
 80034de:	20c8      	movs	r0, #200	@ 0xc8
 80034e0:	f7ff ff18 	bl	8003314 <dalay>
	HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 80034e4:	2200      	movs	r2, #0
 80034e6:	2102      	movs	r1, #2
 80034e8:	4883      	ldr	r0, [pc, #524]	@ (80036f8 <main+0x340>)
 80034ea:	f003 fcbf 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034f4:	4881      	ldr	r0, [pc, #516]	@ (80036fc <main+0x344>)
 80034f6:	f003 fcb9 	bl	8006e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2110      	movs	r1, #16
 80034fe:	4880      	ldr	r0, [pc, #512]	@ (8003700 <main+0x348>)
 8003500:	f003 fcb4 	bl	8006e6c <HAL_GPIO_WritePin>
//		if (HAL_GetTick() - prevviousmillisbno > 80) {
//
//			Z_Val = (int)v.x;
//			prevviousmillisbno = HAL_GetTick();
//		}
		temp_pot = analogRead_pa4();
 8003504:	f7ff fda6 	bl	8003054 <analogRead_pa4>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	4b7d      	ldr	r3, [pc, #500]	@ (8003704 <main+0x34c>)
 800350e:	601a      	str	r2, [r3, #0]

//  		start

//		parseJS(&Rx_data);
//		parseJSAR(&Ar_data);
		Mpuvalueslo(&Mp_data);
 8003510:	4874      	ldr	r0, [pc, #464]	@ (80036e4 <main+0x32c>)
 8003512:	f7fe fd1d 	bl	8001f50 <Mpuvalueslo>
		Arvalueslo(&Ar_data);
 8003516:	4875      	ldr	r0, [pc, #468]	@ (80036ec <main+0x334>)
 8003518:	f7fe fcec 	bl	8001ef4 <Arvalueslo>
		Rxvalueslo(&Rx_data);
 800351c:	486f      	ldr	r0, [pc, #444]	@ (80036dc <main+0x324>)
 800351e:	f7fe fc13 	bl	8001d48 <Rxvalueslo>
		dribble();
 8003522:	f7ff fdc7 	bl	80030b4 <dribble>
		rotors(Rotors_flag);
 8003526:	4b78      	ldr	r3, [pc, #480]	@ (8003708 <main+0x350>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe f9ea 	bl	8001904 <rotors>

		rpm_cal();
 8003530:	f7fe fb38 	bl	8001ba4 <rpm_cal>
//		autolocomote();
		switch (loco) {
 8003534:	4b75      	ldr	r3, [pc, #468]	@ (800370c <main+0x354>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	3b41      	subs	r3, #65	@ 0x41
 800353a:	2b2e      	cmp	r3, #46	@ 0x2e
 800353c:	f200 81e3 	bhi.w	8003906 <main+0x54e>
 8003540:	a201      	add	r2, pc, #4	@ (adr r2, 8003548 <main+0x190>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003721 	.word	0x08003721
 800354c:	08003801 	.word	0x08003801
 8003550:	08003907 	.word	0x08003907
 8003554:	08003907 	.word	0x08003907
 8003558:	08003907 	.word	0x08003907
 800355c:	08003907 	.word	0x08003907
 8003560:	08003907 	.word	0x08003907
 8003564:	08003907 	.word	0x08003907
 8003568:	08003907 	.word	0x08003907
 800356c:	080038b9 	.word	0x080038b9
 8003570:	08003623 	.word	0x08003623
 8003574:	0800387d 	.word	0x0800387d
 8003578:	08003907 	.word	0x08003907
 800357c:	08003907 	.word	0x08003907
 8003580:	0800365f 	.word	0x0800365f
 8003584:	08003907 	.word	0x08003907
 8003588:	08003907 	.word	0x08003907
 800358c:	0800389b 	.word	0x0800389b
 8003590:	0800381b 	.word	0x0800381b
 8003594:	08003907 	.word	0x08003907
 8003598:	08003907 	.word	0x08003907
 800359c:	08003907 	.word	0x08003907
 80035a0:	08003907 	.word	0x08003907
 80035a4:	08003813 	.word	0x08003813
 80035a8:	0800367d 	.word	0x0800367d
 80035ac:	08003907 	.word	0x08003907
 80035b0:	08003907 	.word	0x08003907
 80035b4:	08003907 	.word	0x08003907
 80035b8:	08003907 	.word	0x08003907
 80035bc:	08003907 	.word	0x08003907
 80035c0:	08003907 	.word	0x08003907
 80035c4:	08003907 	.word	0x08003907
 80035c8:	08003907 	.word	0x08003907
 80035cc:	08003917 	.word	0x08003917
 80035d0:	08003907 	.word	0x08003907
 80035d4:	080037b3 	.word	0x080037b3
 80035d8:	080037db 	.word	0x080037db
 80035dc:	08003917 	.word	0x08003917
 80035e0:	08003831 	.word	0x08003831
 80035e4:	08003907 	.word	0x08003907
 80035e8:	08003907 	.word	0x08003907
 80035ec:	08003907 	.word	0x08003907
 80035f0:	08003605 	.word	0x08003605
 80035f4:	08003907 	.word	0x08003907
 80035f8:	08003907 	.word	0x08003907
 80035fc:	08003907 	.word	0x08003907
 8003600:	08003641 	.word	0x08003641
		case 'k':
			if (!alignn) {
 8003604:	4b42      	ldr	r3, [pc, #264]	@ (8003710 <main+0x358>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <main+0x260>
				alignn = true;
 8003612:	4b3f      	ldr	r3, [pc, #252]	@ (8003710 <main+0x358>)
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8003618:	f7fe fef6 	bl	8002408 <locomotion>
			locomote();
 800361c:	f7ff f8c4 	bl	80027a8 <locomote>
			break;
 8003620:	e180      	b.n	8003924 <main+0x56c>
			//		      analogWrite(pwm_motor[2], 40);
			// locomotion();
			// locomote();
			break;
		case 'K':
			if (!alignn) {
 8003622:	4b3b      	ldr	r3, [pc, #236]	@ (8003710 <main+0x358>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	f083 0301 	eor.w	r3, r3, #1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <main+0x27e>
				alignn = true;
 8003630:	4b37      	ldr	r3, [pc, #220]	@ (8003710 <main+0x358>)
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8003636:	f7fe fee7 	bl	8002408 <locomotion>
			locomote();
 800363a:	f7ff f8b5 	bl	80027a8 <locomote>
			break;
 800363e:	e171      	b.n	8003924 <main+0x56c>
//				HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 1);
//				dalay(1000);
//				HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 0);
//				break;
		case 'o':
			if (!alignn) {
 8003640:	4b33      	ldr	r3, [pc, #204]	@ (8003710 <main+0x358>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	f083 0301 	eor.w	r3, r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <main+0x29c>
				alignn = true;
 800364e:	4b30      	ldr	r3, [pc, #192]	@ (8003710 <main+0x358>)
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8003654:	f7fe fed8 	bl	8002408 <locomotion>
			locomote();
 8003658:	f7ff f8a6 	bl	80027a8 <locomote>
			break;
 800365c:	e162      	b.n	8003924 <main+0x56c>
		case 'O':
			if (!alignn) {
 800365e:	4b2c      	ldr	r3, [pc, #176]	@ (8003710 <main+0x358>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	f083 0301 	eor.w	r3, r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <main+0x2ba>
				alignn = true;
 800366c:	4b28      	ldr	r3, [pc, #160]	@ (8003710 <main+0x358>)
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8003672:	f7fe fec9 	bl	8002408 <locomotion>
			locomote();
 8003676:	f7ff f897 	bl	80027a8 <locomote>
			break;
 800367a:	e153      	b.n	8003924 <main+0x56c>
		case 'Y':
			if (!alignn) {
 800367c:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <main+0x358>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <main+0x2d8>
				alignn = true;
 800368a:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <main+0x358>)
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
			}

			if (flag_amkette) {
 8003690:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <main+0x35c>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8140 	beq.w	800391a <main+0x562>
				if (autoloco) {
 800369a:	4b1f      	ldr	r3, [pc, #124]	@ (8003718 <main+0x360>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <main+0x2f0>
					autoloco = false;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003718 <main+0x360>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
				}
				feed();
 80036a8:	f7fe fa56 	bl	8001b58 <feed>
				isthreepointer = 0;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <main+0x364>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
				flag_amkette = false;
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <main+0x35c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036b8:	e12f      	b.n	800391a <main+0x562>
 80036ba:	bf00      	nop
 80036bc:	200003a8 	.word	0x200003a8
 80036c0:	200003f0 	.word	0x200003f0
 80036c4:	20000438 	.word	0x20000438
 80036c8:	20000480 	.word	0x20000480
 80036cc:	200004c8 	.word	0x200004c8
 80036d0:	200005e4 	.word	0x200005e4
 80036d4:	2000062c 	.word	0x2000062c
 80036d8:	20000674 	.word	0x20000674
 80036dc:	20000270 	.word	0x20000270
 80036e0:	20000704 	.word	0x20000704
 80036e4:	200002a4 	.word	0x200002a4
 80036e8:	200006bc 	.word	0x200006bc
 80036ec:	20000284 	.word	0x20000284
 80036f0:	20000794 	.word	0x20000794
 80036f4:	20000590 	.word	0x20000590
 80036f8:	40020c00 	.word	0x40020c00
 80036fc:	40020800 	.word	0x40020800
 8003700:	40020400 	.word	0x40020400
 8003704:	2000038c 	.word	0x2000038c
 8003708:	20000380 	.word	0x20000380
 800370c:	20000040 	.word	0x20000040
 8003710:	20000020 	.word	0x20000020
 8003714:	2000004c 	.word	0x2000004c
 8003718:	200002a7 	.word	0x200002a7
 800371c:	20000054 	.word	0x20000054
		case 'A':
			if (!alignn) {
 8003720:	4b81      	ldr	r3, [pc, #516]	@ (8003928 <main+0x570>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <main+0x37c>
				alignn = true;
 800372e:	4b7e      	ldr	r3, [pc, #504]	@ (8003928 <main+0x570>)
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
			}
			if (flag_amkette) {
 8003734:	4b7d      	ldr	r3, [pc, #500]	@ (800392c <main+0x574>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80f0 	beq.w	800391e <main+0x566>
				if (fOperation == 0) {
 800373e:	4b7c      	ldr	r3, [pc, #496]	@ (8003930 <main+0x578>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d131      	bne.n	80037aa <main+0x3f2>
					if (autoloco) {
 8003746:	4b7b      	ldr	r3, [pc, #492]	@ (8003934 <main+0x57c>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <main+0x39c>
						autoloco = false;
 800374e:	4b79      	ldr	r3, [pc, #484]	@ (8003934 <main+0x57c>)
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
					}
					f_dribble = true;
 8003754:	4b78      	ldr	r3, [pc, #480]	@ (8003938 <main+0x580>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
					fOperation = 1;
 800375a:	4b75      	ldr	r3, [pc, #468]	@ (8003930 <main+0x578>)
 800375c:	2201      	movs	r2, #1
 800375e:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 1);
 8003760:	2201      	movs	r2, #1
 8003762:	2108      	movs	r1, #8
 8003764:	4875      	ldr	r0, [pc, #468]	@ (800393c <main+0x584>)
 8003766:	f003 fb81 	bl	8006e6c <HAL_GPIO_WritePin>
					dalay(600);
 800376a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800376e:	f7ff fdd1 	bl	8003314 <dalay>
					HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	2108      	movs	r1, #8
 8003776:	4871      	ldr	r0, [pc, #452]	@ (800393c <main+0x584>)
 8003778:	f003 fb78 	bl	8006e6c <HAL_GPIO_WritePin>
					dalay(600);
 800377c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003780:	f7ff fdc8 	bl	8003314 <dalay>
					HAL_GPIO_WritePin(extendUpper_Port, extendUpper_Pin, 1);
 8003784:	2201      	movs	r2, #1
 8003786:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800378a:	486d      	ldr	r0, [pc, #436]	@ (8003940 <main+0x588>)
 800378c:	f003 fb6e 	bl	8006e6c <HAL_GPIO_WritePin>
					dalay(150);
 8003790:	2096      	movs	r0, #150	@ 0x96
 8003792:	f7ff fdbf 	bl	8003314 <dalay>
					HAL_GPIO_WritePin(extendUpper_Port, extendUpper_Pin, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800379c:	4868      	ldr	r0, [pc, #416]	@ (8003940 <main+0x588>)
 800379e:	f003 fb65 	bl	8006e6c <HAL_GPIO_WritePin>
					dalay(300);
 80037a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80037a6:	f7ff fdb5 	bl	8003314 <dalay>
				}
				flag_amkette = false;
 80037aa:	4b60      	ldr	r3, [pc, #384]	@ (800392c <main+0x574>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
			}
			break;
 80037b0:	e0b5      	b.n	800391e <main+0x566>

		case 'd':
//			if (autoloco) {
//				autoloco = false;
//			}
			isthreepointer = 1;
 80037b2:	4b64      	ldr	r3, [pc, #400]	@ (8003944 <main+0x58c>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
			Rotors_flag = 1;
 80037b8:	4b63      	ldr	r3, [pc, #396]	@ (8003948 <main+0x590>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
			kdLower = 0.05;
 80037be:	4b63      	ldr	r3, [pc, #396]	@ (800394c <main+0x594>)
 80037c0:	4a63      	ldr	r2, [pc, #396]	@ (8003950 <main+0x598>)
 80037c2:	601a      	str	r2, [r3, #0]
			kdUpper = 0.033;
 80037c4:	4b63      	ldr	r3, [pc, #396]	@ (8003954 <main+0x59c>)
 80037c6:	4a64      	ldr	r2, [pc, #400]	@ (8003958 <main+0x5a0>)
 80037c8:	601a      	str	r2, [r3, #0]
			kpLower = 0.25;
 80037ca:	4b64      	ldr	r3, [pc, #400]	@ (800395c <main+0x5a4>)
 80037cc:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80037d0:	601a      	str	r2, [r3, #0]
			kpUpper = 0.2;
 80037d2:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <main+0x5a8>)
 80037d4:	4a63      	ldr	r2, [pc, #396]	@ (8003964 <main+0x5ac>)
 80037d6:	601a      	str	r2, [r3, #0]
			break;
 80037d8:	e0a4      	b.n	8003924 <main+0x56c>
		case 'e':
//			if (autoloco) {
//				autoloco = false;
//			}
			isthreepointer = 0;
 80037da:	4b5a      	ldr	r3, [pc, #360]	@ (8003944 <main+0x58c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
			Rotors_flag = 1;
 80037e0:	4b59      	ldr	r3, [pc, #356]	@ (8003948 <main+0x590>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
			kdLower = 0.05;
 80037e6:	4b59      	ldr	r3, [pc, #356]	@ (800394c <main+0x594>)
 80037e8:	4a59      	ldr	r2, [pc, #356]	@ (8003950 <main+0x598>)
 80037ea:	601a      	str	r2, [r3, #0]
			kdUpper = 0.033;
 80037ec:	4b59      	ldr	r3, [pc, #356]	@ (8003954 <main+0x59c>)
 80037ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003958 <main+0x5a0>)
 80037f0:	601a      	str	r2, [r3, #0]
			kpLower = 0.55;
 80037f2:	4b5a      	ldr	r3, [pc, #360]	@ (800395c <main+0x5a4>)
 80037f4:	4a5c      	ldr	r2, [pc, #368]	@ (8003968 <main+0x5b0>)
 80037f6:	601a      	str	r2, [r3, #0]
			kpUpper = 0.6;
 80037f8:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <main+0x5a8>)
 80037fa:	4a5c      	ldr	r2, [pc, #368]	@ (800396c <main+0x5b4>)
 80037fc:	601a      	str	r2, [r3, #0]
			break;
 80037fe:	e091      	b.n	8003924 <main+0x56c>
//  		      kpUpper = 0.0;
//  		      baseLower = 0;
//  		      baseUpper = 0;
//  		      break;
		case 'B':
			if (autoloco) {
 8003800:	4b4c      	ldr	r3, [pc, #304]	@ (8003934 <main+0x57c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <main+0x456>
				autoloco = false;
 8003808:	4b4a      	ldr	r3, [pc, #296]	@ (8003934 <main+0x57c>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
			}
			NVIC_SystemReset();
 800380e:	f7fd fc6f 	bl	80010f0 <__NVIC_SystemReset>
			break;
		case 'X':
			autoloco = true;
 8003812:	4b48      	ldr	r3, [pc, #288]	@ (8003934 <main+0x57c>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
			break;
 8003818:	e084      	b.n	8003924 <main+0x56c>
		case 'S':
			nexts = true;
 800381a:	4b55      	ldr	r3, [pc, #340]	@ (8003970 <main+0x5b8>)
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
			flag_amkette = true;
 8003820:	4b42      	ldr	r3, [pc, #264]	@ (800392c <main+0x574>)
 8003822:	2201      	movs	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
			locomotion();
 8003826:	f7fe fdef 	bl	8002408 <locomotion>
			locomote();
 800382a:	f7fe ffbd 	bl	80027a8 <locomote>

			break;
 800382e:	e079      	b.n	8003924 <main+0x56c>
		case 'g':
			if (nexts) {
 8003830:	4b4f      	ldr	r3, [pc, #316]	@ (8003970 <main+0x5b8>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d074      	beq.n	8003922 <main+0x56a>
				if (alpha == 0) {
 8003838:	4b4e      	ldr	r3, [pc, #312]	@ (8003974 <main+0x5bc>)
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	d103      	bne.n	8003850 <main+0x498>
					alignvalue = 180;
 8003848:	4b4b      	ldr	r3, [pc, #300]	@ (8003978 <main+0x5c0>)
 800384a:	4a4c      	ldr	r2, [pc, #304]	@ (800397c <main+0x5c4>)
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e00e      	b.n	800386e <main+0x4b6>
				} else {
					alignvalue = Z_Val + alpha + 6;
 8003850:	4b4b      	ldr	r3, [pc, #300]	@ (8003980 <main+0x5c8>)
 8003852:	ed93 7a00 	vldr	s14, [r3]
 8003856:	4b47      	ldr	r3, [pc, #284]	@ (8003974 <main+0x5bc>)
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003860:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003868:	4b43      	ldr	r3, [pc, #268]	@ (8003978 <main+0x5c0>)
 800386a:	edc3 7a00 	vstr	s15, [r3]
				}
				alignn = false;
 800386e:	4b2e      	ldr	r3, [pc, #184]	@ (8003928 <main+0x570>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
				nexts = false;
 8003874:	4b3e      	ldr	r3, [pc, #248]	@ (8003970 <main+0x5b8>)
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
			}

			break;
 800387a:	e052      	b.n	8003922 <main+0x56a>

		case 'L':
			if (!alignn) {
 800387c:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <main+0x570>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <main+0x4d8>
					alignn = true;
 800388a:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <main+0x570>)
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
			}
			locomotion();
 8003890:	f7fe fdba 	bl	8002408 <locomotion>
			locomote();
 8003894:	f7fe ff88 	bl	80027a8 <locomote>
			break;
 8003898:	e044      	b.n	8003924 <main+0x56c>
		case 'R':
			if (!alignn) {
 800389a:	4b23      	ldr	r3, [pc, #140]	@ (8003928 <main+0x570>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <main+0x4f6>
			alignn = true;
 80038a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003928 <main+0x570>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
			}
			locomotion();
 80038ae:	f7fe fdab 	bl	8002408 <locomotion>
			locomote();
 80038b2:	f7fe ff79 	bl	80027a8 <locomote>
			break;
 80038b6:	e035      	b.n	8003924 <main+0x56c>
		case 'J':
//			if (autoloco) {
//				autoloco = false;
//			}
			Rotors_flag = 0;
 80038b8:	4b23      	ldr	r3, [pc, #140]	@ (8003948 <main+0x590>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 80038be:	2201      	movs	r2, #1
 80038c0:	2102      	movs	r1, #2
 80038c2:	481e      	ldr	r0, [pc, #120]	@ (800393c <main+0x584>)
 80038c4:	f003 fad2 	bl	8006e6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 80038c8:	2201      	movs	r2, #1
 80038ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038ce:	482d      	ldr	r0, [pc, #180]	@ (8003984 <main+0x5cc>)
 80038d0:	f003 facc 	bl	8006e6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 80038d4:	2201      	movs	r2, #1
 80038d6:	2110      	movs	r1, #16
 80038d8:	482b      	ldr	r0, [pc, #172]	@ (8003988 <main+0x5d0>)
 80038da:	f003 fac7 	bl	8006e6c <HAL_GPIO_WritePin>
			dalay(200);
 80038de:	20c8      	movs	r0, #200	@ 0xc8
 80038e0:	f7ff fd18 	bl	8003314 <dalay>
			HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2102      	movs	r1, #2
 80038e8:	4814      	ldr	r0, [pc, #80]	@ (800393c <main+0x584>)
 80038ea:	f003 fabf 	bl	8006e6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 80038ee:	2200      	movs	r2, #0
 80038f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038f4:	4823      	ldr	r0, [pc, #140]	@ (8003984 <main+0x5cc>)
 80038f6:	f003 fab9 	bl	8006e6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2110      	movs	r1, #16
 80038fe:	4822      	ldr	r0, [pc, #136]	@ (8003988 <main+0x5d0>)
 8003900:	f003 fab4 	bl	8006e6c <HAL_GPIO_WritePin>
			break;
 8003904:	e00e      	b.n	8003924 <main+0x56c>

		default:
			flag_amkette = true;
 8003906:	4b09      	ldr	r3, [pc, #36]	@ (800392c <main+0x574>)
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
			locomotion();
 800390c:	f7fe fd7c 	bl	8002408 <locomotion>
			locomote();
 8003910:	f7fe ff4a 	bl	80027a8 <locomote>

			break;
 8003914:	e006      	b.n	8003924 <main+0x56c>
			break;
 8003916:	bf00      	nop
 8003918:	e5f4      	b.n	8003504 <main+0x14c>
			break;
 800391a:	bf00      	nop
 800391c:	e5f2      	b.n	8003504 <main+0x14c>
			break;
 800391e:	bf00      	nop
 8003920:	e5f0      	b.n	8003504 <main+0x14c>
			break;
 8003922:	bf00      	nop
		temp_pot = analogRead_pa4();
 8003924:	e5ee      	b.n	8003504 <main+0x14c>
 8003926:	bf00      	nop
 8003928:	20000020 	.word	0x20000020
 800392c:	2000004c 	.word	0x2000004c
 8003930:	20000384 	.word	0x20000384
 8003934:	200002a7 	.word	0x200002a7
 8003938:	20000388 	.word	0x20000388
 800393c:	40020c00 	.word	0x40020c00
 8003940:	40020000 	.word	0x40020000
 8003944:	20000054 	.word	0x20000054
 8003948:	20000380 	.word	0x20000380
 800394c:	20000378 	.word	0x20000378
 8003950:	3d4ccccd 	.word	0x3d4ccccd
 8003954:	2000037c 	.word	0x2000037c
 8003958:	3d072b02 	.word	0x3d072b02
 800395c:	20000044 	.word	0x20000044
 8003960:	20000048 	.word	0x20000048
 8003964:	3e4ccccd 	.word	0x3e4ccccd
 8003968:	3f0ccccd 	.word	0x3f0ccccd
 800396c:	3f19999a 	.word	0x3f19999a
 8003970:	200002e8 	.word	0x200002e8
 8003974:	200002ac 	.word	0x200002ac
 8003978:	200002e4 	.word	0x200002e4
 800397c:	43340000 	.word	0x43340000
 8003980:	20000318 	.word	0x20000318
 8003984:	40020800 	.word	0x40020800
 8003988:	40020400 	.word	0x40020400

0800398c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b094      	sub	sp, #80	@ 0x50
 8003990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003992:	f107 0320 	add.w	r3, r7, #32
 8003996:	2230      	movs	r2, #48	@ 0x30
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f008 fb98 	bl	800c0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	4b28      	ldr	r3, [pc, #160]	@ (8003a58 <SystemClock_Config+0xcc>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	4a27      	ldr	r2, [pc, #156]	@ (8003a58 <SystemClock_Config+0xcc>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039be:	6413      	str	r3, [r2, #64]	@ 0x40
 80039c0:	4b25      	ldr	r3, [pc, #148]	@ (8003a58 <SystemClock_Config+0xcc>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039cc:	2300      	movs	r3, #0
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	4b22      	ldr	r3, [pc, #136]	@ (8003a5c <SystemClock_Config+0xd0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a21      	ldr	r2, [pc, #132]	@ (8003a5c <SystemClock_Config+0xd0>)
 80039d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a5c <SystemClock_Config+0xd0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039e8:	2302      	movs	r3, #2
 80039ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039ec:	2301      	movs	r3, #1
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039f0:	2310      	movs	r3, #16
 80039f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039f4:	2302      	movs	r3, #2
 80039f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039f8:	2300      	movs	r3, #0
 80039fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039fc:	2308      	movs	r3, #8
 80039fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003a00:	23a8      	movs	r3, #168	@ 0xa8
 8003a02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a04:	2302      	movs	r3, #2
 8003a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a08:	2307      	movs	r3, #7
 8003a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a0c:	f107 0320 	add.w	r3, r7, #32
 8003a10:	4618      	mov	r0, r3
 8003a12:	f004 fa89 	bl	8007f28 <HAL_RCC_OscConfig>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a1c:	f000 fda2 	bl	8004564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a20:	230f      	movs	r3, #15
 8003a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a24:	2302      	movs	r3, #2
 8003a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a38:	f107 030c 	add.w	r3, r7, #12
 8003a3c:	2105      	movs	r1, #5
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f004 fcea 	bl	8008418 <HAL_RCC_ClockConfig>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a4a:	f000 fd8b 	bl	8004564 <Error_Handler>
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3750      	adds	r7, #80	@ 0x50
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40007000 	.word	0x40007000

08003a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a66:	463b      	mov	r3, r7
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003a72:	4b54      	ldr	r3, [pc, #336]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003a74:	4a54      	ldr	r2, [pc, #336]	@ (8003bc8 <MX_ADC1_Init+0x168>)
 8003a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a78:	4b52      	ldr	r3, [pc, #328]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003a7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a80:	4b50      	ldr	r3, [pc, #320]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003a86:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003a92:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8003a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003aa0:	4b48      	ldr	r3, [pc, #288]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003aa6:	4b47      	ldr	r3, [pc, #284]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003aa8:	4a48      	ldr	r2, [pc, #288]	@ (8003bcc <MX_ADC1_Init+0x16c>)
 8003aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003aac:	4b45      	ldr	r3, [pc, #276]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8003ab2:	4b44      	ldr	r3, [pc, #272]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ab8:	4b42      	ldr	r3, [pc, #264]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ac0:	4b40      	ldr	r3, [pc, #256]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ac6:	483f      	ldr	r0, [pc, #252]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003ac8:	f001 fe24 	bl	8005714 <HAL_ADC_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8003ad2:	f000 fd47 	bl	8004564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003ada:	2301      	movs	r3, #1
 8003adc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8003ade:	2304      	movs	r3, #4
 8003ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ae2:	463b      	mov	r3, r7
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4837      	ldr	r0, [pc, #220]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003ae8:	f001 fff6 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8003af2:	f000 fd37 	bl	8004564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003af6:	2305      	movs	r3, #5
 8003af8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003afa:	2302      	movs	r3, #2
 8003afc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003afe:	463b      	mov	r3, r7
 8003b00:	4619      	mov	r1, r3
 8003b02:	4830      	ldr	r0, [pc, #192]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003b04:	f001 ffe8 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003b0e:	f000 fd29 	bl	8004564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003b12:	230a      	movs	r3, #10
 8003b14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003b16:	2303      	movs	r3, #3
 8003b18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4829      	ldr	r0, [pc, #164]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003b20:	f001 ffda 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8003b2a:	f000 fd1b 	bl	8004564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003b2e:	230b      	movs	r3, #11
 8003b30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003b32:	2304      	movs	r3, #4
 8003b34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b36:	463b      	mov	r3, r7
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4822      	ldr	r0, [pc, #136]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003b3c:	f001 ffcc 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8003b46:	f000 fd0d 	bl	8004564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003b4e:	2305      	movs	r3, #5
 8003b50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b52:	463b      	mov	r3, r7
 8003b54:	4619      	mov	r1, r3
 8003b56:	481b      	ldr	r0, [pc, #108]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003b58:	f001 ffbe 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8003b62:	f000 fcff 	bl	8004564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003b66:	230d      	movs	r3, #13
 8003b68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b6e:	463b      	mov	r3, r7
 8003b70:	4619      	mov	r1, r3
 8003b72:	4814      	ldr	r0, [pc, #80]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003b74:	f001 ffb0 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8003b7e:	f000 fcf1 	bl	8004564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003b82:	230e      	movs	r3, #14
 8003b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003b86:	2307      	movs	r3, #7
 8003b88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	480d      	ldr	r0, [pc, #52]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003b90:	f001 ffa2 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8003b9a:	f000 fce3 	bl	8004564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003b9e:	230f      	movs	r3, #15
 8003ba0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4806      	ldr	r0, [pc, #24]	@ (8003bc4 <MX_ADC1_Init+0x164>)
 8003bac:	f001 ff94 	bl	8005ad8 <HAL_ADC_ConfigChannel>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8003bb6:	f000 fcd5 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000548 	.word	0x20000548
 8003bc8:	40012000 	.word	0x40012000
 8003bcc:	0f000001 	.word	0x0f000001

08003bd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003bd4:	4b12      	ldr	r3, [pc, #72]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003bd6:	4a13      	ldr	r2, [pc, #76]	@ (8003c24 <MX_I2C1_Init+0x54>)
 8003bd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003bda:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003bdc:	4a12      	ldr	r2, [pc, #72]	@ (8003c28 <MX_I2C1_Init+0x58>)
 8003bde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003be0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003be6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003bee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003bf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c00:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c0c:	4804      	ldr	r0, [pc, #16]	@ (8003c20 <MX_I2C1_Init+0x50>)
 8003c0e:	f003 f947 	bl	8006ea0 <HAL_I2C_Init>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c18:	f000 fca4 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c1c:	bf00      	nop
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000590 	.word	0x20000590
 8003c24:	40005400 	.word	0x40005400
 8003c28:	000186a0 	.word	0x000186a0

08003c2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	@ 0x30
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	2224      	movs	r2, #36	@ 0x24
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f008 fa48 	bl	800c0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c48:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003c4a:	4a23      	ldr	r2, [pc, #140]	@ (8003cd8 <MX_TIM1_Init+0xac>)
 8003c4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c4e:	4b21      	ldr	r3, [pc, #132]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c54:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003c5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c62:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c68:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c74:	2303      	movs	r3, #3
 8003c76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003c84:	230a      	movs	r3, #10
 8003c86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003c94:	230a      	movs	r3, #10
 8003c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	480d      	ldr	r0, [pc, #52]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003ca0:	f004 fef2 	bl	8008a88 <HAL_TIM_Encoder_Init>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003caa:	f000 fc5b 	bl	8004564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4806      	ldr	r0, [pc, #24]	@ (8003cd4 <MX_TIM1_Init+0xa8>)
 8003cbc:	f005 fc94 	bl	80095e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003cc6:	f000 fc4d 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003cca:	bf00      	nop
 8003ccc:	3730      	adds	r7, #48	@ 0x30
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200003a8 	.word	0x200003a8
 8003cd8:	40010000 	.word	0x40010000

08003cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	@ 0x28
 8003ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce2:	f107 0320 	add.w	r3, r7, #32
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	60da      	str	r2, [r3, #12]
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	615a      	str	r2, [r3, #20]
 8003cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cfe:	4b33      	ldr	r3, [pc, #204]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d06:	4b31      	ldr	r3, [pc, #196]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003d12:	4b2e      	ldr	r3, [pc, #184]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d20:	4b2a      	ldr	r3, [pc, #168]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d26:	4829      	ldr	r0, [pc, #164]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d28:	f004 fd96 	bl	8008858 <HAL_TIM_PWM_Init>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003d32:	f000 fc17 	bl	8004564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d3e:	f107 0320 	add.w	r3, r7, #32
 8003d42:	4619      	mov	r1, r3
 8003d44:	4821      	ldr	r0, [pc, #132]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d46:	f005 fc4f 	bl	80095e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003d50:	f000 fc08 	bl	8004564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d54:	2360      	movs	r3, #96	@ 0x60
 8003d56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003d60:	2304      	movs	r3, #4
 8003d62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	2200      	movs	r2, #0
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4818      	ldr	r0, [pc, #96]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d6c:	f005 f8d0 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003d76:	f000 fbf5 	bl	8004564 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4812      	ldr	r0, [pc, #72]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d82:	f005 f8c5 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003d8c:	f000 fbea 	bl	8004564 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	2208      	movs	r2, #8
 8003d94:	4619      	mov	r1, r3
 8003d96:	480d      	ldr	r0, [pc, #52]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003d98:	f005 f8ba 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8003da2:	f000 fbdf 	bl	8004564 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	220c      	movs	r2, #12
 8003daa:	4619      	mov	r1, r3
 8003dac:	4807      	ldr	r0, [pc, #28]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003dae:	f005 f8af 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8003db8:	f000 fbd4 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003dbc:	4803      	ldr	r0, [pc, #12]	@ (8003dcc <MX_TIM2_Init+0xf0>)
 8003dbe:	f000 fe9b 	bl	8004af8 <HAL_TIM_MspPostInit>

}
 8003dc2:	bf00      	nop
 8003dc4:	3728      	adds	r7, #40	@ 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200005e4 	.word	0x200005e4

08003dd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	@ 0x30
 8003dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003dd6:	f107 030c 	add.w	r3, r7, #12
 8003dda:	2224      	movs	r2, #36	@ 0x24
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f008 f976 	bl	800c0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003dec:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <MX_TIM3_Init+0xa0>)
 8003dee:	4a21      	ldr	r2, [pc, #132]	@ (8003e74 <MX_TIM3_Init+0xa4>)
 8003df0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003df2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e70 <MX_TIM3_Init+0xa0>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e70 <MX_TIM3_Init+0xa0>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003e70 <MX_TIM3_Init+0xa0>)
 8003e00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e06:	4b1a      	ldr	r3, [pc, #104]	@ (8003e70 <MX_TIM3_Init+0xa0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0c:	4b18      	ldr	r3, [pc, #96]	@ (8003e70 <MX_TIM3_Init+0xa0>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e12:	2303      	movs	r3, #3
 8003e14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003e16:	2302      	movs	r3, #2
 8003e18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003e22:	230a      	movs	r3, #10
 8003e24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003e26:	2302      	movs	r3, #2
 8003e28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003e32:	230a      	movs	r3, #10
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003e36:	f107 030c 	add.w	r3, r7, #12
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	480c      	ldr	r0, [pc, #48]	@ (8003e70 <MX_TIM3_Init+0xa0>)
 8003e3e:	f004 fe23 	bl	8008a88 <HAL_TIM_Encoder_Init>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003e48:	f000 fb8c 	bl	8004564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4805      	ldr	r0, [pc, #20]	@ (8003e70 <MX_TIM3_Init+0xa0>)
 8003e5a:	f005 fbc5 	bl	80095e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003e64:	f000 fb7e 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e68:	bf00      	nop
 8003e6a:	3730      	adds	r7, #48	@ 0x30
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	200003f0 	.word	0x200003f0
 8003e74:	40000400 	.word	0x40000400

08003e78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	@ 0x30
 8003e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	2224      	movs	r2, #36	@ 0x24
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f008 f922 	bl	800c0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e94:	4b20      	ldr	r3, [pc, #128]	@ (8003f18 <MX_TIM4_Init+0xa0>)
 8003e96:	4a21      	ldr	r2, [pc, #132]	@ (8003f1c <MX_TIM4_Init+0xa4>)
 8003e98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f18 <MX_TIM4_Init+0xa0>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <MX_TIM4_Init+0xa0>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f18 <MX_TIM4_Init+0xa0>)
 8003ea8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eae:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <MX_TIM4_Init+0xa0>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eb4:	4b18      	ldr	r3, [pc, #96]	@ (8003f18 <MX_TIM4_Init+0xa0>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003eca:	230a      	movs	r3, #10
 8003ecc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003eda:	230a      	movs	r3, #10
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ede:	f107 030c 	add.w	r3, r7, #12
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	480c      	ldr	r0, [pc, #48]	@ (8003f18 <MX_TIM4_Init+0xa0>)
 8003ee6:	f004 fdcf 	bl	8008a88 <HAL_TIM_Encoder_Init>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003ef0:	f000 fb38 	bl	8004564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003efc:	1d3b      	adds	r3, r7, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4805      	ldr	r0, [pc, #20]	@ (8003f18 <MX_TIM4_Init+0xa0>)
 8003f02:	f005 fb71 	bl	80095e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003f0c:	f000 fb2a 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f10:	bf00      	nop
 8003f12:	3730      	adds	r7, #48	@ 0x30
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000438 	.word	0x20000438
 8003f1c:	40000800 	.word	0x40000800

08003f20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08c      	sub	sp, #48	@ 0x30
 8003f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	2224      	movs	r2, #36	@ 0x24
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f008 f8ce 	bl	800c0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f3c:	4b20      	ldr	r3, [pc, #128]	@ (8003fc0 <MX_TIM5_Init+0xa0>)
 8003f3e:	4a21      	ldr	r2, [pc, #132]	@ (8003fc4 <MX_TIM5_Init+0xa4>)
 8003f40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003f42:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc0 <MX_TIM5_Init+0xa0>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <MX_TIM5_Init+0xa0>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc0 <MX_TIM5_Init+0xa0>)
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f56:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <MX_TIM5_Init+0xa0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5c:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <MX_TIM5_Init+0xa0>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f62:	2303      	movs	r3, #3
 8003f64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003f66:	2302      	movs	r3, #2
 8003f68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003f72:	230a      	movs	r3, #10
 8003f74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003f76:	2302      	movs	r3, #2
 8003f78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003f82:	230a      	movs	r3, #10
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	480c      	ldr	r0, [pc, #48]	@ (8003fc0 <MX_TIM5_Init+0xa0>)
 8003f8e:	f004 fd7b 	bl	8008a88 <HAL_TIM_Encoder_Init>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003f98:	f000 fae4 	bl	8004564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4805      	ldr	r0, [pc, #20]	@ (8003fc0 <MX_TIM5_Init+0xa0>)
 8003faa:	f005 fb1d 	bl	80095e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003fb4:	f000 fad6 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	3730      	adds	r7, #48	@ 0x30
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000480 	.word	0x20000480
 8003fc4:	40000c00 	.word	0x40000c00

08003fc8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08c      	sub	sp, #48	@ 0x30
 8003fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	2224      	movs	r2, #36	@ 0x24
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f008 f87a 	bl	800c0d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003fe4:	4b22      	ldr	r3, [pc, #136]	@ (8004070 <MX_TIM8_Init+0xa8>)
 8003fe6:	4a23      	ldr	r2, [pc, #140]	@ (8004074 <MX_TIM8_Init+0xac>)
 8003fe8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003fea:	4b21      	ldr	r3, [pc, #132]	@ (8004070 <MX_TIM8_Init+0xa8>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8004070 <MX_TIM8_Init+0xa8>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8004070 <MX_TIM8_Init+0xa8>)
 8003ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ffc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8004070 <MX_TIM8_Init+0xa8>)
 8004000:	2200      	movs	r2, #0
 8004002:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004004:	4b1a      	ldr	r3, [pc, #104]	@ (8004070 <MX_TIM8_Init+0xa8>)
 8004006:	2200      	movs	r2, #0
 8004008:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400a:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <MX_TIM8_Init+0xa8>)
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004010:	2303      	movs	r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004014:	2302      	movs	r3, #2
 8004016:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004018:	2301      	movs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8004020:	230a      	movs	r3, #10
 8004022:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004024:	2302      	movs	r3, #2
 8004026:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004028:	2301      	movs	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800402c:	2300      	movs	r3, #0
 800402e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8004030:	230a      	movs	r3, #10
 8004032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004034:	f107 030c 	add.w	r3, r7, #12
 8004038:	4619      	mov	r1, r3
 800403a:	480d      	ldr	r0, [pc, #52]	@ (8004070 <MX_TIM8_Init+0xa8>)
 800403c:	f004 fd24 	bl	8008a88 <HAL_TIM_Encoder_Init>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004046:	f000 fa8d 	bl	8004564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4806      	ldr	r0, [pc, #24]	@ (8004070 <MX_TIM8_Init+0xa8>)
 8004058:	f005 fac6 	bl	80095e8 <HAL_TIMEx_MasterConfigSynchronization>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004062:	f000 fa7f 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004066:	bf00      	nop
 8004068:	3730      	adds	r7, #48	@ 0x30
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200004c8 	.word	0x200004c8
 8004074:	40010400 	.word	0x40010400

08004078 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	611a      	str	r2, [r3, #16]
 800408c:	615a      	str	r2, [r3, #20]
 800408e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004090:	4b1f      	ldr	r3, [pc, #124]	@ (8004110 <MX_TIM9_Init+0x98>)
 8004092:	4a20      	ldr	r2, [pc, #128]	@ (8004114 <MX_TIM9_Init+0x9c>)
 8004094:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8004096:	4b1e      	ldr	r3, [pc, #120]	@ (8004110 <MX_TIM9_Init+0x98>)
 8004098:	2200      	movs	r2, #0
 800409a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800409c:	4b1c      	ldr	r3, [pc, #112]	@ (8004110 <MX_TIM9_Init+0x98>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80040a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <MX_TIM9_Init+0x98>)
 80040a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040a8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040aa:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <MX_TIM9_Init+0x98>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b0:	4b17      	ldr	r3, [pc, #92]	@ (8004110 <MX_TIM9_Init+0x98>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80040b6:	4816      	ldr	r0, [pc, #88]	@ (8004110 <MX_TIM9_Init+0x98>)
 80040b8:	f004 fbce 	bl	8008858 <HAL_TIM_PWM_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80040c2:	f000 fa4f 	bl	8004564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040c6:	2360      	movs	r3, #96	@ 0x60
 80040c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80040d2:	2304      	movs	r3, #4
 80040d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	2200      	movs	r2, #0
 80040da:	4619      	mov	r1, r3
 80040dc:	480c      	ldr	r0, [pc, #48]	@ (8004110 <MX_TIM9_Init+0x98>)
 80040de:	f004 ff17 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80040e8:	f000 fa3c 	bl	8004564 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	2204      	movs	r2, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4807      	ldr	r0, [pc, #28]	@ (8004110 <MX_TIM9_Init+0x98>)
 80040f4:	f004 ff0c 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80040fe:	f000 fa31 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004102:	4803      	ldr	r0, [pc, #12]	@ (8004110 <MX_TIM9_Init+0x98>)
 8004104:	f000 fcf8 	bl	8004af8 <HAL_TIM_MspPostInit>

}
 8004108:	bf00      	nop
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	2000062c 	.word	0x2000062c
 8004114:	40014000 	.word	0x40014000

08004118 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	615a      	str	r2, [r3, #20]
 800412e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004130:	4b1f      	ldr	r3, [pc, #124]	@ (80041b0 <MX_TIM12_Init+0x98>)
 8004132:	4a20      	ldr	r2, [pc, #128]	@ (80041b4 <MX_TIM12_Init+0x9c>)
 8004134:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8004136:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <MX_TIM12_Init+0x98>)
 8004138:	2200      	movs	r2, #0
 800413a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800413c:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <MX_TIM12_Init+0x98>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <MX_TIM12_Init+0x98>)
 8004144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004148:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800414a:	4b19      	ldr	r3, [pc, #100]	@ (80041b0 <MX_TIM12_Init+0x98>)
 800414c:	2200      	movs	r2, #0
 800414e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004150:	4b17      	ldr	r3, [pc, #92]	@ (80041b0 <MX_TIM12_Init+0x98>)
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004156:	4816      	ldr	r0, [pc, #88]	@ (80041b0 <MX_TIM12_Init+0x98>)
 8004158:	f004 fb7e 	bl	8008858 <HAL_TIM_PWM_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8004162:	f000 f9ff 	bl	8004564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004166:	2360      	movs	r3, #96	@ 0x60
 8004168:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004172:	2304      	movs	r3, #4
 8004174:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	2200      	movs	r2, #0
 800417a:	4619      	mov	r1, r3
 800417c:	480c      	ldr	r0, [pc, #48]	@ (80041b0 <MX_TIM12_Init+0x98>)
 800417e:	f004 fec7 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8004188:	f000 f9ec 	bl	8004564 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	2204      	movs	r2, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4807      	ldr	r0, [pc, #28]	@ (80041b0 <MX_TIM12_Init+0x98>)
 8004194:	f004 febc 	bl	8008f10 <HAL_TIM_PWM_ConfigChannel>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800419e:	f000 f9e1 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80041a2:	4803      	ldr	r0, [pc, #12]	@ (80041b0 <MX_TIM12_Init+0x98>)
 80041a4:	f000 fca8 	bl	8004af8 <HAL_TIM_MspPostInit>

}
 80041a8:	bf00      	nop
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000674 	.word	0x20000674
 80041b4:	40001800 	.word	0x40001800

080041b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <MX_UART4_Init+0x50>)
 80041c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80041c2:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041c4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80041c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80041ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041de:	220c      	movs	r2, #12
 80041e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80041e8:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80041ee:	4805      	ldr	r0, [pc, #20]	@ (8004204 <MX_UART4_Init+0x4c>)
 80041f0:	f005 fa8a 	bl	8009708 <HAL_UART_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80041fa:	f000 f9b3 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	200006bc 	.word	0x200006bc
 8004208:	40004c00 	.word	0x40004c00

0800420c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004210:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <MX_UART5_Init+0x4c>)
 8004212:	4a12      	ldr	r2, [pc, #72]	@ (800425c <MX_UART5_Init+0x50>)
 8004214:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <MX_UART5_Init+0x4c>)
 8004218:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800421c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800421e:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <MX_UART5_Init+0x4c>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004224:	4b0c      	ldr	r3, [pc, #48]	@ (8004258 <MX_UART5_Init+0x4c>)
 8004226:	2200      	movs	r2, #0
 8004228:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <MX_UART5_Init+0x4c>)
 800422c:	2200      	movs	r2, #0
 800422e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004230:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <MX_UART5_Init+0x4c>)
 8004232:	220c      	movs	r2, #12
 8004234:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004236:	4b08      	ldr	r3, [pc, #32]	@ (8004258 <MX_UART5_Init+0x4c>)
 8004238:	2200      	movs	r2, #0
 800423a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <MX_UART5_Init+0x4c>)
 800423e:	2200      	movs	r2, #0
 8004240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004242:	4805      	ldr	r0, [pc, #20]	@ (8004258 <MX_UART5_Init+0x4c>)
 8004244:	f005 fa60 	bl	8009708 <HAL_UART_Init>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800424e:	f000 f989 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000704 	.word	0x20000704
 800425c:	40005000 	.word	0x40005000

08004260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 8004266:	4a12      	ldr	r2, [pc, #72]	@ (80042b0 <MX_USART1_UART_Init+0x50>)
 8004268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800426a:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 800426c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004272:	4b0e      	ldr	r3, [pc, #56]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 8004274:	2200      	movs	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004278:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 800427a:	2200      	movs	r2, #0
 800427c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004284:	4b09      	ldr	r3, [pc, #36]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 8004286:	220c      	movs	r2, #12
 8004288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800428a:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 800428c:	2200      	movs	r2, #0
 800428e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004290:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 8004292:	2200      	movs	r2, #0
 8004294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004296:	4805      	ldr	r0, [pc, #20]	@ (80042ac <MX_USART1_UART_Init+0x4c>)
 8004298:	f005 fa36 	bl	8009708 <HAL_UART_Init>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80042a2:	f000 f95f 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	2000074c 	.word	0x2000074c
 80042b0:	40011000 	.word	0x40011000

080042b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042b8:	4b11      	ldr	r3, [pc, #68]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042ba:	4a12      	ldr	r2, [pc, #72]	@ (8004304 <MX_USART2_UART_Init+0x50>)
 80042bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80042be:	4b10      	ldr	r3, [pc, #64]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042c0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80042c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042d8:	4b09      	ldr	r3, [pc, #36]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042da:	220c      	movs	r2, #12
 80042dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042de:	4b08      	ldr	r3, [pc, #32]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e4:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042ea:	4805      	ldr	r0, [pc, #20]	@ (8004300 <MX_USART2_UART_Init+0x4c>)
 80042ec:	f005 fa0c 	bl	8009708 <HAL_UART_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80042f6:	f000 f935 	bl	8004564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000794 	.word	0x20000794
 8004304:	40004400 	.word	0x40004400

08004308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	4b2f      	ldr	r3, [pc, #188]	@ (80043d0 <MX_DMA_Init+0xc8>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	4a2e      	ldr	r2, [pc, #184]	@ (80043d0 <MX_DMA_Init+0xc8>)
 8004318:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800431c:	6313      	str	r3, [r2, #48]	@ 0x30
 800431e:	4b2c      	ldr	r3, [pc, #176]	@ (80043d0 <MX_DMA_Init+0xc8>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4b28      	ldr	r3, [pc, #160]	@ (80043d0 <MX_DMA_Init+0xc8>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	4a27      	ldr	r2, [pc, #156]	@ (80043d0 <MX_DMA_Init+0xc8>)
 8004334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004338:	6313      	str	r3, [r2, #48]	@ 0x30
 800433a:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <MX_DMA_Init+0xc8>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	2100      	movs	r1, #0
 800434a:	200b      	movs	r0, #11
 800434c:	f001 febd 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004350:	200b      	movs	r0, #11
 8004352:	f001 fed6 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2100      	movs	r1, #0
 800435a:	200d      	movs	r0, #13
 800435c:	f001 feb5 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004360:	200d      	movs	r0, #13
 8004362:	f001 fece 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004366:	2200      	movs	r2, #0
 8004368:	2100      	movs	r1, #0
 800436a:	200f      	movs	r0, #15
 800436c:	f001 fead 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004370:	200f      	movs	r0, #15
 8004372:	f001 fec6 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004376:	2200      	movs	r2, #0
 8004378:	2100      	movs	r1, #0
 800437a:	2010      	movs	r0, #16
 800437c:	f001 fea5 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004380:	2010      	movs	r0, #16
 8004382:	f001 febe 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004386:	2200      	movs	r2, #0
 8004388:	2100      	movs	r1, #0
 800438a:	2011      	movs	r0, #17
 800438c:	f001 fe9d 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004390:	2011      	movs	r0, #17
 8004392:	f001 feb6 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	202f      	movs	r0, #47	@ 0x2f
 800439c:	f001 fe95 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80043a0:	202f      	movs	r0, #47	@ 0x2f
 80043a2:	f001 feae 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	2100      	movs	r1, #0
 80043aa:	203a      	movs	r0, #58	@ 0x3a
 80043ac:	f001 fe8d 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80043b0:	203a      	movs	r0, #58	@ 0x3a
 80043b2:	f001 fea6 	bl	8006102 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2100      	movs	r1, #0
 80043ba:	2046      	movs	r0, #70	@ 0x46
 80043bc:	f001 fe85 	bl	80060ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80043c0:	2046      	movs	r0, #70	@ 0x46
 80043c2:	f001 fe9e 	bl	8006102 <HAL_NVIC_EnableIRQ>

}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800

080043d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	@ 0x28
 80043d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043da:	f107 0314 	add.w	r3, r7, #20
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	60da      	str	r2, [r3, #12]
 80043e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	4b57      	ldr	r3, [pc, #348]	@ (800454c <MX_GPIO_Init+0x178>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	4a56      	ldr	r2, [pc, #344]	@ (800454c <MX_GPIO_Init+0x178>)
 80043f4:	f043 0310 	orr.w	r3, r3, #16
 80043f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043fa:	4b54      	ldr	r3, [pc, #336]	@ (800454c <MX_GPIO_Init+0x178>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	4b50      	ldr	r3, [pc, #320]	@ (800454c <MX_GPIO_Init+0x178>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	4a4f      	ldr	r2, [pc, #316]	@ (800454c <MX_GPIO_Init+0x178>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6313      	str	r3, [r2, #48]	@ 0x30
 8004416:	4b4d      	ldr	r3, [pc, #308]	@ (800454c <MX_GPIO_Init+0x178>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	4b49      	ldr	r3, [pc, #292]	@ (800454c <MX_GPIO_Init+0x178>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	4a48      	ldr	r2, [pc, #288]	@ (800454c <MX_GPIO_Init+0x178>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6313      	str	r3, [r2, #48]	@ 0x30
 8004432:	4b46      	ldr	r3, [pc, #280]	@ (800454c <MX_GPIO_Init+0x178>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	4b42      	ldr	r3, [pc, #264]	@ (800454c <MX_GPIO_Init+0x178>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	4a41      	ldr	r2, [pc, #260]	@ (800454c <MX_GPIO_Init+0x178>)
 8004448:	f043 0302 	orr.w	r3, r3, #2
 800444c:	6313      	str	r3, [r2, #48]	@ 0x30
 800444e:	4b3f      	ldr	r3, [pc, #252]	@ (800454c <MX_GPIO_Init+0x178>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	4b3b      	ldr	r3, [pc, #236]	@ (800454c <MX_GPIO_Init+0x178>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	4a3a      	ldr	r2, [pc, #232]	@ (800454c <MX_GPIO_Init+0x178>)
 8004464:	f043 0308 	orr.w	r3, r3, #8
 8004468:	6313      	str	r3, [r2, #48]	@ 0x30
 800446a:	4b38      	ldr	r3, [pc, #224]	@ (800454c <MX_GPIO_Init+0x178>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_0, GPIO_PIN_RESET);
 8004476:	2200      	movs	r2, #0
 8004478:	2115      	movs	r1, #21
 800447a:	4835      	ldr	r0, [pc, #212]	@ (8004550 <MX_GPIO_Init+0x17c>)
 800447c:	f002 fcf6 	bl	8006e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8004480:	2200      	movs	r2, #0
 8004482:	f243 2110 	movw	r1, #12816	@ 0x3210
 8004486:	4833      	ldr	r0, [pc, #204]	@ (8004554 <MX_GPIO_Init+0x180>)
 8004488:	f002 fcf0 	bl	8006e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800448c:	2200      	movs	r2, #0
 800448e:	f648 018b 	movw	r1, #34955	@ 0x888b
 8004492:	4831      	ldr	r0, [pc, #196]	@ (8004558 <MX_GPIO_Init+0x184>)
 8004494:	f002 fcea 	bl	8006e6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004498:	2200      	movs	r2, #0
 800449a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800449e:	482f      	ldr	r0, [pc, #188]	@ (800455c <MX_GPIO_Init+0x188>)
 80044a0:	f002 fce4 	bl	8006e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80044a4:	2200      	movs	r2, #0
 80044a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044aa:	482d      	ldr	r0, [pc, #180]	@ (8004560 <MX_GPIO_Init+0x18c>)
 80044ac:	f002 fcde 	bl	8006e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_0;
 80044b0:	2315      	movs	r3, #21
 80044b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b4:	2301      	movs	r3, #1
 80044b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	2300      	movs	r3, #0
 80044be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044c0:	f107 0314 	add.w	r3, r7, #20
 80044c4:	4619      	mov	r1, r3
 80044c6:	4822      	ldr	r0, [pc, #136]	@ (8004550 <MX_GPIO_Init+0x17c>)
 80044c8:	f002 fa38 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_9;
 80044cc:	f243 2310 	movw	r3, #12816	@ 0x3210
 80044d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	4619      	mov	r1, r3
 80044e4:	481b      	ldr	r0, [pc, #108]	@ (8004554 <MX_GPIO_Init+0x180>)
 80044e6:	f002 fa29 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD15 PD0 PD1
                           PD3 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80044ea:	f648 038b 	movw	r3, #34955	@ 0x888b
 80044ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f0:	2301      	movs	r3, #1
 80044f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f8:	2300      	movs	r3, #0
 80044fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044fc:	f107 0314 	add.w	r3, r7, #20
 8004500:	4619      	mov	r1, r3
 8004502:	4815      	ldr	r0, [pc, #84]	@ (8004558 <MX_GPIO_Init+0x184>)
 8004504:	f002 fa1a 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800450c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800450e:	2301      	movs	r3, #1
 8004510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004516:	2300      	movs	r3, #0
 8004518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800451a:	f107 0314 	add.w	r3, r7, #20
 800451e:	4619      	mov	r1, r3
 8004520:	480e      	ldr	r0, [pc, #56]	@ (800455c <MX_GPIO_Init+0x188>)
 8004522:	f002 fa0b 	bl	800693c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004526:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800452a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800452c:	2301      	movs	r3, #1
 800452e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	4619      	mov	r1, r3
 800453e:	4808      	ldr	r0, [pc, #32]	@ (8004560 <MX_GPIO_Init+0x18c>)
 8004540:	f002 f9fc 	bl	800693c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004544:	bf00      	nop
 8004546:	3728      	adds	r7, #40	@ 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40023800 	.word	0x40023800
 8004550:	40021000 	.word	0x40021000
 8004554:	40020400 	.word	0x40020400
 8004558:	40020c00 	.word	0x40020c00
 800455c:	40020800 	.word	0x40020800
 8004560:	40020000 	.word	0x40020000

08004564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004568:	b672      	cpsid	i
}
 800456a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <Error_Handler+0x8>

08004570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <HAL_MspInit+0x4c>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	4a0f      	ldr	r2, [pc, #60]	@ (80045bc <HAL_MspInit+0x4c>)
 8004580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004584:	6453      	str	r3, [r2, #68]	@ 0x44
 8004586:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <HAL_MspInit+0x4c>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4b09      	ldr	r3, [pc, #36]	@ (80045bc <HAL_MspInit+0x4c>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	4a08      	ldr	r2, [pc, #32]	@ (80045bc <HAL_MspInit+0x4c>)
 800459c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a2:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <HAL_MspInit+0x4c>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045ae:	2007      	movs	r0, #7
 80045b0:	f001 fd80 	bl	80060b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40023800 	.word	0x40023800

080045c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	@ 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a24      	ldr	r2, [pc, #144]	@ (8004670 <HAL_ADC_MspInit+0xb0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d141      	bne.n	8004666 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	4b23      	ldr	r3, [pc, #140]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ea:	4a22      	ldr	r2, [pc, #136]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80045f2:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b1c      	ldr	r3, [pc, #112]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	4a1b      	ldr	r2, [pc, #108]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 8004608:	f043 0304 	orr.w	r3, r3, #4
 800460c:	6313      	str	r3, [r2, #48]	@ 0x30
 800460e:	4b19      	ldr	r3, [pc, #100]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004622:	4a14      	ldr	r2, [pc, #80]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6313      	str	r3, [r2, #48]	@ 0x30
 800462a:	4b12      	ldr	r3, [pc, #72]	@ (8004674 <HAL_ADC_MspInit+0xb4>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004636:	233f      	movs	r3, #63	@ 0x3f
 8004638:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800463a:	2303      	movs	r3, #3
 800463c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	480b      	ldr	r0, [pc, #44]	@ (8004678 <HAL_ADC_MspInit+0xb8>)
 800464a:	f002 f977 	bl	800693c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800464e:	2330      	movs	r3, #48	@ 0x30
 8004650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004652:	2303      	movs	r3, #3
 8004654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800465a:	f107 0314 	add.w	r3, r7, #20
 800465e:	4619      	mov	r1, r3
 8004660:	4806      	ldr	r0, [pc, #24]	@ (800467c <HAL_ADC_MspInit+0xbc>)
 8004662:	f002 f96b 	bl	800693c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004666:	bf00      	nop
 8004668:	3728      	adds	r7, #40	@ 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40012000 	.word	0x40012000
 8004674:	40023800 	.word	0x40023800
 8004678:	40020800 	.word	0x40020800
 800467c:	40020000 	.word	0x40020000

08004680 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	@ 0x28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	f107 0314 	add.w	r3, r7, #20
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a19      	ldr	r2, [pc, #100]	@ (8004704 <HAL_I2C_MspInit+0x84>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d12b      	bne.n	80046fa <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <HAL_I2C_MspInit+0x88>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <HAL_I2C_MspInit+0x88>)
 80046ac:	f043 0302 	orr.w	r3, r3, #2
 80046b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046b2:	4b15      	ldr	r3, [pc, #84]	@ (8004708 <HAL_I2C_MspInit+0x88>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046be:	23c0      	movs	r3, #192	@ 0xc0
 80046c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046c2:	2312      	movs	r3, #18
 80046c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ca:	2303      	movs	r3, #3
 80046cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046ce:	2304      	movs	r3, #4
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d2:	f107 0314 	add.w	r3, r7, #20
 80046d6:	4619      	mov	r1, r3
 80046d8:	480c      	ldr	r0, [pc, #48]	@ (800470c <HAL_I2C_MspInit+0x8c>)
 80046da:	f002 f92f 	bl	800693c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <HAL_I2C_MspInit+0x88>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	4a08      	ldr	r2, [pc, #32]	@ (8004708 <HAL_I2C_MspInit+0x88>)
 80046e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ee:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <HAL_I2C_MspInit+0x88>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80046fa:	bf00      	nop
 80046fc:	3728      	adds	r7, #40	@ 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40005400 	.word	0x40005400
 8004708:	40023800 	.word	0x40023800
 800470c:	40020400 	.word	0x40020400

08004710 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a0a      	ldr	r2, [pc, #40]	@ (8004748 <HAL_I2C_MspDeInit+0x38>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d10d      	bne.n	800473e <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004722:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <HAL_I2C_MspDeInit+0x3c>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	4a09      	ldr	r2, [pc, #36]	@ (800474c <HAL_I2C_MspDeInit+0x3c>)
 8004728:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800472c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800472e:	2140      	movs	r1, #64	@ 0x40
 8004730:	4807      	ldr	r0, [pc, #28]	@ (8004750 <HAL_I2C_MspDeInit+0x40>)
 8004732:	f002 fa9f 	bl	8006c74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004736:	2180      	movs	r1, #128	@ 0x80
 8004738:	4805      	ldr	r0, [pc, #20]	@ (8004750 <HAL_I2C_MspDeInit+0x40>)
 800473a:	f002 fa9b 	bl	8006c74 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40005400 	.word	0x40005400
 800474c:	40023800 	.word	0x40023800
 8004750:	40020400 	.word	0x40020400

08004754 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b092      	sub	sp, #72	@ 0x48
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4aaa      	ldr	r2, [pc, #680]	@ (8004a1c <HAL_TIM_Encoder_MspInit+0x2c8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d14d      	bne.n	8004812 <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	633b      	str	r3, [r7, #48]	@ 0x30
 800477a:	4ba9      	ldr	r3, [pc, #676]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	4aa8      	ldr	r2, [pc, #672]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6453      	str	r3, [r2, #68]	@ 0x44
 8004786:	4ba6      	ldr	r3, [pc, #664]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004796:	4ba2      	ldr	r3, [pc, #648]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	4aa1      	ldr	r2, [pc, #644]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800479c:	f043 0310 	orr.w	r3, r3, #16
 80047a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047a2:	4b9f      	ldr	r3, [pc, #636]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80047ae:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b4:	2302      	movs	r3, #2
 80047b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047bc:	2300      	movs	r3, #0
 80047be:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047c0:	2301      	movs	r3, #1
 80047c2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047c8:	4619      	mov	r1, r3
 80047ca:	4896      	ldr	r0, [pc, #600]	@ (8004a24 <HAL_TIM_Encoder_MspInit+0x2d0>)
 80047cc:	f002 f8b6 	bl	800693c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80047d0:	2200      	movs	r2, #0
 80047d2:	2100      	movs	r1, #0
 80047d4:	2018      	movs	r0, #24
 80047d6:	f001 fc78 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80047da:	2018      	movs	r0, #24
 80047dc:	f001 fc91 	bl	8006102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80047e0:	2200      	movs	r2, #0
 80047e2:	2100      	movs	r1, #0
 80047e4:	2019      	movs	r0, #25
 80047e6:	f001 fc70 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80047ea:	2019      	movs	r0, #25
 80047ec:	f001 fc89 	bl	8006102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80047f0:	2200      	movs	r2, #0
 80047f2:	2100      	movs	r1, #0
 80047f4:	201a      	movs	r0, #26
 80047f6:	f001 fc68 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80047fa:	201a      	movs	r0, #26
 80047fc:	f001 fc81 	bl	8006102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004800:	2200      	movs	r2, #0
 8004802:	2100      	movs	r1, #0
 8004804:	201b      	movs	r0, #27
 8004806:	f001 fc60 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800480a:	201b      	movs	r0, #27
 800480c:	f001 fc79 	bl	8006102 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004810:	e0ff      	b.n	8004a12 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM3)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a84      	ldr	r2, [pc, #528]	@ (8004a28 <HAL_TIM_Encoder_MspInit+0x2d4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d134      	bne.n	8004886 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800481c:	2300      	movs	r3, #0
 800481e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004820:	4b7f      	ldr	r3, [pc, #508]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	4a7e      	ldr	r2, [pc, #504]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004826:	f043 0302 	orr.w	r3, r3, #2
 800482a:	6413      	str	r3, [r2, #64]	@ 0x40
 800482c:	4b7c      	ldr	r3, [pc, #496]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800482e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004838:	2300      	movs	r3, #0
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
 800483c:	4b78      	ldr	r3, [pc, #480]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004840:	4a77      	ldr	r2, [pc, #476]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6313      	str	r3, [r2, #48]	@ 0x30
 8004848:	4b75      	ldr	r3, [pc, #468]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004854:	23c0      	movs	r3, #192	@ 0xc0
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004858:	2302      	movs	r3, #2
 800485a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485c:	2300      	movs	r3, #0
 800485e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004860:	2300      	movs	r3, #0
 8004862:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004864:	2302      	movs	r3, #2
 8004866:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004868:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800486c:	4619      	mov	r1, r3
 800486e:	486f      	ldr	r0, [pc, #444]	@ (8004a2c <HAL_TIM_Encoder_MspInit+0x2d8>)
 8004870:	f002 f864 	bl	800693c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004874:	2200      	movs	r2, #0
 8004876:	2100      	movs	r1, #0
 8004878:	201d      	movs	r0, #29
 800487a:	f001 fc26 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800487e:	201d      	movs	r0, #29
 8004880:	f001 fc3f 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 8004884:	e0c5      	b.n	8004a12 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM4)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a69      	ldr	r2, [pc, #420]	@ (8004a30 <HAL_TIM_Encoder_MspInit+0x2dc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d135      	bne.n	80048fc <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
 8004894:	4b62      	ldr	r3, [pc, #392]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004898:	4a61      	ldr	r2, [pc, #388]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	6413      	str	r3, [r2, #64]	@ 0x40
 80048a0:	4b5f      	ldr	r3, [pc, #380]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80048b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80048b6:	f043 0308 	orr.w	r3, r3, #8
 80048ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80048bc:	4b58      	ldr	r3, [pc, #352]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80048c8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	2302      	movs	r3, #2
 80048d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048da:	2302      	movs	r3, #2
 80048dc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80048e2:	4619      	mov	r1, r3
 80048e4:	4853      	ldr	r0, [pc, #332]	@ (8004a34 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80048e6:	f002 f829 	bl	800693c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80048ea:	2200      	movs	r2, #0
 80048ec:	2100      	movs	r1, #0
 80048ee:	201e      	movs	r0, #30
 80048f0:	f001 fbeb 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80048f4:	201e      	movs	r0, #30
 80048f6:	f001 fc04 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 80048fa:	e08a      	b.n	8004a12 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM5)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a4d      	ldr	r2, [pc, #308]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d134      	bne.n	8004970 <HAL_TIM_Encoder_MspInit+0x21c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	4b45      	ldr	r3, [pc, #276]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	4a44      	ldr	r2, [pc, #272]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004910:	f043 0308 	orr.w	r3, r3, #8
 8004914:	6413      	str	r3, [r2, #64]	@ 0x40
 8004916:	4b42      	ldr	r3, [pc, #264]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	4b3e      	ldr	r3, [pc, #248]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	4a3d      	ldr	r2, [pc, #244]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6313      	str	r3, [r2, #48]	@ 0x30
 8004932:	4b3b      	ldr	r3, [pc, #236]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800493e:	2303      	movs	r3, #3
 8004940:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004942:	2302      	movs	r3, #2
 8004944:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800494a:	2300      	movs	r3, #0
 800494c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800494e:	2302      	movs	r3, #2
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004952:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004956:	4619      	mov	r1, r3
 8004958:	4834      	ldr	r0, [pc, #208]	@ (8004a2c <HAL_TIM_Encoder_MspInit+0x2d8>)
 800495a:	f001 ffef 	bl	800693c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800495e:	2200      	movs	r2, #0
 8004960:	2100      	movs	r1, #0
 8004962:	2032      	movs	r0, #50	@ 0x32
 8004964:	f001 fbb1 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004968:	2032      	movs	r0, #50	@ 0x32
 800496a:	f001 fbca 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 800496e:	e050      	b.n	8004a12 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM8)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a31      	ldr	r2, [pc, #196]	@ (8004a3c <HAL_TIM_Encoder_MspInit+0x2e8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d14b      	bne.n	8004a12 <HAL_TIM_Encoder_MspInit+0x2be>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	4b28      	ldr	r3, [pc, #160]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004982:	4a27      	ldr	r2, [pc, #156]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004984:	f043 0302 	orr.w	r3, r3, #2
 8004988:	6453      	str	r3, [r2, #68]	@ 0x44
 800498a:	4b25      	ldr	r3, [pc, #148]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b21      	ldr	r3, [pc, #132]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	4a20      	ldr	r2, [pc, #128]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80049a0:	f043 0304 	orr.w	r3, r3, #4
 80049a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80049a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80049b2:	23c0      	movs	r3, #192	@ 0xc0
 80049b4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b6:	2302      	movs	r3, #2
 80049b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049be:	2300      	movs	r3, #0
 80049c0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80049c2:	2303      	movs	r3, #3
 80049c4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80049ca:	4619      	mov	r1, r3
 80049cc:	481c      	ldr	r0, [pc, #112]	@ (8004a40 <HAL_TIM_Encoder_MspInit+0x2ec>)
 80049ce:	f001 ffb5 	bl	800693c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	202b      	movs	r0, #43	@ 0x2b
 80049d8:	f001 fb77 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80049dc:	202b      	movs	r0, #43	@ 0x2b
 80049de:	f001 fb90 	bl	8006102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80049e2:	2200      	movs	r2, #0
 80049e4:	2100      	movs	r1, #0
 80049e6:	202c      	movs	r0, #44	@ 0x2c
 80049e8:	f001 fb6f 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80049ec:	202c      	movs	r0, #44	@ 0x2c
 80049ee:	f001 fb88 	bl	8006102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80049f2:	2200      	movs	r2, #0
 80049f4:	2100      	movs	r1, #0
 80049f6:	202d      	movs	r0, #45	@ 0x2d
 80049f8:	f001 fb67 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80049fc:	202d      	movs	r0, #45	@ 0x2d
 80049fe:	f001 fb80 	bl	8006102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8004a02:	2200      	movs	r2, #0
 8004a04:	2100      	movs	r1, #0
 8004a06:	202e      	movs	r0, #46	@ 0x2e
 8004a08:	f001 fb5f 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004a0c:	202e      	movs	r0, #46	@ 0x2e
 8004a0e:	f001 fb78 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 8004a12:	bf00      	nop
 8004a14:	3748      	adds	r7, #72	@ 0x48
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40020c00 	.word	0x40020c00
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40010400 	.word	0x40010400
 8004a40:	40020800 	.word	0x40020800

08004a44 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	4a23      	ldr	r2, [pc, #140]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a66:	4b21      	ldr	r3, [pc, #132]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004a72:	e036      	b.n	8004ae2 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM9)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1d      	ldr	r2, [pc, #116]	@ (8004af0 <HAL_TIM_PWM_MspInit+0xac>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d116      	bne.n	8004aac <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a86:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a8e:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2018      	movs	r0, #24
 8004aa0:	f001 fb13 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004aa4:	2018      	movs	r0, #24
 8004aa6:	f001 fb2c 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 8004aaa:	e01a      	b.n	8004ae2 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM12)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a10      	ldr	r2, [pc, #64]	@ (8004af4 <HAL_TIM_PWM_MspInit+0xb0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	4a0b      	ldr	r2, [pc, #44]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ac6:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <HAL_TIM_PWM_MspInit+0xa8>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	202b      	movs	r0, #43	@ 0x2b
 8004ad8:	f001 faf7 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004adc:	202b      	movs	r0, #43	@ 0x2b
 8004ade:	f001 fb10 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40001800 	.word	0x40001800

08004af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08c      	sub	sp, #48	@ 0x30
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b00:	f107 031c 	add.w	r3, r7, #28
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b18:	d13e      	bne.n	8004b98 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	4b44      	ldr	r3, [pc, #272]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	4a43      	ldr	r2, [pc, #268]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b2a:	4b41      	ldr	r3, [pc, #260]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b46:	4b3a      	ldr	r3, [pc, #232]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697b      	ldr	r3, [r7, #20]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8004b52:	f640 4308 	movw	r3, #3080	@ 0xc08
 8004b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b60:	2300      	movs	r3, #0
 8004b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b64:	2301      	movs	r3, #1
 8004b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b68:	f107 031c 	add.w	r3, r7, #28
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4831      	ldr	r0, [pc, #196]	@ (8004c34 <HAL_TIM_MspPostInit+0x13c>)
 8004b70:	f001 fee4 	bl	800693c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b82:	2300      	movs	r3, #0
 8004b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b86:	2301      	movs	r3, #1
 8004b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b8a:	f107 031c 	add.w	r3, r7, #28
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4829      	ldr	r0, [pc, #164]	@ (8004c38 <HAL_TIM_MspPostInit+0x140>)
 8004b92:	f001 fed3 	bl	800693c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004b96:	e047      	b.n	8004c28 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM9)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a27      	ldr	r2, [pc, #156]	@ (8004c3c <HAL_TIM_MspPostInit+0x144>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d11e      	bne.n	8004be0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	4b22      	ldr	r3, [pc, #136]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	4a21      	ldr	r2, [pc, #132]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004bac:	f043 0310 	orr.w	r3, r3, #16
 8004bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004bbe:	2360      	movs	r3, #96	@ 0x60
 8004bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bd2:	f107 031c 	add.w	r3, r7, #28
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4819      	ldr	r0, [pc, #100]	@ (8004c40 <HAL_TIM_MspPostInit+0x148>)
 8004bda:	f001 feaf 	bl	800693c <HAL_GPIO_Init>
}
 8004bde:	e023      	b.n	8004c28 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a17      	ldr	r2, [pc, #92]	@ (8004c44 <HAL_TIM_MspPostInit+0x14c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d11e      	bne.n	8004c28 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <HAL_TIM_MspPostInit+0x138>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004c06:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004c18:	2309      	movs	r3, #9
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1c:	f107 031c 	add.w	r3, r7, #28
 8004c20:	4619      	mov	r1, r3
 8004c22:	4804      	ldr	r0, [pc, #16]	@ (8004c34 <HAL_TIM_MspPostInit+0x13c>)
 8004c24:	f001 fe8a 	bl	800693c <HAL_GPIO_Init>
}
 8004c28:	bf00      	nop
 8004c2a:	3730      	adds	r7, #48	@ 0x30
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40020400 	.word	0x40020400
 8004c38:	40020000 	.word	0x40020000
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40001800 	.word	0x40001800

08004c48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b090      	sub	sp, #64	@ 0x40
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a4a      	ldr	r2, [pc, #296]	@ (8004d90 <HAL_UART_MspInit+0x148>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	f040 80a0 	bne.w	8004dac <HAL_UART_MspInit+0x164>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c70:	4b48      	ldr	r3, [pc, #288]	@ (8004d94 <HAL_UART_MspInit+0x14c>)
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	4a47      	ldr	r2, [pc, #284]	@ (8004d94 <HAL_UART_MspInit+0x14c>)
 8004c76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c7c:	4b45      	ldr	r3, [pc, #276]	@ (8004d94 <HAL_UART_MspInit+0x14c>)
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8c:	4b41      	ldr	r3, [pc, #260]	@ (8004d94 <HAL_UART_MspInit+0x14c>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	4a40      	ldr	r2, [pc, #256]	@ (8004d94 <HAL_UART_MspInit+0x14c>)
 8004c92:	f043 0304 	orr.w	r3, r3, #4
 8004c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c98:	4b3e      	ldr	r3, [pc, #248]	@ (8004d94 <HAL_UART_MspInit+0x14c>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ca4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004caa:	2302      	movs	r3, #2
 8004cac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4835      	ldr	r0, [pc, #212]	@ (8004d98 <HAL_UART_MspInit+0x150>)
 8004cc2:	f001 fe3b 	bl	800693c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004cc6:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004cc8:	4a35      	ldr	r2, [pc, #212]	@ (8004da0 <HAL_UART_MspInit+0x158>)
 8004cca:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004ccc:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004cce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004cd2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cd4:	4b31      	ldr	r3, [pc, #196]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cda:	4b30      	ldr	r3, [pc, #192]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004ce2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ce6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cee:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004cf4:	4b29      	ldr	r3, [pc, #164]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cfa:	4b28      	ldr	r3, [pc, #160]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d00:	4b26      	ldr	r3, [pc, #152]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004d06:	4825      	ldr	r0, [pc, #148]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004d08:	f001 fa16 	bl	8006138 <HAL_DMA_Init>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004d12:	f7ff fc27 	bl	8004564 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a20      	ldr	r2, [pc, #128]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d9c <HAL_UART_MspInit+0x154>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004d22:	4b20      	ldr	r3, [pc, #128]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d24:	4a20      	ldr	r2, [pc, #128]	@ (8004da8 <HAL_UART_MspInit+0x160>)
 8004d26:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004d28:	4b1e      	ldr	r3, [pc, #120]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004d2e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d30:	4b1c      	ldr	r3, [pc, #112]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d32:	2240      	movs	r2, #64	@ 0x40
 8004d34:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d36:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d3c:	4b19      	ldr	r3, [pc, #100]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d42:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d44:	4b17      	ldr	r3, [pc, #92]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d4a:	4b16      	ldr	r3, [pc, #88]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004d50:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d56:	4b13      	ldr	r3, [pc, #76]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d5c:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004d62:	4810      	ldr	r0, [pc, #64]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d64:	f001 f9e8 	bl	8006138 <HAL_DMA_Init>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004d6e:	f7ff fbf9 	bl	8004564 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a0b      	ldr	r2, [pc, #44]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d76:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d78:	4a0a      	ldr	r2, [pc, #40]	@ (8004da4 <HAL_UART_MspInit+0x15c>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2100      	movs	r1, #0
 8004d82:	2034      	movs	r0, #52	@ 0x34
 8004d84:	f001 f9a1 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004d88:	2034      	movs	r0, #52	@ 0x34
 8004d8a:	f001 f9ba 	bl	8006102 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d8e:	e1f9      	b.n	8005184 <HAL_UART_MspInit+0x53c>
 8004d90:	40004c00 	.word	0x40004c00
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020800 	.word	0x40020800
 8004d9c:	200007dc 	.word	0x200007dc
 8004da0:	40026040 	.word	0x40026040
 8004da4:	2000083c 	.word	0x2000083c
 8004da8:	40026070 	.word	0x40026070
  else if(huart->Instance==UART5)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a59      	ldr	r2, [pc, #356]	@ (8004f18 <HAL_UART_MspInit+0x2d0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	f040 80c0 	bne.w	8004f38 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	4b57      	ldr	r3, [pc, #348]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	4a56      	ldr	r2, [pc, #344]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dc8:	4b54      	ldr	r3, [pc, #336]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	4b50      	ldr	r3, [pc, #320]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004dde:	f043 0304 	orr.w	r3, r3, #4
 8004de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004de4:	4b4d      	ldr	r3, [pc, #308]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	61fb      	str	r3, [r7, #28]
 8004dee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	4b49      	ldr	r3, [pc, #292]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df8:	4a48      	ldr	r2, [pc, #288]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004dfa:	f043 0308 	orr.w	r3, r3, #8
 8004dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e00:	4b46      	ldr	r3, [pc, #280]	@ (8004f1c <HAL_UART_MspInit+0x2d4>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e12:	2302      	movs	r3, #2
 8004e14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004e1e:	2308      	movs	r3, #8
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e26:	4619      	mov	r1, r3
 8004e28:	483d      	ldr	r0, [pc, #244]	@ (8004f20 <HAL_UART_MspInit+0x2d8>)
 8004e2a:	f001 fd87 	bl	800693c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e2e:	2304      	movs	r3, #4
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e32:	2302      	movs	r3, #2
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004e3e:	2308      	movs	r3, #8
 8004e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e46:	4619      	mov	r1, r3
 8004e48:	4836      	ldr	r0, [pc, #216]	@ (8004f24 <HAL_UART_MspInit+0x2dc>)
 8004e4a:	f001 fd77 	bl	800693c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004e4e:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e50:	4a36      	ldr	r2, [pc, #216]	@ (8004f2c <HAL_UART_MspInit+0x2e4>)
 8004e52:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004e54:	4b34      	ldr	r3, [pc, #208]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004e5a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e5c:	4b32      	ldr	r3, [pc, #200]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e62:	4b31      	ldr	r3, [pc, #196]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e68:	4b2f      	ldr	r3, [pc, #188]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e6e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e70:	4b2d      	ldr	r3, [pc, #180]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e76:	4b2c      	ldr	r3, [pc, #176]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e82:	4b29      	ldr	r3, [pc, #164]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e88:	4b27      	ldr	r3, [pc, #156]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004e8e:	4826      	ldr	r0, [pc, #152]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004e90:	f001 f952 	bl	8006138 <HAL_DMA_Init>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_UART_MspInit+0x256>
      Error_Handler();
 8004e9a:	f7ff fb63 	bl	8004564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a21      	ldr	r2, [pc, #132]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ea4:	4a20      	ldr	r2, [pc, #128]	@ (8004f28 <HAL_UART_MspInit+0x2e0>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8004eaa:	4b21      	ldr	r3, [pc, #132]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004eac:	4a21      	ldr	r2, [pc, #132]	@ (8004f34 <HAL_UART_MspInit+0x2ec>)
 8004eae:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8004eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004eb2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004eb6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004eba:	2240      	movs	r2, #64	@ 0x40
 8004ebc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004ec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004eca:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ecc:	4b18      	ldr	r3, [pc, #96]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ed2:	4b17      	ldr	r3, [pc, #92]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004ed8:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ede:	4b14      	ldr	r3, [pc, #80]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ee4:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004eea:	4811      	ldr	r0, [pc, #68]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004eec:	f001 f924 	bl	8006138 <HAL_DMA_Init>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8004ef6:	f7ff fb35 	bl	8004564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a0c      	ldr	r2, [pc, #48]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004efe:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f00:	4a0b      	ldr	r2, [pc, #44]	@ (8004f30 <HAL_UART_MspInit+0x2e8>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004f06:	2200      	movs	r2, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	2035      	movs	r0, #53	@ 0x35
 8004f0c:	f001 f8dd 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004f10:	2035      	movs	r0, #53	@ 0x35
 8004f12:	f001 f8f6 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 8004f16:	e135      	b.n	8005184 <HAL_UART_MspInit+0x53c>
 8004f18:	40005000 	.word	0x40005000
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40020800 	.word	0x40020800
 8004f24:	40020c00 	.word	0x40020c00
 8004f28:	2000089c 	.word	0x2000089c
 8004f2c:	40026010 	.word	0x40026010
 8004f30:	200008fc 	.word	0x200008fc
 8004f34:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a93      	ldr	r2, [pc, #588]	@ (800518c <HAL_UART_MspInit+0x544>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f040 808a 	bne.w	8005058 <HAL_UART_MspInit+0x410>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	4b91      	ldr	r3, [pc, #580]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4c:	4a90      	ldr	r2, [pc, #576]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8004f4e:	f043 0310 	orr.w	r3, r3, #16
 8004f52:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f54:	4b8e      	ldr	r3, [pc, #568]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8004f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	4b8a      	ldr	r3, [pc, #552]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	4a89      	ldr	r2, [pc, #548]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f70:	4b87      	ldr	r3, [pc, #540]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004f7c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f82:	2302      	movs	r3, #2
 8004f84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f8e:	2307      	movs	r3, #7
 8004f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f96:	4619      	mov	r1, r3
 8004f98:	487e      	ldr	r0, [pc, #504]	@ (8005194 <HAL_UART_MspInit+0x54c>)
 8004f9a:	f001 fccf 	bl	800693c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fa0:	4a7e      	ldr	r2, [pc, #504]	@ (800519c <HAL_UART_MspInit+0x554>)
 8004fa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004fa4:	4b7c      	ldr	r3, [pc, #496]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fa6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004faa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fac:	4b7a      	ldr	r3, [pc, #488]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fb2:	4b79      	ldr	r3, [pc, #484]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fb8:	4b77      	ldr	r3, [pc, #476]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fc0:	4b75      	ldr	r3, [pc, #468]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fc6:	4b74      	ldr	r3, [pc, #464]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004fcc:	4b72      	ldr	r3, [pc, #456]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004fd2:	4b71      	ldr	r3, [pc, #452]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004fde:	486e      	ldr	r0, [pc, #440]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004fe0:	f001 f8aa 	bl	8006138 <HAL_DMA_Init>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004fea:	f7ff fabb 	bl	8004564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a69      	ldr	r2, [pc, #420]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ff4:	4a68      	ldr	r2, [pc, #416]	@ (8005198 <HAL_UART_MspInit+0x550>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004ffa:	4b69      	ldr	r3, [pc, #420]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 8004ffc:	4a69      	ldr	r2, [pc, #420]	@ (80051a4 <HAL_UART_MspInit+0x55c>)
 8004ffe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005000:	4b67      	ldr	r3, [pc, #412]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 8005002:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005006:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005008:	4b65      	ldr	r3, [pc, #404]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 800500a:	2240      	movs	r2, #64	@ 0x40
 800500c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800500e:	4b64      	ldr	r3, [pc, #400]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 8005010:	2200      	movs	r2, #0
 8005012:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005014:	4b62      	ldr	r3, [pc, #392]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 8005016:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800501a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800501c:	4b60      	ldr	r3, [pc, #384]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 800501e:	2200      	movs	r2, #0
 8005020:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005022:	4b5f      	ldr	r3, [pc, #380]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005028:	4b5d      	ldr	r3, [pc, #372]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800502e:	4b5c      	ldr	r3, [pc, #368]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 8005030:	2200      	movs	r2, #0
 8005032:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005034:	4b5a      	ldr	r3, [pc, #360]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 8005036:	2200      	movs	r2, #0
 8005038:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800503a:	4859      	ldr	r0, [pc, #356]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 800503c:	f001 f87c 	bl	8006138 <HAL_DMA_Init>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_UART_MspInit+0x402>
      Error_Handler();
 8005046:	f7ff fa8d 	bl	8004564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a54      	ldr	r2, [pc, #336]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 800504e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005050:	4a53      	ldr	r2, [pc, #332]	@ (80051a0 <HAL_UART_MspInit+0x558>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005056:	e095      	b.n	8005184 <HAL_UART_MspInit+0x53c>
  else if(huart->Instance==USART2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a52      	ldr	r2, [pc, #328]	@ (80051a8 <HAL_UART_MspInit+0x560>)
 800505e:	4293      	cmp	r3, r2
 8005060:	f040 8090 	bne.w	8005184 <HAL_UART_MspInit+0x53c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	4b49      	ldr	r3, [pc, #292]	@ (8005190 <HAL_UART_MspInit+0x548>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	4a48      	ldr	r2, [pc, #288]	@ (8005190 <HAL_UART_MspInit+0x548>)
 800506e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005072:	6413      	str	r3, [r2, #64]	@ 0x40
 8005074:	4b46      	ldr	r3, [pc, #280]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8005076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005080:	2300      	movs	r3, #0
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	4b42      	ldr	r3, [pc, #264]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005088:	4a41      	ldr	r2, [pc, #260]	@ (8005190 <HAL_UART_MspInit+0x548>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005090:	4b3f      	ldr	r3, [pc, #252]	@ (8005190 <HAL_UART_MspInit+0x548>)
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800509c:	230c      	movs	r3, #12
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	2302      	movs	r3, #2
 80050a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a8:	2303      	movs	r3, #3
 80050aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050ac:	2307      	movs	r3, #7
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050b4:	4619      	mov	r1, r3
 80050b6:	4837      	ldr	r0, [pc, #220]	@ (8005194 <HAL_UART_MspInit+0x54c>)
 80050b8:	f001 fc40 	bl	800693c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80050bc:	4b3b      	ldr	r3, [pc, #236]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050be:	4a3c      	ldr	r2, [pc, #240]	@ (80051b0 <HAL_UART_MspInit+0x568>)
 80050c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80050c2:	4b3a      	ldr	r3, [pc, #232]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80050c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050ca:	4b38      	ldr	r3, [pc, #224]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050d0:	4b36      	ldr	r3, [pc, #216]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050d6:	4b35      	ldr	r3, [pc, #212]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050de:	4b33      	ldr	r3, [pc, #204]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050e4:	4b31      	ldr	r3, [pc, #196]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80050ea:	4b30      	ldr	r3, [pc, #192]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050f0:	4b2e      	ldr	r3, [pc, #184]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050f6:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80050fc:	482b      	ldr	r0, [pc, #172]	@ (80051ac <HAL_UART_MspInit+0x564>)
 80050fe:	f001 f81b 	bl	8006138 <HAL_DMA_Init>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 8005108:	f7ff fa2c 	bl	8004564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a27      	ldr	r2, [pc, #156]	@ (80051ac <HAL_UART_MspInit+0x564>)
 8005110:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005112:	4a26      	ldr	r2, [pc, #152]	@ (80051ac <HAL_UART_MspInit+0x564>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005118:	4b26      	ldr	r3, [pc, #152]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 800511a:	4a27      	ldr	r2, [pc, #156]	@ (80051b8 <HAL_UART_MspInit+0x570>)
 800511c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800511e:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 8005120:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005124:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005126:	4b23      	ldr	r3, [pc, #140]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 8005128:	2240      	movs	r2, #64	@ 0x40
 800512a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800512c:	4b21      	ldr	r3, [pc, #132]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 800512e:	2200      	movs	r2, #0
 8005130:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005132:	4b20      	ldr	r3, [pc, #128]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 8005134:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005138:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800513a:	4b1e      	ldr	r3, [pc, #120]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 800513c:	2200      	movs	r2, #0
 800513e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005140:	4b1c      	ldr	r3, [pc, #112]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 8005142:	2200      	movs	r2, #0
 8005144:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005146:	4b1b      	ldr	r3, [pc, #108]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 8005148:	2200      	movs	r2, #0
 800514a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800514c:	4b19      	ldr	r3, [pc, #100]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 800514e:	2200      	movs	r2, #0
 8005150:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005152:	4b18      	ldr	r3, [pc, #96]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 8005154:	2200      	movs	r2, #0
 8005156:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005158:	4816      	ldr	r0, [pc, #88]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 800515a:	f000 ffed 	bl	8006138 <HAL_DMA_Init>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_UART_MspInit+0x520>
      Error_Handler();
 8005164:	f7ff f9fe 	bl	8004564 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a12      	ldr	r2, [pc, #72]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 800516c:	639a      	str	r2, [r3, #56]	@ 0x38
 800516e:	4a11      	ldr	r2, [pc, #68]	@ (80051b4 <HAL_UART_MspInit+0x56c>)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005174:	2200      	movs	r2, #0
 8005176:	2100      	movs	r1, #0
 8005178:	2026      	movs	r0, #38	@ 0x26
 800517a:	f000 ffa6 	bl	80060ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800517e:	2026      	movs	r0, #38	@ 0x26
 8005180:	f000 ffbf 	bl	8006102 <HAL_NVIC_EnableIRQ>
}
 8005184:	bf00      	nop
 8005186:	3740      	adds	r7, #64	@ 0x40
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40011000 	.word	0x40011000
 8005190:	40023800 	.word	0x40023800
 8005194:	40020000 	.word	0x40020000
 8005198:	2000095c 	.word	0x2000095c
 800519c:	40026440 	.word	0x40026440
 80051a0:	200009bc 	.word	0x200009bc
 80051a4:	400264b8 	.word	0x400264b8
 80051a8:	40004400 	.word	0x40004400
 80051ac:	20000a1c 	.word	0x20000a1c
 80051b0:	40026088 	.word	0x40026088
 80051b4:	20000a7c 	.word	0x20000a7c
 80051b8:	400260a0 	.word	0x400260a0

080051bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <NMI_Handler+0x4>

080051c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <HardFault_Handler+0x4>

080051cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <MemManage_Handler+0x4>

080051d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <BusFault_Handler+0x4>

080051dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051e0:	bf00      	nop
 80051e2:	e7fd      	b.n	80051e0 <UsageFault_Handler+0x4>

080051e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051e8:	bf00      	nop
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005212:	f000 fa3b 	bl	800568c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005216:	bf00      	nop
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005220:	4802      	ldr	r0, [pc, #8]	@ (800522c <DMA1_Stream0_IRQHandler+0x10>)
 8005222:	f001 f921 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005226:	bf00      	nop
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	2000089c 	.word	0x2000089c

08005230 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005234:	4802      	ldr	r0, [pc, #8]	@ (8005240 <DMA1_Stream2_IRQHandler+0x10>)
 8005236:	f001 f917 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	200007dc 	.word	0x200007dc

08005244 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005248:	4802      	ldr	r0, [pc, #8]	@ (8005254 <DMA1_Stream4_IRQHandler+0x10>)
 800524a:	f001 f90d 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800524e:	bf00      	nop
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2000083c 	.word	0x2000083c

08005258 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800525c:	4802      	ldr	r0, [pc, #8]	@ (8005268 <DMA1_Stream5_IRQHandler+0x10>)
 800525e:	f001 f903 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000a1c 	.word	0x20000a1c

0800526c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005270:	4802      	ldr	r0, [pc, #8]	@ (800527c <DMA1_Stream6_IRQHandler+0x10>)
 8005272:	f001 f8f9 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005276:	bf00      	nop
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000a7c 	.word	0x20000a7c

08005280 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005284:	4803      	ldr	r0, [pc, #12]	@ (8005294 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8005286:	f003 fd53 	bl	8008d30 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800528a:	4803      	ldr	r0, [pc, #12]	@ (8005298 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800528c:	f003 fd50 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}
 8005294:	200003a8 	.word	0x200003a8
 8005298:	2000062c 	.word	0x2000062c

0800529c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052a0:	4802      	ldr	r0, [pc, #8]	@ (80052ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80052a2:	f003 fd45 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	200003a8 	.word	0x200003a8

080052b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052b4:	4802      	ldr	r0, [pc, #8]	@ (80052c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80052b6:	f003 fd3b 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80052ba:	bf00      	nop
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200003a8 	.word	0x200003a8

080052c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052c8:	4802      	ldr	r0, [pc, #8]	@ (80052d4 <TIM1_CC_IRQHandler+0x10>)
 80052ca:	f003 fd31 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200003a8 	.word	0x200003a8

080052d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80052dc:	4802      	ldr	r0, [pc, #8]	@ (80052e8 <TIM3_IRQHandler+0x10>)
 80052de:	f003 fd27 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80052e2:	bf00      	nop
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200003f0 	.word	0x200003f0

080052ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80052f0:	4802      	ldr	r0, [pc, #8]	@ (80052fc <TIM4_IRQHandler+0x10>)
 80052f2:	f003 fd1d 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000438 	.word	0x20000438

08005300 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005304:	4802      	ldr	r0, [pc, #8]	@ (8005310 <USART2_IRQHandler+0x10>)
 8005306:	f004 fa75 	bl	80097f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000794 	.word	0x20000794

08005314 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005318:	4803      	ldr	r0, [pc, #12]	@ (8005328 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800531a:	f003 fd09 	bl	8008d30 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800531e:	4803      	ldr	r0, [pc, #12]	@ (800532c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005320:	f003 fd06 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005324:	bf00      	nop
 8005326:	bd80      	pop	{r7, pc}
 8005328:	200004c8 	.word	0x200004c8
 800532c:	20000674 	.word	0x20000674

08005330 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005334:	4802      	ldr	r0, [pc, #8]	@ (8005340 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005336:	f003 fcfb 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	200004c8 	.word	0x200004c8

08005344 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005348:	4802      	ldr	r0, [pc, #8]	@ (8005354 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800534a:	f003 fcf1 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	200004c8 	.word	0x200004c8

08005358 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800535c:	4802      	ldr	r0, [pc, #8]	@ (8005368 <TIM8_CC_IRQHandler+0x10>)
 800535e:	f003 fce7 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	200004c8 	.word	0x200004c8

0800536c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005370:	4802      	ldr	r0, [pc, #8]	@ (800537c <DMA1_Stream7_IRQHandler+0x10>)
 8005372:	f001 f879 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200008fc 	.word	0x200008fc

08005380 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005384:	4802      	ldr	r0, [pc, #8]	@ (8005390 <TIM5_IRQHandler+0x10>)
 8005386:	f003 fcd3 	bl	8008d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000480 	.word	0x20000480

08005394 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005398:	4802      	ldr	r0, [pc, #8]	@ (80053a4 <UART4_IRQHandler+0x10>)
 800539a:	f004 fa2b 	bl	80097f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200006bc 	.word	0x200006bc

080053a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80053ac:	4802      	ldr	r0, [pc, #8]	@ (80053b8 <UART5_IRQHandler+0x10>)
 80053ae:	f004 fa21 	bl	80097f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000704 	.word	0x20000704

080053bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80053c0:	4802      	ldr	r0, [pc, #8]	@ (80053cc <DMA2_Stream2_IRQHandler+0x10>)
 80053c2:	f001 f851 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	2000095c 	.word	0x2000095c

080053d0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80053d4:	4802      	ldr	r0, [pc, #8]	@ (80053e0 <DMA2_Stream7_IRQHandler+0x10>)
 80053d6:	f001 f847 	bl	8006468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200009bc 	.word	0x200009bc

080053e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return 1;
 80053e8:	2301      	movs	r3, #1
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <_kill>:

int _kill(int pid, int sig)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053fe:	f006 feeb 	bl	800c1d8 <__errno>
 8005402:	4603      	mov	r3, r0
 8005404:	2216      	movs	r2, #22
 8005406:	601a      	str	r2, [r3, #0]
  return -1;
 8005408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <_exit>:

void _exit (int status)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800541c:	f04f 31ff 	mov.w	r1, #4294967295
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ffe7 	bl	80053f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005426:	bf00      	nop
 8005428:	e7fd      	b.n	8005426 <_exit+0x12>

0800542a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b086      	sub	sp, #24
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e00a      	b.n	8005452 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800543c:	f3af 8000 	nop.w
 8005440:	4601      	mov	r1, r0
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	60ba      	str	r2, [r7, #8]
 8005448:	b2ca      	uxtb	r2, r1
 800544a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	3301      	adds	r3, #1
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	dbf0      	blt.n	800543c <_read+0x12>
  }

  return len;
 800545a:	687b      	ldr	r3, [r7, #4]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	e009      	b.n	800548a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	60ba      	str	r2, [r7, #8]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3301      	adds	r3, #1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	dbf1      	blt.n	8005476 <_write+0x12>
  }
  return len;
 8005492:	687b      	ldr	r3, [r7, #4]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <_close>:

int _close(int file)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80054c4:	605a      	str	r2, [r3, #4]
  return 0;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <_isatty>:

int _isatty(int file)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80054dc:	2301      	movs	r3, #1
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800550c:	4a14      	ldr	r2, [pc, #80]	@ (8005560 <_sbrk+0x5c>)
 800550e:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <_sbrk+0x60>)
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005518:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <_sbrk+0x64>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d102      	bne.n	8005526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005520:	4b11      	ldr	r3, [pc, #68]	@ (8005568 <_sbrk+0x64>)
 8005522:	4a12      	ldr	r2, [pc, #72]	@ (800556c <_sbrk+0x68>)
 8005524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005526:	4b10      	ldr	r3, [pc, #64]	@ (8005568 <_sbrk+0x64>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	429a      	cmp	r2, r3
 8005532:	d207      	bcs.n	8005544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005534:	f006 fe50 	bl	800c1d8 <__errno>
 8005538:	4603      	mov	r3, r0
 800553a:	220c      	movs	r2, #12
 800553c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	e009      	b.n	8005558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005544:	4b08      	ldr	r3, [pc, #32]	@ (8005568 <_sbrk+0x64>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800554a:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <_sbrk+0x64>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	4a05      	ldr	r2, [pc, #20]	@ (8005568 <_sbrk+0x64>)
 8005554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005556:	68fb      	ldr	r3, [r7, #12]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20020000 	.word	0x20020000
 8005564:	00000400 	.word	0x00000400
 8005568:	20000adc 	.word	0x20000adc
 800556c:	20000c30 	.word	0x20000c30

08005570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005574:	4b06      	ldr	r3, [pc, #24]	@ (8005590 <SystemInit+0x20>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557a:	4a05      	ldr	r2, [pc, #20]	@ (8005590 <SystemInit+0x20>)
 800557c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005594:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80055cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005598:	480d      	ldr	r0, [pc, #52]	@ (80055d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800559a:	490e      	ldr	r1, [pc, #56]	@ (80055d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800559c:	4a0e      	ldr	r2, [pc, #56]	@ (80055d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800559e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055a0:	e002      	b.n	80055a8 <LoopCopyDataInit>

080055a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055a6:	3304      	adds	r3, #4

080055a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055ac:	d3f9      	bcc.n	80055a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ae:	4a0b      	ldr	r2, [pc, #44]	@ (80055dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055b0:	4c0b      	ldr	r4, [pc, #44]	@ (80055e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055b4:	e001      	b.n	80055ba <LoopFillZerobss>

080055b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055b8:	3204      	adds	r2, #4

080055ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055bc:	d3fb      	bcc.n	80055b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055be:	f7ff ffd7 	bl	8005570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055c2:	f006 fe0f 	bl	800c1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055c6:	f7fd fef7 	bl	80033b8 <main>
  bx  lr    
 80055ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055d4:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80055d8:	08010050 	.word	0x08010050
  ldr r2, =_sbss
 80055dc:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80055e0:	20000c30 	.word	0x20000c30

080055e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055e4:	e7fe      	b.n	80055e4 <ADC_IRQHandler>
	...

080055e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005628 <HAL_Init+0x40>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005628 <HAL_Init+0x40>)
 80055f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005628 <HAL_Init+0x40>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005628 <HAL_Init+0x40>)
 80055fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005604:	4b08      	ldr	r3, [pc, #32]	@ (8005628 <HAL_Init+0x40>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a07      	ldr	r2, [pc, #28]	@ (8005628 <HAL_Init+0x40>)
 800560a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800560e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005610:	2003      	movs	r0, #3
 8005612:	f000 fd4f 	bl	80060b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005616:	2000      	movs	r0, #0
 8005618:	f000 f808 	bl	800562c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800561c:	f7fe ffa8 	bl	8004570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40023c00 	.word	0x40023c00

0800562c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005634:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <HAL_InitTick+0x54>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <HAL_InitTick+0x58>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	4619      	mov	r1, r3
 800563e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005642:	fbb3 f3f1 	udiv	r3, r3, r1
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fd67 	bl	800611e <HAL_SYSTICK_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e00e      	b.n	8005678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b0f      	cmp	r3, #15
 800565e:	d80a      	bhi.n	8005676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005660:	2200      	movs	r2, #0
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	f000 fd2f 	bl	80060ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800566c:	4a06      	ldr	r2, [pc, #24]	@ (8005688 <HAL_InitTick+0x5c>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e000      	b.n	8005678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000078 	.word	0x20000078
 8005684:	20000080 	.word	0x20000080
 8005688:	2000007c 	.word	0x2000007c

0800568c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <HAL_IncTick+0x20>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <HAL_IncTick+0x24>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4413      	add	r3, r2
 800569c:	4a04      	ldr	r2, [pc, #16]	@ (80056b0 <HAL_IncTick+0x24>)
 800569e:	6013      	str	r3, [r2, #0]
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000080 	.word	0x20000080
 80056b0:	20000ae0 	.word	0x20000ae0

080056b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return uwTick;
 80056b8:	4b03      	ldr	r3, [pc, #12]	@ (80056c8 <HAL_GetTick+0x14>)
 80056ba:	681b      	ldr	r3, [r3, #0]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000ae0 	.word	0x20000ae0

080056cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056d4:	f7ff ffee 	bl	80056b4 <HAL_GetTick>
 80056d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d005      	beq.n	80056f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005710 <HAL_Delay+0x44>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056f2:	bf00      	nop
 80056f4:	f7ff ffde 	bl	80056b4 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	429a      	cmp	r2, r3
 8005702:	d8f7      	bhi.n	80056f4 <HAL_Delay+0x28>
  {
  }
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000080 	.word	0x20000080

08005714 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e033      	b.n	8005792 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fe ff44 	bl	80045c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	2b00      	cmp	r3, #0
 8005750:	d118      	bne.n	8005784 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800575a:	f023 0302 	bic.w	r3, r3, #2
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fad8 	bl	8005d1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	641a      	str	r2, [r3, #64]	@ 0x40
 8005782:	e001      	b.n	8005788 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_ADC_Start+0x1a>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0b2      	b.n	800591c <HAL_ADC_Start+0x180>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d018      	beq.n	80057fe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057dc:	4b52      	ldr	r3, [pc, #328]	@ (8005928 <HAL_ADC_Start+0x18c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a52      	ldr	r2, [pc, #328]	@ (800592c <HAL_ADC_Start+0x190>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	0c9a      	lsrs	r2, r3, #18
 80057e8:	4613      	mov	r3, r2
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	4413      	add	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80057f0:	e002      	b.n	80057f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f9      	bne.n	80057f2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d17a      	bne.n	8005902 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005836:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800584a:	d106      	bne.n	800585a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005850:	f023 0206 	bic.w	r2, r3, #6
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	645a      	str	r2, [r3, #68]	@ 0x44
 8005858:	e002      	b.n	8005860 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005868:	4b31      	ldr	r3, [pc, #196]	@ (8005930 <HAL_ADC_Start+0x194>)
 800586a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005874:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	2b00      	cmp	r3, #0
 8005880:	d12a      	bne.n	80058d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2b      	ldr	r2, [pc, #172]	@ (8005934 <HAL_ADC_Start+0x198>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d015      	beq.n	80058b8 <HAL_ADC_Start+0x11c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a29      	ldr	r2, [pc, #164]	@ (8005938 <HAL_ADC_Start+0x19c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d105      	bne.n	80058a2 <HAL_ADC_Start+0x106>
 8005896:	4b26      	ldr	r3, [pc, #152]	@ (8005930 <HAL_ADC_Start+0x194>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a25      	ldr	r2, [pc, #148]	@ (800593c <HAL_ADC_Start+0x1a0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d136      	bne.n	800591a <HAL_ADC_Start+0x17e>
 80058ac:	4b20      	ldr	r3, [pc, #128]	@ (8005930 <HAL_ADC_Start+0x194>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d130      	bne.n	800591a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d129      	bne.n	800591a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80058d4:	609a      	str	r2, [r3, #8]
 80058d6:	e020      	b.n	800591a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a15      	ldr	r2, [pc, #84]	@ (8005934 <HAL_ADC_Start+0x198>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d11b      	bne.n	800591a <HAL_ADC_Start+0x17e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d114      	bne.n	800591a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	e00b      	b.n	800591a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	f043 0210 	orr.w	r2, r3, #16
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20000078 	.word	0x20000078
 800592c:	431bde83 	.word	0x431bde83
 8005930:	40012300 	.word	0x40012300
 8005934:	40012000 	.word	0x40012000
 8005938:	40012100 	.word	0x40012100
 800593c:	40012200 	.word	0x40012200

08005940 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_ADC_Stop+0x16>
 8005952:	2302      	movs	r3, #2
 8005954:	e021      	b.n	800599a <HAL_ADC_Stop+0x5a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005980:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	f043 0201 	orr.w	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c2:	d113      	bne.n	80059ec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d2:	d10b      	bne.n	80059ec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e063      	b.n	8005ab4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80059ec:	f7ff fe62 	bl	80056b4 <HAL_GetTick>
 80059f0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80059f2:	e021      	b.n	8005a38 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d01d      	beq.n	8005a38 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <HAL_ADC_PollForConversion+0x6c>
 8005a02:	f7ff fe57 	bl	80056b4 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d212      	bcs.n	8005a38 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d00b      	beq.n	8005a38 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	f043 0204 	orr.w	r2, r3, #4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e03d      	b.n	8005ab4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d1d6      	bne.n	80059f4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0212 	mvn.w	r2, #18
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d123      	bne.n	8005ab2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11f      	bne.n	8005ab2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d111      	bne.n	8005ab2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d105      	bne.n	8005ab2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_ADC_ConfigChannel+0x1c>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e105      	b.n	8005d00 <HAL_ADC_ConfigChannel+0x228>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b09      	cmp	r3, #9
 8005b02:	d925      	bls.n	8005b50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68d9      	ldr	r1, [r3, #12]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	3b1e      	subs	r3, #30
 8005b1a:	2207      	movs	r2, #7
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43da      	mvns	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	400a      	ands	r2, r1
 8005b28:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68d9      	ldr	r1, [r3, #12]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4403      	add	r3, r0
 8005b42:	3b1e      	subs	r3, #30
 8005b44:	409a      	lsls	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	60da      	str	r2, [r3, #12]
 8005b4e:	e022      	b.n	8005b96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6919      	ldr	r1, [r3, #16]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	2207      	movs	r2, #7
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	43da      	mvns	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	400a      	ands	r2, r1
 8005b72:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6919      	ldr	r1, [r3, #16]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	4618      	mov	r0, r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4403      	add	r3, r0
 8005b8c:	409a      	lsls	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b06      	cmp	r3, #6
 8005b9c:	d824      	bhi.n	8005be8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	3b05      	subs	r3, #5
 8005bb0:	221f      	movs	r2, #31
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	400a      	ands	r2, r1
 8005bbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4618      	mov	r0, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3b05      	subs	r3, #5
 8005bda:	fa00 f203 	lsl.w	r2, r0, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005be6:	e04c      	b.n	8005c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	d824      	bhi.n	8005c3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	3b23      	subs	r3, #35	@ 0x23
 8005c02:	221f      	movs	r2, #31
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	43da      	mvns	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	400a      	ands	r2, r1
 8005c10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	4618      	mov	r0, r3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	3b23      	subs	r3, #35	@ 0x23
 8005c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c38:	e023      	b.n	8005c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	3b41      	subs	r3, #65	@ 0x41
 8005c4c:	221f      	movs	r2, #31
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	43da      	mvns	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	400a      	ands	r2, r1
 8005c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	4618      	mov	r0, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	3b41      	subs	r3, #65	@ 0x41
 8005c76:	fa00 f203 	lsl.w	r2, r0, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c82:	4b22      	ldr	r3, [pc, #136]	@ (8005d0c <HAL_ADC_ConfigChannel+0x234>)
 8005c84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a21      	ldr	r2, [pc, #132]	@ (8005d10 <HAL_ADC_ConfigChannel+0x238>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x1cc>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b12      	cmp	r3, #18
 8005c96:	d105      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a19      	ldr	r2, [pc, #100]	@ (8005d10 <HAL_ADC_ConfigChannel+0x238>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d123      	bne.n	8005cf6 <HAL_ADC_ConfigChannel+0x21e>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d003      	beq.n	8005cbe <HAL_ADC_ConfigChannel+0x1e6>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b11      	cmp	r3, #17
 8005cbc:	d11b      	bne.n	8005cf6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b10      	cmp	r3, #16
 8005cd0:	d111      	bne.n	8005cf6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cd2:	4b10      	ldr	r3, [pc, #64]	@ (8005d14 <HAL_ADC_ConfigChannel+0x23c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a10      	ldr	r2, [pc, #64]	@ (8005d18 <HAL_ADC_ConfigChannel+0x240>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	0c9a      	lsrs	r2, r3, #18
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005ce8:	e002      	b.n	8005cf0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f9      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40012300 	.word	0x40012300
 8005d10:	40012000 	.word	0x40012000
 8005d14:	20000078 	.word	0x20000078
 8005d18:	431bde83 	.word	0x431bde83

08005d1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d24:	4b79      	ldr	r3, [pc, #484]	@ (8005f0c <ADC_Init+0x1f0>)
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	021a      	lsls	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6859      	ldr	r1, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6899      	ldr	r1, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dae:	4a58      	ldr	r2, [pc, #352]	@ (8005f10 <ADC_Init+0x1f4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d022      	beq.n	8005dfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005dc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6899      	ldr	r1, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005de4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	e00f      	b.n	8005e1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005e18:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0202 	bic.w	r2, r2, #2
 8005e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6899      	ldr	r1, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	7e1b      	ldrb	r3, [r3, #24]
 8005e34:	005a      	lsls	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01b      	beq.n	8005e80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e56:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005e66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	3b01      	subs	r3, #1
 8005e74:	035a      	lsls	r2, r3, #13
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
 8005e7e:	e007      	b.n	8005e90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e8e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	051a      	lsls	r2, r3, #20
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6899      	ldr	r1, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ed2:	025a      	lsls	r2, r3, #9
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6899      	ldr	r1, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	029a      	lsls	r2, r3, #10
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	40012300 	.word	0x40012300
 8005f10:	0f000001 	.word	0x0f000001

08005f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f24:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <__NVIC_SetPriorityGrouping+0x44>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f30:	4013      	ands	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f46:	4a04      	ldr	r2, [pc, #16]	@ (8005f58 <__NVIC_SetPriorityGrouping+0x44>)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	60d3      	str	r3, [r2, #12]
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f60:	4b04      	ldr	r3, [pc, #16]	@ (8005f74 <__NVIC_GetPriorityGrouping+0x18>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f003 0307 	and.w	r3, r3, #7
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	e000ed00 	.word	0xe000ed00

08005f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	db0b      	blt.n	8005fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	f003 021f 	and.w	r2, r3, #31
 8005f90:	4907      	ldr	r1, [pc, #28]	@ (8005fb0 <__NVIC_EnableIRQ+0x38>)
 8005f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2001      	movs	r0, #1
 8005f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000e100 	.word	0xe000e100

08005fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db0a      	blt.n	8005fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	490c      	ldr	r1, [pc, #48]	@ (8006000 <__NVIC_SetPriority+0x4c>)
 8005fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fdc:	e00a      	b.n	8005ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4908      	ldr	r1, [pc, #32]	@ (8006004 <__NVIC_SetPriority+0x50>)
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	3b04      	subs	r3, #4
 8005fec:	0112      	lsls	r2, r2, #4
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	761a      	strb	r2, [r3, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	e000e100 	.word	0xe000e100
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006008:	b480      	push	{r7}
 800600a:	b089      	sub	sp, #36	@ 0x24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f1c3 0307 	rsb	r3, r3, #7
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf28      	it	cs
 8006026:	2304      	movcs	r3, #4
 8006028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3304      	adds	r3, #4
 800602e:	2b06      	cmp	r3, #6
 8006030:	d902      	bls.n	8006038 <NVIC_EncodePriority+0x30>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3b03      	subs	r3, #3
 8006036:	e000      	b.n	800603a <NVIC_EncodePriority+0x32>
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43da      	mvns	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	401a      	ands	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006050:	f04f 31ff 	mov.w	r1, #4294967295
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	43d9      	mvns	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006060:	4313      	orrs	r3, r2
         );
}
 8006062:	4618      	mov	r0, r3
 8006064:	3724      	adds	r7, #36	@ 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3b01      	subs	r3, #1
 800607c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006080:	d301      	bcc.n	8006086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006082:	2301      	movs	r3, #1
 8006084:	e00f      	b.n	80060a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006086:	4a0a      	ldr	r2, [pc, #40]	@ (80060b0 <SysTick_Config+0x40>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3b01      	subs	r3, #1
 800608c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800608e:	210f      	movs	r1, #15
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	f7ff ff8e 	bl	8005fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006098:	4b05      	ldr	r3, [pc, #20]	@ (80060b0 <SysTick_Config+0x40>)
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800609e:	4b04      	ldr	r3, [pc, #16]	@ (80060b0 <SysTick_Config+0x40>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	e000e010 	.word	0xe000e010

080060b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff29 	bl	8005f14 <__NVIC_SetPriorityGrouping>
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b086      	sub	sp, #24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	4603      	mov	r3, r0
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060dc:	f7ff ff3e 	bl	8005f5c <__NVIC_GetPriorityGrouping>
 80060e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	6978      	ldr	r0, [r7, #20]
 80060e8:	f7ff ff8e 	bl	8006008 <NVIC_EncodePriority>
 80060ec:	4602      	mov	r2, r0
 80060ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ff5d 	bl	8005fb4 <__NVIC_SetPriority>
}
 80060fa:	bf00      	nop
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	4603      	mov	r3, r0
 800610a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800610c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff ff31 	bl	8005f78 <__NVIC_EnableIRQ>
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff ffa2 	bl	8006070 <SysTick_Config>
 800612c:	4603      	mov	r3, r0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006144:	f7ff fab6 	bl	80056b4 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e099      	b.n	8006288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006174:	e00f      	b.n	8006196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006176:	f7ff fa9d 	bl	80056b4 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b05      	cmp	r3, #5
 8006182:	d908      	bls.n	8006196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2203      	movs	r2, #3
 800618e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e078      	b.n	8006288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e8      	bne.n	8006176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4b38      	ldr	r3, [pc, #224]	@ (8006290 <HAL_DMA_Init+0x158>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d107      	bne.n	8006200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f8:	4313      	orrs	r3, r2
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0307 	bic.w	r3, r3, #7
 8006216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006226:	2b04      	cmp	r3, #4
 8006228:	d117      	bne.n	800625a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fb01 	bl	8006844 <DMA_CheckFifoParam>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2240      	movs	r2, #64	@ 0x40
 800624c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006256:	2301      	movs	r3, #1
 8006258:	e016      	b.n	8006288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fab8 	bl	80067d8 <DMA_CalcBaseAndBitshift>
 8006268:	4603      	mov	r3, r0
 800626a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006270:	223f      	movs	r2, #63	@ 0x3f
 8006272:	409a      	lsls	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	f010803f 	.word	0xf010803f

08006294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_DMA_Start_IT+0x26>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e040      	b.n	800633c <HAL_DMA_Start_IT+0xa8>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d12f      	bne.n	800632e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fa4a 	bl	800677c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ec:	223f      	movs	r2, #63	@ 0x3f
 80062ee:	409a      	lsls	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0216 	orr.w	r2, r2, #22
 8006302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0208 	orr.w	r2, r2, #8
 800631a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e005      	b.n	800633a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006352:	f7ff f9af 	bl	80056b4 <HAL_GetTick>
 8006356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d008      	beq.n	8006376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2280      	movs	r2, #128	@ 0x80
 8006368:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e052      	b.n	800641c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0216 	bic.w	r2, r2, #22
 8006384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d103      	bne.n	80063a6 <HAL_DMA_Abort+0x62>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0208 	bic.w	r2, r2, #8
 80063b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063c6:	e013      	b.n	80063f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063c8:	f7ff f974 	bl	80056b4 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d90c      	bls.n	80063f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2203      	movs	r2, #3
 80063e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e015      	b.n	800641c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e4      	bne.n	80063c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006402:	223f      	movs	r2, #63	@ 0x3f
 8006404:	409a      	lsls	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d004      	beq.n	8006442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2280      	movs	r2, #128	@ 0x80
 800643c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e00c      	b.n	800645c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2205      	movs	r2, #5
 8006446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006474:	4b8e      	ldr	r3, [pc, #568]	@ (80066b0 <HAL_DMA_IRQHandler+0x248>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a8e      	ldr	r2, [pc, #568]	@ (80066b4 <HAL_DMA_IRQHandler+0x24c>)
 800647a:	fba2 2303 	umull	r2, r3, r2, r3
 800647e:	0a9b      	lsrs	r3, r3, #10
 8006480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006492:	2208      	movs	r2, #8
 8006494:	409a      	lsls	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4013      	ands	r3, r2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01a      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d013      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0204 	bic.w	r2, r2, #4
 80064ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c0:	2208      	movs	r2, #8
 80064c2:	409a      	lsls	r2, r3
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	f043 0201 	orr.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d8:	2201      	movs	r2, #1
 80064da:	409a      	lsls	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f6:	2201      	movs	r2, #1
 80064f8:	409a      	lsls	r2, r3
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006502:	f043 0202 	orr.w	r2, r3, #2
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800650e:	2204      	movs	r2, #4
 8006510:	409a      	lsls	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652c:	2204      	movs	r2, #4
 800652e:	409a      	lsls	r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006538:	f043 0204 	orr.w	r2, r3, #4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006544:	2210      	movs	r2, #16
 8006546:	409a      	lsls	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d043      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d03c      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006562:	2210      	movs	r2, #16
 8006564:	409a      	lsls	r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d018      	beq.n	80065aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d108      	bne.n	8006598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d024      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
 8006596:	e01f      	b.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
 80065a8:	e016      	b.n	80065d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d107      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0208 	bic.w	r2, r2, #8
 80065c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065dc:	2220      	movs	r2, #32
 80065de:	409a      	lsls	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 808f 	beq.w	8006708 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8087 	beq.w	8006708 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065fe:	2220      	movs	r2, #32
 8006600:	409a      	lsls	r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b05      	cmp	r3, #5
 8006610:	d136      	bne.n	8006680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0216 	bic.w	r2, r2, #22
 8006620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_DMA_IRQHandler+0x1da>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0208 	bic.w	r2, r2, #8
 8006650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006656:	223f      	movs	r2, #63	@ 0x3f
 8006658:	409a      	lsls	r2, r3
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006672:	2b00      	cmp	r3, #0
 8006674:	d07e      	beq.n	8006774 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
        }
        return;
 800667e:	e079      	b.n	8006774 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01d      	beq.n	80066ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10d      	bne.n	80066b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d031      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	e02c      	b.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
 80066ae:	bf00      	nop
 80066b0:	20000078 	.word	0x20000078
 80066b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d023      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
 80066c8:	e01e      	b.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10f      	bne.n	80066f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0210 	bic.w	r2, r2, #16
 80066e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670c:	2b00      	cmp	r3, #0
 800670e:	d032      	beq.n	8006776 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d022      	beq.n	8006762 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2205      	movs	r2, #5
 8006720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	3301      	adds	r3, #1
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	429a      	cmp	r2, r3
 800673e:	d307      	bcc.n	8006750 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f2      	bne.n	8006734 <HAL_DMA_IRQHandler+0x2cc>
 800674e:	e000      	b.n	8006752 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006750:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
 8006772:	e000      	b.n	8006776 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006774:	bf00      	nop
    }
  }
}
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006798:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b40      	cmp	r3, #64	@ 0x40
 80067a8:	d108      	bne.n	80067bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067ba:	e007      	b.n	80067cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	3b10      	subs	r3, #16
 80067e8:	4a14      	ldr	r2, [pc, #80]	@ (800683c <DMA_CalcBaseAndBitshift+0x64>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067f2:	4a13      	ldr	r2, [pc, #76]	@ (8006840 <DMA_CalcBaseAndBitshift+0x68>)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b03      	cmp	r3, #3
 8006804:	d909      	bls.n	800681a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	1d1a      	adds	r2, r3, #4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	659a      	str	r2, [r3, #88]	@ 0x58
 8006818:	e007      	b.n	800682a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	aaaaaaab 	.word	0xaaaaaaab
 8006840:	0800fa84 	.word	0x0800fa84

08006844 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d11f      	bne.n	800689e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b03      	cmp	r3, #3
 8006862:	d856      	bhi.n	8006912 <DMA_CheckFifoParam+0xce>
 8006864:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <DMA_CheckFifoParam+0x28>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	0800687d 	.word	0x0800687d
 8006870:	0800688f 	.word	0x0800688f
 8006874:	0800687d 	.word	0x0800687d
 8006878:	08006913 	.word	0x08006913
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d046      	beq.n	8006916 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800688c:	e043      	b.n	8006916 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006892:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006896:	d140      	bne.n	800691a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800689c:	e03d      	b.n	800691a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068a6:	d121      	bne.n	80068ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d837      	bhi.n	800691e <DMA_CheckFifoParam+0xda>
 80068ae:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <DMA_CheckFifoParam+0x70>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	080068cb 	.word	0x080068cb
 80068bc:	080068c5 	.word	0x080068c5
 80068c0:	080068dd 	.word	0x080068dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e030      	b.n	800692c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d025      	beq.n	8006922 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068da:	e022      	b.n	8006922 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068e4:	d11f      	bne.n	8006926 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068ea:	e01c      	b.n	8006926 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d903      	bls.n	80068fa <DMA_CheckFifoParam+0xb6>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d003      	beq.n	8006900 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068f8:	e018      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
      break;
 80068fe:	e015      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006904:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00e      	beq.n	800692a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	e00b      	b.n	800692a <DMA_CheckFifoParam+0xe6>
      break;
 8006912:	bf00      	nop
 8006914:	e00a      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 8006916:	bf00      	nop
 8006918:	e008      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 800691a:	bf00      	nop
 800691c:	e006      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 800691e:	bf00      	nop
 8006920:	e004      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;   
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <DMA_CheckFifoParam+0xe8>
      break;
 800692a:	bf00      	nop
    }
  } 
  
  return status; 
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop

0800693c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	@ 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e16b      	b.n	8006c30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006958:	2201      	movs	r2, #1
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4013      	ands	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	429a      	cmp	r2, r3
 8006972:	f040 815a 	bne.w	8006c2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b01      	cmp	r3, #1
 8006980:	d005      	beq.n	800698e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800698a:	2b02      	cmp	r3, #2
 800698c:	d130      	bne.n	80069f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	2203      	movs	r2, #3
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4013      	ands	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069c4:	2201      	movs	r2, #1
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	43db      	mvns	r3, r3
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	4013      	ands	r3, r2
 80069d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 0201 	and.w	r2, r3, #1
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d017      	beq.n	8006a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	2203      	movs	r2, #3
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4013      	ands	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d123      	bne.n	8006a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	08da      	lsrs	r2, r3, #3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3208      	adds	r2, #8
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	220f      	movs	r2, #15
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	08da      	lsrs	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3208      	adds	r2, #8
 8006a7a:	69b9      	ldr	r1, [r7, #24]
 8006a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f003 0203 	and.w	r2, r3, #3
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 80b4 	beq.w	8006c2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4b60      	ldr	r3, [pc, #384]	@ (8006c48 <HAL_GPIO_Init+0x30c>)
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aca:	4a5f      	ldr	r2, [pc, #380]	@ (8006c48 <HAL_GPIO_Init+0x30c>)
 8006acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8006c48 <HAL_GPIO_Init+0x30c>)
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ade:	4a5b      	ldr	r2, [pc, #364]	@ (8006c4c <HAL_GPIO_Init+0x310>)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	089b      	lsrs	r3, r3, #2
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	220f      	movs	r2, #15
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4013      	ands	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a52      	ldr	r2, [pc, #328]	@ (8006c50 <HAL_GPIO_Init+0x314>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d02b      	beq.n	8006b62 <HAL_GPIO_Init+0x226>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a51      	ldr	r2, [pc, #324]	@ (8006c54 <HAL_GPIO_Init+0x318>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d025      	beq.n	8006b5e <HAL_GPIO_Init+0x222>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a50      	ldr	r2, [pc, #320]	@ (8006c58 <HAL_GPIO_Init+0x31c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d01f      	beq.n	8006b5a <HAL_GPIO_Init+0x21e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8006c5c <HAL_GPIO_Init+0x320>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d019      	beq.n	8006b56 <HAL_GPIO_Init+0x21a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a4e      	ldr	r2, [pc, #312]	@ (8006c60 <HAL_GPIO_Init+0x324>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_GPIO_Init+0x216>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8006c64 <HAL_GPIO_Init+0x328>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00d      	beq.n	8006b4e <HAL_GPIO_Init+0x212>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a4c      	ldr	r2, [pc, #304]	@ (8006c68 <HAL_GPIO_Init+0x32c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <HAL_GPIO_Init+0x20e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8006c6c <HAL_GPIO_Init+0x330>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d101      	bne.n	8006b46 <HAL_GPIO_Init+0x20a>
 8006b42:	2307      	movs	r3, #7
 8006b44:	e00e      	b.n	8006b64 <HAL_GPIO_Init+0x228>
 8006b46:	2308      	movs	r3, #8
 8006b48:	e00c      	b.n	8006b64 <HAL_GPIO_Init+0x228>
 8006b4a:	2306      	movs	r3, #6
 8006b4c:	e00a      	b.n	8006b64 <HAL_GPIO_Init+0x228>
 8006b4e:	2305      	movs	r3, #5
 8006b50:	e008      	b.n	8006b64 <HAL_GPIO_Init+0x228>
 8006b52:	2304      	movs	r3, #4
 8006b54:	e006      	b.n	8006b64 <HAL_GPIO_Init+0x228>
 8006b56:	2303      	movs	r3, #3
 8006b58:	e004      	b.n	8006b64 <HAL_GPIO_Init+0x228>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e002      	b.n	8006b64 <HAL_GPIO_Init+0x228>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <HAL_GPIO_Init+0x228>
 8006b62:	2300      	movs	r3, #0
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	f002 0203 	and.w	r2, r2, #3
 8006b6a:	0092      	lsls	r2, r2, #2
 8006b6c:	4093      	lsls	r3, r2
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b74:	4935      	ldr	r1, [pc, #212]	@ (8006c4c <HAL_GPIO_Init+0x310>)
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	089b      	lsrs	r3, r3, #2
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b82:	4b3b      	ldr	r3, [pc, #236]	@ (8006c70 <HAL_GPIO_Init+0x334>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ba6:	4a32      	ldr	r2, [pc, #200]	@ (8006c70 <HAL_GPIO_Init+0x334>)
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bac:	4b30      	ldr	r3, [pc, #192]	@ (8006c70 <HAL_GPIO_Init+0x334>)
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bd0:	4a27      	ldr	r2, [pc, #156]	@ (8006c70 <HAL_GPIO_Init+0x334>)
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bd6:	4b26      	ldr	r3, [pc, #152]	@ (8006c70 <HAL_GPIO_Init+0x334>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4013      	ands	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8006c70 <HAL_GPIO_Init+0x334>)
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c00:	4b1b      	ldr	r3, [pc, #108]	@ (8006c70 <HAL_GPIO_Init+0x334>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c24:	4a12      	ldr	r2, [pc, #72]	@ (8006c70 <HAL_GPIO_Init+0x334>)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b0f      	cmp	r3, #15
 8006c34:	f67f ae90 	bls.w	8006958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	3724      	adds	r7, #36	@ 0x24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	40013800 	.word	0x40013800
 8006c50:	40020000 	.word	0x40020000
 8006c54:	40020400 	.word	0x40020400
 8006c58:	40020800 	.word	0x40020800
 8006c5c:	40020c00 	.word	0x40020c00
 8006c60:	40021000 	.word	0x40021000
 8006c64:	40021400 	.word	0x40021400
 8006c68:	40021800 	.word	0x40021800
 8006c6c:	40021c00 	.word	0x40021c00
 8006c70:	40013c00 	.word	0x40013c00

08006c74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e0cd      	b.n	8006e2c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c90:	2201      	movs	r2, #1
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	f040 80bd 	bne.w	8006e26 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006cac:	4a65      	ldr	r2, [pc, #404]	@ (8006e44 <HAL_GPIO_DeInit+0x1d0>)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	089b      	lsrs	r3, r3, #2
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	220f      	movs	r2, #15
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8006e48 <HAL_GPIO_DeInit+0x1d4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d02b      	beq.n	8006d2e <HAL_GPIO_DeInit+0xba>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a5c      	ldr	r2, [pc, #368]	@ (8006e4c <HAL_GPIO_DeInit+0x1d8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d025      	beq.n	8006d2a <HAL_GPIO_DeInit+0xb6>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a5b      	ldr	r2, [pc, #364]	@ (8006e50 <HAL_GPIO_DeInit+0x1dc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d01f      	beq.n	8006d26 <HAL_GPIO_DeInit+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8006e54 <HAL_GPIO_DeInit+0x1e0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d019      	beq.n	8006d22 <HAL_GPIO_DeInit+0xae>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a59      	ldr	r2, [pc, #356]	@ (8006e58 <HAL_GPIO_DeInit+0x1e4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <HAL_GPIO_DeInit+0xaa>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a58      	ldr	r2, [pc, #352]	@ (8006e5c <HAL_GPIO_DeInit+0x1e8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00d      	beq.n	8006d1a <HAL_GPIO_DeInit+0xa6>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a57      	ldr	r2, [pc, #348]	@ (8006e60 <HAL_GPIO_DeInit+0x1ec>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d007      	beq.n	8006d16 <HAL_GPIO_DeInit+0xa2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a56      	ldr	r2, [pc, #344]	@ (8006e64 <HAL_GPIO_DeInit+0x1f0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d101      	bne.n	8006d12 <HAL_GPIO_DeInit+0x9e>
 8006d0e:	2307      	movs	r3, #7
 8006d10:	e00e      	b.n	8006d30 <HAL_GPIO_DeInit+0xbc>
 8006d12:	2308      	movs	r3, #8
 8006d14:	e00c      	b.n	8006d30 <HAL_GPIO_DeInit+0xbc>
 8006d16:	2306      	movs	r3, #6
 8006d18:	e00a      	b.n	8006d30 <HAL_GPIO_DeInit+0xbc>
 8006d1a:	2305      	movs	r3, #5
 8006d1c:	e008      	b.n	8006d30 <HAL_GPIO_DeInit+0xbc>
 8006d1e:	2304      	movs	r3, #4
 8006d20:	e006      	b.n	8006d30 <HAL_GPIO_DeInit+0xbc>
 8006d22:	2303      	movs	r3, #3
 8006d24:	e004      	b.n	8006d30 <HAL_GPIO_DeInit+0xbc>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e002      	b.n	8006d30 <HAL_GPIO_DeInit+0xbc>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <HAL_GPIO_DeInit+0xbc>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	f002 0203 	and.w	r2, r2, #3
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	4093      	lsls	r3, r2
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d132      	bne.n	8006da6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d40:	4b49      	ldr	r3, [pc, #292]	@ (8006e68 <HAL_GPIO_DeInit+0x1f4>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	4947      	ldr	r1, [pc, #284]	@ (8006e68 <HAL_GPIO_DeInit+0x1f4>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d4e:	4b46      	ldr	r3, [pc, #280]	@ (8006e68 <HAL_GPIO_DeInit+0x1f4>)
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	4944      	ldr	r1, [pc, #272]	@ (8006e68 <HAL_GPIO_DeInit+0x1f4>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006d5c:	4b42      	ldr	r3, [pc, #264]	@ (8006e68 <HAL_GPIO_DeInit+0x1f4>)
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	43db      	mvns	r3, r3
 8006d64:	4940      	ldr	r1, [pc, #256]	@ (8006e68 <HAL_GPIO_DeInit+0x1f4>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e68 <HAL_GPIO_DeInit+0x1f4>)
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	493d      	ldr	r1, [pc, #244]	@ (8006e68 <HAL_GPIO_DeInit+0x1f4>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	220f      	movs	r2, #15
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006d88:	4a2e      	ldr	r2, [pc, #184]	@ (8006e44 <HAL_GPIO_DeInit+0x1d0>)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	089b      	lsrs	r3, r3, #2
 8006d8e:	3302      	adds	r3, #2
 8006d90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	43da      	mvns	r2, r3
 8006d98:	482a      	ldr	r0, [pc, #168]	@ (8006e44 <HAL_GPIO_DeInit+0x1d0>)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	089b      	lsrs	r3, r3, #2
 8006d9e:	400a      	ands	r2, r1
 8006da0:	3302      	adds	r3, #2
 8006da2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	2103      	movs	r1, #3
 8006db0:	fa01 f303 	lsl.w	r3, r1, r3
 8006db4:	43db      	mvns	r3, r3
 8006db6:	401a      	ands	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	08da      	lsrs	r2, r3, #3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3208      	adds	r2, #8
 8006dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	220f      	movs	r2, #15
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	08d2      	lsrs	r2, r2, #3
 8006ddc:	4019      	ands	r1, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3208      	adds	r2, #8
 8006de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	2103      	movs	r1, #3
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	43db      	mvns	r3, r3
 8006df6:	401a      	ands	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	2101      	movs	r1, #1
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	fa01 f303 	lsl.w	r3, r1, r3
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	2103      	movs	r1, #3
 8006e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	401a      	ands	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	f67f af2e 	bls.w	8006c90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40013800 	.word	0x40013800
 8006e48:	40020000 	.word	0x40020000
 8006e4c:	40020400 	.word	0x40020400
 8006e50:	40020800 	.word	0x40020800
 8006e54:	40020c00 	.word	0x40020c00
 8006e58:	40021000 	.word	0x40021000
 8006e5c:	40021400 	.word	0x40021400
 8006e60:	40021800 	.word	0x40021800
 8006e64:	40021c00 	.word	0x40021c00
 8006e68:	40013c00 	.word	0x40013c00

08006e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	807b      	strh	r3, [r7, #2]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e7c:	787b      	ldrb	r3, [r7, #1]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e82:	887a      	ldrh	r2, [r7, #2]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e88:	e003      	b.n	8006e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e8a:	887b      	ldrh	r3, [r7, #2]
 8006e8c:	041a      	lsls	r2, r3, #16
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	619a      	str	r2, [r3, #24]
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e12b      	b.n	800710a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fd fbda 	bl	8004680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2224      	movs	r2, #36	@ 0x24
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0201 	bic.w	r2, r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f04:	f001 fc80 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 8006f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4a81      	ldr	r2, [pc, #516]	@ (8007114 <HAL_I2C_Init+0x274>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d807      	bhi.n	8006f24 <HAL_I2C_Init+0x84>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4a80      	ldr	r2, [pc, #512]	@ (8007118 <HAL_I2C_Init+0x278>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	bf94      	ite	ls
 8006f1c:	2301      	movls	r3, #1
 8006f1e:	2300      	movhi	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e006      	b.n	8006f32 <HAL_I2C_Init+0x92>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4a7d      	ldr	r2, [pc, #500]	@ (800711c <HAL_I2C_Init+0x27c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	bf94      	ite	ls
 8006f2c:	2301      	movls	r3, #1
 8006f2e:	2300      	movhi	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e0e7      	b.n	800710a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4a78      	ldr	r2, [pc, #480]	@ (8007120 <HAL_I2C_Init+0x280>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	0c9b      	lsrs	r3, r3, #18
 8006f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	4a6a      	ldr	r2, [pc, #424]	@ (8007114 <HAL_I2C_Init+0x274>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d802      	bhi.n	8006f74 <HAL_I2C_Init+0xd4>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	3301      	adds	r3, #1
 8006f72:	e009      	b.n	8006f88 <HAL_I2C_Init+0xe8>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	4a69      	ldr	r2, [pc, #420]	@ (8007124 <HAL_I2C_Init+0x284>)
 8006f80:	fba2 2303 	umull	r2, r3, r2, r3
 8006f84:	099b      	lsrs	r3, r3, #6
 8006f86:	3301      	adds	r3, #1
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006f9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	495c      	ldr	r1, [pc, #368]	@ (8007114 <HAL_I2C_Init+0x274>)
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	d819      	bhi.n	8006fdc <HAL_I2C_Init+0x13c>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	1e59      	subs	r1, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006fbc:	400b      	ands	r3, r1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <HAL_I2C_Init+0x138>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1e59      	subs	r1, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fd6:	e051      	b.n	800707c <HAL_I2C_Init+0x1dc>
 8006fd8:	2304      	movs	r3, #4
 8006fda:	e04f      	b.n	800707c <HAL_I2C_Init+0x1dc>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d111      	bne.n	8007008 <HAL_I2C_Init+0x168>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	1e58      	subs	r0, r3, #1
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	440b      	add	r3, r1
 8006ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	e012      	b.n	800702e <HAL_I2C_Init+0x18e>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1e58      	subs	r0, r3, #1
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	0099      	lsls	r1, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	fbb0 f3f3 	udiv	r3, r0, r3
 800701e:	3301      	adds	r3, #1
 8007020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf0c      	ite	eq
 8007028:	2301      	moveq	r3, #1
 800702a:	2300      	movne	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_I2C_Init+0x196>
 8007032:	2301      	movs	r3, #1
 8007034:	e022      	b.n	800707c <HAL_I2C_Init+0x1dc>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10e      	bne.n	800705c <HAL_I2C_Init+0x1bc>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	1e58      	subs	r0, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6859      	ldr	r1, [r3, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	440b      	add	r3, r1
 800704c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007050:	3301      	adds	r3, #1
 8007052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705a:	e00f      	b.n	800707c <HAL_I2C_Init+0x1dc>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1e58      	subs	r0, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6859      	ldr	r1, [r3, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	0099      	lsls	r1, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007072:	3301      	adds	r3, #1
 8007074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	6809      	ldr	r1, [r1, #0]
 8007080:	4313      	orrs	r3, r2
 8007082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80070aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6911      	ldr	r1, [r2, #16]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68d2      	ldr	r2, [r2, #12]
 80070b6:	4311      	orrs	r1, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	430b      	orrs	r3, r1
 80070be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695a      	ldr	r2, [r3, #20]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	000186a0 	.word	0x000186a0
 8007118:	001e847f 	.word	0x001e847f
 800711c:	003d08ff 	.word	0x003d08ff
 8007120:	431bde83 	.word	0x431bde83
 8007124:	10624dd3 	.word	0x10624dd3

08007128 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e021      	b.n	800717e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2224      	movs	r2, #36	@ 0x24
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0201 	bic.w	r2, r2, #1
 8007150:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fd fadc 	bl	8004710 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	461a      	mov	r2, r3
 8007194:	460b      	mov	r3, r1
 8007196:	817b      	strh	r3, [r7, #10]
 8007198:	4613      	mov	r3, r2
 800719a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800719c:	f7fe fa8a 	bl	80056b4 <HAL_GetTick>
 80071a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	f040 80e0 	bne.w	8007370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2319      	movs	r3, #25
 80071b6:	2201      	movs	r2, #1
 80071b8:	4970      	ldr	r1, [pc, #448]	@ (800737c <HAL_I2C_Master_Transmit+0x1f4>)
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fc7e 	bl	8007abc <I2C_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80071c6:	2302      	movs	r3, #2
 80071c8:	e0d3      	b.n	8007372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_I2C_Master_Transmit+0x50>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e0cc      	b.n	8007372 <HAL_I2C_Master_Transmit+0x1ea>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d007      	beq.n	80071fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800720c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2221      	movs	r2, #33	@ 0x21
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2210      	movs	r2, #16
 800721a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	893a      	ldrh	r2, [r7, #8]
 800722e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4a50      	ldr	r2, [pc, #320]	@ (8007380 <HAL_I2C_Master_Transmit+0x1f8>)
 800723e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007240:	8979      	ldrh	r1, [r7, #10]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 fae8 	bl	800781c <I2C_MasterRequestWrite>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e08d      	b.n	8007372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800726c:	e066      	b.n	800733c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	6a39      	ldr	r1, [r7, #32]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fd3c 	bl	8007cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007282:	2b04      	cmp	r3, #4
 8007284:	d107      	bne.n	8007296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e06b      	b.n	8007372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	781a      	ldrb	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d11b      	bne.n	8007310 <HAL_I2C_Master_Transmit+0x188>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d017      	beq.n	8007310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	781a      	ldrb	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	6a39      	ldr	r1, [r7, #32]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fd33 	bl	8007d80 <I2C_WaitOnBTFFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00d      	beq.n	800733c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007324:	2b04      	cmp	r3, #4
 8007326:	d107      	bne.n	8007338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e01a      	b.n	8007372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007340:	2b00      	cmp	r3, #0
 8007342:	d194      	bne.n	800726e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e000      	b.n	8007372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007370:	2302      	movs	r3, #2
  }
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	00100002 	.word	0x00100002
 8007380:	ffff0000 	.word	0xffff0000

08007384 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08c      	sub	sp, #48	@ 0x30
 8007388:	af02      	add	r7, sp, #8
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	607a      	str	r2, [r7, #4]
 800738e:	461a      	mov	r2, r3
 8007390:	460b      	mov	r3, r1
 8007392:	817b      	strh	r3, [r7, #10]
 8007394:	4613      	mov	r3, r2
 8007396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007398:	f7fe f98c 	bl	80056b4 <HAL_GetTick>
 800739c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	f040 8217 	bne.w	80077da <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2319      	movs	r3, #25
 80073b2:	2201      	movs	r2, #1
 80073b4:	497c      	ldr	r1, [pc, #496]	@ (80075a8 <HAL_I2C_Master_Receive+0x224>)
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 fb80 	bl	8007abc <I2C_WaitOnFlagUntilTimeout>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80073c2:	2302      	movs	r3, #2
 80073c4:	e20a      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_I2C_Master_Receive+0x50>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e203      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d007      	beq.n	80073fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2222      	movs	r2, #34	@ 0x22
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2210      	movs	r2, #16
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	893a      	ldrh	r2, [r7, #8]
 800742a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007430:	b29a      	uxth	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4a5c      	ldr	r2, [pc, #368]	@ (80075ac <HAL_I2C_Master_Receive+0x228>)
 800743a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800743c:	8979      	ldrh	r1, [r7, #10]
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 fa6c 	bl	8007920 <I2C_MasterRequestRead>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e1c4      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d113      	bne.n	8007482 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800745a:	2300      	movs	r3, #0
 800745c:	623b      	str	r3, [r7, #32]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	623b      	str	r3, [r7, #32]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	623b      	str	r3, [r7, #32]
 800746e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	e198      	b.n	80077b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007486:	2b01      	cmp	r3, #1
 8007488:	d11b      	bne.n	80074c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	61fb      	str	r3, [r7, #28]
 80074ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	e178      	b.n	80077b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d11b      	bne.n	8007502 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ea:	2300      	movs	r3, #0
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	e158      	b.n	80077b4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007528:	e144      	b.n	80077b4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800752e:	2b03      	cmp	r3, #3
 8007530:	f200 80f1 	bhi.w	8007716 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007538:	2b01      	cmp	r3, #1
 800753a:	d123      	bne.n	8007584 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800753c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fc65 	bl	8007e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e145      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007582:	e117      	b.n	80077b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007588:	2b02      	cmp	r3, #2
 800758a:	d14e      	bne.n	800762a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	2200      	movs	r2, #0
 8007594:	4906      	ldr	r1, [pc, #24]	@ (80075b0 <HAL_I2C_Master_Receive+0x22c>)
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 fa90 	bl	8007abc <I2C_WaitOnFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e11a      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
 80075a6:	bf00      	nop
 80075a8:	00100002 	.word	0x00100002
 80075ac:	ffff0000 	.word	0xffff0000
 80075b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691a      	ldr	r2, [r3, #16]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007628:	e0c4      	b.n	80077b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	2200      	movs	r2, #0
 8007632:	496c      	ldr	r1, [pc, #432]	@ (80077e4 <HAL_I2C_Master_Receive+0x460>)
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fa41 	bl	8007abc <I2C_WaitOnFlagUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e0cb      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691a      	ldr	r2, [r3, #16]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800767c:	b29b      	uxth	r3, r3
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	2200      	movs	r2, #0
 800768e:	4955      	ldr	r1, [pc, #340]	@ (80077e4 <HAL_I2C_Master_Receive+0x460>)
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fa13 	bl	8007abc <I2C_WaitOnFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e09d      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007714:	e04e      	b.n	80077b4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007718:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fb78 	bl	8007e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e058      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0304 	and.w	r3, r3, #4
 8007766:	2b04      	cmp	r3, #4
 8007768:	d124      	bne.n	80077b4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776e:	2b03      	cmp	r3, #3
 8007770:	d107      	bne.n	8007782 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007780:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f47f aeb6 	bne.w	800752a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	e000      	b.n	80077dc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80077da:	2302      	movs	r3, #2
  }
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3728      	adds	r7, #40	@ 0x28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	00010004 	.word	0x00010004

080077e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f6:	b2db      	uxtb	r3, r3
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	460b      	mov	r3, r1
 800782a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007830:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b08      	cmp	r3, #8
 8007836:	d006      	beq.n	8007846 <I2C_MasterRequestWrite+0x2a>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d003      	beq.n	8007846 <I2C_MasterRequestWrite+0x2a>
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007844:	d108      	bne.n	8007858 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	e00b      	b.n	8007870 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785c:	2b12      	cmp	r3, #18
 800785e:	d107      	bne.n	8007870 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800786e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 f91d 	bl	8007abc <I2C_WaitOnFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00d      	beq.n	80078a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007896:	d103      	bne.n	80078a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800789e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e035      	b.n	8007910 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078ac:	d108      	bne.n	80078c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078ae:	897b      	ldrh	r3, [r7, #10]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	461a      	mov	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80078bc:	611a      	str	r2, [r3, #16]
 80078be:	e01b      	b.n	80078f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80078c0:	897b      	ldrh	r3, [r7, #10]
 80078c2:	11db      	asrs	r3, r3, #7
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	f003 0306 	and.w	r3, r3, #6
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f063 030f 	orn	r3, r3, #15
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	490e      	ldr	r1, [pc, #56]	@ (8007918 <I2C_MasterRequestWrite+0xfc>)
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f966 	bl	8007bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e010      	b.n	8007910 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80078ee:	897b      	ldrh	r3, [r7, #10]
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	4907      	ldr	r1, [pc, #28]	@ (800791c <I2C_MasterRequestWrite+0x100>)
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f956 	bl	8007bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	00010008 	.word	0x00010008
 800791c:	00010002 	.word	0x00010002

08007920 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	460b      	mov	r3, r1
 800792e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007944:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b08      	cmp	r3, #8
 800794a:	d006      	beq.n	800795a <I2C_MasterRequestRead+0x3a>
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d003      	beq.n	800795a <I2C_MasterRequestRead+0x3a>
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007958:	d108      	bne.n	800796c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	e00b      	b.n	8007984 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007970:	2b11      	cmp	r3, #17
 8007972:	d107      	bne.n	8007984 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007982:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f893 	bl	8007abc <I2C_WaitOnFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00d      	beq.n	80079b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079aa:	d103      	bne.n	80079b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e079      	b.n	8007aac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079c0:	d108      	bne.n	80079d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079c2:	897b      	ldrh	r3, [r7, #10]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	611a      	str	r2, [r3, #16]
 80079d2:	e05f      	b.n	8007a94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80079d4:	897b      	ldrh	r3, [r7, #10]
 80079d6:	11db      	asrs	r3, r3, #7
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	f003 0306 	and.w	r3, r3, #6
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f063 030f 	orn	r3, r3, #15
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	4930      	ldr	r1, [pc, #192]	@ (8007ab4 <I2C_MasterRequestRead+0x194>)
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f8dc 	bl	8007bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e054      	b.n	8007aac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007a02:	897b      	ldrh	r3, [r7, #10]
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	4929      	ldr	r1, [pc, #164]	@ (8007ab8 <I2C_MasterRequestRead+0x198>)
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f8cc 	bl	8007bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e044      	b.n	8007aac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a22:	2300      	movs	r3, #0
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f831 	bl	8007abc <I2C_WaitOnFlagUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00d      	beq.n	8007a7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a6e:	d103      	bne.n	8007a78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a76:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e017      	b.n	8007aac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007a7c:	897b      	ldrh	r3, [r7, #10]
 8007a7e:	11db      	asrs	r3, r3, #7
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	f003 0306 	and.w	r3, r3, #6
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f063 030e 	orn	r3, r3, #14
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4907      	ldr	r1, [pc, #28]	@ (8007ab8 <I2C_MasterRequestRead+0x198>)
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f888 	bl	8007bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	00010008 	.word	0x00010008
 8007ab8:	00010002 	.word	0x00010002

08007abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007acc:	e048      	b.n	8007b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d044      	beq.n	8007b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ad6:	f7fd fded 	bl	80056b4 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d302      	bcc.n	8007aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d139      	bne.n	8007b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d10d      	bne.n	8007b12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	43da      	mvns	r2, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	4013      	ands	r3, r2
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	e00c      	b.n	8007b2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	43da      	mvns	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bf0c      	ite	eq
 8007b24:	2301      	moveq	r3, #1
 8007b26:	2300      	movne	r3, #0
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d116      	bne.n	8007b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4c:	f043 0220 	orr.w	r2, r3, #32
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e023      	b.n	8007ba8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	0c1b      	lsrs	r3, r3, #16
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d10d      	bne.n	8007b86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	43da      	mvns	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	4013      	ands	r3, r2
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bf0c      	ite	eq
 8007b7c:	2301      	moveq	r3, #1
 8007b7e:	2300      	movne	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	e00c      	b.n	8007ba0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	43da      	mvns	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	4013      	ands	r3, r2
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bf0c      	ite	eq
 8007b98:	2301      	moveq	r3, #1
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d093      	beq.n	8007ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bbe:	e071      	b.n	8007ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bce:	d123      	bne.n	8007c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	f043 0204 	orr.w	r2, r3, #4
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e067      	b.n	8007ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d041      	beq.n	8007ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c20:	f7fd fd48 	bl	80056b4 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d302      	bcc.n	8007c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d136      	bne.n	8007ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	0c1b      	lsrs	r3, r3, #16
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10c      	bne.n	8007c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	43da      	mvns	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	e00b      	b.n	8007c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	43da      	mvns	r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	4013      	ands	r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bf14      	ite	ne
 8007c6c:	2301      	movne	r3, #1
 8007c6e:	2300      	moveq	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d016      	beq.n	8007ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e021      	b.n	8007ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d10c      	bne.n	8007cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	43da      	mvns	r2, r3
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bf14      	ite	ne
 8007cc0:	2301      	movne	r3, #1
 8007cc2:	2300      	moveq	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	e00b      	b.n	8007ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	43da      	mvns	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bf14      	ite	ne
 8007cda:	2301      	movne	r3, #1
 8007cdc:	2300      	moveq	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f47f af6d 	bne.w	8007bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cfc:	e034      	b.n	8007d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f8e3 	bl	8007eca <I2C_IsAcknowledgeFailed>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e034      	b.n	8007d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d14:	d028      	beq.n	8007d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d16:	f7fd fccd 	bl	80056b4 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d302      	bcc.n	8007d2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d11d      	bne.n	8007d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d36:	2b80      	cmp	r3, #128	@ 0x80
 8007d38:	d016      	beq.n	8007d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d54:	f043 0220 	orr.w	r2, r3, #32
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e007      	b.n	8007d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d72:	2b80      	cmp	r3, #128	@ 0x80
 8007d74:	d1c3      	bne.n	8007cfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d8c:	e034      	b.n	8007df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f89b 	bl	8007eca <I2C_IsAcknowledgeFailed>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e034      	b.n	8007e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d028      	beq.n	8007df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da6:	f7fd fc85 	bl	80056b4 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d302      	bcc.n	8007dbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d11d      	bne.n	8007df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d016      	beq.n	8007df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de4:	f043 0220 	orr.w	r2, r3, #32
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e007      	b.n	8007e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d1c3      	bne.n	8007d8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e1c:	e049      	b.n	8007eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b10      	cmp	r3, #16
 8007e2a:	d119      	bne.n	8007e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0210 	mvn.w	r2, #16
 8007e34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e030      	b.n	8007ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e60:	f7fd fc28 	bl	80056b4 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d302      	bcc.n	8007e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d11d      	bne.n	8007eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e80:	2b40      	cmp	r3, #64	@ 0x40
 8007e82:	d016      	beq.n	8007eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	f043 0220 	orr.w	r2, r3, #32
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e007      	b.n	8007ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ebc:	2b40      	cmp	r3, #64	@ 0x40
 8007ebe:	d1ae      	bne.n	8007e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee0:	d11b      	bne.n	8007f1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007eea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	f043 0204 	orr.w	r2, r3, #4
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e267      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d075      	beq.n	8008032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f46:	4b88      	ldr	r3, [pc, #544]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 030c 	and.w	r3, r3, #12
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d00c      	beq.n	8007f6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f52:	4b85      	ldr	r3, [pc, #532]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d112      	bne.n	8007f84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f5e:	4b82      	ldr	r3, [pc, #520]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f6a:	d10b      	bne.n	8007f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d05b      	beq.n	8008030 <HAL_RCC_OscConfig+0x108>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d157      	bne.n	8008030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e242      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f8c:	d106      	bne.n	8007f9c <HAL_RCC_OscConfig+0x74>
 8007f8e:	4b76      	ldr	r3, [pc, #472]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a75      	ldr	r2, [pc, #468]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	e01d      	b.n	8007fd8 <HAL_RCC_OscConfig+0xb0>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fa4:	d10c      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x98>
 8007fa6:	4b70      	ldr	r3, [pc, #448]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a6f      	ldr	r2, [pc, #444]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	e00b      	b.n	8007fd8 <HAL_RCC_OscConfig+0xb0>
 8007fc0:	4b69      	ldr	r3, [pc, #420]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a68      	ldr	r2, [pc, #416]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	4b66      	ldr	r3, [pc, #408]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a65      	ldr	r2, [pc, #404]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d013      	beq.n	8008008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe0:	f7fd fb68 	bl	80056b4 <HAL_GetTick>
 8007fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fe8:	f7fd fb64 	bl	80056b4 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b64      	cmp	r3, #100	@ 0x64
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e207      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f0      	beq.n	8007fe8 <HAL_RCC_OscConfig+0xc0>
 8008006:	e014      	b.n	8008032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008008:	f7fd fb54 	bl	80056b4 <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008010:	f7fd fb50 	bl	80056b4 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b64      	cmp	r3, #100	@ 0x64
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e1f3      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008022:	4b51      	ldr	r3, [pc, #324]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1f0      	bne.n	8008010 <HAL_RCC_OscConfig+0xe8>
 800802e:	e000      	b.n	8008032 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d063      	beq.n	8008106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800803e:	4b4a      	ldr	r3, [pc, #296]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00b      	beq.n	8008062 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800804a:	4b47      	ldr	r3, [pc, #284]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008052:	2b08      	cmp	r3, #8
 8008054:	d11c      	bne.n	8008090 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008056:	4b44      	ldr	r3, [pc, #272]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d116      	bne.n	8008090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008062:	4b41      	ldr	r3, [pc, #260]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d005      	beq.n	800807a <HAL_RCC_OscConfig+0x152>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d001      	beq.n	800807a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e1c7      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800807a:	4b3b      	ldr	r3, [pc, #236]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	4937      	ldr	r1, [pc, #220]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 800808a:	4313      	orrs	r3, r2
 800808c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800808e:	e03a      	b.n	8008106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d020      	beq.n	80080da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008098:	4b34      	ldr	r3, [pc, #208]	@ (800816c <HAL_RCC_OscConfig+0x244>)
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809e:	f7fd fb09 	bl	80056b4 <HAL_GetTick>
 80080a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a4:	e008      	b.n	80080b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080a6:	f7fd fb05 	bl	80056b4 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e1a8      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0f0      	beq.n	80080a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c4:	4b28      	ldr	r3, [pc, #160]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	4925      	ldr	r1, [pc, #148]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	600b      	str	r3, [r1, #0]
 80080d8:	e015      	b.n	8008106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080da:	4b24      	ldr	r3, [pc, #144]	@ (800816c <HAL_RCC_OscConfig+0x244>)
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e0:	f7fd fae8 	bl	80056b4 <HAL_GetTick>
 80080e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080e8:	f7fd fae4 	bl	80056b4 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e187      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f0      	bne.n	80080e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0308 	and.w	r3, r3, #8
 800810e:	2b00      	cmp	r3, #0
 8008110:	d036      	beq.n	8008180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d016      	beq.n	8008148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800811a:	4b15      	ldr	r3, [pc, #84]	@ (8008170 <HAL_RCC_OscConfig+0x248>)
 800811c:	2201      	movs	r2, #1
 800811e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008120:	f7fd fac8 	bl	80056b4 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008128:	f7fd fac4 	bl	80056b4 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e167      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800813a:	4b0b      	ldr	r3, [pc, #44]	@ (8008168 <HAL_RCC_OscConfig+0x240>)
 800813c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0f0      	beq.n	8008128 <HAL_RCC_OscConfig+0x200>
 8008146:	e01b      	b.n	8008180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008148:	4b09      	ldr	r3, [pc, #36]	@ (8008170 <HAL_RCC_OscConfig+0x248>)
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800814e:	f7fd fab1 	bl	80056b4 <HAL_GetTick>
 8008152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008154:	e00e      	b.n	8008174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008156:	f7fd faad 	bl	80056b4 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d907      	bls.n	8008174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e150      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
 8008168:	40023800 	.word	0x40023800
 800816c:	42470000 	.word	0x42470000
 8008170:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008174:	4b88      	ldr	r3, [pc, #544]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1ea      	bne.n	8008156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8097 	beq.w	80082bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800818e:	2300      	movs	r3, #0
 8008190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008192:	4b81      	ldr	r3, [pc, #516]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10f      	bne.n	80081be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	4b7d      	ldr	r3, [pc, #500]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 80081a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a6:	4a7c      	ldr	r2, [pc, #496]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 80081a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80081ae:	4b7a      	ldr	r3, [pc, #488]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 80081b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081b6:	60bb      	str	r3, [r7, #8]
 80081b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081ba:	2301      	movs	r3, #1
 80081bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081be:	4b77      	ldr	r3, [pc, #476]	@ (800839c <HAL_RCC_OscConfig+0x474>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d118      	bne.n	80081fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081ca:	4b74      	ldr	r3, [pc, #464]	@ (800839c <HAL_RCC_OscConfig+0x474>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a73      	ldr	r2, [pc, #460]	@ (800839c <HAL_RCC_OscConfig+0x474>)
 80081d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081d6:	f7fd fa6d 	bl	80056b4 <HAL_GetTick>
 80081da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081dc:	e008      	b.n	80081f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081de:	f7fd fa69 	bl	80056b4 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e10c      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081f0:	4b6a      	ldr	r3, [pc, #424]	@ (800839c <HAL_RCC_OscConfig+0x474>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0f0      	beq.n	80081de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d106      	bne.n	8008212 <HAL_RCC_OscConfig+0x2ea>
 8008204:	4b64      	ldr	r3, [pc, #400]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008208:	4a63      	ldr	r2, [pc, #396]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 800820a:	f043 0301 	orr.w	r3, r3, #1
 800820e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008210:	e01c      	b.n	800824c <HAL_RCC_OscConfig+0x324>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b05      	cmp	r3, #5
 8008218:	d10c      	bne.n	8008234 <HAL_RCC_OscConfig+0x30c>
 800821a:	4b5f      	ldr	r3, [pc, #380]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 800821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821e:	4a5e      	ldr	r2, [pc, #376]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008220:	f043 0304 	orr.w	r3, r3, #4
 8008224:	6713      	str	r3, [r2, #112]	@ 0x70
 8008226:	4b5c      	ldr	r3, [pc, #368]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822a:	4a5b      	ldr	r2, [pc, #364]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 800822c:	f043 0301 	orr.w	r3, r3, #1
 8008230:	6713      	str	r3, [r2, #112]	@ 0x70
 8008232:	e00b      	b.n	800824c <HAL_RCC_OscConfig+0x324>
 8008234:	4b58      	ldr	r3, [pc, #352]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008238:	4a57      	ldr	r2, [pc, #348]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 800823a:	f023 0301 	bic.w	r3, r3, #1
 800823e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008240:	4b55      	ldr	r3, [pc, #340]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008244:	4a54      	ldr	r2, [pc, #336]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008246:	f023 0304 	bic.w	r3, r3, #4
 800824a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d015      	beq.n	8008280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008254:	f7fd fa2e 	bl	80056b4 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800825a:	e00a      	b.n	8008272 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800825c:	f7fd fa2a 	bl	80056b4 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800826a:	4293      	cmp	r3, r2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e0cb      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008272:	4b49      	ldr	r3, [pc, #292]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0ee      	beq.n	800825c <HAL_RCC_OscConfig+0x334>
 800827e:	e014      	b.n	80082aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008280:	f7fd fa18 	bl	80056b4 <HAL_GetTick>
 8008284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008286:	e00a      	b.n	800829e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008288:	f7fd fa14 	bl	80056b4 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008296:	4293      	cmp	r3, r2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e0b5      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800829e:	4b3e      	ldr	r3, [pc, #248]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 80082a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1ee      	bne.n	8008288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d105      	bne.n	80082bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082b0:	4b39      	ldr	r3, [pc, #228]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 80082b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b4:	4a38      	ldr	r2, [pc, #224]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 80082b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80a1 	beq.w	8008408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082c6:	4b34      	ldr	r3, [pc, #208]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 030c 	and.w	r3, r3, #12
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d05c      	beq.n	800838c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d141      	bne.n	800835e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082da:	4b31      	ldr	r3, [pc, #196]	@ (80083a0 <HAL_RCC_OscConfig+0x478>)
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e0:	f7fd f9e8 	bl	80056b4 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082e8:	f7fd f9e4 	bl	80056b4 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e087      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082fa:	4b27      	ldr	r3, [pc, #156]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1f0      	bne.n	80082e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	69da      	ldr	r2, [r3, #28]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008314:	019b      	lsls	r3, r3, #6
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	3b01      	subs	r3, #1
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	431a      	orrs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	061b      	lsls	r3, r3, #24
 800832a:	491b      	ldr	r1, [pc, #108]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 800832c:	4313      	orrs	r3, r2
 800832e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008330:	4b1b      	ldr	r3, [pc, #108]	@ (80083a0 <HAL_RCC_OscConfig+0x478>)
 8008332:	2201      	movs	r2, #1
 8008334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008336:	f7fd f9bd 	bl	80056b4 <HAL_GetTick>
 800833a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800833c:	e008      	b.n	8008350 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800833e:	f7fd f9b9 	bl	80056b4 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e05c      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008350:	4b11      	ldr	r3, [pc, #68]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0f0      	beq.n	800833e <HAL_RCC_OscConfig+0x416>
 800835c:	e054      	b.n	8008408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835e:	4b10      	ldr	r3, [pc, #64]	@ (80083a0 <HAL_RCC_OscConfig+0x478>)
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008364:	f7fd f9a6 	bl	80056b4 <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800836c:	f7fd f9a2 	bl	80056b4 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e045      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800837e:	4b06      	ldr	r3, [pc, #24]	@ (8008398 <HAL_RCC_OscConfig+0x470>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f0      	bne.n	800836c <HAL_RCC_OscConfig+0x444>
 800838a:	e03d      	b.n	8008408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d107      	bne.n	80083a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e038      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
 8008398:	40023800 	.word	0x40023800
 800839c:	40007000 	.word	0x40007000
 80083a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008414 <HAL_RCC_OscConfig+0x4ec>)
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d028      	beq.n	8008404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083bc:	429a      	cmp	r2, r3
 80083be:	d121      	bne.n	8008404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d11a      	bne.n	8008404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80083d4:	4013      	ands	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80083da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083dc:	4293      	cmp	r3, r2
 80083de:	d111      	bne.n	8008404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	085b      	lsrs	r3, r3, #1
 80083ec:	3b01      	subs	r3, #1
 80083ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d107      	bne.n	8008404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008400:	429a      	cmp	r2, r3
 8008402:	d001      	beq.n	8008408 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e000      	b.n	800840a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	40023800 	.word	0x40023800

08008418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e0cc      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800842c:	4b68      	ldr	r3, [pc, #416]	@ (80085d0 <HAL_RCC_ClockConfig+0x1b8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0307 	and.w	r3, r3, #7
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d90c      	bls.n	8008454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800843a:	4b65      	ldr	r3, [pc, #404]	@ (80085d0 <HAL_RCC_ClockConfig+0x1b8>)
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008442:	4b63      	ldr	r3, [pc, #396]	@ (80085d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d001      	beq.n	8008454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e0b8      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d020      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800846c:	4b59      	ldr	r3, [pc, #356]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	4a58      	ldr	r2, [pc, #352]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008484:	4b53      	ldr	r3, [pc, #332]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	4a52      	ldr	r2, [pc, #328]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 800848a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800848e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008490:	4b50      	ldr	r3, [pc, #320]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	494d      	ldr	r1, [pc, #308]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d044      	beq.n	8008538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d107      	bne.n	80084c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b6:	4b47      	ldr	r3, [pc, #284]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d119      	bne.n	80084f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e07f      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d003      	beq.n	80084d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d107      	bne.n	80084e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084d6:	4b3f      	ldr	r3, [pc, #252]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d109      	bne.n	80084f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e06f      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084e6:	4b3b      	ldr	r3, [pc, #236]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e067      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084f6:	4b37      	ldr	r3, [pc, #220]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f023 0203 	bic.w	r2, r3, #3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	4934      	ldr	r1, [pc, #208]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	4313      	orrs	r3, r2
 8008506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008508:	f7fd f8d4 	bl	80056b4 <HAL_GetTick>
 800850c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800850e:	e00a      	b.n	8008526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008510:	f7fd f8d0 	bl	80056b4 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800851e:	4293      	cmp	r3, r2
 8008520:	d901      	bls.n	8008526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e04f      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008526:	4b2b      	ldr	r3, [pc, #172]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 020c 	and.w	r2, r3, #12
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	429a      	cmp	r2, r3
 8008536:	d1eb      	bne.n	8008510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008538:	4b25      	ldr	r3, [pc, #148]	@ (80085d0 <HAL_RCC_ClockConfig+0x1b8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0307 	and.w	r3, r3, #7
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	429a      	cmp	r2, r3
 8008544:	d20c      	bcs.n	8008560 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008546:	4b22      	ldr	r3, [pc, #136]	@ (80085d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	b2d2      	uxtb	r2, r2
 800854c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800854e:	4b20      	ldr	r3, [pc, #128]	@ (80085d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d001      	beq.n	8008560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e032      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d008      	beq.n	800857e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800856c:	4b19      	ldr	r3, [pc, #100]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	4916      	ldr	r1, [pc, #88]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 800857a:	4313      	orrs	r3, r2
 800857c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800858a:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	490e      	ldr	r1, [pc, #56]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 800859a:	4313      	orrs	r3, r2
 800859c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800859e:	f000 f821 	bl	80085e4 <HAL_RCC_GetSysClockFreq>
 80085a2:	4602      	mov	r2, r0
 80085a4:	4b0b      	ldr	r3, [pc, #44]	@ (80085d4 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	091b      	lsrs	r3, r3, #4
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	490a      	ldr	r1, [pc, #40]	@ (80085d8 <HAL_RCC_ClockConfig+0x1c0>)
 80085b0:	5ccb      	ldrb	r3, [r1, r3]
 80085b2:	fa22 f303 	lsr.w	r3, r2, r3
 80085b6:	4a09      	ldr	r2, [pc, #36]	@ (80085dc <HAL_RCC_ClockConfig+0x1c4>)
 80085b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80085ba:	4b09      	ldr	r3, [pc, #36]	@ (80085e0 <HAL_RCC_ClockConfig+0x1c8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fd f834 	bl	800562c <HAL_InitTick>

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40023c00 	.word	0x40023c00
 80085d4:	40023800 	.word	0x40023800
 80085d8:	0800fa6c 	.word	0x0800fa6c
 80085dc:	20000078 	.word	0x20000078
 80085e0:	2000007c 	.word	0x2000007c

080085e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085e8:	b094      	sub	sp, #80	@ 0x50
 80085ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085fc:	4b79      	ldr	r3, [pc, #484]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f003 030c 	and.w	r3, r3, #12
 8008604:	2b08      	cmp	r3, #8
 8008606:	d00d      	beq.n	8008624 <HAL_RCC_GetSysClockFreq+0x40>
 8008608:	2b08      	cmp	r3, #8
 800860a:	f200 80e1 	bhi.w	80087d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <HAL_RCC_GetSysClockFreq+0x34>
 8008612:	2b04      	cmp	r3, #4
 8008614:	d003      	beq.n	800861e <HAL_RCC_GetSysClockFreq+0x3a>
 8008616:	e0db      	b.n	80087d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008618:	4b73      	ldr	r3, [pc, #460]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800861a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800861c:	e0db      	b.n	80087d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800861e:	4b73      	ldr	r3, [pc, #460]	@ (80087ec <HAL_RCC_GetSysClockFreq+0x208>)
 8008620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008622:	e0d8      	b.n	80087d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008624:	4b6f      	ldr	r3, [pc, #444]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800862c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800862e:	4b6d      	ldr	r3, [pc, #436]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d063      	beq.n	8008702 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800863a:	4b6a      	ldr	r3, [pc, #424]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	099b      	lsrs	r3, r3, #6
 8008640:	2200      	movs	r2, #0
 8008642:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008644:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864c:	633b      	str	r3, [r7, #48]	@ 0x30
 800864e:	2300      	movs	r3, #0
 8008650:	637b      	str	r3, [r7, #52]	@ 0x34
 8008652:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008656:	4622      	mov	r2, r4
 8008658:	462b      	mov	r3, r5
 800865a:	f04f 0000 	mov.w	r0, #0
 800865e:	f04f 0100 	mov.w	r1, #0
 8008662:	0159      	lsls	r1, r3, #5
 8008664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008668:	0150      	lsls	r0, r2, #5
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4621      	mov	r1, r4
 8008670:	1a51      	subs	r1, r2, r1
 8008672:	6139      	str	r1, [r7, #16]
 8008674:	4629      	mov	r1, r5
 8008676:	eb63 0301 	sbc.w	r3, r3, r1
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	f04f 0200 	mov.w	r2, #0
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008688:	4659      	mov	r1, fp
 800868a:	018b      	lsls	r3, r1, #6
 800868c:	4651      	mov	r1, sl
 800868e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008692:	4651      	mov	r1, sl
 8008694:	018a      	lsls	r2, r1, #6
 8008696:	4651      	mov	r1, sl
 8008698:	ebb2 0801 	subs.w	r8, r2, r1
 800869c:	4659      	mov	r1, fp
 800869e:	eb63 0901 	sbc.w	r9, r3, r1
 80086a2:	f04f 0200 	mov.w	r2, #0
 80086a6:	f04f 0300 	mov.w	r3, #0
 80086aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086b6:	4690      	mov	r8, r2
 80086b8:	4699      	mov	r9, r3
 80086ba:	4623      	mov	r3, r4
 80086bc:	eb18 0303 	adds.w	r3, r8, r3
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	462b      	mov	r3, r5
 80086c4:	eb49 0303 	adc.w	r3, r9, r3
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	f04f 0300 	mov.w	r3, #0
 80086d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80086d6:	4629      	mov	r1, r5
 80086d8:	024b      	lsls	r3, r1, #9
 80086da:	4621      	mov	r1, r4
 80086dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80086e0:	4621      	mov	r1, r4
 80086e2:	024a      	lsls	r2, r1, #9
 80086e4:	4610      	mov	r0, r2
 80086e6:	4619      	mov	r1, r3
 80086e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ea:	2200      	movs	r2, #0
 80086ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086f4:	f7f8 fac8 	bl	8000c88 <__aeabi_uldivmod>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4613      	mov	r3, r2
 80086fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008700:	e058      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008702:	4b38      	ldr	r3, [pc, #224]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	099b      	lsrs	r3, r3, #6
 8008708:	2200      	movs	r2, #0
 800870a:	4618      	mov	r0, r3
 800870c:	4611      	mov	r1, r2
 800870e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008712:	623b      	str	r3, [r7, #32]
 8008714:	2300      	movs	r3, #0
 8008716:	627b      	str	r3, [r7, #36]	@ 0x24
 8008718:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800871c:	4642      	mov	r2, r8
 800871e:	464b      	mov	r3, r9
 8008720:	f04f 0000 	mov.w	r0, #0
 8008724:	f04f 0100 	mov.w	r1, #0
 8008728:	0159      	lsls	r1, r3, #5
 800872a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800872e:	0150      	lsls	r0, r2, #5
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4641      	mov	r1, r8
 8008736:	ebb2 0a01 	subs.w	sl, r2, r1
 800873a:	4649      	mov	r1, r9
 800873c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	f04f 0300 	mov.w	r3, #0
 8008748:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800874c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008750:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008754:	ebb2 040a 	subs.w	r4, r2, sl
 8008758:	eb63 050b 	sbc.w	r5, r3, fp
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	00eb      	lsls	r3, r5, #3
 8008766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800876a:	00e2      	lsls	r2, r4, #3
 800876c:	4614      	mov	r4, r2
 800876e:	461d      	mov	r5, r3
 8008770:	4643      	mov	r3, r8
 8008772:	18e3      	adds	r3, r4, r3
 8008774:	603b      	str	r3, [r7, #0]
 8008776:	464b      	mov	r3, r9
 8008778:	eb45 0303 	adc.w	r3, r5, r3
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	f04f 0300 	mov.w	r3, #0
 8008786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800878a:	4629      	mov	r1, r5
 800878c:	028b      	lsls	r3, r1, #10
 800878e:	4621      	mov	r1, r4
 8008790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008794:	4621      	mov	r1, r4
 8008796:	028a      	lsls	r2, r1, #10
 8008798:	4610      	mov	r0, r2
 800879a:	4619      	mov	r1, r3
 800879c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800879e:	2200      	movs	r2, #0
 80087a0:	61bb      	str	r3, [r7, #24]
 80087a2:	61fa      	str	r2, [r7, #28]
 80087a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087a8:	f7f8 fa6e 	bl	8000c88 <__aeabi_uldivmod>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4613      	mov	r3, r2
 80087b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80087b4:	4b0b      	ldr	r3, [pc, #44]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	0c1b      	lsrs	r3, r3, #16
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	3301      	adds	r3, #1
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80087c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087ce:	e002      	b.n	80087d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087d0:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80087d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3750      	adds	r7, #80	@ 0x50
 80087dc:	46bd      	mov	sp, r7
 80087de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087e2:	bf00      	nop
 80087e4:	40023800 	.word	0x40023800
 80087e8:	00f42400 	.word	0x00f42400
 80087ec:	007a1200 	.word	0x007a1200

080087f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087f4:	4b03      	ldr	r3, [pc, #12]	@ (8008804 <HAL_RCC_GetHCLKFreq+0x14>)
 80087f6:	681b      	ldr	r3, [r3, #0]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20000078 	.word	0x20000078

08008808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800880c:	f7ff fff0 	bl	80087f0 <HAL_RCC_GetHCLKFreq>
 8008810:	4602      	mov	r2, r0
 8008812:	4b05      	ldr	r3, [pc, #20]	@ (8008828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	0a9b      	lsrs	r3, r3, #10
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	4903      	ldr	r1, [pc, #12]	@ (800882c <HAL_RCC_GetPCLK1Freq+0x24>)
 800881e:	5ccb      	ldrb	r3, [r1, r3]
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008824:	4618      	mov	r0, r3
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40023800 	.word	0x40023800
 800882c:	0800fa7c 	.word	0x0800fa7c

08008830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008834:	f7ff ffdc 	bl	80087f0 <HAL_RCC_GetHCLKFreq>
 8008838:	4602      	mov	r2, r0
 800883a:	4b05      	ldr	r3, [pc, #20]	@ (8008850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	0b5b      	lsrs	r3, r3, #13
 8008840:	f003 0307 	and.w	r3, r3, #7
 8008844:	4903      	ldr	r1, [pc, #12]	@ (8008854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008846:	5ccb      	ldrb	r3, [r1, r3]
 8008848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800884c:	4618      	mov	r0, r3
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40023800 	.word	0x40023800
 8008854:	0800fa7c 	.word	0x0800fa7c

08008858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e041      	b.n	80088ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fc f8e0 	bl	8004a44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3304      	adds	r3, #4
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f000 fc24 	bl	80090e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d109      	bne.n	800891c <HAL_TIM_PWM_Start+0x24>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b01      	cmp	r3, #1
 8008912:	bf14      	ite	ne
 8008914:	2301      	movne	r3, #1
 8008916:	2300      	moveq	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	e022      	b.n	8008962 <HAL_TIM_PWM_Start+0x6a>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b04      	cmp	r3, #4
 8008920:	d109      	bne.n	8008936 <HAL_TIM_PWM_Start+0x3e>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b01      	cmp	r3, #1
 800892c:	bf14      	ite	ne
 800892e:	2301      	movne	r3, #1
 8008930:	2300      	moveq	r3, #0
 8008932:	b2db      	uxtb	r3, r3
 8008934:	e015      	b.n	8008962 <HAL_TIM_PWM_Start+0x6a>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b08      	cmp	r3, #8
 800893a:	d109      	bne.n	8008950 <HAL_TIM_PWM_Start+0x58>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	bf14      	ite	ne
 8008948:	2301      	movne	r3, #1
 800894a:	2300      	moveq	r3, #0
 800894c:	b2db      	uxtb	r3, r3
 800894e:	e008      	b.n	8008962 <HAL_TIM_PWM_Start+0x6a>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b01      	cmp	r3, #1
 800895a:	bf14      	ite	ne
 800895c:	2301      	movne	r3, #1
 800895e:	2300      	moveq	r3, #0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e07c      	b.n	8008a64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <HAL_TIM_PWM_Start+0x82>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008978:	e013      	b.n	80089a2 <HAL_TIM_PWM_Start+0xaa>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b04      	cmp	r3, #4
 800897e:	d104      	bne.n	800898a <HAL_TIM_PWM_Start+0x92>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008988:	e00b      	b.n	80089a2 <HAL_TIM_PWM_Start+0xaa>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b08      	cmp	r3, #8
 800898e:	d104      	bne.n	800899a <HAL_TIM_PWM_Start+0xa2>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008998:	e003      	b.n	80089a2 <HAL_TIM_PWM_Start+0xaa>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2202      	movs	r2, #2
 800899e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2201      	movs	r2, #1
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fdf6 	bl	800959c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a2d      	ldr	r2, [pc, #180]	@ (8008a6c <HAL_TIM_PWM_Start+0x174>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d004      	beq.n	80089c4 <HAL_TIM_PWM_Start+0xcc>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a2c      	ldr	r2, [pc, #176]	@ (8008a70 <HAL_TIM_PWM_Start+0x178>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d101      	bne.n	80089c8 <HAL_TIM_PWM_Start+0xd0>
 80089c4:	2301      	movs	r3, #1
 80089c6:	e000      	b.n	80089ca <HAL_TIM_PWM_Start+0xd2>
 80089c8:	2300      	movs	r3, #0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a22      	ldr	r2, [pc, #136]	@ (8008a6c <HAL_TIM_PWM_Start+0x174>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d022      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x136>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f0:	d01d      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x136>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a74 <HAL_TIM_PWM_Start+0x17c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d018      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x136>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a1d      	ldr	r2, [pc, #116]	@ (8008a78 <HAL_TIM_PWM_Start+0x180>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d013      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x136>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008a7c <HAL_TIM_PWM_Start+0x184>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d00e      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x136>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a16      	ldr	r2, [pc, #88]	@ (8008a70 <HAL_TIM_PWM_Start+0x178>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d009      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x136>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a18      	ldr	r2, [pc, #96]	@ (8008a80 <HAL_TIM_PWM_Start+0x188>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d004      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x136>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a16      	ldr	r2, [pc, #88]	@ (8008a84 <HAL_TIM_PWM_Start+0x18c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d111      	bne.n	8008a52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b06      	cmp	r3, #6
 8008a3e:	d010      	beq.n	8008a62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0201 	orr.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a50:	e007      	b.n	8008a62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0201 	orr.w	r2, r2, #1
 8008a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	40010000 	.word	0x40010000
 8008a70:	40010400 	.word	0x40010400
 8008a74:	40000400 	.word	0x40000400
 8008a78:	40000800 	.word	0x40000800
 8008a7c:	40000c00 	.word	0x40000c00
 8008a80:	40014000 	.word	0x40014000
 8008a84:	40001800 	.word	0x40001800

08008a88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e097      	b.n	8008bcc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7fb fe4f 	bl	8004754 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6812      	ldr	r2, [r2, #0]
 8008ac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008acc:	f023 0307 	bic.w	r3, r3, #7
 8008ad0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f000 fb01 	bl	80090e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	021b      	lsls	r3, r3, #8
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008b28:	f023 030c 	bic.w	r3, r3, #12
 8008b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	4313      	orrs	r3, r2
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	011a      	lsls	r2, r3, #4
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	031b      	lsls	r3, r3, #12
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008b66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008b6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008be4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008bec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bf4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008bfc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d110      	bne.n	8008c26 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d102      	bne.n	8008c10 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c0a:	7b7b      	ldrb	r3, [r7, #13]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d001      	beq.n	8008c14 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e089      	b.n	8008d28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c24:	e031      	b.n	8008c8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d110      	bne.n	8008c4e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d102      	bne.n	8008c38 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c32:	7b3b      	ldrb	r3, [r7, #12]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d001      	beq.n	8008c3c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e075      	b.n	8008d28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c4c:	e01d      	b.n	8008c8a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d108      	bne.n	8008c66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d105      	bne.n	8008c66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c5a:	7b7b      	ldrb	r3, [r7, #13]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d102      	bne.n	8008c66 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c60:	7b3b      	ldrb	r3, [r7, #12]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d001      	beq.n	8008c6a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e05e      	b.n	8008d28 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d010      	beq.n	8008cb8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008c96:	e01f      	b.n	8008cd8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fc7b 	bl	800959c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0202 	orr.w	r2, r2, #2
 8008cb4:	60da      	str	r2, [r3, #12]
      break;
 8008cb6:	e02e      	b.n	8008d16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	2104      	movs	r1, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fc6b 	bl	800959c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f042 0204 	orr.w	r2, r2, #4
 8008cd4:	60da      	str	r2, [r3, #12]
      break;
 8008cd6:	e01e      	b.n	8008d16 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fc5b 	bl	800959c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2201      	movs	r2, #1
 8008cec:	2104      	movs	r1, #4
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fc54 	bl	800959c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0202 	orr.w	r2, r2, #2
 8008d02:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0204 	orr.w	r2, r2, #4
 8008d12:	60da      	str	r2, [r3, #12]
      break;
 8008d14:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f042 0201 	orr.w	r2, r2, #1
 8008d24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d020      	beq.n	8008d94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01b      	beq.n	8008d94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f06f 0202 	mvn.w	r2, #2
 8008d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7fa fadf 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8008d80:	e005      	b.n	8008d8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f990 	bl	80090a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f997 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d020      	beq.n	8008de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01b      	beq.n	8008de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0204 	mvn.w	r2, #4
 8008db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2202      	movs	r2, #2
 8008db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7fa fab9 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8008dcc:	e005      	b.n	8008dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f96a 	bl	80090a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f971 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d020      	beq.n	8008e2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f003 0308 	and.w	r3, r3, #8
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01b      	beq.n	8008e2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f06f 0208 	mvn.w	r2, #8
 8008dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2204      	movs	r2, #4
 8008e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7fa fa93 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8008e18:	e005      	b.n	8008e26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f944 	bl	80090a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f94b 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d020      	beq.n	8008e78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f003 0310 	and.w	r3, r3, #16
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01b      	beq.n	8008e78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0210 	mvn.w	r2, #16
 8008e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2208      	movs	r2, #8
 8008e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7fa fa6d 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f91e 	bl	80090a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f925 	bl	80090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00c      	beq.n	8008e9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d007      	beq.n	8008e9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0201 	mvn.w	r2, #1
 8008e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f8fc 	bl	8009094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00c      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fc1a 	bl	80096f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00c      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d007      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f8f6 	bl	80090d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00c      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f003 0320 	and.w	r3, r3, #32
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0220 	mvn.w	r2, #32
 8008f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fbec 	bl	80096e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d101      	bne.n	8008f2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	e0ae      	b.n	800908c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b0c      	cmp	r3, #12
 8008f3a:	f200 809f 	bhi.w	800907c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008f79 	.word	0x08008f79
 8008f48:	0800907d 	.word	0x0800907d
 8008f4c:	0800907d 	.word	0x0800907d
 8008f50:	0800907d 	.word	0x0800907d
 8008f54:	08008fb9 	.word	0x08008fb9
 8008f58:	0800907d 	.word	0x0800907d
 8008f5c:	0800907d 	.word	0x0800907d
 8008f60:	0800907d 	.word	0x0800907d
 8008f64:	08008ffb 	.word	0x08008ffb
 8008f68:	0800907d 	.word	0x0800907d
 8008f6c:	0800907d 	.word	0x0800907d
 8008f70:	0800907d 	.word	0x0800907d
 8008f74:	0800903b 	.word	0x0800903b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68b9      	ldr	r1, [r7, #8]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 f95c 	bl	800923c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0208 	orr.w	r2, r2, #8
 8008f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0204 	bic.w	r2, r2, #4
 8008fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6999      	ldr	r1, [r3, #24]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	619a      	str	r2, [r3, #24]
      break;
 8008fb6:	e064      	b.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 f9ac 	bl	800931c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6999      	ldr	r1, [r3, #24]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	021a      	lsls	r2, r3, #8
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	619a      	str	r2, [r3, #24]
      break;
 8008ff8:	e043      	b.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fa01 	bl	8009408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69da      	ldr	r2, [r3, #28]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0208 	orr.w	r2, r2, #8
 8009014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0204 	bic.w	r2, r2, #4
 8009024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69d9      	ldr	r1, [r3, #28]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	691a      	ldr	r2, [r3, #16]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	61da      	str	r2, [r3, #28]
      break;
 8009038:	e023      	b.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fa55 	bl	80094f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69d9      	ldr	r1, [r3, #28]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	021a      	lsls	r2, r3, #8
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	61da      	str	r2, [r3, #28]
      break;
 800907a:	e002      	b.n	8009082 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	75fb      	strb	r3, [r7, #23]
      break;
 8009080:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a46      	ldr	r2, [pc, #280]	@ (8009210 <TIM_Base_SetConfig+0x12c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d013      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009102:	d00f      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a43      	ldr	r2, [pc, #268]	@ (8009214 <TIM_Base_SetConfig+0x130>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00b      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a42      	ldr	r2, [pc, #264]	@ (8009218 <TIM_Base_SetConfig+0x134>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d007      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a41      	ldr	r2, [pc, #260]	@ (800921c <TIM_Base_SetConfig+0x138>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_Base_SetConfig+0x40>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a40      	ldr	r2, [pc, #256]	@ (8009220 <TIM_Base_SetConfig+0x13c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d108      	bne.n	8009136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800912a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a35      	ldr	r2, [pc, #212]	@ (8009210 <TIM_Base_SetConfig+0x12c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d02b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009144:	d027      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a32      	ldr	r2, [pc, #200]	@ (8009214 <TIM_Base_SetConfig+0x130>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d023      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a31      	ldr	r2, [pc, #196]	@ (8009218 <TIM_Base_SetConfig+0x134>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d01f      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a30      	ldr	r2, [pc, #192]	@ (800921c <TIM_Base_SetConfig+0x138>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d01b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a2f      	ldr	r2, [pc, #188]	@ (8009220 <TIM_Base_SetConfig+0x13c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d017      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a2e      	ldr	r2, [pc, #184]	@ (8009224 <TIM_Base_SetConfig+0x140>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d013      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a2d      	ldr	r2, [pc, #180]	@ (8009228 <TIM_Base_SetConfig+0x144>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00f      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a2c      	ldr	r2, [pc, #176]	@ (800922c <TIM_Base_SetConfig+0x148>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00b      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a2b      	ldr	r2, [pc, #172]	@ (8009230 <TIM_Base_SetConfig+0x14c>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d007      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a2a      	ldr	r2, [pc, #168]	@ (8009234 <TIM_Base_SetConfig+0x150>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d003      	beq.n	8009196 <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a29      	ldr	r2, [pc, #164]	@ (8009238 <TIM_Base_SetConfig+0x154>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d108      	bne.n	80091a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800919c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a10      	ldr	r2, [pc, #64]	@ (8009210 <TIM_Base_SetConfig+0x12c>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_Base_SetConfig+0xf8>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a12      	ldr	r2, [pc, #72]	@ (8009220 <TIM_Base_SetConfig+0x13c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d103      	bne.n	80091e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	691a      	ldr	r2, [r3, #16]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d105      	bne.n	8009202 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f023 0201 	bic.w	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	611a      	str	r2, [r3, #16]
  }
}
 8009202:	bf00      	nop
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	40010000 	.word	0x40010000
 8009214:	40000400 	.word	0x40000400
 8009218:	40000800 	.word	0x40000800
 800921c:	40000c00 	.word	0x40000c00
 8009220:	40010400 	.word	0x40010400
 8009224:	40014000 	.word	0x40014000
 8009228:	40014400 	.word	0x40014400
 800922c:	40014800 	.word	0x40014800
 8009230:	40001800 	.word	0x40001800
 8009234:	40001c00 	.word	0x40001c00
 8009238:	40002000 	.word	0x40002000

0800923c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f023 0201 	bic.w	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800926a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f023 0303 	bic.w	r3, r3, #3
 8009272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f023 0302 	bic.w	r3, r3, #2
 8009284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a20      	ldr	r2, [pc, #128]	@ (8009314 <TIM_OC1_SetConfig+0xd8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_OC1_SetConfig+0x64>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a1f      	ldr	r2, [pc, #124]	@ (8009318 <TIM_OC1_SetConfig+0xdc>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d10c      	bne.n	80092ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f023 0308 	bic.w	r3, r3, #8
 80092a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f023 0304 	bic.w	r3, r3, #4
 80092b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a15      	ldr	r2, [pc, #84]	@ (8009314 <TIM_OC1_SetConfig+0xd8>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d003      	beq.n	80092ca <TIM_OC1_SetConfig+0x8e>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a14      	ldr	r2, [pc, #80]	@ (8009318 <TIM_OC1_SetConfig+0xdc>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d111      	bne.n	80092ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	621a      	str	r2, [r3, #32]
}
 8009308:	bf00      	nop
 800930a:	371c      	adds	r7, #28
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	40010000 	.word	0x40010000
 8009318:	40010400 	.word	0x40010400

0800931c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	f023 0210 	bic.w	r2, r3, #16
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800934a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	021b      	lsls	r3, r3, #8
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4313      	orrs	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f023 0320 	bic.w	r3, r3, #32
 8009366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a22      	ldr	r2, [pc, #136]	@ (8009400 <TIM_OC2_SetConfig+0xe4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_OC2_SetConfig+0x68>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a21      	ldr	r2, [pc, #132]	@ (8009404 <TIM_OC2_SetConfig+0xe8>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d10d      	bne.n	80093a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800938a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800939e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a17      	ldr	r2, [pc, #92]	@ (8009400 <TIM_OC2_SetConfig+0xe4>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d003      	beq.n	80093b0 <TIM_OC2_SetConfig+0x94>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a16      	ldr	r2, [pc, #88]	@ (8009404 <TIM_OC2_SetConfig+0xe8>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d113      	bne.n	80093d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	621a      	str	r2, [r3, #32]
}
 80093f2:	bf00      	nop
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	40010000 	.word	0x40010000
 8009404:	40010400 	.word	0x40010400

08009408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0303 	bic.w	r3, r3, #3
 800943e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a21      	ldr	r2, [pc, #132]	@ (80094e8 <TIM_OC3_SetConfig+0xe0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d003      	beq.n	800946e <TIM_OC3_SetConfig+0x66>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a20      	ldr	r2, [pc, #128]	@ (80094ec <TIM_OC3_SetConfig+0xe4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d10d      	bne.n	800948a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a16      	ldr	r2, [pc, #88]	@ (80094e8 <TIM_OC3_SetConfig+0xe0>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_OC3_SetConfig+0x92>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a15      	ldr	r2, [pc, #84]	@ (80094ec <TIM_OC3_SetConfig+0xe4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d113      	bne.n	80094c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	011b      	lsls	r3, r3, #4
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4313      	orrs	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	621a      	str	r2, [r3, #32]
}
 80094dc:	bf00      	nop
 80094de:	371c      	adds	r7, #28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	40010000 	.word	0x40010000
 80094ec:	40010400 	.word	0x40010400

080094f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800951e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	4313      	orrs	r3, r2
 8009532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800953a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	031b      	lsls	r3, r3, #12
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	4313      	orrs	r3, r2
 8009546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a12      	ldr	r2, [pc, #72]	@ (8009594 <TIM_OC4_SetConfig+0xa4>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d003      	beq.n	8009558 <TIM_OC4_SetConfig+0x68>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a11      	ldr	r2, [pc, #68]	@ (8009598 <TIM_OC4_SetConfig+0xa8>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d109      	bne.n	800956c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800955e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	019b      	lsls	r3, r3, #6
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	4313      	orrs	r3, r2
 800956a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	621a      	str	r2, [r3, #32]
}
 8009586:	bf00      	nop
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40010000 	.word	0x40010000
 8009598:	40010400 	.word	0x40010400

0800959c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f003 031f 	and.w	r3, r3, #31
 80095ae:	2201      	movs	r2, #1
 80095b0:	fa02 f303 	lsl.w	r3, r2, r3
 80095b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1a      	ldr	r2, [r3, #32]
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	43db      	mvns	r3, r3
 80095be:	401a      	ands	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a1a      	ldr	r2, [r3, #32]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	fa01 f303 	lsl.w	r3, r1, r3
 80095d4:	431a      	orrs	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d101      	bne.n	8009600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095fc:	2302      	movs	r3, #2
 80095fe:	e05a      	b.n	80096b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4313      	orrs	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a21      	ldr	r2, [pc, #132]	@ (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d022      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800964c:	d01d      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a1d      	ldr	r2, [pc, #116]	@ (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d018      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a1b      	ldr	r2, [pc, #108]	@ (80096cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a1a      	ldr	r2, [pc, #104]	@ (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00e      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a18      	ldr	r2, [pc, #96]	@ (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d009      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a17      	ldr	r2, [pc, #92]	@ (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d004      	beq.n	800968a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a15      	ldr	r2, [pc, #84]	@ (80096dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d10c      	bne.n	80096a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	4313      	orrs	r3, r2
 800969a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	40010000 	.word	0x40010000
 80096c8:	40000400 	.word	0x40000400
 80096cc:	40000800 	.word	0x40000800
 80096d0:	40000c00 	.word	0x40000c00
 80096d4:	40010400 	.word	0x40010400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40001800 	.word	0x40001800

080096e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e042      	b.n	80097a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7fb fa8a 	bl	8004c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2224      	movs	r2, #36	@ 0x24
 8009738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800974a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fe6b 	bl	800a428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	695a      	ldr	r2, [r3, #20]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68da      	ldr	r2, [r3, #12]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	4613      	mov	r3, r2
 80097b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d112      	bne.n	80097e8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <HAL_UART_Receive_DMA+0x26>
 80097c8:	88fb      	ldrh	r3, [r7, #6]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e00b      	b.n	80097ea <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80097d8:	88fb      	ldrh	r3, [r7, #6]
 80097da:	461a      	mov	r2, r3
 80097dc:	68b9      	ldr	r1, [r7, #8]
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 fbc2 	bl	8009f68 <UART_Start_Receive_DMA>
 80097e4:	4603      	mov	r3, r0
 80097e6:	e000      	b.n	80097ea <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80097e8:	2302      	movs	r3, #2
  }
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b0ba      	sub	sp, #232	@ 0xe8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800981a:	2300      	movs	r3, #0
 800981c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009820:	2300      	movs	r3, #0
 8009822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800982a:	f003 030f 	and.w	r3, r3, #15
 800982e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10f      	bne.n	800985a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800983a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800983e:	f003 0320 	and.w	r3, r3, #32
 8009842:	2b00      	cmp	r3, #0
 8009844:	d009      	beq.n	800985a <HAL_UART_IRQHandler+0x66>
 8009846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800984a:	f003 0320 	and.w	r3, r3, #32
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fd29 	bl	800a2aa <UART_Receive_IT>
      return;
 8009858:	e25b      	b.n	8009d12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800985a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80de 	beq.w	8009a20 <HAL_UART_IRQHandler+0x22c>
 8009864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009874:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 80d1 	beq.w	8009a20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800987e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <HAL_UART_IRQHandler+0xae>
 800988a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800988e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989a:	f043 0201 	orr.w	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a6:	f003 0304 	and.w	r3, r3, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <HAL_UART_IRQHandler+0xd2>
 80098ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d005      	beq.n	80098c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098be:	f043 0202 	orr.w	r2, r3, #2
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <HAL_UART_IRQHandler+0xf6>
 80098d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d005      	beq.n	80098ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e2:	f043 0204 	orr.w	r2, r3, #4
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ee:	f003 0308 	and.w	r3, r3, #8
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d011      	beq.n	800991a <HAL_UART_IRQHandler+0x126>
 80098f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098fa:	f003 0320 	and.w	r3, r3, #32
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d105      	bne.n	800990e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009912:	f043 0208 	orr.w	r2, r3, #8
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 81f2 	beq.w	8009d08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009928:	f003 0320 	and.w	r3, r3, #32
 800992c:	2b00      	cmp	r3, #0
 800992e:	d008      	beq.n	8009942 <HAL_UART_IRQHandler+0x14e>
 8009930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009934:	f003 0320 	and.w	r3, r3, #32
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fcb4 	bl	800a2aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994c:	2b40      	cmp	r3, #64	@ 0x40
 800994e:	bf0c      	ite	eq
 8009950:	2301      	moveq	r3, #1
 8009952:	2300      	movne	r3, #0
 8009954:	b2db      	uxtb	r3, r3
 8009956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d103      	bne.n	800996e <HAL_UART_IRQHandler+0x17a>
 8009966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800996a:	2b00      	cmp	r3, #0
 800996c:	d04f      	beq.n	8009a0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fbbc 	bl	800a0ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800997e:	2b40      	cmp	r3, #64	@ 0x40
 8009980:	d141      	bne.n	8009a06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3314      	adds	r3, #20
 8009988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009990:	e853 3f00 	ldrex	r3, [r3]
 8009994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800999c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3314      	adds	r3, #20
 80099aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80099ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80099b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80099ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80099c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1d9      	bne.n	8009982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d013      	beq.n	80099fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099da:	4a7e      	ldr	r2, [pc, #504]	@ (8009bd4 <HAL_UART_IRQHandler+0x3e0>)
 80099dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fc fd1e 	bl	8006424 <HAL_DMA_Abort_IT>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d016      	beq.n	8009a1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80099f8:	4610      	mov	r0, r2
 80099fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099fc:	e00e      	b.n	8009a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f99e 	bl	8009d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a04:	e00a      	b.n	8009a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f99a 	bl	8009d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a0c:	e006      	b.n	8009a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f996 	bl	8009d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009a1a:	e175      	b.n	8009d08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a1c:	bf00      	nop
    return;
 8009a1e:	e173      	b.n	8009d08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	f040 814f 	bne.w	8009cc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a2e:	f003 0310 	and.w	r3, r3, #16
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 8148 	beq.w	8009cc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 8141 	beq.w	8009cc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a46:	2300      	movs	r3, #0
 8009a48:	60bb      	str	r3, [r7, #8]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	60bb      	str	r3, [r7, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	60bb      	str	r3, [r7, #8]
 8009a5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a66:	2b40      	cmp	r3, #64	@ 0x40
 8009a68:	f040 80b6 	bne.w	8009bd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 8145 	beq.w	8009d0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	f080 813e 	bcs.w	8009d0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aa2:	f000 8088 	beq.w	8009bb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	330c      	adds	r3, #12
 8009aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ab4:	e853 3f00 	ldrex	r3, [r3]
 8009ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	330c      	adds	r3, #12
 8009ace:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009ad2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ad6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1d9      	bne.n	8009aa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	3314      	adds	r3, #20
 8009af8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b04:	f023 0301 	bic.w	r3, r3, #1
 8009b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3314      	adds	r3, #20
 8009b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e1      	bne.n	8009af2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3314      	adds	r3, #20
 8009b34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	3314      	adds	r3, #20
 8009b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b5a:	e841 2300 	strex	r3, r2, [r1]
 8009b5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e3      	bne.n	8009b2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	330c      	adds	r3, #12
 8009b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b86:	f023 0310 	bic.w	r3, r3, #16
 8009b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	330c      	adds	r3, #12
 8009b94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009b9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e3      	bne.n	8009b74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fc fbc7 	bl	8006344 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2202      	movs	r2, #2
 8009bba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f8c1 	bl	8009d54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009bd2:	e09b      	b.n	8009d0c <HAL_UART_IRQHandler+0x518>
 8009bd4:	0800a1b3 	.word	0x0800a1b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 808e 	beq.w	8009d10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8089 	beq.w	8009d10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	330c      	adds	r3, #12
 8009c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	330c      	adds	r3, #12
 8009c1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009c22:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e3      	bne.n	8009bfe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3314      	adds	r3, #20
 8009c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	623b      	str	r3, [r7, #32]
   return(result);
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3314      	adds	r3, #20
 8009c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e3      	bne.n	8009c36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2220      	movs	r2, #32
 8009c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	330c      	adds	r3, #12
 8009c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	e853 3f00 	ldrex	r3, [r3]
 8009c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0310 	bic.w	r3, r3, #16
 8009c92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	330c      	adds	r3, #12
 8009c9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009ca0:	61fa      	str	r2, [r7, #28]
 8009ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	69b9      	ldr	r1, [r7, #24]
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	617b      	str	r3, [r7, #20]
   return(result);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e3      	bne.n	8009c7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f847 	bl	8009d54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cc6:	e023      	b.n	8009d10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d009      	beq.n	8009ce8 <HAL_UART_IRQHandler+0x4f4>
 8009cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d003      	beq.n	8009ce8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fa7a 	bl	800a1da <UART_Transmit_IT>
    return;
 8009ce6:	e014      	b.n	8009d12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00e      	beq.n	8009d12 <HAL_UART_IRQHandler+0x51e>
 8009cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d008      	beq.n	8009d12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 faba 	bl	800a27a <UART_EndTransmit_IT>
    return;
 8009d06:	e004      	b.n	8009d12 <HAL_UART_IRQHandler+0x51e>
    return;
 8009d08:	bf00      	nop
 8009d0a:	e002      	b.n	8009d12 <HAL_UART_IRQHandler+0x51e>
      return;
 8009d0c:	bf00      	nop
 8009d0e:	e000      	b.n	8009d12 <HAL_UART_IRQHandler+0x51e>
      return;
 8009d10:	bf00      	nop
  }
}
 8009d12:	37e8      	adds	r7, #232	@ 0xe8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b09c      	sub	sp, #112	@ 0x70
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d172      	bne.n	8009e6e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	330c      	adds	r3, #12
 8009d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	330c      	adds	r3, #12
 8009dac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009dae:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009db0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009db4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e5      	bne.n	8009d8e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3314      	adds	r3, #20
 8009de0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009de2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009de4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3314      	adds	r3, #20
 8009dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	623b      	str	r3, [r7, #32]
   return(result);
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3314      	adds	r3, #20
 8009e14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e16:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e5      	bne.n	8009df6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d119      	bne.n	8009e6e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	330c      	adds	r3, #12
 8009e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f023 0310 	bic.w	r3, r3, #16
 8009e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	330c      	adds	r3, #12
 8009e58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e5a:	61fa      	str	r2, [r7, #28]
 8009e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	69b9      	ldr	r1, [r7, #24]
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	617b      	str	r3, [r7, #20]
   return(result);
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e5      	bne.n	8009e3a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e70:	2200      	movs	r2, #0
 8009e72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d106      	bne.n	8009e8a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e7e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e80:	4619      	mov	r1, r3
 8009e82:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e84:	f7ff ff66 	bl	8009d54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e88:	e002      	b.n	8009e90 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009e8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e8c:	f7f9 fa62 	bl	8003354 <HAL_UART_RxCpltCallback>
}
 8009e90:	bf00      	nop
 8009e92:	3770      	adds	r7, #112	@ 0x70
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d108      	bne.n	8009ec6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009eb8:	085b      	lsrs	r3, r3, #1
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff ff48 	bl	8009d54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ec4:	e002      	b.n	8009ecc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f7ff ff30 	bl	8009d2c <HAL_UART_RxHalfCpltCallback>
}
 8009ecc:	bf00      	nop
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ef0:	2b80      	cmp	r3, #128	@ 0x80
 8009ef2:	bf0c      	ite	eq
 8009ef4:	2301      	moveq	r3, #1
 8009ef6:	2300      	movne	r3, #0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b21      	cmp	r3, #33	@ 0x21
 8009f06:	d108      	bne.n	8009f1a <UART_DMAError+0x46>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d005      	beq.n	8009f1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2200      	movs	r2, #0
 8009f12:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009f14:	68b8      	ldr	r0, [r7, #8]
 8009f16:	f000 f8c1 	bl	800a09c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f24:	2b40      	cmp	r3, #64	@ 0x40
 8009f26:	bf0c      	ite	eq
 8009f28:	2301      	moveq	r3, #1
 8009f2a:	2300      	movne	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b22      	cmp	r3, #34	@ 0x22
 8009f3a:	d108      	bne.n	8009f4e <UART_DMAError+0x7a>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d005      	beq.n	8009f4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2200      	movs	r2, #0
 8009f46:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009f48:	68b8      	ldr	r0, [r7, #8]
 8009f4a:	f000 f8cf 	bl	800a0ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f52:	f043 0210 	orr.w	r2, r3, #16
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f5a:	68b8      	ldr	r0, [r7, #8]
 8009f5c:	f7ff fef0 	bl	8009d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b098      	sub	sp, #96	@ 0x60
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	4613      	mov	r3, r2
 8009f74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	88fa      	ldrh	r2, [r7, #6]
 8009f80:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2222      	movs	r2, #34	@ 0x22
 8009f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f94:	4a3e      	ldr	r2, [pc, #248]	@ (800a090 <UART_Start_Receive_DMA+0x128>)
 8009f96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f9c:	4a3d      	ldr	r2, [pc, #244]	@ (800a094 <UART_Start_Receive_DMA+0x12c>)
 8009f9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa4:	4a3c      	ldr	r2, [pc, #240]	@ (800a098 <UART_Start_Receive_DMA+0x130>)
 8009fa6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fac:	2200      	movs	r2, #0
 8009fae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	f7fc f964 	bl	8006294 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009fcc:	2300      	movs	r3, #0
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	613b      	str	r3, [r7, #16]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	613b      	str	r3, [r7, #16]
 8009fe0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d019      	beq.n	800a01e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	330c      	adds	r3, #12
 8009ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a000:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	330c      	adds	r3, #12
 800a008:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a00a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a00c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a010:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a012:	e841 2300 	strex	r3, r2, [r1]
 800a016:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1e5      	bne.n	8009fea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3314      	adds	r3, #20
 800a024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a030:	f043 0301 	orr.w	r3, r3, #1
 800a034:	657b      	str	r3, [r7, #84]	@ 0x54
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3314      	adds	r3, #20
 800a03c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a03e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a044:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a046:	e841 2300 	strex	r3, r2, [r1]
 800a04a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1e5      	bne.n	800a01e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3314      	adds	r3, #20
 800a058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	e853 3f00 	ldrex	r3, [r3]
 800a060:	617b      	str	r3, [r7, #20]
   return(result);
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a068:	653b      	str	r3, [r7, #80]	@ 0x50
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3314      	adds	r3, #20
 800a070:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a072:	627a      	str	r2, [r7, #36]	@ 0x24
 800a074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a076:	6a39      	ldr	r1, [r7, #32]
 800a078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a07a:	e841 2300 	strex	r3, r2, [r1]
 800a07e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1e5      	bne.n	800a052 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3760      	adds	r7, #96	@ 0x60
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	08009d6d 	.word	0x08009d6d
 800a094:	08009e99 	.word	0x08009e99
 800a098:	08009ed5 	.word	0x08009ed5

0800a09c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b089      	sub	sp, #36	@ 0x24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	330c      	adds	r3, #12
 800a0aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a0ba:	61fb      	str	r3, [r7, #28]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	330c      	adds	r3, #12
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	61ba      	str	r2, [r7, #24]
 800a0c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6979      	ldr	r1, [r7, #20]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e5      	bne.n	800a0a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a0e0:	bf00      	nop
 800a0e2:	3724      	adds	r7, #36	@ 0x24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b095      	sub	sp, #84	@ 0x54
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	330c      	adds	r3, #12
 800a0fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0fe:	e853 3f00 	ldrex	r3, [r3]
 800a102:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a10a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	330c      	adds	r3, #12
 800a112:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a114:	643a      	str	r2, [r7, #64]	@ 0x40
 800a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a118:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a11a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a11c:	e841 2300 	strex	r3, r2, [r1]
 800a120:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1e5      	bne.n	800a0f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3314      	adds	r3, #20
 800a12e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	61fb      	str	r3, [r7, #28]
   return(result);
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	f023 0301 	bic.w	r3, r3, #1
 800a13e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3314      	adds	r3, #20
 800a146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a148:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a14a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a14e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e5      	bne.n	800a128 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a160:	2b01      	cmp	r3, #1
 800a162:	d119      	bne.n	800a198 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	330c      	adds	r3, #12
 800a16a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	60bb      	str	r3, [r7, #8]
   return(result);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f023 0310 	bic.w	r3, r3, #16
 800a17a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	330c      	adds	r3, #12
 800a182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a184:	61ba      	str	r2, [r7, #24]
 800a186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	6979      	ldr	r1, [r7, #20]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	613b      	str	r3, [r7, #16]
   return(result);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e5      	bne.n	800a164 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a1a6:	bf00      	nop
 800a1a8:	3754      	adds	r7, #84	@ 0x54
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7ff fdb7 	bl	8009d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1d2:	bf00      	nop
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b21      	cmp	r3, #33	@ 0x21
 800a1ec:	d13e      	bne.n	800a26c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f6:	d114      	bne.n	800a222 <UART_Transmit_IT+0x48>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d110      	bne.n	800a222 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a214:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	1c9a      	adds	r2, r3, #2
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	621a      	str	r2, [r3, #32]
 800a220:	e008      	b.n	800a234 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	1c59      	adds	r1, r3, #1
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6211      	str	r1, [r2, #32]
 800a22c:	781a      	ldrb	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a238:	b29b      	uxth	r3, r3
 800a23a:	3b01      	subs	r3, #1
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	4619      	mov	r1, r3
 800a242:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10f      	bne.n	800a268 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a256:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68da      	ldr	r2, [r3, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a266:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	e000      	b.n	800a26e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a26c:	2302      	movs	r3, #2
  }
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b082      	sub	sp, #8
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68da      	ldr	r2, [r3, #12]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a290:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2220      	movs	r2, #32
 800a296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7ff fd3c 	bl	8009d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b08c      	sub	sp, #48	@ 0x30
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b22      	cmp	r3, #34	@ 0x22
 800a2bc:	f040 80ae 	bne.w	800a41c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c8:	d117      	bne.n	800a2fa <UART_Receive_IT+0x50>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d113      	bne.n	800a2fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f2:	1c9a      	adds	r2, r3, #2
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a2f8:	e026      	b.n	800a348 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a300:	2300      	movs	r3, #0
 800a302:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a30c:	d007      	beq.n	800a31e <UART_Receive_IT+0x74>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10a      	bne.n	800a32c <UART_Receive_IT+0x82>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d106      	bne.n	800a32c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	b2da      	uxtb	r2, r3
 800a326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a328:	701a      	strb	r2, [r3, #0]
 800a32a:	e008      	b.n	800a33e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	3b01      	subs	r3, #1
 800a350:	b29b      	uxth	r3, r3
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	4619      	mov	r1, r3
 800a356:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d15d      	bne.n	800a418 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0220 	bic.w	r2, r2, #32
 800a36a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68da      	ldr	r2, [r3, #12]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a37a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	695a      	ldr	r2, [r3, #20]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0201 	bic.w	r2, r2, #1
 800a38a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2220      	movs	r2, #32
 800a390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d135      	bne.n	800a40e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	330c      	adds	r3, #12
 800a3ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	e853 3f00 	ldrex	r3, [r3]
 800a3b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f023 0310 	bic.w	r3, r3, #16
 800a3be:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	330c      	adds	r3, #12
 800a3c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3c8:	623a      	str	r2, [r7, #32]
 800a3ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	69f9      	ldr	r1, [r7, #28]
 800a3ce:	6a3a      	ldr	r2, [r7, #32]
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e5      	bne.n	800a3a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0310 	and.w	r3, r3, #16
 800a3e6:	2b10      	cmp	r3, #16
 800a3e8:	d10a      	bne.n	800a400 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff fca4 	bl	8009d54 <HAL_UARTEx_RxEventCallback>
 800a40c:	e002      	b.n	800a414 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7f8 ffa0 	bl	8003354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	e002      	b.n	800a41e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	e000      	b.n	800a41e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a41c:	2302      	movs	r3, #2
  }
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3730      	adds	r7, #48	@ 0x30
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
	...

0800a428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a42c:	b0c0      	sub	sp, #256	@ 0x100
 800a42e:	af00      	add	r7, sp, #0
 800a430:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a444:	68d9      	ldr	r1, [r3, #12]
 800a446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	ea40 0301 	orr.w	r3, r0, r1
 800a450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	431a      	orrs	r2, r3
 800a460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	431a      	orrs	r2, r3
 800a468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	4313      	orrs	r3, r2
 800a470:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a480:	f021 010c 	bic.w	r1, r1, #12
 800a484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a48e:	430b      	orrs	r3, r1
 800a490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a49e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4a2:	6999      	ldr	r1, [r3, #24]
 800a4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	ea40 0301 	orr.w	r3, r0, r1
 800a4ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a4b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b8f      	ldr	r3, [pc, #572]	@ (800a6f4 <UART_SetConfig+0x2cc>)
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d005      	beq.n	800a4c8 <UART_SetConfig+0xa0>
 800a4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4b8d      	ldr	r3, [pc, #564]	@ (800a6f8 <UART_SetConfig+0x2d0>)
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d104      	bne.n	800a4d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4c8:	f7fe f9b2 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800a4cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a4d0:	e003      	b.n	800a4da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4d2:	f7fe f999 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800a4d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4e4:	f040 810c 	bne.w	800a700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a4f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a4f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	462b      	mov	r3, r5
 800a4fe:	1891      	adds	r1, r2, r2
 800a500:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a502:	415b      	adcs	r3, r3
 800a504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a50a:	4621      	mov	r1, r4
 800a50c:	eb12 0801 	adds.w	r8, r2, r1
 800a510:	4629      	mov	r1, r5
 800a512:	eb43 0901 	adc.w	r9, r3, r1
 800a516:	f04f 0200 	mov.w	r2, #0
 800a51a:	f04f 0300 	mov.w	r3, #0
 800a51e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a52a:	4690      	mov	r8, r2
 800a52c:	4699      	mov	r9, r3
 800a52e:	4623      	mov	r3, r4
 800a530:	eb18 0303 	adds.w	r3, r8, r3
 800a534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a538:	462b      	mov	r3, r5
 800a53a:	eb49 0303 	adc.w	r3, r9, r3
 800a53e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a54e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a556:	460b      	mov	r3, r1
 800a558:	18db      	adds	r3, r3, r3
 800a55a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a55c:	4613      	mov	r3, r2
 800a55e:	eb42 0303 	adc.w	r3, r2, r3
 800a562:	657b      	str	r3, [r7, #84]	@ 0x54
 800a564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a56c:	f7f6 fb8c 	bl	8000c88 <__aeabi_uldivmod>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4b61      	ldr	r3, [pc, #388]	@ (800a6fc <UART_SetConfig+0x2d4>)
 800a576:	fba3 2302 	umull	r2, r3, r3, r2
 800a57a:	095b      	lsrs	r3, r3, #5
 800a57c:	011c      	lsls	r4, r3, #4
 800a57e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a582:	2200      	movs	r2, #0
 800a584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a588:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a58c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a590:	4642      	mov	r2, r8
 800a592:	464b      	mov	r3, r9
 800a594:	1891      	adds	r1, r2, r2
 800a596:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a598:	415b      	adcs	r3, r3
 800a59a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a59c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a5a0:	4641      	mov	r1, r8
 800a5a2:	eb12 0a01 	adds.w	sl, r2, r1
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	eb43 0b01 	adc.w	fp, r3, r1
 800a5ac:	f04f 0200 	mov.w	r2, #0
 800a5b0:	f04f 0300 	mov.w	r3, #0
 800a5b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a5b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a5bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a5c0:	4692      	mov	sl, r2
 800a5c2:	469b      	mov	fp, r3
 800a5c4:	4643      	mov	r3, r8
 800a5c6:	eb1a 0303 	adds.w	r3, sl, r3
 800a5ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5ce:	464b      	mov	r3, r9
 800a5d0:	eb4b 0303 	adc.w	r3, fp, r3
 800a5d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a5e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	18db      	adds	r3, r3, r3
 800a5f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	eb42 0303 	adc.w	r3, r2, r3
 800a5f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a5fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a602:	f7f6 fb41 	bl	8000c88 <__aeabi_uldivmod>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4611      	mov	r1, r2
 800a60c:	4b3b      	ldr	r3, [pc, #236]	@ (800a6fc <UART_SetConfig+0x2d4>)
 800a60e:	fba3 2301 	umull	r2, r3, r3, r1
 800a612:	095b      	lsrs	r3, r3, #5
 800a614:	2264      	movs	r2, #100	@ 0x64
 800a616:	fb02 f303 	mul.w	r3, r2, r3
 800a61a:	1acb      	subs	r3, r1, r3
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a622:	4b36      	ldr	r3, [pc, #216]	@ (800a6fc <UART_SetConfig+0x2d4>)
 800a624:	fba3 2302 	umull	r2, r3, r3, r2
 800a628:	095b      	lsrs	r3, r3, #5
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a630:	441c      	add	r4, r3
 800a632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a636:	2200      	movs	r2, #0
 800a638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a63c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a644:	4642      	mov	r2, r8
 800a646:	464b      	mov	r3, r9
 800a648:	1891      	adds	r1, r2, r2
 800a64a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a64c:	415b      	adcs	r3, r3
 800a64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a654:	4641      	mov	r1, r8
 800a656:	1851      	adds	r1, r2, r1
 800a658:	6339      	str	r1, [r7, #48]	@ 0x30
 800a65a:	4649      	mov	r1, r9
 800a65c:	414b      	adcs	r3, r1
 800a65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a660:	f04f 0200 	mov.w	r2, #0
 800a664:	f04f 0300 	mov.w	r3, #0
 800a668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a66c:	4659      	mov	r1, fp
 800a66e:	00cb      	lsls	r3, r1, #3
 800a670:	4651      	mov	r1, sl
 800a672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a676:	4651      	mov	r1, sl
 800a678:	00ca      	lsls	r2, r1, #3
 800a67a:	4610      	mov	r0, r2
 800a67c:	4619      	mov	r1, r3
 800a67e:	4603      	mov	r3, r0
 800a680:	4642      	mov	r2, r8
 800a682:	189b      	adds	r3, r3, r2
 800a684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a688:	464b      	mov	r3, r9
 800a68a:	460a      	mov	r2, r1
 800a68c:	eb42 0303 	adc.w	r3, r2, r3
 800a690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a6a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	18db      	adds	r3, r3, r3
 800a6ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	eb42 0303 	adc.w	r3, r2, r3
 800a6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a6ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a6be:	f7f6 fae3 	bl	8000c88 <__aeabi_uldivmod>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6fc <UART_SetConfig+0x2d4>)
 800a6c8:	fba3 1302 	umull	r1, r3, r3, r2
 800a6cc:	095b      	lsrs	r3, r3, #5
 800a6ce:	2164      	movs	r1, #100	@ 0x64
 800a6d0:	fb01 f303 	mul.w	r3, r1, r3
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	3332      	adds	r3, #50	@ 0x32
 800a6da:	4a08      	ldr	r2, [pc, #32]	@ (800a6fc <UART_SetConfig+0x2d4>)
 800a6dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e0:	095b      	lsrs	r3, r3, #5
 800a6e2:	f003 0207 	and.w	r2, r3, #7
 800a6e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4422      	add	r2, r4
 800a6ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a6f0:	e106      	b.n	800a900 <UART_SetConfig+0x4d8>
 800a6f2:	bf00      	nop
 800a6f4:	40011000 	.word	0x40011000
 800a6f8:	40011400 	.word	0x40011400
 800a6fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a704:	2200      	movs	r2, #0
 800a706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a70a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a70e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a712:	4642      	mov	r2, r8
 800a714:	464b      	mov	r3, r9
 800a716:	1891      	adds	r1, r2, r2
 800a718:	6239      	str	r1, [r7, #32]
 800a71a:	415b      	adcs	r3, r3
 800a71c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a71e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a722:	4641      	mov	r1, r8
 800a724:	1854      	adds	r4, r2, r1
 800a726:	4649      	mov	r1, r9
 800a728:	eb43 0501 	adc.w	r5, r3, r1
 800a72c:	f04f 0200 	mov.w	r2, #0
 800a730:	f04f 0300 	mov.w	r3, #0
 800a734:	00eb      	lsls	r3, r5, #3
 800a736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a73a:	00e2      	lsls	r2, r4, #3
 800a73c:	4614      	mov	r4, r2
 800a73e:	461d      	mov	r5, r3
 800a740:	4643      	mov	r3, r8
 800a742:	18e3      	adds	r3, r4, r3
 800a744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a748:	464b      	mov	r3, r9
 800a74a:	eb45 0303 	adc.w	r3, r5, r3
 800a74e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a75e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a762:	f04f 0200 	mov.w	r2, #0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a76e:	4629      	mov	r1, r5
 800a770:	008b      	lsls	r3, r1, #2
 800a772:	4621      	mov	r1, r4
 800a774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a778:	4621      	mov	r1, r4
 800a77a:	008a      	lsls	r2, r1, #2
 800a77c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a780:	f7f6 fa82 	bl	8000c88 <__aeabi_uldivmod>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4b60      	ldr	r3, [pc, #384]	@ (800a90c <UART_SetConfig+0x4e4>)
 800a78a:	fba3 2302 	umull	r2, r3, r3, r2
 800a78e:	095b      	lsrs	r3, r3, #5
 800a790:	011c      	lsls	r4, r3, #4
 800a792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a796:	2200      	movs	r2, #0
 800a798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a79c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a7a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a7a4:	4642      	mov	r2, r8
 800a7a6:	464b      	mov	r3, r9
 800a7a8:	1891      	adds	r1, r2, r2
 800a7aa:	61b9      	str	r1, [r7, #24]
 800a7ac:	415b      	adcs	r3, r3
 800a7ae:	61fb      	str	r3, [r7, #28]
 800a7b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7b4:	4641      	mov	r1, r8
 800a7b6:	1851      	adds	r1, r2, r1
 800a7b8:	6139      	str	r1, [r7, #16]
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	414b      	adcs	r3, r1
 800a7be:	617b      	str	r3, [r7, #20]
 800a7c0:	f04f 0200 	mov.w	r2, #0
 800a7c4:	f04f 0300 	mov.w	r3, #0
 800a7c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7cc:	4659      	mov	r1, fp
 800a7ce:	00cb      	lsls	r3, r1, #3
 800a7d0:	4651      	mov	r1, sl
 800a7d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7d6:	4651      	mov	r1, sl
 800a7d8:	00ca      	lsls	r2, r1, #3
 800a7da:	4610      	mov	r0, r2
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4642      	mov	r2, r8
 800a7e2:	189b      	adds	r3, r3, r2
 800a7e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a7e8:	464b      	mov	r3, r9
 800a7ea:	460a      	mov	r2, r1
 800a7ec:	eb42 0303 	adc.w	r3, r2, r3
 800a7f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a800:	f04f 0200 	mov.w	r2, #0
 800a804:	f04f 0300 	mov.w	r3, #0
 800a808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a80c:	4649      	mov	r1, r9
 800a80e:	008b      	lsls	r3, r1, #2
 800a810:	4641      	mov	r1, r8
 800a812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a816:	4641      	mov	r1, r8
 800a818:	008a      	lsls	r2, r1, #2
 800a81a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a81e:	f7f6 fa33 	bl	8000c88 <__aeabi_uldivmod>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4611      	mov	r1, r2
 800a828:	4b38      	ldr	r3, [pc, #224]	@ (800a90c <UART_SetConfig+0x4e4>)
 800a82a:	fba3 2301 	umull	r2, r3, r3, r1
 800a82e:	095b      	lsrs	r3, r3, #5
 800a830:	2264      	movs	r2, #100	@ 0x64
 800a832:	fb02 f303 	mul.w	r3, r2, r3
 800a836:	1acb      	subs	r3, r1, r3
 800a838:	011b      	lsls	r3, r3, #4
 800a83a:	3332      	adds	r3, #50	@ 0x32
 800a83c:	4a33      	ldr	r2, [pc, #204]	@ (800a90c <UART_SetConfig+0x4e4>)
 800a83e:	fba2 2303 	umull	r2, r3, r2, r3
 800a842:	095b      	lsrs	r3, r3, #5
 800a844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a848:	441c      	add	r4, r3
 800a84a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a84e:	2200      	movs	r2, #0
 800a850:	673b      	str	r3, [r7, #112]	@ 0x70
 800a852:	677a      	str	r2, [r7, #116]	@ 0x74
 800a854:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a858:	4642      	mov	r2, r8
 800a85a:	464b      	mov	r3, r9
 800a85c:	1891      	adds	r1, r2, r2
 800a85e:	60b9      	str	r1, [r7, #8]
 800a860:	415b      	adcs	r3, r3
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a868:	4641      	mov	r1, r8
 800a86a:	1851      	adds	r1, r2, r1
 800a86c:	6039      	str	r1, [r7, #0]
 800a86e:	4649      	mov	r1, r9
 800a870:	414b      	adcs	r3, r1
 800a872:	607b      	str	r3, [r7, #4]
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a880:	4659      	mov	r1, fp
 800a882:	00cb      	lsls	r3, r1, #3
 800a884:	4651      	mov	r1, sl
 800a886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a88a:	4651      	mov	r1, sl
 800a88c:	00ca      	lsls	r2, r1, #3
 800a88e:	4610      	mov	r0, r2
 800a890:	4619      	mov	r1, r3
 800a892:	4603      	mov	r3, r0
 800a894:	4642      	mov	r2, r8
 800a896:	189b      	adds	r3, r3, r2
 800a898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a89a:	464b      	mov	r3, r9
 800a89c:	460a      	mov	r2, r1
 800a89e:	eb42 0303 	adc.w	r3, r2, r3
 800a8a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8ae:	667a      	str	r2, [r7, #100]	@ 0x64
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	f04f 0300 	mov.w	r3, #0
 800a8b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a8bc:	4649      	mov	r1, r9
 800a8be:	008b      	lsls	r3, r1, #2
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8c6:	4641      	mov	r1, r8
 800a8c8:	008a      	lsls	r2, r1, #2
 800a8ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a8ce:	f7f6 f9db 	bl	8000c88 <__aeabi_uldivmod>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a90c <UART_SetConfig+0x4e4>)
 800a8d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a8dc:	095b      	lsrs	r3, r3, #5
 800a8de:	2164      	movs	r1, #100	@ 0x64
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	011b      	lsls	r3, r3, #4
 800a8e8:	3332      	adds	r3, #50	@ 0x32
 800a8ea:	4a08      	ldr	r2, [pc, #32]	@ (800a90c <UART_SetConfig+0x4e4>)
 800a8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f0:	095b      	lsrs	r3, r3, #5
 800a8f2:	f003 020f 	and.w	r2, r3, #15
 800a8f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4422      	add	r2, r4
 800a8fe:	609a      	str	r2, [r3, #8]
}
 800a900:	bf00      	nop
 800a902:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a906:	46bd      	mov	sp, r7
 800a908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a90c:	51eb851f 	.word	0x51eb851f

0800a910 <atoi>:
 800a910:	220a      	movs	r2, #10
 800a912:	2100      	movs	r1, #0
 800a914:	f000 bf6a 	b.w	800b7ec <strtol>

0800a918 <malloc>:
 800a918:	4b02      	ldr	r3, [pc, #8]	@ (800a924 <malloc+0xc>)
 800a91a:	4601      	mov	r1, r0
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	f000 b825 	b.w	800a96c <_malloc_r>
 800a922:	bf00      	nop
 800a924:	200001fc 	.word	0x200001fc

0800a928 <sbrk_aligned>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	4e0f      	ldr	r6, [pc, #60]	@ (800a968 <sbrk_aligned+0x40>)
 800a92c:	460c      	mov	r4, r1
 800a92e:	6831      	ldr	r1, [r6, #0]
 800a930:	4605      	mov	r5, r0
 800a932:	b911      	cbnz	r1, 800a93a <sbrk_aligned+0x12>
 800a934:	f001 fc2e 	bl	800c194 <_sbrk_r>
 800a938:	6030      	str	r0, [r6, #0]
 800a93a:	4621      	mov	r1, r4
 800a93c:	4628      	mov	r0, r5
 800a93e:	f001 fc29 	bl	800c194 <_sbrk_r>
 800a942:	1c43      	adds	r3, r0, #1
 800a944:	d103      	bne.n	800a94e <sbrk_aligned+0x26>
 800a946:	f04f 34ff 	mov.w	r4, #4294967295
 800a94a:	4620      	mov	r0, r4
 800a94c:	bd70      	pop	{r4, r5, r6, pc}
 800a94e:	1cc4      	adds	r4, r0, #3
 800a950:	f024 0403 	bic.w	r4, r4, #3
 800a954:	42a0      	cmp	r0, r4
 800a956:	d0f8      	beq.n	800a94a <sbrk_aligned+0x22>
 800a958:	1a21      	subs	r1, r4, r0
 800a95a:	4628      	mov	r0, r5
 800a95c:	f001 fc1a 	bl	800c194 <_sbrk_r>
 800a960:	3001      	adds	r0, #1
 800a962:	d1f2      	bne.n	800a94a <sbrk_aligned+0x22>
 800a964:	e7ef      	b.n	800a946 <sbrk_aligned+0x1e>
 800a966:	bf00      	nop
 800a968:	20000ae4 	.word	0x20000ae4

0800a96c <_malloc_r>:
 800a96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a970:	1ccd      	adds	r5, r1, #3
 800a972:	f025 0503 	bic.w	r5, r5, #3
 800a976:	3508      	adds	r5, #8
 800a978:	2d0c      	cmp	r5, #12
 800a97a:	bf38      	it	cc
 800a97c:	250c      	movcc	r5, #12
 800a97e:	2d00      	cmp	r5, #0
 800a980:	4606      	mov	r6, r0
 800a982:	db01      	blt.n	800a988 <_malloc_r+0x1c>
 800a984:	42a9      	cmp	r1, r5
 800a986:	d904      	bls.n	800a992 <_malloc_r+0x26>
 800a988:	230c      	movs	r3, #12
 800a98a:	6033      	str	r3, [r6, #0]
 800a98c:	2000      	movs	r0, #0
 800a98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa68 <_malloc_r+0xfc>
 800a996:	f000 f869 	bl	800aa6c <__malloc_lock>
 800a99a:	f8d8 3000 	ldr.w	r3, [r8]
 800a99e:	461c      	mov	r4, r3
 800a9a0:	bb44      	cbnz	r4, 800a9f4 <_malloc_r+0x88>
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	f7ff ffbf 	bl	800a928 <sbrk_aligned>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	d158      	bne.n	800aa62 <_malloc_r+0xf6>
 800a9b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a9b4:	4627      	mov	r7, r4
 800a9b6:	2f00      	cmp	r7, #0
 800a9b8:	d143      	bne.n	800aa42 <_malloc_r+0xd6>
 800a9ba:	2c00      	cmp	r4, #0
 800a9bc:	d04b      	beq.n	800aa56 <_malloc_r+0xea>
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	eb04 0903 	add.w	r9, r4, r3
 800a9c8:	f001 fbe4 	bl	800c194 <_sbrk_r>
 800a9cc:	4581      	cmp	r9, r0
 800a9ce:	d142      	bne.n	800aa56 <_malloc_r+0xea>
 800a9d0:	6821      	ldr	r1, [r4, #0]
 800a9d2:	1a6d      	subs	r5, r5, r1
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f7ff ffa6 	bl	800a928 <sbrk_aligned>
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d03a      	beq.n	800aa56 <_malloc_r+0xea>
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	442b      	add	r3, r5
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	bb62      	cbnz	r2, 800aa48 <_malloc_r+0xdc>
 800a9ee:	f8c8 7000 	str.w	r7, [r8]
 800a9f2:	e00f      	b.n	800aa14 <_malloc_r+0xa8>
 800a9f4:	6822      	ldr	r2, [r4, #0]
 800a9f6:	1b52      	subs	r2, r2, r5
 800a9f8:	d420      	bmi.n	800aa3c <_malloc_r+0xd0>
 800a9fa:	2a0b      	cmp	r2, #11
 800a9fc:	d917      	bls.n	800aa2e <_malloc_r+0xc2>
 800a9fe:	1961      	adds	r1, r4, r5
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	6025      	str	r5, [r4, #0]
 800aa04:	bf18      	it	ne
 800aa06:	6059      	strne	r1, [r3, #4]
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	bf08      	it	eq
 800aa0c:	f8c8 1000 	streq.w	r1, [r8]
 800aa10:	5162      	str	r2, [r4, r5]
 800aa12:	604b      	str	r3, [r1, #4]
 800aa14:	4630      	mov	r0, r6
 800aa16:	f000 f82f 	bl	800aa78 <__malloc_unlock>
 800aa1a:	f104 000b 	add.w	r0, r4, #11
 800aa1e:	1d23      	adds	r3, r4, #4
 800aa20:	f020 0007 	bic.w	r0, r0, #7
 800aa24:	1ac2      	subs	r2, r0, r3
 800aa26:	bf1c      	itt	ne
 800aa28:	1a1b      	subne	r3, r3, r0
 800aa2a:	50a3      	strne	r3, [r4, r2]
 800aa2c:	e7af      	b.n	800a98e <_malloc_r+0x22>
 800aa2e:	6862      	ldr	r2, [r4, #4]
 800aa30:	42a3      	cmp	r3, r4
 800aa32:	bf0c      	ite	eq
 800aa34:	f8c8 2000 	streq.w	r2, [r8]
 800aa38:	605a      	strne	r2, [r3, #4]
 800aa3a:	e7eb      	b.n	800aa14 <_malloc_r+0xa8>
 800aa3c:	4623      	mov	r3, r4
 800aa3e:	6864      	ldr	r4, [r4, #4]
 800aa40:	e7ae      	b.n	800a9a0 <_malloc_r+0x34>
 800aa42:	463c      	mov	r4, r7
 800aa44:	687f      	ldr	r7, [r7, #4]
 800aa46:	e7b6      	b.n	800a9b6 <_malloc_r+0x4a>
 800aa48:	461a      	mov	r2, r3
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	42a3      	cmp	r3, r4
 800aa4e:	d1fb      	bne.n	800aa48 <_malloc_r+0xdc>
 800aa50:	2300      	movs	r3, #0
 800aa52:	6053      	str	r3, [r2, #4]
 800aa54:	e7de      	b.n	800aa14 <_malloc_r+0xa8>
 800aa56:	230c      	movs	r3, #12
 800aa58:	6033      	str	r3, [r6, #0]
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f000 f80c 	bl	800aa78 <__malloc_unlock>
 800aa60:	e794      	b.n	800a98c <_malloc_r+0x20>
 800aa62:	6005      	str	r5, [r0, #0]
 800aa64:	e7d6      	b.n	800aa14 <_malloc_r+0xa8>
 800aa66:	bf00      	nop
 800aa68:	20000ae8 	.word	0x20000ae8

0800aa6c <__malloc_lock>:
 800aa6c:	4801      	ldr	r0, [pc, #4]	@ (800aa74 <__malloc_lock+0x8>)
 800aa6e:	f001 bbde 	b.w	800c22e <__retarget_lock_acquire_recursive>
 800aa72:	bf00      	nop
 800aa74:	20000c2c 	.word	0x20000c2c

0800aa78 <__malloc_unlock>:
 800aa78:	4801      	ldr	r0, [pc, #4]	@ (800aa80 <__malloc_unlock+0x8>)
 800aa7a:	f001 bbd9 	b.w	800c230 <__retarget_lock_release_recursive>
 800aa7e:	bf00      	nop
 800aa80:	20000c2c 	.word	0x20000c2c

0800aa84 <_realloc_r>:
 800aa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa88:	4607      	mov	r7, r0
 800aa8a:	4614      	mov	r4, r2
 800aa8c:	460d      	mov	r5, r1
 800aa8e:	b921      	cbnz	r1, 800aa9a <_realloc_r+0x16>
 800aa90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa94:	4611      	mov	r1, r2
 800aa96:	f7ff bf69 	b.w	800a96c <_malloc_r>
 800aa9a:	b92a      	cbnz	r2, 800aaa8 <_realloc_r+0x24>
 800aa9c:	f001 fbe6 	bl	800c26c <_free_r>
 800aaa0:	4625      	mov	r5, r4
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa8:	f002 fc20 	bl	800d2ec <_malloc_usable_size_r>
 800aaac:	4284      	cmp	r4, r0
 800aaae:	4606      	mov	r6, r0
 800aab0:	d802      	bhi.n	800aab8 <_realloc_r+0x34>
 800aab2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aab6:	d8f4      	bhi.n	800aaa2 <_realloc_r+0x1e>
 800aab8:	4621      	mov	r1, r4
 800aaba:	4638      	mov	r0, r7
 800aabc:	f7ff ff56 	bl	800a96c <_malloc_r>
 800aac0:	4680      	mov	r8, r0
 800aac2:	b908      	cbnz	r0, 800aac8 <_realloc_r+0x44>
 800aac4:	4645      	mov	r5, r8
 800aac6:	e7ec      	b.n	800aaa2 <_realloc_r+0x1e>
 800aac8:	42b4      	cmp	r4, r6
 800aaca:	4622      	mov	r2, r4
 800aacc:	4629      	mov	r1, r5
 800aace:	bf28      	it	cs
 800aad0:	4632      	movcs	r2, r6
 800aad2:	f001 fbae 	bl	800c232 <memcpy>
 800aad6:	4629      	mov	r1, r5
 800aad8:	4638      	mov	r0, r7
 800aada:	f001 fbc7 	bl	800c26c <_free_r>
 800aade:	e7f1      	b.n	800aac4 <_realloc_r+0x40>

0800aae0 <sulp>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	4604      	mov	r4, r0
 800aae4:	460d      	mov	r5, r1
 800aae6:	ec45 4b10 	vmov	d0, r4, r5
 800aaea:	4616      	mov	r6, r2
 800aaec:	f002 fac0 	bl	800d070 <__ulp>
 800aaf0:	ec51 0b10 	vmov	r0, r1, d0
 800aaf4:	b17e      	cbz	r6, 800ab16 <sulp+0x36>
 800aaf6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aafa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dd09      	ble.n	800ab16 <sulp+0x36>
 800ab02:	051b      	lsls	r3, r3, #20
 800ab04:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab08:	2400      	movs	r4, #0
 800ab0a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab0e:	4622      	mov	r2, r4
 800ab10:	462b      	mov	r3, r5
 800ab12:	f7f5 fd71 	bl	80005f8 <__aeabi_dmul>
 800ab16:	ec41 0b10 	vmov	d0, r0, r1
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	0000      	movs	r0, r0
	...

0800ab20 <_strtod_l>:
 800ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab24:	b09f      	sub	sp, #124	@ 0x7c
 800ab26:	460c      	mov	r4, r1
 800ab28:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab2e:	9005      	str	r0, [sp, #20]
 800ab30:	f04f 0a00 	mov.w	sl, #0
 800ab34:	f04f 0b00 	mov.w	fp, #0
 800ab38:	460a      	mov	r2, r1
 800ab3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab3c:	7811      	ldrb	r1, [r2, #0]
 800ab3e:	292b      	cmp	r1, #43	@ 0x2b
 800ab40:	d04a      	beq.n	800abd8 <_strtod_l+0xb8>
 800ab42:	d838      	bhi.n	800abb6 <_strtod_l+0x96>
 800ab44:	290d      	cmp	r1, #13
 800ab46:	d832      	bhi.n	800abae <_strtod_l+0x8e>
 800ab48:	2908      	cmp	r1, #8
 800ab4a:	d832      	bhi.n	800abb2 <_strtod_l+0x92>
 800ab4c:	2900      	cmp	r1, #0
 800ab4e:	d03b      	beq.n	800abc8 <_strtod_l+0xa8>
 800ab50:	2200      	movs	r2, #0
 800ab52:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ab56:	782a      	ldrb	r2, [r5, #0]
 800ab58:	2a30      	cmp	r2, #48	@ 0x30
 800ab5a:	f040 80b2 	bne.w	800acc2 <_strtod_l+0x1a2>
 800ab5e:	786a      	ldrb	r2, [r5, #1]
 800ab60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab64:	2a58      	cmp	r2, #88	@ 0x58
 800ab66:	d16e      	bne.n	800ac46 <_strtod_l+0x126>
 800ab68:	9302      	str	r3, [sp, #8]
 800ab6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab6c:	9301      	str	r3, [sp, #4]
 800ab6e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	4a8f      	ldr	r2, [pc, #572]	@ (800adb0 <_strtod_l+0x290>)
 800ab74:	9805      	ldr	r0, [sp, #20]
 800ab76:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ab78:	a919      	add	r1, sp, #100	@ 0x64
 800ab7a:	f001 fc29 	bl	800c3d0 <__gethex>
 800ab7e:	f010 060f 	ands.w	r6, r0, #15
 800ab82:	4604      	mov	r4, r0
 800ab84:	d005      	beq.n	800ab92 <_strtod_l+0x72>
 800ab86:	2e06      	cmp	r6, #6
 800ab88:	d128      	bne.n	800abdc <_strtod_l+0xbc>
 800ab8a:	3501      	adds	r5, #1
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ab90:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f040 858e 	bne.w	800b6b6 <_strtod_l+0xb96>
 800ab9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab9c:	b1cb      	cbz	r3, 800abd2 <_strtod_l+0xb2>
 800ab9e:	4652      	mov	r2, sl
 800aba0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aba4:	ec43 2b10 	vmov	d0, r2, r3
 800aba8:	b01f      	add	sp, #124	@ 0x7c
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abae:	2920      	cmp	r1, #32
 800abb0:	d1ce      	bne.n	800ab50 <_strtod_l+0x30>
 800abb2:	3201      	adds	r2, #1
 800abb4:	e7c1      	b.n	800ab3a <_strtod_l+0x1a>
 800abb6:	292d      	cmp	r1, #45	@ 0x2d
 800abb8:	d1ca      	bne.n	800ab50 <_strtod_l+0x30>
 800abba:	2101      	movs	r1, #1
 800abbc:	910e      	str	r1, [sp, #56]	@ 0x38
 800abbe:	1c51      	adds	r1, r2, #1
 800abc0:	9119      	str	r1, [sp, #100]	@ 0x64
 800abc2:	7852      	ldrb	r2, [r2, #1]
 800abc4:	2a00      	cmp	r2, #0
 800abc6:	d1c5      	bne.n	800ab54 <_strtod_l+0x34>
 800abc8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abca:	9419      	str	r4, [sp, #100]	@ 0x64
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f040 8570 	bne.w	800b6b2 <_strtod_l+0xb92>
 800abd2:	4652      	mov	r2, sl
 800abd4:	465b      	mov	r3, fp
 800abd6:	e7e5      	b.n	800aba4 <_strtod_l+0x84>
 800abd8:	2100      	movs	r1, #0
 800abda:	e7ef      	b.n	800abbc <_strtod_l+0x9c>
 800abdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abde:	b13a      	cbz	r2, 800abf0 <_strtod_l+0xd0>
 800abe0:	2135      	movs	r1, #53	@ 0x35
 800abe2:	a81c      	add	r0, sp, #112	@ 0x70
 800abe4:	f002 fb3e 	bl	800d264 <__copybits>
 800abe8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abea:	9805      	ldr	r0, [sp, #20]
 800abec:	f001 ff14 	bl	800ca18 <_Bfree>
 800abf0:	3e01      	subs	r6, #1
 800abf2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800abf4:	2e04      	cmp	r6, #4
 800abf6:	d806      	bhi.n	800ac06 <_strtod_l+0xe6>
 800abf8:	e8df f006 	tbb	[pc, r6]
 800abfc:	201d0314 	.word	0x201d0314
 800ac00:	14          	.byte	0x14
 800ac01:	00          	.byte	0x00
 800ac02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac06:	05e1      	lsls	r1, r4, #23
 800ac08:	bf48      	it	mi
 800ac0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac12:	0d1b      	lsrs	r3, r3, #20
 800ac14:	051b      	lsls	r3, r3, #20
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1bb      	bne.n	800ab92 <_strtod_l+0x72>
 800ac1a:	f001 fadd 	bl	800c1d8 <__errno>
 800ac1e:	2322      	movs	r3, #34	@ 0x22
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	e7b6      	b.n	800ab92 <_strtod_l+0x72>
 800ac24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac34:	e7e7      	b.n	800ac06 <_strtod_l+0xe6>
 800ac36:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800adb8 <_strtod_l+0x298>
 800ac3a:	e7e4      	b.n	800ac06 <_strtod_l+0xe6>
 800ac3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac40:	f04f 3aff 	mov.w	sl, #4294967295
 800ac44:	e7df      	b.n	800ac06 <_strtod_l+0xe6>
 800ac46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	2b30      	cmp	r3, #48	@ 0x30
 800ac50:	d0f9      	beq.n	800ac46 <_strtod_l+0x126>
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d09d      	beq.n	800ab92 <_strtod_l+0x72>
 800ac56:	2301      	movs	r3, #1
 800ac58:	2700      	movs	r7, #0
 800ac5a:	9308      	str	r3, [sp, #32]
 800ac5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac5e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac60:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ac62:	46b9      	mov	r9, r7
 800ac64:	220a      	movs	r2, #10
 800ac66:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ac68:	7805      	ldrb	r5, [r0, #0]
 800ac6a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ac6e:	b2d9      	uxtb	r1, r3
 800ac70:	2909      	cmp	r1, #9
 800ac72:	d928      	bls.n	800acc6 <_strtod_l+0x1a6>
 800ac74:	494f      	ldr	r1, [pc, #316]	@ (800adb4 <_strtod_l+0x294>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	f001 fa32 	bl	800c0e0 <strncmp>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d032      	beq.n	800ace6 <_strtod_l+0x1c6>
 800ac80:	2000      	movs	r0, #0
 800ac82:	462a      	mov	r2, r5
 800ac84:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac86:	464d      	mov	r5, r9
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2a65      	cmp	r2, #101	@ 0x65
 800ac8c:	d001      	beq.n	800ac92 <_strtod_l+0x172>
 800ac8e:	2a45      	cmp	r2, #69	@ 0x45
 800ac90:	d114      	bne.n	800acbc <_strtod_l+0x19c>
 800ac92:	b91d      	cbnz	r5, 800ac9c <_strtod_l+0x17c>
 800ac94:	9a08      	ldr	r2, [sp, #32]
 800ac96:	4302      	orrs	r2, r0
 800ac98:	d096      	beq.n	800abc8 <_strtod_l+0xa8>
 800ac9a:	2500      	movs	r5, #0
 800ac9c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ac9e:	1c62      	adds	r2, r4, #1
 800aca0:	9219      	str	r2, [sp, #100]	@ 0x64
 800aca2:	7862      	ldrb	r2, [r4, #1]
 800aca4:	2a2b      	cmp	r2, #43	@ 0x2b
 800aca6:	d07a      	beq.n	800ad9e <_strtod_l+0x27e>
 800aca8:	2a2d      	cmp	r2, #45	@ 0x2d
 800acaa:	d07e      	beq.n	800adaa <_strtod_l+0x28a>
 800acac:	f04f 0c00 	mov.w	ip, #0
 800acb0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800acb4:	2909      	cmp	r1, #9
 800acb6:	f240 8085 	bls.w	800adc4 <_strtod_l+0x2a4>
 800acba:	9419      	str	r4, [sp, #100]	@ 0x64
 800acbc:	f04f 0800 	mov.w	r8, #0
 800acc0:	e0a5      	b.n	800ae0e <_strtod_l+0x2ee>
 800acc2:	2300      	movs	r3, #0
 800acc4:	e7c8      	b.n	800ac58 <_strtod_l+0x138>
 800acc6:	f1b9 0f08 	cmp.w	r9, #8
 800acca:	bfd8      	it	le
 800accc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800acce:	f100 0001 	add.w	r0, r0, #1
 800acd2:	bfda      	itte	le
 800acd4:	fb02 3301 	mlale	r3, r2, r1, r3
 800acd8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800acda:	fb02 3707 	mlagt	r7, r2, r7, r3
 800acde:	f109 0901 	add.w	r9, r9, #1
 800ace2:	9019      	str	r0, [sp, #100]	@ 0x64
 800ace4:	e7bf      	b.n	800ac66 <_strtod_l+0x146>
 800ace6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	9219      	str	r2, [sp, #100]	@ 0x64
 800acec:	785a      	ldrb	r2, [r3, #1]
 800acee:	f1b9 0f00 	cmp.w	r9, #0
 800acf2:	d03b      	beq.n	800ad6c <_strtod_l+0x24c>
 800acf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800acf6:	464d      	mov	r5, r9
 800acf8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800acfc:	2b09      	cmp	r3, #9
 800acfe:	d912      	bls.n	800ad26 <_strtod_l+0x206>
 800ad00:	2301      	movs	r3, #1
 800ad02:	e7c2      	b.n	800ac8a <_strtod_l+0x16a>
 800ad04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad06:	1c5a      	adds	r2, r3, #1
 800ad08:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad0a:	785a      	ldrb	r2, [r3, #1]
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	2a30      	cmp	r2, #48	@ 0x30
 800ad10:	d0f8      	beq.n	800ad04 <_strtod_l+0x1e4>
 800ad12:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad16:	2b08      	cmp	r3, #8
 800ad18:	f200 84d2 	bhi.w	800b6c0 <_strtod_l+0xba0>
 800ad1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad1e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad20:	2000      	movs	r0, #0
 800ad22:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad24:	4605      	mov	r5, r0
 800ad26:	3a30      	subs	r2, #48	@ 0x30
 800ad28:	f100 0301 	add.w	r3, r0, #1
 800ad2c:	d018      	beq.n	800ad60 <_strtod_l+0x240>
 800ad2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad30:	4419      	add	r1, r3
 800ad32:	910a      	str	r1, [sp, #40]	@ 0x28
 800ad34:	462e      	mov	r6, r5
 800ad36:	f04f 0e0a 	mov.w	lr, #10
 800ad3a:	1c71      	adds	r1, r6, #1
 800ad3c:	eba1 0c05 	sub.w	ip, r1, r5
 800ad40:	4563      	cmp	r3, ip
 800ad42:	dc15      	bgt.n	800ad70 <_strtod_l+0x250>
 800ad44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ad48:	182b      	adds	r3, r5, r0
 800ad4a:	2b08      	cmp	r3, #8
 800ad4c:	f105 0501 	add.w	r5, r5, #1
 800ad50:	4405      	add	r5, r0
 800ad52:	dc1a      	bgt.n	800ad8a <_strtod_l+0x26a>
 800ad54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad56:	230a      	movs	r3, #10
 800ad58:	fb03 2301 	mla	r3, r3, r1, r2
 800ad5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad5e:	2300      	movs	r3, #0
 800ad60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad62:	1c51      	adds	r1, r2, #1
 800ad64:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad66:	7852      	ldrb	r2, [r2, #1]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	e7c5      	b.n	800acf8 <_strtod_l+0x1d8>
 800ad6c:	4648      	mov	r0, r9
 800ad6e:	e7ce      	b.n	800ad0e <_strtod_l+0x1ee>
 800ad70:	2e08      	cmp	r6, #8
 800ad72:	dc05      	bgt.n	800ad80 <_strtod_l+0x260>
 800ad74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ad76:	fb0e f606 	mul.w	r6, lr, r6
 800ad7a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ad7c:	460e      	mov	r6, r1
 800ad7e:	e7dc      	b.n	800ad3a <_strtod_l+0x21a>
 800ad80:	2910      	cmp	r1, #16
 800ad82:	bfd8      	it	le
 800ad84:	fb0e f707 	mulle.w	r7, lr, r7
 800ad88:	e7f8      	b.n	800ad7c <_strtod_l+0x25c>
 800ad8a:	2b0f      	cmp	r3, #15
 800ad8c:	bfdc      	itt	le
 800ad8e:	230a      	movle	r3, #10
 800ad90:	fb03 2707 	mlale	r7, r3, r7, r2
 800ad94:	e7e3      	b.n	800ad5e <_strtod_l+0x23e>
 800ad96:	2300      	movs	r3, #0
 800ad98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e77a      	b.n	800ac94 <_strtod_l+0x174>
 800ad9e:	f04f 0c00 	mov.w	ip, #0
 800ada2:	1ca2      	adds	r2, r4, #2
 800ada4:	9219      	str	r2, [sp, #100]	@ 0x64
 800ada6:	78a2      	ldrb	r2, [r4, #2]
 800ada8:	e782      	b.n	800acb0 <_strtod_l+0x190>
 800adaa:	f04f 0c01 	mov.w	ip, #1
 800adae:	e7f8      	b.n	800ada2 <_strtod_l+0x282>
 800adb0:	0800fc28 	.word	0x0800fc28
 800adb4:	0800fa8c 	.word	0x0800fa8c
 800adb8:	7ff00000 	.word	0x7ff00000
 800adbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adbe:	1c51      	adds	r1, r2, #1
 800adc0:	9119      	str	r1, [sp, #100]	@ 0x64
 800adc2:	7852      	ldrb	r2, [r2, #1]
 800adc4:	2a30      	cmp	r2, #48	@ 0x30
 800adc6:	d0f9      	beq.n	800adbc <_strtod_l+0x29c>
 800adc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800adcc:	2908      	cmp	r1, #8
 800adce:	f63f af75 	bhi.w	800acbc <_strtod_l+0x19c>
 800add2:	3a30      	subs	r2, #48	@ 0x30
 800add4:	9209      	str	r2, [sp, #36]	@ 0x24
 800add6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800add8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800adda:	f04f 080a 	mov.w	r8, #10
 800adde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ade0:	1c56      	adds	r6, r2, #1
 800ade2:	9619      	str	r6, [sp, #100]	@ 0x64
 800ade4:	7852      	ldrb	r2, [r2, #1]
 800ade6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800adea:	f1be 0f09 	cmp.w	lr, #9
 800adee:	d939      	bls.n	800ae64 <_strtod_l+0x344>
 800adf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800adf2:	1a76      	subs	r6, r6, r1
 800adf4:	2e08      	cmp	r6, #8
 800adf6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800adfa:	dc03      	bgt.n	800ae04 <_strtod_l+0x2e4>
 800adfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adfe:	4588      	cmp	r8, r1
 800ae00:	bfa8      	it	ge
 800ae02:	4688      	movge	r8, r1
 800ae04:	f1bc 0f00 	cmp.w	ip, #0
 800ae08:	d001      	beq.n	800ae0e <_strtod_l+0x2ee>
 800ae0a:	f1c8 0800 	rsb	r8, r8, #0
 800ae0e:	2d00      	cmp	r5, #0
 800ae10:	d14e      	bne.n	800aeb0 <_strtod_l+0x390>
 800ae12:	9908      	ldr	r1, [sp, #32]
 800ae14:	4308      	orrs	r0, r1
 800ae16:	f47f aebc 	bne.w	800ab92 <_strtod_l+0x72>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f47f aed4 	bne.w	800abc8 <_strtod_l+0xa8>
 800ae20:	2a69      	cmp	r2, #105	@ 0x69
 800ae22:	d028      	beq.n	800ae76 <_strtod_l+0x356>
 800ae24:	dc25      	bgt.n	800ae72 <_strtod_l+0x352>
 800ae26:	2a49      	cmp	r2, #73	@ 0x49
 800ae28:	d025      	beq.n	800ae76 <_strtod_l+0x356>
 800ae2a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae2c:	f47f aecc 	bne.w	800abc8 <_strtod_l+0xa8>
 800ae30:	499a      	ldr	r1, [pc, #616]	@ (800b09c <_strtod_l+0x57c>)
 800ae32:	a819      	add	r0, sp, #100	@ 0x64
 800ae34:	f001 fcee 	bl	800c814 <__match>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	f43f aec5 	beq.w	800abc8 <_strtod_l+0xa8>
 800ae3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b28      	cmp	r3, #40	@ 0x28
 800ae44:	d12e      	bne.n	800aea4 <_strtod_l+0x384>
 800ae46:	4996      	ldr	r1, [pc, #600]	@ (800b0a0 <_strtod_l+0x580>)
 800ae48:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae4a:	a819      	add	r0, sp, #100	@ 0x64
 800ae4c:	f001 fcf6 	bl	800c83c <__hexnan>
 800ae50:	2805      	cmp	r0, #5
 800ae52:	d127      	bne.n	800aea4 <_strtod_l+0x384>
 800ae54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ae5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae62:	e696      	b.n	800ab92 <_strtod_l+0x72>
 800ae64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae66:	fb08 2101 	mla	r1, r8, r1, r2
 800ae6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ae6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae70:	e7b5      	b.n	800adde <_strtod_l+0x2be>
 800ae72:	2a6e      	cmp	r2, #110	@ 0x6e
 800ae74:	e7da      	b.n	800ae2c <_strtod_l+0x30c>
 800ae76:	498b      	ldr	r1, [pc, #556]	@ (800b0a4 <_strtod_l+0x584>)
 800ae78:	a819      	add	r0, sp, #100	@ 0x64
 800ae7a:	f001 fccb 	bl	800c814 <__match>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	f43f aea2 	beq.w	800abc8 <_strtod_l+0xa8>
 800ae84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae86:	4988      	ldr	r1, [pc, #544]	@ (800b0a8 <_strtod_l+0x588>)
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	a819      	add	r0, sp, #100	@ 0x64
 800ae8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae8e:	f001 fcc1 	bl	800c814 <__match>
 800ae92:	b910      	cbnz	r0, 800ae9a <_strtod_l+0x37a>
 800ae94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae96:	3301      	adds	r3, #1
 800ae98:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae9a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b0b8 <_strtod_l+0x598>
 800ae9e:	f04f 0a00 	mov.w	sl, #0
 800aea2:	e676      	b.n	800ab92 <_strtod_l+0x72>
 800aea4:	4881      	ldr	r0, [pc, #516]	@ (800b0ac <_strtod_l+0x58c>)
 800aea6:	f001 f9d3 	bl	800c250 <nan>
 800aeaa:	ec5b ab10 	vmov	sl, fp, d0
 800aeae:	e670      	b.n	800ab92 <_strtod_l+0x72>
 800aeb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aeb4:	eba8 0303 	sub.w	r3, r8, r3
 800aeb8:	f1b9 0f00 	cmp.w	r9, #0
 800aebc:	bf08      	it	eq
 800aebe:	46a9      	moveq	r9, r5
 800aec0:	2d10      	cmp	r5, #16
 800aec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aec4:	462c      	mov	r4, r5
 800aec6:	bfa8      	it	ge
 800aec8:	2410      	movge	r4, #16
 800aeca:	f7f5 fb1b 	bl	8000504 <__aeabi_ui2d>
 800aece:	2d09      	cmp	r5, #9
 800aed0:	4682      	mov	sl, r0
 800aed2:	468b      	mov	fp, r1
 800aed4:	dc13      	bgt.n	800aefe <_strtod_l+0x3de>
 800aed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f43f ae5a 	beq.w	800ab92 <_strtod_l+0x72>
 800aede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee0:	dd78      	ble.n	800afd4 <_strtod_l+0x4b4>
 800aee2:	2b16      	cmp	r3, #22
 800aee4:	dc5f      	bgt.n	800afa6 <_strtod_l+0x486>
 800aee6:	4972      	ldr	r1, [pc, #456]	@ (800b0b0 <_strtod_l+0x590>)
 800aee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aeec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aef0:	4652      	mov	r2, sl
 800aef2:	465b      	mov	r3, fp
 800aef4:	f7f5 fb80 	bl	80005f8 <__aeabi_dmul>
 800aef8:	4682      	mov	sl, r0
 800aefa:	468b      	mov	fp, r1
 800aefc:	e649      	b.n	800ab92 <_strtod_l+0x72>
 800aefe:	4b6c      	ldr	r3, [pc, #432]	@ (800b0b0 <_strtod_l+0x590>)
 800af00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af08:	f7f5 fb76 	bl	80005f8 <__aeabi_dmul>
 800af0c:	4682      	mov	sl, r0
 800af0e:	4638      	mov	r0, r7
 800af10:	468b      	mov	fp, r1
 800af12:	f7f5 faf7 	bl	8000504 <__aeabi_ui2d>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4650      	mov	r0, sl
 800af1c:	4659      	mov	r1, fp
 800af1e:	f7f5 f9b5 	bl	800028c <__adddf3>
 800af22:	2d0f      	cmp	r5, #15
 800af24:	4682      	mov	sl, r0
 800af26:	468b      	mov	fp, r1
 800af28:	ddd5      	ble.n	800aed6 <_strtod_l+0x3b6>
 800af2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2c:	1b2c      	subs	r4, r5, r4
 800af2e:	441c      	add	r4, r3
 800af30:	2c00      	cmp	r4, #0
 800af32:	f340 8093 	ble.w	800b05c <_strtod_l+0x53c>
 800af36:	f014 030f 	ands.w	r3, r4, #15
 800af3a:	d00a      	beq.n	800af52 <_strtod_l+0x432>
 800af3c:	495c      	ldr	r1, [pc, #368]	@ (800b0b0 <_strtod_l+0x590>)
 800af3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af42:	4652      	mov	r2, sl
 800af44:	465b      	mov	r3, fp
 800af46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af4a:	f7f5 fb55 	bl	80005f8 <__aeabi_dmul>
 800af4e:	4682      	mov	sl, r0
 800af50:	468b      	mov	fp, r1
 800af52:	f034 040f 	bics.w	r4, r4, #15
 800af56:	d073      	beq.n	800b040 <_strtod_l+0x520>
 800af58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800af5c:	dd49      	ble.n	800aff2 <_strtod_l+0x4d2>
 800af5e:	2400      	movs	r4, #0
 800af60:	46a0      	mov	r8, r4
 800af62:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af64:	46a1      	mov	r9, r4
 800af66:	9a05      	ldr	r2, [sp, #20]
 800af68:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b0b8 <_strtod_l+0x598>
 800af6c:	2322      	movs	r3, #34	@ 0x22
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	f04f 0a00 	mov.w	sl, #0
 800af74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af76:	2b00      	cmp	r3, #0
 800af78:	f43f ae0b 	beq.w	800ab92 <_strtod_l+0x72>
 800af7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af7e:	9805      	ldr	r0, [sp, #20]
 800af80:	f001 fd4a 	bl	800ca18 <_Bfree>
 800af84:	9805      	ldr	r0, [sp, #20]
 800af86:	4649      	mov	r1, r9
 800af88:	f001 fd46 	bl	800ca18 <_Bfree>
 800af8c:	9805      	ldr	r0, [sp, #20]
 800af8e:	4641      	mov	r1, r8
 800af90:	f001 fd42 	bl	800ca18 <_Bfree>
 800af94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af96:	9805      	ldr	r0, [sp, #20]
 800af98:	f001 fd3e 	bl	800ca18 <_Bfree>
 800af9c:	9805      	ldr	r0, [sp, #20]
 800af9e:	4621      	mov	r1, r4
 800afa0:	f001 fd3a 	bl	800ca18 <_Bfree>
 800afa4:	e5f5      	b.n	800ab92 <_strtod_l+0x72>
 800afa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afa8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800afac:	4293      	cmp	r3, r2
 800afae:	dbbc      	blt.n	800af2a <_strtod_l+0x40a>
 800afb0:	4c3f      	ldr	r4, [pc, #252]	@ (800b0b0 <_strtod_l+0x590>)
 800afb2:	f1c5 050f 	rsb	r5, r5, #15
 800afb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800afba:	4652      	mov	r2, sl
 800afbc:	465b      	mov	r3, fp
 800afbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc2:	f7f5 fb19 	bl	80005f8 <__aeabi_dmul>
 800afc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc8:	1b5d      	subs	r5, r3, r5
 800afca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800afce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afd2:	e78f      	b.n	800aef4 <_strtod_l+0x3d4>
 800afd4:	3316      	adds	r3, #22
 800afd6:	dba8      	blt.n	800af2a <_strtod_l+0x40a>
 800afd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afda:	eba3 0808 	sub.w	r8, r3, r8
 800afde:	4b34      	ldr	r3, [pc, #208]	@ (800b0b0 <_strtod_l+0x590>)
 800afe0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800afe4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800afe8:	4650      	mov	r0, sl
 800afea:	4659      	mov	r1, fp
 800afec:	f7f5 fc2e 	bl	800084c <__aeabi_ddiv>
 800aff0:	e782      	b.n	800aef8 <_strtod_l+0x3d8>
 800aff2:	2300      	movs	r3, #0
 800aff4:	4f2f      	ldr	r7, [pc, #188]	@ (800b0b4 <_strtod_l+0x594>)
 800aff6:	1124      	asrs	r4, r4, #4
 800aff8:	4650      	mov	r0, sl
 800affa:	4659      	mov	r1, fp
 800affc:	461e      	mov	r6, r3
 800affe:	2c01      	cmp	r4, #1
 800b000:	dc21      	bgt.n	800b046 <_strtod_l+0x526>
 800b002:	b10b      	cbz	r3, 800b008 <_strtod_l+0x4e8>
 800b004:	4682      	mov	sl, r0
 800b006:	468b      	mov	fp, r1
 800b008:	492a      	ldr	r1, [pc, #168]	@ (800b0b4 <_strtod_l+0x594>)
 800b00a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b00e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b012:	4652      	mov	r2, sl
 800b014:	465b      	mov	r3, fp
 800b016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b01a:	f7f5 faed 	bl	80005f8 <__aeabi_dmul>
 800b01e:	4b26      	ldr	r3, [pc, #152]	@ (800b0b8 <_strtod_l+0x598>)
 800b020:	460a      	mov	r2, r1
 800b022:	400b      	ands	r3, r1
 800b024:	4925      	ldr	r1, [pc, #148]	@ (800b0bc <_strtod_l+0x59c>)
 800b026:	428b      	cmp	r3, r1
 800b028:	4682      	mov	sl, r0
 800b02a:	d898      	bhi.n	800af5e <_strtod_l+0x43e>
 800b02c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b030:	428b      	cmp	r3, r1
 800b032:	bf86      	itte	hi
 800b034:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b0c0 <_strtod_l+0x5a0>
 800b038:	f04f 3aff 	movhi.w	sl, #4294967295
 800b03c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b040:	2300      	movs	r3, #0
 800b042:	9308      	str	r3, [sp, #32]
 800b044:	e076      	b.n	800b134 <_strtod_l+0x614>
 800b046:	07e2      	lsls	r2, r4, #31
 800b048:	d504      	bpl.n	800b054 <_strtod_l+0x534>
 800b04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b04e:	f7f5 fad3 	bl	80005f8 <__aeabi_dmul>
 800b052:	2301      	movs	r3, #1
 800b054:	3601      	adds	r6, #1
 800b056:	1064      	asrs	r4, r4, #1
 800b058:	3708      	adds	r7, #8
 800b05a:	e7d0      	b.n	800affe <_strtod_l+0x4de>
 800b05c:	d0f0      	beq.n	800b040 <_strtod_l+0x520>
 800b05e:	4264      	negs	r4, r4
 800b060:	f014 020f 	ands.w	r2, r4, #15
 800b064:	d00a      	beq.n	800b07c <_strtod_l+0x55c>
 800b066:	4b12      	ldr	r3, [pc, #72]	@ (800b0b0 <_strtod_l+0x590>)
 800b068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b06c:	4650      	mov	r0, sl
 800b06e:	4659      	mov	r1, fp
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 fbea 	bl	800084c <__aeabi_ddiv>
 800b078:	4682      	mov	sl, r0
 800b07a:	468b      	mov	fp, r1
 800b07c:	1124      	asrs	r4, r4, #4
 800b07e:	d0df      	beq.n	800b040 <_strtod_l+0x520>
 800b080:	2c1f      	cmp	r4, #31
 800b082:	dd1f      	ble.n	800b0c4 <_strtod_l+0x5a4>
 800b084:	2400      	movs	r4, #0
 800b086:	46a0      	mov	r8, r4
 800b088:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b08a:	46a1      	mov	r9, r4
 800b08c:	9a05      	ldr	r2, [sp, #20]
 800b08e:	2322      	movs	r3, #34	@ 0x22
 800b090:	f04f 0a00 	mov.w	sl, #0
 800b094:	f04f 0b00 	mov.w	fp, #0
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	e76b      	b.n	800af74 <_strtod_l+0x454>
 800b09c:	0800fa97 	.word	0x0800fa97
 800b0a0:	0800fc14 	.word	0x0800fc14
 800b0a4:	0800fa8e 	.word	0x0800fa8e
 800b0a8:	0800fa91 	.word	0x0800fa91
 800b0ac:	0800fc11 	.word	0x0800fc11
 800b0b0:	0800fda0 	.word	0x0800fda0
 800b0b4:	0800fd78 	.word	0x0800fd78
 800b0b8:	7ff00000 	.word	0x7ff00000
 800b0bc:	7ca00000 	.word	0x7ca00000
 800b0c0:	7fefffff 	.word	0x7fefffff
 800b0c4:	f014 0310 	ands.w	r3, r4, #16
 800b0c8:	bf18      	it	ne
 800b0ca:	236a      	movne	r3, #106	@ 0x6a
 800b0cc:	4ea9      	ldr	r6, [pc, #676]	@ (800b374 <_strtod_l+0x854>)
 800b0ce:	9308      	str	r3, [sp, #32]
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	07e7      	lsls	r7, r4, #31
 800b0d8:	d504      	bpl.n	800b0e4 <_strtod_l+0x5c4>
 800b0da:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0de:	f7f5 fa8b 	bl	80005f8 <__aeabi_dmul>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	1064      	asrs	r4, r4, #1
 800b0e6:	f106 0608 	add.w	r6, r6, #8
 800b0ea:	d1f4      	bne.n	800b0d6 <_strtod_l+0x5b6>
 800b0ec:	b10b      	cbz	r3, 800b0f2 <_strtod_l+0x5d2>
 800b0ee:	4682      	mov	sl, r0
 800b0f0:	468b      	mov	fp, r1
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	b1b3      	cbz	r3, 800b124 <_strtod_l+0x604>
 800b0f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	4659      	mov	r1, fp
 800b102:	dd0f      	ble.n	800b124 <_strtod_l+0x604>
 800b104:	2b1f      	cmp	r3, #31
 800b106:	dd56      	ble.n	800b1b6 <_strtod_l+0x696>
 800b108:	2b34      	cmp	r3, #52	@ 0x34
 800b10a:	bfde      	ittt	le
 800b10c:	f04f 33ff 	movle.w	r3, #4294967295
 800b110:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b114:	4093      	lslle	r3, r2
 800b116:	f04f 0a00 	mov.w	sl, #0
 800b11a:	bfcc      	ite	gt
 800b11c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b120:	ea03 0b01 	andle.w	fp, r3, r1
 800b124:	2200      	movs	r2, #0
 800b126:	2300      	movs	r3, #0
 800b128:	4650      	mov	r0, sl
 800b12a:	4659      	mov	r1, fp
 800b12c:	f7f5 fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b130:	2800      	cmp	r0, #0
 800b132:	d1a7      	bne.n	800b084 <_strtod_l+0x564>
 800b134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b13a:	9805      	ldr	r0, [sp, #20]
 800b13c:	462b      	mov	r3, r5
 800b13e:	464a      	mov	r2, r9
 800b140:	f001 fcd2 	bl	800cae8 <__s2b>
 800b144:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b146:	2800      	cmp	r0, #0
 800b148:	f43f af09 	beq.w	800af5e <_strtod_l+0x43e>
 800b14c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b14e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b150:	2a00      	cmp	r2, #0
 800b152:	eba3 0308 	sub.w	r3, r3, r8
 800b156:	bfa8      	it	ge
 800b158:	2300      	movge	r3, #0
 800b15a:	9312      	str	r3, [sp, #72]	@ 0x48
 800b15c:	2400      	movs	r4, #0
 800b15e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b162:	9316      	str	r3, [sp, #88]	@ 0x58
 800b164:	46a0      	mov	r8, r4
 800b166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b168:	9805      	ldr	r0, [sp, #20]
 800b16a:	6859      	ldr	r1, [r3, #4]
 800b16c:	f001 fc14 	bl	800c998 <_Balloc>
 800b170:	4681      	mov	r9, r0
 800b172:	2800      	cmp	r0, #0
 800b174:	f43f aef7 	beq.w	800af66 <_strtod_l+0x446>
 800b178:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b17a:	691a      	ldr	r2, [r3, #16]
 800b17c:	3202      	adds	r2, #2
 800b17e:	f103 010c 	add.w	r1, r3, #12
 800b182:	0092      	lsls	r2, r2, #2
 800b184:	300c      	adds	r0, #12
 800b186:	f001 f854 	bl	800c232 <memcpy>
 800b18a:	ec4b ab10 	vmov	d0, sl, fp
 800b18e:	9805      	ldr	r0, [sp, #20]
 800b190:	aa1c      	add	r2, sp, #112	@ 0x70
 800b192:	a91b      	add	r1, sp, #108	@ 0x6c
 800b194:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b198:	f001 ffda 	bl	800d150 <__d2b>
 800b19c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f43f aee1 	beq.w	800af66 <_strtod_l+0x446>
 800b1a4:	9805      	ldr	r0, [sp, #20]
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	f001 fd34 	bl	800cc14 <__i2b>
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	b948      	cbnz	r0, 800b1c4 <_strtod_l+0x6a4>
 800b1b0:	f04f 0800 	mov.w	r8, #0
 800b1b4:	e6d7      	b.n	800af66 <_strtod_l+0x446>
 800b1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b1be:	ea03 0a0a 	and.w	sl, r3, sl
 800b1c2:	e7af      	b.n	800b124 <_strtod_l+0x604>
 800b1c4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b1c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	bfab      	itete	ge
 800b1cc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b1ce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b1d0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b1d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b1d4:	bfac      	ite	ge
 800b1d6:	18ef      	addge	r7, r5, r3
 800b1d8:	1b5e      	sublt	r6, r3, r5
 800b1da:	9b08      	ldr	r3, [sp, #32]
 800b1dc:	1aed      	subs	r5, r5, r3
 800b1de:	4415      	add	r5, r2
 800b1e0:	4b65      	ldr	r3, [pc, #404]	@ (800b378 <_strtod_l+0x858>)
 800b1e2:	3d01      	subs	r5, #1
 800b1e4:	429d      	cmp	r5, r3
 800b1e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b1ea:	da50      	bge.n	800b28e <_strtod_l+0x76e>
 800b1ec:	1b5b      	subs	r3, r3, r5
 800b1ee:	2b1f      	cmp	r3, #31
 800b1f0:	eba2 0203 	sub.w	r2, r2, r3
 800b1f4:	f04f 0101 	mov.w	r1, #1
 800b1f8:	dc3d      	bgt.n	800b276 <_strtod_l+0x756>
 800b1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b1fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b200:	2300      	movs	r3, #0
 800b202:	9310      	str	r3, [sp, #64]	@ 0x40
 800b204:	18bd      	adds	r5, r7, r2
 800b206:	9b08      	ldr	r3, [sp, #32]
 800b208:	42af      	cmp	r7, r5
 800b20a:	4416      	add	r6, r2
 800b20c:	441e      	add	r6, r3
 800b20e:	463b      	mov	r3, r7
 800b210:	bfa8      	it	ge
 800b212:	462b      	movge	r3, r5
 800b214:	42b3      	cmp	r3, r6
 800b216:	bfa8      	it	ge
 800b218:	4633      	movge	r3, r6
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	bfc2      	ittt	gt
 800b21e:	1aed      	subgt	r5, r5, r3
 800b220:	1af6      	subgt	r6, r6, r3
 800b222:	1aff      	subgt	r7, r7, r3
 800b224:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b226:	2b00      	cmp	r3, #0
 800b228:	dd16      	ble.n	800b258 <_strtod_l+0x738>
 800b22a:	4641      	mov	r1, r8
 800b22c:	9805      	ldr	r0, [sp, #20]
 800b22e:	461a      	mov	r2, r3
 800b230:	f001 fda8 	bl	800cd84 <__pow5mult>
 800b234:	4680      	mov	r8, r0
 800b236:	2800      	cmp	r0, #0
 800b238:	d0ba      	beq.n	800b1b0 <_strtod_l+0x690>
 800b23a:	4601      	mov	r1, r0
 800b23c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b23e:	9805      	ldr	r0, [sp, #20]
 800b240:	f001 fcfe 	bl	800cc40 <__multiply>
 800b244:	900a      	str	r0, [sp, #40]	@ 0x28
 800b246:	2800      	cmp	r0, #0
 800b248:	f43f ae8d 	beq.w	800af66 <_strtod_l+0x446>
 800b24c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b24e:	9805      	ldr	r0, [sp, #20]
 800b250:	f001 fbe2 	bl	800ca18 <_Bfree>
 800b254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b256:	931a      	str	r3, [sp, #104]	@ 0x68
 800b258:	2d00      	cmp	r5, #0
 800b25a:	dc1d      	bgt.n	800b298 <_strtod_l+0x778>
 800b25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25e:	2b00      	cmp	r3, #0
 800b260:	dd23      	ble.n	800b2aa <_strtod_l+0x78a>
 800b262:	4649      	mov	r1, r9
 800b264:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b266:	9805      	ldr	r0, [sp, #20]
 800b268:	f001 fd8c 	bl	800cd84 <__pow5mult>
 800b26c:	4681      	mov	r9, r0
 800b26e:	b9e0      	cbnz	r0, 800b2aa <_strtod_l+0x78a>
 800b270:	f04f 0900 	mov.w	r9, #0
 800b274:	e677      	b.n	800af66 <_strtod_l+0x446>
 800b276:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b27a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b27e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b282:	35e2      	adds	r5, #226	@ 0xe2
 800b284:	fa01 f305 	lsl.w	r3, r1, r5
 800b288:	9310      	str	r3, [sp, #64]	@ 0x40
 800b28a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b28c:	e7ba      	b.n	800b204 <_strtod_l+0x6e4>
 800b28e:	2300      	movs	r3, #0
 800b290:	9310      	str	r3, [sp, #64]	@ 0x40
 800b292:	2301      	movs	r3, #1
 800b294:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b296:	e7b5      	b.n	800b204 <_strtod_l+0x6e4>
 800b298:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b29a:	9805      	ldr	r0, [sp, #20]
 800b29c:	462a      	mov	r2, r5
 800b29e:	f001 fdcb 	bl	800ce38 <__lshift>
 800b2a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d1d9      	bne.n	800b25c <_strtod_l+0x73c>
 800b2a8:	e65d      	b.n	800af66 <_strtod_l+0x446>
 800b2aa:	2e00      	cmp	r6, #0
 800b2ac:	dd07      	ble.n	800b2be <_strtod_l+0x79e>
 800b2ae:	4649      	mov	r1, r9
 800b2b0:	9805      	ldr	r0, [sp, #20]
 800b2b2:	4632      	mov	r2, r6
 800b2b4:	f001 fdc0 	bl	800ce38 <__lshift>
 800b2b8:	4681      	mov	r9, r0
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d0d8      	beq.n	800b270 <_strtod_l+0x750>
 800b2be:	2f00      	cmp	r7, #0
 800b2c0:	dd08      	ble.n	800b2d4 <_strtod_l+0x7b4>
 800b2c2:	4641      	mov	r1, r8
 800b2c4:	9805      	ldr	r0, [sp, #20]
 800b2c6:	463a      	mov	r2, r7
 800b2c8:	f001 fdb6 	bl	800ce38 <__lshift>
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f ae49 	beq.w	800af66 <_strtod_l+0x446>
 800b2d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2d6:	9805      	ldr	r0, [sp, #20]
 800b2d8:	464a      	mov	r2, r9
 800b2da:	f001 fe35 	bl	800cf48 <__mdiff>
 800b2de:	4604      	mov	r4, r0
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	f43f ae40 	beq.w	800af66 <_strtod_l+0x446>
 800b2e6:	68c3      	ldr	r3, [r0, #12]
 800b2e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	60c3      	str	r3, [r0, #12]
 800b2ee:	4641      	mov	r1, r8
 800b2f0:	f001 fe0e 	bl	800cf10 <__mcmp>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	da45      	bge.n	800b384 <_strtod_l+0x864>
 800b2f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2fa:	ea53 030a 	orrs.w	r3, r3, sl
 800b2fe:	d16b      	bne.n	800b3d8 <_strtod_l+0x8b8>
 800b300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b304:	2b00      	cmp	r3, #0
 800b306:	d167      	bne.n	800b3d8 <_strtod_l+0x8b8>
 800b308:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b30c:	0d1b      	lsrs	r3, r3, #20
 800b30e:	051b      	lsls	r3, r3, #20
 800b310:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b314:	d960      	bls.n	800b3d8 <_strtod_l+0x8b8>
 800b316:	6963      	ldr	r3, [r4, #20]
 800b318:	b913      	cbnz	r3, 800b320 <_strtod_l+0x800>
 800b31a:	6923      	ldr	r3, [r4, #16]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	dd5b      	ble.n	800b3d8 <_strtod_l+0x8b8>
 800b320:	4621      	mov	r1, r4
 800b322:	2201      	movs	r2, #1
 800b324:	9805      	ldr	r0, [sp, #20]
 800b326:	f001 fd87 	bl	800ce38 <__lshift>
 800b32a:	4641      	mov	r1, r8
 800b32c:	4604      	mov	r4, r0
 800b32e:	f001 fdef 	bl	800cf10 <__mcmp>
 800b332:	2800      	cmp	r0, #0
 800b334:	dd50      	ble.n	800b3d8 <_strtod_l+0x8b8>
 800b336:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b33a:	9a08      	ldr	r2, [sp, #32]
 800b33c:	0d1b      	lsrs	r3, r3, #20
 800b33e:	051b      	lsls	r3, r3, #20
 800b340:	2a00      	cmp	r2, #0
 800b342:	d06a      	beq.n	800b41a <_strtod_l+0x8fa>
 800b344:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b348:	d867      	bhi.n	800b41a <_strtod_l+0x8fa>
 800b34a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b34e:	f67f ae9d 	bls.w	800b08c <_strtod_l+0x56c>
 800b352:	4b0a      	ldr	r3, [pc, #40]	@ (800b37c <_strtod_l+0x85c>)
 800b354:	4650      	mov	r0, sl
 800b356:	4659      	mov	r1, fp
 800b358:	2200      	movs	r2, #0
 800b35a:	f7f5 f94d 	bl	80005f8 <__aeabi_dmul>
 800b35e:	4b08      	ldr	r3, [pc, #32]	@ (800b380 <_strtod_l+0x860>)
 800b360:	400b      	ands	r3, r1
 800b362:	4682      	mov	sl, r0
 800b364:	468b      	mov	fp, r1
 800b366:	2b00      	cmp	r3, #0
 800b368:	f47f ae08 	bne.w	800af7c <_strtod_l+0x45c>
 800b36c:	9a05      	ldr	r2, [sp, #20]
 800b36e:	2322      	movs	r3, #34	@ 0x22
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	e603      	b.n	800af7c <_strtod_l+0x45c>
 800b374:	0800fc40 	.word	0x0800fc40
 800b378:	fffffc02 	.word	0xfffffc02
 800b37c:	39500000 	.word	0x39500000
 800b380:	7ff00000 	.word	0x7ff00000
 800b384:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b388:	d165      	bne.n	800b456 <_strtod_l+0x936>
 800b38a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b38c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b390:	b35a      	cbz	r2, 800b3ea <_strtod_l+0x8ca>
 800b392:	4a9f      	ldr	r2, [pc, #636]	@ (800b610 <_strtod_l+0xaf0>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d12b      	bne.n	800b3f0 <_strtod_l+0x8d0>
 800b398:	9b08      	ldr	r3, [sp, #32]
 800b39a:	4651      	mov	r1, sl
 800b39c:	b303      	cbz	r3, 800b3e0 <_strtod_l+0x8c0>
 800b39e:	4b9d      	ldr	r3, [pc, #628]	@ (800b614 <_strtod_l+0xaf4>)
 800b3a0:	465a      	mov	r2, fp
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ac:	d81b      	bhi.n	800b3e6 <_strtod_l+0x8c6>
 800b3ae:	0d1b      	lsrs	r3, r3, #20
 800b3b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b8:	4299      	cmp	r1, r3
 800b3ba:	d119      	bne.n	800b3f0 <_strtod_l+0x8d0>
 800b3bc:	4b96      	ldr	r3, [pc, #600]	@ (800b618 <_strtod_l+0xaf8>)
 800b3be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d102      	bne.n	800b3ca <_strtod_l+0x8aa>
 800b3c4:	3101      	adds	r1, #1
 800b3c6:	f43f adce 	beq.w	800af66 <_strtod_l+0x446>
 800b3ca:	4b92      	ldr	r3, [pc, #584]	@ (800b614 <_strtod_l+0xaf4>)
 800b3cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3ce:	401a      	ands	r2, r3
 800b3d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b3d4:	f04f 0a00 	mov.w	sl, #0
 800b3d8:	9b08      	ldr	r3, [sp, #32]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1b9      	bne.n	800b352 <_strtod_l+0x832>
 800b3de:	e5cd      	b.n	800af7c <_strtod_l+0x45c>
 800b3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e4:	e7e8      	b.n	800b3b8 <_strtod_l+0x898>
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	e7e6      	b.n	800b3b8 <_strtod_l+0x898>
 800b3ea:	ea53 030a 	orrs.w	r3, r3, sl
 800b3ee:	d0a2      	beq.n	800b336 <_strtod_l+0x816>
 800b3f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3f2:	b1db      	cbz	r3, 800b42c <_strtod_l+0x90c>
 800b3f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3f6:	4213      	tst	r3, r2
 800b3f8:	d0ee      	beq.n	800b3d8 <_strtod_l+0x8b8>
 800b3fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3fc:	9a08      	ldr	r2, [sp, #32]
 800b3fe:	4650      	mov	r0, sl
 800b400:	4659      	mov	r1, fp
 800b402:	b1bb      	cbz	r3, 800b434 <_strtod_l+0x914>
 800b404:	f7ff fb6c 	bl	800aae0 <sulp>
 800b408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b40c:	ec53 2b10 	vmov	r2, r3, d0
 800b410:	f7f4 ff3c 	bl	800028c <__adddf3>
 800b414:	4682      	mov	sl, r0
 800b416:	468b      	mov	fp, r1
 800b418:	e7de      	b.n	800b3d8 <_strtod_l+0x8b8>
 800b41a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b41e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b422:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b426:	f04f 3aff 	mov.w	sl, #4294967295
 800b42a:	e7d5      	b.n	800b3d8 <_strtod_l+0x8b8>
 800b42c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b42e:	ea13 0f0a 	tst.w	r3, sl
 800b432:	e7e1      	b.n	800b3f8 <_strtod_l+0x8d8>
 800b434:	f7ff fb54 	bl	800aae0 <sulp>
 800b438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b43c:	ec53 2b10 	vmov	r2, r3, d0
 800b440:	f7f4 ff22 	bl	8000288 <__aeabi_dsub>
 800b444:	2200      	movs	r2, #0
 800b446:	2300      	movs	r3, #0
 800b448:	4682      	mov	sl, r0
 800b44a:	468b      	mov	fp, r1
 800b44c:	f7f5 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b450:	2800      	cmp	r0, #0
 800b452:	d0c1      	beq.n	800b3d8 <_strtod_l+0x8b8>
 800b454:	e61a      	b.n	800b08c <_strtod_l+0x56c>
 800b456:	4641      	mov	r1, r8
 800b458:	4620      	mov	r0, r4
 800b45a:	f001 fed1 	bl	800d200 <__ratio>
 800b45e:	ec57 6b10 	vmov	r6, r7, d0
 800b462:	2200      	movs	r2, #0
 800b464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b468:	4630      	mov	r0, r6
 800b46a:	4639      	mov	r1, r7
 800b46c:	f7f5 fb40 	bl	8000af0 <__aeabi_dcmple>
 800b470:	2800      	cmp	r0, #0
 800b472:	d06f      	beq.n	800b554 <_strtod_l+0xa34>
 800b474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b476:	2b00      	cmp	r3, #0
 800b478:	d17a      	bne.n	800b570 <_strtod_l+0xa50>
 800b47a:	f1ba 0f00 	cmp.w	sl, #0
 800b47e:	d158      	bne.n	800b532 <_strtod_l+0xa12>
 800b480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b486:	2b00      	cmp	r3, #0
 800b488:	d15a      	bne.n	800b540 <_strtod_l+0xa20>
 800b48a:	4b64      	ldr	r3, [pc, #400]	@ (800b61c <_strtod_l+0xafc>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7f5 fb23 	bl	8000adc <__aeabi_dcmplt>
 800b496:	2800      	cmp	r0, #0
 800b498:	d159      	bne.n	800b54e <_strtod_l+0xa2e>
 800b49a:	4630      	mov	r0, r6
 800b49c:	4639      	mov	r1, r7
 800b49e:	4b60      	ldr	r3, [pc, #384]	@ (800b620 <_strtod_l+0xb00>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f7f5 f8a9 	bl	80005f8 <__aeabi_dmul>
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	460f      	mov	r7, r1
 800b4aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b4ae:	9606      	str	r6, [sp, #24]
 800b4b0:	9307      	str	r3, [sp, #28]
 800b4b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4b6:	4d57      	ldr	r5, [pc, #348]	@ (800b614 <_strtod_l+0xaf4>)
 800b4b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4be:	401d      	ands	r5, r3
 800b4c0:	4b58      	ldr	r3, [pc, #352]	@ (800b624 <_strtod_l+0xb04>)
 800b4c2:	429d      	cmp	r5, r3
 800b4c4:	f040 80b2 	bne.w	800b62c <_strtod_l+0xb0c>
 800b4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b4ce:	ec4b ab10 	vmov	d0, sl, fp
 800b4d2:	f001 fdcd 	bl	800d070 <__ulp>
 800b4d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4da:	ec51 0b10 	vmov	r0, r1, d0
 800b4de:	f7f5 f88b 	bl	80005f8 <__aeabi_dmul>
 800b4e2:	4652      	mov	r2, sl
 800b4e4:	465b      	mov	r3, fp
 800b4e6:	f7f4 fed1 	bl	800028c <__adddf3>
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4949      	ldr	r1, [pc, #292]	@ (800b614 <_strtod_l+0xaf4>)
 800b4ee:	4a4e      	ldr	r2, [pc, #312]	@ (800b628 <_strtod_l+0xb08>)
 800b4f0:	4019      	ands	r1, r3
 800b4f2:	4291      	cmp	r1, r2
 800b4f4:	4682      	mov	sl, r0
 800b4f6:	d942      	bls.n	800b57e <_strtod_l+0xa5e>
 800b4f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4fa:	4b47      	ldr	r3, [pc, #284]	@ (800b618 <_strtod_l+0xaf8>)
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d103      	bne.n	800b508 <_strtod_l+0x9e8>
 800b500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b502:	3301      	adds	r3, #1
 800b504:	f43f ad2f 	beq.w	800af66 <_strtod_l+0x446>
 800b508:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b618 <_strtod_l+0xaf8>
 800b50c:	f04f 3aff 	mov.w	sl, #4294967295
 800b510:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b512:	9805      	ldr	r0, [sp, #20]
 800b514:	f001 fa80 	bl	800ca18 <_Bfree>
 800b518:	9805      	ldr	r0, [sp, #20]
 800b51a:	4649      	mov	r1, r9
 800b51c:	f001 fa7c 	bl	800ca18 <_Bfree>
 800b520:	9805      	ldr	r0, [sp, #20]
 800b522:	4641      	mov	r1, r8
 800b524:	f001 fa78 	bl	800ca18 <_Bfree>
 800b528:	9805      	ldr	r0, [sp, #20]
 800b52a:	4621      	mov	r1, r4
 800b52c:	f001 fa74 	bl	800ca18 <_Bfree>
 800b530:	e619      	b.n	800b166 <_strtod_l+0x646>
 800b532:	f1ba 0f01 	cmp.w	sl, #1
 800b536:	d103      	bne.n	800b540 <_strtod_l+0xa20>
 800b538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f43f ada6 	beq.w	800b08c <_strtod_l+0x56c>
 800b540:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b5f0 <_strtod_l+0xad0>
 800b544:	4f35      	ldr	r7, [pc, #212]	@ (800b61c <_strtod_l+0xafc>)
 800b546:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b54a:	2600      	movs	r6, #0
 800b54c:	e7b1      	b.n	800b4b2 <_strtod_l+0x992>
 800b54e:	4f34      	ldr	r7, [pc, #208]	@ (800b620 <_strtod_l+0xb00>)
 800b550:	2600      	movs	r6, #0
 800b552:	e7aa      	b.n	800b4aa <_strtod_l+0x98a>
 800b554:	4b32      	ldr	r3, [pc, #200]	@ (800b620 <_strtod_l+0xb00>)
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	2200      	movs	r2, #0
 800b55c:	f7f5 f84c 	bl	80005f8 <__aeabi_dmul>
 800b560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b562:	4606      	mov	r6, r0
 800b564:	460f      	mov	r7, r1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d09f      	beq.n	800b4aa <_strtod_l+0x98a>
 800b56a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b56e:	e7a0      	b.n	800b4b2 <_strtod_l+0x992>
 800b570:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b5f8 <_strtod_l+0xad8>
 800b574:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b578:	ec57 6b17 	vmov	r6, r7, d7
 800b57c:	e799      	b.n	800b4b2 <_strtod_l+0x992>
 800b57e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1c1      	bne.n	800b510 <_strtod_l+0x9f0>
 800b58c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b590:	0d1b      	lsrs	r3, r3, #20
 800b592:	051b      	lsls	r3, r3, #20
 800b594:	429d      	cmp	r5, r3
 800b596:	d1bb      	bne.n	800b510 <_strtod_l+0x9f0>
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	f7f5 fb8c 	bl	8000cb8 <__aeabi_d2lz>
 800b5a0:	f7f4 fffc 	bl	800059c <__aeabi_l2d>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f4 fe6c 	bl	8000288 <__aeabi_dsub>
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5be:	ea46 060a 	orr.w	r6, r6, sl
 800b5c2:	431e      	orrs	r6, r3
 800b5c4:	d06f      	beq.n	800b6a6 <_strtod_l+0xb86>
 800b5c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b600 <_strtod_l+0xae0>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f7f5 fa86 	bl	8000adc <__aeabi_dcmplt>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	f47f acd3 	bne.w	800af7c <_strtod_l+0x45c>
 800b5d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b608 <_strtod_l+0xae8>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5e0:	f7f5 fa9a 	bl	8000b18 <__aeabi_dcmpgt>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d093      	beq.n	800b510 <_strtod_l+0x9f0>
 800b5e8:	e4c8      	b.n	800af7c <_strtod_l+0x45c>
 800b5ea:	bf00      	nop
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	00000000 	.word	0x00000000
 800b5f4:	bff00000 	.word	0xbff00000
 800b5f8:	00000000 	.word	0x00000000
 800b5fc:	3ff00000 	.word	0x3ff00000
 800b600:	94a03595 	.word	0x94a03595
 800b604:	3fdfffff 	.word	0x3fdfffff
 800b608:	35afe535 	.word	0x35afe535
 800b60c:	3fe00000 	.word	0x3fe00000
 800b610:	000fffff 	.word	0x000fffff
 800b614:	7ff00000 	.word	0x7ff00000
 800b618:	7fefffff 	.word	0x7fefffff
 800b61c:	3ff00000 	.word	0x3ff00000
 800b620:	3fe00000 	.word	0x3fe00000
 800b624:	7fe00000 	.word	0x7fe00000
 800b628:	7c9fffff 	.word	0x7c9fffff
 800b62c:	9b08      	ldr	r3, [sp, #32]
 800b62e:	b323      	cbz	r3, 800b67a <_strtod_l+0xb5a>
 800b630:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b634:	d821      	bhi.n	800b67a <_strtod_l+0xb5a>
 800b636:	a328      	add	r3, pc, #160	@ (adr r3, 800b6d8 <_strtod_l+0xbb8>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f5 fa56 	bl	8000af0 <__aeabi_dcmple>
 800b644:	b1a0      	cbz	r0, 800b670 <_strtod_l+0xb50>
 800b646:	4639      	mov	r1, r7
 800b648:	4630      	mov	r0, r6
 800b64a:	f7f5 faad 	bl	8000ba8 <__aeabi_d2uiz>
 800b64e:	2801      	cmp	r0, #1
 800b650:	bf38      	it	cc
 800b652:	2001      	movcc	r0, #1
 800b654:	f7f4 ff56 	bl	8000504 <__aeabi_ui2d>
 800b658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b65a:	4606      	mov	r6, r0
 800b65c:	460f      	mov	r7, r1
 800b65e:	b9fb      	cbnz	r3, 800b6a0 <_strtod_l+0xb80>
 800b660:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b664:	9014      	str	r0, [sp, #80]	@ 0x50
 800b666:	9315      	str	r3, [sp, #84]	@ 0x54
 800b668:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b66c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b670:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b672:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b676:	1b5b      	subs	r3, r3, r5
 800b678:	9311      	str	r3, [sp, #68]	@ 0x44
 800b67a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b67e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b682:	f001 fcf5 	bl	800d070 <__ulp>
 800b686:	4650      	mov	r0, sl
 800b688:	ec53 2b10 	vmov	r2, r3, d0
 800b68c:	4659      	mov	r1, fp
 800b68e:	f7f4 ffb3 	bl	80005f8 <__aeabi_dmul>
 800b692:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b696:	f7f4 fdf9 	bl	800028c <__adddf3>
 800b69a:	4682      	mov	sl, r0
 800b69c:	468b      	mov	fp, r1
 800b69e:	e770      	b.n	800b582 <_strtod_l+0xa62>
 800b6a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6a4:	e7e0      	b.n	800b668 <_strtod_l+0xb48>
 800b6a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6e0 <_strtod_l+0xbc0>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f7f5 fa16 	bl	8000adc <__aeabi_dcmplt>
 800b6b0:	e798      	b.n	800b5e4 <_strtod_l+0xac4>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ba:	6013      	str	r3, [r2, #0]
 800b6bc:	f7ff ba6d 	b.w	800ab9a <_strtod_l+0x7a>
 800b6c0:	2a65      	cmp	r2, #101	@ 0x65
 800b6c2:	f43f ab68 	beq.w	800ad96 <_strtod_l+0x276>
 800b6c6:	2a45      	cmp	r2, #69	@ 0x45
 800b6c8:	f43f ab65 	beq.w	800ad96 <_strtod_l+0x276>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f7ff bba0 	b.w	800ae12 <_strtod_l+0x2f2>
 800b6d2:	bf00      	nop
 800b6d4:	f3af 8000 	nop.w
 800b6d8:	ffc00000 	.word	0xffc00000
 800b6dc:	41dfffff 	.word	0x41dfffff
 800b6e0:	94a03595 	.word	0x94a03595
 800b6e4:	3fcfffff 	.word	0x3fcfffff

0800b6e8 <_strtod_r>:
 800b6e8:	4b01      	ldr	r3, [pc, #4]	@ (800b6f0 <_strtod_r+0x8>)
 800b6ea:	f7ff ba19 	b.w	800ab20 <_strtod_l>
 800b6ee:	bf00      	nop
 800b6f0:	20000090 	.word	0x20000090

0800b6f4 <_strtol_l.isra.0>:
 800b6f4:	2b24      	cmp	r3, #36	@ 0x24
 800b6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fa:	4686      	mov	lr, r0
 800b6fc:	4690      	mov	r8, r2
 800b6fe:	d801      	bhi.n	800b704 <_strtol_l.isra.0+0x10>
 800b700:	2b01      	cmp	r3, #1
 800b702:	d106      	bne.n	800b712 <_strtol_l.isra.0+0x1e>
 800b704:	f000 fd68 	bl	800c1d8 <__errno>
 800b708:	2316      	movs	r3, #22
 800b70a:	6003      	str	r3, [r0, #0]
 800b70c:	2000      	movs	r0, #0
 800b70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b712:	4834      	ldr	r0, [pc, #208]	@ (800b7e4 <_strtol_l.isra.0+0xf0>)
 800b714:	460d      	mov	r5, r1
 800b716:	462a      	mov	r2, r5
 800b718:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b71c:	5d06      	ldrb	r6, [r0, r4]
 800b71e:	f016 0608 	ands.w	r6, r6, #8
 800b722:	d1f8      	bne.n	800b716 <_strtol_l.isra.0+0x22>
 800b724:	2c2d      	cmp	r4, #45	@ 0x2d
 800b726:	d110      	bne.n	800b74a <_strtol_l.isra.0+0x56>
 800b728:	782c      	ldrb	r4, [r5, #0]
 800b72a:	2601      	movs	r6, #1
 800b72c:	1c95      	adds	r5, r2, #2
 800b72e:	f033 0210 	bics.w	r2, r3, #16
 800b732:	d115      	bne.n	800b760 <_strtol_l.isra.0+0x6c>
 800b734:	2c30      	cmp	r4, #48	@ 0x30
 800b736:	d10d      	bne.n	800b754 <_strtol_l.isra.0+0x60>
 800b738:	782a      	ldrb	r2, [r5, #0]
 800b73a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b73e:	2a58      	cmp	r2, #88	@ 0x58
 800b740:	d108      	bne.n	800b754 <_strtol_l.isra.0+0x60>
 800b742:	786c      	ldrb	r4, [r5, #1]
 800b744:	3502      	adds	r5, #2
 800b746:	2310      	movs	r3, #16
 800b748:	e00a      	b.n	800b760 <_strtol_l.isra.0+0x6c>
 800b74a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b74c:	bf04      	itt	eq
 800b74e:	782c      	ldrbeq	r4, [r5, #0]
 800b750:	1c95      	addeq	r5, r2, #2
 800b752:	e7ec      	b.n	800b72e <_strtol_l.isra.0+0x3a>
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1f6      	bne.n	800b746 <_strtol_l.isra.0+0x52>
 800b758:	2c30      	cmp	r4, #48	@ 0x30
 800b75a:	bf14      	ite	ne
 800b75c:	230a      	movne	r3, #10
 800b75e:	2308      	moveq	r3, #8
 800b760:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b764:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b768:	2200      	movs	r2, #0
 800b76a:	fbbc f9f3 	udiv	r9, ip, r3
 800b76e:	4610      	mov	r0, r2
 800b770:	fb03 ca19 	mls	sl, r3, r9, ip
 800b774:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b778:	2f09      	cmp	r7, #9
 800b77a:	d80f      	bhi.n	800b79c <_strtol_l.isra.0+0xa8>
 800b77c:	463c      	mov	r4, r7
 800b77e:	42a3      	cmp	r3, r4
 800b780:	dd1b      	ble.n	800b7ba <_strtol_l.isra.0+0xc6>
 800b782:	1c57      	adds	r7, r2, #1
 800b784:	d007      	beq.n	800b796 <_strtol_l.isra.0+0xa2>
 800b786:	4581      	cmp	r9, r0
 800b788:	d314      	bcc.n	800b7b4 <_strtol_l.isra.0+0xc0>
 800b78a:	d101      	bne.n	800b790 <_strtol_l.isra.0+0x9c>
 800b78c:	45a2      	cmp	sl, r4
 800b78e:	db11      	blt.n	800b7b4 <_strtol_l.isra.0+0xc0>
 800b790:	fb00 4003 	mla	r0, r0, r3, r4
 800b794:	2201      	movs	r2, #1
 800b796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b79a:	e7eb      	b.n	800b774 <_strtol_l.isra.0+0x80>
 800b79c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7a0:	2f19      	cmp	r7, #25
 800b7a2:	d801      	bhi.n	800b7a8 <_strtol_l.isra.0+0xb4>
 800b7a4:	3c37      	subs	r4, #55	@ 0x37
 800b7a6:	e7ea      	b.n	800b77e <_strtol_l.isra.0+0x8a>
 800b7a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7ac:	2f19      	cmp	r7, #25
 800b7ae:	d804      	bhi.n	800b7ba <_strtol_l.isra.0+0xc6>
 800b7b0:	3c57      	subs	r4, #87	@ 0x57
 800b7b2:	e7e4      	b.n	800b77e <_strtol_l.isra.0+0x8a>
 800b7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b8:	e7ed      	b.n	800b796 <_strtol_l.isra.0+0xa2>
 800b7ba:	1c53      	adds	r3, r2, #1
 800b7bc:	d108      	bne.n	800b7d0 <_strtol_l.isra.0+0xdc>
 800b7be:	2322      	movs	r3, #34	@ 0x22
 800b7c0:	f8ce 3000 	str.w	r3, [lr]
 800b7c4:	4660      	mov	r0, ip
 800b7c6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ca:	d0a0      	beq.n	800b70e <_strtol_l.isra.0+0x1a>
 800b7cc:	1e69      	subs	r1, r5, #1
 800b7ce:	e006      	b.n	800b7de <_strtol_l.isra.0+0xea>
 800b7d0:	b106      	cbz	r6, 800b7d4 <_strtol_l.isra.0+0xe0>
 800b7d2:	4240      	negs	r0, r0
 800b7d4:	f1b8 0f00 	cmp.w	r8, #0
 800b7d8:	d099      	beq.n	800b70e <_strtol_l.isra.0+0x1a>
 800b7da:	2a00      	cmp	r2, #0
 800b7dc:	d1f6      	bne.n	800b7cc <_strtol_l.isra.0+0xd8>
 800b7de:	f8c8 1000 	str.w	r1, [r8]
 800b7e2:	e794      	b.n	800b70e <_strtol_l.isra.0+0x1a>
 800b7e4:	0800fc69 	.word	0x0800fc69

0800b7e8 <_strtol_r>:
 800b7e8:	f7ff bf84 	b.w	800b6f4 <_strtol_l.isra.0>

0800b7ec <strtol>:
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	460a      	mov	r2, r1
 800b7f0:	4601      	mov	r1, r0
 800b7f2:	4802      	ldr	r0, [pc, #8]	@ (800b7fc <strtol+0x10>)
 800b7f4:	6800      	ldr	r0, [r0, #0]
 800b7f6:	f7ff bf7d 	b.w	800b6f4 <_strtol_l.isra.0>
 800b7fa:	bf00      	nop
 800b7fc:	200001fc 	.word	0x200001fc

0800b800 <_scanf_float>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	b087      	sub	sp, #28
 800b806:	4691      	mov	r9, r2
 800b808:	9303      	str	r3, [sp, #12]
 800b80a:	688b      	ldr	r3, [r1, #8]
 800b80c:	1e5a      	subs	r2, r3, #1
 800b80e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b812:	bf81      	itttt	hi
 800b814:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b818:	eb03 0b05 	addhi.w	fp, r3, r5
 800b81c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b820:	608b      	strhi	r3, [r1, #8]
 800b822:	680b      	ldr	r3, [r1, #0]
 800b824:	460a      	mov	r2, r1
 800b826:	f04f 0500 	mov.w	r5, #0
 800b82a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b82e:	f842 3b1c 	str.w	r3, [r2], #28
 800b832:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b836:	4680      	mov	r8, r0
 800b838:	460c      	mov	r4, r1
 800b83a:	bf98      	it	ls
 800b83c:	f04f 0b00 	movls.w	fp, #0
 800b840:	9201      	str	r2, [sp, #4]
 800b842:	4616      	mov	r6, r2
 800b844:	46aa      	mov	sl, r5
 800b846:	462f      	mov	r7, r5
 800b848:	9502      	str	r5, [sp, #8]
 800b84a:	68a2      	ldr	r2, [r4, #8]
 800b84c:	b15a      	cbz	r2, 800b866 <_scanf_float+0x66>
 800b84e:	f8d9 3000 	ldr.w	r3, [r9]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	2b4e      	cmp	r3, #78	@ 0x4e
 800b856:	d863      	bhi.n	800b920 <_scanf_float+0x120>
 800b858:	2b40      	cmp	r3, #64	@ 0x40
 800b85a:	d83b      	bhi.n	800b8d4 <_scanf_float+0xd4>
 800b85c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b860:	b2c8      	uxtb	r0, r1
 800b862:	280e      	cmp	r0, #14
 800b864:	d939      	bls.n	800b8da <_scanf_float+0xda>
 800b866:	b11f      	cbz	r7, 800b870 <_scanf_float+0x70>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b86e:	6023      	str	r3, [r4, #0]
 800b870:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b874:	f1ba 0f01 	cmp.w	sl, #1
 800b878:	f200 8114 	bhi.w	800baa4 <_scanf_float+0x2a4>
 800b87c:	9b01      	ldr	r3, [sp, #4]
 800b87e:	429e      	cmp	r6, r3
 800b880:	f200 8105 	bhi.w	800ba8e <_scanf_float+0x28e>
 800b884:	2001      	movs	r0, #1
 800b886:	b007      	add	sp, #28
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b890:	2a0d      	cmp	r2, #13
 800b892:	d8e8      	bhi.n	800b866 <_scanf_float+0x66>
 800b894:	a101      	add	r1, pc, #4	@ (adr r1, 800b89c <_scanf_float+0x9c>)
 800b896:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b89a:	bf00      	nop
 800b89c:	0800b9e5 	.word	0x0800b9e5
 800b8a0:	0800b867 	.word	0x0800b867
 800b8a4:	0800b867 	.word	0x0800b867
 800b8a8:	0800b867 	.word	0x0800b867
 800b8ac:	0800ba41 	.word	0x0800ba41
 800b8b0:	0800ba1b 	.word	0x0800ba1b
 800b8b4:	0800b867 	.word	0x0800b867
 800b8b8:	0800b867 	.word	0x0800b867
 800b8bc:	0800b9f3 	.word	0x0800b9f3
 800b8c0:	0800b867 	.word	0x0800b867
 800b8c4:	0800b867 	.word	0x0800b867
 800b8c8:	0800b867 	.word	0x0800b867
 800b8cc:	0800b867 	.word	0x0800b867
 800b8d0:	0800b9af 	.word	0x0800b9af
 800b8d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b8d8:	e7da      	b.n	800b890 <_scanf_float+0x90>
 800b8da:	290e      	cmp	r1, #14
 800b8dc:	d8c3      	bhi.n	800b866 <_scanf_float+0x66>
 800b8de:	a001      	add	r0, pc, #4	@ (adr r0, 800b8e4 <_scanf_float+0xe4>)
 800b8e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b8e4:	0800b99f 	.word	0x0800b99f
 800b8e8:	0800b867 	.word	0x0800b867
 800b8ec:	0800b99f 	.word	0x0800b99f
 800b8f0:	0800ba2f 	.word	0x0800ba2f
 800b8f4:	0800b867 	.word	0x0800b867
 800b8f8:	0800b941 	.word	0x0800b941
 800b8fc:	0800b985 	.word	0x0800b985
 800b900:	0800b985 	.word	0x0800b985
 800b904:	0800b985 	.word	0x0800b985
 800b908:	0800b985 	.word	0x0800b985
 800b90c:	0800b985 	.word	0x0800b985
 800b910:	0800b985 	.word	0x0800b985
 800b914:	0800b985 	.word	0x0800b985
 800b918:	0800b985 	.word	0x0800b985
 800b91c:	0800b985 	.word	0x0800b985
 800b920:	2b6e      	cmp	r3, #110	@ 0x6e
 800b922:	d809      	bhi.n	800b938 <_scanf_float+0x138>
 800b924:	2b60      	cmp	r3, #96	@ 0x60
 800b926:	d8b1      	bhi.n	800b88c <_scanf_float+0x8c>
 800b928:	2b54      	cmp	r3, #84	@ 0x54
 800b92a:	d07b      	beq.n	800ba24 <_scanf_float+0x224>
 800b92c:	2b59      	cmp	r3, #89	@ 0x59
 800b92e:	d19a      	bne.n	800b866 <_scanf_float+0x66>
 800b930:	2d07      	cmp	r5, #7
 800b932:	d198      	bne.n	800b866 <_scanf_float+0x66>
 800b934:	2508      	movs	r5, #8
 800b936:	e02f      	b.n	800b998 <_scanf_float+0x198>
 800b938:	2b74      	cmp	r3, #116	@ 0x74
 800b93a:	d073      	beq.n	800ba24 <_scanf_float+0x224>
 800b93c:	2b79      	cmp	r3, #121	@ 0x79
 800b93e:	e7f6      	b.n	800b92e <_scanf_float+0x12e>
 800b940:	6821      	ldr	r1, [r4, #0]
 800b942:	05c8      	lsls	r0, r1, #23
 800b944:	d51e      	bpl.n	800b984 <_scanf_float+0x184>
 800b946:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b94a:	6021      	str	r1, [r4, #0]
 800b94c:	3701      	adds	r7, #1
 800b94e:	f1bb 0f00 	cmp.w	fp, #0
 800b952:	d003      	beq.n	800b95c <_scanf_float+0x15c>
 800b954:	3201      	adds	r2, #1
 800b956:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b95a:	60a2      	str	r2, [r4, #8]
 800b95c:	68a3      	ldr	r3, [r4, #8]
 800b95e:	3b01      	subs	r3, #1
 800b960:	60a3      	str	r3, [r4, #8]
 800b962:	6923      	ldr	r3, [r4, #16]
 800b964:	3301      	adds	r3, #1
 800b966:	6123      	str	r3, [r4, #16]
 800b968:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f8c9 3004 	str.w	r3, [r9, #4]
 800b974:	f340 8082 	ble.w	800ba7c <_scanf_float+0x27c>
 800b978:	f8d9 3000 	ldr.w	r3, [r9]
 800b97c:	3301      	adds	r3, #1
 800b97e:	f8c9 3000 	str.w	r3, [r9]
 800b982:	e762      	b.n	800b84a <_scanf_float+0x4a>
 800b984:	eb1a 0105 	adds.w	r1, sl, r5
 800b988:	f47f af6d 	bne.w	800b866 <_scanf_float+0x66>
 800b98c:	6822      	ldr	r2, [r4, #0]
 800b98e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b992:	6022      	str	r2, [r4, #0]
 800b994:	460d      	mov	r5, r1
 800b996:	468a      	mov	sl, r1
 800b998:	f806 3b01 	strb.w	r3, [r6], #1
 800b99c:	e7de      	b.n	800b95c <_scanf_float+0x15c>
 800b99e:	6822      	ldr	r2, [r4, #0]
 800b9a0:	0610      	lsls	r0, r2, #24
 800b9a2:	f57f af60 	bpl.w	800b866 <_scanf_float+0x66>
 800b9a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b9aa:	6022      	str	r2, [r4, #0]
 800b9ac:	e7f4      	b.n	800b998 <_scanf_float+0x198>
 800b9ae:	f1ba 0f00 	cmp.w	sl, #0
 800b9b2:	d10c      	bne.n	800b9ce <_scanf_float+0x1ce>
 800b9b4:	b977      	cbnz	r7, 800b9d4 <_scanf_float+0x1d4>
 800b9b6:	6822      	ldr	r2, [r4, #0]
 800b9b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b9bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b9c0:	d108      	bne.n	800b9d4 <_scanf_float+0x1d4>
 800b9c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b9c6:	6022      	str	r2, [r4, #0]
 800b9c8:	f04f 0a01 	mov.w	sl, #1
 800b9cc:	e7e4      	b.n	800b998 <_scanf_float+0x198>
 800b9ce:	f1ba 0f02 	cmp.w	sl, #2
 800b9d2:	d050      	beq.n	800ba76 <_scanf_float+0x276>
 800b9d4:	2d01      	cmp	r5, #1
 800b9d6:	d002      	beq.n	800b9de <_scanf_float+0x1de>
 800b9d8:	2d04      	cmp	r5, #4
 800b9da:	f47f af44 	bne.w	800b866 <_scanf_float+0x66>
 800b9de:	3501      	adds	r5, #1
 800b9e0:	b2ed      	uxtb	r5, r5
 800b9e2:	e7d9      	b.n	800b998 <_scanf_float+0x198>
 800b9e4:	f1ba 0f01 	cmp.w	sl, #1
 800b9e8:	f47f af3d 	bne.w	800b866 <_scanf_float+0x66>
 800b9ec:	f04f 0a02 	mov.w	sl, #2
 800b9f0:	e7d2      	b.n	800b998 <_scanf_float+0x198>
 800b9f2:	b975      	cbnz	r5, 800ba12 <_scanf_float+0x212>
 800b9f4:	2f00      	cmp	r7, #0
 800b9f6:	f47f af37 	bne.w	800b868 <_scanf_float+0x68>
 800b9fa:	6822      	ldr	r2, [r4, #0]
 800b9fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba00:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba04:	f040 8103 	bne.w	800bc0e <_scanf_float+0x40e>
 800ba08:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba0c:	6022      	str	r2, [r4, #0]
 800ba0e:	2501      	movs	r5, #1
 800ba10:	e7c2      	b.n	800b998 <_scanf_float+0x198>
 800ba12:	2d03      	cmp	r5, #3
 800ba14:	d0e3      	beq.n	800b9de <_scanf_float+0x1de>
 800ba16:	2d05      	cmp	r5, #5
 800ba18:	e7df      	b.n	800b9da <_scanf_float+0x1da>
 800ba1a:	2d02      	cmp	r5, #2
 800ba1c:	f47f af23 	bne.w	800b866 <_scanf_float+0x66>
 800ba20:	2503      	movs	r5, #3
 800ba22:	e7b9      	b.n	800b998 <_scanf_float+0x198>
 800ba24:	2d06      	cmp	r5, #6
 800ba26:	f47f af1e 	bne.w	800b866 <_scanf_float+0x66>
 800ba2a:	2507      	movs	r5, #7
 800ba2c:	e7b4      	b.n	800b998 <_scanf_float+0x198>
 800ba2e:	6822      	ldr	r2, [r4, #0]
 800ba30:	0591      	lsls	r1, r2, #22
 800ba32:	f57f af18 	bpl.w	800b866 <_scanf_float+0x66>
 800ba36:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ba3a:	6022      	str	r2, [r4, #0]
 800ba3c:	9702      	str	r7, [sp, #8]
 800ba3e:	e7ab      	b.n	800b998 <_scanf_float+0x198>
 800ba40:	6822      	ldr	r2, [r4, #0]
 800ba42:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ba46:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ba4a:	d005      	beq.n	800ba58 <_scanf_float+0x258>
 800ba4c:	0550      	lsls	r0, r2, #21
 800ba4e:	f57f af0a 	bpl.w	800b866 <_scanf_float+0x66>
 800ba52:	2f00      	cmp	r7, #0
 800ba54:	f000 80db 	beq.w	800bc0e <_scanf_float+0x40e>
 800ba58:	0591      	lsls	r1, r2, #22
 800ba5a:	bf58      	it	pl
 800ba5c:	9902      	ldrpl	r1, [sp, #8]
 800ba5e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba62:	bf58      	it	pl
 800ba64:	1a79      	subpl	r1, r7, r1
 800ba66:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ba6a:	bf58      	it	pl
 800ba6c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ba70:	6022      	str	r2, [r4, #0]
 800ba72:	2700      	movs	r7, #0
 800ba74:	e790      	b.n	800b998 <_scanf_float+0x198>
 800ba76:	f04f 0a03 	mov.w	sl, #3
 800ba7a:	e78d      	b.n	800b998 <_scanf_float+0x198>
 800ba7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ba80:	4649      	mov	r1, r9
 800ba82:	4640      	mov	r0, r8
 800ba84:	4798      	blx	r3
 800ba86:	2800      	cmp	r0, #0
 800ba88:	f43f aedf 	beq.w	800b84a <_scanf_float+0x4a>
 800ba8c:	e6eb      	b.n	800b866 <_scanf_float+0x66>
 800ba8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba96:	464a      	mov	r2, r9
 800ba98:	4640      	mov	r0, r8
 800ba9a:	4798      	blx	r3
 800ba9c:	6923      	ldr	r3, [r4, #16]
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	e6eb      	b.n	800b87c <_scanf_float+0x7c>
 800baa4:	1e6b      	subs	r3, r5, #1
 800baa6:	2b06      	cmp	r3, #6
 800baa8:	d824      	bhi.n	800baf4 <_scanf_float+0x2f4>
 800baaa:	2d02      	cmp	r5, #2
 800baac:	d836      	bhi.n	800bb1c <_scanf_float+0x31c>
 800baae:	9b01      	ldr	r3, [sp, #4]
 800bab0:	429e      	cmp	r6, r3
 800bab2:	f67f aee7 	bls.w	800b884 <_scanf_float+0x84>
 800bab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800baba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800babe:	464a      	mov	r2, r9
 800bac0:	4640      	mov	r0, r8
 800bac2:	4798      	blx	r3
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	3b01      	subs	r3, #1
 800bac8:	6123      	str	r3, [r4, #16]
 800baca:	e7f0      	b.n	800baae <_scanf_float+0x2ae>
 800bacc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bad0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bad4:	464a      	mov	r2, r9
 800bad6:	4640      	mov	r0, r8
 800bad8:	4798      	blx	r3
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	3b01      	subs	r3, #1
 800bade:	6123      	str	r3, [r4, #16]
 800bae0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bae4:	fa5f fa8a 	uxtb.w	sl, sl
 800bae8:	f1ba 0f02 	cmp.w	sl, #2
 800baec:	d1ee      	bne.n	800bacc <_scanf_float+0x2cc>
 800baee:	3d03      	subs	r5, #3
 800baf0:	b2ed      	uxtb	r5, r5
 800baf2:	1b76      	subs	r6, r6, r5
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	05da      	lsls	r2, r3, #23
 800baf8:	d530      	bpl.n	800bb5c <_scanf_float+0x35c>
 800bafa:	055b      	lsls	r3, r3, #21
 800bafc:	d511      	bpl.n	800bb22 <_scanf_float+0x322>
 800bafe:	9b01      	ldr	r3, [sp, #4]
 800bb00:	429e      	cmp	r6, r3
 800bb02:	f67f aebf 	bls.w	800b884 <_scanf_float+0x84>
 800bb06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb0e:	464a      	mov	r2, r9
 800bb10:	4640      	mov	r0, r8
 800bb12:	4798      	blx	r3
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	6123      	str	r3, [r4, #16]
 800bb1a:	e7f0      	b.n	800bafe <_scanf_float+0x2fe>
 800bb1c:	46aa      	mov	sl, r5
 800bb1e:	46b3      	mov	fp, r6
 800bb20:	e7de      	b.n	800bae0 <_scanf_float+0x2e0>
 800bb22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bb26:	6923      	ldr	r3, [r4, #16]
 800bb28:	2965      	cmp	r1, #101	@ 0x65
 800bb2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb2e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bb32:	6123      	str	r3, [r4, #16]
 800bb34:	d00c      	beq.n	800bb50 <_scanf_float+0x350>
 800bb36:	2945      	cmp	r1, #69	@ 0x45
 800bb38:	d00a      	beq.n	800bb50 <_scanf_float+0x350>
 800bb3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb3e:	464a      	mov	r2, r9
 800bb40:	4640      	mov	r0, r8
 800bb42:	4798      	blx	r3
 800bb44:	6923      	ldr	r3, [r4, #16]
 800bb46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	1eb5      	subs	r5, r6, #2
 800bb4e:	6123      	str	r3, [r4, #16]
 800bb50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb54:	464a      	mov	r2, r9
 800bb56:	4640      	mov	r0, r8
 800bb58:	4798      	blx	r3
 800bb5a:	462e      	mov	r6, r5
 800bb5c:	6822      	ldr	r2, [r4, #0]
 800bb5e:	f012 0210 	ands.w	r2, r2, #16
 800bb62:	d001      	beq.n	800bb68 <_scanf_float+0x368>
 800bb64:	2000      	movs	r0, #0
 800bb66:	e68e      	b.n	800b886 <_scanf_float+0x86>
 800bb68:	7032      	strb	r2, [r6, #0]
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bb70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb74:	d125      	bne.n	800bbc2 <_scanf_float+0x3c2>
 800bb76:	9b02      	ldr	r3, [sp, #8]
 800bb78:	429f      	cmp	r7, r3
 800bb7a:	d00a      	beq.n	800bb92 <_scanf_float+0x392>
 800bb7c:	1bda      	subs	r2, r3, r7
 800bb7e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bb82:	429e      	cmp	r6, r3
 800bb84:	bf28      	it	cs
 800bb86:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bb8a:	4922      	ldr	r1, [pc, #136]	@ (800bc14 <_scanf_float+0x414>)
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f000 f977 	bl	800be80 <siprintf>
 800bb92:	9901      	ldr	r1, [sp, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	4640      	mov	r0, r8
 800bb98:	f7ff fda6 	bl	800b6e8 <_strtod_r>
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	6821      	ldr	r1, [r4, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f011 0f02 	tst.w	r1, #2
 800bba6:	ec57 6b10 	vmov	r6, r7, d0
 800bbaa:	f103 0204 	add.w	r2, r3, #4
 800bbae:	d015      	beq.n	800bbdc <_scanf_float+0x3dc>
 800bbb0:	9903      	ldr	r1, [sp, #12]
 800bbb2:	600a      	str	r2, [r1, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	e9c3 6700 	strd	r6, r7, [r3]
 800bbba:	68e3      	ldr	r3, [r4, #12]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	60e3      	str	r3, [r4, #12]
 800bbc0:	e7d0      	b.n	800bb64 <_scanf_float+0x364>
 800bbc2:	9b04      	ldr	r3, [sp, #16]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0e4      	beq.n	800bb92 <_scanf_float+0x392>
 800bbc8:	9905      	ldr	r1, [sp, #20]
 800bbca:	230a      	movs	r3, #10
 800bbcc:	3101      	adds	r1, #1
 800bbce:	4640      	mov	r0, r8
 800bbd0:	f7ff fe0a 	bl	800b7e8 <_strtol_r>
 800bbd4:	9b04      	ldr	r3, [sp, #16]
 800bbd6:	9e05      	ldr	r6, [sp, #20]
 800bbd8:	1ac2      	subs	r2, r0, r3
 800bbda:	e7d0      	b.n	800bb7e <_scanf_float+0x37e>
 800bbdc:	f011 0f04 	tst.w	r1, #4
 800bbe0:	9903      	ldr	r1, [sp, #12]
 800bbe2:	600a      	str	r2, [r1, #0]
 800bbe4:	d1e6      	bne.n	800bbb4 <_scanf_float+0x3b4>
 800bbe6:	681d      	ldr	r5, [r3, #0]
 800bbe8:	4632      	mov	r2, r6
 800bbea:	463b      	mov	r3, r7
 800bbec:	4630      	mov	r0, r6
 800bbee:	4639      	mov	r1, r7
 800bbf0:	f7f4 ff9c 	bl	8000b2c <__aeabi_dcmpun>
 800bbf4:	b128      	cbz	r0, 800bc02 <_scanf_float+0x402>
 800bbf6:	4808      	ldr	r0, [pc, #32]	@ (800bc18 <_scanf_float+0x418>)
 800bbf8:	f000 fb32 	bl	800c260 <nanf>
 800bbfc:	ed85 0a00 	vstr	s0, [r5]
 800bc00:	e7db      	b.n	800bbba <_scanf_float+0x3ba>
 800bc02:	4630      	mov	r0, r6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f7f4 ffef 	bl	8000be8 <__aeabi_d2f>
 800bc0a:	6028      	str	r0, [r5, #0]
 800bc0c:	e7d5      	b.n	800bbba <_scanf_float+0x3ba>
 800bc0e:	2700      	movs	r7, #0
 800bc10:	e62e      	b.n	800b870 <_scanf_float+0x70>
 800bc12:	bf00      	nop
 800bc14:	0800fa9a 	.word	0x0800fa9a
 800bc18:	0800fc11 	.word	0x0800fc11

0800bc1c <std>:
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	4604      	mov	r4, r0
 800bc22:	e9c0 3300 	strd	r3, r3, [r0]
 800bc26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc2a:	6083      	str	r3, [r0, #8]
 800bc2c:	8181      	strh	r1, [r0, #12]
 800bc2e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc30:	81c2      	strh	r2, [r0, #14]
 800bc32:	6183      	str	r3, [r0, #24]
 800bc34:	4619      	mov	r1, r3
 800bc36:	2208      	movs	r2, #8
 800bc38:	305c      	adds	r0, #92	@ 0x5c
 800bc3a:	f000 fa49 	bl	800c0d0 <memset>
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <std+0x58>)
 800bc40:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc42:	4b0d      	ldr	r3, [pc, #52]	@ (800bc78 <std+0x5c>)
 800bc44:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc46:	4b0d      	ldr	r3, [pc, #52]	@ (800bc7c <std+0x60>)
 800bc48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc80 <std+0x64>)
 800bc4c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc84 <std+0x68>)
 800bc50:	6224      	str	r4, [r4, #32]
 800bc52:	429c      	cmp	r4, r3
 800bc54:	d006      	beq.n	800bc64 <std+0x48>
 800bc56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bc5a:	4294      	cmp	r4, r2
 800bc5c:	d002      	beq.n	800bc64 <std+0x48>
 800bc5e:	33d0      	adds	r3, #208	@ 0xd0
 800bc60:	429c      	cmp	r4, r3
 800bc62:	d105      	bne.n	800bc70 <std+0x54>
 800bc64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc6c:	f000 bade 	b.w	800c22c <__retarget_lock_init_recursive>
 800bc70:	bd10      	pop	{r4, pc}
 800bc72:	bf00      	nop
 800bc74:	0800bf1d 	.word	0x0800bf1d
 800bc78:	0800bf43 	.word	0x0800bf43
 800bc7c:	0800bf7b 	.word	0x0800bf7b
 800bc80:	0800bf9f 	.word	0x0800bf9f
 800bc84:	20000aec 	.word	0x20000aec

0800bc88 <stdio_exit_handler>:
 800bc88:	4a02      	ldr	r2, [pc, #8]	@ (800bc94 <stdio_exit_handler+0xc>)
 800bc8a:	4903      	ldr	r1, [pc, #12]	@ (800bc98 <stdio_exit_handler+0x10>)
 800bc8c:	4803      	ldr	r0, [pc, #12]	@ (800bc9c <stdio_exit_handler+0x14>)
 800bc8e:	f000 b869 	b.w	800bd64 <_fwalk_sglue>
 800bc92:	bf00      	nop
 800bc94:	20000084 	.word	0x20000084
 800bc98:	0800e2a5 	.word	0x0800e2a5
 800bc9c:	20000200 	.word	0x20000200

0800bca0 <cleanup_stdio>:
 800bca0:	6841      	ldr	r1, [r0, #4]
 800bca2:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd4 <cleanup_stdio+0x34>)
 800bca4:	4299      	cmp	r1, r3
 800bca6:	b510      	push	{r4, lr}
 800bca8:	4604      	mov	r4, r0
 800bcaa:	d001      	beq.n	800bcb0 <cleanup_stdio+0x10>
 800bcac:	f002 fafa 	bl	800e2a4 <_fflush_r>
 800bcb0:	68a1      	ldr	r1, [r4, #8]
 800bcb2:	4b09      	ldr	r3, [pc, #36]	@ (800bcd8 <cleanup_stdio+0x38>)
 800bcb4:	4299      	cmp	r1, r3
 800bcb6:	d002      	beq.n	800bcbe <cleanup_stdio+0x1e>
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f002 faf3 	bl	800e2a4 <_fflush_r>
 800bcbe:	68e1      	ldr	r1, [r4, #12]
 800bcc0:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <cleanup_stdio+0x3c>)
 800bcc2:	4299      	cmp	r1, r3
 800bcc4:	d004      	beq.n	800bcd0 <cleanup_stdio+0x30>
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bccc:	f002 baea 	b.w	800e2a4 <_fflush_r>
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20000aec 	.word	0x20000aec
 800bcd8:	20000b54 	.word	0x20000b54
 800bcdc:	20000bbc 	.word	0x20000bbc

0800bce0 <global_stdio_init.part.0>:
 800bce0:	b510      	push	{r4, lr}
 800bce2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd10 <global_stdio_init.part.0+0x30>)
 800bce4:	4c0b      	ldr	r4, [pc, #44]	@ (800bd14 <global_stdio_init.part.0+0x34>)
 800bce6:	4a0c      	ldr	r2, [pc, #48]	@ (800bd18 <global_stdio_init.part.0+0x38>)
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	4620      	mov	r0, r4
 800bcec:	2200      	movs	r2, #0
 800bcee:	2104      	movs	r1, #4
 800bcf0:	f7ff ff94 	bl	800bc1c <std>
 800bcf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	2109      	movs	r1, #9
 800bcfc:	f7ff ff8e 	bl	800bc1c <std>
 800bd00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd04:	2202      	movs	r2, #2
 800bd06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd0a:	2112      	movs	r1, #18
 800bd0c:	f7ff bf86 	b.w	800bc1c <std>
 800bd10:	20000c24 	.word	0x20000c24
 800bd14:	20000aec 	.word	0x20000aec
 800bd18:	0800bc89 	.word	0x0800bc89

0800bd1c <__sfp_lock_acquire>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	@ (800bd24 <__sfp_lock_acquire+0x8>)
 800bd1e:	f000 ba86 	b.w	800c22e <__retarget_lock_acquire_recursive>
 800bd22:	bf00      	nop
 800bd24:	20000c2d 	.word	0x20000c2d

0800bd28 <__sfp_lock_release>:
 800bd28:	4801      	ldr	r0, [pc, #4]	@ (800bd30 <__sfp_lock_release+0x8>)
 800bd2a:	f000 ba81 	b.w	800c230 <__retarget_lock_release_recursive>
 800bd2e:	bf00      	nop
 800bd30:	20000c2d 	.word	0x20000c2d

0800bd34 <__sinit>:
 800bd34:	b510      	push	{r4, lr}
 800bd36:	4604      	mov	r4, r0
 800bd38:	f7ff fff0 	bl	800bd1c <__sfp_lock_acquire>
 800bd3c:	6a23      	ldr	r3, [r4, #32]
 800bd3e:	b11b      	cbz	r3, 800bd48 <__sinit+0x14>
 800bd40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd44:	f7ff bff0 	b.w	800bd28 <__sfp_lock_release>
 800bd48:	4b04      	ldr	r3, [pc, #16]	@ (800bd5c <__sinit+0x28>)
 800bd4a:	6223      	str	r3, [r4, #32]
 800bd4c:	4b04      	ldr	r3, [pc, #16]	@ (800bd60 <__sinit+0x2c>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1f5      	bne.n	800bd40 <__sinit+0xc>
 800bd54:	f7ff ffc4 	bl	800bce0 <global_stdio_init.part.0>
 800bd58:	e7f2      	b.n	800bd40 <__sinit+0xc>
 800bd5a:	bf00      	nop
 800bd5c:	0800bca1 	.word	0x0800bca1
 800bd60:	20000c24 	.word	0x20000c24

0800bd64 <_fwalk_sglue>:
 800bd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd68:	4607      	mov	r7, r0
 800bd6a:	4688      	mov	r8, r1
 800bd6c:	4614      	mov	r4, r2
 800bd6e:	2600      	movs	r6, #0
 800bd70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd74:	f1b9 0901 	subs.w	r9, r9, #1
 800bd78:	d505      	bpl.n	800bd86 <_fwalk_sglue+0x22>
 800bd7a:	6824      	ldr	r4, [r4, #0]
 800bd7c:	2c00      	cmp	r4, #0
 800bd7e:	d1f7      	bne.n	800bd70 <_fwalk_sglue+0xc>
 800bd80:	4630      	mov	r0, r6
 800bd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd86:	89ab      	ldrh	r3, [r5, #12]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d907      	bls.n	800bd9c <_fwalk_sglue+0x38>
 800bd8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd90:	3301      	adds	r3, #1
 800bd92:	d003      	beq.n	800bd9c <_fwalk_sglue+0x38>
 800bd94:	4629      	mov	r1, r5
 800bd96:	4638      	mov	r0, r7
 800bd98:	47c0      	blx	r8
 800bd9a:	4306      	orrs	r6, r0
 800bd9c:	3568      	adds	r5, #104	@ 0x68
 800bd9e:	e7e9      	b.n	800bd74 <_fwalk_sglue+0x10>

0800bda0 <iprintf>:
 800bda0:	b40f      	push	{r0, r1, r2, r3}
 800bda2:	b507      	push	{r0, r1, r2, lr}
 800bda4:	4906      	ldr	r1, [pc, #24]	@ (800bdc0 <iprintf+0x20>)
 800bda6:	ab04      	add	r3, sp, #16
 800bda8:	6808      	ldr	r0, [r1, #0]
 800bdaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdae:	6881      	ldr	r1, [r0, #8]
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	f001 fe01 	bl	800d9b8 <_vfiprintf_r>
 800bdb6:	b003      	add	sp, #12
 800bdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdbc:	b004      	add	sp, #16
 800bdbe:	4770      	bx	lr
 800bdc0:	200001fc 	.word	0x200001fc

0800bdc4 <_puts_r>:
 800bdc4:	6a03      	ldr	r3, [r0, #32]
 800bdc6:	b570      	push	{r4, r5, r6, lr}
 800bdc8:	6884      	ldr	r4, [r0, #8]
 800bdca:	4605      	mov	r5, r0
 800bdcc:	460e      	mov	r6, r1
 800bdce:	b90b      	cbnz	r3, 800bdd4 <_puts_r+0x10>
 800bdd0:	f7ff ffb0 	bl	800bd34 <__sinit>
 800bdd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdd6:	07db      	lsls	r3, r3, #31
 800bdd8:	d405      	bmi.n	800bde6 <_puts_r+0x22>
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	0598      	lsls	r0, r3, #22
 800bdde:	d402      	bmi.n	800bde6 <_puts_r+0x22>
 800bde0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bde2:	f000 fa24 	bl	800c22e <__retarget_lock_acquire_recursive>
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	0719      	lsls	r1, r3, #28
 800bdea:	d502      	bpl.n	800bdf2 <_puts_r+0x2e>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d135      	bne.n	800be5e <_puts_r+0x9a>
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f000 f915 	bl	800c024 <__swsetup_r>
 800bdfa:	b380      	cbz	r0, 800be5e <_puts_r+0x9a>
 800bdfc:	f04f 35ff 	mov.w	r5, #4294967295
 800be00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be02:	07da      	lsls	r2, r3, #31
 800be04:	d405      	bmi.n	800be12 <_puts_r+0x4e>
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	059b      	lsls	r3, r3, #22
 800be0a:	d402      	bmi.n	800be12 <_puts_r+0x4e>
 800be0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be0e:	f000 fa0f 	bl	800c230 <__retarget_lock_release_recursive>
 800be12:	4628      	mov	r0, r5
 800be14:	bd70      	pop	{r4, r5, r6, pc}
 800be16:	2b00      	cmp	r3, #0
 800be18:	da04      	bge.n	800be24 <_puts_r+0x60>
 800be1a:	69a2      	ldr	r2, [r4, #24]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	dc17      	bgt.n	800be50 <_puts_r+0x8c>
 800be20:	290a      	cmp	r1, #10
 800be22:	d015      	beq.n	800be50 <_puts_r+0x8c>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	1c5a      	adds	r2, r3, #1
 800be28:	6022      	str	r2, [r4, #0]
 800be2a:	7019      	strb	r1, [r3, #0]
 800be2c:	68a3      	ldr	r3, [r4, #8]
 800be2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be32:	3b01      	subs	r3, #1
 800be34:	60a3      	str	r3, [r4, #8]
 800be36:	2900      	cmp	r1, #0
 800be38:	d1ed      	bne.n	800be16 <_puts_r+0x52>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	da11      	bge.n	800be62 <_puts_r+0x9e>
 800be3e:	4622      	mov	r2, r4
 800be40:	210a      	movs	r1, #10
 800be42:	4628      	mov	r0, r5
 800be44:	f000 f8af 	bl	800bfa6 <__swbuf_r>
 800be48:	3001      	adds	r0, #1
 800be4a:	d0d7      	beq.n	800bdfc <_puts_r+0x38>
 800be4c:	250a      	movs	r5, #10
 800be4e:	e7d7      	b.n	800be00 <_puts_r+0x3c>
 800be50:	4622      	mov	r2, r4
 800be52:	4628      	mov	r0, r5
 800be54:	f000 f8a7 	bl	800bfa6 <__swbuf_r>
 800be58:	3001      	adds	r0, #1
 800be5a:	d1e7      	bne.n	800be2c <_puts_r+0x68>
 800be5c:	e7ce      	b.n	800bdfc <_puts_r+0x38>
 800be5e:	3e01      	subs	r6, #1
 800be60:	e7e4      	b.n	800be2c <_puts_r+0x68>
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	6022      	str	r2, [r4, #0]
 800be68:	220a      	movs	r2, #10
 800be6a:	701a      	strb	r2, [r3, #0]
 800be6c:	e7ee      	b.n	800be4c <_puts_r+0x88>
	...

0800be70 <puts>:
 800be70:	4b02      	ldr	r3, [pc, #8]	@ (800be7c <puts+0xc>)
 800be72:	4601      	mov	r1, r0
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	f7ff bfa5 	b.w	800bdc4 <_puts_r>
 800be7a:	bf00      	nop
 800be7c:	200001fc 	.word	0x200001fc

0800be80 <siprintf>:
 800be80:	b40e      	push	{r1, r2, r3}
 800be82:	b510      	push	{r4, lr}
 800be84:	b09d      	sub	sp, #116	@ 0x74
 800be86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800be88:	9002      	str	r0, [sp, #8]
 800be8a:	9006      	str	r0, [sp, #24]
 800be8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be90:	480a      	ldr	r0, [pc, #40]	@ (800bebc <siprintf+0x3c>)
 800be92:	9107      	str	r1, [sp, #28]
 800be94:	9104      	str	r1, [sp, #16]
 800be96:	490a      	ldr	r1, [pc, #40]	@ (800bec0 <siprintf+0x40>)
 800be98:	f853 2b04 	ldr.w	r2, [r3], #4
 800be9c:	9105      	str	r1, [sp, #20]
 800be9e:	2400      	movs	r4, #0
 800bea0:	a902      	add	r1, sp, #8
 800bea2:	6800      	ldr	r0, [r0, #0]
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bea8:	f001 fa90 	bl	800d3cc <_svfiprintf_r>
 800beac:	9b02      	ldr	r3, [sp, #8]
 800beae:	701c      	strb	r4, [r3, #0]
 800beb0:	b01d      	add	sp, #116	@ 0x74
 800beb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb6:	b003      	add	sp, #12
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	200001fc 	.word	0x200001fc
 800bec0:	ffff0208 	.word	0xffff0208

0800bec4 <siscanf>:
 800bec4:	b40e      	push	{r1, r2, r3}
 800bec6:	b570      	push	{r4, r5, r6, lr}
 800bec8:	b09d      	sub	sp, #116	@ 0x74
 800beca:	ac21      	add	r4, sp, #132	@ 0x84
 800becc:	2500      	movs	r5, #0
 800bece:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bed2:	f854 6b04 	ldr.w	r6, [r4], #4
 800bed6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800beda:	951b      	str	r5, [sp, #108]	@ 0x6c
 800bedc:	9002      	str	r0, [sp, #8]
 800bede:	9006      	str	r0, [sp, #24]
 800bee0:	f7f4 f976 	bl	80001d0 <strlen>
 800bee4:	4b0b      	ldr	r3, [pc, #44]	@ (800bf14 <siscanf+0x50>)
 800bee6:	9003      	str	r0, [sp, #12]
 800bee8:	9007      	str	r0, [sp, #28]
 800beea:	480b      	ldr	r0, [pc, #44]	@ (800bf18 <siscanf+0x54>)
 800beec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bef2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bef6:	4632      	mov	r2, r6
 800bef8:	4623      	mov	r3, r4
 800befa:	a902      	add	r1, sp, #8
 800befc:	6800      	ldr	r0, [r0, #0]
 800befe:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bf00:	9514      	str	r5, [sp, #80]	@ 0x50
 800bf02:	9401      	str	r4, [sp, #4]
 800bf04:	f001 fbb8 	bl	800d678 <__ssvfiscanf_r>
 800bf08:	b01d      	add	sp, #116	@ 0x74
 800bf0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf0e:	b003      	add	sp, #12
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	0800bf3f 	.word	0x0800bf3f
 800bf18:	200001fc 	.word	0x200001fc

0800bf1c <__sread>:
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	460c      	mov	r4, r1
 800bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf24:	f000 f924 	bl	800c170 <_read_r>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	bfab      	itete	ge
 800bf2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf2e:	89a3      	ldrhlt	r3, [r4, #12]
 800bf30:	181b      	addge	r3, r3, r0
 800bf32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf36:	bfac      	ite	ge
 800bf38:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf3a:	81a3      	strhlt	r3, [r4, #12]
 800bf3c:	bd10      	pop	{r4, pc}

0800bf3e <__seofread>:
 800bf3e:	2000      	movs	r0, #0
 800bf40:	4770      	bx	lr

0800bf42 <__swrite>:
 800bf42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf46:	461f      	mov	r7, r3
 800bf48:	898b      	ldrh	r3, [r1, #12]
 800bf4a:	05db      	lsls	r3, r3, #23
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	4616      	mov	r6, r2
 800bf52:	d505      	bpl.n	800bf60 <__swrite+0x1e>
 800bf54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf58:	2302      	movs	r3, #2
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f000 f8f6 	bl	800c14c <_lseek_r>
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf6a:	81a3      	strh	r3, [r4, #12]
 800bf6c:	4632      	mov	r2, r6
 800bf6e:	463b      	mov	r3, r7
 800bf70:	4628      	mov	r0, r5
 800bf72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf76:	f000 b91d 	b.w	800c1b4 <_write_r>

0800bf7a <__sseek>:
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf82:	f000 f8e3 	bl	800c14c <_lseek_r>
 800bf86:	1c43      	adds	r3, r0, #1
 800bf88:	89a3      	ldrh	r3, [r4, #12]
 800bf8a:	bf15      	itete	ne
 800bf8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf96:	81a3      	strheq	r3, [r4, #12]
 800bf98:	bf18      	it	ne
 800bf9a:	81a3      	strhne	r3, [r4, #12]
 800bf9c:	bd10      	pop	{r4, pc}

0800bf9e <__sclose>:
 800bf9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa2:	f000 b8c3 	b.w	800c12c <_close_r>

0800bfa6 <__swbuf_r>:
 800bfa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa8:	460e      	mov	r6, r1
 800bfaa:	4614      	mov	r4, r2
 800bfac:	4605      	mov	r5, r0
 800bfae:	b118      	cbz	r0, 800bfb8 <__swbuf_r+0x12>
 800bfb0:	6a03      	ldr	r3, [r0, #32]
 800bfb2:	b90b      	cbnz	r3, 800bfb8 <__swbuf_r+0x12>
 800bfb4:	f7ff febe 	bl	800bd34 <__sinit>
 800bfb8:	69a3      	ldr	r3, [r4, #24]
 800bfba:	60a3      	str	r3, [r4, #8]
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	071a      	lsls	r2, r3, #28
 800bfc0:	d501      	bpl.n	800bfc6 <__swbuf_r+0x20>
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	b943      	cbnz	r3, 800bfd8 <__swbuf_r+0x32>
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	4628      	mov	r0, r5
 800bfca:	f000 f82b 	bl	800c024 <__swsetup_r>
 800bfce:	b118      	cbz	r0, 800bfd8 <__swbuf_r+0x32>
 800bfd0:	f04f 37ff 	mov.w	r7, #4294967295
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	6922      	ldr	r2, [r4, #16]
 800bfdc:	1a98      	subs	r0, r3, r2
 800bfde:	6963      	ldr	r3, [r4, #20]
 800bfe0:	b2f6      	uxtb	r6, r6
 800bfe2:	4283      	cmp	r3, r0
 800bfe4:	4637      	mov	r7, r6
 800bfe6:	dc05      	bgt.n	800bff4 <__swbuf_r+0x4e>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4628      	mov	r0, r5
 800bfec:	f002 f95a 	bl	800e2a4 <_fflush_r>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d1ed      	bne.n	800bfd0 <__swbuf_r+0x2a>
 800bff4:	68a3      	ldr	r3, [r4, #8]
 800bff6:	3b01      	subs	r3, #1
 800bff8:	60a3      	str	r3, [r4, #8]
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	6022      	str	r2, [r4, #0]
 800c000:	701e      	strb	r6, [r3, #0]
 800c002:	6962      	ldr	r2, [r4, #20]
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	429a      	cmp	r2, r3
 800c008:	d004      	beq.n	800c014 <__swbuf_r+0x6e>
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	07db      	lsls	r3, r3, #31
 800c00e:	d5e1      	bpl.n	800bfd4 <__swbuf_r+0x2e>
 800c010:	2e0a      	cmp	r6, #10
 800c012:	d1df      	bne.n	800bfd4 <__swbuf_r+0x2e>
 800c014:	4621      	mov	r1, r4
 800c016:	4628      	mov	r0, r5
 800c018:	f002 f944 	bl	800e2a4 <_fflush_r>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d0d9      	beq.n	800bfd4 <__swbuf_r+0x2e>
 800c020:	e7d6      	b.n	800bfd0 <__swbuf_r+0x2a>
	...

0800c024 <__swsetup_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4b29      	ldr	r3, [pc, #164]	@ (800c0cc <__swsetup_r+0xa8>)
 800c028:	4605      	mov	r5, r0
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	460c      	mov	r4, r1
 800c02e:	b118      	cbz	r0, 800c038 <__swsetup_r+0x14>
 800c030:	6a03      	ldr	r3, [r0, #32]
 800c032:	b90b      	cbnz	r3, 800c038 <__swsetup_r+0x14>
 800c034:	f7ff fe7e 	bl	800bd34 <__sinit>
 800c038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03c:	0719      	lsls	r1, r3, #28
 800c03e:	d422      	bmi.n	800c086 <__swsetup_r+0x62>
 800c040:	06da      	lsls	r2, r3, #27
 800c042:	d407      	bmi.n	800c054 <__swsetup_r+0x30>
 800c044:	2209      	movs	r2, #9
 800c046:	602a      	str	r2, [r5, #0]
 800c048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	f04f 30ff 	mov.w	r0, #4294967295
 800c052:	e033      	b.n	800c0bc <__swsetup_r+0x98>
 800c054:	0758      	lsls	r0, r3, #29
 800c056:	d512      	bpl.n	800c07e <__swsetup_r+0x5a>
 800c058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c05a:	b141      	cbz	r1, 800c06e <__swsetup_r+0x4a>
 800c05c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c060:	4299      	cmp	r1, r3
 800c062:	d002      	beq.n	800c06a <__swsetup_r+0x46>
 800c064:	4628      	mov	r0, r5
 800c066:	f000 f901 	bl	800c26c <_free_r>
 800c06a:	2300      	movs	r3, #0
 800c06c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c074:	81a3      	strh	r3, [r4, #12]
 800c076:	2300      	movs	r3, #0
 800c078:	6063      	str	r3, [r4, #4]
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	f043 0308 	orr.w	r3, r3, #8
 800c084:	81a3      	strh	r3, [r4, #12]
 800c086:	6923      	ldr	r3, [r4, #16]
 800c088:	b94b      	cbnz	r3, 800c09e <__swsetup_r+0x7a>
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c094:	d003      	beq.n	800c09e <__swsetup_r+0x7a>
 800c096:	4621      	mov	r1, r4
 800c098:	4628      	mov	r0, r5
 800c09a:	f002 f951 	bl	800e340 <__smakebuf_r>
 800c09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a2:	f013 0201 	ands.w	r2, r3, #1
 800c0a6:	d00a      	beq.n	800c0be <__swsetup_r+0x9a>
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	60a2      	str	r2, [r4, #8]
 800c0ac:	6962      	ldr	r2, [r4, #20]
 800c0ae:	4252      	negs	r2, r2
 800c0b0:	61a2      	str	r2, [r4, #24]
 800c0b2:	6922      	ldr	r2, [r4, #16]
 800c0b4:	b942      	cbnz	r2, 800c0c8 <__swsetup_r+0xa4>
 800c0b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c0ba:	d1c5      	bne.n	800c048 <__swsetup_r+0x24>
 800c0bc:	bd38      	pop	{r3, r4, r5, pc}
 800c0be:	0799      	lsls	r1, r3, #30
 800c0c0:	bf58      	it	pl
 800c0c2:	6962      	ldrpl	r2, [r4, #20]
 800c0c4:	60a2      	str	r2, [r4, #8]
 800c0c6:	e7f4      	b.n	800c0b2 <__swsetup_r+0x8e>
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e7f7      	b.n	800c0bc <__swsetup_r+0x98>
 800c0cc:	200001fc 	.word	0x200001fc

0800c0d0 <memset>:
 800c0d0:	4402      	add	r2, r0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d100      	bne.n	800c0da <memset+0xa>
 800c0d8:	4770      	bx	lr
 800c0da:	f803 1b01 	strb.w	r1, [r3], #1
 800c0de:	e7f9      	b.n	800c0d4 <memset+0x4>

0800c0e0 <strncmp>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	b16a      	cbz	r2, 800c100 <strncmp+0x20>
 800c0e4:	3901      	subs	r1, #1
 800c0e6:	1884      	adds	r4, r0, r2
 800c0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d103      	bne.n	800c0fc <strncmp+0x1c>
 800c0f4:	42a0      	cmp	r0, r4
 800c0f6:	d001      	beq.n	800c0fc <strncmp+0x1c>
 800c0f8:	2a00      	cmp	r2, #0
 800c0fa:	d1f5      	bne.n	800c0e8 <strncmp+0x8>
 800c0fc:	1ad0      	subs	r0, r2, r3
 800c0fe:	bd10      	pop	{r4, pc}
 800c100:	4610      	mov	r0, r2
 800c102:	e7fc      	b.n	800c0fe <strncmp+0x1e>

0800c104 <strncpy>:
 800c104:	b510      	push	{r4, lr}
 800c106:	3901      	subs	r1, #1
 800c108:	4603      	mov	r3, r0
 800c10a:	b132      	cbz	r2, 800c11a <strncpy+0x16>
 800c10c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c110:	f803 4b01 	strb.w	r4, [r3], #1
 800c114:	3a01      	subs	r2, #1
 800c116:	2c00      	cmp	r4, #0
 800c118:	d1f7      	bne.n	800c10a <strncpy+0x6>
 800c11a:	441a      	add	r2, r3
 800c11c:	2100      	movs	r1, #0
 800c11e:	4293      	cmp	r3, r2
 800c120:	d100      	bne.n	800c124 <strncpy+0x20>
 800c122:	bd10      	pop	{r4, pc}
 800c124:	f803 1b01 	strb.w	r1, [r3], #1
 800c128:	e7f9      	b.n	800c11e <strncpy+0x1a>
	...

0800c12c <_close_r>:
 800c12c:	b538      	push	{r3, r4, r5, lr}
 800c12e:	4d06      	ldr	r5, [pc, #24]	@ (800c148 <_close_r+0x1c>)
 800c130:	2300      	movs	r3, #0
 800c132:	4604      	mov	r4, r0
 800c134:	4608      	mov	r0, r1
 800c136:	602b      	str	r3, [r5, #0]
 800c138:	f7f9 f9b0 	bl	800549c <_close>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	d102      	bne.n	800c146 <_close_r+0x1a>
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	b103      	cbz	r3, 800c146 <_close_r+0x1a>
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	bd38      	pop	{r3, r4, r5, pc}
 800c148:	20000c28 	.word	0x20000c28

0800c14c <_lseek_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d07      	ldr	r5, [pc, #28]	@ (800c16c <_lseek_r+0x20>)
 800c150:	4604      	mov	r4, r0
 800c152:	4608      	mov	r0, r1
 800c154:	4611      	mov	r1, r2
 800c156:	2200      	movs	r2, #0
 800c158:	602a      	str	r2, [r5, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	f7f9 f9c5 	bl	80054ea <_lseek>
 800c160:	1c43      	adds	r3, r0, #1
 800c162:	d102      	bne.n	800c16a <_lseek_r+0x1e>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	b103      	cbz	r3, 800c16a <_lseek_r+0x1e>
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	bd38      	pop	{r3, r4, r5, pc}
 800c16c:	20000c28 	.word	0x20000c28

0800c170 <_read_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d07      	ldr	r5, [pc, #28]	@ (800c190 <_read_r+0x20>)
 800c174:	4604      	mov	r4, r0
 800c176:	4608      	mov	r0, r1
 800c178:	4611      	mov	r1, r2
 800c17a:	2200      	movs	r2, #0
 800c17c:	602a      	str	r2, [r5, #0]
 800c17e:	461a      	mov	r2, r3
 800c180:	f7f9 f953 	bl	800542a <_read>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	d102      	bne.n	800c18e <_read_r+0x1e>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	b103      	cbz	r3, 800c18e <_read_r+0x1e>
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	20000c28 	.word	0x20000c28

0800c194 <_sbrk_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d06      	ldr	r5, [pc, #24]	@ (800c1b0 <_sbrk_r+0x1c>)
 800c198:	2300      	movs	r3, #0
 800c19a:	4604      	mov	r4, r0
 800c19c:	4608      	mov	r0, r1
 800c19e:	602b      	str	r3, [r5, #0]
 800c1a0:	f7f9 f9b0 	bl	8005504 <_sbrk>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d102      	bne.n	800c1ae <_sbrk_r+0x1a>
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	b103      	cbz	r3, 800c1ae <_sbrk_r+0x1a>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	20000c28 	.word	0x20000c28

0800c1b4 <_write_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d07      	ldr	r5, [pc, #28]	@ (800c1d4 <_write_r+0x20>)
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	4611      	mov	r1, r2
 800c1be:	2200      	movs	r2, #0
 800c1c0:	602a      	str	r2, [r5, #0]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f7f9 f94e 	bl	8005464 <_write>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d102      	bne.n	800c1d2 <_write_r+0x1e>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	b103      	cbz	r3, 800c1d2 <_write_r+0x1e>
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	20000c28 	.word	0x20000c28

0800c1d8 <__errno>:
 800c1d8:	4b01      	ldr	r3, [pc, #4]	@ (800c1e0 <__errno+0x8>)
 800c1da:	6818      	ldr	r0, [r3, #0]
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	200001fc 	.word	0x200001fc

0800c1e4 <__libc_init_array>:
 800c1e4:	b570      	push	{r4, r5, r6, lr}
 800c1e6:	4d0d      	ldr	r5, [pc, #52]	@ (800c21c <__libc_init_array+0x38>)
 800c1e8:	4c0d      	ldr	r4, [pc, #52]	@ (800c220 <__libc_init_array+0x3c>)
 800c1ea:	1b64      	subs	r4, r4, r5
 800c1ec:	10a4      	asrs	r4, r4, #2
 800c1ee:	2600      	movs	r6, #0
 800c1f0:	42a6      	cmp	r6, r4
 800c1f2:	d109      	bne.n	800c208 <__libc_init_array+0x24>
 800c1f4:	4d0b      	ldr	r5, [pc, #44]	@ (800c224 <__libc_init_array+0x40>)
 800c1f6:	4c0c      	ldr	r4, [pc, #48]	@ (800c228 <__libc_init_array+0x44>)
 800c1f8:	f003 fb06 	bl	800f808 <_init>
 800c1fc:	1b64      	subs	r4, r4, r5
 800c1fe:	10a4      	asrs	r4, r4, #2
 800c200:	2600      	movs	r6, #0
 800c202:	42a6      	cmp	r6, r4
 800c204:	d105      	bne.n	800c212 <__libc_init_array+0x2e>
 800c206:	bd70      	pop	{r4, r5, r6, pc}
 800c208:	f855 3b04 	ldr.w	r3, [r5], #4
 800c20c:	4798      	blx	r3
 800c20e:	3601      	adds	r6, #1
 800c210:	e7ee      	b.n	800c1f0 <__libc_init_array+0xc>
 800c212:	f855 3b04 	ldr.w	r3, [r5], #4
 800c216:	4798      	blx	r3
 800c218:	3601      	adds	r6, #1
 800c21a:	e7f2      	b.n	800c202 <__libc_init_array+0x1e>
 800c21c:	08010048 	.word	0x08010048
 800c220:	08010048 	.word	0x08010048
 800c224:	08010048 	.word	0x08010048
 800c228:	0801004c 	.word	0x0801004c

0800c22c <__retarget_lock_init_recursive>:
 800c22c:	4770      	bx	lr

0800c22e <__retarget_lock_acquire_recursive>:
 800c22e:	4770      	bx	lr

0800c230 <__retarget_lock_release_recursive>:
 800c230:	4770      	bx	lr

0800c232 <memcpy>:
 800c232:	440a      	add	r2, r1
 800c234:	4291      	cmp	r1, r2
 800c236:	f100 33ff 	add.w	r3, r0, #4294967295
 800c23a:	d100      	bne.n	800c23e <memcpy+0xc>
 800c23c:	4770      	bx	lr
 800c23e:	b510      	push	{r4, lr}
 800c240:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c244:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c248:	4291      	cmp	r1, r2
 800c24a:	d1f9      	bne.n	800c240 <memcpy+0xe>
 800c24c:	bd10      	pop	{r4, pc}
	...

0800c250 <nan>:
 800c250:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c258 <nan+0x8>
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	00000000 	.word	0x00000000
 800c25c:	7ff80000 	.word	0x7ff80000

0800c260 <nanf>:
 800c260:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c268 <nanf+0x8>
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	7fc00000 	.word	0x7fc00000

0800c26c <_free_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	4605      	mov	r5, r0
 800c270:	2900      	cmp	r1, #0
 800c272:	d041      	beq.n	800c2f8 <_free_r+0x8c>
 800c274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c278:	1f0c      	subs	r4, r1, #4
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	bfb8      	it	lt
 800c27e:	18e4      	addlt	r4, r4, r3
 800c280:	f7fe fbf4 	bl	800aa6c <__malloc_lock>
 800c284:	4a1d      	ldr	r2, [pc, #116]	@ (800c2fc <_free_r+0x90>)
 800c286:	6813      	ldr	r3, [r2, #0]
 800c288:	b933      	cbnz	r3, 800c298 <_free_r+0x2c>
 800c28a:	6063      	str	r3, [r4, #4]
 800c28c:	6014      	str	r4, [r2, #0]
 800c28e:	4628      	mov	r0, r5
 800c290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c294:	f7fe bbf0 	b.w	800aa78 <__malloc_unlock>
 800c298:	42a3      	cmp	r3, r4
 800c29a:	d908      	bls.n	800c2ae <_free_r+0x42>
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	1821      	adds	r1, r4, r0
 800c2a0:	428b      	cmp	r3, r1
 800c2a2:	bf01      	itttt	eq
 800c2a4:	6819      	ldreq	r1, [r3, #0]
 800c2a6:	685b      	ldreq	r3, [r3, #4]
 800c2a8:	1809      	addeq	r1, r1, r0
 800c2aa:	6021      	streq	r1, [r4, #0]
 800c2ac:	e7ed      	b.n	800c28a <_free_r+0x1e>
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	b10b      	cbz	r3, 800c2b8 <_free_r+0x4c>
 800c2b4:	42a3      	cmp	r3, r4
 800c2b6:	d9fa      	bls.n	800c2ae <_free_r+0x42>
 800c2b8:	6811      	ldr	r1, [r2, #0]
 800c2ba:	1850      	adds	r0, r2, r1
 800c2bc:	42a0      	cmp	r0, r4
 800c2be:	d10b      	bne.n	800c2d8 <_free_r+0x6c>
 800c2c0:	6820      	ldr	r0, [r4, #0]
 800c2c2:	4401      	add	r1, r0
 800c2c4:	1850      	adds	r0, r2, r1
 800c2c6:	4283      	cmp	r3, r0
 800c2c8:	6011      	str	r1, [r2, #0]
 800c2ca:	d1e0      	bne.n	800c28e <_free_r+0x22>
 800c2cc:	6818      	ldr	r0, [r3, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	6053      	str	r3, [r2, #4]
 800c2d2:	4408      	add	r0, r1
 800c2d4:	6010      	str	r0, [r2, #0]
 800c2d6:	e7da      	b.n	800c28e <_free_r+0x22>
 800c2d8:	d902      	bls.n	800c2e0 <_free_r+0x74>
 800c2da:	230c      	movs	r3, #12
 800c2dc:	602b      	str	r3, [r5, #0]
 800c2de:	e7d6      	b.n	800c28e <_free_r+0x22>
 800c2e0:	6820      	ldr	r0, [r4, #0]
 800c2e2:	1821      	adds	r1, r4, r0
 800c2e4:	428b      	cmp	r3, r1
 800c2e6:	bf04      	itt	eq
 800c2e8:	6819      	ldreq	r1, [r3, #0]
 800c2ea:	685b      	ldreq	r3, [r3, #4]
 800c2ec:	6063      	str	r3, [r4, #4]
 800c2ee:	bf04      	itt	eq
 800c2f0:	1809      	addeq	r1, r1, r0
 800c2f2:	6021      	streq	r1, [r4, #0]
 800c2f4:	6054      	str	r4, [r2, #4]
 800c2f6:	e7ca      	b.n	800c28e <_free_r+0x22>
 800c2f8:	bd38      	pop	{r3, r4, r5, pc}
 800c2fa:	bf00      	nop
 800c2fc:	20000ae8 	.word	0x20000ae8

0800c300 <rshift>:
 800c300:	6903      	ldr	r3, [r0, #16]
 800c302:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c306:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c30a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c30e:	f100 0414 	add.w	r4, r0, #20
 800c312:	dd45      	ble.n	800c3a0 <rshift+0xa0>
 800c314:	f011 011f 	ands.w	r1, r1, #31
 800c318:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c31c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c320:	d10c      	bne.n	800c33c <rshift+0x3c>
 800c322:	f100 0710 	add.w	r7, r0, #16
 800c326:	4629      	mov	r1, r5
 800c328:	42b1      	cmp	r1, r6
 800c32a:	d334      	bcc.n	800c396 <rshift+0x96>
 800c32c:	1a9b      	subs	r3, r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	1eea      	subs	r2, r5, #3
 800c332:	4296      	cmp	r6, r2
 800c334:	bf38      	it	cc
 800c336:	2300      	movcc	r3, #0
 800c338:	4423      	add	r3, r4
 800c33a:	e015      	b.n	800c368 <rshift+0x68>
 800c33c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c340:	f1c1 0820 	rsb	r8, r1, #32
 800c344:	40cf      	lsrs	r7, r1
 800c346:	f105 0e04 	add.w	lr, r5, #4
 800c34a:	46a1      	mov	r9, r4
 800c34c:	4576      	cmp	r6, lr
 800c34e:	46f4      	mov	ip, lr
 800c350:	d815      	bhi.n	800c37e <rshift+0x7e>
 800c352:	1a9a      	subs	r2, r3, r2
 800c354:	0092      	lsls	r2, r2, #2
 800c356:	3a04      	subs	r2, #4
 800c358:	3501      	adds	r5, #1
 800c35a:	42ae      	cmp	r6, r5
 800c35c:	bf38      	it	cc
 800c35e:	2200      	movcc	r2, #0
 800c360:	18a3      	adds	r3, r4, r2
 800c362:	50a7      	str	r7, [r4, r2]
 800c364:	b107      	cbz	r7, 800c368 <rshift+0x68>
 800c366:	3304      	adds	r3, #4
 800c368:	1b1a      	subs	r2, r3, r4
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c370:	bf08      	it	eq
 800c372:	2300      	moveq	r3, #0
 800c374:	6102      	str	r2, [r0, #16]
 800c376:	bf08      	it	eq
 800c378:	6143      	streq	r3, [r0, #20]
 800c37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c37e:	f8dc c000 	ldr.w	ip, [ip]
 800c382:	fa0c fc08 	lsl.w	ip, ip, r8
 800c386:	ea4c 0707 	orr.w	r7, ip, r7
 800c38a:	f849 7b04 	str.w	r7, [r9], #4
 800c38e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c392:	40cf      	lsrs	r7, r1
 800c394:	e7da      	b.n	800c34c <rshift+0x4c>
 800c396:	f851 cb04 	ldr.w	ip, [r1], #4
 800c39a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c39e:	e7c3      	b.n	800c328 <rshift+0x28>
 800c3a0:	4623      	mov	r3, r4
 800c3a2:	e7e1      	b.n	800c368 <rshift+0x68>

0800c3a4 <__hexdig_fun>:
 800c3a4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c3a8:	2b09      	cmp	r3, #9
 800c3aa:	d802      	bhi.n	800c3b2 <__hexdig_fun+0xe>
 800c3ac:	3820      	subs	r0, #32
 800c3ae:	b2c0      	uxtb	r0, r0
 800c3b0:	4770      	bx	lr
 800c3b2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c3b6:	2b05      	cmp	r3, #5
 800c3b8:	d801      	bhi.n	800c3be <__hexdig_fun+0x1a>
 800c3ba:	3847      	subs	r0, #71	@ 0x47
 800c3bc:	e7f7      	b.n	800c3ae <__hexdig_fun+0xa>
 800c3be:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	d801      	bhi.n	800c3ca <__hexdig_fun+0x26>
 800c3c6:	3827      	subs	r0, #39	@ 0x27
 800c3c8:	e7f1      	b.n	800c3ae <__hexdig_fun+0xa>
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	4770      	bx	lr
	...

0800c3d0 <__gethex>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	b085      	sub	sp, #20
 800c3d6:	468a      	mov	sl, r1
 800c3d8:	9302      	str	r3, [sp, #8]
 800c3da:	680b      	ldr	r3, [r1, #0]
 800c3dc:	9001      	str	r0, [sp, #4]
 800c3de:	4690      	mov	r8, r2
 800c3e0:	1c9c      	adds	r4, r3, #2
 800c3e2:	46a1      	mov	r9, r4
 800c3e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c3e8:	2830      	cmp	r0, #48	@ 0x30
 800c3ea:	d0fa      	beq.n	800c3e2 <__gethex+0x12>
 800c3ec:	eba9 0303 	sub.w	r3, r9, r3
 800c3f0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c3f4:	f7ff ffd6 	bl	800c3a4 <__hexdig_fun>
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d168      	bne.n	800c4d0 <__gethex+0x100>
 800c3fe:	49a0      	ldr	r1, [pc, #640]	@ (800c680 <__gethex+0x2b0>)
 800c400:	2201      	movs	r2, #1
 800c402:	4648      	mov	r0, r9
 800c404:	f7ff fe6c 	bl	800c0e0 <strncmp>
 800c408:	4607      	mov	r7, r0
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d167      	bne.n	800c4de <__gethex+0x10e>
 800c40e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c412:	4626      	mov	r6, r4
 800c414:	f7ff ffc6 	bl	800c3a4 <__hexdig_fun>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d062      	beq.n	800c4e2 <__gethex+0x112>
 800c41c:	4623      	mov	r3, r4
 800c41e:	7818      	ldrb	r0, [r3, #0]
 800c420:	2830      	cmp	r0, #48	@ 0x30
 800c422:	4699      	mov	r9, r3
 800c424:	f103 0301 	add.w	r3, r3, #1
 800c428:	d0f9      	beq.n	800c41e <__gethex+0x4e>
 800c42a:	f7ff ffbb 	bl	800c3a4 <__hexdig_fun>
 800c42e:	fab0 f580 	clz	r5, r0
 800c432:	096d      	lsrs	r5, r5, #5
 800c434:	f04f 0b01 	mov.w	fp, #1
 800c438:	464a      	mov	r2, r9
 800c43a:	4616      	mov	r6, r2
 800c43c:	3201      	adds	r2, #1
 800c43e:	7830      	ldrb	r0, [r6, #0]
 800c440:	f7ff ffb0 	bl	800c3a4 <__hexdig_fun>
 800c444:	2800      	cmp	r0, #0
 800c446:	d1f8      	bne.n	800c43a <__gethex+0x6a>
 800c448:	498d      	ldr	r1, [pc, #564]	@ (800c680 <__gethex+0x2b0>)
 800c44a:	2201      	movs	r2, #1
 800c44c:	4630      	mov	r0, r6
 800c44e:	f7ff fe47 	bl	800c0e0 <strncmp>
 800c452:	2800      	cmp	r0, #0
 800c454:	d13f      	bne.n	800c4d6 <__gethex+0x106>
 800c456:	b944      	cbnz	r4, 800c46a <__gethex+0x9a>
 800c458:	1c74      	adds	r4, r6, #1
 800c45a:	4622      	mov	r2, r4
 800c45c:	4616      	mov	r6, r2
 800c45e:	3201      	adds	r2, #1
 800c460:	7830      	ldrb	r0, [r6, #0]
 800c462:	f7ff ff9f 	bl	800c3a4 <__hexdig_fun>
 800c466:	2800      	cmp	r0, #0
 800c468:	d1f8      	bne.n	800c45c <__gethex+0x8c>
 800c46a:	1ba4      	subs	r4, r4, r6
 800c46c:	00a7      	lsls	r7, r4, #2
 800c46e:	7833      	ldrb	r3, [r6, #0]
 800c470:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c474:	2b50      	cmp	r3, #80	@ 0x50
 800c476:	d13e      	bne.n	800c4f6 <__gethex+0x126>
 800c478:	7873      	ldrb	r3, [r6, #1]
 800c47a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c47c:	d033      	beq.n	800c4e6 <__gethex+0x116>
 800c47e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c480:	d034      	beq.n	800c4ec <__gethex+0x11c>
 800c482:	1c71      	adds	r1, r6, #1
 800c484:	2400      	movs	r4, #0
 800c486:	7808      	ldrb	r0, [r1, #0]
 800c488:	f7ff ff8c 	bl	800c3a4 <__hexdig_fun>
 800c48c:	1e43      	subs	r3, r0, #1
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	2b18      	cmp	r3, #24
 800c492:	d830      	bhi.n	800c4f6 <__gethex+0x126>
 800c494:	f1a0 0210 	sub.w	r2, r0, #16
 800c498:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c49c:	f7ff ff82 	bl	800c3a4 <__hexdig_fun>
 800c4a0:	f100 3cff 	add.w	ip, r0, #4294967295
 800c4a4:	fa5f fc8c 	uxtb.w	ip, ip
 800c4a8:	f1bc 0f18 	cmp.w	ip, #24
 800c4ac:	f04f 030a 	mov.w	r3, #10
 800c4b0:	d91e      	bls.n	800c4f0 <__gethex+0x120>
 800c4b2:	b104      	cbz	r4, 800c4b6 <__gethex+0xe6>
 800c4b4:	4252      	negs	r2, r2
 800c4b6:	4417      	add	r7, r2
 800c4b8:	f8ca 1000 	str.w	r1, [sl]
 800c4bc:	b1ed      	cbz	r5, 800c4fa <__gethex+0x12a>
 800c4be:	f1bb 0f00 	cmp.w	fp, #0
 800c4c2:	bf0c      	ite	eq
 800c4c4:	2506      	moveq	r5, #6
 800c4c6:	2500      	movne	r5, #0
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	b005      	add	sp, #20
 800c4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d0:	2500      	movs	r5, #0
 800c4d2:	462c      	mov	r4, r5
 800c4d4:	e7b0      	b.n	800c438 <__gethex+0x68>
 800c4d6:	2c00      	cmp	r4, #0
 800c4d8:	d1c7      	bne.n	800c46a <__gethex+0x9a>
 800c4da:	4627      	mov	r7, r4
 800c4dc:	e7c7      	b.n	800c46e <__gethex+0x9e>
 800c4de:	464e      	mov	r6, r9
 800c4e0:	462f      	mov	r7, r5
 800c4e2:	2501      	movs	r5, #1
 800c4e4:	e7c3      	b.n	800c46e <__gethex+0x9e>
 800c4e6:	2400      	movs	r4, #0
 800c4e8:	1cb1      	adds	r1, r6, #2
 800c4ea:	e7cc      	b.n	800c486 <__gethex+0xb6>
 800c4ec:	2401      	movs	r4, #1
 800c4ee:	e7fb      	b.n	800c4e8 <__gethex+0x118>
 800c4f0:	fb03 0002 	mla	r0, r3, r2, r0
 800c4f4:	e7ce      	b.n	800c494 <__gethex+0xc4>
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	e7de      	b.n	800c4b8 <__gethex+0xe8>
 800c4fa:	eba6 0309 	sub.w	r3, r6, r9
 800c4fe:	3b01      	subs	r3, #1
 800c500:	4629      	mov	r1, r5
 800c502:	2b07      	cmp	r3, #7
 800c504:	dc0a      	bgt.n	800c51c <__gethex+0x14c>
 800c506:	9801      	ldr	r0, [sp, #4]
 800c508:	f000 fa46 	bl	800c998 <_Balloc>
 800c50c:	4604      	mov	r4, r0
 800c50e:	b940      	cbnz	r0, 800c522 <__gethex+0x152>
 800c510:	4b5c      	ldr	r3, [pc, #368]	@ (800c684 <__gethex+0x2b4>)
 800c512:	4602      	mov	r2, r0
 800c514:	21e4      	movs	r1, #228	@ 0xe4
 800c516:	485c      	ldr	r0, [pc, #368]	@ (800c688 <__gethex+0x2b8>)
 800c518:	f001 fffe 	bl	800e518 <__assert_func>
 800c51c:	3101      	adds	r1, #1
 800c51e:	105b      	asrs	r3, r3, #1
 800c520:	e7ef      	b.n	800c502 <__gethex+0x132>
 800c522:	f100 0a14 	add.w	sl, r0, #20
 800c526:	2300      	movs	r3, #0
 800c528:	4655      	mov	r5, sl
 800c52a:	469b      	mov	fp, r3
 800c52c:	45b1      	cmp	r9, r6
 800c52e:	d337      	bcc.n	800c5a0 <__gethex+0x1d0>
 800c530:	f845 bb04 	str.w	fp, [r5], #4
 800c534:	eba5 050a 	sub.w	r5, r5, sl
 800c538:	10ad      	asrs	r5, r5, #2
 800c53a:	6125      	str	r5, [r4, #16]
 800c53c:	4658      	mov	r0, fp
 800c53e:	f000 fb1d 	bl	800cb7c <__hi0bits>
 800c542:	016d      	lsls	r5, r5, #5
 800c544:	f8d8 6000 	ldr.w	r6, [r8]
 800c548:	1a2d      	subs	r5, r5, r0
 800c54a:	42b5      	cmp	r5, r6
 800c54c:	dd54      	ble.n	800c5f8 <__gethex+0x228>
 800c54e:	1bad      	subs	r5, r5, r6
 800c550:	4629      	mov	r1, r5
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fea9 	bl	800d2aa <__any_on>
 800c558:	4681      	mov	r9, r0
 800c55a:	b178      	cbz	r0, 800c57c <__gethex+0x1ac>
 800c55c:	1e6b      	subs	r3, r5, #1
 800c55e:	1159      	asrs	r1, r3, #5
 800c560:	f003 021f 	and.w	r2, r3, #31
 800c564:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c568:	f04f 0901 	mov.w	r9, #1
 800c56c:	fa09 f202 	lsl.w	r2, r9, r2
 800c570:	420a      	tst	r2, r1
 800c572:	d003      	beq.n	800c57c <__gethex+0x1ac>
 800c574:	454b      	cmp	r3, r9
 800c576:	dc36      	bgt.n	800c5e6 <__gethex+0x216>
 800c578:	f04f 0902 	mov.w	r9, #2
 800c57c:	4629      	mov	r1, r5
 800c57e:	4620      	mov	r0, r4
 800c580:	f7ff febe 	bl	800c300 <rshift>
 800c584:	442f      	add	r7, r5
 800c586:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c58a:	42bb      	cmp	r3, r7
 800c58c:	da42      	bge.n	800c614 <__gethex+0x244>
 800c58e:	9801      	ldr	r0, [sp, #4]
 800c590:	4621      	mov	r1, r4
 800c592:	f000 fa41 	bl	800ca18 <_Bfree>
 800c596:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c598:	2300      	movs	r3, #0
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	25a3      	movs	r5, #163	@ 0xa3
 800c59e:	e793      	b.n	800c4c8 <__gethex+0xf8>
 800c5a0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c5a4:	2a2e      	cmp	r2, #46	@ 0x2e
 800c5a6:	d012      	beq.n	800c5ce <__gethex+0x1fe>
 800c5a8:	2b20      	cmp	r3, #32
 800c5aa:	d104      	bne.n	800c5b6 <__gethex+0x1e6>
 800c5ac:	f845 bb04 	str.w	fp, [r5], #4
 800c5b0:	f04f 0b00 	mov.w	fp, #0
 800c5b4:	465b      	mov	r3, fp
 800c5b6:	7830      	ldrb	r0, [r6, #0]
 800c5b8:	9303      	str	r3, [sp, #12]
 800c5ba:	f7ff fef3 	bl	800c3a4 <__hexdig_fun>
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	f000 000f 	and.w	r0, r0, #15
 800c5c4:	4098      	lsls	r0, r3
 800c5c6:	ea4b 0b00 	orr.w	fp, fp, r0
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	e7ae      	b.n	800c52c <__gethex+0x15c>
 800c5ce:	45b1      	cmp	r9, r6
 800c5d0:	d8ea      	bhi.n	800c5a8 <__gethex+0x1d8>
 800c5d2:	492b      	ldr	r1, [pc, #172]	@ (800c680 <__gethex+0x2b0>)
 800c5d4:	9303      	str	r3, [sp, #12]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f7ff fd81 	bl	800c0e0 <strncmp>
 800c5de:	9b03      	ldr	r3, [sp, #12]
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d1e1      	bne.n	800c5a8 <__gethex+0x1d8>
 800c5e4:	e7a2      	b.n	800c52c <__gethex+0x15c>
 800c5e6:	1ea9      	subs	r1, r5, #2
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f000 fe5e 	bl	800d2aa <__any_on>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d0c2      	beq.n	800c578 <__gethex+0x1a8>
 800c5f2:	f04f 0903 	mov.w	r9, #3
 800c5f6:	e7c1      	b.n	800c57c <__gethex+0x1ac>
 800c5f8:	da09      	bge.n	800c60e <__gethex+0x23e>
 800c5fa:	1b75      	subs	r5, r6, r5
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	9801      	ldr	r0, [sp, #4]
 800c600:	462a      	mov	r2, r5
 800c602:	f000 fc19 	bl	800ce38 <__lshift>
 800c606:	1b7f      	subs	r7, r7, r5
 800c608:	4604      	mov	r4, r0
 800c60a:	f100 0a14 	add.w	sl, r0, #20
 800c60e:	f04f 0900 	mov.w	r9, #0
 800c612:	e7b8      	b.n	800c586 <__gethex+0x1b6>
 800c614:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c618:	42bd      	cmp	r5, r7
 800c61a:	dd6f      	ble.n	800c6fc <__gethex+0x32c>
 800c61c:	1bed      	subs	r5, r5, r7
 800c61e:	42ae      	cmp	r6, r5
 800c620:	dc34      	bgt.n	800c68c <__gethex+0x2bc>
 800c622:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c626:	2b02      	cmp	r3, #2
 800c628:	d022      	beq.n	800c670 <__gethex+0x2a0>
 800c62a:	2b03      	cmp	r3, #3
 800c62c:	d024      	beq.n	800c678 <__gethex+0x2a8>
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d115      	bne.n	800c65e <__gethex+0x28e>
 800c632:	42ae      	cmp	r6, r5
 800c634:	d113      	bne.n	800c65e <__gethex+0x28e>
 800c636:	2e01      	cmp	r6, #1
 800c638:	d10b      	bne.n	800c652 <__gethex+0x282>
 800c63a:	9a02      	ldr	r2, [sp, #8]
 800c63c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c640:	6013      	str	r3, [r2, #0]
 800c642:	2301      	movs	r3, #1
 800c644:	6123      	str	r3, [r4, #16]
 800c646:	f8ca 3000 	str.w	r3, [sl]
 800c64a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c64c:	2562      	movs	r5, #98	@ 0x62
 800c64e:	601c      	str	r4, [r3, #0]
 800c650:	e73a      	b.n	800c4c8 <__gethex+0xf8>
 800c652:	1e71      	subs	r1, r6, #1
 800c654:	4620      	mov	r0, r4
 800c656:	f000 fe28 	bl	800d2aa <__any_on>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d1ed      	bne.n	800c63a <__gethex+0x26a>
 800c65e:	9801      	ldr	r0, [sp, #4]
 800c660:	4621      	mov	r1, r4
 800c662:	f000 f9d9 	bl	800ca18 <_Bfree>
 800c666:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c668:	2300      	movs	r3, #0
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	2550      	movs	r5, #80	@ 0x50
 800c66e:	e72b      	b.n	800c4c8 <__gethex+0xf8>
 800c670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1f3      	bne.n	800c65e <__gethex+0x28e>
 800c676:	e7e0      	b.n	800c63a <__gethex+0x26a>
 800c678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1dd      	bne.n	800c63a <__gethex+0x26a>
 800c67e:	e7ee      	b.n	800c65e <__gethex+0x28e>
 800c680:	0800fa8c 	.word	0x0800fa8c
 800c684:	0800faa7 	.word	0x0800faa7
 800c688:	0800fab8 	.word	0x0800fab8
 800c68c:	1e6f      	subs	r7, r5, #1
 800c68e:	f1b9 0f00 	cmp.w	r9, #0
 800c692:	d130      	bne.n	800c6f6 <__gethex+0x326>
 800c694:	b127      	cbz	r7, 800c6a0 <__gethex+0x2d0>
 800c696:	4639      	mov	r1, r7
 800c698:	4620      	mov	r0, r4
 800c69a:	f000 fe06 	bl	800d2aa <__any_on>
 800c69e:	4681      	mov	r9, r0
 800c6a0:	117a      	asrs	r2, r7, #5
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c6a8:	f007 071f 	and.w	r7, r7, #31
 800c6ac:	40bb      	lsls	r3, r7
 800c6ae:	4213      	tst	r3, r2
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	bf18      	it	ne
 800c6b6:	f049 0902 	orrne.w	r9, r9, #2
 800c6ba:	f7ff fe21 	bl	800c300 <rshift>
 800c6be:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c6c2:	1b76      	subs	r6, r6, r5
 800c6c4:	2502      	movs	r5, #2
 800c6c6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ca:	d047      	beq.n	800c75c <__gethex+0x38c>
 800c6cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d015      	beq.n	800c700 <__gethex+0x330>
 800c6d4:	2b03      	cmp	r3, #3
 800c6d6:	d017      	beq.n	800c708 <__gethex+0x338>
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d109      	bne.n	800c6f0 <__gethex+0x320>
 800c6dc:	f019 0f02 	tst.w	r9, #2
 800c6e0:	d006      	beq.n	800c6f0 <__gethex+0x320>
 800c6e2:	f8da 3000 	ldr.w	r3, [sl]
 800c6e6:	ea49 0903 	orr.w	r9, r9, r3
 800c6ea:	f019 0f01 	tst.w	r9, #1
 800c6ee:	d10e      	bne.n	800c70e <__gethex+0x33e>
 800c6f0:	f045 0510 	orr.w	r5, r5, #16
 800c6f4:	e032      	b.n	800c75c <__gethex+0x38c>
 800c6f6:	f04f 0901 	mov.w	r9, #1
 800c6fa:	e7d1      	b.n	800c6a0 <__gethex+0x2d0>
 800c6fc:	2501      	movs	r5, #1
 800c6fe:	e7e2      	b.n	800c6c6 <__gethex+0x2f6>
 800c700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c702:	f1c3 0301 	rsb	r3, r3, #1
 800c706:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d0f0      	beq.n	800c6f0 <__gethex+0x320>
 800c70e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c712:	f104 0314 	add.w	r3, r4, #20
 800c716:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c71a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c71e:	f04f 0c00 	mov.w	ip, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f853 2b04 	ldr.w	r2, [r3], #4
 800c728:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c72c:	d01b      	beq.n	800c766 <__gethex+0x396>
 800c72e:	3201      	adds	r2, #1
 800c730:	6002      	str	r2, [r0, #0]
 800c732:	2d02      	cmp	r5, #2
 800c734:	f104 0314 	add.w	r3, r4, #20
 800c738:	d13c      	bne.n	800c7b4 <__gethex+0x3e4>
 800c73a:	f8d8 2000 	ldr.w	r2, [r8]
 800c73e:	3a01      	subs	r2, #1
 800c740:	42b2      	cmp	r2, r6
 800c742:	d109      	bne.n	800c758 <__gethex+0x388>
 800c744:	1171      	asrs	r1, r6, #5
 800c746:	2201      	movs	r2, #1
 800c748:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c74c:	f006 061f 	and.w	r6, r6, #31
 800c750:	fa02 f606 	lsl.w	r6, r2, r6
 800c754:	421e      	tst	r6, r3
 800c756:	d13a      	bne.n	800c7ce <__gethex+0x3fe>
 800c758:	f045 0520 	orr.w	r5, r5, #32
 800c75c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c75e:	601c      	str	r4, [r3, #0]
 800c760:	9b02      	ldr	r3, [sp, #8]
 800c762:	601f      	str	r7, [r3, #0]
 800c764:	e6b0      	b.n	800c4c8 <__gethex+0xf8>
 800c766:	4299      	cmp	r1, r3
 800c768:	f843 cc04 	str.w	ip, [r3, #-4]
 800c76c:	d8d9      	bhi.n	800c722 <__gethex+0x352>
 800c76e:	68a3      	ldr	r3, [r4, #8]
 800c770:	459b      	cmp	fp, r3
 800c772:	db17      	blt.n	800c7a4 <__gethex+0x3d4>
 800c774:	6861      	ldr	r1, [r4, #4]
 800c776:	9801      	ldr	r0, [sp, #4]
 800c778:	3101      	adds	r1, #1
 800c77a:	f000 f90d 	bl	800c998 <_Balloc>
 800c77e:	4681      	mov	r9, r0
 800c780:	b918      	cbnz	r0, 800c78a <__gethex+0x3ba>
 800c782:	4b1a      	ldr	r3, [pc, #104]	@ (800c7ec <__gethex+0x41c>)
 800c784:	4602      	mov	r2, r0
 800c786:	2184      	movs	r1, #132	@ 0x84
 800c788:	e6c5      	b.n	800c516 <__gethex+0x146>
 800c78a:	6922      	ldr	r2, [r4, #16]
 800c78c:	3202      	adds	r2, #2
 800c78e:	f104 010c 	add.w	r1, r4, #12
 800c792:	0092      	lsls	r2, r2, #2
 800c794:	300c      	adds	r0, #12
 800c796:	f7ff fd4c 	bl	800c232 <memcpy>
 800c79a:	4621      	mov	r1, r4
 800c79c:	9801      	ldr	r0, [sp, #4]
 800c79e:	f000 f93b 	bl	800ca18 <_Bfree>
 800c7a2:	464c      	mov	r4, r9
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7ac:	6122      	str	r2, [r4, #16]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	615a      	str	r2, [r3, #20]
 800c7b2:	e7be      	b.n	800c732 <__gethex+0x362>
 800c7b4:	6922      	ldr	r2, [r4, #16]
 800c7b6:	455a      	cmp	r2, fp
 800c7b8:	dd0b      	ble.n	800c7d2 <__gethex+0x402>
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f7ff fd9f 	bl	800c300 <rshift>
 800c7c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7c6:	3701      	adds	r7, #1
 800c7c8:	42bb      	cmp	r3, r7
 800c7ca:	f6ff aee0 	blt.w	800c58e <__gethex+0x1be>
 800c7ce:	2501      	movs	r5, #1
 800c7d0:	e7c2      	b.n	800c758 <__gethex+0x388>
 800c7d2:	f016 061f 	ands.w	r6, r6, #31
 800c7d6:	d0fa      	beq.n	800c7ce <__gethex+0x3fe>
 800c7d8:	4453      	add	r3, sl
 800c7da:	f1c6 0620 	rsb	r6, r6, #32
 800c7de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7e2:	f000 f9cb 	bl	800cb7c <__hi0bits>
 800c7e6:	42b0      	cmp	r0, r6
 800c7e8:	dbe7      	blt.n	800c7ba <__gethex+0x3ea>
 800c7ea:	e7f0      	b.n	800c7ce <__gethex+0x3fe>
 800c7ec:	0800faa7 	.word	0x0800faa7

0800c7f0 <L_shift>:
 800c7f0:	f1c2 0208 	rsb	r2, r2, #8
 800c7f4:	0092      	lsls	r2, r2, #2
 800c7f6:	b570      	push	{r4, r5, r6, lr}
 800c7f8:	f1c2 0620 	rsb	r6, r2, #32
 800c7fc:	6843      	ldr	r3, [r0, #4]
 800c7fe:	6804      	ldr	r4, [r0, #0]
 800c800:	fa03 f506 	lsl.w	r5, r3, r6
 800c804:	432c      	orrs	r4, r5
 800c806:	40d3      	lsrs	r3, r2
 800c808:	6004      	str	r4, [r0, #0]
 800c80a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c80e:	4288      	cmp	r0, r1
 800c810:	d3f4      	bcc.n	800c7fc <L_shift+0xc>
 800c812:	bd70      	pop	{r4, r5, r6, pc}

0800c814 <__match>:
 800c814:	b530      	push	{r4, r5, lr}
 800c816:	6803      	ldr	r3, [r0, #0]
 800c818:	3301      	adds	r3, #1
 800c81a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c81e:	b914      	cbnz	r4, 800c826 <__match+0x12>
 800c820:	6003      	str	r3, [r0, #0]
 800c822:	2001      	movs	r0, #1
 800c824:	bd30      	pop	{r4, r5, pc}
 800c826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c82a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c82e:	2d19      	cmp	r5, #25
 800c830:	bf98      	it	ls
 800c832:	3220      	addls	r2, #32
 800c834:	42a2      	cmp	r2, r4
 800c836:	d0f0      	beq.n	800c81a <__match+0x6>
 800c838:	2000      	movs	r0, #0
 800c83a:	e7f3      	b.n	800c824 <__match+0x10>

0800c83c <__hexnan>:
 800c83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c840:	680b      	ldr	r3, [r1, #0]
 800c842:	6801      	ldr	r1, [r0, #0]
 800c844:	115e      	asrs	r6, r3, #5
 800c846:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c84a:	f013 031f 	ands.w	r3, r3, #31
 800c84e:	b087      	sub	sp, #28
 800c850:	bf18      	it	ne
 800c852:	3604      	addne	r6, #4
 800c854:	2500      	movs	r5, #0
 800c856:	1f37      	subs	r7, r6, #4
 800c858:	4682      	mov	sl, r0
 800c85a:	4690      	mov	r8, r2
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c862:	46b9      	mov	r9, r7
 800c864:	463c      	mov	r4, r7
 800c866:	9502      	str	r5, [sp, #8]
 800c868:	46ab      	mov	fp, r5
 800c86a:	784a      	ldrb	r2, [r1, #1]
 800c86c:	1c4b      	adds	r3, r1, #1
 800c86e:	9303      	str	r3, [sp, #12]
 800c870:	b342      	cbz	r2, 800c8c4 <__hexnan+0x88>
 800c872:	4610      	mov	r0, r2
 800c874:	9105      	str	r1, [sp, #20]
 800c876:	9204      	str	r2, [sp, #16]
 800c878:	f7ff fd94 	bl	800c3a4 <__hexdig_fun>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d151      	bne.n	800c924 <__hexnan+0xe8>
 800c880:	9a04      	ldr	r2, [sp, #16]
 800c882:	9905      	ldr	r1, [sp, #20]
 800c884:	2a20      	cmp	r2, #32
 800c886:	d818      	bhi.n	800c8ba <__hexnan+0x7e>
 800c888:	9b02      	ldr	r3, [sp, #8]
 800c88a:	459b      	cmp	fp, r3
 800c88c:	dd13      	ble.n	800c8b6 <__hexnan+0x7a>
 800c88e:	454c      	cmp	r4, r9
 800c890:	d206      	bcs.n	800c8a0 <__hexnan+0x64>
 800c892:	2d07      	cmp	r5, #7
 800c894:	dc04      	bgt.n	800c8a0 <__hexnan+0x64>
 800c896:	462a      	mov	r2, r5
 800c898:	4649      	mov	r1, r9
 800c89a:	4620      	mov	r0, r4
 800c89c:	f7ff ffa8 	bl	800c7f0 <L_shift>
 800c8a0:	4544      	cmp	r4, r8
 800c8a2:	d952      	bls.n	800c94a <__hexnan+0x10e>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	f1a4 0904 	sub.w	r9, r4, #4
 800c8aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8ae:	f8cd b008 	str.w	fp, [sp, #8]
 800c8b2:	464c      	mov	r4, r9
 800c8b4:	461d      	mov	r5, r3
 800c8b6:	9903      	ldr	r1, [sp, #12]
 800c8b8:	e7d7      	b.n	800c86a <__hexnan+0x2e>
 800c8ba:	2a29      	cmp	r2, #41	@ 0x29
 800c8bc:	d157      	bne.n	800c96e <__hexnan+0x132>
 800c8be:	3102      	adds	r1, #2
 800c8c0:	f8ca 1000 	str.w	r1, [sl]
 800c8c4:	f1bb 0f00 	cmp.w	fp, #0
 800c8c8:	d051      	beq.n	800c96e <__hexnan+0x132>
 800c8ca:	454c      	cmp	r4, r9
 800c8cc:	d206      	bcs.n	800c8dc <__hexnan+0xa0>
 800c8ce:	2d07      	cmp	r5, #7
 800c8d0:	dc04      	bgt.n	800c8dc <__hexnan+0xa0>
 800c8d2:	462a      	mov	r2, r5
 800c8d4:	4649      	mov	r1, r9
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f7ff ff8a 	bl	800c7f0 <L_shift>
 800c8dc:	4544      	cmp	r4, r8
 800c8de:	d936      	bls.n	800c94e <__hexnan+0x112>
 800c8e0:	f1a8 0204 	sub.w	r2, r8, #4
 800c8e4:	4623      	mov	r3, r4
 800c8e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8ee:	429f      	cmp	r7, r3
 800c8f0:	d2f9      	bcs.n	800c8e6 <__hexnan+0xaa>
 800c8f2:	1b3b      	subs	r3, r7, r4
 800c8f4:	f023 0303 	bic.w	r3, r3, #3
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	3401      	adds	r4, #1
 800c8fc:	3e03      	subs	r6, #3
 800c8fe:	42b4      	cmp	r4, r6
 800c900:	bf88      	it	hi
 800c902:	2304      	movhi	r3, #4
 800c904:	4443      	add	r3, r8
 800c906:	2200      	movs	r2, #0
 800c908:	f843 2b04 	str.w	r2, [r3], #4
 800c90c:	429f      	cmp	r7, r3
 800c90e:	d2fb      	bcs.n	800c908 <__hexnan+0xcc>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	b91b      	cbnz	r3, 800c91c <__hexnan+0xe0>
 800c914:	4547      	cmp	r7, r8
 800c916:	d128      	bne.n	800c96a <__hexnan+0x12e>
 800c918:	2301      	movs	r3, #1
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	2005      	movs	r0, #5
 800c91e:	b007      	add	sp, #28
 800c920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c924:	3501      	adds	r5, #1
 800c926:	2d08      	cmp	r5, #8
 800c928:	f10b 0b01 	add.w	fp, fp, #1
 800c92c:	dd06      	ble.n	800c93c <__hexnan+0x100>
 800c92e:	4544      	cmp	r4, r8
 800c930:	d9c1      	bls.n	800c8b6 <__hexnan+0x7a>
 800c932:	2300      	movs	r3, #0
 800c934:	f844 3c04 	str.w	r3, [r4, #-4]
 800c938:	2501      	movs	r5, #1
 800c93a:	3c04      	subs	r4, #4
 800c93c:	6822      	ldr	r2, [r4, #0]
 800c93e:	f000 000f 	and.w	r0, r0, #15
 800c942:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c946:	6020      	str	r0, [r4, #0]
 800c948:	e7b5      	b.n	800c8b6 <__hexnan+0x7a>
 800c94a:	2508      	movs	r5, #8
 800c94c:	e7b3      	b.n	800c8b6 <__hexnan+0x7a>
 800c94e:	9b01      	ldr	r3, [sp, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d0dd      	beq.n	800c910 <__hexnan+0xd4>
 800c954:	f1c3 0320 	rsb	r3, r3, #32
 800c958:	f04f 32ff 	mov.w	r2, #4294967295
 800c95c:	40da      	lsrs	r2, r3
 800c95e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c962:	4013      	ands	r3, r2
 800c964:	f846 3c04 	str.w	r3, [r6, #-4]
 800c968:	e7d2      	b.n	800c910 <__hexnan+0xd4>
 800c96a:	3f04      	subs	r7, #4
 800c96c:	e7d0      	b.n	800c910 <__hexnan+0xd4>
 800c96e:	2004      	movs	r0, #4
 800c970:	e7d5      	b.n	800c91e <__hexnan+0xe2>

0800c972 <__ascii_mbtowc>:
 800c972:	b082      	sub	sp, #8
 800c974:	b901      	cbnz	r1, 800c978 <__ascii_mbtowc+0x6>
 800c976:	a901      	add	r1, sp, #4
 800c978:	b142      	cbz	r2, 800c98c <__ascii_mbtowc+0x1a>
 800c97a:	b14b      	cbz	r3, 800c990 <__ascii_mbtowc+0x1e>
 800c97c:	7813      	ldrb	r3, [r2, #0]
 800c97e:	600b      	str	r3, [r1, #0]
 800c980:	7812      	ldrb	r2, [r2, #0]
 800c982:	1e10      	subs	r0, r2, #0
 800c984:	bf18      	it	ne
 800c986:	2001      	movne	r0, #1
 800c988:	b002      	add	sp, #8
 800c98a:	4770      	bx	lr
 800c98c:	4610      	mov	r0, r2
 800c98e:	e7fb      	b.n	800c988 <__ascii_mbtowc+0x16>
 800c990:	f06f 0001 	mvn.w	r0, #1
 800c994:	e7f8      	b.n	800c988 <__ascii_mbtowc+0x16>
	...

0800c998 <_Balloc>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	69c6      	ldr	r6, [r0, #28]
 800c99c:	4604      	mov	r4, r0
 800c99e:	460d      	mov	r5, r1
 800c9a0:	b976      	cbnz	r6, 800c9c0 <_Balloc+0x28>
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f7fd ffb8 	bl	800a918 <malloc>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	61e0      	str	r0, [r4, #28]
 800c9ac:	b920      	cbnz	r0, 800c9b8 <_Balloc+0x20>
 800c9ae:	4b18      	ldr	r3, [pc, #96]	@ (800ca10 <_Balloc+0x78>)
 800c9b0:	4818      	ldr	r0, [pc, #96]	@ (800ca14 <_Balloc+0x7c>)
 800c9b2:	216b      	movs	r1, #107	@ 0x6b
 800c9b4:	f001 fdb0 	bl	800e518 <__assert_func>
 800c9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9bc:	6006      	str	r6, [r0, #0]
 800c9be:	60c6      	str	r6, [r0, #12]
 800c9c0:	69e6      	ldr	r6, [r4, #28]
 800c9c2:	68f3      	ldr	r3, [r6, #12]
 800c9c4:	b183      	cbz	r3, 800c9e8 <_Balloc+0x50>
 800c9c6:	69e3      	ldr	r3, [r4, #28]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ce:	b9b8      	cbnz	r0, 800ca00 <_Balloc+0x68>
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	fa01 f605 	lsl.w	r6, r1, r5
 800c9d6:	1d72      	adds	r2, r6, #5
 800c9d8:	0092      	lsls	r2, r2, #2
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f001 fdba 	bl	800e554 <_calloc_r>
 800c9e0:	b160      	cbz	r0, 800c9fc <_Balloc+0x64>
 800c9e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9e6:	e00e      	b.n	800ca06 <_Balloc+0x6e>
 800c9e8:	2221      	movs	r2, #33	@ 0x21
 800c9ea:	2104      	movs	r1, #4
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f001 fdb1 	bl	800e554 <_calloc_r>
 800c9f2:	69e3      	ldr	r3, [r4, #28]
 800c9f4:	60f0      	str	r0, [r6, #12]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e4      	bne.n	800c9c6 <_Balloc+0x2e>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	6802      	ldr	r2, [r0, #0]
 800ca02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca06:	2300      	movs	r3, #0
 800ca08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca0c:	e7f7      	b.n	800c9fe <_Balloc+0x66>
 800ca0e:	bf00      	nop
 800ca10:	0800fb18 	.word	0x0800fb18
 800ca14:	0800fb2f 	.word	0x0800fb2f

0800ca18 <_Bfree>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	69c6      	ldr	r6, [r0, #28]
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	b976      	cbnz	r6, 800ca40 <_Bfree+0x28>
 800ca22:	2010      	movs	r0, #16
 800ca24:	f7fd ff78 	bl	800a918 <malloc>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	61e8      	str	r0, [r5, #28]
 800ca2c:	b920      	cbnz	r0, 800ca38 <_Bfree+0x20>
 800ca2e:	4b09      	ldr	r3, [pc, #36]	@ (800ca54 <_Bfree+0x3c>)
 800ca30:	4809      	ldr	r0, [pc, #36]	@ (800ca58 <_Bfree+0x40>)
 800ca32:	218f      	movs	r1, #143	@ 0x8f
 800ca34:	f001 fd70 	bl	800e518 <__assert_func>
 800ca38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca3c:	6006      	str	r6, [r0, #0]
 800ca3e:	60c6      	str	r6, [r0, #12]
 800ca40:	b13c      	cbz	r4, 800ca52 <_Bfree+0x3a>
 800ca42:	69eb      	ldr	r3, [r5, #28]
 800ca44:	6862      	ldr	r2, [r4, #4]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca4c:	6021      	str	r1, [r4, #0]
 800ca4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	0800fb18 	.word	0x0800fb18
 800ca58:	0800fb2f 	.word	0x0800fb2f

0800ca5c <__multadd>:
 800ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca60:	690d      	ldr	r5, [r1, #16]
 800ca62:	4607      	mov	r7, r0
 800ca64:	460c      	mov	r4, r1
 800ca66:	461e      	mov	r6, r3
 800ca68:	f101 0c14 	add.w	ip, r1, #20
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca72:	b299      	uxth	r1, r3
 800ca74:	fb02 6101 	mla	r1, r2, r1, r6
 800ca78:	0c1e      	lsrs	r6, r3, #16
 800ca7a:	0c0b      	lsrs	r3, r1, #16
 800ca7c:	fb02 3306 	mla	r3, r2, r6, r3
 800ca80:	b289      	uxth	r1, r1
 800ca82:	3001      	adds	r0, #1
 800ca84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca88:	4285      	cmp	r5, r0
 800ca8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ca8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca92:	dcec      	bgt.n	800ca6e <__multadd+0x12>
 800ca94:	b30e      	cbz	r6, 800cada <__multadd+0x7e>
 800ca96:	68a3      	ldr	r3, [r4, #8]
 800ca98:	42ab      	cmp	r3, r5
 800ca9a:	dc19      	bgt.n	800cad0 <__multadd+0x74>
 800ca9c:	6861      	ldr	r1, [r4, #4]
 800ca9e:	4638      	mov	r0, r7
 800caa0:	3101      	adds	r1, #1
 800caa2:	f7ff ff79 	bl	800c998 <_Balloc>
 800caa6:	4680      	mov	r8, r0
 800caa8:	b928      	cbnz	r0, 800cab6 <__multadd+0x5a>
 800caaa:	4602      	mov	r2, r0
 800caac:	4b0c      	ldr	r3, [pc, #48]	@ (800cae0 <__multadd+0x84>)
 800caae:	480d      	ldr	r0, [pc, #52]	@ (800cae4 <__multadd+0x88>)
 800cab0:	21ba      	movs	r1, #186	@ 0xba
 800cab2:	f001 fd31 	bl	800e518 <__assert_func>
 800cab6:	6922      	ldr	r2, [r4, #16]
 800cab8:	3202      	adds	r2, #2
 800caba:	f104 010c 	add.w	r1, r4, #12
 800cabe:	0092      	lsls	r2, r2, #2
 800cac0:	300c      	adds	r0, #12
 800cac2:	f7ff fbb6 	bl	800c232 <memcpy>
 800cac6:	4621      	mov	r1, r4
 800cac8:	4638      	mov	r0, r7
 800caca:	f7ff ffa5 	bl	800ca18 <_Bfree>
 800cace:	4644      	mov	r4, r8
 800cad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cad4:	3501      	adds	r5, #1
 800cad6:	615e      	str	r6, [r3, #20]
 800cad8:	6125      	str	r5, [r4, #16]
 800cada:	4620      	mov	r0, r4
 800cadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae0:	0800faa7 	.word	0x0800faa7
 800cae4:	0800fb2f 	.word	0x0800fb2f

0800cae8 <__s2b>:
 800cae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caec:	460c      	mov	r4, r1
 800caee:	4615      	mov	r5, r2
 800caf0:	461f      	mov	r7, r3
 800caf2:	2209      	movs	r2, #9
 800caf4:	3308      	adds	r3, #8
 800caf6:	4606      	mov	r6, r0
 800caf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cafc:	2100      	movs	r1, #0
 800cafe:	2201      	movs	r2, #1
 800cb00:	429a      	cmp	r2, r3
 800cb02:	db09      	blt.n	800cb18 <__s2b+0x30>
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7ff ff47 	bl	800c998 <_Balloc>
 800cb0a:	b940      	cbnz	r0, 800cb1e <__s2b+0x36>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	4b19      	ldr	r3, [pc, #100]	@ (800cb74 <__s2b+0x8c>)
 800cb10:	4819      	ldr	r0, [pc, #100]	@ (800cb78 <__s2b+0x90>)
 800cb12:	21d3      	movs	r1, #211	@ 0xd3
 800cb14:	f001 fd00 	bl	800e518 <__assert_func>
 800cb18:	0052      	lsls	r2, r2, #1
 800cb1a:	3101      	adds	r1, #1
 800cb1c:	e7f0      	b.n	800cb00 <__s2b+0x18>
 800cb1e:	9b08      	ldr	r3, [sp, #32]
 800cb20:	6143      	str	r3, [r0, #20]
 800cb22:	2d09      	cmp	r5, #9
 800cb24:	f04f 0301 	mov.w	r3, #1
 800cb28:	6103      	str	r3, [r0, #16]
 800cb2a:	dd16      	ble.n	800cb5a <__s2b+0x72>
 800cb2c:	f104 0909 	add.w	r9, r4, #9
 800cb30:	46c8      	mov	r8, r9
 800cb32:	442c      	add	r4, r5
 800cb34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb38:	4601      	mov	r1, r0
 800cb3a:	3b30      	subs	r3, #48	@ 0x30
 800cb3c:	220a      	movs	r2, #10
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f7ff ff8c 	bl	800ca5c <__multadd>
 800cb44:	45a0      	cmp	r8, r4
 800cb46:	d1f5      	bne.n	800cb34 <__s2b+0x4c>
 800cb48:	f1a5 0408 	sub.w	r4, r5, #8
 800cb4c:	444c      	add	r4, r9
 800cb4e:	1b2d      	subs	r5, r5, r4
 800cb50:	1963      	adds	r3, r4, r5
 800cb52:	42bb      	cmp	r3, r7
 800cb54:	db04      	blt.n	800cb60 <__s2b+0x78>
 800cb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb5a:	340a      	adds	r4, #10
 800cb5c:	2509      	movs	r5, #9
 800cb5e:	e7f6      	b.n	800cb4e <__s2b+0x66>
 800cb60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb64:	4601      	mov	r1, r0
 800cb66:	3b30      	subs	r3, #48	@ 0x30
 800cb68:	220a      	movs	r2, #10
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ff76 	bl	800ca5c <__multadd>
 800cb70:	e7ee      	b.n	800cb50 <__s2b+0x68>
 800cb72:	bf00      	nop
 800cb74:	0800faa7 	.word	0x0800faa7
 800cb78:	0800fb2f 	.word	0x0800fb2f

0800cb7c <__hi0bits>:
 800cb7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb80:	4603      	mov	r3, r0
 800cb82:	bf36      	itet	cc
 800cb84:	0403      	lslcc	r3, r0, #16
 800cb86:	2000      	movcs	r0, #0
 800cb88:	2010      	movcc	r0, #16
 800cb8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb8e:	bf3c      	itt	cc
 800cb90:	021b      	lslcc	r3, r3, #8
 800cb92:	3008      	addcc	r0, #8
 800cb94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb98:	bf3c      	itt	cc
 800cb9a:	011b      	lslcc	r3, r3, #4
 800cb9c:	3004      	addcc	r0, #4
 800cb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cba2:	bf3c      	itt	cc
 800cba4:	009b      	lslcc	r3, r3, #2
 800cba6:	3002      	addcc	r0, #2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	db05      	blt.n	800cbb8 <__hi0bits+0x3c>
 800cbac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cbb0:	f100 0001 	add.w	r0, r0, #1
 800cbb4:	bf08      	it	eq
 800cbb6:	2020      	moveq	r0, #32
 800cbb8:	4770      	bx	lr

0800cbba <__lo0bits>:
 800cbba:	6803      	ldr	r3, [r0, #0]
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	f013 0007 	ands.w	r0, r3, #7
 800cbc2:	d00b      	beq.n	800cbdc <__lo0bits+0x22>
 800cbc4:	07d9      	lsls	r1, r3, #31
 800cbc6:	d421      	bmi.n	800cc0c <__lo0bits+0x52>
 800cbc8:	0798      	lsls	r0, r3, #30
 800cbca:	bf49      	itett	mi
 800cbcc:	085b      	lsrmi	r3, r3, #1
 800cbce:	089b      	lsrpl	r3, r3, #2
 800cbd0:	2001      	movmi	r0, #1
 800cbd2:	6013      	strmi	r3, [r2, #0]
 800cbd4:	bf5c      	itt	pl
 800cbd6:	6013      	strpl	r3, [r2, #0]
 800cbd8:	2002      	movpl	r0, #2
 800cbda:	4770      	bx	lr
 800cbdc:	b299      	uxth	r1, r3
 800cbde:	b909      	cbnz	r1, 800cbe4 <__lo0bits+0x2a>
 800cbe0:	0c1b      	lsrs	r3, r3, #16
 800cbe2:	2010      	movs	r0, #16
 800cbe4:	b2d9      	uxtb	r1, r3
 800cbe6:	b909      	cbnz	r1, 800cbec <__lo0bits+0x32>
 800cbe8:	3008      	adds	r0, #8
 800cbea:	0a1b      	lsrs	r3, r3, #8
 800cbec:	0719      	lsls	r1, r3, #28
 800cbee:	bf04      	itt	eq
 800cbf0:	091b      	lsreq	r3, r3, #4
 800cbf2:	3004      	addeq	r0, #4
 800cbf4:	0799      	lsls	r1, r3, #30
 800cbf6:	bf04      	itt	eq
 800cbf8:	089b      	lsreq	r3, r3, #2
 800cbfa:	3002      	addeq	r0, #2
 800cbfc:	07d9      	lsls	r1, r3, #31
 800cbfe:	d403      	bmi.n	800cc08 <__lo0bits+0x4e>
 800cc00:	085b      	lsrs	r3, r3, #1
 800cc02:	f100 0001 	add.w	r0, r0, #1
 800cc06:	d003      	beq.n	800cc10 <__lo0bits+0x56>
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	4770      	bx	lr
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	4770      	bx	lr
 800cc10:	2020      	movs	r0, #32
 800cc12:	4770      	bx	lr

0800cc14 <__i2b>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	460c      	mov	r4, r1
 800cc18:	2101      	movs	r1, #1
 800cc1a:	f7ff febd 	bl	800c998 <_Balloc>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	b928      	cbnz	r0, 800cc2e <__i2b+0x1a>
 800cc22:	4b05      	ldr	r3, [pc, #20]	@ (800cc38 <__i2b+0x24>)
 800cc24:	4805      	ldr	r0, [pc, #20]	@ (800cc3c <__i2b+0x28>)
 800cc26:	f240 1145 	movw	r1, #325	@ 0x145
 800cc2a:	f001 fc75 	bl	800e518 <__assert_func>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	6144      	str	r4, [r0, #20]
 800cc32:	6103      	str	r3, [r0, #16]
 800cc34:	bd10      	pop	{r4, pc}
 800cc36:	bf00      	nop
 800cc38:	0800faa7 	.word	0x0800faa7
 800cc3c:	0800fb2f 	.word	0x0800fb2f

0800cc40 <__multiply>:
 800cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	4617      	mov	r7, r2
 800cc46:	690a      	ldr	r2, [r1, #16]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	bfa8      	it	ge
 800cc4e:	463b      	movge	r3, r7
 800cc50:	4689      	mov	r9, r1
 800cc52:	bfa4      	itt	ge
 800cc54:	460f      	movge	r7, r1
 800cc56:	4699      	movge	r9, r3
 800cc58:	693d      	ldr	r5, [r7, #16]
 800cc5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	6879      	ldr	r1, [r7, #4]
 800cc62:	eb05 060a 	add.w	r6, r5, sl
 800cc66:	42b3      	cmp	r3, r6
 800cc68:	b085      	sub	sp, #20
 800cc6a:	bfb8      	it	lt
 800cc6c:	3101      	addlt	r1, #1
 800cc6e:	f7ff fe93 	bl	800c998 <_Balloc>
 800cc72:	b930      	cbnz	r0, 800cc82 <__multiply+0x42>
 800cc74:	4602      	mov	r2, r0
 800cc76:	4b41      	ldr	r3, [pc, #260]	@ (800cd7c <__multiply+0x13c>)
 800cc78:	4841      	ldr	r0, [pc, #260]	@ (800cd80 <__multiply+0x140>)
 800cc7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc7e:	f001 fc4b 	bl	800e518 <__assert_func>
 800cc82:	f100 0414 	add.w	r4, r0, #20
 800cc86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cc8a:	4623      	mov	r3, r4
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	4573      	cmp	r3, lr
 800cc90:	d320      	bcc.n	800ccd4 <__multiply+0x94>
 800cc92:	f107 0814 	add.w	r8, r7, #20
 800cc96:	f109 0114 	add.w	r1, r9, #20
 800cc9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cc9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cca2:	9302      	str	r3, [sp, #8]
 800cca4:	1beb      	subs	r3, r5, r7
 800cca6:	3b15      	subs	r3, #21
 800cca8:	f023 0303 	bic.w	r3, r3, #3
 800ccac:	3304      	adds	r3, #4
 800ccae:	3715      	adds	r7, #21
 800ccb0:	42bd      	cmp	r5, r7
 800ccb2:	bf38      	it	cc
 800ccb4:	2304      	movcc	r3, #4
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	9b02      	ldr	r3, [sp, #8]
 800ccba:	9103      	str	r1, [sp, #12]
 800ccbc:	428b      	cmp	r3, r1
 800ccbe:	d80c      	bhi.n	800ccda <__multiply+0x9a>
 800ccc0:	2e00      	cmp	r6, #0
 800ccc2:	dd03      	ble.n	800cccc <__multiply+0x8c>
 800ccc4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d055      	beq.n	800cd78 <__multiply+0x138>
 800cccc:	6106      	str	r6, [r0, #16]
 800ccce:	b005      	add	sp, #20
 800ccd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd4:	f843 2b04 	str.w	r2, [r3], #4
 800ccd8:	e7d9      	b.n	800cc8e <__multiply+0x4e>
 800ccda:	f8b1 a000 	ldrh.w	sl, [r1]
 800ccde:	f1ba 0f00 	cmp.w	sl, #0
 800cce2:	d01f      	beq.n	800cd24 <__multiply+0xe4>
 800cce4:	46c4      	mov	ip, r8
 800cce6:	46a1      	mov	r9, r4
 800cce8:	2700      	movs	r7, #0
 800ccea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccee:	f8d9 3000 	ldr.w	r3, [r9]
 800ccf2:	fa1f fb82 	uxth.w	fp, r2
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ccfc:	443b      	add	r3, r7
 800ccfe:	f8d9 7000 	ldr.w	r7, [r9]
 800cd02:	0c12      	lsrs	r2, r2, #16
 800cd04:	0c3f      	lsrs	r7, r7, #16
 800cd06:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd14:	4565      	cmp	r5, ip
 800cd16:	f849 3b04 	str.w	r3, [r9], #4
 800cd1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cd1e:	d8e4      	bhi.n	800ccea <__multiply+0xaa>
 800cd20:	9b01      	ldr	r3, [sp, #4]
 800cd22:	50e7      	str	r7, [r4, r3]
 800cd24:	9b03      	ldr	r3, [sp, #12]
 800cd26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd2a:	3104      	adds	r1, #4
 800cd2c:	f1b9 0f00 	cmp.w	r9, #0
 800cd30:	d020      	beq.n	800cd74 <__multiply+0x134>
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	4647      	mov	r7, r8
 800cd36:	46a4      	mov	ip, r4
 800cd38:	f04f 0a00 	mov.w	sl, #0
 800cd3c:	f8b7 b000 	ldrh.w	fp, [r7]
 800cd40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cd44:	fb09 220b 	mla	r2, r9, fp, r2
 800cd48:	4452      	add	r2, sl
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd50:	f84c 3b04 	str.w	r3, [ip], #4
 800cd54:	f857 3b04 	ldr.w	r3, [r7], #4
 800cd58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd5c:	f8bc 3000 	ldrh.w	r3, [ip]
 800cd60:	fb09 330a 	mla	r3, r9, sl, r3
 800cd64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cd68:	42bd      	cmp	r5, r7
 800cd6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd6e:	d8e5      	bhi.n	800cd3c <__multiply+0xfc>
 800cd70:	9a01      	ldr	r2, [sp, #4]
 800cd72:	50a3      	str	r3, [r4, r2]
 800cd74:	3404      	adds	r4, #4
 800cd76:	e79f      	b.n	800ccb8 <__multiply+0x78>
 800cd78:	3e01      	subs	r6, #1
 800cd7a:	e7a1      	b.n	800ccc0 <__multiply+0x80>
 800cd7c:	0800faa7 	.word	0x0800faa7
 800cd80:	0800fb2f 	.word	0x0800fb2f

0800cd84 <__pow5mult>:
 800cd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd88:	4615      	mov	r5, r2
 800cd8a:	f012 0203 	ands.w	r2, r2, #3
 800cd8e:	4607      	mov	r7, r0
 800cd90:	460e      	mov	r6, r1
 800cd92:	d007      	beq.n	800cda4 <__pow5mult+0x20>
 800cd94:	4c25      	ldr	r4, [pc, #148]	@ (800ce2c <__pow5mult+0xa8>)
 800cd96:	3a01      	subs	r2, #1
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd9e:	f7ff fe5d 	bl	800ca5c <__multadd>
 800cda2:	4606      	mov	r6, r0
 800cda4:	10ad      	asrs	r5, r5, #2
 800cda6:	d03d      	beq.n	800ce24 <__pow5mult+0xa0>
 800cda8:	69fc      	ldr	r4, [r7, #28]
 800cdaa:	b97c      	cbnz	r4, 800cdcc <__pow5mult+0x48>
 800cdac:	2010      	movs	r0, #16
 800cdae:	f7fd fdb3 	bl	800a918 <malloc>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	61f8      	str	r0, [r7, #28]
 800cdb6:	b928      	cbnz	r0, 800cdc4 <__pow5mult+0x40>
 800cdb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ce30 <__pow5mult+0xac>)
 800cdba:	481e      	ldr	r0, [pc, #120]	@ (800ce34 <__pow5mult+0xb0>)
 800cdbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdc0:	f001 fbaa 	bl	800e518 <__assert_func>
 800cdc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdc8:	6004      	str	r4, [r0, #0]
 800cdca:	60c4      	str	r4, [r0, #12]
 800cdcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cdd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdd4:	b94c      	cbnz	r4, 800cdea <__pow5mult+0x66>
 800cdd6:	f240 2171 	movw	r1, #625	@ 0x271
 800cdda:	4638      	mov	r0, r7
 800cddc:	f7ff ff1a 	bl	800cc14 <__i2b>
 800cde0:	2300      	movs	r3, #0
 800cde2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cde6:	4604      	mov	r4, r0
 800cde8:	6003      	str	r3, [r0, #0]
 800cdea:	f04f 0900 	mov.w	r9, #0
 800cdee:	07eb      	lsls	r3, r5, #31
 800cdf0:	d50a      	bpl.n	800ce08 <__pow5mult+0x84>
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	4622      	mov	r2, r4
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f7ff ff22 	bl	800cc40 <__multiply>
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4680      	mov	r8, r0
 800ce00:	4638      	mov	r0, r7
 800ce02:	f7ff fe09 	bl	800ca18 <_Bfree>
 800ce06:	4646      	mov	r6, r8
 800ce08:	106d      	asrs	r5, r5, #1
 800ce0a:	d00b      	beq.n	800ce24 <__pow5mult+0xa0>
 800ce0c:	6820      	ldr	r0, [r4, #0]
 800ce0e:	b938      	cbnz	r0, 800ce20 <__pow5mult+0x9c>
 800ce10:	4622      	mov	r2, r4
 800ce12:	4621      	mov	r1, r4
 800ce14:	4638      	mov	r0, r7
 800ce16:	f7ff ff13 	bl	800cc40 <__multiply>
 800ce1a:	6020      	str	r0, [r4, #0]
 800ce1c:	f8c0 9000 	str.w	r9, [r0]
 800ce20:	4604      	mov	r4, r0
 800ce22:	e7e4      	b.n	800cdee <__pow5mult+0x6a>
 800ce24:	4630      	mov	r0, r6
 800ce26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce2a:	bf00      	nop
 800ce2c:	0800fd6c 	.word	0x0800fd6c
 800ce30:	0800fb18 	.word	0x0800fb18
 800ce34:	0800fb2f 	.word	0x0800fb2f

0800ce38 <__lshift>:
 800ce38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	6849      	ldr	r1, [r1, #4]
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce46:	68a3      	ldr	r3, [r4, #8]
 800ce48:	4607      	mov	r7, r0
 800ce4a:	4691      	mov	r9, r2
 800ce4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce50:	f108 0601 	add.w	r6, r8, #1
 800ce54:	42b3      	cmp	r3, r6
 800ce56:	db0b      	blt.n	800ce70 <__lshift+0x38>
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7ff fd9d 	bl	800c998 <_Balloc>
 800ce5e:	4605      	mov	r5, r0
 800ce60:	b948      	cbnz	r0, 800ce76 <__lshift+0x3e>
 800ce62:	4602      	mov	r2, r0
 800ce64:	4b28      	ldr	r3, [pc, #160]	@ (800cf08 <__lshift+0xd0>)
 800ce66:	4829      	ldr	r0, [pc, #164]	@ (800cf0c <__lshift+0xd4>)
 800ce68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce6c:	f001 fb54 	bl	800e518 <__assert_func>
 800ce70:	3101      	adds	r1, #1
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	e7ee      	b.n	800ce54 <__lshift+0x1c>
 800ce76:	2300      	movs	r3, #0
 800ce78:	f100 0114 	add.w	r1, r0, #20
 800ce7c:	f100 0210 	add.w	r2, r0, #16
 800ce80:	4618      	mov	r0, r3
 800ce82:	4553      	cmp	r3, sl
 800ce84:	db33      	blt.n	800ceee <__lshift+0xb6>
 800ce86:	6920      	ldr	r0, [r4, #16]
 800ce88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce8c:	f104 0314 	add.w	r3, r4, #20
 800ce90:	f019 091f 	ands.w	r9, r9, #31
 800ce94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce9c:	d02b      	beq.n	800cef6 <__lshift+0xbe>
 800ce9e:	f1c9 0e20 	rsb	lr, r9, #32
 800cea2:	468a      	mov	sl, r1
 800cea4:	2200      	movs	r2, #0
 800cea6:	6818      	ldr	r0, [r3, #0]
 800cea8:	fa00 f009 	lsl.w	r0, r0, r9
 800ceac:	4310      	orrs	r0, r2
 800ceae:	f84a 0b04 	str.w	r0, [sl], #4
 800ceb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb6:	459c      	cmp	ip, r3
 800ceb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cebc:	d8f3      	bhi.n	800cea6 <__lshift+0x6e>
 800cebe:	ebac 0304 	sub.w	r3, ip, r4
 800cec2:	3b15      	subs	r3, #21
 800cec4:	f023 0303 	bic.w	r3, r3, #3
 800cec8:	3304      	adds	r3, #4
 800ceca:	f104 0015 	add.w	r0, r4, #21
 800cece:	4560      	cmp	r0, ip
 800ced0:	bf88      	it	hi
 800ced2:	2304      	movhi	r3, #4
 800ced4:	50ca      	str	r2, [r1, r3]
 800ced6:	b10a      	cbz	r2, 800cedc <__lshift+0xa4>
 800ced8:	f108 0602 	add.w	r6, r8, #2
 800cedc:	3e01      	subs	r6, #1
 800cede:	4638      	mov	r0, r7
 800cee0:	612e      	str	r6, [r5, #16]
 800cee2:	4621      	mov	r1, r4
 800cee4:	f7ff fd98 	bl	800ca18 <_Bfree>
 800cee8:	4628      	mov	r0, r5
 800ceea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceee:	f842 0f04 	str.w	r0, [r2, #4]!
 800cef2:	3301      	adds	r3, #1
 800cef4:	e7c5      	b.n	800ce82 <__lshift+0x4a>
 800cef6:	3904      	subs	r1, #4
 800cef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cefc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf00:	459c      	cmp	ip, r3
 800cf02:	d8f9      	bhi.n	800cef8 <__lshift+0xc0>
 800cf04:	e7ea      	b.n	800cedc <__lshift+0xa4>
 800cf06:	bf00      	nop
 800cf08:	0800faa7 	.word	0x0800faa7
 800cf0c:	0800fb2f 	.word	0x0800fb2f

0800cf10 <__mcmp>:
 800cf10:	690a      	ldr	r2, [r1, #16]
 800cf12:	4603      	mov	r3, r0
 800cf14:	6900      	ldr	r0, [r0, #16]
 800cf16:	1a80      	subs	r0, r0, r2
 800cf18:	b530      	push	{r4, r5, lr}
 800cf1a:	d10e      	bne.n	800cf3a <__mcmp+0x2a>
 800cf1c:	3314      	adds	r3, #20
 800cf1e:	3114      	adds	r1, #20
 800cf20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf30:	4295      	cmp	r5, r2
 800cf32:	d003      	beq.n	800cf3c <__mcmp+0x2c>
 800cf34:	d205      	bcs.n	800cf42 <__mcmp+0x32>
 800cf36:	f04f 30ff 	mov.w	r0, #4294967295
 800cf3a:	bd30      	pop	{r4, r5, pc}
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	d3f3      	bcc.n	800cf28 <__mcmp+0x18>
 800cf40:	e7fb      	b.n	800cf3a <__mcmp+0x2a>
 800cf42:	2001      	movs	r0, #1
 800cf44:	e7f9      	b.n	800cf3a <__mcmp+0x2a>
	...

0800cf48 <__mdiff>:
 800cf48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	4689      	mov	r9, r1
 800cf4e:	4606      	mov	r6, r0
 800cf50:	4611      	mov	r1, r2
 800cf52:	4648      	mov	r0, r9
 800cf54:	4614      	mov	r4, r2
 800cf56:	f7ff ffdb 	bl	800cf10 <__mcmp>
 800cf5a:	1e05      	subs	r5, r0, #0
 800cf5c:	d112      	bne.n	800cf84 <__mdiff+0x3c>
 800cf5e:	4629      	mov	r1, r5
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7ff fd19 	bl	800c998 <_Balloc>
 800cf66:	4602      	mov	r2, r0
 800cf68:	b928      	cbnz	r0, 800cf76 <__mdiff+0x2e>
 800cf6a:	4b3f      	ldr	r3, [pc, #252]	@ (800d068 <__mdiff+0x120>)
 800cf6c:	f240 2137 	movw	r1, #567	@ 0x237
 800cf70:	483e      	ldr	r0, [pc, #248]	@ (800d06c <__mdiff+0x124>)
 800cf72:	f001 fad1 	bl	800e518 <__assert_func>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	b003      	add	sp, #12
 800cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf84:	bfbc      	itt	lt
 800cf86:	464b      	movlt	r3, r9
 800cf88:	46a1      	movlt	r9, r4
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf90:	bfba      	itte	lt
 800cf92:	461c      	movlt	r4, r3
 800cf94:	2501      	movlt	r5, #1
 800cf96:	2500      	movge	r5, #0
 800cf98:	f7ff fcfe 	bl	800c998 <_Balloc>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	b918      	cbnz	r0, 800cfa8 <__mdiff+0x60>
 800cfa0:	4b31      	ldr	r3, [pc, #196]	@ (800d068 <__mdiff+0x120>)
 800cfa2:	f240 2145 	movw	r1, #581	@ 0x245
 800cfa6:	e7e3      	b.n	800cf70 <__mdiff+0x28>
 800cfa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfac:	6926      	ldr	r6, [r4, #16]
 800cfae:	60c5      	str	r5, [r0, #12]
 800cfb0:	f109 0310 	add.w	r3, r9, #16
 800cfb4:	f109 0514 	add.w	r5, r9, #20
 800cfb8:	f104 0e14 	add.w	lr, r4, #20
 800cfbc:	f100 0b14 	add.w	fp, r0, #20
 800cfc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cfc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	46d9      	mov	r9, fp
 800cfcc:	f04f 0c00 	mov.w	ip, #0
 800cfd0:	9b01      	ldr	r3, [sp, #4]
 800cfd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cfd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cfda:	9301      	str	r3, [sp, #4]
 800cfdc:	fa1f f38a 	uxth.w	r3, sl
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	b283      	uxth	r3, r0
 800cfe4:	1acb      	subs	r3, r1, r3
 800cfe6:	0c00      	lsrs	r0, r0, #16
 800cfe8:	4463      	add	r3, ip
 800cfea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cfee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cff8:	4576      	cmp	r6, lr
 800cffa:	f849 3b04 	str.w	r3, [r9], #4
 800cffe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d002:	d8e5      	bhi.n	800cfd0 <__mdiff+0x88>
 800d004:	1b33      	subs	r3, r6, r4
 800d006:	3b15      	subs	r3, #21
 800d008:	f023 0303 	bic.w	r3, r3, #3
 800d00c:	3415      	adds	r4, #21
 800d00e:	3304      	adds	r3, #4
 800d010:	42a6      	cmp	r6, r4
 800d012:	bf38      	it	cc
 800d014:	2304      	movcc	r3, #4
 800d016:	441d      	add	r5, r3
 800d018:	445b      	add	r3, fp
 800d01a:	461e      	mov	r6, r3
 800d01c:	462c      	mov	r4, r5
 800d01e:	4544      	cmp	r4, r8
 800d020:	d30e      	bcc.n	800d040 <__mdiff+0xf8>
 800d022:	f108 0103 	add.w	r1, r8, #3
 800d026:	1b49      	subs	r1, r1, r5
 800d028:	f021 0103 	bic.w	r1, r1, #3
 800d02c:	3d03      	subs	r5, #3
 800d02e:	45a8      	cmp	r8, r5
 800d030:	bf38      	it	cc
 800d032:	2100      	movcc	r1, #0
 800d034:	440b      	add	r3, r1
 800d036:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d03a:	b191      	cbz	r1, 800d062 <__mdiff+0x11a>
 800d03c:	6117      	str	r7, [r2, #16]
 800d03e:	e79d      	b.n	800cf7c <__mdiff+0x34>
 800d040:	f854 1b04 	ldr.w	r1, [r4], #4
 800d044:	46e6      	mov	lr, ip
 800d046:	0c08      	lsrs	r0, r1, #16
 800d048:	fa1c fc81 	uxtah	ip, ip, r1
 800d04c:	4471      	add	r1, lr
 800d04e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d052:	b289      	uxth	r1, r1
 800d054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d058:	f846 1b04 	str.w	r1, [r6], #4
 800d05c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d060:	e7dd      	b.n	800d01e <__mdiff+0xd6>
 800d062:	3f01      	subs	r7, #1
 800d064:	e7e7      	b.n	800d036 <__mdiff+0xee>
 800d066:	bf00      	nop
 800d068:	0800faa7 	.word	0x0800faa7
 800d06c:	0800fb2f 	.word	0x0800fb2f

0800d070 <__ulp>:
 800d070:	b082      	sub	sp, #8
 800d072:	ed8d 0b00 	vstr	d0, [sp]
 800d076:	9a01      	ldr	r2, [sp, #4]
 800d078:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b8 <__ulp+0x48>)
 800d07a:	4013      	ands	r3, r2
 800d07c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d080:	2b00      	cmp	r3, #0
 800d082:	dc08      	bgt.n	800d096 <__ulp+0x26>
 800d084:	425b      	negs	r3, r3
 800d086:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d08a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d08e:	da04      	bge.n	800d09a <__ulp+0x2a>
 800d090:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d094:	4113      	asrs	r3, r2
 800d096:	2200      	movs	r2, #0
 800d098:	e008      	b.n	800d0ac <__ulp+0x3c>
 800d09a:	f1a2 0314 	sub.w	r3, r2, #20
 800d09e:	2b1e      	cmp	r3, #30
 800d0a0:	bfda      	itte	le
 800d0a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d0a6:	40da      	lsrle	r2, r3
 800d0a8:	2201      	movgt	r2, #1
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	ec41 0b10 	vmov	d0, r0, r1
 800d0b4:	b002      	add	sp, #8
 800d0b6:	4770      	bx	lr
 800d0b8:	7ff00000 	.word	0x7ff00000

0800d0bc <__b2d>:
 800d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c0:	6906      	ldr	r6, [r0, #16]
 800d0c2:	f100 0814 	add.w	r8, r0, #20
 800d0c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d0ca:	1f37      	subs	r7, r6, #4
 800d0cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f7ff fd53 	bl	800cb7c <__hi0bits>
 800d0d6:	f1c0 0320 	rsb	r3, r0, #32
 800d0da:	280a      	cmp	r0, #10
 800d0dc:	600b      	str	r3, [r1, #0]
 800d0de:	491b      	ldr	r1, [pc, #108]	@ (800d14c <__b2d+0x90>)
 800d0e0:	dc15      	bgt.n	800d10e <__b2d+0x52>
 800d0e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d0e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d0ea:	45b8      	cmp	r8, r7
 800d0ec:	ea43 0501 	orr.w	r5, r3, r1
 800d0f0:	bf34      	ite	cc
 800d0f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d0f6:	2300      	movcs	r3, #0
 800d0f8:	3015      	adds	r0, #21
 800d0fa:	fa02 f000 	lsl.w	r0, r2, r0
 800d0fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800d102:	4303      	orrs	r3, r0
 800d104:	461c      	mov	r4, r3
 800d106:	ec45 4b10 	vmov	d0, r4, r5
 800d10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d10e:	45b8      	cmp	r8, r7
 800d110:	bf3a      	itte	cc
 800d112:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d116:	f1a6 0708 	subcc.w	r7, r6, #8
 800d11a:	2300      	movcs	r3, #0
 800d11c:	380b      	subs	r0, #11
 800d11e:	d012      	beq.n	800d146 <__b2d+0x8a>
 800d120:	f1c0 0120 	rsb	r1, r0, #32
 800d124:	fa23 f401 	lsr.w	r4, r3, r1
 800d128:	4082      	lsls	r2, r0
 800d12a:	4322      	orrs	r2, r4
 800d12c:	4547      	cmp	r7, r8
 800d12e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d132:	bf8c      	ite	hi
 800d134:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d138:	2200      	movls	r2, #0
 800d13a:	4083      	lsls	r3, r0
 800d13c:	40ca      	lsrs	r2, r1
 800d13e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d142:	4313      	orrs	r3, r2
 800d144:	e7de      	b.n	800d104 <__b2d+0x48>
 800d146:	ea42 0501 	orr.w	r5, r2, r1
 800d14a:	e7db      	b.n	800d104 <__b2d+0x48>
 800d14c:	3ff00000 	.word	0x3ff00000

0800d150 <__d2b>:
 800d150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d154:	460f      	mov	r7, r1
 800d156:	2101      	movs	r1, #1
 800d158:	ec59 8b10 	vmov	r8, r9, d0
 800d15c:	4616      	mov	r6, r2
 800d15e:	f7ff fc1b 	bl	800c998 <_Balloc>
 800d162:	4604      	mov	r4, r0
 800d164:	b930      	cbnz	r0, 800d174 <__d2b+0x24>
 800d166:	4602      	mov	r2, r0
 800d168:	4b23      	ldr	r3, [pc, #140]	@ (800d1f8 <__d2b+0xa8>)
 800d16a:	4824      	ldr	r0, [pc, #144]	@ (800d1fc <__d2b+0xac>)
 800d16c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d170:	f001 f9d2 	bl	800e518 <__assert_func>
 800d174:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d17c:	b10d      	cbz	r5, 800d182 <__d2b+0x32>
 800d17e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	f1b8 0300 	subs.w	r3, r8, #0
 800d188:	d023      	beq.n	800d1d2 <__d2b+0x82>
 800d18a:	4668      	mov	r0, sp
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	f7ff fd14 	bl	800cbba <__lo0bits>
 800d192:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d196:	b1d0      	cbz	r0, 800d1ce <__d2b+0x7e>
 800d198:	f1c0 0320 	rsb	r3, r0, #32
 800d19c:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a0:	430b      	orrs	r3, r1
 800d1a2:	40c2      	lsrs	r2, r0
 800d1a4:	6163      	str	r3, [r4, #20]
 800d1a6:	9201      	str	r2, [sp, #4]
 800d1a8:	9b01      	ldr	r3, [sp, #4]
 800d1aa:	61a3      	str	r3, [r4, #24]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	bf0c      	ite	eq
 800d1b0:	2201      	moveq	r2, #1
 800d1b2:	2202      	movne	r2, #2
 800d1b4:	6122      	str	r2, [r4, #16]
 800d1b6:	b1a5      	cbz	r5, 800d1e2 <__d2b+0x92>
 800d1b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d1bc:	4405      	add	r5, r0
 800d1be:	603d      	str	r5, [r7, #0]
 800d1c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d1c4:	6030      	str	r0, [r6, #0]
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	b003      	add	sp, #12
 800d1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1ce:	6161      	str	r1, [r4, #20]
 800d1d0:	e7ea      	b.n	800d1a8 <__d2b+0x58>
 800d1d2:	a801      	add	r0, sp, #4
 800d1d4:	f7ff fcf1 	bl	800cbba <__lo0bits>
 800d1d8:	9b01      	ldr	r3, [sp, #4]
 800d1da:	6163      	str	r3, [r4, #20]
 800d1dc:	3020      	adds	r0, #32
 800d1de:	2201      	movs	r2, #1
 800d1e0:	e7e8      	b.n	800d1b4 <__d2b+0x64>
 800d1e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d1ea:	6038      	str	r0, [r7, #0]
 800d1ec:	6918      	ldr	r0, [r3, #16]
 800d1ee:	f7ff fcc5 	bl	800cb7c <__hi0bits>
 800d1f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1f6:	e7e5      	b.n	800d1c4 <__d2b+0x74>
 800d1f8:	0800faa7 	.word	0x0800faa7
 800d1fc:	0800fb2f 	.word	0x0800fb2f

0800d200 <__ratio>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	b085      	sub	sp, #20
 800d206:	e9cd 1000 	strd	r1, r0, [sp]
 800d20a:	a902      	add	r1, sp, #8
 800d20c:	f7ff ff56 	bl	800d0bc <__b2d>
 800d210:	9800      	ldr	r0, [sp, #0]
 800d212:	a903      	add	r1, sp, #12
 800d214:	ec55 4b10 	vmov	r4, r5, d0
 800d218:	f7ff ff50 	bl	800d0bc <__b2d>
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	6919      	ldr	r1, [r3, #16]
 800d220:	9b00      	ldr	r3, [sp, #0]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	1ac9      	subs	r1, r1, r3
 800d226:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d22a:	1a9b      	subs	r3, r3, r2
 800d22c:	ec5b ab10 	vmov	sl, fp, d0
 800d230:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d234:	2b00      	cmp	r3, #0
 800d236:	bfce      	itee	gt
 800d238:	462a      	movgt	r2, r5
 800d23a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d23e:	465a      	movle	r2, fp
 800d240:	462f      	mov	r7, r5
 800d242:	46d9      	mov	r9, fp
 800d244:	bfcc      	ite	gt
 800d246:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d24a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d24e:	464b      	mov	r3, r9
 800d250:	4652      	mov	r2, sl
 800d252:	4620      	mov	r0, r4
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 faf9 	bl	800084c <__aeabi_ddiv>
 800d25a:	ec41 0b10 	vmov	d0, r0, r1
 800d25e:	b005      	add	sp, #20
 800d260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d264 <__copybits>:
 800d264:	3901      	subs	r1, #1
 800d266:	b570      	push	{r4, r5, r6, lr}
 800d268:	1149      	asrs	r1, r1, #5
 800d26a:	6914      	ldr	r4, [r2, #16]
 800d26c:	3101      	adds	r1, #1
 800d26e:	f102 0314 	add.w	r3, r2, #20
 800d272:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d276:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d27a:	1f05      	subs	r5, r0, #4
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	d30c      	bcc.n	800d29a <__copybits+0x36>
 800d280:	1aa3      	subs	r3, r4, r2
 800d282:	3b11      	subs	r3, #17
 800d284:	f023 0303 	bic.w	r3, r3, #3
 800d288:	3211      	adds	r2, #17
 800d28a:	42a2      	cmp	r2, r4
 800d28c:	bf88      	it	hi
 800d28e:	2300      	movhi	r3, #0
 800d290:	4418      	add	r0, r3
 800d292:	2300      	movs	r3, #0
 800d294:	4288      	cmp	r0, r1
 800d296:	d305      	bcc.n	800d2a4 <__copybits+0x40>
 800d298:	bd70      	pop	{r4, r5, r6, pc}
 800d29a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d29e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d2a2:	e7eb      	b.n	800d27c <__copybits+0x18>
 800d2a4:	f840 3b04 	str.w	r3, [r0], #4
 800d2a8:	e7f4      	b.n	800d294 <__copybits+0x30>

0800d2aa <__any_on>:
 800d2aa:	f100 0214 	add.w	r2, r0, #20
 800d2ae:	6900      	ldr	r0, [r0, #16]
 800d2b0:	114b      	asrs	r3, r1, #5
 800d2b2:	4298      	cmp	r0, r3
 800d2b4:	b510      	push	{r4, lr}
 800d2b6:	db11      	blt.n	800d2dc <__any_on+0x32>
 800d2b8:	dd0a      	ble.n	800d2d0 <__any_on+0x26>
 800d2ba:	f011 011f 	ands.w	r1, r1, #31
 800d2be:	d007      	beq.n	800d2d0 <__any_on+0x26>
 800d2c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d2c4:	fa24 f001 	lsr.w	r0, r4, r1
 800d2c8:	fa00 f101 	lsl.w	r1, r0, r1
 800d2cc:	428c      	cmp	r4, r1
 800d2ce:	d10b      	bne.n	800d2e8 <__any_on+0x3e>
 800d2d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d803      	bhi.n	800d2e0 <__any_on+0x36>
 800d2d8:	2000      	movs	r0, #0
 800d2da:	bd10      	pop	{r4, pc}
 800d2dc:	4603      	mov	r3, r0
 800d2de:	e7f7      	b.n	800d2d0 <__any_on+0x26>
 800d2e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d2e4:	2900      	cmp	r1, #0
 800d2e6:	d0f5      	beq.n	800d2d4 <__any_on+0x2a>
 800d2e8:	2001      	movs	r0, #1
 800d2ea:	e7f6      	b.n	800d2da <__any_on+0x30>

0800d2ec <_malloc_usable_size_r>:
 800d2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2f0:	1f18      	subs	r0, r3, #4
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bfbc      	itt	lt
 800d2f6:	580b      	ldrlt	r3, [r1, r0]
 800d2f8:	18c0      	addlt	r0, r0, r3
 800d2fa:	4770      	bx	lr

0800d2fc <__ascii_wctomb>:
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	4608      	mov	r0, r1
 800d300:	b141      	cbz	r1, 800d314 <__ascii_wctomb+0x18>
 800d302:	2aff      	cmp	r2, #255	@ 0xff
 800d304:	d904      	bls.n	800d310 <__ascii_wctomb+0x14>
 800d306:	228a      	movs	r2, #138	@ 0x8a
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	f04f 30ff 	mov.w	r0, #4294967295
 800d30e:	4770      	bx	lr
 800d310:	700a      	strb	r2, [r1, #0]
 800d312:	2001      	movs	r0, #1
 800d314:	4770      	bx	lr

0800d316 <__ssputs_r>:
 800d316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d31a:	688e      	ldr	r6, [r1, #8]
 800d31c:	461f      	mov	r7, r3
 800d31e:	42be      	cmp	r6, r7
 800d320:	680b      	ldr	r3, [r1, #0]
 800d322:	4682      	mov	sl, r0
 800d324:	460c      	mov	r4, r1
 800d326:	4690      	mov	r8, r2
 800d328:	d82d      	bhi.n	800d386 <__ssputs_r+0x70>
 800d32a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d32e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d332:	d026      	beq.n	800d382 <__ssputs_r+0x6c>
 800d334:	6965      	ldr	r5, [r4, #20]
 800d336:	6909      	ldr	r1, [r1, #16]
 800d338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d33c:	eba3 0901 	sub.w	r9, r3, r1
 800d340:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d344:	1c7b      	adds	r3, r7, #1
 800d346:	444b      	add	r3, r9
 800d348:	106d      	asrs	r5, r5, #1
 800d34a:	429d      	cmp	r5, r3
 800d34c:	bf38      	it	cc
 800d34e:	461d      	movcc	r5, r3
 800d350:	0553      	lsls	r3, r2, #21
 800d352:	d527      	bpl.n	800d3a4 <__ssputs_r+0x8e>
 800d354:	4629      	mov	r1, r5
 800d356:	f7fd fb09 	bl	800a96c <_malloc_r>
 800d35a:	4606      	mov	r6, r0
 800d35c:	b360      	cbz	r0, 800d3b8 <__ssputs_r+0xa2>
 800d35e:	6921      	ldr	r1, [r4, #16]
 800d360:	464a      	mov	r2, r9
 800d362:	f7fe ff66 	bl	800c232 <memcpy>
 800d366:	89a3      	ldrh	r3, [r4, #12]
 800d368:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d36c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d370:	81a3      	strh	r3, [r4, #12]
 800d372:	6126      	str	r6, [r4, #16]
 800d374:	6165      	str	r5, [r4, #20]
 800d376:	444e      	add	r6, r9
 800d378:	eba5 0509 	sub.w	r5, r5, r9
 800d37c:	6026      	str	r6, [r4, #0]
 800d37e:	60a5      	str	r5, [r4, #8]
 800d380:	463e      	mov	r6, r7
 800d382:	42be      	cmp	r6, r7
 800d384:	d900      	bls.n	800d388 <__ssputs_r+0x72>
 800d386:	463e      	mov	r6, r7
 800d388:	6820      	ldr	r0, [r4, #0]
 800d38a:	4632      	mov	r2, r6
 800d38c:	4641      	mov	r1, r8
 800d38e:	f001 f886 	bl	800e49e <memmove>
 800d392:	68a3      	ldr	r3, [r4, #8]
 800d394:	1b9b      	subs	r3, r3, r6
 800d396:	60a3      	str	r3, [r4, #8]
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	4433      	add	r3, r6
 800d39c:	6023      	str	r3, [r4, #0]
 800d39e:	2000      	movs	r0, #0
 800d3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a4:	462a      	mov	r2, r5
 800d3a6:	f7fd fb6d 	bl	800aa84 <_realloc_r>
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d1e0      	bne.n	800d372 <__ssputs_r+0x5c>
 800d3b0:	6921      	ldr	r1, [r4, #16]
 800d3b2:	4650      	mov	r0, sl
 800d3b4:	f7fe ff5a 	bl	800c26c <_free_r>
 800d3b8:	230c      	movs	r3, #12
 800d3ba:	f8ca 3000 	str.w	r3, [sl]
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c4:	81a3      	strh	r3, [r4, #12]
 800d3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ca:	e7e9      	b.n	800d3a0 <__ssputs_r+0x8a>

0800d3cc <_svfiprintf_r>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	4698      	mov	r8, r3
 800d3d2:	898b      	ldrh	r3, [r1, #12]
 800d3d4:	061b      	lsls	r3, r3, #24
 800d3d6:	b09d      	sub	sp, #116	@ 0x74
 800d3d8:	4607      	mov	r7, r0
 800d3da:	460d      	mov	r5, r1
 800d3dc:	4614      	mov	r4, r2
 800d3de:	d510      	bpl.n	800d402 <_svfiprintf_r+0x36>
 800d3e0:	690b      	ldr	r3, [r1, #16]
 800d3e2:	b973      	cbnz	r3, 800d402 <_svfiprintf_r+0x36>
 800d3e4:	2140      	movs	r1, #64	@ 0x40
 800d3e6:	f7fd fac1 	bl	800a96c <_malloc_r>
 800d3ea:	6028      	str	r0, [r5, #0]
 800d3ec:	6128      	str	r0, [r5, #16]
 800d3ee:	b930      	cbnz	r0, 800d3fe <_svfiprintf_r+0x32>
 800d3f0:	230c      	movs	r3, #12
 800d3f2:	603b      	str	r3, [r7, #0]
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	b01d      	add	sp, #116	@ 0x74
 800d3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3fe:	2340      	movs	r3, #64	@ 0x40
 800d400:	616b      	str	r3, [r5, #20]
 800d402:	2300      	movs	r3, #0
 800d404:	9309      	str	r3, [sp, #36]	@ 0x24
 800d406:	2320      	movs	r3, #32
 800d408:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d40c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d410:	2330      	movs	r3, #48	@ 0x30
 800d412:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5b0 <_svfiprintf_r+0x1e4>
 800d416:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d41a:	f04f 0901 	mov.w	r9, #1
 800d41e:	4623      	mov	r3, r4
 800d420:	469a      	mov	sl, r3
 800d422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d426:	b10a      	cbz	r2, 800d42c <_svfiprintf_r+0x60>
 800d428:	2a25      	cmp	r2, #37	@ 0x25
 800d42a:	d1f9      	bne.n	800d420 <_svfiprintf_r+0x54>
 800d42c:	ebba 0b04 	subs.w	fp, sl, r4
 800d430:	d00b      	beq.n	800d44a <_svfiprintf_r+0x7e>
 800d432:	465b      	mov	r3, fp
 800d434:	4622      	mov	r2, r4
 800d436:	4629      	mov	r1, r5
 800d438:	4638      	mov	r0, r7
 800d43a:	f7ff ff6c 	bl	800d316 <__ssputs_r>
 800d43e:	3001      	adds	r0, #1
 800d440:	f000 80a7 	beq.w	800d592 <_svfiprintf_r+0x1c6>
 800d444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d446:	445a      	add	r2, fp
 800d448:	9209      	str	r2, [sp, #36]	@ 0x24
 800d44a:	f89a 3000 	ldrb.w	r3, [sl]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f000 809f 	beq.w	800d592 <_svfiprintf_r+0x1c6>
 800d454:	2300      	movs	r3, #0
 800d456:	f04f 32ff 	mov.w	r2, #4294967295
 800d45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d45e:	f10a 0a01 	add.w	sl, sl, #1
 800d462:	9304      	str	r3, [sp, #16]
 800d464:	9307      	str	r3, [sp, #28]
 800d466:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d46a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d46c:	4654      	mov	r4, sl
 800d46e:	2205      	movs	r2, #5
 800d470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d474:	484e      	ldr	r0, [pc, #312]	@ (800d5b0 <_svfiprintf_r+0x1e4>)
 800d476:	f7f2 feb3 	bl	80001e0 <memchr>
 800d47a:	9a04      	ldr	r2, [sp, #16]
 800d47c:	b9d8      	cbnz	r0, 800d4b6 <_svfiprintf_r+0xea>
 800d47e:	06d0      	lsls	r0, r2, #27
 800d480:	bf44      	itt	mi
 800d482:	2320      	movmi	r3, #32
 800d484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d488:	0711      	lsls	r1, r2, #28
 800d48a:	bf44      	itt	mi
 800d48c:	232b      	movmi	r3, #43	@ 0x2b
 800d48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d492:	f89a 3000 	ldrb.w	r3, [sl]
 800d496:	2b2a      	cmp	r3, #42	@ 0x2a
 800d498:	d015      	beq.n	800d4c6 <_svfiprintf_r+0xfa>
 800d49a:	9a07      	ldr	r2, [sp, #28]
 800d49c:	4654      	mov	r4, sl
 800d49e:	2000      	movs	r0, #0
 800d4a0:	f04f 0c0a 	mov.w	ip, #10
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4aa:	3b30      	subs	r3, #48	@ 0x30
 800d4ac:	2b09      	cmp	r3, #9
 800d4ae:	d94b      	bls.n	800d548 <_svfiprintf_r+0x17c>
 800d4b0:	b1b0      	cbz	r0, 800d4e0 <_svfiprintf_r+0x114>
 800d4b2:	9207      	str	r2, [sp, #28]
 800d4b4:	e014      	b.n	800d4e0 <_svfiprintf_r+0x114>
 800d4b6:	eba0 0308 	sub.w	r3, r0, r8
 800d4ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	9304      	str	r3, [sp, #16]
 800d4c2:	46a2      	mov	sl, r4
 800d4c4:	e7d2      	b.n	800d46c <_svfiprintf_r+0xa0>
 800d4c6:	9b03      	ldr	r3, [sp, #12]
 800d4c8:	1d19      	adds	r1, r3, #4
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	9103      	str	r1, [sp, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	bfbb      	ittet	lt
 800d4d2:	425b      	neglt	r3, r3
 800d4d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d4d8:	9307      	strge	r3, [sp, #28]
 800d4da:	9307      	strlt	r3, [sp, #28]
 800d4dc:	bfb8      	it	lt
 800d4de:	9204      	strlt	r2, [sp, #16]
 800d4e0:	7823      	ldrb	r3, [r4, #0]
 800d4e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4e4:	d10a      	bne.n	800d4fc <_svfiprintf_r+0x130>
 800d4e6:	7863      	ldrb	r3, [r4, #1]
 800d4e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ea:	d132      	bne.n	800d552 <_svfiprintf_r+0x186>
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	1d1a      	adds	r2, r3, #4
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	9203      	str	r2, [sp, #12]
 800d4f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4f8:	3402      	adds	r4, #2
 800d4fa:	9305      	str	r3, [sp, #20]
 800d4fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d5c0 <_svfiprintf_r+0x1f4>
 800d500:	7821      	ldrb	r1, [r4, #0]
 800d502:	2203      	movs	r2, #3
 800d504:	4650      	mov	r0, sl
 800d506:	f7f2 fe6b 	bl	80001e0 <memchr>
 800d50a:	b138      	cbz	r0, 800d51c <_svfiprintf_r+0x150>
 800d50c:	9b04      	ldr	r3, [sp, #16]
 800d50e:	eba0 000a 	sub.w	r0, r0, sl
 800d512:	2240      	movs	r2, #64	@ 0x40
 800d514:	4082      	lsls	r2, r0
 800d516:	4313      	orrs	r3, r2
 800d518:	3401      	adds	r4, #1
 800d51a:	9304      	str	r3, [sp, #16]
 800d51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d520:	4824      	ldr	r0, [pc, #144]	@ (800d5b4 <_svfiprintf_r+0x1e8>)
 800d522:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d526:	2206      	movs	r2, #6
 800d528:	f7f2 fe5a 	bl	80001e0 <memchr>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d036      	beq.n	800d59e <_svfiprintf_r+0x1d2>
 800d530:	4b21      	ldr	r3, [pc, #132]	@ (800d5b8 <_svfiprintf_r+0x1ec>)
 800d532:	bb1b      	cbnz	r3, 800d57c <_svfiprintf_r+0x1b0>
 800d534:	9b03      	ldr	r3, [sp, #12]
 800d536:	3307      	adds	r3, #7
 800d538:	f023 0307 	bic.w	r3, r3, #7
 800d53c:	3308      	adds	r3, #8
 800d53e:	9303      	str	r3, [sp, #12]
 800d540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d542:	4433      	add	r3, r6
 800d544:	9309      	str	r3, [sp, #36]	@ 0x24
 800d546:	e76a      	b.n	800d41e <_svfiprintf_r+0x52>
 800d548:	fb0c 3202 	mla	r2, ip, r2, r3
 800d54c:	460c      	mov	r4, r1
 800d54e:	2001      	movs	r0, #1
 800d550:	e7a8      	b.n	800d4a4 <_svfiprintf_r+0xd8>
 800d552:	2300      	movs	r3, #0
 800d554:	3401      	adds	r4, #1
 800d556:	9305      	str	r3, [sp, #20]
 800d558:	4619      	mov	r1, r3
 800d55a:	f04f 0c0a 	mov.w	ip, #10
 800d55e:	4620      	mov	r0, r4
 800d560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d564:	3a30      	subs	r2, #48	@ 0x30
 800d566:	2a09      	cmp	r2, #9
 800d568:	d903      	bls.n	800d572 <_svfiprintf_r+0x1a6>
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0c6      	beq.n	800d4fc <_svfiprintf_r+0x130>
 800d56e:	9105      	str	r1, [sp, #20]
 800d570:	e7c4      	b.n	800d4fc <_svfiprintf_r+0x130>
 800d572:	fb0c 2101 	mla	r1, ip, r1, r2
 800d576:	4604      	mov	r4, r0
 800d578:	2301      	movs	r3, #1
 800d57a:	e7f0      	b.n	800d55e <_svfiprintf_r+0x192>
 800d57c:	ab03      	add	r3, sp, #12
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	462a      	mov	r2, r5
 800d582:	4b0e      	ldr	r3, [pc, #56]	@ (800d5bc <_svfiprintf_r+0x1f0>)
 800d584:	a904      	add	r1, sp, #16
 800d586:	4638      	mov	r0, r7
 800d588:	f3af 8000 	nop.w
 800d58c:	1c42      	adds	r2, r0, #1
 800d58e:	4606      	mov	r6, r0
 800d590:	d1d6      	bne.n	800d540 <_svfiprintf_r+0x174>
 800d592:	89ab      	ldrh	r3, [r5, #12]
 800d594:	065b      	lsls	r3, r3, #25
 800d596:	f53f af2d 	bmi.w	800d3f4 <_svfiprintf_r+0x28>
 800d59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d59c:	e72c      	b.n	800d3f8 <_svfiprintf_r+0x2c>
 800d59e:	ab03      	add	r3, sp, #12
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	462a      	mov	r2, r5
 800d5a4:	4b05      	ldr	r3, [pc, #20]	@ (800d5bc <_svfiprintf_r+0x1f0>)
 800d5a6:	a904      	add	r1, sp, #16
 800d5a8:	4638      	mov	r0, r7
 800d5aa:	f000 fb8b 	bl	800dcc4 <_printf_i>
 800d5ae:	e7ed      	b.n	800d58c <_svfiprintf_r+0x1c0>
 800d5b0:	0800fb88 	.word	0x0800fb88
 800d5b4:	0800fb92 	.word	0x0800fb92
 800d5b8:	00000000 	.word	0x00000000
 800d5bc:	0800d317 	.word	0x0800d317
 800d5c0:	0800fb8e 	.word	0x0800fb8e

0800d5c4 <_sungetc_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	1c4b      	adds	r3, r1, #1
 800d5c8:	4614      	mov	r4, r2
 800d5ca:	d103      	bne.n	800d5d4 <_sungetc_r+0x10>
 800d5cc:	f04f 35ff 	mov.w	r5, #4294967295
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	8993      	ldrh	r3, [r2, #12]
 800d5d6:	f023 0320 	bic.w	r3, r3, #32
 800d5da:	8193      	strh	r3, [r2, #12]
 800d5dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5de:	6852      	ldr	r2, [r2, #4]
 800d5e0:	b2cd      	uxtb	r5, r1
 800d5e2:	b18b      	cbz	r3, 800d608 <_sungetc_r+0x44>
 800d5e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	dd08      	ble.n	800d5fc <_sungetc_r+0x38>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	1e5a      	subs	r2, r3, #1
 800d5ee:	6022      	str	r2, [r4, #0]
 800d5f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d5f4:	6863      	ldr	r3, [r4, #4]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	6063      	str	r3, [r4, #4]
 800d5fa:	e7e9      	b.n	800d5d0 <_sungetc_r+0xc>
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	f000 ff14 	bl	800e42a <__submore>
 800d602:	2800      	cmp	r0, #0
 800d604:	d0f1      	beq.n	800d5ea <_sungetc_r+0x26>
 800d606:	e7e1      	b.n	800d5cc <_sungetc_r+0x8>
 800d608:	6921      	ldr	r1, [r4, #16]
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	b151      	cbz	r1, 800d624 <_sungetc_r+0x60>
 800d60e:	4299      	cmp	r1, r3
 800d610:	d208      	bcs.n	800d624 <_sungetc_r+0x60>
 800d612:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d616:	42a9      	cmp	r1, r5
 800d618:	d104      	bne.n	800d624 <_sungetc_r+0x60>
 800d61a:	3b01      	subs	r3, #1
 800d61c:	3201      	adds	r2, #1
 800d61e:	6023      	str	r3, [r4, #0]
 800d620:	6062      	str	r2, [r4, #4]
 800d622:	e7d5      	b.n	800d5d0 <_sungetc_r+0xc>
 800d624:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d62c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d62e:	2303      	movs	r3, #3
 800d630:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d632:	4623      	mov	r3, r4
 800d634:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d638:	6023      	str	r3, [r4, #0]
 800d63a:	2301      	movs	r3, #1
 800d63c:	e7dc      	b.n	800d5f8 <_sungetc_r+0x34>

0800d63e <__ssrefill_r>:
 800d63e:	b510      	push	{r4, lr}
 800d640:	460c      	mov	r4, r1
 800d642:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d644:	b169      	cbz	r1, 800d662 <__ssrefill_r+0x24>
 800d646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d64a:	4299      	cmp	r1, r3
 800d64c:	d001      	beq.n	800d652 <__ssrefill_r+0x14>
 800d64e:	f7fe fe0d 	bl	800c26c <_free_r>
 800d652:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d654:	6063      	str	r3, [r4, #4]
 800d656:	2000      	movs	r0, #0
 800d658:	6360      	str	r0, [r4, #52]	@ 0x34
 800d65a:	b113      	cbz	r3, 800d662 <__ssrefill_r+0x24>
 800d65c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d65e:	6023      	str	r3, [r4, #0]
 800d660:	bd10      	pop	{r4, pc}
 800d662:	6923      	ldr	r3, [r4, #16]
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	2300      	movs	r3, #0
 800d668:	6063      	str	r3, [r4, #4]
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	f043 0320 	orr.w	r3, r3, #32
 800d670:	81a3      	strh	r3, [r4, #12]
 800d672:	f04f 30ff 	mov.w	r0, #4294967295
 800d676:	e7f3      	b.n	800d660 <__ssrefill_r+0x22>

0800d678 <__ssvfiscanf_r>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	460c      	mov	r4, r1
 800d67e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d682:	2100      	movs	r1, #0
 800d684:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d688:	49a6      	ldr	r1, [pc, #664]	@ (800d924 <__ssvfiscanf_r+0x2ac>)
 800d68a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d68c:	f10d 0804 	add.w	r8, sp, #4
 800d690:	49a5      	ldr	r1, [pc, #660]	@ (800d928 <__ssvfiscanf_r+0x2b0>)
 800d692:	4fa6      	ldr	r7, [pc, #664]	@ (800d92c <__ssvfiscanf_r+0x2b4>)
 800d694:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d698:	4606      	mov	r6, r0
 800d69a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	f892 9000 	ldrb.w	r9, [r2]
 800d6a2:	f1b9 0f00 	cmp.w	r9, #0
 800d6a6:	f000 8158 	beq.w	800d95a <__ssvfiscanf_r+0x2e2>
 800d6aa:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d6ae:	f013 0308 	ands.w	r3, r3, #8
 800d6b2:	f102 0501 	add.w	r5, r2, #1
 800d6b6:	d019      	beq.n	800d6ec <__ssvfiscanf_r+0x74>
 800d6b8:	6863      	ldr	r3, [r4, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	dd0f      	ble.n	800d6de <__ssvfiscanf_r+0x66>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	781a      	ldrb	r2, [r3, #0]
 800d6c2:	5cba      	ldrb	r2, [r7, r2]
 800d6c4:	0712      	lsls	r2, r2, #28
 800d6c6:	d401      	bmi.n	800d6cc <__ssvfiscanf_r+0x54>
 800d6c8:	462a      	mov	r2, r5
 800d6ca:	e7e8      	b.n	800d69e <__ssvfiscanf_r+0x26>
 800d6cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d6ce:	3201      	adds	r2, #1
 800d6d0:	9245      	str	r2, [sp, #276]	@ 0x114
 800d6d2:	6862      	ldr	r2, [r4, #4]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	3a01      	subs	r2, #1
 800d6d8:	6062      	str	r2, [r4, #4]
 800d6da:	6023      	str	r3, [r4, #0]
 800d6dc:	e7ec      	b.n	800d6b8 <__ssvfiscanf_r+0x40>
 800d6de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	4798      	blx	r3
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d0e9      	beq.n	800d6be <__ssvfiscanf_r+0x46>
 800d6ea:	e7ed      	b.n	800d6c8 <__ssvfiscanf_r+0x50>
 800d6ec:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d6f0:	f040 8085 	bne.w	800d7fe <__ssvfiscanf_r+0x186>
 800d6f4:	9341      	str	r3, [sp, #260]	@ 0x104
 800d6f6:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d6f8:	7853      	ldrb	r3, [r2, #1]
 800d6fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6fc:	bf02      	ittt	eq
 800d6fe:	2310      	moveq	r3, #16
 800d700:	1c95      	addeq	r5, r2, #2
 800d702:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d704:	220a      	movs	r2, #10
 800d706:	46aa      	mov	sl, r5
 800d708:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d70c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d710:	2b09      	cmp	r3, #9
 800d712:	d91e      	bls.n	800d752 <__ssvfiscanf_r+0xda>
 800d714:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800d930 <__ssvfiscanf_r+0x2b8>
 800d718:	2203      	movs	r2, #3
 800d71a:	4658      	mov	r0, fp
 800d71c:	f7f2 fd60 	bl	80001e0 <memchr>
 800d720:	b138      	cbz	r0, 800d732 <__ssvfiscanf_r+0xba>
 800d722:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d724:	eba0 000b 	sub.w	r0, r0, fp
 800d728:	2301      	movs	r3, #1
 800d72a:	4083      	lsls	r3, r0
 800d72c:	4313      	orrs	r3, r2
 800d72e:	9341      	str	r3, [sp, #260]	@ 0x104
 800d730:	4655      	mov	r5, sl
 800d732:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d736:	2b78      	cmp	r3, #120	@ 0x78
 800d738:	d806      	bhi.n	800d748 <__ssvfiscanf_r+0xd0>
 800d73a:	2b57      	cmp	r3, #87	@ 0x57
 800d73c:	d810      	bhi.n	800d760 <__ssvfiscanf_r+0xe8>
 800d73e:	2b25      	cmp	r3, #37	@ 0x25
 800d740:	d05d      	beq.n	800d7fe <__ssvfiscanf_r+0x186>
 800d742:	d857      	bhi.n	800d7f4 <__ssvfiscanf_r+0x17c>
 800d744:	2b00      	cmp	r3, #0
 800d746:	d075      	beq.n	800d834 <__ssvfiscanf_r+0x1bc>
 800d748:	2303      	movs	r3, #3
 800d74a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d74c:	230a      	movs	r3, #10
 800d74e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d750:	e088      	b.n	800d864 <__ssvfiscanf_r+0x1ec>
 800d752:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d754:	fb02 1103 	mla	r1, r2, r3, r1
 800d758:	3930      	subs	r1, #48	@ 0x30
 800d75a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d75c:	4655      	mov	r5, sl
 800d75e:	e7d2      	b.n	800d706 <__ssvfiscanf_r+0x8e>
 800d760:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d764:	2a20      	cmp	r2, #32
 800d766:	d8ef      	bhi.n	800d748 <__ssvfiscanf_r+0xd0>
 800d768:	a101      	add	r1, pc, #4	@ (adr r1, 800d770 <__ssvfiscanf_r+0xf8>)
 800d76a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d76e:	bf00      	nop
 800d770:	0800d843 	.word	0x0800d843
 800d774:	0800d749 	.word	0x0800d749
 800d778:	0800d749 	.word	0x0800d749
 800d77c:	0800d89d 	.word	0x0800d89d
 800d780:	0800d749 	.word	0x0800d749
 800d784:	0800d749 	.word	0x0800d749
 800d788:	0800d749 	.word	0x0800d749
 800d78c:	0800d749 	.word	0x0800d749
 800d790:	0800d749 	.word	0x0800d749
 800d794:	0800d749 	.word	0x0800d749
 800d798:	0800d749 	.word	0x0800d749
 800d79c:	0800d8b3 	.word	0x0800d8b3
 800d7a0:	0800d899 	.word	0x0800d899
 800d7a4:	0800d7fb 	.word	0x0800d7fb
 800d7a8:	0800d7fb 	.word	0x0800d7fb
 800d7ac:	0800d7fb 	.word	0x0800d7fb
 800d7b0:	0800d749 	.word	0x0800d749
 800d7b4:	0800d855 	.word	0x0800d855
 800d7b8:	0800d749 	.word	0x0800d749
 800d7bc:	0800d749 	.word	0x0800d749
 800d7c0:	0800d749 	.word	0x0800d749
 800d7c4:	0800d749 	.word	0x0800d749
 800d7c8:	0800d8c3 	.word	0x0800d8c3
 800d7cc:	0800d85d 	.word	0x0800d85d
 800d7d0:	0800d83b 	.word	0x0800d83b
 800d7d4:	0800d749 	.word	0x0800d749
 800d7d8:	0800d749 	.word	0x0800d749
 800d7dc:	0800d8bf 	.word	0x0800d8bf
 800d7e0:	0800d749 	.word	0x0800d749
 800d7e4:	0800d899 	.word	0x0800d899
 800d7e8:	0800d749 	.word	0x0800d749
 800d7ec:	0800d749 	.word	0x0800d749
 800d7f0:	0800d843 	.word	0x0800d843
 800d7f4:	3b45      	subs	r3, #69	@ 0x45
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	d8a6      	bhi.n	800d748 <__ssvfiscanf_r+0xd0>
 800d7fa:	2305      	movs	r3, #5
 800d7fc:	e031      	b.n	800d862 <__ssvfiscanf_r+0x1ea>
 800d7fe:	6863      	ldr	r3, [r4, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	dd0d      	ble.n	800d820 <__ssvfiscanf_r+0x1a8>
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	781a      	ldrb	r2, [r3, #0]
 800d808:	454a      	cmp	r2, r9
 800d80a:	f040 80a6 	bne.w	800d95a <__ssvfiscanf_r+0x2e2>
 800d80e:	3301      	adds	r3, #1
 800d810:	6862      	ldr	r2, [r4, #4]
 800d812:	6023      	str	r3, [r4, #0]
 800d814:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d816:	3a01      	subs	r2, #1
 800d818:	3301      	adds	r3, #1
 800d81a:	6062      	str	r2, [r4, #4]
 800d81c:	9345      	str	r3, [sp, #276]	@ 0x114
 800d81e:	e753      	b.n	800d6c8 <__ssvfiscanf_r+0x50>
 800d820:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d822:	4621      	mov	r1, r4
 800d824:	4630      	mov	r0, r6
 800d826:	4798      	blx	r3
 800d828:	2800      	cmp	r0, #0
 800d82a:	d0eb      	beq.n	800d804 <__ssvfiscanf_r+0x18c>
 800d82c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d82e:	2800      	cmp	r0, #0
 800d830:	f040 808b 	bne.w	800d94a <__ssvfiscanf_r+0x2d2>
 800d834:	f04f 30ff 	mov.w	r0, #4294967295
 800d838:	e08b      	b.n	800d952 <__ssvfiscanf_r+0x2da>
 800d83a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d83c:	f042 0220 	orr.w	r2, r2, #32
 800d840:	9241      	str	r2, [sp, #260]	@ 0x104
 800d842:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d848:	9241      	str	r2, [sp, #260]	@ 0x104
 800d84a:	2210      	movs	r2, #16
 800d84c:	2b6e      	cmp	r3, #110	@ 0x6e
 800d84e:	9242      	str	r2, [sp, #264]	@ 0x108
 800d850:	d902      	bls.n	800d858 <__ssvfiscanf_r+0x1e0>
 800d852:	e005      	b.n	800d860 <__ssvfiscanf_r+0x1e8>
 800d854:	2300      	movs	r3, #0
 800d856:	9342      	str	r3, [sp, #264]	@ 0x108
 800d858:	2303      	movs	r3, #3
 800d85a:	e002      	b.n	800d862 <__ssvfiscanf_r+0x1ea>
 800d85c:	2308      	movs	r3, #8
 800d85e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d860:	2304      	movs	r3, #4
 800d862:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d864:	6863      	ldr	r3, [r4, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	dd39      	ble.n	800d8de <__ssvfiscanf_r+0x266>
 800d86a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d86c:	0659      	lsls	r1, r3, #25
 800d86e:	d404      	bmi.n	800d87a <__ssvfiscanf_r+0x202>
 800d870:	6823      	ldr	r3, [r4, #0]
 800d872:	781a      	ldrb	r2, [r3, #0]
 800d874:	5cba      	ldrb	r2, [r7, r2]
 800d876:	0712      	lsls	r2, r2, #28
 800d878:	d438      	bmi.n	800d8ec <__ssvfiscanf_r+0x274>
 800d87a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	dc47      	bgt.n	800d910 <__ssvfiscanf_r+0x298>
 800d880:	466b      	mov	r3, sp
 800d882:	4622      	mov	r2, r4
 800d884:	a941      	add	r1, sp, #260	@ 0x104
 800d886:	4630      	mov	r0, r6
 800d888:	f000 fb3a 	bl	800df00 <_scanf_chars>
 800d88c:	2801      	cmp	r0, #1
 800d88e:	d064      	beq.n	800d95a <__ssvfiscanf_r+0x2e2>
 800d890:	2802      	cmp	r0, #2
 800d892:	f47f af19 	bne.w	800d6c8 <__ssvfiscanf_r+0x50>
 800d896:	e7c9      	b.n	800d82c <__ssvfiscanf_r+0x1b4>
 800d898:	220a      	movs	r2, #10
 800d89a:	e7d7      	b.n	800d84c <__ssvfiscanf_r+0x1d4>
 800d89c:	4629      	mov	r1, r5
 800d89e:	4640      	mov	r0, r8
 800d8a0:	f000 fd8a 	bl	800e3b8 <__sccl>
 800d8a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8aa:	9341      	str	r3, [sp, #260]	@ 0x104
 800d8ac:	4605      	mov	r5, r0
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e7d7      	b.n	800d862 <__ssvfiscanf_r+0x1ea>
 800d8b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8b8:	9341      	str	r3, [sp, #260]	@ 0x104
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e7d1      	b.n	800d862 <__ssvfiscanf_r+0x1ea>
 800d8be:	2302      	movs	r3, #2
 800d8c0:	e7cf      	b.n	800d862 <__ssvfiscanf_r+0x1ea>
 800d8c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d8c4:	06c3      	lsls	r3, r0, #27
 800d8c6:	f53f aeff 	bmi.w	800d6c8 <__ssvfiscanf_r+0x50>
 800d8ca:	9b00      	ldr	r3, [sp, #0]
 800d8cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d8ce:	1d19      	adds	r1, r3, #4
 800d8d0:	9100      	str	r1, [sp, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	07c0      	lsls	r0, r0, #31
 800d8d6:	bf4c      	ite	mi
 800d8d8:	801a      	strhmi	r2, [r3, #0]
 800d8da:	601a      	strpl	r2, [r3, #0]
 800d8dc:	e6f4      	b.n	800d6c8 <__ssvfiscanf_r+0x50>
 800d8de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	4798      	blx	r3
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d0bf      	beq.n	800d86a <__ssvfiscanf_r+0x1f2>
 800d8ea:	e79f      	b.n	800d82c <__ssvfiscanf_r+0x1b4>
 800d8ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d8ee:	3201      	adds	r2, #1
 800d8f0:	9245      	str	r2, [sp, #276]	@ 0x114
 800d8f2:	6862      	ldr	r2, [r4, #4]
 800d8f4:	3a01      	subs	r2, #1
 800d8f6:	2a00      	cmp	r2, #0
 800d8f8:	6062      	str	r2, [r4, #4]
 800d8fa:	dd02      	ble.n	800d902 <__ssvfiscanf_r+0x28a>
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	e7b6      	b.n	800d870 <__ssvfiscanf_r+0x1f8>
 800d902:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d904:	4621      	mov	r1, r4
 800d906:	4630      	mov	r0, r6
 800d908:	4798      	blx	r3
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d0b0      	beq.n	800d870 <__ssvfiscanf_r+0x1f8>
 800d90e:	e78d      	b.n	800d82c <__ssvfiscanf_r+0x1b4>
 800d910:	2b04      	cmp	r3, #4
 800d912:	dc0f      	bgt.n	800d934 <__ssvfiscanf_r+0x2bc>
 800d914:	466b      	mov	r3, sp
 800d916:	4622      	mov	r2, r4
 800d918:	a941      	add	r1, sp, #260	@ 0x104
 800d91a:	4630      	mov	r0, r6
 800d91c:	f000 fb4a 	bl	800dfb4 <_scanf_i>
 800d920:	e7b4      	b.n	800d88c <__ssvfiscanf_r+0x214>
 800d922:	bf00      	nop
 800d924:	0800d5c5 	.word	0x0800d5c5
 800d928:	0800d63f 	.word	0x0800d63f
 800d92c:	0800fc69 	.word	0x0800fc69
 800d930:	0800fb8e 	.word	0x0800fb8e
 800d934:	4b0a      	ldr	r3, [pc, #40]	@ (800d960 <__ssvfiscanf_r+0x2e8>)
 800d936:	2b00      	cmp	r3, #0
 800d938:	f43f aec6 	beq.w	800d6c8 <__ssvfiscanf_r+0x50>
 800d93c:	466b      	mov	r3, sp
 800d93e:	4622      	mov	r2, r4
 800d940:	a941      	add	r1, sp, #260	@ 0x104
 800d942:	4630      	mov	r0, r6
 800d944:	f7fd ff5c 	bl	800b800 <_scanf_float>
 800d948:	e7a0      	b.n	800d88c <__ssvfiscanf_r+0x214>
 800d94a:	89a3      	ldrh	r3, [r4, #12]
 800d94c:	065b      	lsls	r3, r3, #25
 800d94e:	f53f af71 	bmi.w	800d834 <__ssvfiscanf_r+0x1bc>
 800d952:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d95c:	e7f9      	b.n	800d952 <__ssvfiscanf_r+0x2da>
 800d95e:	bf00      	nop
 800d960:	0800b801 	.word	0x0800b801

0800d964 <__sfputc_r>:
 800d964:	6893      	ldr	r3, [r2, #8]
 800d966:	3b01      	subs	r3, #1
 800d968:	2b00      	cmp	r3, #0
 800d96a:	b410      	push	{r4}
 800d96c:	6093      	str	r3, [r2, #8]
 800d96e:	da08      	bge.n	800d982 <__sfputc_r+0x1e>
 800d970:	6994      	ldr	r4, [r2, #24]
 800d972:	42a3      	cmp	r3, r4
 800d974:	db01      	blt.n	800d97a <__sfputc_r+0x16>
 800d976:	290a      	cmp	r1, #10
 800d978:	d103      	bne.n	800d982 <__sfputc_r+0x1e>
 800d97a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d97e:	f7fe bb12 	b.w	800bfa6 <__swbuf_r>
 800d982:	6813      	ldr	r3, [r2, #0]
 800d984:	1c58      	adds	r0, r3, #1
 800d986:	6010      	str	r0, [r2, #0]
 800d988:	7019      	strb	r1, [r3, #0]
 800d98a:	4608      	mov	r0, r1
 800d98c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <__sfputs_r>:
 800d992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d994:	4606      	mov	r6, r0
 800d996:	460f      	mov	r7, r1
 800d998:	4614      	mov	r4, r2
 800d99a:	18d5      	adds	r5, r2, r3
 800d99c:	42ac      	cmp	r4, r5
 800d99e:	d101      	bne.n	800d9a4 <__sfputs_r+0x12>
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	e007      	b.n	800d9b4 <__sfputs_r+0x22>
 800d9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a8:	463a      	mov	r2, r7
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	f7ff ffda 	bl	800d964 <__sfputc_r>
 800d9b0:	1c43      	adds	r3, r0, #1
 800d9b2:	d1f3      	bne.n	800d99c <__sfputs_r+0xa>
 800d9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9b8 <_vfiprintf_r>:
 800d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9bc:	460d      	mov	r5, r1
 800d9be:	b09d      	sub	sp, #116	@ 0x74
 800d9c0:	4614      	mov	r4, r2
 800d9c2:	4698      	mov	r8, r3
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	b118      	cbz	r0, 800d9d0 <_vfiprintf_r+0x18>
 800d9c8:	6a03      	ldr	r3, [r0, #32]
 800d9ca:	b90b      	cbnz	r3, 800d9d0 <_vfiprintf_r+0x18>
 800d9cc:	f7fe f9b2 	bl	800bd34 <__sinit>
 800d9d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9d2:	07d9      	lsls	r1, r3, #31
 800d9d4:	d405      	bmi.n	800d9e2 <_vfiprintf_r+0x2a>
 800d9d6:	89ab      	ldrh	r3, [r5, #12]
 800d9d8:	059a      	lsls	r2, r3, #22
 800d9da:	d402      	bmi.n	800d9e2 <_vfiprintf_r+0x2a>
 800d9dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9de:	f7fe fc26 	bl	800c22e <__retarget_lock_acquire_recursive>
 800d9e2:	89ab      	ldrh	r3, [r5, #12]
 800d9e4:	071b      	lsls	r3, r3, #28
 800d9e6:	d501      	bpl.n	800d9ec <_vfiprintf_r+0x34>
 800d9e8:	692b      	ldr	r3, [r5, #16]
 800d9ea:	b99b      	cbnz	r3, 800da14 <_vfiprintf_r+0x5c>
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7fe fb18 	bl	800c024 <__swsetup_r>
 800d9f4:	b170      	cbz	r0, 800da14 <_vfiprintf_r+0x5c>
 800d9f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9f8:	07dc      	lsls	r4, r3, #31
 800d9fa:	d504      	bpl.n	800da06 <_vfiprintf_r+0x4e>
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800da00:	b01d      	add	sp, #116	@ 0x74
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	89ab      	ldrh	r3, [r5, #12]
 800da08:	0598      	lsls	r0, r3, #22
 800da0a:	d4f7      	bmi.n	800d9fc <_vfiprintf_r+0x44>
 800da0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da0e:	f7fe fc0f 	bl	800c230 <__retarget_lock_release_recursive>
 800da12:	e7f3      	b.n	800d9fc <_vfiprintf_r+0x44>
 800da14:	2300      	movs	r3, #0
 800da16:	9309      	str	r3, [sp, #36]	@ 0x24
 800da18:	2320      	movs	r3, #32
 800da1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da22:	2330      	movs	r3, #48	@ 0x30
 800da24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dbd4 <_vfiprintf_r+0x21c>
 800da28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da2c:	f04f 0901 	mov.w	r9, #1
 800da30:	4623      	mov	r3, r4
 800da32:	469a      	mov	sl, r3
 800da34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da38:	b10a      	cbz	r2, 800da3e <_vfiprintf_r+0x86>
 800da3a:	2a25      	cmp	r2, #37	@ 0x25
 800da3c:	d1f9      	bne.n	800da32 <_vfiprintf_r+0x7a>
 800da3e:	ebba 0b04 	subs.w	fp, sl, r4
 800da42:	d00b      	beq.n	800da5c <_vfiprintf_r+0xa4>
 800da44:	465b      	mov	r3, fp
 800da46:	4622      	mov	r2, r4
 800da48:	4629      	mov	r1, r5
 800da4a:	4630      	mov	r0, r6
 800da4c:	f7ff ffa1 	bl	800d992 <__sfputs_r>
 800da50:	3001      	adds	r0, #1
 800da52:	f000 80a7 	beq.w	800dba4 <_vfiprintf_r+0x1ec>
 800da56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da58:	445a      	add	r2, fp
 800da5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800da5c:	f89a 3000 	ldrb.w	r3, [sl]
 800da60:	2b00      	cmp	r3, #0
 800da62:	f000 809f 	beq.w	800dba4 <_vfiprintf_r+0x1ec>
 800da66:	2300      	movs	r3, #0
 800da68:	f04f 32ff 	mov.w	r2, #4294967295
 800da6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da70:	f10a 0a01 	add.w	sl, sl, #1
 800da74:	9304      	str	r3, [sp, #16]
 800da76:	9307      	str	r3, [sp, #28]
 800da78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800da7e:	4654      	mov	r4, sl
 800da80:	2205      	movs	r2, #5
 800da82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da86:	4853      	ldr	r0, [pc, #332]	@ (800dbd4 <_vfiprintf_r+0x21c>)
 800da88:	f7f2 fbaa 	bl	80001e0 <memchr>
 800da8c:	9a04      	ldr	r2, [sp, #16]
 800da8e:	b9d8      	cbnz	r0, 800dac8 <_vfiprintf_r+0x110>
 800da90:	06d1      	lsls	r1, r2, #27
 800da92:	bf44      	itt	mi
 800da94:	2320      	movmi	r3, #32
 800da96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da9a:	0713      	lsls	r3, r2, #28
 800da9c:	bf44      	itt	mi
 800da9e:	232b      	movmi	r3, #43	@ 0x2b
 800daa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daa4:	f89a 3000 	ldrb.w	r3, [sl]
 800daa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800daaa:	d015      	beq.n	800dad8 <_vfiprintf_r+0x120>
 800daac:	9a07      	ldr	r2, [sp, #28]
 800daae:	4654      	mov	r4, sl
 800dab0:	2000      	movs	r0, #0
 800dab2:	f04f 0c0a 	mov.w	ip, #10
 800dab6:	4621      	mov	r1, r4
 800dab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dabc:	3b30      	subs	r3, #48	@ 0x30
 800dabe:	2b09      	cmp	r3, #9
 800dac0:	d94b      	bls.n	800db5a <_vfiprintf_r+0x1a2>
 800dac2:	b1b0      	cbz	r0, 800daf2 <_vfiprintf_r+0x13a>
 800dac4:	9207      	str	r2, [sp, #28]
 800dac6:	e014      	b.n	800daf2 <_vfiprintf_r+0x13a>
 800dac8:	eba0 0308 	sub.w	r3, r0, r8
 800dacc:	fa09 f303 	lsl.w	r3, r9, r3
 800dad0:	4313      	orrs	r3, r2
 800dad2:	9304      	str	r3, [sp, #16]
 800dad4:	46a2      	mov	sl, r4
 800dad6:	e7d2      	b.n	800da7e <_vfiprintf_r+0xc6>
 800dad8:	9b03      	ldr	r3, [sp, #12]
 800dada:	1d19      	adds	r1, r3, #4
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	9103      	str	r1, [sp, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	bfbb      	ittet	lt
 800dae4:	425b      	neglt	r3, r3
 800dae6:	f042 0202 	orrlt.w	r2, r2, #2
 800daea:	9307      	strge	r3, [sp, #28]
 800daec:	9307      	strlt	r3, [sp, #28]
 800daee:	bfb8      	it	lt
 800daf0:	9204      	strlt	r2, [sp, #16]
 800daf2:	7823      	ldrb	r3, [r4, #0]
 800daf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800daf6:	d10a      	bne.n	800db0e <_vfiprintf_r+0x156>
 800daf8:	7863      	ldrb	r3, [r4, #1]
 800dafa:	2b2a      	cmp	r3, #42	@ 0x2a
 800dafc:	d132      	bne.n	800db64 <_vfiprintf_r+0x1ac>
 800dafe:	9b03      	ldr	r3, [sp, #12]
 800db00:	1d1a      	adds	r2, r3, #4
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	9203      	str	r2, [sp, #12]
 800db06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db0a:	3402      	adds	r4, #2
 800db0c:	9305      	str	r3, [sp, #20]
 800db0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dbe4 <_vfiprintf_r+0x22c>
 800db12:	7821      	ldrb	r1, [r4, #0]
 800db14:	2203      	movs	r2, #3
 800db16:	4650      	mov	r0, sl
 800db18:	f7f2 fb62 	bl	80001e0 <memchr>
 800db1c:	b138      	cbz	r0, 800db2e <_vfiprintf_r+0x176>
 800db1e:	9b04      	ldr	r3, [sp, #16]
 800db20:	eba0 000a 	sub.w	r0, r0, sl
 800db24:	2240      	movs	r2, #64	@ 0x40
 800db26:	4082      	lsls	r2, r0
 800db28:	4313      	orrs	r3, r2
 800db2a:	3401      	adds	r4, #1
 800db2c:	9304      	str	r3, [sp, #16]
 800db2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db32:	4829      	ldr	r0, [pc, #164]	@ (800dbd8 <_vfiprintf_r+0x220>)
 800db34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db38:	2206      	movs	r2, #6
 800db3a:	f7f2 fb51 	bl	80001e0 <memchr>
 800db3e:	2800      	cmp	r0, #0
 800db40:	d03f      	beq.n	800dbc2 <_vfiprintf_r+0x20a>
 800db42:	4b26      	ldr	r3, [pc, #152]	@ (800dbdc <_vfiprintf_r+0x224>)
 800db44:	bb1b      	cbnz	r3, 800db8e <_vfiprintf_r+0x1d6>
 800db46:	9b03      	ldr	r3, [sp, #12]
 800db48:	3307      	adds	r3, #7
 800db4a:	f023 0307 	bic.w	r3, r3, #7
 800db4e:	3308      	adds	r3, #8
 800db50:	9303      	str	r3, [sp, #12]
 800db52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db54:	443b      	add	r3, r7
 800db56:	9309      	str	r3, [sp, #36]	@ 0x24
 800db58:	e76a      	b.n	800da30 <_vfiprintf_r+0x78>
 800db5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800db5e:	460c      	mov	r4, r1
 800db60:	2001      	movs	r0, #1
 800db62:	e7a8      	b.n	800dab6 <_vfiprintf_r+0xfe>
 800db64:	2300      	movs	r3, #0
 800db66:	3401      	adds	r4, #1
 800db68:	9305      	str	r3, [sp, #20]
 800db6a:	4619      	mov	r1, r3
 800db6c:	f04f 0c0a 	mov.w	ip, #10
 800db70:	4620      	mov	r0, r4
 800db72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db76:	3a30      	subs	r2, #48	@ 0x30
 800db78:	2a09      	cmp	r2, #9
 800db7a:	d903      	bls.n	800db84 <_vfiprintf_r+0x1cc>
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d0c6      	beq.n	800db0e <_vfiprintf_r+0x156>
 800db80:	9105      	str	r1, [sp, #20]
 800db82:	e7c4      	b.n	800db0e <_vfiprintf_r+0x156>
 800db84:	fb0c 2101 	mla	r1, ip, r1, r2
 800db88:	4604      	mov	r4, r0
 800db8a:	2301      	movs	r3, #1
 800db8c:	e7f0      	b.n	800db70 <_vfiprintf_r+0x1b8>
 800db8e:	ab03      	add	r3, sp, #12
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	462a      	mov	r2, r5
 800db94:	4b12      	ldr	r3, [pc, #72]	@ (800dbe0 <_vfiprintf_r+0x228>)
 800db96:	a904      	add	r1, sp, #16
 800db98:	4630      	mov	r0, r6
 800db9a:	f3af 8000 	nop.w
 800db9e:	4607      	mov	r7, r0
 800dba0:	1c78      	adds	r0, r7, #1
 800dba2:	d1d6      	bne.n	800db52 <_vfiprintf_r+0x19a>
 800dba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dba6:	07d9      	lsls	r1, r3, #31
 800dba8:	d405      	bmi.n	800dbb6 <_vfiprintf_r+0x1fe>
 800dbaa:	89ab      	ldrh	r3, [r5, #12]
 800dbac:	059a      	lsls	r2, r3, #22
 800dbae:	d402      	bmi.n	800dbb6 <_vfiprintf_r+0x1fe>
 800dbb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbb2:	f7fe fb3d 	bl	800c230 <__retarget_lock_release_recursive>
 800dbb6:	89ab      	ldrh	r3, [r5, #12]
 800dbb8:	065b      	lsls	r3, r3, #25
 800dbba:	f53f af1f 	bmi.w	800d9fc <_vfiprintf_r+0x44>
 800dbbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbc0:	e71e      	b.n	800da00 <_vfiprintf_r+0x48>
 800dbc2:	ab03      	add	r3, sp, #12
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	462a      	mov	r2, r5
 800dbc8:	4b05      	ldr	r3, [pc, #20]	@ (800dbe0 <_vfiprintf_r+0x228>)
 800dbca:	a904      	add	r1, sp, #16
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f000 f879 	bl	800dcc4 <_printf_i>
 800dbd2:	e7e4      	b.n	800db9e <_vfiprintf_r+0x1e6>
 800dbd4:	0800fb88 	.word	0x0800fb88
 800dbd8:	0800fb92 	.word	0x0800fb92
 800dbdc:	00000000 	.word	0x00000000
 800dbe0:	0800d993 	.word	0x0800d993
 800dbe4:	0800fb8e 	.word	0x0800fb8e

0800dbe8 <_printf_common>:
 800dbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbec:	4616      	mov	r6, r2
 800dbee:	4698      	mov	r8, r3
 800dbf0:	688a      	ldr	r2, [r1, #8]
 800dbf2:	690b      	ldr	r3, [r1, #16]
 800dbf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	bfb8      	it	lt
 800dbfc:	4613      	movlt	r3, r2
 800dbfe:	6033      	str	r3, [r6, #0]
 800dc00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc04:	4607      	mov	r7, r0
 800dc06:	460c      	mov	r4, r1
 800dc08:	b10a      	cbz	r2, 800dc0e <_printf_common+0x26>
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	6033      	str	r3, [r6, #0]
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	0699      	lsls	r1, r3, #26
 800dc12:	bf42      	ittt	mi
 800dc14:	6833      	ldrmi	r3, [r6, #0]
 800dc16:	3302      	addmi	r3, #2
 800dc18:	6033      	strmi	r3, [r6, #0]
 800dc1a:	6825      	ldr	r5, [r4, #0]
 800dc1c:	f015 0506 	ands.w	r5, r5, #6
 800dc20:	d106      	bne.n	800dc30 <_printf_common+0x48>
 800dc22:	f104 0a19 	add.w	sl, r4, #25
 800dc26:	68e3      	ldr	r3, [r4, #12]
 800dc28:	6832      	ldr	r2, [r6, #0]
 800dc2a:	1a9b      	subs	r3, r3, r2
 800dc2c:	42ab      	cmp	r3, r5
 800dc2e:	dc26      	bgt.n	800dc7e <_printf_common+0x96>
 800dc30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc34:	6822      	ldr	r2, [r4, #0]
 800dc36:	3b00      	subs	r3, #0
 800dc38:	bf18      	it	ne
 800dc3a:	2301      	movne	r3, #1
 800dc3c:	0692      	lsls	r2, r2, #26
 800dc3e:	d42b      	bmi.n	800dc98 <_printf_common+0xb0>
 800dc40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc44:	4641      	mov	r1, r8
 800dc46:	4638      	mov	r0, r7
 800dc48:	47c8      	blx	r9
 800dc4a:	3001      	adds	r0, #1
 800dc4c:	d01e      	beq.n	800dc8c <_printf_common+0xa4>
 800dc4e:	6823      	ldr	r3, [r4, #0]
 800dc50:	6922      	ldr	r2, [r4, #16]
 800dc52:	f003 0306 	and.w	r3, r3, #6
 800dc56:	2b04      	cmp	r3, #4
 800dc58:	bf02      	ittt	eq
 800dc5a:	68e5      	ldreq	r5, [r4, #12]
 800dc5c:	6833      	ldreq	r3, [r6, #0]
 800dc5e:	1aed      	subeq	r5, r5, r3
 800dc60:	68a3      	ldr	r3, [r4, #8]
 800dc62:	bf0c      	ite	eq
 800dc64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc68:	2500      	movne	r5, #0
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	bfc4      	itt	gt
 800dc6e:	1a9b      	subgt	r3, r3, r2
 800dc70:	18ed      	addgt	r5, r5, r3
 800dc72:	2600      	movs	r6, #0
 800dc74:	341a      	adds	r4, #26
 800dc76:	42b5      	cmp	r5, r6
 800dc78:	d11a      	bne.n	800dcb0 <_printf_common+0xc8>
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	e008      	b.n	800dc90 <_printf_common+0xa8>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4652      	mov	r2, sl
 800dc82:	4641      	mov	r1, r8
 800dc84:	4638      	mov	r0, r7
 800dc86:	47c8      	blx	r9
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d103      	bne.n	800dc94 <_printf_common+0xac>
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc94:	3501      	adds	r5, #1
 800dc96:	e7c6      	b.n	800dc26 <_printf_common+0x3e>
 800dc98:	18e1      	adds	r1, r4, r3
 800dc9a:	1c5a      	adds	r2, r3, #1
 800dc9c:	2030      	movs	r0, #48	@ 0x30
 800dc9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dca2:	4422      	add	r2, r4
 800dca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dcac:	3302      	adds	r3, #2
 800dcae:	e7c7      	b.n	800dc40 <_printf_common+0x58>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	4622      	mov	r2, r4
 800dcb4:	4641      	mov	r1, r8
 800dcb6:	4638      	mov	r0, r7
 800dcb8:	47c8      	blx	r9
 800dcba:	3001      	adds	r0, #1
 800dcbc:	d0e6      	beq.n	800dc8c <_printf_common+0xa4>
 800dcbe:	3601      	adds	r6, #1
 800dcc0:	e7d9      	b.n	800dc76 <_printf_common+0x8e>
	...

0800dcc4 <_printf_i>:
 800dcc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc8:	7e0f      	ldrb	r7, [r1, #24]
 800dcca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dccc:	2f78      	cmp	r7, #120	@ 0x78
 800dcce:	4691      	mov	r9, r2
 800dcd0:	4680      	mov	r8, r0
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	469a      	mov	sl, r3
 800dcd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcda:	d807      	bhi.n	800dcec <_printf_i+0x28>
 800dcdc:	2f62      	cmp	r7, #98	@ 0x62
 800dcde:	d80a      	bhi.n	800dcf6 <_printf_i+0x32>
 800dce0:	2f00      	cmp	r7, #0
 800dce2:	f000 80d1 	beq.w	800de88 <_printf_i+0x1c4>
 800dce6:	2f58      	cmp	r7, #88	@ 0x58
 800dce8:	f000 80b8 	beq.w	800de5c <_printf_i+0x198>
 800dcec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dcf4:	e03a      	b.n	800dd6c <_printf_i+0xa8>
 800dcf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcfa:	2b15      	cmp	r3, #21
 800dcfc:	d8f6      	bhi.n	800dcec <_printf_i+0x28>
 800dcfe:	a101      	add	r1, pc, #4	@ (adr r1, 800dd04 <_printf_i+0x40>)
 800dd00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd04:	0800dd5d 	.word	0x0800dd5d
 800dd08:	0800dd71 	.word	0x0800dd71
 800dd0c:	0800dced 	.word	0x0800dced
 800dd10:	0800dced 	.word	0x0800dced
 800dd14:	0800dced 	.word	0x0800dced
 800dd18:	0800dced 	.word	0x0800dced
 800dd1c:	0800dd71 	.word	0x0800dd71
 800dd20:	0800dced 	.word	0x0800dced
 800dd24:	0800dced 	.word	0x0800dced
 800dd28:	0800dced 	.word	0x0800dced
 800dd2c:	0800dced 	.word	0x0800dced
 800dd30:	0800de6f 	.word	0x0800de6f
 800dd34:	0800dd9b 	.word	0x0800dd9b
 800dd38:	0800de29 	.word	0x0800de29
 800dd3c:	0800dced 	.word	0x0800dced
 800dd40:	0800dced 	.word	0x0800dced
 800dd44:	0800de91 	.word	0x0800de91
 800dd48:	0800dced 	.word	0x0800dced
 800dd4c:	0800dd9b 	.word	0x0800dd9b
 800dd50:	0800dced 	.word	0x0800dced
 800dd54:	0800dced 	.word	0x0800dced
 800dd58:	0800de31 	.word	0x0800de31
 800dd5c:	6833      	ldr	r3, [r6, #0]
 800dd5e:	1d1a      	adds	r2, r3, #4
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6032      	str	r2, [r6, #0]
 800dd64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e09c      	b.n	800deaa <_printf_i+0x1e6>
 800dd70:	6833      	ldr	r3, [r6, #0]
 800dd72:	6820      	ldr	r0, [r4, #0]
 800dd74:	1d19      	adds	r1, r3, #4
 800dd76:	6031      	str	r1, [r6, #0]
 800dd78:	0606      	lsls	r6, r0, #24
 800dd7a:	d501      	bpl.n	800dd80 <_printf_i+0xbc>
 800dd7c:	681d      	ldr	r5, [r3, #0]
 800dd7e:	e003      	b.n	800dd88 <_printf_i+0xc4>
 800dd80:	0645      	lsls	r5, r0, #25
 800dd82:	d5fb      	bpl.n	800dd7c <_printf_i+0xb8>
 800dd84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	da03      	bge.n	800dd94 <_printf_i+0xd0>
 800dd8c:	232d      	movs	r3, #45	@ 0x2d
 800dd8e:	426d      	negs	r5, r5
 800dd90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd94:	4858      	ldr	r0, [pc, #352]	@ (800def8 <_printf_i+0x234>)
 800dd96:	230a      	movs	r3, #10
 800dd98:	e011      	b.n	800ddbe <_printf_i+0xfa>
 800dd9a:	6821      	ldr	r1, [r4, #0]
 800dd9c:	6833      	ldr	r3, [r6, #0]
 800dd9e:	0608      	lsls	r0, r1, #24
 800dda0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dda4:	d402      	bmi.n	800ddac <_printf_i+0xe8>
 800dda6:	0649      	lsls	r1, r1, #25
 800dda8:	bf48      	it	mi
 800ddaa:	b2ad      	uxthmi	r5, r5
 800ddac:	2f6f      	cmp	r7, #111	@ 0x6f
 800ddae:	4852      	ldr	r0, [pc, #328]	@ (800def8 <_printf_i+0x234>)
 800ddb0:	6033      	str	r3, [r6, #0]
 800ddb2:	bf14      	ite	ne
 800ddb4:	230a      	movne	r3, #10
 800ddb6:	2308      	moveq	r3, #8
 800ddb8:	2100      	movs	r1, #0
 800ddba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ddbe:	6866      	ldr	r6, [r4, #4]
 800ddc0:	60a6      	str	r6, [r4, #8]
 800ddc2:	2e00      	cmp	r6, #0
 800ddc4:	db05      	blt.n	800ddd2 <_printf_i+0x10e>
 800ddc6:	6821      	ldr	r1, [r4, #0]
 800ddc8:	432e      	orrs	r6, r5
 800ddca:	f021 0104 	bic.w	r1, r1, #4
 800ddce:	6021      	str	r1, [r4, #0]
 800ddd0:	d04b      	beq.n	800de6a <_printf_i+0x1a6>
 800ddd2:	4616      	mov	r6, r2
 800ddd4:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddd8:	fb03 5711 	mls	r7, r3, r1, r5
 800dddc:	5dc7      	ldrb	r7, [r0, r7]
 800ddde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dde2:	462f      	mov	r7, r5
 800dde4:	42bb      	cmp	r3, r7
 800dde6:	460d      	mov	r5, r1
 800dde8:	d9f4      	bls.n	800ddd4 <_printf_i+0x110>
 800ddea:	2b08      	cmp	r3, #8
 800ddec:	d10b      	bne.n	800de06 <_printf_i+0x142>
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	07df      	lsls	r7, r3, #31
 800ddf2:	d508      	bpl.n	800de06 <_printf_i+0x142>
 800ddf4:	6923      	ldr	r3, [r4, #16]
 800ddf6:	6861      	ldr	r1, [r4, #4]
 800ddf8:	4299      	cmp	r1, r3
 800ddfa:	bfde      	ittt	le
 800ddfc:	2330      	movle	r3, #48	@ 0x30
 800ddfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de02:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de06:	1b92      	subs	r2, r2, r6
 800de08:	6122      	str	r2, [r4, #16]
 800de0a:	f8cd a000 	str.w	sl, [sp]
 800de0e:	464b      	mov	r3, r9
 800de10:	aa03      	add	r2, sp, #12
 800de12:	4621      	mov	r1, r4
 800de14:	4640      	mov	r0, r8
 800de16:	f7ff fee7 	bl	800dbe8 <_printf_common>
 800de1a:	3001      	adds	r0, #1
 800de1c:	d14a      	bne.n	800deb4 <_printf_i+0x1f0>
 800de1e:	f04f 30ff 	mov.w	r0, #4294967295
 800de22:	b004      	add	sp, #16
 800de24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de28:	6823      	ldr	r3, [r4, #0]
 800de2a:	f043 0320 	orr.w	r3, r3, #32
 800de2e:	6023      	str	r3, [r4, #0]
 800de30:	4832      	ldr	r0, [pc, #200]	@ (800defc <_printf_i+0x238>)
 800de32:	2778      	movs	r7, #120	@ 0x78
 800de34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	6831      	ldr	r1, [r6, #0]
 800de3c:	061f      	lsls	r7, r3, #24
 800de3e:	f851 5b04 	ldr.w	r5, [r1], #4
 800de42:	d402      	bmi.n	800de4a <_printf_i+0x186>
 800de44:	065f      	lsls	r7, r3, #25
 800de46:	bf48      	it	mi
 800de48:	b2ad      	uxthmi	r5, r5
 800de4a:	6031      	str	r1, [r6, #0]
 800de4c:	07d9      	lsls	r1, r3, #31
 800de4e:	bf44      	itt	mi
 800de50:	f043 0320 	orrmi.w	r3, r3, #32
 800de54:	6023      	strmi	r3, [r4, #0]
 800de56:	b11d      	cbz	r5, 800de60 <_printf_i+0x19c>
 800de58:	2310      	movs	r3, #16
 800de5a:	e7ad      	b.n	800ddb8 <_printf_i+0xf4>
 800de5c:	4826      	ldr	r0, [pc, #152]	@ (800def8 <_printf_i+0x234>)
 800de5e:	e7e9      	b.n	800de34 <_printf_i+0x170>
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	f023 0320 	bic.w	r3, r3, #32
 800de66:	6023      	str	r3, [r4, #0]
 800de68:	e7f6      	b.n	800de58 <_printf_i+0x194>
 800de6a:	4616      	mov	r6, r2
 800de6c:	e7bd      	b.n	800ddea <_printf_i+0x126>
 800de6e:	6833      	ldr	r3, [r6, #0]
 800de70:	6825      	ldr	r5, [r4, #0]
 800de72:	6961      	ldr	r1, [r4, #20]
 800de74:	1d18      	adds	r0, r3, #4
 800de76:	6030      	str	r0, [r6, #0]
 800de78:	062e      	lsls	r6, r5, #24
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	d501      	bpl.n	800de82 <_printf_i+0x1be>
 800de7e:	6019      	str	r1, [r3, #0]
 800de80:	e002      	b.n	800de88 <_printf_i+0x1c4>
 800de82:	0668      	lsls	r0, r5, #25
 800de84:	d5fb      	bpl.n	800de7e <_printf_i+0x1ba>
 800de86:	8019      	strh	r1, [r3, #0]
 800de88:	2300      	movs	r3, #0
 800de8a:	6123      	str	r3, [r4, #16]
 800de8c:	4616      	mov	r6, r2
 800de8e:	e7bc      	b.n	800de0a <_printf_i+0x146>
 800de90:	6833      	ldr	r3, [r6, #0]
 800de92:	1d1a      	adds	r2, r3, #4
 800de94:	6032      	str	r2, [r6, #0]
 800de96:	681e      	ldr	r6, [r3, #0]
 800de98:	6862      	ldr	r2, [r4, #4]
 800de9a:	2100      	movs	r1, #0
 800de9c:	4630      	mov	r0, r6
 800de9e:	f7f2 f99f 	bl	80001e0 <memchr>
 800dea2:	b108      	cbz	r0, 800dea8 <_printf_i+0x1e4>
 800dea4:	1b80      	subs	r0, r0, r6
 800dea6:	6060      	str	r0, [r4, #4]
 800dea8:	6863      	ldr	r3, [r4, #4]
 800deaa:	6123      	str	r3, [r4, #16]
 800deac:	2300      	movs	r3, #0
 800deae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800deb2:	e7aa      	b.n	800de0a <_printf_i+0x146>
 800deb4:	6923      	ldr	r3, [r4, #16]
 800deb6:	4632      	mov	r2, r6
 800deb8:	4649      	mov	r1, r9
 800deba:	4640      	mov	r0, r8
 800debc:	47d0      	blx	sl
 800debe:	3001      	adds	r0, #1
 800dec0:	d0ad      	beq.n	800de1e <_printf_i+0x15a>
 800dec2:	6823      	ldr	r3, [r4, #0]
 800dec4:	079b      	lsls	r3, r3, #30
 800dec6:	d413      	bmi.n	800def0 <_printf_i+0x22c>
 800dec8:	68e0      	ldr	r0, [r4, #12]
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	4298      	cmp	r0, r3
 800dece:	bfb8      	it	lt
 800ded0:	4618      	movlt	r0, r3
 800ded2:	e7a6      	b.n	800de22 <_printf_i+0x15e>
 800ded4:	2301      	movs	r3, #1
 800ded6:	4632      	mov	r2, r6
 800ded8:	4649      	mov	r1, r9
 800deda:	4640      	mov	r0, r8
 800dedc:	47d0      	blx	sl
 800dede:	3001      	adds	r0, #1
 800dee0:	d09d      	beq.n	800de1e <_printf_i+0x15a>
 800dee2:	3501      	adds	r5, #1
 800dee4:	68e3      	ldr	r3, [r4, #12]
 800dee6:	9903      	ldr	r1, [sp, #12]
 800dee8:	1a5b      	subs	r3, r3, r1
 800deea:	42ab      	cmp	r3, r5
 800deec:	dcf2      	bgt.n	800ded4 <_printf_i+0x210>
 800deee:	e7eb      	b.n	800dec8 <_printf_i+0x204>
 800def0:	2500      	movs	r5, #0
 800def2:	f104 0619 	add.w	r6, r4, #25
 800def6:	e7f5      	b.n	800dee4 <_printf_i+0x220>
 800def8:	0800fb99 	.word	0x0800fb99
 800defc:	0800fbaa 	.word	0x0800fbaa

0800df00 <_scanf_chars>:
 800df00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df04:	4615      	mov	r5, r2
 800df06:	688a      	ldr	r2, [r1, #8]
 800df08:	4680      	mov	r8, r0
 800df0a:	460c      	mov	r4, r1
 800df0c:	b932      	cbnz	r2, 800df1c <_scanf_chars+0x1c>
 800df0e:	698a      	ldr	r2, [r1, #24]
 800df10:	2a00      	cmp	r2, #0
 800df12:	bf14      	ite	ne
 800df14:	f04f 32ff 	movne.w	r2, #4294967295
 800df18:	2201      	moveq	r2, #1
 800df1a:	608a      	str	r2, [r1, #8]
 800df1c:	6822      	ldr	r2, [r4, #0]
 800df1e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800dfb0 <_scanf_chars+0xb0>
 800df22:	06d1      	lsls	r1, r2, #27
 800df24:	bf5f      	itttt	pl
 800df26:	681a      	ldrpl	r2, [r3, #0]
 800df28:	1d11      	addpl	r1, r2, #4
 800df2a:	6019      	strpl	r1, [r3, #0]
 800df2c:	6816      	ldrpl	r6, [r2, #0]
 800df2e:	2700      	movs	r7, #0
 800df30:	69a0      	ldr	r0, [r4, #24]
 800df32:	b188      	cbz	r0, 800df58 <_scanf_chars+0x58>
 800df34:	2801      	cmp	r0, #1
 800df36:	d107      	bne.n	800df48 <_scanf_chars+0x48>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	6963      	ldr	r3, [r4, #20]
 800df3e:	5c9b      	ldrb	r3, [r3, r2]
 800df40:	b953      	cbnz	r3, 800df58 <_scanf_chars+0x58>
 800df42:	2f00      	cmp	r7, #0
 800df44:	d031      	beq.n	800dfaa <_scanf_chars+0xaa>
 800df46:	e022      	b.n	800df8e <_scanf_chars+0x8e>
 800df48:	2802      	cmp	r0, #2
 800df4a:	d120      	bne.n	800df8e <_scanf_chars+0x8e>
 800df4c:	682b      	ldr	r3, [r5, #0]
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	f819 3003 	ldrb.w	r3, [r9, r3]
 800df54:	071b      	lsls	r3, r3, #28
 800df56:	d41a      	bmi.n	800df8e <_scanf_chars+0x8e>
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	06da      	lsls	r2, r3, #27
 800df5c:	bf5e      	ittt	pl
 800df5e:	682b      	ldrpl	r3, [r5, #0]
 800df60:	781b      	ldrbpl	r3, [r3, #0]
 800df62:	f806 3b01 	strbpl.w	r3, [r6], #1
 800df66:	682a      	ldr	r2, [r5, #0]
 800df68:	686b      	ldr	r3, [r5, #4]
 800df6a:	3201      	adds	r2, #1
 800df6c:	602a      	str	r2, [r5, #0]
 800df6e:	68a2      	ldr	r2, [r4, #8]
 800df70:	3b01      	subs	r3, #1
 800df72:	3a01      	subs	r2, #1
 800df74:	606b      	str	r3, [r5, #4]
 800df76:	3701      	adds	r7, #1
 800df78:	60a2      	str	r2, [r4, #8]
 800df7a:	b142      	cbz	r2, 800df8e <_scanf_chars+0x8e>
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	dcd7      	bgt.n	800df30 <_scanf_chars+0x30>
 800df80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800df84:	4629      	mov	r1, r5
 800df86:	4640      	mov	r0, r8
 800df88:	4798      	blx	r3
 800df8a:	2800      	cmp	r0, #0
 800df8c:	d0d0      	beq.n	800df30 <_scanf_chars+0x30>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	f013 0310 	ands.w	r3, r3, #16
 800df94:	d105      	bne.n	800dfa2 <_scanf_chars+0xa2>
 800df96:	68e2      	ldr	r2, [r4, #12]
 800df98:	3201      	adds	r2, #1
 800df9a:	60e2      	str	r2, [r4, #12]
 800df9c:	69a2      	ldr	r2, [r4, #24]
 800df9e:	b102      	cbz	r2, 800dfa2 <_scanf_chars+0xa2>
 800dfa0:	7033      	strb	r3, [r6, #0]
 800dfa2:	6923      	ldr	r3, [r4, #16]
 800dfa4:	443b      	add	r3, r7
 800dfa6:	6123      	str	r3, [r4, #16]
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfae:	bf00      	nop
 800dfb0:	0800fc69 	.word	0x0800fc69

0800dfb4 <_scanf_i>:
 800dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb8:	4698      	mov	r8, r3
 800dfba:	4b74      	ldr	r3, [pc, #464]	@ (800e18c <_scanf_i+0x1d8>)
 800dfbc:	460c      	mov	r4, r1
 800dfbe:	4682      	mov	sl, r0
 800dfc0:	4616      	mov	r6, r2
 800dfc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfc6:	b087      	sub	sp, #28
 800dfc8:	ab03      	add	r3, sp, #12
 800dfca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dfce:	4b70      	ldr	r3, [pc, #448]	@ (800e190 <_scanf_i+0x1dc>)
 800dfd0:	69a1      	ldr	r1, [r4, #24]
 800dfd2:	4a70      	ldr	r2, [pc, #448]	@ (800e194 <_scanf_i+0x1e0>)
 800dfd4:	2903      	cmp	r1, #3
 800dfd6:	bf08      	it	eq
 800dfd8:	461a      	moveq	r2, r3
 800dfda:	68a3      	ldr	r3, [r4, #8]
 800dfdc:	9201      	str	r2, [sp, #4]
 800dfde:	1e5a      	subs	r2, r3, #1
 800dfe0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dfe4:	bf88      	it	hi
 800dfe6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dfea:	4627      	mov	r7, r4
 800dfec:	bf82      	ittt	hi
 800dfee:	eb03 0905 	addhi.w	r9, r3, r5
 800dff2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dff6:	60a3      	strhi	r3, [r4, #8]
 800dff8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dffc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e000:	bf98      	it	ls
 800e002:	f04f 0900 	movls.w	r9, #0
 800e006:	6023      	str	r3, [r4, #0]
 800e008:	463d      	mov	r5, r7
 800e00a:	f04f 0b00 	mov.w	fp, #0
 800e00e:	6831      	ldr	r1, [r6, #0]
 800e010:	ab03      	add	r3, sp, #12
 800e012:	7809      	ldrb	r1, [r1, #0]
 800e014:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e018:	2202      	movs	r2, #2
 800e01a:	f7f2 f8e1 	bl	80001e0 <memchr>
 800e01e:	b328      	cbz	r0, 800e06c <_scanf_i+0xb8>
 800e020:	f1bb 0f01 	cmp.w	fp, #1
 800e024:	d159      	bne.n	800e0da <_scanf_i+0x126>
 800e026:	6862      	ldr	r2, [r4, #4]
 800e028:	b92a      	cbnz	r2, 800e036 <_scanf_i+0x82>
 800e02a:	6822      	ldr	r2, [r4, #0]
 800e02c:	2108      	movs	r1, #8
 800e02e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e032:	6061      	str	r1, [r4, #4]
 800e034:	6022      	str	r2, [r4, #0]
 800e036:	6822      	ldr	r2, [r4, #0]
 800e038:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e03c:	6022      	str	r2, [r4, #0]
 800e03e:	68a2      	ldr	r2, [r4, #8]
 800e040:	1e51      	subs	r1, r2, #1
 800e042:	60a1      	str	r1, [r4, #8]
 800e044:	b192      	cbz	r2, 800e06c <_scanf_i+0xb8>
 800e046:	6832      	ldr	r2, [r6, #0]
 800e048:	1c51      	adds	r1, r2, #1
 800e04a:	6031      	str	r1, [r6, #0]
 800e04c:	7812      	ldrb	r2, [r2, #0]
 800e04e:	f805 2b01 	strb.w	r2, [r5], #1
 800e052:	6872      	ldr	r2, [r6, #4]
 800e054:	3a01      	subs	r2, #1
 800e056:	2a00      	cmp	r2, #0
 800e058:	6072      	str	r2, [r6, #4]
 800e05a:	dc07      	bgt.n	800e06c <_scanf_i+0xb8>
 800e05c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e060:	4631      	mov	r1, r6
 800e062:	4650      	mov	r0, sl
 800e064:	4790      	blx	r2
 800e066:	2800      	cmp	r0, #0
 800e068:	f040 8085 	bne.w	800e176 <_scanf_i+0x1c2>
 800e06c:	f10b 0b01 	add.w	fp, fp, #1
 800e070:	f1bb 0f03 	cmp.w	fp, #3
 800e074:	d1cb      	bne.n	800e00e <_scanf_i+0x5a>
 800e076:	6863      	ldr	r3, [r4, #4]
 800e078:	b90b      	cbnz	r3, 800e07e <_scanf_i+0xca>
 800e07a:	230a      	movs	r3, #10
 800e07c:	6063      	str	r3, [r4, #4]
 800e07e:	6863      	ldr	r3, [r4, #4]
 800e080:	4945      	ldr	r1, [pc, #276]	@ (800e198 <_scanf_i+0x1e4>)
 800e082:	6960      	ldr	r0, [r4, #20]
 800e084:	1ac9      	subs	r1, r1, r3
 800e086:	f000 f997 	bl	800e3b8 <__sccl>
 800e08a:	f04f 0b00 	mov.w	fp, #0
 800e08e:	68a3      	ldr	r3, [r4, #8]
 800e090:	6822      	ldr	r2, [r4, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d03d      	beq.n	800e112 <_scanf_i+0x15e>
 800e096:	6831      	ldr	r1, [r6, #0]
 800e098:	6960      	ldr	r0, [r4, #20]
 800e09a:	f891 c000 	ldrb.w	ip, [r1]
 800e09e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	d035      	beq.n	800e112 <_scanf_i+0x15e>
 800e0a6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e0aa:	d124      	bne.n	800e0f6 <_scanf_i+0x142>
 800e0ac:	0510      	lsls	r0, r2, #20
 800e0ae:	d522      	bpl.n	800e0f6 <_scanf_i+0x142>
 800e0b0:	f10b 0b01 	add.w	fp, fp, #1
 800e0b4:	f1b9 0f00 	cmp.w	r9, #0
 800e0b8:	d003      	beq.n	800e0c2 <_scanf_i+0x10e>
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	f109 39ff 	add.w	r9, r9, #4294967295
 800e0c0:	60a3      	str	r3, [r4, #8]
 800e0c2:	6873      	ldr	r3, [r6, #4]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	6073      	str	r3, [r6, #4]
 800e0ca:	dd1b      	ble.n	800e104 <_scanf_i+0x150>
 800e0cc:	6833      	ldr	r3, [r6, #0]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	6033      	str	r3, [r6, #0]
 800e0d2:	68a3      	ldr	r3, [r4, #8]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	60a3      	str	r3, [r4, #8]
 800e0d8:	e7d9      	b.n	800e08e <_scanf_i+0xda>
 800e0da:	f1bb 0f02 	cmp.w	fp, #2
 800e0de:	d1ae      	bne.n	800e03e <_scanf_i+0x8a>
 800e0e0:	6822      	ldr	r2, [r4, #0]
 800e0e2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e0e6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e0ea:	d1c4      	bne.n	800e076 <_scanf_i+0xc2>
 800e0ec:	2110      	movs	r1, #16
 800e0ee:	6061      	str	r1, [r4, #4]
 800e0f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e0f4:	e7a2      	b.n	800e03c <_scanf_i+0x88>
 800e0f6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e0fa:	6022      	str	r2, [r4, #0]
 800e0fc:	780b      	ldrb	r3, [r1, #0]
 800e0fe:	f805 3b01 	strb.w	r3, [r5], #1
 800e102:	e7de      	b.n	800e0c2 <_scanf_i+0x10e>
 800e104:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e108:	4631      	mov	r1, r6
 800e10a:	4650      	mov	r0, sl
 800e10c:	4798      	blx	r3
 800e10e:	2800      	cmp	r0, #0
 800e110:	d0df      	beq.n	800e0d2 <_scanf_i+0x11e>
 800e112:	6823      	ldr	r3, [r4, #0]
 800e114:	05d9      	lsls	r1, r3, #23
 800e116:	d50d      	bpl.n	800e134 <_scanf_i+0x180>
 800e118:	42bd      	cmp	r5, r7
 800e11a:	d909      	bls.n	800e130 <_scanf_i+0x17c>
 800e11c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e120:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e124:	4632      	mov	r2, r6
 800e126:	4650      	mov	r0, sl
 800e128:	4798      	blx	r3
 800e12a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e12e:	464d      	mov	r5, r9
 800e130:	42bd      	cmp	r5, r7
 800e132:	d028      	beq.n	800e186 <_scanf_i+0x1d2>
 800e134:	6822      	ldr	r2, [r4, #0]
 800e136:	f012 0210 	ands.w	r2, r2, #16
 800e13a:	d113      	bne.n	800e164 <_scanf_i+0x1b0>
 800e13c:	702a      	strb	r2, [r5, #0]
 800e13e:	6863      	ldr	r3, [r4, #4]
 800e140:	9e01      	ldr	r6, [sp, #4]
 800e142:	4639      	mov	r1, r7
 800e144:	4650      	mov	r0, sl
 800e146:	47b0      	blx	r6
 800e148:	f8d8 3000 	ldr.w	r3, [r8]
 800e14c:	6821      	ldr	r1, [r4, #0]
 800e14e:	1d1a      	adds	r2, r3, #4
 800e150:	f8c8 2000 	str.w	r2, [r8]
 800e154:	f011 0f20 	tst.w	r1, #32
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	d00f      	beq.n	800e17c <_scanf_i+0x1c8>
 800e15c:	6018      	str	r0, [r3, #0]
 800e15e:	68e3      	ldr	r3, [r4, #12]
 800e160:	3301      	adds	r3, #1
 800e162:	60e3      	str	r3, [r4, #12]
 800e164:	6923      	ldr	r3, [r4, #16]
 800e166:	1bed      	subs	r5, r5, r7
 800e168:	445d      	add	r5, fp
 800e16a:	442b      	add	r3, r5
 800e16c:	6123      	str	r3, [r4, #16]
 800e16e:	2000      	movs	r0, #0
 800e170:	b007      	add	sp, #28
 800e172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e176:	f04f 0b00 	mov.w	fp, #0
 800e17a:	e7ca      	b.n	800e112 <_scanf_i+0x15e>
 800e17c:	07ca      	lsls	r2, r1, #31
 800e17e:	bf4c      	ite	mi
 800e180:	8018      	strhmi	r0, [r3, #0]
 800e182:	6018      	strpl	r0, [r3, #0]
 800e184:	e7eb      	b.n	800e15e <_scanf_i+0x1aa>
 800e186:	2001      	movs	r0, #1
 800e188:	e7f2      	b.n	800e170 <_scanf_i+0x1bc>
 800e18a:	bf00      	nop
 800e18c:	0800fa60 	.word	0x0800fa60
 800e190:	0800b7e9 	.word	0x0800b7e9
 800e194:	0800e659 	.word	0x0800e659
 800e198:	0800fbcb 	.word	0x0800fbcb

0800e19c <__sflush_r>:
 800e19c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a4:	0716      	lsls	r6, r2, #28
 800e1a6:	4605      	mov	r5, r0
 800e1a8:	460c      	mov	r4, r1
 800e1aa:	d454      	bmi.n	800e256 <__sflush_r+0xba>
 800e1ac:	684b      	ldr	r3, [r1, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	dc02      	bgt.n	800e1b8 <__sflush_r+0x1c>
 800e1b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	dd48      	ble.n	800e24a <__sflush_r+0xae>
 800e1b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e1ba:	2e00      	cmp	r6, #0
 800e1bc:	d045      	beq.n	800e24a <__sflush_r+0xae>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e1c4:	682f      	ldr	r7, [r5, #0]
 800e1c6:	6a21      	ldr	r1, [r4, #32]
 800e1c8:	602b      	str	r3, [r5, #0]
 800e1ca:	d030      	beq.n	800e22e <__sflush_r+0x92>
 800e1cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e1ce:	89a3      	ldrh	r3, [r4, #12]
 800e1d0:	0759      	lsls	r1, r3, #29
 800e1d2:	d505      	bpl.n	800e1e0 <__sflush_r+0x44>
 800e1d4:	6863      	ldr	r3, [r4, #4]
 800e1d6:	1ad2      	subs	r2, r2, r3
 800e1d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e1da:	b10b      	cbz	r3, 800e1e0 <__sflush_r+0x44>
 800e1dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e1de:	1ad2      	subs	r2, r2, r3
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e1e4:	6a21      	ldr	r1, [r4, #32]
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	47b0      	blx	r6
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	89a3      	ldrh	r3, [r4, #12]
 800e1ee:	d106      	bne.n	800e1fe <__sflush_r+0x62>
 800e1f0:	6829      	ldr	r1, [r5, #0]
 800e1f2:	291d      	cmp	r1, #29
 800e1f4:	d82b      	bhi.n	800e24e <__sflush_r+0xb2>
 800e1f6:	4a2a      	ldr	r2, [pc, #168]	@ (800e2a0 <__sflush_r+0x104>)
 800e1f8:	40ca      	lsrs	r2, r1
 800e1fa:	07d6      	lsls	r6, r2, #31
 800e1fc:	d527      	bpl.n	800e24e <__sflush_r+0xb2>
 800e1fe:	2200      	movs	r2, #0
 800e200:	6062      	str	r2, [r4, #4]
 800e202:	04d9      	lsls	r1, r3, #19
 800e204:	6922      	ldr	r2, [r4, #16]
 800e206:	6022      	str	r2, [r4, #0]
 800e208:	d504      	bpl.n	800e214 <__sflush_r+0x78>
 800e20a:	1c42      	adds	r2, r0, #1
 800e20c:	d101      	bne.n	800e212 <__sflush_r+0x76>
 800e20e:	682b      	ldr	r3, [r5, #0]
 800e210:	b903      	cbnz	r3, 800e214 <__sflush_r+0x78>
 800e212:	6560      	str	r0, [r4, #84]	@ 0x54
 800e214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e216:	602f      	str	r7, [r5, #0]
 800e218:	b1b9      	cbz	r1, 800e24a <__sflush_r+0xae>
 800e21a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e21e:	4299      	cmp	r1, r3
 800e220:	d002      	beq.n	800e228 <__sflush_r+0x8c>
 800e222:	4628      	mov	r0, r5
 800e224:	f7fe f822 	bl	800c26c <_free_r>
 800e228:	2300      	movs	r3, #0
 800e22a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e22c:	e00d      	b.n	800e24a <__sflush_r+0xae>
 800e22e:	2301      	movs	r3, #1
 800e230:	4628      	mov	r0, r5
 800e232:	47b0      	blx	r6
 800e234:	4602      	mov	r2, r0
 800e236:	1c50      	adds	r0, r2, #1
 800e238:	d1c9      	bne.n	800e1ce <__sflush_r+0x32>
 800e23a:	682b      	ldr	r3, [r5, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d0c6      	beq.n	800e1ce <__sflush_r+0x32>
 800e240:	2b1d      	cmp	r3, #29
 800e242:	d001      	beq.n	800e248 <__sflush_r+0xac>
 800e244:	2b16      	cmp	r3, #22
 800e246:	d11e      	bne.n	800e286 <__sflush_r+0xea>
 800e248:	602f      	str	r7, [r5, #0]
 800e24a:	2000      	movs	r0, #0
 800e24c:	e022      	b.n	800e294 <__sflush_r+0xf8>
 800e24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e252:	b21b      	sxth	r3, r3
 800e254:	e01b      	b.n	800e28e <__sflush_r+0xf2>
 800e256:	690f      	ldr	r7, [r1, #16]
 800e258:	2f00      	cmp	r7, #0
 800e25a:	d0f6      	beq.n	800e24a <__sflush_r+0xae>
 800e25c:	0793      	lsls	r3, r2, #30
 800e25e:	680e      	ldr	r6, [r1, #0]
 800e260:	bf08      	it	eq
 800e262:	694b      	ldreq	r3, [r1, #20]
 800e264:	600f      	str	r7, [r1, #0]
 800e266:	bf18      	it	ne
 800e268:	2300      	movne	r3, #0
 800e26a:	eba6 0807 	sub.w	r8, r6, r7
 800e26e:	608b      	str	r3, [r1, #8]
 800e270:	f1b8 0f00 	cmp.w	r8, #0
 800e274:	dde9      	ble.n	800e24a <__sflush_r+0xae>
 800e276:	6a21      	ldr	r1, [r4, #32]
 800e278:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e27a:	4643      	mov	r3, r8
 800e27c:	463a      	mov	r2, r7
 800e27e:	4628      	mov	r0, r5
 800e280:	47b0      	blx	r6
 800e282:	2800      	cmp	r0, #0
 800e284:	dc08      	bgt.n	800e298 <__sflush_r+0xfc>
 800e286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e28e:	81a3      	strh	r3, [r4, #12]
 800e290:	f04f 30ff 	mov.w	r0, #4294967295
 800e294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e298:	4407      	add	r7, r0
 800e29a:	eba8 0800 	sub.w	r8, r8, r0
 800e29e:	e7e7      	b.n	800e270 <__sflush_r+0xd4>
 800e2a0:	20400001 	.word	0x20400001

0800e2a4 <_fflush_r>:
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	690b      	ldr	r3, [r1, #16]
 800e2a8:	4605      	mov	r5, r0
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	b913      	cbnz	r3, 800e2b4 <_fflush_r+0x10>
 800e2ae:	2500      	movs	r5, #0
 800e2b0:	4628      	mov	r0, r5
 800e2b2:	bd38      	pop	{r3, r4, r5, pc}
 800e2b4:	b118      	cbz	r0, 800e2be <_fflush_r+0x1a>
 800e2b6:	6a03      	ldr	r3, [r0, #32]
 800e2b8:	b90b      	cbnz	r3, 800e2be <_fflush_r+0x1a>
 800e2ba:	f7fd fd3b 	bl	800bd34 <__sinit>
 800e2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d0f3      	beq.n	800e2ae <_fflush_r+0xa>
 800e2c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e2c8:	07d0      	lsls	r0, r2, #31
 800e2ca:	d404      	bmi.n	800e2d6 <_fflush_r+0x32>
 800e2cc:	0599      	lsls	r1, r3, #22
 800e2ce:	d402      	bmi.n	800e2d6 <_fflush_r+0x32>
 800e2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e2d2:	f7fd ffac 	bl	800c22e <__retarget_lock_acquire_recursive>
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	4621      	mov	r1, r4
 800e2da:	f7ff ff5f 	bl	800e19c <__sflush_r>
 800e2de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e2e0:	07da      	lsls	r2, r3, #31
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	d4e4      	bmi.n	800e2b0 <_fflush_r+0xc>
 800e2e6:	89a3      	ldrh	r3, [r4, #12]
 800e2e8:	059b      	lsls	r3, r3, #22
 800e2ea:	d4e1      	bmi.n	800e2b0 <_fflush_r+0xc>
 800e2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e2ee:	f7fd ff9f 	bl	800c230 <__retarget_lock_release_recursive>
 800e2f2:	e7dd      	b.n	800e2b0 <_fflush_r+0xc>

0800e2f4 <__swhatbuf_r>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fc:	2900      	cmp	r1, #0
 800e2fe:	b096      	sub	sp, #88	@ 0x58
 800e300:	4615      	mov	r5, r2
 800e302:	461e      	mov	r6, r3
 800e304:	da0d      	bge.n	800e322 <__swhatbuf_r+0x2e>
 800e306:	89a3      	ldrh	r3, [r4, #12]
 800e308:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e30c:	f04f 0100 	mov.w	r1, #0
 800e310:	bf14      	ite	ne
 800e312:	2340      	movne	r3, #64	@ 0x40
 800e314:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e318:	2000      	movs	r0, #0
 800e31a:	6031      	str	r1, [r6, #0]
 800e31c:	602b      	str	r3, [r5, #0]
 800e31e:	b016      	add	sp, #88	@ 0x58
 800e320:	bd70      	pop	{r4, r5, r6, pc}
 800e322:	466a      	mov	r2, sp
 800e324:	f000 f8d6 	bl	800e4d4 <_fstat_r>
 800e328:	2800      	cmp	r0, #0
 800e32a:	dbec      	blt.n	800e306 <__swhatbuf_r+0x12>
 800e32c:	9901      	ldr	r1, [sp, #4]
 800e32e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e332:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e336:	4259      	negs	r1, r3
 800e338:	4159      	adcs	r1, r3
 800e33a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e33e:	e7eb      	b.n	800e318 <__swhatbuf_r+0x24>

0800e340 <__smakebuf_r>:
 800e340:	898b      	ldrh	r3, [r1, #12]
 800e342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e344:	079d      	lsls	r5, r3, #30
 800e346:	4606      	mov	r6, r0
 800e348:	460c      	mov	r4, r1
 800e34a:	d507      	bpl.n	800e35c <__smakebuf_r+0x1c>
 800e34c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e350:	6023      	str	r3, [r4, #0]
 800e352:	6123      	str	r3, [r4, #16]
 800e354:	2301      	movs	r3, #1
 800e356:	6163      	str	r3, [r4, #20]
 800e358:	b003      	add	sp, #12
 800e35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e35c:	ab01      	add	r3, sp, #4
 800e35e:	466a      	mov	r2, sp
 800e360:	f7ff ffc8 	bl	800e2f4 <__swhatbuf_r>
 800e364:	9f00      	ldr	r7, [sp, #0]
 800e366:	4605      	mov	r5, r0
 800e368:	4639      	mov	r1, r7
 800e36a:	4630      	mov	r0, r6
 800e36c:	f7fc fafe 	bl	800a96c <_malloc_r>
 800e370:	b948      	cbnz	r0, 800e386 <__smakebuf_r+0x46>
 800e372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e376:	059a      	lsls	r2, r3, #22
 800e378:	d4ee      	bmi.n	800e358 <__smakebuf_r+0x18>
 800e37a:	f023 0303 	bic.w	r3, r3, #3
 800e37e:	f043 0302 	orr.w	r3, r3, #2
 800e382:	81a3      	strh	r3, [r4, #12]
 800e384:	e7e2      	b.n	800e34c <__smakebuf_r+0xc>
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	6020      	str	r0, [r4, #0]
 800e38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e38e:	81a3      	strh	r3, [r4, #12]
 800e390:	9b01      	ldr	r3, [sp, #4]
 800e392:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e396:	b15b      	cbz	r3, 800e3b0 <__smakebuf_r+0x70>
 800e398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e39c:	4630      	mov	r0, r6
 800e39e:	f000 f8ab 	bl	800e4f8 <_isatty_r>
 800e3a2:	b128      	cbz	r0, 800e3b0 <__smakebuf_r+0x70>
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	f023 0303 	bic.w	r3, r3, #3
 800e3aa:	f043 0301 	orr.w	r3, r3, #1
 800e3ae:	81a3      	strh	r3, [r4, #12]
 800e3b0:	89a3      	ldrh	r3, [r4, #12]
 800e3b2:	431d      	orrs	r5, r3
 800e3b4:	81a5      	strh	r5, [r4, #12]
 800e3b6:	e7cf      	b.n	800e358 <__smakebuf_r+0x18>

0800e3b8 <__sccl>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	780b      	ldrb	r3, [r1, #0]
 800e3bc:	4604      	mov	r4, r0
 800e3be:	2b5e      	cmp	r3, #94	@ 0x5e
 800e3c0:	bf0b      	itete	eq
 800e3c2:	784b      	ldrbeq	r3, [r1, #1]
 800e3c4:	1c4a      	addne	r2, r1, #1
 800e3c6:	1c8a      	addeq	r2, r1, #2
 800e3c8:	2100      	movne	r1, #0
 800e3ca:	bf08      	it	eq
 800e3cc:	2101      	moveq	r1, #1
 800e3ce:	3801      	subs	r0, #1
 800e3d0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e3d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e3d8:	42a8      	cmp	r0, r5
 800e3da:	d1fb      	bne.n	800e3d4 <__sccl+0x1c>
 800e3dc:	b90b      	cbnz	r3, 800e3e2 <__sccl+0x2a>
 800e3de:	1e50      	subs	r0, r2, #1
 800e3e0:	bd70      	pop	{r4, r5, r6, pc}
 800e3e2:	f081 0101 	eor.w	r1, r1, #1
 800e3e6:	54e1      	strb	r1, [r4, r3]
 800e3e8:	4610      	mov	r0, r2
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e3f0:	2d2d      	cmp	r5, #45	@ 0x2d
 800e3f2:	d005      	beq.n	800e400 <__sccl+0x48>
 800e3f4:	2d5d      	cmp	r5, #93	@ 0x5d
 800e3f6:	d016      	beq.n	800e426 <__sccl+0x6e>
 800e3f8:	2d00      	cmp	r5, #0
 800e3fa:	d0f1      	beq.n	800e3e0 <__sccl+0x28>
 800e3fc:	462b      	mov	r3, r5
 800e3fe:	e7f2      	b.n	800e3e6 <__sccl+0x2e>
 800e400:	7846      	ldrb	r6, [r0, #1]
 800e402:	2e5d      	cmp	r6, #93	@ 0x5d
 800e404:	d0fa      	beq.n	800e3fc <__sccl+0x44>
 800e406:	42b3      	cmp	r3, r6
 800e408:	dcf8      	bgt.n	800e3fc <__sccl+0x44>
 800e40a:	3002      	adds	r0, #2
 800e40c:	461a      	mov	r2, r3
 800e40e:	3201      	adds	r2, #1
 800e410:	4296      	cmp	r6, r2
 800e412:	54a1      	strb	r1, [r4, r2]
 800e414:	dcfb      	bgt.n	800e40e <__sccl+0x56>
 800e416:	1af2      	subs	r2, r6, r3
 800e418:	3a01      	subs	r2, #1
 800e41a:	1c5d      	adds	r5, r3, #1
 800e41c:	42b3      	cmp	r3, r6
 800e41e:	bfa8      	it	ge
 800e420:	2200      	movge	r2, #0
 800e422:	18ab      	adds	r3, r5, r2
 800e424:	e7e1      	b.n	800e3ea <__sccl+0x32>
 800e426:	4610      	mov	r0, r2
 800e428:	e7da      	b.n	800e3e0 <__sccl+0x28>

0800e42a <__submore>:
 800e42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e42e:	460c      	mov	r4, r1
 800e430:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e432:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e436:	4299      	cmp	r1, r3
 800e438:	d11d      	bne.n	800e476 <__submore+0x4c>
 800e43a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e43e:	f7fc fa95 	bl	800a96c <_malloc_r>
 800e442:	b918      	cbnz	r0, 800e44c <__submore+0x22>
 800e444:	f04f 30ff 	mov.w	r0, #4294967295
 800e448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e44c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e450:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e452:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e456:	6360      	str	r0, [r4, #52]	@ 0x34
 800e458:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e45c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e460:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e464:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e468:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e46c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e470:	6020      	str	r0, [r4, #0]
 800e472:	2000      	movs	r0, #0
 800e474:	e7e8      	b.n	800e448 <__submore+0x1e>
 800e476:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e478:	0077      	lsls	r7, r6, #1
 800e47a:	463a      	mov	r2, r7
 800e47c:	f7fc fb02 	bl	800aa84 <_realloc_r>
 800e480:	4605      	mov	r5, r0
 800e482:	2800      	cmp	r0, #0
 800e484:	d0de      	beq.n	800e444 <__submore+0x1a>
 800e486:	eb00 0806 	add.w	r8, r0, r6
 800e48a:	4601      	mov	r1, r0
 800e48c:	4632      	mov	r2, r6
 800e48e:	4640      	mov	r0, r8
 800e490:	f7fd fecf 	bl	800c232 <memcpy>
 800e494:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e498:	f8c4 8000 	str.w	r8, [r4]
 800e49c:	e7e9      	b.n	800e472 <__submore+0x48>

0800e49e <memmove>:
 800e49e:	4288      	cmp	r0, r1
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	eb01 0402 	add.w	r4, r1, r2
 800e4a6:	d902      	bls.n	800e4ae <memmove+0x10>
 800e4a8:	4284      	cmp	r4, r0
 800e4aa:	4623      	mov	r3, r4
 800e4ac:	d807      	bhi.n	800e4be <memmove+0x20>
 800e4ae:	1e43      	subs	r3, r0, #1
 800e4b0:	42a1      	cmp	r1, r4
 800e4b2:	d008      	beq.n	800e4c6 <memmove+0x28>
 800e4b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4bc:	e7f8      	b.n	800e4b0 <memmove+0x12>
 800e4be:	4402      	add	r2, r0
 800e4c0:	4601      	mov	r1, r0
 800e4c2:	428a      	cmp	r2, r1
 800e4c4:	d100      	bne.n	800e4c8 <memmove+0x2a>
 800e4c6:	bd10      	pop	{r4, pc}
 800e4c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4d0:	e7f7      	b.n	800e4c2 <memmove+0x24>
	...

0800e4d4 <_fstat_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	4d07      	ldr	r5, [pc, #28]	@ (800e4f4 <_fstat_r+0x20>)
 800e4d8:	2300      	movs	r3, #0
 800e4da:	4604      	mov	r4, r0
 800e4dc:	4608      	mov	r0, r1
 800e4de:	4611      	mov	r1, r2
 800e4e0:	602b      	str	r3, [r5, #0]
 800e4e2:	f7f6 ffe7 	bl	80054b4 <_fstat>
 800e4e6:	1c43      	adds	r3, r0, #1
 800e4e8:	d102      	bne.n	800e4f0 <_fstat_r+0x1c>
 800e4ea:	682b      	ldr	r3, [r5, #0]
 800e4ec:	b103      	cbz	r3, 800e4f0 <_fstat_r+0x1c>
 800e4ee:	6023      	str	r3, [r4, #0]
 800e4f0:	bd38      	pop	{r3, r4, r5, pc}
 800e4f2:	bf00      	nop
 800e4f4:	20000c28 	.word	0x20000c28

0800e4f8 <_isatty_r>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	4d06      	ldr	r5, [pc, #24]	@ (800e514 <_isatty_r+0x1c>)
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4604      	mov	r4, r0
 800e500:	4608      	mov	r0, r1
 800e502:	602b      	str	r3, [r5, #0]
 800e504:	f7f6 ffe6 	bl	80054d4 <_isatty>
 800e508:	1c43      	adds	r3, r0, #1
 800e50a:	d102      	bne.n	800e512 <_isatty_r+0x1a>
 800e50c:	682b      	ldr	r3, [r5, #0]
 800e50e:	b103      	cbz	r3, 800e512 <_isatty_r+0x1a>
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	bd38      	pop	{r3, r4, r5, pc}
 800e514:	20000c28 	.word	0x20000c28

0800e518 <__assert_func>:
 800e518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e51a:	4614      	mov	r4, r2
 800e51c:	461a      	mov	r2, r3
 800e51e:	4b09      	ldr	r3, [pc, #36]	@ (800e544 <__assert_func+0x2c>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4605      	mov	r5, r0
 800e524:	68d8      	ldr	r0, [r3, #12]
 800e526:	b14c      	cbz	r4, 800e53c <__assert_func+0x24>
 800e528:	4b07      	ldr	r3, [pc, #28]	@ (800e548 <__assert_func+0x30>)
 800e52a:	9100      	str	r1, [sp, #0]
 800e52c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e530:	4906      	ldr	r1, [pc, #24]	@ (800e54c <__assert_func+0x34>)
 800e532:	462b      	mov	r3, r5
 800e534:	f000 f892 	bl	800e65c <fiprintf>
 800e538:	f000 f8a2 	bl	800e680 <abort>
 800e53c:	4b04      	ldr	r3, [pc, #16]	@ (800e550 <__assert_func+0x38>)
 800e53e:	461c      	mov	r4, r3
 800e540:	e7f3      	b.n	800e52a <__assert_func+0x12>
 800e542:	bf00      	nop
 800e544:	200001fc 	.word	0x200001fc
 800e548:	0800fbd6 	.word	0x0800fbd6
 800e54c:	0800fbe3 	.word	0x0800fbe3
 800e550:	0800fc11 	.word	0x0800fc11

0800e554 <_calloc_r>:
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	fba1 5402 	umull	r5, r4, r1, r2
 800e55a:	b934      	cbnz	r4, 800e56a <_calloc_r+0x16>
 800e55c:	4629      	mov	r1, r5
 800e55e:	f7fc fa05 	bl	800a96c <_malloc_r>
 800e562:	4606      	mov	r6, r0
 800e564:	b928      	cbnz	r0, 800e572 <_calloc_r+0x1e>
 800e566:	4630      	mov	r0, r6
 800e568:	bd70      	pop	{r4, r5, r6, pc}
 800e56a:	220c      	movs	r2, #12
 800e56c:	6002      	str	r2, [r0, #0]
 800e56e:	2600      	movs	r6, #0
 800e570:	e7f9      	b.n	800e566 <_calloc_r+0x12>
 800e572:	462a      	mov	r2, r5
 800e574:	4621      	mov	r1, r4
 800e576:	f7fd fdab 	bl	800c0d0 <memset>
 800e57a:	e7f4      	b.n	800e566 <_calloc_r+0x12>

0800e57c <_strtoul_l.isra.0>:
 800e57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e580:	4e34      	ldr	r6, [pc, #208]	@ (800e654 <_strtoul_l.isra.0+0xd8>)
 800e582:	4686      	mov	lr, r0
 800e584:	460d      	mov	r5, r1
 800e586:	4628      	mov	r0, r5
 800e588:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e58c:	5d37      	ldrb	r7, [r6, r4]
 800e58e:	f017 0708 	ands.w	r7, r7, #8
 800e592:	d1f8      	bne.n	800e586 <_strtoul_l.isra.0+0xa>
 800e594:	2c2d      	cmp	r4, #45	@ 0x2d
 800e596:	d110      	bne.n	800e5ba <_strtoul_l.isra.0+0x3e>
 800e598:	782c      	ldrb	r4, [r5, #0]
 800e59a:	2701      	movs	r7, #1
 800e59c:	1c85      	adds	r5, r0, #2
 800e59e:	f033 0010 	bics.w	r0, r3, #16
 800e5a2:	d115      	bne.n	800e5d0 <_strtoul_l.isra.0+0x54>
 800e5a4:	2c30      	cmp	r4, #48	@ 0x30
 800e5a6:	d10d      	bne.n	800e5c4 <_strtoul_l.isra.0+0x48>
 800e5a8:	7828      	ldrb	r0, [r5, #0]
 800e5aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e5ae:	2858      	cmp	r0, #88	@ 0x58
 800e5b0:	d108      	bne.n	800e5c4 <_strtoul_l.isra.0+0x48>
 800e5b2:	786c      	ldrb	r4, [r5, #1]
 800e5b4:	3502      	adds	r5, #2
 800e5b6:	2310      	movs	r3, #16
 800e5b8:	e00a      	b.n	800e5d0 <_strtoul_l.isra.0+0x54>
 800e5ba:	2c2b      	cmp	r4, #43	@ 0x2b
 800e5bc:	bf04      	itt	eq
 800e5be:	782c      	ldrbeq	r4, [r5, #0]
 800e5c0:	1c85      	addeq	r5, r0, #2
 800e5c2:	e7ec      	b.n	800e59e <_strtoul_l.isra.0+0x22>
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1f6      	bne.n	800e5b6 <_strtoul_l.isra.0+0x3a>
 800e5c8:	2c30      	cmp	r4, #48	@ 0x30
 800e5ca:	bf14      	ite	ne
 800e5cc:	230a      	movne	r3, #10
 800e5ce:	2308      	moveq	r3, #8
 800e5d0:	f04f 38ff 	mov.w	r8, #4294967295
 800e5d4:	2600      	movs	r6, #0
 800e5d6:	fbb8 f8f3 	udiv	r8, r8, r3
 800e5da:	fb03 f908 	mul.w	r9, r3, r8
 800e5de:	ea6f 0909 	mvn.w	r9, r9
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e5e8:	f1bc 0f09 	cmp.w	ip, #9
 800e5ec:	d810      	bhi.n	800e610 <_strtoul_l.isra.0+0x94>
 800e5ee:	4664      	mov	r4, ip
 800e5f0:	42a3      	cmp	r3, r4
 800e5f2:	dd1e      	ble.n	800e632 <_strtoul_l.isra.0+0xb6>
 800e5f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e5f8:	d007      	beq.n	800e60a <_strtoul_l.isra.0+0x8e>
 800e5fa:	4580      	cmp	r8, r0
 800e5fc:	d316      	bcc.n	800e62c <_strtoul_l.isra.0+0xb0>
 800e5fe:	d101      	bne.n	800e604 <_strtoul_l.isra.0+0x88>
 800e600:	45a1      	cmp	r9, r4
 800e602:	db13      	blt.n	800e62c <_strtoul_l.isra.0+0xb0>
 800e604:	fb00 4003 	mla	r0, r0, r3, r4
 800e608:	2601      	movs	r6, #1
 800e60a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e60e:	e7e9      	b.n	800e5e4 <_strtoul_l.isra.0+0x68>
 800e610:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e614:	f1bc 0f19 	cmp.w	ip, #25
 800e618:	d801      	bhi.n	800e61e <_strtoul_l.isra.0+0xa2>
 800e61a:	3c37      	subs	r4, #55	@ 0x37
 800e61c:	e7e8      	b.n	800e5f0 <_strtoul_l.isra.0+0x74>
 800e61e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e622:	f1bc 0f19 	cmp.w	ip, #25
 800e626:	d804      	bhi.n	800e632 <_strtoul_l.isra.0+0xb6>
 800e628:	3c57      	subs	r4, #87	@ 0x57
 800e62a:	e7e1      	b.n	800e5f0 <_strtoul_l.isra.0+0x74>
 800e62c:	f04f 36ff 	mov.w	r6, #4294967295
 800e630:	e7eb      	b.n	800e60a <_strtoul_l.isra.0+0x8e>
 800e632:	1c73      	adds	r3, r6, #1
 800e634:	d106      	bne.n	800e644 <_strtoul_l.isra.0+0xc8>
 800e636:	2322      	movs	r3, #34	@ 0x22
 800e638:	f8ce 3000 	str.w	r3, [lr]
 800e63c:	4630      	mov	r0, r6
 800e63e:	b932      	cbnz	r2, 800e64e <_strtoul_l.isra.0+0xd2>
 800e640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e644:	b107      	cbz	r7, 800e648 <_strtoul_l.isra.0+0xcc>
 800e646:	4240      	negs	r0, r0
 800e648:	2a00      	cmp	r2, #0
 800e64a:	d0f9      	beq.n	800e640 <_strtoul_l.isra.0+0xc4>
 800e64c:	b106      	cbz	r6, 800e650 <_strtoul_l.isra.0+0xd4>
 800e64e:	1e69      	subs	r1, r5, #1
 800e650:	6011      	str	r1, [r2, #0]
 800e652:	e7f5      	b.n	800e640 <_strtoul_l.isra.0+0xc4>
 800e654:	0800fc69 	.word	0x0800fc69

0800e658 <_strtoul_r>:
 800e658:	f7ff bf90 	b.w	800e57c <_strtoul_l.isra.0>

0800e65c <fiprintf>:
 800e65c:	b40e      	push	{r1, r2, r3}
 800e65e:	b503      	push	{r0, r1, lr}
 800e660:	4601      	mov	r1, r0
 800e662:	ab03      	add	r3, sp, #12
 800e664:	4805      	ldr	r0, [pc, #20]	@ (800e67c <fiprintf+0x20>)
 800e666:	f853 2b04 	ldr.w	r2, [r3], #4
 800e66a:	6800      	ldr	r0, [r0, #0]
 800e66c:	9301      	str	r3, [sp, #4]
 800e66e:	f7ff f9a3 	bl	800d9b8 <_vfiprintf_r>
 800e672:	b002      	add	sp, #8
 800e674:	f85d eb04 	ldr.w	lr, [sp], #4
 800e678:	b003      	add	sp, #12
 800e67a:	4770      	bx	lr
 800e67c:	200001fc 	.word	0x200001fc

0800e680 <abort>:
 800e680:	b508      	push	{r3, lr}
 800e682:	2006      	movs	r0, #6
 800e684:	f000 f82c 	bl	800e6e0 <raise>
 800e688:	2001      	movs	r0, #1
 800e68a:	f7f6 fec3 	bl	8005414 <_exit>

0800e68e <_raise_r>:
 800e68e:	291f      	cmp	r1, #31
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4605      	mov	r5, r0
 800e694:	460c      	mov	r4, r1
 800e696:	d904      	bls.n	800e6a2 <_raise_r+0x14>
 800e698:	2316      	movs	r3, #22
 800e69a:	6003      	str	r3, [r0, #0]
 800e69c:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a0:	bd38      	pop	{r3, r4, r5, pc}
 800e6a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6a4:	b112      	cbz	r2, 800e6ac <_raise_r+0x1e>
 800e6a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6aa:	b94b      	cbnz	r3, 800e6c0 <_raise_r+0x32>
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	f000 f831 	bl	800e714 <_getpid_r>
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	4601      	mov	r1, r0
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6bc:	f000 b818 	b.w	800e6f0 <_kill_r>
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d00a      	beq.n	800e6da <_raise_r+0x4c>
 800e6c4:	1c59      	adds	r1, r3, #1
 800e6c6:	d103      	bne.n	800e6d0 <_raise_r+0x42>
 800e6c8:	2316      	movs	r3, #22
 800e6ca:	6003      	str	r3, [r0, #0]
 800e6cc:	2001      	movs	r0, #1
 800e6ce:	e7e7      	b.n	800e6a0 <_raise_r+0x12>
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4798      	blx	r3
 800e6da:	2000      	movs	r0, #0
 800e6dc:	e7e0      	b.n	800e6a0 <_raise_r+0x12>
	...

0800e6e0 <raise>:
 800e6e0:	4b02      	ldr	r3, [pc, #8]	@ (800e6ec <raise+0xc>)
 800e6e2:	4601      	mov	r1, r0
 800e6e4:	6818      	ldr	r0, [r3, #0]
 800e6e6:	f7ff bfd2 	b.w	800e68e <_raise_r>
 800e6ea:	bf00      	nop
 800e6ec:	200001fc 	.word	0x200001fc

0800e6f0 <_kill_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4d07      	ldr	r5, [pc, #28]	@ (800e710 <_kill_r+0x20>)
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	4608      	mov	r0, r1
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	602b      	str	r3, [r5, #0]
 800e6fe:	f7f6 fe79 	bl	80053f4 <_kill>
 800e702:	1c43      	adds	r3, r0, #1
 800e704:	d102      	bne.n	800e70c <_kill_r+0x1c>
 800e706:	682b      	ldr	r3, [r5, #0]
 800e708:	b103      	cbz	r3, 800e70c <_kill_r+0x1c>
 800e70a:	6023      	str	r3, [r4, #0]
 800e70c:	bd38      	pop	{r3, r4, r5, pc}
 800e70e:	bf00      	nop
 800e710:	20000c28 	.word	0x20000c28

0800e714 <_getpid_r>:
 800e714:	f7f6 be66 	b.w	80053e4 <_getpid>

0800e718 <cos>:
 800e718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e71a:	ec53 2b10 	vmov	r2, r3, d0
 800e71e:	4826      	ldr	r0, [pc, #152]	@ (800e7b8 <cos+0xa0>)
 800e720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e724:	4281      	cmp	r1, r0
 800e726:	d806      	bhi.n	800e736 <cos+0x1e>
 800e728:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e7b0 <cos+0x98>
 800e72c:	b005      	add	sp, #20
 800e72e:	f85d eb04 	ldr.w	lr, [sp], #4
 800e732:	f000 b899 	b.w	800e868 <__kernel_cos>
 800e736:	4821      	ldr	r0, [pc, #132]	@ (800e7bc <cos+0xa4>)
 800e738:	4281      	cmp	r1, r0
 800e73a:	d908      	bls.n	800e74e <cos+0x36>
 800e73c:	4610      	mov	r0, r2
 800e73e:	4619      	mov	r1, r3
 800e740:	f7f1 fda2 	bl	8000288 <__aeabi_dsub>
 800e744:	ec41 0b10 	vmov	d0, r0, r1
 800e748:	b005      	add	sp, #20
 800e74a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e74e:	4668      	mov	r0, sp
 800e750:	f000 fa0e 	bl	800eb70 <__ieee754_rem_pio2>
 800e754:	f000 0003 	and.w	r0, r0, #3
 800e758:	2801      	cmp	r0, #1
 800e75a:	d00b      	beq.n	800e774 <cos+0x5c>
 800e75c:	2802      	cmp	r0, #2
 800e75e:	d015      	beq.n	800e78c <cos+0x74>
 800e760:	b9d8      	cbnz	r0, 800e79a <cos+0x82>
 800e762:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e766:	ed9d 0b00 	vldr	d0, [sp]
 800e76a:	f000 f87d 	bl	800e868 <__kernel_cos>
 800e76e:	ec51 0b10 	vmov	r0, r1, d0
 800e772:	e7e7      	b.n	800e744 <cos+0x2c>
 800e774:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e778:	ed9d 0b00 	vldr	d0, [sp]
 800e77c:	f000 f93c 	bl	800e9f8 <__kernel_sin>
 800e780:	ec53 2b10 	vmov	r2, r3, d0
 800e784:	4610      	mov	r0, r2
 800e786:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e78a:	e7db      	b.n	800e744 <cos+0x2c>
 800e78c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e790:	ed9d 0b00 	vldr	d0, [sp]
 800e794:	f000 f868 	bl	800e868 <__kernel_cos>
 800e798:	e7f2      	b.n	800e780 <cos+0x68>
 800e79a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e79e:	ed9d 0b00 	vldr	d0, [sp]
 800e7a2:	2001      	movs	r0, #1
 800e7a4:	f000 f928 	bl	800e9f8 <__kernel_sin>
 800e7a8:	e7e1      	b.n	800e76e <cos+0x56>
 800e7aa:	bf00      	nop
 800e7ac:	f3af 8000 	nop.w
	...
 800e7b8:	3fe921fb 	.word	0x3fe921fb
 800e7bc:	7fefffff 	.word	0x7fefffff

0800e7c0 <sin>:
 800e7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7c2:	ec53 2b10 	vmov	r2, r3, d0
 800e7c6:	4826      	ldr	r0, [pc, #152]	@ (800e860 <sin+0xa0>)
 800e7c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e7cc:	4281      	cmp	r1, r0
 800e7ce:	d807      	bhi.n	800e7e0 <sin+0x20>
 800e7d0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e858 <sin+0x98>
 800e7d4:	2000      	movs	r0, #0
 800e7d6:	b005      	add	sp, #20
 800e7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7dc:	f000 b90c 	b.w	800e9f8 <__kernel_sin>
 800e7e0:	4820      	ldr	r0, [pc, #128]	@ (800e864 <sin+0xa4>)
 800e7e2:	4281      	cmp	r1, r0
 800e7e4:	d908      	bls.n	800e7f8 <sin+0x38>
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	f7f1 fd4d 	bl	8000288 <__aeabi_dsub>
 800e7ee:	ec41 0b10 	vmov	d0, r0, r1
 800e7f2:	b005      	add	sp, #20
 800e7f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7f8:	4668      	mov	r0, sp
 800e7fa:	f000 f9b9 	bl	800eb70 <__ieee754_rem_pio2>
 800e7fe:	f000 0003 	and.w	r0, r0, #3
 800e802:	2801      	cmp	r0, #1
 800e804:	d00c      	beq.n	800e820 <sin+0x60>
 800e806:	2802      	cmp	r0, #2
 800e808:	d011      	beq.n	800e82e <sin+0x6e>
 800e80a:	b9e8      	cbnz	r0, 800e848 <sin+0x88>
 800e80c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e810:	ed9d 0b00 	vldr	d0, [sp]
 800e814:	2001      	movs	r0, #1
 800e816:	f000 f8ef 	bl	800e9f8 <__kernel_sin>
 800e81a:	ec51 0b10 	vmov	r0, r1, d0
 800e81e:	e7e6      	b.n	800e7ee <sin+0x2e>
 800e820:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e824:	ed9d 0b00 	vldr	d0, [sp]
 800e828:	f000 f81e 	bl	800e868 <__kernel_cos>
 800e82c:	e7f5      	b.n	800e81a <sin+0x5a>
 800e82e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e832:	ed9d 0b00 	vldr	d0, [sp]
 800e836:	2001      	movs	r0, #1
 800e838:	f000 f8de 	bl	800e9f8 <__kernel_sin>
 800e83c:	ec53 2b10 	vmov	r2, r3, d0
 800e840:	4610      	mov	r0, r2
 800e842:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e846:	e7d2      	b.n	800e7ee <sin+0x2e>
 800e848:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e84c:	ed9d 0b00 	vldr	d0, [sp]
 800e850:	f000 f80a 	bl	800e868 <__kernel_cos>
 800e854:	e7f2      	b.n	800e83c <sin+0x7c>
 800e856:	bf00      	nop
	...
 800e860:	3fe921fb 	.word	0x3fe921fb
 800e864:	7fefffff 	.word	0x7fefffff

0800e868 <__kernel_cos>:
 800e868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	ec57 6b10 	vmov	r6, r7, d0
 800e870:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e874:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e878:	ed8d 1b00 	vstr	d1, [sp]
 800e87c:	d206      	bcs.n	800e88c <__kernel_cos+0x24>
 800e87e:	4630      	mov	r0, r6
 800e880:	4639      	mov	r1, r7
 800e882:	f7f2 f969 	bl	8000b58 <__aeabi_d2iz>
 800e886:	2800      	cmp	r0, #0
 800e888:	f000 8088 	beq.w	800e99c <__kernel_cos+0x134>
 800e88c:	4632      	mov	r2, r6
 800e88e:	463b      	mov	r3, r7
 800e890:	4630      	mov	r0, r6
 800e892:	4639      	mov	r1, r7
 800e894:	f7f1 feb0 	bl	80005f8 <__aeabi_dmul>
 800e898:	4b51      	ldr	r3, [pc, #324]	@ (800e9e0 <__kernel_cos+0x178>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	4604      	mov	r4, r0
 800e89e:	460d      	mov	r5, r1
 800e8a0:	f7f1 feaa 	bl	80005f8 <__aeabi_dmul>
 800e8a4:	a340      	add	r3, pc, #256	@ (adr r3, 800e9a8 <__kernel_cos+0x140>)
 800e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8aa:	4682      	mov	sl, r0
 800e8ac:	468b      	mov	fp, r1
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	4629      	mov	r1, r5
 800e8b2:	f7f1 fea1 	bl	80005f8 <__aeabi_dmul>
 800e8b6:	a33e      	add	r3, pc, #248	@ (adr r3, 800e9b0 <__kernel_cos+0x148>)
 800e8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8bc:	f7f1 fce6 	bl	800028c <__adddf3>
 800e8c0:	4622      	mov	r2, r4
 800e8c2:	462b      	mov	r3, r5
 800e8c4:	f7f1 fe98 	bl	80005f8 <__aeabi_dmul>
 800e8c8:	a33b      	add	r3, pc, #236	@ (adr r3, 800e9b8 <__kernel_cos+0x150>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	f7f1 fcdb 	bl	8000288 <__aeabi_dsub>
 800e8d2:	4622      	mov	r2, r4
 800e8d4:	462b      	mov	r3, r5
 800e8d6:	f7f1 fe8f 	bl	80005f8 <__aeabi_dmul>
 800e8da:	a339      	add	r3, pc, #228	@ (adr r3, 800e9c0 <__kernel_cos+0x158>)
 800e8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e0:	f7f1 fcd4 	bl	800028c <__adddf3>
 800e8e4:	4622      	mov	r2, r4
 800e8e6:	462b      	mov	r3, r5
 800e8e8:	f7f1 fe86 	bl	80005f8 <__aeabi_dmul>
 800e8ec:	a336      	add	r3, pc, #216	@ (adr r3, 800e9c8 <__kernel_cos+0x160>)
 800e8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f2:	f7f1 fcc9 	bl	8000288 <__aeabi_dsub>
 800e8f6:	4622      	mov	r2, r4
 800e8f8:	462b      	mov	r3, r5
 800e8fa:	f7f1 fe7d 	bl	80005f8 <__aeabi_dmul>
 800e8fe:	a334      	add	r3, pc, #208	@ (adr r3, 800e9d0 <__kernel_cos+0x168>)
 800e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e904:	f7f1 fcc2 	bl	800028c <__adddf3>
 800e908:	4622      	mov	r2, r4
 800e90a:	462b      	mov	r3, r5
 800e90c:	f7f1 fe74 	bl	80005f8 <__aeabi_dmul>
 800e910:	4622      	mov	r2, r4
 800e912:	462b      	mov	r3, r5
 800e914:	f7f1 fe70 	bl	80005f8 <__aeabi_dmul>
 800e918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e91c:	4604      	mov	r4, r0
 800e91e:	460d      	mov	r5, r1
 800e920:	4630      	mov	r0, r6
 800e922:	4639      	mov	r1, r7
 800e924:	f7f1 fe68 	bl	80005f8 <__aeabi_dmul>
 800e928:	460b      	mov	r3, r1
 800e92a:	4602      	mov	r2, r0
 800e92c:	4629      	mov	r1, r5
 800e92e:	4620      	mov	r0, r4
 800e930:	f7f1 fcaa 	bl	8000288 <__aeabi_dsub>
 800e934:	4b2b      	ldr	r3, [pc, #172]	@ (800e9e4 <__kernel_cos+0x17c>)
 800e936:	4598      	cmp	r8, r3
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	d810      	bhi.n	800e960 <__kernel_cos+0xf8>
 800e93e:	4602      	mov	r2, r0
 800e940:	460b      	mov	r3, r1
 800e942:	4650      	mov	r0, sl
 800e944:	4659      	mov	r1, fp
 800e946:	f7f1 fc9f 	bl	8000288 <__aeabi_dsub>
 800e94a:	460b      	mov	r3, r1
 800e94c:	4926      	ldr	r1, [pc, #152]	@ (800e9e8 <__kernel_cos+0x180>)
 800e94e:	4602      	mov	r2, r0
 800e950:	2000      	movs	r0, #0
 800e952:	f7f1 fc99 	bl	8000288 <__aeabi_dsub>
 800e956:	ec41 0b10 	vmov	d0, r0, r1
 800e95a:	b003      	add	sp, #12
 800e95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e960:	4b22      	ldr	r3, [pc, #136]	@ (800e9ec <__kernel_cos+0x184>)
 800e962:	4921      	ldr	r1, [pc, #132]	@ (800e9e8 <__kernel_cos+0x180>)
 800e964:	4598      	cmp	r8, r3
 800e966:	bf8c      	ite	hi
 800e968:	4d21      	ldrhi	r5, [pc, #132]	@ (800e9f0 <__kernel_cos+0x188>)
 800e96a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e96e:	2400      	movs	r4, #0
 800e970:	4622      	mov	r2, r4
 800e972:	462b      	mov	r3, r5
 800e974:	2000      	movs	r0, #0
 800e976:	f7f1 fc87 	bl	8000288 <__aeabi_dsub>
 800e97a:	4622      	mov	r2, r4
 800e97c:	4680      	mov	r8, r0
 800e97e:	4689      	mov	r9, r1
 800e980:	462b      	mov	r3, r5
 800e982:	4650      	mov	r0, sl
 800e984:	4659      	mov	r1, fp
 800e986:	f7f1 fc7f 	bl	8000288 <__aeabi_dsub>
 800e98a:	4632      	mov	r2, r6
 800e98c:	463b      	mov	r3, r7
 800e98e:	f7f1 fc7b 	bl	8000288 <__aeabi_dsub>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	4640      	mov	r0, r8
 800e998:	4649      	mov	r1, r9
 800e99a:	e7da      	b.n	800e952 <__kernel_cos+0xea>
 800e99c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e9d8 <__kernel_cos+0x170>
 800e9a0:	e7db      	b.n	800e95a <__kernel_cos+0xf2>
 800e9a2:	bf00      	nop
 800e9a4:	f3af 8000 	nop.w
 800e9a8:	be8838d4 	.word	0xbe8838d4
 800e9ac:	bda8fae9 	.word	0xbda8fae9
 800e9b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e9b4:	3e21ee9e 	.word	0x3e21ee9e
 800e9b8:	809c52ad 	.word	0x809c52ad
 800e9bc:	3e927e4f 	.word	0x3e927e4f
 800e9c0:	19cb1590 	.word	0x19cb1590
 800e9c4:	3efa01a0 	.word	0x3efa01a0
 800e9c8:	16c15177 	.word	0x16c15177
 800e9cc:	3f56c16c 	.word	0x3f56c16c
 800e9d0:	5555554c 	.word	0x5555554c
 800e9d4:	3fa55555 	.word	0x3fa55555
 800e9d8:	00000000 	.word	0x00000000
 800e9dc:	3ff00000 	.word	0x3ff00000
 800e9e0:	3fe00000 	.word	0x3fe00000
 800e9e4:	3fd33332 	.word	0x3fd33332
 800e9e8:	3ff00000 	.word	0x3ff00000
 800e9ec:	3fe90000 	.word	0x3fe90000
 800e9f0:	3fd20000 	.word	0x3fd20000
 800e9f4:	00000000 	.word	0x00000000

0800e9f8 <__kernel_sin>:
 800e9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fc:	ec55 4b10 	vmov	r4, r5, d0
 800ea00:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ea04:	b085      	sub	sp, #20
 800ea06:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ea0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ea0e:	4680      	mov	r8, r0
 800ea10:	d205      	bcs.n	800ea1e <__kernel_sin+0x26>
 800ea12:	4620      	mov	r0, r4
 800ea14:	4629      	mov	r1, r5
 800ea16:	f7f2 f89f 	bl	8000b58 <__aeabi_d2iz>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d052      	beq.n	800eac4 <__kernel_sin+0xcc>
 800ea1e:	4622      	mov	r2, r4
 800ea20:	462b      	mov	r3, r5
 800ea22:	4620      	mov	r0, r4
 800ea24:	4629      	mov	r1, r5
 800ea26:	f7f1 fde7 	bl	80005f8 <__aeabi_dmul>
 800ea2a:	4682      	mov	sl, r0
 800ea2c:	468b      	mov	fp, r1
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	4620      	mov	r0, r4
 800ea34:	4629      	mov	r1, r5
 800ea36:	f7f1 fddf 	bl	80005f8 <__aeabi_dmul>
 800ea3a:	a342      	add	r3, pc, #264	@ (adr r3, 800eb44 <__kernel_sin+0x14c>)
 800ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea40:	e9cd 0100 	strd	r0, r1, [sp]
 800ea44:	4650      	mov	r0, sl
 800ea46:	4659      	mov	r1, fp
 800ea48:	f7f1 fdd6 	bl	80005f8 <__aeabi_dmul>
 800ea4c:	a33f      	add	r3, pc, #252	@ (adr r3, 800eb4c <__kernel_sin+0x154>)
 800ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea52:	f7f1 fc19 	bl	8000288 <__aeabi_dsub>
 800ea56:	4652      	mov	r2, sl
 800ea58:	465b      	mov	r3, fp
 800ea5a:	f7f1 fdcd 	bl	80005f8 <__aeabi_dmul>
 800ea5e:	a33d      	add	r3, pc, #244	@ (adr r3, 800eb54 <__kernel_sin+0x15c>)
 800ea60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea64:	f7f1 fc12 	bl	800028c <__adddf3>
 800ea68:	4652      	mov	r2, sl
 800ea6a:	465b      	mov	r3, fp
 800ea6c:	f7f1 fdc4 	bl	80005f8 <__aeabi_dmul>
 800ea70:	a33a      	add	r3, pc, #232	@ (adr r3, 800eb5c <__kernel_sin+0x164>)
 800ea72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea76:	f7f1 fc07 	bl	8000288 <__aeabi_dsub>
 800ea7a:	4652      	mov	r2, sl
 800ea7c:	465b      	mov	r3, fp
 800ea7e:	f7f1 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ea82:	a338      	add	r3, pc, #224	@ (adr r3, 800eb64 <__kernel_sin+0x16c>)
 800ea84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea88:	f7f1 fc00 	bl	800028c <__adddf3>
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	460f      	mov	r7, r1
 800ea90:	f1b8 0f00 	cmp.w	r8, #0
 800ea94:	d11b      	bne.n	800eace <__kernel_sin+0xd6>
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	4650      	mov	r0, sl
 800ea9c:	4659      	mov	r1, fp
 800ea9e:	f7f1 fdab 	bl	80005f8 <__aeabi_dmul>
 800eaa2:	a325      	add	r3, pc, #148	@ (adr r3, 800eb38 <__kernel_sin+0x140>)
 800eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa8:	f7f1 fbee 	bl	8000288 <__aeabi_dsub>
 800eaac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eab0:	f7f1 fda2 	bl	80005f8 <__aeabi_dmul>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	4620      	mov	r0, r4
 800eaba:	4629      	mov	r1, r5
 800eabc:	f7f1 fbe6 	bl	800028c <__adddf3>
 800eac0:	4604      	mov	r4, r0
 800eac2:	460d      	mov	r5, r1
 800eac4:	ec45 4b10 	vmov	d0, r4, r5
 800eac8:	b005      	add	sp, #20
 800eaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ead2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb40 <__kernel_sin+0x148>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	f7f1 fd8f 	bl	80005f8 <__aeabi_dmul>
 800eada:	4632      	mov	r2, r6
 800eadc:	4680      	mov	r8, r0
 800eade:	4689      	mov	r9, r1
 800eae0:	463b      	mov	r3, r7
 800eae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eae6:	f7f1 fd87 	bl	80005f8 <__aeabi_dmul>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	4640      	mov	r0, r8
 800eaf0:	4649      	mov	r1, r9
 800eaf2:	f7f1 fbc9 	bl	8000288 <__aeabi_dsub>
 800eaf6:	4652      	mov	r2, sl
 800eaf8:	465b      	mov	r3, fp
 800eafa:	f7f1 fd7d 	bl	80005f8 <__aeabi_dmul>
 800eafe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb02:	f7f1 fbc1 	bl	8000288 <__aeabi_dsub>
 800eb06:	a30c      	add	r3, pc, #48	@ (adr r3, 800eb38 <__kernel_sin+0x140>)
 800eb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	460f      	mov	r7, r1
 800eb10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb14:	f7f1 fd70 	bl	80005f8 <__aeabi_dmul>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	4639      	mov	r1, r7
 800eb20:	f7f1 fbb4 	bl	800028c <__adddf3>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	4620      	mov	r0, r4
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	f7f1 fbac 	bl	8000288 <__aeabi_dsub>
 800eb30:	e7c6      	b.n	800eac0 <__kernel_sin+0xc8>
 800eb32:	bf00      	nop
 800eb34:	f3af 8000 	nop.w
 800eb38:	55555549 	.word	0x55555549
 800eb3c:	3fc55555 	.word	0x3fc55555
 800eb40:	3fe00000 	.word	0x3fe00000
 800eb44:	5acfd57c 	.word	0x5acfd57c
 800eb48:	3de5d93a 	.word	0x3de5d93a
 800eb4c:	8a2b9ceb 	.word	0x8a2b9ceb
 800eb50:	3e5ae5e6 	.word	0x3e5ae5e6
 800eb54:	57b1fe7d 	.word	0x57b1fe7d
 800eb58:	3ec71de3 	.word	0x3ec71de3
 800eb5c:	19c161d5 	.word	0x19c161d5
 800eb60:	3f2a01a0 	.word	0x3f2a01a0
 800eb64:	1110f8a6 	.word	0x1110f8a6
 800eb68:	3f811111 	.word	0x3f811111
 800eb6c:	00000000 	.word	0x00000000

0800eb70 <__ieee754_rem_pio2>:
 800eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb74:	ec57 6b10 	vmov	r6, r7, d0
 800eb78:	4bc5      	ldr	r3, [pc, #788]	@ (800ee90 <__ieee754_rem_pio2+0x320>)
 800eb7a:	b08d      	sub	sp, #52	@ 0x34
 800eb7c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800eb80:	4598      	cmp	r8, r3
 800eb82:	4604      	mov	r4, r0
 800eb84:	9704      	str	r7, [sp, #16]
 800eb86:	d807      	bhi.n	800eb98 <__ieee754_rem_pio2+0x28>
 800eb88:	2200      	movs	r2, #0
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	ed80 0b00 	vstr	d0, [r0]
 800eb90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb94:	2500      	movs	r5, #0
 800eb96:	e028      	b.n	800ebea <__ieee754_rem_pio2+0x7a>
 800eb98:	4bbe      	ldr	r3, [pc, #760]	@ (800ee94 <__ieee754_rem_pio2+0x324>)
 800eb9a:	4598      	cmp	r8, r3
 800eb9c:	d878      	bhi.n	800ec90 <__ieee754_rem_pio2+0x120>
 800eb9e:	9b04      	ldr	r3, [sp, #16]
 800eba0:	4dbd      	ldr	r5, [pc, #756]	@ (800ee98 <__ieee754_rem_pio2+0x328>)
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	4630      	mov	r0, r6
 800eba6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ee58 <__ieee754_rem_pio2+0x2e8>)
 800eba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebac:	4639      	mov	r1, r7
 800ebae:	dd38      	ble.n	800ec22 <__ieee754_rem_pio2+0xb2>
 800ebb0:	f7f1 fb6a 	bl	8000288 <__aeabi_dsub>
 800ebb4:	45a8      	cmp	r8, r5
 800ebb6:	4606      	mov	r6, r0
 800ebb8:	460f      	mov	r7, r1
 800ebba:	d01a      	beq.n	800ebf2 <__ieee754_rem_pio2+0x82>
 800ebbc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x2f0>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fb61 	bl	8000288 <__aeabi_dsub>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	4680      	mov	r8, r0
 800ebcc:	4689      	mov	r9, r1
 800ebce:	4630      	mov	r0, r6
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	f7f1 fb59 	bl	8000288 <__aeabi_dsub>
 800ebd6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x2f0>)
 800ebd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebdc:	f7f1 fb54 	bl	8000288 <__aeabi_dsub>
 800ebe0:	e9c4 8900 	strd	r8, r9, [r4]
 800ebe4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ebe8:	2501      	movs	r5, #1
 800ebea:	4628      	mov	r0, r5
 800ebec:	b00d      	add	sp, #52	@ 0x34
 800ebee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf2:	a39d      	add	r3, pc, #628	@ (adr r3, 800ee68 <__ieee754_rem_pio2+0x2f8>)
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	f7f1 fb46 	bl	8000288 <__aeabi_dsub>
 800ebfc:	a39c      	add	r3, pc, #624	@ (adr r3, 800ee70 <__ieee754_rem_pio2+0x300>)
 800ebfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec02:	4606      	mov	r6, r0
 800ec04:	460f      	mov	r7, r1
 800ec06:	f7f1 fb3f 	bl	8000288 <__aeabi_dsub>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	4680      	mov	r8, r0
 800ec10:	4689      	mov	r9, r1
 800ec12:	4630      	mov	r0, r6
 800ec14:	4639      	mov	r1, r7
 800ec16:	f7f1 fb37 	bl	8000288 <__aeabi_dsub>
 800ec1a:	a395      	add	r3, pc, #596	@ (adr r3, 800ee70 <__ieee754_rem_pio2+0x300>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	e7dc      	b.n	800ebdc <__ieee754_rem_pio2+0x6c>
 800ec22:	f7f1 fb33 	bl	800028c <__adddf3>
 800ec26:	45a8      	cmp	r8, r5
 800ec28:	4606      	mov	r6, r0
 800ec2a:	460f      	mov	r7, r1
 800ec2c:	d018      	beq.n	800ec60 <__ieee754_rem_pio2+0xf0>
 800ec2e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x2f0>)
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	f7f1 fb2a 	bl	800028c <__adddf3>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4680      	mov	r8, r0
 800ec3e:	4689      	mov	r9, r1
 800ec40:	4630      	mov	r0, r6
 800ec42:	4639      	mov	r1, r7
 800ec44:	f7f1 fb20 	bl	8000288 <__aeabi_dsub>
 800ec48:	a385      	add	r3, pc, #532	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x2f0>)
 800ec4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4e:	f7f1 fb1d 	bl	800028c <__adddf3>
 800ec52:	f04f 35ff 	mov.w	r5, #4294967295
 800ec56:	e9c4 8900 	strd	r8, r9, [r4]
 800ec5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec5e:	e7c4      	b.n	800ebea <__ieee754_rem_pio2+0x7a>
 800ec60:	a381      	add	r3, pc, #516	@ (adr r3, 800ee68 <__ieee754_rem_pio2+0x2f8>)
 800ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec66:	f7f1 fb11 	bl	800028c <__adddf3>
 800ec6a:	a381      	add	r3, pc, #516	@ (adr r3, 800ee70 <__ieee754_rem_pio2+0x300>)
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	4606      	mov	r6, r0
 800ec72:	460f      	mov	r7, r1
 800ec74:	f7f1 fb0a 	bl	800028c <__adddf3>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	4680      	mov	r8, r0
 800ec7e:	4689      	mov	r9, r1
 800ec80:	4630      	mov	r0, r6
 800ec82:	4639      	mov	r1, r7
 800ec84:	f7f1 fb00 	bl	8000288 <__aeabi_dsub>
 800ec88:	a379      	add	r3, pc, #484	@ (adr r3, 800ee70 <__ieee754_rem_pio2+0x300>)
 800ec8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8e:	e7de      	b.n	800ec4e <__ieee754_rem_pio2+0xde>
 800ec90:	4b82      	ldr	r3, [pc, #520]	@ (800ee9c <__ieee754_rem_pio2+0x32c>)
 800ec92:	4598      	cmp	r8, r3
 800ec94:	f200 80d1 	bhi.w	800ee3a <__ieee754_rem_pio2+0x2ca>
 800ec98:	f000 f966 	bl	800ef68 <fabs>
 800ec9c:	ec57 6b10 	vmov	r6, r7, d0
 800eca0:	a375      	add	r3, pc, #468	@ (adr r3, 800ee78 <__ieee754_rem_pio2+0x308>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	4630      	mov	r0, r6
 800eca8:	4639      	mov	r1, r7
 800ecaa:	f7f1 fca5 	bl	80005f8 <__aeabi_dmul>
 800ecae:	4b7c      	ldr	r3, [pc, #496]	@ (800eea0 <__ieee754_rem_pio2+0x330>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f7f1 faeb 	bl	800028c <__adddf3>
 800ecb6:	f7f1 ff4f 	bl	8000b58 <__aeabi_d2iz>
 800ecba:	4605      	mov	r5, r0
 800ecbc:	f7f1 fc32 	bl	8000524 <__aeabi_i2d>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecc8:	a363      	add	r3, pc, #396	@ (adr r3, 800ee58 <__ieee754_rem_pio2+0x2e8>)
 800ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecce:	f7f1 fc93 	bl	80005f8 <__aeabi_dmul>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	4639      	mov	r1, r7
 800ecda:	f7f1 fad5 	bl	8000288 <__aeabi_dsub>
 800ecde:	a360      	add	r3, pc, #384	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x2f0>)
 800ece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece4:	4682      	mov	sl, r0
 800ece6:	468b      	mov	fp, r1
 800ece8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecec:	f7f1 fc84 	bl	80005f8 <__aeabi_dmul>
 800ecf0:	2d1f      	cmp	r5, #31
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	460f      	mov	r7, r1
 800ecf6:	dc0c      	bgt.n	800ed12 <__ieee754_rem_pio2+0x1a2>
 800ecf8:	4b6a      	ldr	r3, [pc, #424]	@ (800eea4 <__ieee754_rem_pio2+0x334>)
 800ecfa:	1e6a      	subs	r2, r5, #1
 800ecfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed00:	4543      	cmp	r3, r8
 800ed02:	d006      	beq.n	800ed12 <__ieee754_rem_pio2+0x1a2>
 800ed04:	4632      	mov	r2, r6
 800ed06:	463b      	mov	r3, r7
 800ed08:	4650      	mov	r0, sl
 800ed0a:	4659      	mov	r1, fp
 800ed0c:	f7f1 fabc 	bl	8000288 <__aeabi_dsub>
 800ed10:	e00e      	b.n	800ed30 <__ieee754_rem_pio2+0x1c0>
 800ed12:	463b      	mov	r3, r7
 800ed14:	4632      	mov	r2, r6
 800ed16:	4650      	mov	r0, sl
 800ed18:	4659      	mov	r1, fp
 800ed1a:	f7f1 fab5 	bl	8000288 <__aeabi_dsub>
 800ed1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ed22:	9305      	str	r3, [sp, #20]
 800ed24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed28:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ed2c:	2b10      	cmp	r3, #16
 800ed2e:	dc02      	bgt.n	800ed36 <__ieee754_rem_pio2+0x1c6>
 800ed30:	e9c4 0100 	strd	r0, r1, [r4]
 800ed34:	e039      	b.n	800edaa <__ieee754_rem_pio2+0x23a>
 800ed36:	a34c      	add	r3, pc, #304	@ (adr r3, 800ee68 <__ieee754_rem_pio2+0x2f8>)
 800ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed40:	f7f1 fc5a 	bl	80005f8 <__aeabi_dmul>
 800ed44:	4606      	mov	r6, r0
 800ed46:	460f      	mov	r7, r1
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	4650      	mov	r0, sl
 800ed4e:	4659      	mov	r1, fp
 800ed50:	f7f1 fa9a 	bl	8000288 <__aeabi_dsub>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
 800ed58:	4680      	mov	r8, r0
 800ed5a:	4689      	mov	r9, r1
 800ed5c:	4650      	mov	r0, sl
 800ed5e:	4659      	mov	r1, fp
 800ed60:	f7f1 fa92 	bl	8000288 <__aeabi_dsub>
 800ed64:	4632      	mov	r2, r6
 800ed66:	463b      	mov	r3, r7
 800ed68:	f7f1 fa8e 	bl	8000288 <__aeabi_dsub>
 800ed6c:	a340      	add	r3, pc, #256	@ (adr r3, 800ee70 <__ieee754_rem_pio2+0x300>)
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	4606      	mov	r6, r0
 800ed74:	460f      	mov	r7, r1
 800ed76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed7a:	f7f1 fc3d 	bl	80005f8 <__aeabi_dmul>
 800ed7e:	4632      	mov	r2, r6
 800ed80:	463b      	mov	r3, r7
 800ed82:	f7f1 fa81 	bl	8000288 <__aeabi_dsub>
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	4606      	mov	r6, r0
 800ed8c:	460f      	mov	r7, r1
 800ed8e:	4640      	mov	r0, r8
 800ed90:	4649      	mov	r1, r9
 800ed92:	f7f1 fa79 	bl	8000288 <__aeabi_dsub>
 800ed96:	9a05      	ldr	r2, [sp, #20]
 800ed98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	2b31      	cmp	r3, #49	@ 0x31
 800eda0:	dc20      	bgt.n	800ede4 <__ieee754_rem_pio2+0x274>
 800eda2:	e9c4 0100 	strd	r0, r1, [r4]
 800eda6:	46c2      	mov	sl, r8
 800eda8:	46cb      	mov	fp, r9
 800edaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800edae:	4650      	mov	r0, sl
 800edb0:	4642      	mov	r2, r8
 800edb2:	464b      	mov	r3, r9
 800edb4:	4659      	mov	r1, fp
 800edb6:	f7f1 fa67 	bl	8000288 <__aeabi_dsub>
 800edba:	463b      	mov	r3, r7
 800edbc:	4632      	mov	r2, r6
 800edbe:	f7f1 fa63 	bl	8000288 <__aeabi_dsub>
 800edc2:	9b04      	ldr	r3, [sp, #16]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800edca:	f6bf af0e 	bge.w	800ebea <__ieee754_rem_pio2+0x7a>
 800edce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800edd2:	6063      	str	r3, [r4, #4]
 800edd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800edd8:	f8c4 8000 	str.w	r8, [r4]
 800eddc:	60a0      	str	r0, [r4, #8]
 800edde:	60e3      	str	r3, [r4, #12]
 800ede0:	426d      	negs	r5, r5
 800ede2:	e702      	b.n	800ebea <__ieee754_rem_pio2+0x7a>
 800ede4:	a326      	add	r3, pc, #152	@ (adr r3, 800ee80 <__ieee754_rem_pio2+0x310>)
 800ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edee:	f7f1 fc03 	bl	80005f8 <__aeabi_dmul>
 800edf2:	4606      	mov	r6, r0
 800edf4:	460f      	mov	r7, r1
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	4640      	mov	r0, r8
 800edfc:	4649      	mov	r1, r9
 800edfe:	f7f1 fa43 	bl	8000288 <__aeabi_dsub>
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	4682      	mov	sl, r0
 800ee08:	468b      	mov	fp, r1
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	f7f1 fa3b 	bl	8000288 <__aeabi_dsub>
 800ee12:	4632      	mov	r2, r6
 800ee14:	463b      	mov	r3, r7
 800ee16:	f7f1 fa37 	bl	8000288 <__aeabi_dsub>
 800ee1a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ee88 <__ieee754_rem_pio2+0x318>)
 800ee1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee20:	4606      	mov	r6, r0
 800ee22:	460f      	mov	r7, r1
 800ee24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee28:	f7f1 fbe6 	bl	80005f8 <__aeabi_dmul>
 800ee2c:	4632      	mov	r2, r6
 800ee2e:	463b      	mov	r3, r7
 800ee30:	f7f1 fa2a 	bl	8000288 <__aeabi_dsub>
 800ee34:	4606      	mov	r6, r0
 800ee36:	460f      	mov	r7, r1
 800ee38:	e764      	b.n	800ed04 <__ieee754_rem_pio2+0x194>
 800ee3a:	4b1b      	ldr	r3, [pc, #108]	@ (800eea8 <__ieee754_rem_pio2+0x338>)
 800ee3c:	4598      	cmp	r8, r3
 800ee3e:	d935      	bls.n	800eeac <__ieee754_rem_pio2+0x33c>
 800ee40:	4632      	mov	r2, r6
 800ee42:	463b      	mov	r3, r7
 800ee44:	4630      	mov	r0, r6
 800ee46:	4639      	mov	r1, r7
 800ee48:	f7f1 fa1e 	bl	8000288 <__aeabi_dsub>
 800ee4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee50:	e9c4 0100 	strd	r0, r1, [r4]
 800ee54:	e69e      	b.n	800eb94 <__ieee754_rem_pio2+0x24>
 800ee56:	bf00      	nop
 800ee58:	54400000 	.word	0x54400000
 800ee5c:	3ff921fb 	.word	0x3ff921fb
 800ee60:	1a626331 	.word	0x1a626331
 800ee64:	3dd0b461 	.word	0x3dd0b461
 800ee68:	1a600000 	.word	0x1a600000
 800ee6c:	3dd0b461 	.word	0x3dd0b461
 800ee70:	2e037073 	.word	0x2e037073
 800ee74:	3ba3198a 	.word	0x3ba3198a
 800ee78:	6dc9c883 	.word	0x6dc9c883
 800ee7c:	3fe45f30 	.word	0x3fe45f30
 800ee80:	2e000000 	.word	0x2e000000
 800ee84:	3ba3198a 	.word	0x3ba3198a
 800ee88:	252049c1 	.word	0x252049c1
 800ee8c:	397b839a 	.word	0x397b839a
 800ee90:	3fe921fb 	.word	0x3fe921fb
 800ee94:	4002d97b 	.word	0x4002d97b
 800ee98:	3ff921fb 	.word	0x3ff921fb
 800ee9c:	413921fb 	.word	0x413921fb
 800eea0:	3fe00000 	.word	0x3fe00000
 800eea4:	0800fe68 	.word	0x0800fe68
 800eea8:	7fefffff 	.word	0x7fefffff
 800eeac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800eeb0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800eeb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800eeb8:	4630      	mov	r0, r6
 800eeba:	460f      	mov	r7, r1
 800eebc:	f7f1 fe4c 	bl	8000b58 <__aeabi_d2iz>
 800eec0:	f7f1 fb30 	bl	8000524 <__aeabi_i2d>
 800eec4:	4602      	mov	r2, r0
 800eec6:	460b      	mov	r3, r1
 800eec8:	4630      	mov	r0, r6
 800eeca:	4639      	mov	r1, r7
 800eecc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eed0:	f7f1 f9da 	bl	8000288 <__aeabi_dsub>
 800eed4:	4b22      	ldr	r3, [pc, #136]	@ (800ef60 <__ieee754_rem_pio2+0x3f0>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	f7f1 fb8e 	bl	80005f8 <__aeabi_dmul>
 800eedc:	460f      	mov	r7, r1
 800eede:	4606      	mov	r6, r0
 800eee0:	f7f1 fe3a 	bl	8000b58 <__aeabi_d2iz>
 800eee4:	f7f1 fb1e 	bl	8000524 <__aeabi_i2d>
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	4630      	mov	r0, r6
 800eeee:	4639      	mov	r1, r7
 800eef0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eef4:	f7f1 f9c8 	bl	8000288 <__aeabi_dsub>
 800eef8:	4b19      	ldr	r3, [pc, #100]	@ (800ef60 <__ieee754_rem_pio2+0x3f0>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	f7f1 fb7c 	bl	80005f8 <__aeabi_dmul>
 800ef00:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ef04:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ef08:	f04f 0803 	mov.w	r8, #3
 800ef0c:	2600      	movs	r6, #0
 800ef0e:	2700      	movs	r7, #0
 800ef10:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ef14:	4632      	mov	r2, r6
 800ef16:	463b      	mov	r3, r7
 800ef18:	46c2      	mov	sl, r8
 800ef1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef1e:	f7f1 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	d1f4      	bne.n	800ef10 <__ieee754_rem_pio2+0x3a0>
 800ef26:	4b0f      	ldr	r3, [pc, #60]	@ (800ef64 <__ieee754_rem_pio2+0x3f4>)
 800ef28:	9301      	str	r3, [sp, #4]
 800ef2a:	2302      	movs	r3, #2
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	462a      	mov	r2, r5
 800ef30:	4653      	mov	r3, sl
 800ef32:	4621      	mov	r1, r4
 800ef34:	a806      	add	r0, sp, #24
 800ef36:	f000 f81f 	bl	800ef78 <__kernel_rem_pio2>
 800ef3a:	9b04      	ldr	r3, [sp, #16]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	4605      	mov	r5, r0
 800ef40:	f6bf ae53 	bge.w	800ebea <__ieee754_rem_pio2+0x7a>
 800ef44:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ef48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef4c:	e9c4 2300 	strd	r2, r3, [r4]
 800ef50:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ef54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef58:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ef5c:	e740      	b.n	800ede0 <__ieee754_rem_pio2+0x270>
 800ef5e:	bf00      	nop
 800ef60:	41700000 	.word	0x41700000
 800ef64:	0800fee8 	.word	0x0800fee8

0800ef68 <fabs>:
 800ef68:	ec51 0b10 	vmov	r0, r1, d0
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ef72:	ec43 2b10 	vmov	d0, r2, r3
 800ef76:	4770      	bx	lr

0800ef78 <__kernel_rem_pio2>:
 800ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7c:	ed2d 8b02 	vpush	{d8}
 800ef80:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ef84:	f112 0f14 	cmn.w	r2, #20
 800ef88:	9306      	str	r3, [sp, #24]
 800ef8a:	9104      	str	r1, [sp, #16]
 800ef8c:	4bc2      	ldr	r3, [pc, #776]	@ (800f298 <__kernel_rem_pio2+0x320>)
 800ef8e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ef90:	9008      	str	r0, [sp, #32]
 800ef92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	9b06      	ldr	r3, [sp, #24]
 800ef9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef9e:	bfa8      	it	ge
 800efa0:	1ed4      	subge	r4, r2, #3
 800efa2:	9305      	str	r3, [sp, #20]
 800efa4:	bfb2      	itee	lt
 800efa6:	2400      	movlt	r4, #0
 800efa8:	2318      	movge	r3, #24
 800efaa:	fb94 f4f3 	sdivge	r4, r4, r3
 800efae:	f06f 0317 	mvn.w	r3, #23
 800efb2:	fb04 3303 	mla	r3, r4, r3, r3
 800efb6:	eb03 0b02 	add.w	fp, r3, r2
 800efba:	9b00      	ldr	r3, [sp, #0]
 800efbc:	9a05      	ldr	r2, [sp, #20]
 800efbe:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800f288 <__kernel_rem_pio2+0x310>
 800efc2:	eb03 0802 	add.w	r8, r3, r2
 800efc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800efc8:	1aa7      	subs	r7, r4, r2
 800efca:	ae20      	add	r6, sp, #128	@ 0x80
 800efcc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800efd0:	2500      	movs	r5, #0
 800efd2:	4545      	cmp	r5, r8
 800efd4:	dd12      	ble.n	800effc <__kernel_rem_pio2+0x84>
 800efd6:	9b06      	ldr	r3, [sp, #24]
 800efd8:	aa20      	add	r2, sp, #128	@ 0x80
 800efda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800efde:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800efe2:	2700      	movs	r7, #0
 800efe4:	9b00      	ldr	r3, [sp, #0]
 800efe6:	429f      	cmp	r7, r3
 800efe8:	dc2e      	bgt.n	800f048 <__kernel_rem_pio2+0xd0>
 800efea:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800f288 <__kernel_rem_pio2+0x310>
 800efee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eff2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eff6:	46a8      	mov	r8, r5
 800eff8:	2600      	movs	r6, #0
 800effa:	e01b      	b.n	800f034 <__kernel_rem_pio2+0xbc>
 800effc:	42ef      	cmn	r7, r5
 800effe:	d407      	bmi.n	800f010 <__kernel_rem_pio2+0x98>
 800f000:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f004:	f7f1 fa8e 	bl	8000524 <__aeabi_i2d>
 800f008:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f00c:	3501      	adds	r5, #1
 800f00e:	e7e0      	b.n	800efd2 <__kernel_rem_pio2+0x5a>
 800f010:	ec51 0b18 	vmov	r0, r1, d8
 800f014:	e7f8      	b.n	800f008 <__kernel_rem_pio2+0x90>
 800f016:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800f01a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f01e:	f7f1 faeb 	bl	80005f8 <__aeabi_dmul>
 800f022:	4602      	mov	r2, r0
 800f024:	460b      	mov	r3, r1
 800f026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f02a:	f7f1 f92f 	bl	800028c <__adddf3>
 800f02e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f032:	3601      	adds	r6, #1
 800f034:	9b05      	ldr	r3, [sp, #20]
 800f036:	429e      	cmp	r6, r3
 800f038:	dded      	ble.n	800f016 <__kernel_rem_pio2+0x9e>
 800f03a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f03e:	3701      	adds	r7, #1
 800f040:	ecaa 7b02 	vstmia	sl!, {d7}
 800f044:	3508      	adds	r5, #8
 800f046:	e7cd      	b.n	800efe4 <__kernel_rem_pio2+0x6c>
 800f048:	9b00      	ldr	r3, [sp, #0]
 800f04a:	f8dd 8000 	ldr.w	r8, [sp]
 800f04e:	aa0c      	add	r2, sp, #48	@ 0x30
 800f050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f054:	930a      	str	r3, [sp, #40]	@ 0x28
 800f056:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f058:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f05e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f062:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f064:	ab98      	add	r3, sp, #608	@ 0x260
 800f066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f06a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f06e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f072:	ac0c      	add	r4, sp, #48	@ 0x30
 800f074:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f076:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f07a:	46a1      	mov	r9, r4
 800f07c:	46c2      	mov	sl, r8
 800f07e:	f1ba 0f00 	cmp.w	sl, #0
 800f082:	dc77      	bgt.n	800f174 <__kernel_rem_pio2+0x1fc>
 800f084:	4658      	mov	r0, fp
 800f086:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f08a:	f000 fac5 	bl	800f618 <scalbn>
 800f08e:	ec57 6b10 	vmov	r6, r7, d0
 800f092:	2200      	movs	r2, #0
 800f094:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f098:	4630      	mov	r0, r6
 800f09a:	4639      	mov	r1, r7
 800f09c:	f7f1 faac 	bl	80005f8 <__aeabi_dmul>
 800f0a0:	ec41 0b10 	vmov	d0, r0, r1
 800f0a4:	f000 fb34 	bl	800f710 <floor>
 800f0a8:	4b7c      	ldr	r3, [pc, #496]	@ (800f29c <__kernel_rem_pio2+0x324>)
 800f0aa:	ec51 0b10 	vmov	r0, r1, d0
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f7f1 faa2 	bl	80005f8 <__aeabi_dmul>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	f7f1 f8e4 	bl	8000288 <__aeabi_dsub>
 800f0c0:	460f      	mov	r7, r1
 800f0c2:	4606      	mov	r6, r0
 800f0c4:	f7f1 fd48 	bl	8000b58 <__aeabi_d2iz>
 800f0c8:	9002      	str	r0, [sp, #8]
 800f0ca:	f7f1 fa2b 	bl	8000524 <__aeabi_i2d>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	4639      	mov	r1, r7
 800f0d6:	f7f1 f8d7 	bl	8000288 <__aeabi_dsub>
 800f0da:	f1bb 0f00 	cmp.w	fp, #0
 800f0de:	4606      	mov	r6, r0
 800f0e0:	460f      	mov	r7, r1
 800f0e2:	dd6c      	ble.n	800f1be <__kernel_rem_pio2+0x246>
 800f0e4:	f108 31ff 	add.w	r1, r8, #4294967295
 800f0e8:	ab0c      	add	r3, sp, #48	@ 0x30
 800f0ea:	9d02      	ldr	r5, [sp, #8]
 800f0ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0f0:	f1cb 0018 	rsb	r0, fp, #24
 800f0f4:	fa43 f200 	asr.w	r2, r3, r0
 800f0f8:	4415      	add	r5, r2
 800f0fa:	4082      	lsls	r2, r0
 800f0fc:	1a9b      	subs	r3, r3, r2
 800f0fe:	aa0c      	add	r2, sp, #48	@ 0x30
 800f100:	9502      	str	r5, [sp, #8]
 800f102:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f106:	f1cb 0217 	rsb	r2, fp, #23
 800f10a:	fa43 f902 	asr.w	r9, r3, r2
 800f10e:	f1b9 0f00 	cmp.w	r9, #0
 800f112:	dd64      	ble.n	800f1de <__kernel_rem_pio2+0x266>
 800f114:	9b02      	ldr	r3, [sp, #8]
 800f116:	2200      	movs	r2, #0
 800f118:	3301      	adds	r3, #1
 800f11a:	9302      	str	r3, [sp, #8]
 800f11c:	4615      	mov	r5, r2
 800f11e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f122:	4590      	cmp	r8, r2
 800f124:	f300 80a1 	bgt.w	800f26a <__kernel_rem_pio2+0x2f2>
 800f128:	f1bb 0f00 	cmp.w	fp, #0
 800f12c:	dd07      	ble.n	800f13e <__kernel_rem_pio2+0x1c6>
 800f12e:	f1bb 0f01 	cmp.w	fp, #1
 800f132:	f000 80c1 	beq.w	800f2b8 <__kernel_rem_pio2+0x340>
 800f136:	f1bb 0f02 	cmp.w	fp, #2
 800f13a:	f000 80c8 	beq.w	800f2ce <__kernel_rem_pio2+0x356>
 800f13e:	f1b9 0f02 	cmp.w	r9, #2
 800f142:	d14c      	bne.n	800f1de <__kernel_rem_pio2+0x266>
 800f144:	4632      	mov	r2, r6
 800f146:	463b      	mov	r3, r7
 800f148:	4955      	ldr	r1, [pc, #340]	@ (800f2a0 <__kernel_rem_pio2+0x328>)
 800f14a:	2000      	movs	r0, #0
 800f14c:	f7f1 f89c 	bl	8000288 <__aeabi_dsub>
 800f150:	4606      	mov	r6, r0
 800f152:	460f      	mov	r7, r1
 800f154:	2d00      	cmp	r5, #0
 800f156:	d042      	beq.n	800f1de <__kernel_rem_pio2+0x266>
 800f158:	4658      	mov	r0, fp
 800f15a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800f290 <__kernel_rem_pio2+0x318>
 800f15e:	f000 fa5b 	bl	800f618 <scalbn>
 800f162:	4630      	mov	r0, r6
 800f164:	4639      	mov	r1, r7
 800f166:	ec53 2b10 	vmov	r2, r3, d0
 800f16a:	f7f1 f88d 	bl	8000288 <__aeabi_dsub>
 800f16e:	4606      	mov	r6, r0
 800f170:	460f      	mov	r7, r1
 800f172:	e034      	b.n	800f1de <__kernel_rem_pio2+0x266>
 800f174:	4b4b      	ldr	r3, [pc, #300]	@ (800f2a4 <__kernel_rem_pio2+0x32c>)
 800f176:	2200      	movs	r2, #0
 800f178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f17c:	f7f1 fa3c 	bl	80005f8 <__aeabi_dmul>
 800f180:	f7f1 fcea 	bl	8000b58 <__aeabi_d2iz>
 800f184:	f7f1 f9ce 	bl	8000524 <__aeabi_i2d>
 800f188:	4b47      	ldr	r3, [pc, #284]	@ (800f2a8 <__kernel_rem_pio2+0x330>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	4606      	mov	r6, r0
 800f18e:	460f      	mov	r7, r1
 800f190:	f7f1 fa32 	bl	80005f8 <__aeabi_dmul>
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f19c:	f7f1 f874 	bl	8000288 <__aeabi_dsub>
 800f1a0:	f7f1 fcda 	bl	8000b58 <__aeabi_d2iz>
 800f1a4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f1a8:	f849 0b04 	str.w	r0, [r9], #4
 800f1ac:	4639      	mov	r1, r7
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f7f1 f86c 	bl	800028c <__adddf3>
 800f1b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1bc:	e75f      	b.n	800f07e <__kernel_rem_pio2+0x106>
 800f1be:	d107      	bne.n	800f1d0 <__kernel_rem_pio2+0x258>
 800f1c0:	f108 33ff 	add.w	r3, r8, #4294967295
 800f1c4:	aa0c      	add	r2, sp, #48	@ 0x30
 800f1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1ca:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f1ce:	e79e      	b.n	800f10e <__kernel_rem_pio2+0x196>
 800f1d0:	4b36      	ldr	r3, [pc, #216]	@ (800f2ac <__kernel_rem_pio2+0x334>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f7f1 fc96 	bl	8000b04 <__aeabi_dcmpge>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d143      	bne.n	800f264 <__kernel_rem_pio2+0x2ec>
 800f1dc:	4681      	mov	r9, r0
 800f1de:	2200      	movs	r2, #0
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	f7f1 fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	f000 80c1 	beq.w	800f372 <__kernel_rem_pio2+0x3fa>
 800f1f0:	f108 33ff 	add.w	r3, r8, #4294967295
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	9900      	ldr	r1, [sp, #0]
 800f1f8:	428b      	cmp	r3, r1
 800f1fa:	da70      	bge.n	800f2de <__kernel_rem_pio2+0x366>
 800f1fc:	2a00      	cmp	r2, #0
 800f1fe:	f000 808b 	beq.w	800f318 <__kernel_rem_pio2+0x3a0>
 800f202:	f108 38ff 	add.w	r8, r8, #4294967295
 800f206:	ab0c      	add	r3, sp, #48	@ 0x30
 800f208:	f1ab 0b18 	sub.w	fp, fp, #24
 800f20c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d0f6      	beq.n	800f202 <__kernel_rem_pio2+0x28a>
 800f214:	4658      	mov	r0, fp
 800f216:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800f290 <__kernel_rem_pio2+0x318>
 800f21a:	f000 f9fd 	bl	800f618 <scalbn>
 800f21e:	f108 0301 	add.w	r3, r8, #1
 800f222:	00da      	lsls	r2, r3, #3
 800f224:	9205      	str	r2, [sp, #20]
 800f226:	ec55 4b10 	vmov	r4, r5, d0
 800f22a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f22c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800f2a4 <__kernel_rem_pio2+0x32c>
 800f230:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f234:	4646      	mov	r6, r8
 800f236:	f04f 0a00 	mov.w	sl, #0
 800f23a:	2e00      	cmp	r6, #0
 800f23c:	f280 80d1 	bge.w	800f3e2 <__kernel_rem_pio2+0x46a>
 800f240:	4644      	mov	r4, r8
 800f242:	2c00      	cmp	r4, #0
 800f244:	f2c0 80ff 	blt.w	800f446 <__kernel_rem_pio2+0x4ce>
 800f248:	4b19      	ldr	r3, [pc, #100]	@ (800f2b0 <__kernel_rem_pio2+0x338>)
 800f24a:	461f      	mov	r7, r3
 800f24c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f24e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f252:	9306      	str	r3, [sp, #24]
 800f254:	f04f 0a00 	mov.w	sl, #0
 800f258:	f04f 0b00 	mov.w	fp, #0
 800f25c:	2600      	movs	r6, #0
 800f25e:	eba8 0504 	sub.w	r5, r8, r4
 800f262:	e0e4      	b.n	800f42e <__kernel_rem_pio2+0x4b6>
 800f264:	f04f 0902 	mov.w	r9, #2
 800f268:	e754      	b.n	800f114 <__kernel_rem_pio2+0x19c>
 800f26a:	f854 3b04 	ldr.w	r3, [r4], #4
 800f26e:	bb0d      	cbnz	r5, 800f2b4 <__kernel_rem_pio2+0x33c>
 800f270:	b123      	cbz	r3, 800f27c <__kernel_rem_pio2+0x304>
 800f272:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f276:	f844 3c04 	str.w	r3, [r4, #-4]
 800f27a:	2301      	movs	r3, #1
 800f27c:	3201      	adds	r2, #1
 800f27e:	461d      	mov	r5, r3
 800f280:	e74f      	b.n	800f122 <__kernel_rem_pio2+0x1aa>
 800f282:	bf00      	nop
 800f284:	f3af 8000 	nop.w
	...
 800f294:	3ff00000 	.word	0x3ff00000
 800f298:	08010030 	.word	0x08010030
 800f29c:	40200000 	.word	0x40200000
 800f2a0:	3ff00000 	.word	0x3ff00000
 800f2a4:	3e700000 	.word	0x3e700000
 800f2a8:	41700000 	.word	0x41700000
 800f2ac:	3fe00000 	.word	0x3fe00000
 800f2b0:	0800fff0 	.word	0x0800fff0
 800f2b4:	1acb      	subs	r3, r1, r3
 800f2b6:	e7de      	b.n	800f276 <__kernel_rem_pio2+0x2fe>
 800f2b8:	f108 32ff 	add.w	r2, r8, #4294967295
 800f2bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800f2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f2c6:	a90c      	add	r1, sp, #48	@ 0x30
 800f2c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f2cc:	e737      	b.n	800f13e <__kernel_rem_pio2+0x1c6>
 800f2ce:	f108 32ff 	add.w	r2, r8, #4294967295
 800f2d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f2dc:	e7f3      	b.n	800f2c6 <__kernel_rem_pio2+0x34e>
 800f2de:	a90c      	add	r1, sp, #48	@ 0x30
 800f2e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	430a      	orrs	r2, r1
 800f2e8:	e785      	b.n	800f1f6 <__kernel_rem_pio2+0x27e>
 800f2ea:	3401      	adds	r4, #1
 800f2ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f2f0:	2a00      	cmp	r2, #0
 800f2f2:	d0fa      	beq.n	800f2ea <__kernel_rem_pio2+0x372>
 800f2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f2fa:	eb0d 0503 	add.w	r5, sp, r3
 800f2fe:	9b06      	ldr	r3, [sp, #24]
 800f300:	aa20      	add	r2, sp, #128	@ 0x80
 800f302:	4443      	add	r3, r8
 800f304:	f108 0701 	add.w	r7, r8, #1
 800f308:	3d98      	subs	r5, #152	@ 0x98
 800f30a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f30e:	4444      	add	r4, r8
 800f310:	42bc      	cmp	r4, r7
 800f312:	da04      	bge.n	800f31e <__kernel_rem_pio2+0x3a6>
 800f314:	46a0      	mov	r8, r4
 800f316:	e6a2      	b.n	800f05e <__kernel_rem_pio2+0xe6>
 800f318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f31a:	2401      	movs	r4, #1
 800f31c:	e7e6      	b.n	800f2ec <__kernel_rem_pio2+0x374>
 800f31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f320:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f324:	f7f1 f8fe 	bl	8000524 <__aeabi_i2d>
 800f328:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800f5e8 <__kernel_rem_pio2+0x670>
 800f32c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f330:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f338:	46b2      	mov	sl, r6
 800f33a:	f04f 0800 	mov.w	r8, #0
 800f33e:	9b05      	ldr	r3, [sp, #20]
 800f340:	4598      	cmp	r8, r3
 800f342:	dd05      	ble.n	800f350 <__kernel_rem_pio2+0x3d8>
 800f344:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f348:	3701      	adds	r7, #1
 800f34a:	eca5 7b02 	vstmia	r5!, {d7}
 800f34e:	e7df      	b.n	800f310 <__kernel_rem_pio2+0x398>
 800f350:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f354:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f358:	f7f1 f94e 	bl	80005f8 <__aeabi_dmul>
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f364:	f7f0 ff92 	bl	800028c <__adddf3>
 800f368:	f108 0801 	add.w	r8, r8, #1
 800f36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f370:	e7e5      	b.n	800f33e <__kernel_rem_pio2+0x3c6>
 800f372:	f1cb 0000 	rsb	r0, fp, #0
 800f376:	ec47 6b10 	vmov	d0, r6, r7
 800f37a:	f000 f94d 	bl	800f618 <scalbn>
 800f37e:	ec55 4b10 	vmov	r4, r5, d0
 800f382:	4b9b      	ldr	r3, [pc, #620]	@ (800f5f0 <__kernel_rem_pio2+0x678>)
 800f384:	2200      	movs	r2, #0
 800f386:	4620      	mov	r0, r4
 800f388:	4629      	mov	r1, r5
 800f38a:	f7f1 fbbb 	bl	8000b04 <__aeabi_dcmpge>
 800f38e:	b300      	cbz	r0, 800f3d2 <__kernel_rem_pio2+0x45a>
 800f390:	4b98      	ldr	r3, [pc, #608]	@ (800f5f4 <__kernel_rem_pio2+0x67c>)
 800f392:	2200      	movs	r2, #0
 800f394:	4620      	mov	r0, r4
 800f396:	4629      	mov	r1, r5
 800f398:	f7f1 f92e 	bl	80005f8 <__aeabi_dmul>
 800f39c:	f7f1 fbdc 	bl	8000b58 <__aeabi_d2iz>
 800f3a0:	4606      	mov	r6, r0
 800f3a2:	f7f1 f8bf 	bl	8000524 <__aeabi_i2d>
 800f3a6:	4b92      	ldr	r3, [pc, #584]	@ (800f5f0 <__kernel_rem_pio2+0x678>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f7f1 f925 	bl	80005f8 <__aeabi_dmul>
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7f0 ff67 	bl	8000288 <__aeabi_dsub>
 800f3ba:	f7f1 fbcd 	bl	8000b58 <__aeabi_d2iz>
 800f3be:	ab0c      	add	r3, sp, #48	@ 0x30
 800f3c0:	f10b 0b18 	add.w	fp, fp, #24
 800f3c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f3c8:	f108 0801 	add.w	r8, r8, #1
 800f3cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f3d0:	e720      	b.n	800f214 <__kernel_rem_pio2+0x29c>
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	f7f1 fbbf 	bl	8000b58 <__aeabi_d2iz>
 800f3da:	ab0c      	add	r3, sp, #48	@ 0x30
 800f3dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f3e0:	e718      	b.n	800f214 <__kernel_rem_pio2+0x29c>
 800f3e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f3e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f3e8:	f7f1 f89c 	bl	8000524 <__aeabi_i2d>
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	462b      	mov	r3, r5
 800f3f0:	f7f1 f902 	bl	80005f8 <__aeabi_dmul>
 800f3f4:	4652      	mov	r2, sl
 800f3f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f3fa:	465b      	mov	r3, fp
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	4629      	mov	r1, r5
 800f400:	f7f1 f8fa 	bl	80005f8 <__aeabi_dmul>
 800f404:	3e01      	subs	r6, #1
 800f406:	4604      	mov	r4, r0
 800f408:	460d      	mov	r5, r1
 800f40a:	e716      	b.n	800f23a <__kernel_rem_pio2+0x2c2>
 800f40c:	9906      	ldr	r1, [sp, #24]
 800f40e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f412:	9106      	str	r1, [sp, #24]
 800f414:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f418:	f7f1 f8ee 	bl	80005f8 <__aeabi_dmul>
 800f41c:	4602      	mov	r2, r0
 800f41e:	460b      	mov	r3, r1
 800f420:	4650      	mov	r0, sl
 800f422:	4659      	mov	r1, fp
 800f424:	f7f0 ff32 	bl	800028c <__adddf3>
 800f428:	3601      	adds	r6, #1
 800f42a:	4682      	mov	sl, r0
 800f42c:	468b      	mov	fp, r1
 800f42e:	9b00      	ldr	r3, [sp, #0]
 800f430:	429e      	cmp	r6, r3
 800f432:	dc01      	bgt.n	800f438 <__kernel_rem_pio2+0x4c0>
 800f434:	42ae      	cmp	r6, r5
 800f436:	dde9      	ble.n	800f40c <__kernel_rem_pio2+0x494>
 800f438:	ab48      	add	r3, sp, #288	@ 0x120
 800f43a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f43e:	e9c5 ab00 	strd	sl, fp, [r5]
 800f442:	3c01      	subs	r4, #1
 800f444:	e6fd      	b.n	800f242 <__kernel_rem_pio2+0x2ca>
 800f446:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f448:	2b02      	cmp	r3, #2
 800f44a:	dc0b      	bgt.n	800f464 <__kernel_rem_pio2+0x4ec>
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	dc35      	bgt.n	800f4bc <__kernel_rem_pio2+0x544>
 800f450:	d059      	beq.n	800f506 <__kernel_rem_pio2+0x58e>
 800f452:	9b02      	ldr	r3, [sp, #8]
 800f454:	f003 0007 	and.w	r0, r3, #7
 800f458:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f45c:	ecbd 8b02 	vpop	{d8}
 800f460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f464:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f466:	2b03      	cmp	r3, #3
 800f468:	d1f3      	bne.n	800f452 <__kernel_rem_pio2+0x4da>
 800f46a:	9b05      	ldr	r3, [sp, #20]
 800f46c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f470:	eb0d 0403 	add.w	r4, sp, r3
 800f474:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f478:	4625      	mov	r5, r4
 800f47a:	46c2      	mov	sl, r8
 800f47c:	f1ba 0f00 	cmp.w	sl, #0
 800f480:	dc69      	bgt.n	800f556 <__kernel_rem_pio2+0x5de>
 800f482:	4645      	mov	r5, r8
 800f484:	2d01      	cmp	r5, #1
 800f486:	f300 8087 	bgt.w	800f598 <__kernel_rem_pio2+0x620>
 800f48a:	9c05      	ldr	r4, [sp, #20]
 800f48c:	ab48      	add	r3, sp, #288	@ 0x120
 800f48e:	441c      	add	r4, r3
 800f490:	2000      	movs	r0, #0
 800f492:	2100      	movs	r1, #0
 800f494:	f1b8 0f01 	cmp.w	r8, #1
 800f498:	f300 809c 	bgt.w	800f5d4 <__kernel_rem_pio2+0x65c>
 800f49c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800f4a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800f4a4:	f1b9 0f00 	cmp.w	r9, #0
 800f4a8:	f040 80a6 	bne.w	800f5f8 <__kernel_rem_pio2+0x680>
 800f4ac:	9b04      	ldr	r3, [sp, #16]
 800f4ae:	e9c3 5600 	strd	r5, r6, [r3]
 800f4b2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f4b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f4ba:	e7ca      	b.n	800f452 <__kernel_rem_pio2+0x4da>
 800f4bc:	9d05      	ldr	r5, [sp, #20]
 800f4be:	ab48      	add	r3, sp, #288	@ 0x120
 800f4c0:	441d      	add	r5, r3
 800f4c2:	4644      	mov	r4, r8
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	2c00      	cmp	r4, #0
 800f4ca:	da35      	bge.n	800f538 <__kernel_rem_pio2+0x5c0>
 800f4cc:	f1b9 0f00 	cmp.w	r9, #0
 800f4d0:	d038      	beq.n	800f544 <__kernel_rem_pio2+0x5cc>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f4d8:	9c04      	ldr	r4, [sp, #16]
 800f4da:	e9c4 2300 	strd	r2, r3, [r4]
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f4e6:	f7f0 fecf 	bl	8000288 <__aeabi_dsub>
 800f4ea:	ad4a      	add	r5, sp, #296	@ 0x128
 800f4ec:	2401      	movs	r4, #1
 800f4ee:	45a0      	cmp	r8, r4
 800f4f0:	da2b      	bge.n	800f54a <__kernel_rem_pio2+0x5d2>
 800f4f2:	f1b9 0f00 	cmp.w	r9, #0
 800f4f6:	d002      	beq.n	800f4fe <__kernel_rem_pio2+0x586>
 800f4f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	9b04      	ldr	r3, [sp, #16]
 800f500:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f504:	e7a5      	b.n	800f452 <__kernel_rem_pio2+0x4da>
 800f506:	9c05      	ldr	r4, [sp, #20]
 800f508:	ab48      	add	r3, sp, #288	@ 0x120
 800f50a:	441c      	add	r4, r3
 800f50c:	2000      	movs	r0, #0
 800f50e:	2100      	movs	r1, #0
 800f510:	f1b8 0f00 	cmp.w	r8, #0
 800f514:	da09      	bge.n	800f52a <__kernel_rem_pio2+0x5b2>
 800f516:	f1b9 0f00 	cmp.w	r9, #0
 800f51a:	d002      	beq.n	800f522 <__kernel_rem_pio2+0x5aa>
 800f51c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f520:	4619      	mov	r1, r3
 800f522:	9b04      	ldr	r3, [sp, #16]
 800f524:	e9c3 0100 	strd	r0, r1, [r3]
 800f528:	e793      	b.n	800f452 <__kernel_rem_pio2+0x4da>
 800f52a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f52e:	f7f0 fead 	bl	800028c <__adddf3>
 800f532:	f108 38ff 	add.w	r8, r8, #4294967295
 800f536:	e7eb      	b.n	800f510 <__kernel_rem_pio2+0x598>
 800f538:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f53c:	f7f0 fea6 	bl	800028c <__adddf3>
 800f540:	3c01      	subs	r4, #1
 800f542:	e7c1      	b.n	800f4c8 <__kernel_rem_pio2+0x550>
 800f544:	4602      	mov	r2, r0
 800f546:	460b      	mov	r3, r1
 800f548:	e7c6      	b.n	800f4d8 <__kernel_rem_pio2+0x560>
 800f54a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f54e:	f7f0 fe9d 	bl	800028c <__adddf3>
 800f552:	3401      	adds	r4, #1
 800f554:	e7cb      	b.n	800f4ee <__kernel_rem_pio2+0x576>
 800f556:	ed35 7b02 	vldmdb	r5!, {d7}
 800f55a:	ed8d 7b00 	vstr	d7, [sp]
 800f55e:	ed95 7b02 	vldr	d7, [r5, #8]
 800f562:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f566:	ec53 2b17 	vmov	r2, r3, d7
 800f56a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f56e:	f7f0 fe8d 	bl	800028c <__adddf3>
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	4606      	mov	r6, r0
 800f578:	460f      	mov	r7, r1
 800f57a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f57e:	f7f0 fe83 	bl	8000288 <__aeabi_dsub>
 800f582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f586:	f7f0 fe81 	bl	800028c <__adddf3>
 800f58a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f58e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f592:	e9c5 6700 	strd	r6, r7, [r5]
 800f596:	e771      	b.n	800f47c <__kernel_rem_pio2+0x504>
 800f598:	ed34 7b02 	vldmdb	r4!, {d7}
 800f59c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f5a0:	ec51 0b17 	vmov	r0, r1, d7
 800f5a4:	4652      	mov	r2, sl
 800f5a6:	465b      	mov	r3, fp
 800f5a8:	ed8d 7b00 	vstr	d7, [sp]
 800f5ac:	f7f0 fe6e 	bl	800028c <__adddf3>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	4606      	mov	r6, r0
 800f5b6:	460f      	mov	r7, r1
 800f5b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5bc:	f7f0 fe64 	bl	8000288 <__aeabi_dsub>
 800f5c0:	4652      	mov	r2, sl
 800f5c2:	465b      	mov	r3, fp
 800f5c4:	f7f0 fe62 	bl	800028c <__adddf3>
 800f5c8:	3d01      	subs	r5, #1
 800f5ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f5ce:	e9c4 6700 	strd	r6, r7, [r4]
 800f5d2:	e757      	b.n	800f484 <__kernel_rem_pio2+0x50c>
 800f5d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f5d8:	f7f0 fe58 	bl	800028c <__adddf3>
 800f5dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800f5e0:	e758      	b.n	800f494 <__kernel_rem_pio2+0x51c>
 800f5e2:	bf00      	nop
 800f5e4:	f3af 8000 	nop.w
	...
 800f5f0:	41700000 	.word	0x41700000
 800f5f4:	3e700000 	.word	0x3e700000
 800f5f8:	9b04      	ldr	r3, [sp, #16]
 800f5fa:	9a04      	ldr	r2, [sp, #16]
 800f5fc:	601d      	str	r5, [r3, #0]
 800f5fe:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800f602:	605c      	str	r4, [r3, #4]
 800f604:	609f      	str	r7, [r3, #8]
 800f606:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800f60a:	60d3      	str	r3, [r2, #12]
 800f60c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f610:	6110      	str	r0, [r2, #16]
 800f612:	6153      	str	r3, [r2, #20]
 800f614:	e71d      	b.n	800f452 <__kernel_rem_pio2+0x4da>
 800f616:	bf00      	nop

0800f618 <scalbn>:
 800f618:	b570      	push	{r4, r5, r6, lr}
 800f61a:	ec55 4b10 	vmov	r4, r5, d0
 800f61e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f622:	4606      	mov	r6, r0
 800f624:	462b      	mov	r3, r5
 800f626:	b991      	cbnz	r1, 800f64e <scalbn+0x36>
 800f628:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f62c:	4323      	orrs	r3, r4
 800f62e:	d03b      	beq.n	800f6a8 <scalbn+0x90>
 800f630:	4b33      	ldr	r3, [pc, #204]	@ (800f700 <scalbn+0xe8>)
 800f632:	4620      	mov	r0, r4
 800f634:	4629      	mov	r1, r5
 800f636:	2200      	movs	r2, #0
 800f638:	f7f0 ffde 	bl	80005f8 <__aeabi_dmul>
 800f63c:	4b31      	ldr	r3, [pc, #196]	@ (800f704 <scalbn+0xec>)
 800f63e:	429e      	cmp	r6, r3
 800f640:	4604      	mov	r4, r0
 800f642:	460d      	mov	r5, r1
 800f644:	da0f      	bge.n	800f666 <scalbn+0x4e>
 800f646:	a326      	add	r3, pc, #152	@ (adr r3, 800f6e0 <scalbn+0xc8>)
 800f648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64c:	e01e      	b.n	800f68c <scalbn+0x74>
 800f64e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f652:	4291      	cmp	r1, r2
 800f654:	d10b      	bne.n	800f66e <scalbn+0x56>
 800f656:	4622      	mov	r2, r4
 800f658:	4620      	mov	r0, r4
 800f65a:	4629      	mov	r1, r5
 800f65c:	f7f0 fe16 	bl	800028c <__adddf3>
 800f660:	4604      	mov	r4, r0
 800f662:	460d      	mov	r5, r1
 800f664:	e020      	b.n	800f6a8 <scalbn+0x90>
 800f666:	460b      	mov	r3, r1
 800f668:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f66c:	3936      	subs	r1, #54	@ 0x36
 800f66e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f672:	4296      	cmp	r6, r2
 800f674:	dd0d      	ble.n	800f692 <scalbn+0x7a>
 800f676:	2d00      	cmp	r5, #0
 800f678:	a11b      	add	r1, pc, #108	@ (adr r1, 800f6e8 <scalbn+0xd0>)
 800f67a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f67e:	da02      	bge.n	800f686 <scalbn+0x6e>
 800f680:	a11b      	add	r1, pc, #108	@ (adr r1, 800f6f0 <scalbn+0xd8>)
 800f682:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f686:	a318      	add	r3, pc, #96	@ (adr r3, 800f6e8 <scalbn+0xd0>)
 800f688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68c:	f7f0 ffb4 	bl	80005f8 <__aeabi_dmul>
 800f690:	e7e6      	b.n	800f660 <scalbn+0x48>
 800f692:	1872      	adds	r2, r6, r1
 800f694:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f698:	428a      	cmp	r2, r1
 800f69a:	dcec      	bgt.n	800f676 <scalbn+0x5e>
 800f69c:	2a00      	cmp	r2, #0
 800f69e:	dd06      	ble.n	800f6ae <scalbn+0x96>
 800f6a0:	f36f 531e 	bfc	r3, #20, #11
 800f6a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f6a8:	ec45 4b10 	vmov	d0, r4, r5
 800f6ac:	bd70      	pop	{r4, r5, r6, pc}
 800f6ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f6b2:	da08      	bge.n	800f6c6 <scalbn+0xae>
 800f6b4:	2d00      	cmp	r5, #0
 800f6b6:	a10a      	add	r1, pc, #40	@ (adr r1, 800f6e0 <scalbn+0xc8>)
 800f6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6bc:	dac3      	bge.n	800f646 <scalbn+0x2e>
 800f6be:	a10e      	add	r1, pc, #56	@ (adr r1, 800f6f8 <scalbn+0xe0>)
 800f6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6c4:	e7bf      	b.n	800f646 <scalbn+0x2e>
 800f6c6:	3236      	adds	r2, #54	@ 0x36
 800f6c8:	f36f 531e 	bfc	r3, #20, #11
 800f6cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f708 <scalbn+0xf0>)
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	e7d8      	b.n	800f68c <scalbn+0x74>
 800f6da:	bf00      	nop
 800f6dc:	f3af 8000 	nop.w
 800f6e0:	c2f8f359 	.word	0xc2f8f359
 800f6e4:	01a56e1f 	.word	0x01a56e1f
 800f6e8:	8800759c 	.word	0x8800759c
 800f6ec:	7e37e43c 	.word	0x7e37e43c
 800f6f0:	8800759c 	.word	0x8800759c
 800f6f4:	fe37e43c 	.word	0xfe37e43c
 800f6f8:	c2f8f359 	.word	0xc2f8f359
 800f6fc:	81a56e1f 	.word	0x81a56e1f
 800f700:	43500000 	.word	0x43500000
 800f704:	ffff3cb0 	.word	0xffff3cb0
 800f708:	3c900000 	.word	0x3c900000
 800f70c:	00000000 	.word	0x00000000

0800f710 <floor>:
 800f710:	ec51 0b10 	vmov	r0, r1, d0
 800f714:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f720:	2e13      	cmp	r6, #19
 800f722:	460c      	mov	r4, r1
 800f724:	4605      	mov	r5, r0
 800f726:	4680      	mov	r8, r0
 800f728:	dc34      	bgt.n	800f794 <floor+0x84>
 800f72a:	2e00      	cmp	r6, #0
 800f72c:	da17      	bge.n	800f75e <floor+0x4e>
 800f72e:	a332      	add	r3, pc, #200	@ (adr r3, 800f7f8 <floor+0xe8>)
 800f730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f734:	f7f0 fdaa 	bl	800028c <__adddf3>
 800f738:	2200      	movs	r2, #0
 800f73a:	2300      	movs	r3, #0
 800f73c:	f7f1 f9ec 	bl	8000b18 <__aeabi_dcmpgt>
 800f740:	b150      	cbz	r0, 800f758 <floor+0x48>
 800f742:	2c00      	cmp	r4, #0
 800f744:	da55      	bge.n	800f7f2 <floor+0xe2>
 800f746:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f74a:	432c      	orrs	r4, r5
 800f74c:	2500      	movs	r5, #0
 800f74e:	42ac      	cmp	r4, r5
 800f750:	4c2b      	ldr	r4, [pc, #172]	@ (800f800 <floor+0xf0>)
 800f752:	bf08      	it	eq
 800f754:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f758:	4621      	mov	r1, r4
 800f75a:	4628      	mov	r0, r5
 800f75c:	e023      	b.n	800f7a6 <floor+0x96>
 800f75e:	4f29      	ldr	r7, [pc, #164]	@ (800f804 <floor+0xf4>)
 800f760:	4137      	asrs	r7, r6
 800f762:	ea01 0307 	and.w	r3, r1, r7
 800f766:	4303      	orrs	r3, r0
 800f768:	d01d      	beq.n	800f7a6 <floor+0x96>
 800f76a:	a323      	add	r3, pc, #140	@ (adr r3, 800f7f8 <floor+0xe8>)
 800f76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f770:	f7f0 fd8c 	bl	800028c <__adddf3>
 800f774:	2200      	movs	r2, #0
 800f776:	2300      	movs	r3, #0
 800f778:	f7f1 f9ce 	bl	8000b18 <__aeabi_dcmpgt>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d0eb      	beq.n	800f758 <floor+0x48>
 800f780:	2c00      	cmp	r4, #0
 800f782:	bfbe      	ittt	lt
 800f784:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f788:	4133      	asrlt	r3, r6
 800f78a:	18e4      	addlt	r4, r4, r3
 800f78c:	ea24 0407 	bic.w	r4, r4, r7
 800f790:	2500      	movs	r5, #0
 800f792:	e7e1      	b.n	800f758 <floor+0x48>
 800f794:	2e33      	cmp	r6, #51	@ 0x33
 800f796:	dd0a      	ble.n	800f7ae <floor+0x9e>
 800f798:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f79c:	d103      	bne.n	800f7a6 <floor+0x96>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	f7f0 fd73 	bl	800028c <__adddf3>
 800f7a6:	ec41 0b10 	vmov	d0, r0, r1
 800f7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f7b2:	f04f 37ff 	mov.w	r7, #4294967295
 800f7b6:	40df      	lsrs	r7, r3
 800f7b8:	4207      	tst	r7, r0
 800f7ba:	d0f4      	beq.n	800f7a6 <floor+0x96>
 800f7bc:	a30e      	add	r3, pc, #56	@ (adr r3, 800f7f8 <floor+0xe8>)
 800f7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c2:	f7f0 fd63 	bl	800028c <__adddf3>
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	f7f1 f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	d0c2      	beq.n	800f758 <floor+0x48>
 800f7d2:	2c00      	cmp	r4, #0
 800f7d4:	da0a      	bge.n	800f7ec <floor+0xdc>
 800f7d6:	2e14      	cmp	r6, #20
 800f7d8:	d101      	bne.n	800f7de <floor+0xce>
 800f7da:	3401      	adds	r4, #1
 800f7dc:	e006      	b.n	800f7ec <floor+0xdc>
 800f7de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	40b3      	lsls	r3, r6
 800f7e6:	441d      	add	r5, r3
 800f7e8:	4545      	cmp	r5, r8
 800f7ea:	d3f6      	bcc.n	800f7da <floor+0xca>
 800f7ec:	ea25 0507 	bic.w	r5, r5, r7
 800f7f0:	e7b2      	b.n	800f758 <floor+0x48>
 800f7f2:	2500      	movs	r5, #0
 800f7f4:	462c      	mov	r4, r5
 800f7f6:	e7af      	b.n	800f758 <floor+0x48>
 800f7f8:	8800759c 	.word	0x8800759c
 800f7fc:	7e37e43c 	.word	0x7e37e43c
 800f800:	bff00000 	.word	0xbff00000
 800f804:	000fffff 	.word	0x000fffff

0800f808 <_init>:
 800f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80a:	bf00      	nop
 800f80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80e:	bc08      	pop	{r3}
 800f810:	469e      	mov	lr, r3
 800f812:	4770      	bx	lr

0800f814 <_fini>:
 800f814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f816:	bf00      	nop
 800f818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f81a:	bc08      	pop	{r3}
 800f81c:	469e      	mov	lr, r3
 800f81e:	4770      	bx	lr
