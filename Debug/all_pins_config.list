
all_pins_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800e0a8  0800e0a8  0000f0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e890  0800e890  0001024c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e890  0800e890  0000f890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e898  0800e898  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e898  0800e898  0000f898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e89c  0800e89c  0000f89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800e8a0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001024c  2**0
                  CONTENTS
 10 .bss          000009e8  20000250  20000250  00010250  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000c38  20000c38  00010250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013499  00000000  00000000  0001027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002544  00000000  00000000  00023715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00025c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eae  00000000  00000000  00026ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d61  00000000  00000000  00027d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001561f  00000000  00000000  00049ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de4fc  00000000  00000000  0005f106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d602  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000678c  00000000  00000000  0013d648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00143dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e090 	.word	0x0800e090

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800e090 	.word	0x0800e090

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001024:	f3bf 8f4f 	dsb	sy
}
 8001028:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <__NVIC_SystemReset+0x24>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001032:	4904      	ldr	r1, [pc, #16]	@ (8001044 <__NVIC_SystemReset+0x24>)
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_SystemReset+0x28>)
 8001036:	4313      	orrs	r3, r2
 8001038:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800103a:	f3bf 8f4f 	dsb	sy
}
 800103e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <__NVIC_SystemReset+0x20>
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	05fa0004 	.word	0x05fa0004

0800104c <constrain>:
volatile int lower_base = 40000;

int prev = 0;
int prev_loco = 0;

int constrain(int value, int min, int max) {
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	if (value < min)
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	429a      	cmp	r2, r3
 800105e:	da01      	bge.n	8001064 <constrain+0x18>
		return min;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	e006      	b.n	8001072 <constrain+0x26>
	else if (value > max)
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dd01      	ble.n	8001070 <constrain+0x24>
		return max;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	e000      	b.n	8001072 <constrain+0x26>
	else
		return value;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <constrain_float>:

float constrain_float(float value,float min,float max){
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	ed87 0a03 	vstr	s0, [r7, #12]
 8001088:	edc7 0a02 	vstr	s1, [r7, #8]
 800108c:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value<min){
 8001090:	ed97 7a03 	vldr	s14, [r7, #12]
 8001094:	edd7 7a02 	vldr	s15, [r7, #8]
 8001098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a0:	d501      	bpl.n	80010a6 <constrain_float+0x28>
		return min;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	e00b      	b.n	80010be <constrain_float+0x40>
	}
	else if(value> max){
 80010a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	dd01      	ble.n	80010bc <constrain_float+0x3e>
		return max;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	e000      	b.n	80010be <constrain_float+0x40>
	}
	else{
		return value;
 80010bc:	68fb      	ldr	r3, [r7, #12]
	}
}
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <dis_cal>:
		*value = (~*value) + 1;
	}
//	return value;
}

void dis_cal() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

	// if (ARdistance > 0.0) {
	ARdistance = 5;
 80010d4:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <dis_cal+0x100>)
 80010d6:	4a3f      	ldr	r2, [pc, #252]	@ (80011d4 <dis_cal+0x104>)
 80010d8:	601a      	str	r2, [r3, #0]
	RPM_set_lower =2850;//(isthreepointer) ?(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 160)<0? (~(int)(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 160) +1):(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 160) :2900;
 80010da:	4b3f      	ldr	r3, [pc, #252]	@ (80011d8 <dis_cal+0x108>)
 80010dc:	f640 3222 	movw	r2, #2850	@ 0xb22
 80010e0:	601a      	str	r2, [r3, #0]
	RPM_set_lower = constrain(RPM_set_lower, 0, 3200);
 80010e2:	4b3d      	ldr	r3, [pc, #244]	@ (80011d8 <dis_cal+0x108>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffad 	bl	800104c <constrain>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a38      	ldr	r2, [pc, #224]	@ (80011d8 <dis_cal+0x108>)
 80010f6:	6013      	str	r3, [r2, #0]
	RPM_set_upper =2200;//(isthreepointer) ?(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 190)<0? (~(int)(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 190) +1):(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 190) :900;
 80010f8:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <dis_cal+0x10c>)
 80010fa:	f640 0298 	movw	r2, #2200	@ 0x898
 80010fe:	601a      	str	r2, [r3, #0]
	RPM_set_upper = constrain(RPM_set_upper, 0, 3200);
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <dis_cal+0x10c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff9e 	bl	800104c <constrain>
 8001110:	4603      	mov	r3, r0
 8001112:	4a32      	ldr	r2, [pc, #200]	@ (80011dc <dis_cal+0x10c>)
 8001114:	6013      	str	r3, [r2, #0]
	lower_base = 17.2*RPM_set_lower + 4088.9+1400;
 8001116:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <dis_cal+0x108>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa02 	bl	8000524 <__aeabi_i2d>
 8001120:	a323      	add	r3, pc, #140	@ (adr r3, 80011b0 <dis_cal+0xe0>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fa67 	bl	80005f8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	a321      	add	r3, pc, #132	@ (adr r3, 80011b8 <dis_cal+0xe8>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff f8a8 	bl	800028c <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <dis_cal+0x110>)
 800114a:	f7ff f89f 	bl	800028c <__adddf3>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fcff 	bl	8000b58 <__aeabi_d2iz>
 800115a:	4603      	mov	r3, r0
 800115c:	4a21      	ldr	r2, [pc, #132]	@ (80011e4 <dis_cal+0x114>)
 800115e:	6013      	str	r3, [r2, #0]
	upper_base = 16.877*RPM_set_upper + 5313.2+1000;
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <dis_cal+0x10c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9dd 	bl	8000524 <__aeabi_i2d>
 800116a:	a315      	add	r3, pc, #84	@ (adr r3, 80011c0 <dis_cal+0xf0>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fa42 	bl	80005f8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	a312      	add	r3, pc, #72	@ (adr r3, 80011c8 <dis_cal+0xf8>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff f883 	bl	800028c <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <dis_cal+0x118>)
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fcda 	bl	8000b58 <__aeabi_d2iz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <dis_cal+0x11c>)
 80011a8:	6013      	str	r3, [r2, #0]
	// }
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	33333333 	.word	0x33333333
 80011b4:	40313333 	.word	0x40313333
 80011b8:	cccccccd 	.word	0xcccccccd
 80011bc:	40aff1cc 	.word	0x40aff1cc
 80011c0:	126e978d 	.word	0x126e978d
 80011c4:	4030e083 	.word	0x4030e083
 80011c8:	33333333 	.word	0x33333333
 80011cc:	40b4c133 	.word	0x40b4c133
 80011d0:	20000050 	.word	0x20000050
 80011d4:	40a00000 	.word	0x40a00000
 80011d8:	20000068 	.word	0x20000068
 80011dc:	2000006c 	.word	0x2000006c
 80011e0:	4095e000 	.word	0x4095e000
 80011e4:	20000074 	.word	0x20000074
 80011e8:	408f4000 	.word	0x408f4000
 80011ec:	20000070 	.word	0x20000070

080011f0 <rotors>:

void rotors(bool flag) {
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	// upper pwm  PE5 tim9 channel 1
	// lower pwm  PE6 tim9 channel 2

	// upper direction PE1
	// lower direction PE3
	if (!flag) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f083 0301 	eor.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <rotors+0x24>
		TIM9->CCR1 = 0;
 8001206:	4b7a      	ldr	r3, [pc, #488]	@ (80013f0 <rotors+0x200>)
 8001208:	2200      	movs	r2, #0
 800120a:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM9->CCR2 = 0;
 800120c:	4b78      	ldr	r3, [pc, #480]	@ (80013f0 <rotors+0x200>)
 800120e:	2200      	movs	r2, #0
 8001210:	639a      	str	r2, [r3, #56]	@ 0x38
		return;
 8001212:	e0ea      	b.n	80013ea <rotors+0x1fa>
	} else
		dis_cal();
 8001214:	f7ff ff5c 	bl	80010d0 <dis_cal>
	if (HAL_GetTick() - prev >= 80)
 8001218:	f003 fefc 	bl	8005014 <HAL_GetTick>
 800121c:	4603      	mov	r3, r0
 800121e:	4a75      	ldr	r2, [pc, #468]	@ (80013f4 <rotors+0x204>)
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	1a9b      	subs	r3, r3, r2
 8001224:	2b4f      	cmp	r3, #79	@ 0x4f
 8001226:	f240 80e0 	bls.w	80013ea <rotors+0x1fa>

	{
		counter_upper = TIM4->CNT;
 800122a:	4b73      	ldr	r3, [pc, #460]	@ (80013f8 <rotors+0x208>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b72      	ldr	r3, [pc, #456]	@ (80013fc <rotors+0x20c>)
 8001232:	801a      	strh	r2, [r3, #0]
		counter_lower = TIM8->CNT;
 8001234:	4b72      	ldr	r3, [pc, #456]	@ (8001400 <rotors+0x210>)
 8001236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b72      	ldr	r3, [pc, #456]	@ (8001404 <rotors+0x214>)
 800123c:	801a      	strh	r2, [r3, #0]
		counter_upper = counter_upper / 4;
 800123e:	4b6f      	ldr	r3, [pc, #444]	@ (80013fc <rotors+0x20c>)
 8001240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da00      	bge.n	800124a <rotors+0x5a>
 8001248:	3303      	adds	r3, #3
 800124a:	109b      	asrs	r3, r3, #2
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b6b      	ldr	r3, [pc, #428]	@ (80013fc <rotors+0x20c>)
 8001250:	801a      	strh	r2, [r3, #0]
		rpm_upper = (counter_upper * 60000)/(360*((int32_t)HAL_GetTick() - prev));
 8001252:	4b6a      	ldr	r3, [pc, #424]	@ (80013fc <rotors+0x20c>)
 8001254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001258:	461a      	mov	r2, r3
 800125a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800125e:	fb03 f402 	mul.w	r4, r3, r2
 8001262:	f003 fed7 	bl	8005014 <HAL_GetTick>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b62      	ldr	r3, [pc, #392]	@ (80013f4 <rotors+0x204>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	fb94 f3f3 	sdiv	r3, r4, r3
 800127c:	4a62      	ldr	r2, [pc, #392]	@ (8001408 <rotors+0x218>)
 800127e:	6013      	str	r3, [r2, #0]

		counter_lower = counter_lower / 4;
 8001280:	4b60      	ldr	r3, [pc, #384]	@ (8001404 <rotors+0x214>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	2b00      	cmp	r3, #0
 8001288:	da00      	bge.n	800128c <rotors+0x9c>
 800128a:	3303      	adds	r3, #3
 800128c:	109b      	asrs	r3, r3, #2
 800128e:	b21a      	sxth	r2, r3
 8001290:	4b5c      	ldr	r3, [pc, #368]	@ (8001404 <rotors+0x214>)
 8001292:	801a      	strh	r2, [r3, #0]
		rpm_lower =(counter_lower * 60000)/(360*((int32_t)HAL_GetTick() - prev));
 8001294:	4b5b      	ldr	r3, [pc, #364]	@ (8001404 <rotors+0x214>)
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	461a      	mov	r2, r3
 800129c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80012a0:	fb03 f402 	mul.w	r4, r3, r2
 80012a4:	f003 feb6 	bl	8005014 <HAL_GetTick>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b51      	ldr	r3, [pc, #324]	@ (80013f4 <rotors+0x204>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	fb94 f3f3 	sdiv	r3, r4, r3
 80012be:	4a53      	ldr	r2, [pc, #332]	@ (800140c <rotors+0x21c>)
 80012c0:	6013      	str	r3, [r2, #0]
		rpm_upper = (rpm_upper)<0?(~rpm_upper +1):rpm_upper;
 80012c2:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <rotors+0x218>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da03      	bge.n	80012d2 <rotors+0xe2>
 80012ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001408 <rotors+0x218>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	425b      	negs	r3, r3
 80012d0:	e001      	b.n	80012d6 <rotors+0xe6>
 80012d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001408 <rotors+0x218>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001408 <rotors+0x218>)
 80012d8:	6013      	str	r3, [r2, #0]
		rpm_lower = (rpm_lower)<0?(~rpm_lower +1):rpm_lower;
 80012da:	4b4c      	ldr	r3, [pc, #304]	@ (800140c <rotors+0x21c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	da03      	bge.n	80012ea <rotors+0xfa>
 80012e2:	4b4a      	ldr	r3, [pc, #296]	@ (800140c <rotors+0x21c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	425b      	negs	r3, r3
 80012e8:	e001      	b.n	80012ee <rotors+0xfe>
 80012ea:	4b48      	ldr	r3, [pc, #288]	@ (800140c <rotors+0x21c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a47      	ldr	r2, [pc, #284]	@ (800140c <rotors+0x21c>)
 80012f0:	6013      	str	r3, [r2, #0]
		error_upper = RPM_set_upper - rpm_upper;
 80012f2:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <rotors+0x220>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b44      	ldr	r3, [pc, #272]	@ (8001408 <rotors+0x218>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a45      	ldr	r2, [pc, #276]	@ (8001414 <rotors+0x224>)
 80012fe:	6013      	str	r3, [r2, #0]
		error_lower = RPM_set_lower - rpm_lower;
 8001300:	4b45      	ldr	r3, [pc, #276]	@ (8001418 <rotors+0x228>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b41      	ldr	r3, [pc, #260]	@ (800140c <rotors+0x21c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	4a44      	ldr	r2, [pc, #272]	@ (800141c <rotors+0x22c>)
 800130c:	6013      	str	r3, [r2, #0]

		pwm_upper = upper_base +(kpUpper * error_upper);
 800130e:	4b44      	ldr	r3, [pc, #272]	@ (8001420 <rotors+0x230>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <rotors+0x224>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001326:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <rotors+0x234>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001338:	ee17 2a90 	vmov	r2, s15
 800133c:	4b3a      	ldr	r3, [pc, #232]	@ (8001428 <rotors+0x238>)
 800133e:	601a      	str	r2, [r3, #0]
		pwm_lower = lower_base +(kpLower * error_lower);
 8001340:	4b3a      	ldr	r3, [pc, #232]	@ (800142c <rotors+0x23c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134c:	4b33      	ldr	r3, [pc, #204]	@ (800141c <rotors+0x22c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001358:	4b35      	ldr	r3, [pc, #212]	@ (8001430 <rotors+0x240>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <rotors+0x244>)
 8001370:	601a      	str	r2, [r3, #0]

		pwm_upper = constrain(pwm_upper, 0, 65500);
 8001372:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <rotors+0x238>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe65 	bl	800104c <constrain>
 8001382:	4603      	mov	r3, r0
 8001384:	4a28      	ldr	r2, [pc, #160]	@ (8001428 <rotors+0x238>)
 8001386:	6013      	str	r3, [r2, #0]
		pwm_lower = constrain(pwm_lower, 0, 65500);
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <rotors+0x244>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe5a 	bl	800104c <constrain>
 8001398:	4603      	mov	r3, r0
 800139a:	4a26      	ldr	r2, [pc, #152]	@ (8001434 <rotors+0x244>)
 800139c:	6013      	str	r3, [r2, #0]



		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2102      	movs	r1, #2
 80013a2:	4825      	ldr	r0, [pc, #148]	@ (8001438 <rotors+0x248>)
 80013a4:	f005 f916 	bl	80065d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2108      	movs	r1, #8
 80013ac:	4822      	ldr	r0, [pc, #136]	@ (8001438 <rotors+0x248>)
 80013ae:	f005 f911 	bl	80065d4 <HAL_GPIO_WritePin>

		TIM9->CCR1 =pwm_upper;  //UPPER
 80013b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <rotors+0x238>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <rotors+0x200>)
 80013b8:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM9->CCR2 =pwm_lower;  //LOWER
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <rotors+0x244>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <rotors+0x200>)
 80013c0:	639a      	str	r2, [r3, #56]	@ 0x38
		prev = HAL_GetTick();
 80013c2:	f003 fe27 	bl	8005014 <HAL_GetTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <rotors+0x204>)
 80013cc:	601a      	str	r2, [r3, #0]
		counter_upper=0;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <rotors+0x20c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
		counter_lower = 0;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <rotors+0x214>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <rotors+0x24c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim8, 0);
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <rotors+0x250>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

	}

}
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	40014000 	.word	0x40014000
 80013f4:	20000548 	.word	0x20000548
 80013f8:	40000800 	.word	0x40000800
 80013fc:	20000518 	.word	0x20000518
 8001400:	40010400 	.word	0x40010400
 8001404:	2000051a 	.word	0x2000051a
 8001408:	20000524 	.word	0x20000524
 800140c:	20000528 	.word	0x20000528
 8001410:	2000006c 	.word	0x2000006c
 8001414:	20000538 	.word	0x20000538
 8001418:	20000068 	.word	0x20000068
 800141c:	2000053c 	.word	0x2000053c
 8001420:	20000070 	.word	0x20000070
 8001424:	20000048 	.word	0x20000048
 8001428:	20000540 	.word	0x20000540
 800142c:	20000074 	.word	0x20000074
 8001430:	20000044 	.word	0x20000044
 8001434:	20000544 	.word	0x20000544
 8001438:	40021000 	.word	0x40021000
 800143c:	20000440 	.word	0x20000440
 8001440:	200004d0 	.word	0x200004d0

08001444 <feed>:

void feed() {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pistonUp_Port, pistonUp_Pin, 1);
 8001448:	2201      	movs	r2, #1
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	480e      	ldr	r0, [pc, #56]	@ (8001488 <feed+0x44>)
 800144e:	f005 f8c1 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001452:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001456:	f003 fde9 	bl	800502c <HAL_Delay>
	HAL_GPIO_WritePin(pistonUp_Port, pistonUp_Pin, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2180      	movs	r1, #128	@ 0x80
 800145e:	480a      	ldr	r0, [pc, #40]	@ (8001488 <feed+0x44>)
 8001460:	f005 f8b8 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	2110      	movs	r1, #16
 8001468:	4808      	ldr	r0, [pc, #32]	@ (800148c <feed+0x48>)
 800146a:	f005 f8b3 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800146e:	20c8      	movs	r0, #200	@ 0xc8
 8001470:	f003 fddc 	bl	800502c <HAL_Delay>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2110      	movs	r1, #16
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <feed+0x48>)
 800147a:	f005 f8ab 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800147e:	20c8      	movs	r0, #200	@ 0xc8
 8001480:	f003 fdd4 	bl	800502c <HAL_Delay>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40020400 	.word	0x40020400

08001490 <rpm_cal>:

void rpm_cal() {
 8001490:	b598      	push	{r3, r4, r7, lr}
 8001492:	af00      	add	r7, sp, #0

	if (HAL_GetTick() - prev_loco >= 80) {
 8001494:	f003 fdbe 	bl	8005014 <HAL_GetTick>
 8001498:	4603      	mov	r3, r0
 800149a:	4a59      	ldr	r2, [pc, #356]	@ (8001600 <rpm_cal+0x170>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	2b4f      	cmp	r3, #79	@ 0x4f
 80014a2:	f240 80ab 	bls.w	80015fc <rpm_cal+0x16c>

		counter_4 = TIM1->CNT;
 80014a6:	4b57      	ldr	r3, [pc, #348]	@ (8001604 <rpm_cal+0x174>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b56      	ldr	r3, [pc, #344]	@ (8001608 <rpm_cal+0x178>)
 80014ae:	801a      	strh	r2, [r3, #0]
		counter_5 = TIM3->CNT;
 80014b0:	4b56      	ldr	r3, [pc, #344]	@ (800160c <rpm_cal+0x17c>)
 80014b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b56      	ldr	r3, [pc, #344]	@ (8001610 <rpm_cal+0x180>)
 80014b8:	801a      	strh	r2, [r3, #0]
		counter_8 = TIM5->CNT;
 80014ba:	4b56      	ldr	r3, [pc, #344]	@ (8001614 <rpm_cal+0x184>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	b21a      	sxth	r2, r3
 80014c0:	4b55      	ldr	r3, [pc, #340]	@ (8001618 <rpm_cal+0x188>)
 80014c2:	801a      	strh	r2, [r3, #0]

		counter_8 = counter_8 / 4;
 80014c4:	4b54      	ldr	r3, [pc, #336]	@ (8001618 <rpm_cal+0x188>)
 80014c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da00      	bge.n	80014d0 <rpm_cal+0x40>
 80014ce:	3303      	adds	r3, #3
 80014d0:	109b      	asrs	r3, r3, #2
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b50      	ldr	r3, [pc, #320]	@ (8001618 <rpm_cal+0x188>)
 80014d6:	801a      	strh	r2, [r3, #0]
		rpm1 = (counter_8 *60000)/(360*((int32_t)HAL_GetTick()-prev_loco));
 80014d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <rpm_cal+0x188>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	461a      	mov	r2, r3
 80014e0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80014e4:	fb03 f402 	mul.w	r4, r3, r2
 80014e8:	f003 fd94 	bl	8005014 <HAL_GetTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b43      	ldr	r3, [pc, #268]	@ (8001600 <rpm_cal+0x170>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	fb94 f3f3 	sdiv	r3, r4, r3
 8001502:	4a46      	ldr	r2, [pc, #280]	@ (800161c <rpm_cal+0x18c>)
 8001504:	6013      	str	r3, [r2, #0]

		counter_5 = counter_5 / 4;
 8001506:	4b42      	ldr	r3, [pc, #264]	@ (8001610 <rpm_cal+0x180>)
 8001508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150c:	2b00      	cmp	r3, #0
 800150e:	da00      	bge.n	8001512 <rpm_cal+0x82>
 8001510:	3303      	adds	r3, #3
 8001512:	109b      	asrs	r3, r3, #2
 8001514:	b21a      	sxth	r2, r3
 8001516:	4b3e      	ldr	r3, [pc, #248]	@ (8001610 <rpm_cal+0x180>)
 8001518:	801a      	strh	r2, [r3, #0]
		rpm2 = (counter_5 *60000)/(600*((int32_t)HAL_GetTick()-prev_loco));
 800151a:	4b3d      	ldr	r3, [pc, #244]	@ (8001610 <rpm_cal+0x180>)
 800151c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001520:	461a      	mov	r2, r3
 8001522:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001526:	fb03 f402 	mul.w	r4, r3, r2
 800152a:	f003 fd73 	bl	8005014 <HAL_GetTick>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b33      	ldr	r3, [pc, #204]	@ (8001600 <rpm_cal+0x170>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	fb94 f3f3 	sdiv	r3, r4, r3
 8001544:	4a36      	ldr	r2, [pc, #216]	@ (8001620 <rpm_cal+0x190>)
 8001546:	6013      	str	r3, [r2, #0]
//		rpm1 = (counter_8 *60000)/(600*((int32_t)HAL_GetTick()-prev_loco));
//
//		counter_5 = counter_5 / 4;
//		rpm2 = (counter_5 *60000)/(360*((int32_t)HAL_GetTick()-prev_loco));

		counter_4 = counter_4 / 4;
 8001548:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <rpm_cal+0x178>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	2b00      	cmp	r3, #0
 8001550:	da00      	bge.n	8001554 <rpm_cal+0xc4>
 8001552:	3303      	adds	r3, #3
 8001554:	109b      	asrs	r3, r3, #2
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <rpm_cal+0x178>)
 800155a:	801a      	strh	r2, [r3, #0]
		rpm3 =(counter_4 *60000)/(360*((int32_t)HAL_GetTick() -prev_loco));
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <rpm_cal+0x178>)
 800155e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001562:	461a      	mov	r2, r3
 8001564:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001568:	fb03 f402 	mul.w	r4, r3, r2
 800156c:	f003 fd52 	bl	8005014 <HAL_GetTick>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <rpm_cal+0x170>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	fb94 f3f3 	sdiv	r3, r4, r3
 8001586:	4a27      	ldr	r2, [pc, #156]	@ (8001624 <rpm_cal+0x194>)
 8001588:	6013      	str	r3, [r2, #0]

		rpm1 = (rpm1<0)?(~rpm1) +1 : rpm1;
 800158a:	4b24      	ldr	r3, [pc, #144]	@ (800161c <rpm_cal+0x18c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	da03      	bge.n	800159a <rpm_cal+0x10a>
 8001592:	4b22      	ldr	r3, [pc, #136]	@ (800161c <rpm_cal+0x18c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	425b      	negs	r3, r3
 8001598:	e001      	b.n	800159e <rpm_cal+0x10e>
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <rpm_cal+0x18c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1f      	ldr	r2, [pc, #124]	@ (800161c <rpm_cal+0x18c>)
 80015a0:	6013      	str	r3, [r2, #0]
		rpm2 = (rpm2<0)?(~rpm2) +1: rpm2;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <rpm_cal+0x190>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da03      	bge.n	80015b2 <rpm_cal+0x122>
 80015aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <rpm_cal+0x190>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	425b      	negs	r3, r3
 80015b0:	e001      	b.n	80015b6 <rpm_cal+0x126>
 80015b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <rpm_cal+0x190>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001620 <rpm_cal+0x190>)
 80015b8:	6013      	str	r3, [r2, #0]
		rpm3 = (rpm3<0)?(~rpm3)+1:rpm3;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <rpm_cal+0x194>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	da03      	bge.n	80015ca <rpm_cal+0x13a>
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <rpm_cal+0x194>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	425b      	negs	r3, r3
 80015c8:	e001      	b.n	80015ce <rpm_cal+0x13e>
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <rpm_cal+0x194>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <rpm_cal+0x194>)
 80015d0:	6013      	str	r3, [r2, #0]
//			  rotors();

		prev_loco = HAL_GetTick();
 80015d2:	f003 fd1f 	bl	8005014 <HAL_GetTick>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <rpm_cal+0x170>)
 80015dc:	601a      	str	r2, [r3, #0]
		counter_4, counter_5, counter_8 = 0;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <rpm_cal+0x188>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <rpm_cal+0x198>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <rpm_cal+0x19c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 80015f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <rpm_cal+0x1a0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24

	}
}
 80015fc:	bf00      	nop
 80015fe:	bd98      	pop	{r3, r4, r7, pc}
 8001600:	2000054c 	.word	0x2000054c
 8001604:	40010000 	.word	0x40010000
 8001608:	2000051c 	.word	0x2000051c
 800160c:	40000400 	.word	0x40000400
 8001610:	2000051e 	.word	0x2000051e
 8001614:	40000c00 	.word	0x40000c00
 8001618:	20000520 	.word	0x20000520
 800161c:	2000052c 	.word	0x2000052c
 8001620:	20000530 	.word	0x20000530
 8001624:	20000534 	.word	0x20000534
 8001628:	200003b0 	.word	0x200003b0
 800162c:	200003f8 	.word	0x200003f8
 8001630:	20000488 	.word	0x20000488
 8001634:	00000000 	.word	0x00000000

08001638 <Rxvalueslo>:
//
////	}
//}


int Rxvalueslo(char *Rx_data){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
//	if(Rx_data!=NULL && Rx_data[1] =='{'){
		a++;
 8001640:	4b93      	ldr	r3, [pc, #588]	@ (8001890 <Rxvalueslo+0x258>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a92      	ldr	r2, [pc, #584]	@ (8001890 <Rxvalueslo+0x258>)
 8001648:	6013      	str	r3, [r2, #0]
		loco = Rx_data[9];
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a5a      	ldrb	r2, [r3, #9]
 800164e:	4b91      	ldr	r3, [pc, #580]	@ (8001894 <Rxvalueslo+0x25c>)
 8001650:	701a      	strb	r2, [r3, #0]
		chstr = Rx_data[8];
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7a1a      	ldrb	r2, [r3, #8]
 8001656:	4b90      	ldr	r3, [pc, #576]	@ (8001898 <Rxvalueslo+0x260>)
 8001658:	701a      	strb	r2, [r3, #0]

		char Rotate[4];
		strncpy(Rotate, Rx_data +9, 3);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f103 0109 	add.w	r1, r3, #9
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2203      	movs	r2, #3
 8001666:	4618      	mov	r0, r3
 8001668:	f009 f990 	bl	800a98c <strncpy>
		rotationstrength = atoi(Rotate);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4618      	mov	r0, r3
 8001672:	f007 fe01 	bl	8009278 <atoi>
 8001676:	4603      	mov	r3, r0
 8001678:	4a88      	ldr	r2, [pc, #544]	@ (800189c <Rxvalueslo+0x264>)
 800167a:	6013      	str	r3, [r2, #0]
		char Angle[4];
		strncpy(Angle, Rx_data +12, 3);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 010c 	add.w	r1, r3, #12
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	2203      	movs	r2, #3
 8001688:	4618      	mov	r0, r3
 800168a:	f009 f97f 	bl	800a98c <strncpy>
		angle = atoi(Angle);
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	4618      	mov	r0, r3
 8001694:	f007 fdf0 	bl	8009278 <atoi>
 8001698:	4603      	mov	r3, r0
 800169a:	4a81      	ldr	r2, [pc, #516]	@ (80018a0 <Rxvalueslo+0x268>)
 800169c:	6013      	str	r3, [r2, #0]
//		angle = (angle == 400) ? 400 : (angle + 180) % 360;

		char Strength[4];
		strncpy(Strength, Rx_data +15, 3);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f103 010f 	add.w	r1, r3, #15
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2203      	movs	r2, #3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f009 f96e 	bl	800a98c <strncpy>
		strengthX = atoi(Strength);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4618      	mov	r0, r3
 80016b6:	f007 fddf 	bl	8009278 <atoi>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a79      	ldr	r2, [pc, #484]	@ (80018a4 <Rxvalueslo+0x26c>)
 80016be:	6013      	str	r3, [r2, #0]
		 if ((int32_t)HAL_GetTick() - strengthsampling > 30) {
 80016c0:	f003 fca8 	bl	8005014 <HAL_GetTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b77      	ldr	r3, [pc, #476]	@ (80018a8 <Rxvalueslo+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b1e      	cmp	r3, #30
 80016d0:	f340 80c3 	ble.w	800185a <Rxvalueslo+0x222>
			if (strengthX - strengthc >30) {
 80016d4:	4b73      	ldr	r3, [pc, #460]	@ (80018a4 <Rxvalueslo+0x26c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b74      	ldr	r3, [pc, #464]	@ (80018ac <Rxvalueslo+0x274>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b1e      	cmp	r3, #30
 80016e0:	dd23      	ble.n	800172a <Rxvalueslo+0xf2>
				strengthX -= (strengthX - strengthc) * 0.89;
 80016e2:	4b70      	ldr	r3, [pc, #448]	@ (80018a4 <Rxvalueslo+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff1c 	bl	8000524 <__aeabi_i2d>
 80016ec:	4604      	mov	r4, r0
 80016ee:	460d      	mov	r5, r1
 80016f0:	4b6c      	ldr	r3, [pc, #432]	@ (80018a4 <Rxvalueslo+0x26c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b6d      	ldr	r3, [pc, #436]	@ (80018ac <Rxvalueslo+0x274>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff12 	bl	8000524 <__aeabi_i2d>
 8001700:	a35d      	add	r3, pc, #372	@ (adr r3, 8001878 <Rxvalueslo+0x240>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff77 	bl	80005f8 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4620      	mov	r0, r4
 8001710:	4629      	mov	r1, r5
 8001712:	f7fe fdb9 	bl	8000288 <__aeabi_dsub>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa1b 	bl	8000b58 <__aeabi_d2iz>
 8001722:	4603      	mov	r3, r0
 8001724:	4a5f      	ldr	r2, [pc, #380]	@ (80018a4 <Rxvalueslo+0x26c>)
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e089      	b.n	800183e <Rxvalueslo+0x206>
			 } else if (strengthX - strengthc < -30) {
 800172a:	4b5e      	ldr	r3, [pc, #376]	@ (80018a4 <Rxvalueslo+0x26c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b5f      	ldr	r3, [pc, #380]	@ (80018ac <Rxvalueslo+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f113 0f1e 	cmn.w	r3, #30
 8001738:	f280 8081 	bge.w	800183e <Rxvalueslo+0x206>

				       if((int)(angle - Z_Val ) %360 > 140 && (int)(angle - Z_Val ) %360 < 220)
 800173c:	4b58      	ldr	r3, [pc, #352]	@ (80018a0 <Rxvalueslo+0x268>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001748:	4b59      	ldr	r3, [pc, #356]	@ (80018b0 <Rxvalueslo+0x278>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001756:	ee17 2a90 	vmov	r2, s15
 800175a:	4b56      	ldr	r3, [pc, #344]	@ (80018b4 <Rxvalueslo+0x27c>)
 800175c:	fb83 1302 	smull	r1, r3, r3, r2
 8001760:	4413      	add	r3, r2
 8001762:	1219      	asrs	r1, r3, #8
 8001764:	17d3      	asrs	r3, r2, #31
 8001766:	1acb      	subs	r3, r1, r3
 8001768:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b8c      	cmp	r3, #140	@ 0x8c
 8001774:	dd40      	ble.n	80017f8 <Rxvalueslo+0x1c0>
 8001776:	4b4a      	ldr	r3, [pc, #296]	@ (80018a0 <Rxvalueslo+0x268>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001782:	4b4b      	ldr	r3, [pc, #300]	@ (80018b0 <Rxvalueslo+0x278>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001790:	ee17 2a90 	vmov	r2, s15
 8001794:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <Rxvalueslo+0x27c>)
 8001796:	fb83 1302 	smull	r1, r3, r3, r2
 800179a:	4413      	add	r3, r2
 800179c:	1219      	asrs	r1, r3, #8
 800179e:	17d3      	asrs	r3, r2, #31
 80017a0:	1acb      	subs	r3, r1, r3
 80017a2:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2bdb      	cmp	r3, #219	@ 0xdb
 80017ae:	dc23      	bgt.n	80017f8 <Rxvalueslo+0x1c0>

				       {
				    	   strengthX -= (strengthX - strengthc) * 0.97;
 80017b0:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <Rxvalueslo+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe feb5 	bl	8000524 <__aeabi_i2d>
 80017ba:	4604      	mov	r4, r0
 80017bc:	460d      	mov	r5, r1
 80017be:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <Rxvalueslo+0x26c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <Rxvalueslo+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe feab 	bl	8000524 <__aeabi_i2d>
 80017ce:	a32c      	add	r3, pc, #176	@ (adr r3, 8001880 <Rxvalueslo+0x248>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe ff10 	bl	80005f8 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4620      	mov	r0, r4
 80017de:	4629      	mov	r1, r5
 80017e0:	f7fe fd52 	bl	8000288 <__aeabi_dsub>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f9b4 	bl	8000b58 <__aeabi_d2iz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4a2c      	ldr	r2, [pc, #176]	@ (80018a4 <Rxvalueslo+0x26c>)
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e022      	b.n	800183e <Rxvalueslo+0x206>
				       }
				       else
				       {

					   strengthX -= (strengthX - strengthc) * 0.90;
 80017f8:	4b2a      	ldr	r3, [pc, #168]	@ (80018a4 <Rxvalueslo+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe91 	bl	8000524 <__aeabi_i2d>
 8001802:	4604      	mov	r4, r0
 8001804:	460d      	mov	r5, r1
 8001806:	4b27      	ldr	r3, [pc, #156]	@ (80018a4 <Rxvalueslo+0x26c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <Rxvalueslo+0x274>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe87 	bl	8000524 <__aeabi_i2d>
 8001816:	a31c      	add	r3, pc, #112	@ (adr r3, 8001888 <Rxvalueslo+0x250>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe feec 	bl	80005f8 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd2e 	bl	8000288 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f990 	bl	8000b58 <__aeabi_d2iz>
 8001838:	4603      	mov	r3, r0
 800183a:	4a1a      	ldr	r2, [pc, #104]	@ (80018a4 <Rxvalueslo+0x26c>)
 800183c:	6013      	str	r3, [r2, #0]
		 	     }
			 }
		  	 strengthc = strengthX;
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <Rxvalueslo+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <Rxvalueslo+0x274>)
 8001844:	6013      	str	r3, [r2, #0]
					strength = strengthX;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <Rxvalueslo+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <Rxvalueslo+0x280>)
 800184c:	6013      	str	r3, [r2, #0]
					   strengthsampling = HAL_GetTick();
 800184e:	f003 fbe1 	bl	8005014 <HAL_GetTick>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <Rxvalueslo+0x270>)
 8001858:	601a      	str	r2, [r3, #0]
					 }
					 strength  = constrain(strength,0,85);
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <Rxvalueslo+0x280>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2255      	movs	r2, #85	@ 0x55
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fbf2 	bl	800104c <constrain>
 8001868:	4603      	mov	r3, r0
 800186a:	4a13      	ldr	r2, [pc, #76]	@ (80018b8 <Rxvalueslo+0x280>)
 800186c:	6013      	str	r3, [r2, #0]


//	}
}
 800186e:	bf00      	nop
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bdb0      	pop	{r4, r5, r7, pc}
 8001878:	47ae147b 	.word	0x47ae147b
 800187c:	3fec7ae1 	.word	0x3fec7ae1
 8001880:	70a3d70a 	.word	0x70a3d70a
 8001884:	3fef0a3d 	.word	0x3fef0a3d
 8001888:	cccccccd 	.word	0xcccccccd
 800188c:	3feccccc 	.word	0x3feccccc
 8001890:	20000388 	.word	0x20000388
 8001894:	20000040 	.word	0x20000040
 8001898:	2000026c 	.word	0x2000026c
 800189c:	20000324 	.word	0x20000324
 80018a0:	20000338 	.word	0x20000338
 80018a4:	20000330 	.word	0x20000330
 80018a8:	20000334 	.word	0x20000334
 80018ac:	2000032c 	.word	0x2000032c
 80018b0:	20000320 	.word	0x20000320
 80018b4:	b60b60b7 	.word	0xb60b60b7
 80018b8:	20000328 	.word	0x20000328

080018bc <Arvalueslo>:

int Arvalueslo(char *Ar_data){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
   if(Ar_data!= NULL){
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d017      	beq.n	80018fa <Arvalueslo+0x3e>
	   strncpy(disString,Ar_data +6,7);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3306      	adds	r3, #6
 80018ce:	2207      	movs	r2, #7
 80018d0:	4619      	mov	r1, r3
 80018d2:	480c      	ldr	r0, [pc, #48]	@ (8001904 <Arvalueslo+0x48>)
 80018d4:	f009 f85a 	bl	800a98c <strncpy>
	   strncpy(angleString,Ar_data + 20,7);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3314      	adds	r3, #20
 80018dc:	2207      	movs	r2, #7
 80018de:	4619      	mov	r1, r3
 80018e0:	4809      	ldr	r0, [pc, #36]	@ (8001908 <Arvalueslo+0x4c>)
 80018e2:	f009 f853 	bl	800a98c <strncpy>
	   sscanf(disString,"%f",&ARdistance);
 80018e6:	4a09      	ldr	r2, [pc, #36]	@ (800190c <Arvalueslo+0x50>)
 80018e8:	4909      	ldr	r1, [pc, #36]	@ (8001910 <Arvalueslo+0x54>)
 80018ea:	4806      	ldr	r0, [pc, #24]	@ (8001904 <Arvalueslo+0x48>)
 80018ec:	f008 ff2e 	bl	800a74c <siscanf>
	   sscanf(angleString,"%f",&alpha);
 80018f0:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <Arvalueslo+0x58>)
 80018f2:	4907      	ldr	r1, [pc, #28]	@ (8001910 <Arvalueslo+0x54>)
 80018f4:	4804      	ldr	r0, [pc, #16]	@ (8001908 <Arvalueslo+0x4c>)
 80018f6:	f008 ff29 	bl	800a74c <siscanf>
   }
}
 80018fa:	bf00      	nop
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200002e0 	.word	0x200002e0
 8001908:	200002e8 	.word	0x200002e8
 800190c:	20000050 	.word	0x20000050
 8001910:	0800e2a8 	.word	0x0800e2a8
 8001914:	200002b8 	.word	0x200002b8

08001918 <Mpuvalueslo>:
int Mpuvalueslo(char *Mp_data){
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	sscanf(Mp_data,"%f",&Z_Val);
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <Mpuvalueslo+0x1c>)
 8001922:	4905      	ldr	r1, [pc, #20]	@ (8001938 <Mpuvalueslo+0x20>)
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f008 ff11 	bl	800a74c <siscanf>
}
 800192a:	bf00      	nop
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000320 	.word	0x20000320
 8001938:	0800e2a8 	.word	0x0800e2a8
 800193c:	00000000 	.word	0x00000000

08001940 <align>:
 */

#ifndef SRC_ALIGNMENT_H_
#define SRC_ALIGNMENT_H_

bool align(float target) {
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	ed87 0a01 	vstr	s0, [r7, #4]

  float delta = target - Z_Val;
 800194a:	4bb9      	ldr	r3, [pc, #740]	@ (8001c30 <align+0x2f0>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ed97 7a01 	vldr	s14, [r7, #4]
 8001954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001958:	edc7 7a03 	vstr	s15, [r7, #12]
  if (delta > 180) {
 800195c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001960:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8001c34 <align+0x2f4>
 8001964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	dd07      	ble.n	800197e <align+0x3e>
    delta = delta - 360;
 800196e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001972:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8001c38 <align+0x2f8>
 8001976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800197a:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  if (delta < -180) {
 800197e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001982:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8001c3c <align+0x2fc>
 8001986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	d507      	bpl.n	80019a0 <align+0x60>
    delta = delta + 360;
 8001990:	edd7 7a03 	vldr	s15, [r7, #12]
 8001994:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8001c38 <align+0x2f8>
 8001998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800199c:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  if (initialdelta == 0) {
 80019a0:	4ba7      	ldr	r3, [pc, #668]	@ (8001c40 <align+0x300>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	d102      	bne.n	80019b6 <align+0x76>
    initialdelta = delta;
 80019b0:	4aa3      	ldr	r2, [pc, #652]	@ (8001c40 <align+0x300>)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6013      	str	r3, [r2, #0]
  }


  s = delta;
 80019b6:	4aa3      	ldr	r2, [pc, #652]	@ (8001c44 <align+0x304>)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6013      	str	r3, [r2, #0]
  if (initialdelta < 0) {
 80019bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001c40 <align+0x300>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d52f      	bpl.n	8001a2c <align+0xec>
    if (delta > -1.6 + initialdelta*0.05 && delta < 1.6) {
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7fe fdbb 	bl	8000548 <__aeabi_f2d>
 80019d2:	4604      	mov	r4, r0
 80019d4:	460d      	mov	r5, r1
 80019d6:	4b9a      	ldr	r3, [pc, #616]	@ (8001c40 <align+0x300>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdb4 	bl	8000548 <__aeabi_f2d>
 80019e0:	a38b      	add	r3, pc, #556	@ (adr r3, 8001c10 <align+0x2d0>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe07 	bl	80005f8 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	a389      	add	r3, pc, #548	@ (adr r3, 8001c18 <align+0x2d8>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fc46 	bl	8000288 <__aeabi_dsub>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7ff f888 	bl	8000b18 <__aeabi_dcmpgt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d03d      	beq.n	8001a8a <align+0x14a>
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f7fe fd9a 	bl	8000548 <__aeabi_f2d>
 8001a14:	a380      	add	r3, pc, #512	@ (adr r3, 8001c18 <align+0x2d8>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7ff f85f 	bl	8000adc <__aeabi_dcmplt>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d032      	beq.n	8001a8a <align+0x14a>
      donealign = true;
 8001a24:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <align+0x308>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e02e      	b.n	8001a8a <align+0x14a>
    }
  } else {
    if (delta > -1.6 && delta < 1.6 + initialdelta*0.05) {
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7fe fd8b 	bl	8000548 <__aeabi_f2d>
 8001a32:	a37b      	add	r3, pc, #492	@ (adr r3, 8001c20 <align+0x2e0>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7ff f86e 	bl	8000b18 <__aeabi_dcmpgt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d023      	beq.n	8001a8a <align+0x14a>
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7fe fd80 	bl	8000548 <__aeabi_f2d>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	460d      	mov	r5, r1
 8001a4c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c40 <align+0x300>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd79 	bl	8000548 <__aeabi_f2d>
 8001a56:	a36e      	add	r3, pc, #440	@ (adr r3, 8001c10 <align+0x2d0>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fdcc 	bl	80005f8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	a36b      	add	r3, pc, #428	@ (adr r3, 8001c18 <align+0x2d8>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fc0d 	bl	800028c <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7ff f82f 	bl	8000adc <__aeabi_dcmplt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <align+0x14a>
      donealign = true;
 8001a84:	4b70      	ldr	r3, [pc, #448]	@ (8001c48 <align+0x308>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
    }
  }
  // if (abs(delta) < 1) {
  if (donealign) {
 8001a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c48 <align+0x308>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d02b      	beq.n	8001aea <align+0x1aa>
	if(delta < 2 && delta >-2){
 8001a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a96:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa2:	d51c      	bpl.n	8001ade <align+0x19e>
 8001aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	dd13      	ble.n	8001ade <align+0x19e>
    w = 0;
 8001ab6:	4b65      	ldr	r3, [pc, #404]	@ (8001c4c <align+0x30c>)
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
    alignn = true;
 8001abe:	4b64      	ldr	r3, [pc, #400]	@ (8001c50 <align+0x310>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
    integralalign = 0;
 8001ac4:	4b63      	ldr	r3, [pc, #396]	@ (8001c54 <align+0x314>)
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
    donealign = false;
 8001acc:	4b5e      	ldr	r3, [pc, #376]	@ (8001c48 <align+0x308>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
    initialdelta = 0;
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c40 <align+0x300>)
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
    return true;}
 8001ada:	2301      	movs	r3, #1
 8001adc:	e137      	b.n	8001d4e <align+0x40e>
	else{
		initialdelta =0;
 8001ade:	4b58      	ldr	r3, [pc, #352]	@ (8001c40 <align+0x300>)
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
		return false;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e131      	b.n	8001d4e <align+0x40e>
	}
  }
  if (HAL_GetTick() - previousalignsampling > 20) {
 8001aea:	f003 fa93 	bl	8005014 <HAL_GetTick>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a59      	ldr	r2, [pc, #356]	@ (8001c58 <align+0x318>)
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	2b14      	cmp	r3, #20
 8001af8:	f240 8128 	bls.w	8001d4c <align+0x40c>

    if (s< 120.0 && s > -120.0) {
 8001afc:	4b51      	ldr	r3, [pc, #324]	@ (8001c44 <align+0x304>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001c5c <align+0x31c>
 8001b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	f140 80fc 	bpl.w	8001d0a <align+0x3ca>
 8001b12:	4b4c      	ldr	r3, [pc, #304]	@ (8001c44 <align+0x304>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001c60 <align+0x320>
 8001b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	f340 80f1 	ble.w	8001d0a <align+0x3ca>
      if (s < 10.0 && s > -10.0) {
 8001b28:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <align+0x304>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	d522      	bpl.n	8001b82 <align+0x242>
 8001b3c:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <align+0x304>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dd18      	ble.n	8001b82 <align+0x242>
        integralalign += s;
 8001b50:	4b40      	ldr	r3, [pc, #256]	@ (8001c54 <align+0x314>)
 8001b52:	ed93 7a00 	vldr	s14, [r3]
 8001b56:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <align+0x304>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	4b3c      	ldr	r3, [pc, #240]	@ (8001c54 <align+0x314>)
 8001b62:	edc3 7a00 	vstr	s15, [r3]
        if (integralalign > 100) {
 8001b66:	4b3b      	ldr	r3, [pc, #236]	@ (8001c54 <align+0x314>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001c64 <align+0x324>
 8001b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dd07      	ble.n	8001b8a <align+0x24a>
          integralalign = 100.0;
 8001b7a:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <align+0x314>)
 8001b7c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c68 <align+0x328>)
 8001b7e:	601a      	str	r2, [r3, #0]
        if (integralalign > 100) {
 8001b80:	e003      	b.n	8001b8a <align+0x24a>
        }
      }
      else{
         integralalign = 0;
 8001b82:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <align+0x314>)
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
      }

      // w = (s < 0) ? s * 0.02 + (s - previousS) * 0.089 + 0.0000018*integralalign  : (s * 0.02  + (s - previousS) * 0.089 + 0.0000018*integralalign );
      errordiff_align = s - previousS;
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c44 <align+0x304>)
 8001b8c:	ed93 7a00 	vldr	s14, [r3]
 8001b90:	4b36      	ldr	r3, [pc, #216]	@ (8001c6c <align+0x32c>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9a:	4b35      	ldr	r3, [pc, #212]	@ (8001c70 <align+0x330>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
      if (s < 0) {
 8001ba0:	4b28      	ldr	r3, [pc, #160]	@ (8001c44 <align+0x304>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	d569      	bpl.n	8001c84 <align+0x344>
        w_align = kp_align * s + kd_align * errordiff_align + ki_align * integralalign - 0.2;
 8001bb0:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <align+0x334>)
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <align+0x304>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <align+0x338>)
 8001bc2:	edd3 6a00 	vldr	s13, [r3]
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <align+0x330>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd4:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <align+0x33c>)
 8001bd6:	edd3 6a00 	vldr	s13, [r3]
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <align+0x314>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	ee17 0a90 	vmov	r0, s15
 8001bec:	f7fe fcac 	bl	8000548 <__aeabi_f2d>
 8001bf0:	a30d      	add	r3, pc, #52	@ (adr r3, 8001c28 <align+0x2e8>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fb47 	bl	8000288 <__aeabi_dsub>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe fff1 	bl	8000be8 <__aeabi_d2f>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a1d      	ldr	r2, [pc, #116]	@ (8001c80 <align+0x340>)
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e068      	b.n	8001ce0 <align+0x3a0>
 8001c0e:	bf00      	nop
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	3fa99999 	.word	0x3fa99999
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	3ff99999 	.word	0x3ff99999
 8001c20:	9999999a 	.word	0x9999999a
 8001c24:	bff99999 	.word	0xbff99999
 8001c28:	9999999a 	.word	0x9999999a
 8001c2c:	3fc99999 	.word	0x3fc99999
 8001c30:	20000320 	.word	0x20000320
 8001c34:	43340000 	.word	0x43340000
 8001c38:	43b40000 	.word	0x43b40000
 8001c3c:	c3340000 	.word	0xc3340000
 8001c40:	200002f8 	.word	0x200002f8
 8001c44:	200002fc 	.word	0x200002fc
 8001c48:	20000300 	.word	0x20000300
 8001c4c:	20000350 	.word	0x20000350
 8001c50:	20000020 	.word	0x20000020
 8001c54:	20000304 	.word	0x20000304
 8001c58:	2000030c 	.word	0x2000030c
 8001c5c:	42f00000 	.word	0x42f00000
 8001c60:	c2f00000 	.word	0xc2f00000
 8001c64:	42c80000 	.word	0x42c80000
 8001c68:	42c80000 	.word	0x42c80000
 8001c6c:	20000310 	.word	0x20000310
 8001c70:	20000314 	.word	0x20000314
 8001c74:	20000028 	.word	0x20000028
 8001c78:	2000002c 	.word	0x2000002c
 8001c7c:	20000030 	.word	0x20000030
 8001c80:	20000308 	.word	0x20000308
      } else {
        w_align = kp_align * s + kd_align * errordiff_align + ki_align * integralalign + 0.2;
 8001c84:	4b36      	ldr	r3, [pc, #216]	@ (8001d60 <align+0x420>)
 8001c86:	ed93 7a00 	vldr	s14, [r3]
 8001c8a:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <align+0x424>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	4b34      	ldr	r3, [pc, #208]	@ (8001d68 <align+0x428>)
 8001c96:	edd3 6a00 	vldr	s13, [r3]
 8001c9a:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <align+0x42c>)
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca8:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <align+0x430>)
 8001caa:	edd3 6a00 	vldr	s13, [r3]
 8001cae:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <align+0x434>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	ee17 0a90 	vmov	r0, s15
 8001cc0:	f7fe fc42 	bl	8000548 <__aeabi_f2d>
 8001cc4:	a324      	add	r3, pc, #144	@ (adr r3, 8001d58 <align+0x418>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe fadf 	bl	800028c <__adddf3>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7fe ff87 	bl	8000be8 <__aeabi_d2f>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a26      	ldr	r2, [pc, #152]	@ (8001d78 <align+0x438>)
 8001cde:	6013      	str	r3, [r2, #0]
      }

      w_align = constrain_float(w_align, -2, 2);
 8001ce0:	4b25      	ldr	r3, [pc, #148]	@ (8001d78 <align+0x438>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 8001cea:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	f7ff f9c4 	bl	800107e <constrain_float>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <align+0x438>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
      w = w_align;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <align+0x438>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1d      	ldr	r2, [pc, #116]	@ (8001d7c <align+0x43c>)
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e00e      	b.n	8001d28 <align+0x3e8>
    } else {
      w = (s < 0) ? -2 : 2;
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <align+0x424>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	d502      	bpl.n	8001d20 <align+0x3e0>
 8001d1a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001d1e:	e001      	b.n	8001d24 <align+0x3e4>
 8001d20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d24:	4a15      	ldr	r2, [pc, #84]	@ (8001d7c <align+0x43c>)
 8001d26:	6013      	str	r3, [r2, #0]
    }
    w = -w;
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <align+0x43c>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	eef1 7a67 	vneg.f32	s15, s15
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <align+0x43c>)
 8001d34:	edc3 7a00 	vstr	s15, [r3]
    previousalignsampling = HAL_GetTick();
 8001d38:	f003 f96c 	bl	8005014 <HAL_GetTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <align+0x440>)
 8001d42:	601a      	str	r2, [r3, #0]
    previousS = s;
 8001d44:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <align+0x424>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0e      	ldr	r2, [pc, #56]	@ (8001d84 <align+0x444>)
 8001d4a:	6013      	str	r3, [r2, #0]
  }
  // Serial.print("::");
  // Serial.print(w);
//   digitalWrite(A14,0);
  return false;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	9999999a 	.word	0x9999999a
 8001d5c:	3fc99999 	.word	0x3fc99999
 8001d60:	20000028 	.word	0x20000028
 8001d64:	200002fc 	.word	0x200002fc
 8001d68:	2000002c 	.word	0x2000002c
 8001d6c:	20000314 	.word	0x20000314
 8001d70:	20000030 	.word	0x20000030
 8001d74:	20000304 	.word	0x20000304
 8001d78:	20000308 	.word	0x20000308
 8001d7c:	20000350 	.word	0x20000350
 8001d80:	2000030c 	.word	0x2000030c
 8001d84:	20000310 	.word	0x20000310

08001d88 <toradian>:
#define SRC_LOCOMOTION_H_
#include "variables.h"
#include "alignment.h"
//void calc();
//void locomote();
double toradian(double x) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	ed87 0b00 	vstr	d0, [r7]
  return x * pi / 180;
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <toradian+0x40>)
 8001d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <toradian+0x44>)
 8001dae:	f7fe fd4d 	bl	800084c <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dba:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbe:	eef0 0a67 	vmov.f32	s1, s15
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000038 	.word	0x20000038
 8001dcc:	40668000 	.word	0x40668000

08001dd0 <locomotion>:


void locomotion() {
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  // alignn = false;
  if (!alignn) {
 8001dd4:	4b8f      	ldr	r3, [pc, #572]	@ (8002014 <locomotion+0x244>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <locomotion+0x28>
    alignn = align(alignvalue);
 8001de2:	4b8d      	ldr	r3, [pc, #564]	@ (8002018 <locomotion+0x248>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dec:	f7ff fda8 	bl	8001940 <align>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b87      	ldr	r3, [pc, #540]	@ (8002014 <locomotion+0x244>)
 8001df6:	701a      	strb	r2, [r3, #0]
  // Serial.print(s);
  // Serial.print("  ");
  // Serial.print(alpha);
  // Serial.print("  ");
  // Serial.println(Z_Val);
  switch (loco) {
 8001df8:	4b88      	ldr	r3, [pc, #544]	@ (800201c <locomotion+0x24c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3b4b      	subs	r3, #75	@ 0x4b
 8001dfe:	2b24      	cmp	r3, #36	@ 0x24
 8001e00:	f200 80f9 	bhi.w	8001ff6 <locomotion+0x226>
 8001e04:	a201      	add	r2, pc, #4	@ (adr r2, 8001e0c <locomotion+0x3c>)
 8001e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0a:	bf00      	nop
 8001e0c:	08001fd3 	.word	0x08001fd3
 8001e10:	08001ef5 	.word	0x08001ef5
 8001e14:	08001ff7 	.word	0x08001ff7
 8001e18:	08001ff7 	.word	0x08001ff7
 8001e1c:	08001feb 	.word	0x08001feb
 8001e20:	08001ff7 	.word	0x08001ff7
 8001e24:	08001ff7 	.word	0x08001ff7
 8001e28:	08001f5b 	.word	0x08001f5b
 8001e2c:	08001ea1 	.word	0x08001ea1
 8001e30:	08001ff7 	.word	0x08001ff7
 8001e34:	08001ff7 	.word	0x08001ff7
 8001e38:	08001ff7 	.word	0x08001ff7
 8001e3c:	08001ff7 	.word	0x08001ff7
 8001e40:	08001ff7 	.word	0x08001ff7
 8001e44:	08001ff7 	.word	0x08001ff7
 8001e48:	08001ff7 	.word	0x08001ff7
 8001e4c:	08001ff7 	.word	0x08001ff7
 8001e50:	08001ff7 	.word	0x08001ff7
 8001e54:	08001ff7 	.word	0x08001ff7
 8001e58:	08001ff7 	.word	0x08001ff7
 8001e5c:	08001ff7 	.word	0x08001ff7
 8001e60:	08001ff7 	.word	0x08001ff7
 8001e64:	08001ff7 	.word	0x08001ff7
 8001e68:	08001ff7 	.word	0x08001ff7
 8001e6c:	08001ff7 	.word	0x08001ff7
 8001e70:	08001ff7 	.word	0x08001ff7
 8001e74:	08001ff7 	.word	0x08001ff7
 8001e78:	08001ff7 	.word	0x08001ff7
 8001e7c:	08001ff7 	.word	0x08001ff7
 8001e80:	08001ff7 	.word	0x08001ff7
 8001e84:	08001ff7 	.word	0x08001ff7
 8001e88:	08001ff7 	.word	0x08001ff7
 8001e8c:	08001fc7 	.word	0x08001fc7
 8001e90:	08001ff7 	.word	0x08001ff7
 8001e94:	08001ff7 	.word	0x08001ff7
 8001e98:	08001ff7 	.word	0x08001ff7
 8001e9c:	08001fdf 	.word	0x08001fdf

    case 'S':
      if (angle == 400) {
 8001ea0:	4b5f      	ldr	r3, [pc, #380]	@ (8002020 <locomotion+0x250>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001ea8:	d10e      	bne.n	8001ec8 <locomotion+0xf8>
        angle = prevangle;
 8001eaa:	4b5e      	ldr	r3, [pc, #376]	@ (8002024 <locomotion+0x254>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a5c      	ldr	r2, [pc, #368]	@ (8002020 <locomotion+0x250>)
 8001eb0:	6013      	str	r3, [r2, #0]
        calc();
 8001eb2:	f000 f8c9 	bl	8002048 <calc>
        if (alignn) {
 8001eb6:	4b57      	ldr	r3, [pc, #348]	@ (8002014 <locomotion+0x244>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <locomotion+0x104>
          w = 0;
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8002028 <locomotion+0x258>)
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e005      	b.n	8001ed4 <locomotion+0x104>
        }
      } else {
    	prevangle = angle;
 8001ec8:	4b55      	ldr	r3, [pc, #340]	@ (8002020 <locomotion+0x250>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a55      	ldr	r2, [pc, #340]	@ (8002024 <locomotion+0x254>)
 8001ece:	6013      	str	r3, [r2, #0]
        calc();
 8001ed0:	f000 f8ba 	bl	8002048 <calc>
      }
      if (angle != 400) {
 8001ed4:	4b52      	ldr	r3, [pc, #328]	@ (8002020 <locomotion+0x250>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001edc:	f000 8096 	beq.w	800200c <locomotion+0x23c>
        if (alignn) {
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8002014 <locomotion+0x244>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8091 	beq.w	800200c <locomotion+0x23c>
          w = 0;
 8001eea:	4b4f      	ldr	r3, [pc, #316]	@ (8002028 <locomotion+0x258>)
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
        }
      }
      break;
 8001ef2:	e08b      	b.n	800200c <locomotion+0x23c>
    case 'L':

      w = (1.2 * rotationstrength) / 100;
 8001ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800202c <locomotion+0x25c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fb13 	bl	8000524 <__aeabi_i2d>
 8001efe:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001f02:	4b4b      	ldr	r3, [pc, #300]	@ (8002030 <locomotion+0x260>)
 8001f04:	f7fe fb78 	bl	80005f8 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <locomotion+0x264>)
 8001f16:	f7fe fc99 	bl	800084c <__aeabi_ddiv>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe61 	bl	8000be8 <__aeabi_d2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a3f      	ldr	r2, [pc, #252]	@ (8002028 <locomotion+0x258>)
 8001f2a:	6013      	str	r3, [r2, #0]
      if (angle == 400) {
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <locomotion+0x250>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001f34:	d10e      	bne.n	8001f54 <locomotion+0x184>
        vx = 0;
 8001f36:	4940      	ldr	r1, [pc, #256]	@ (8002038 <locomotion+0x268>)
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9c1 2300 	strd	r2, r3, [r1]
        vy = 0;
 8001f44:	493d      	ldr	r1, [pc, #244]	@ (800203c <locomotion+0x26c>)
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8001f52:	e05c      	b.n	800200e <locomotion+0x23e>
      } else {
        calc();
 8001f54:	f000 f878 	bl	8002048 <calc>
        break;
 8001f58:	e059      	b.n	800200e <locomotion+0x23e>
      }
      break;
    case 'R':
      w = -(1.2 * rotationstrength) / 100;
 8001f5a:	4b34      	ldr	r3, [pc, #208]	@ (800202c <locomotion+0x25c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fae0 	bl	8000524 <__aeabi_i2d>
 8001f64:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001f68:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <locomotion+0x260>)
 8001f6a:	f7fe fb45 	bl	80005f8 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4614      	mov	r4, r2
 8001f74:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <locomotion+0x264>)
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe fc63 	bl	800084c <__aeabi_ddiv>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fe2b 	bl	8000be8 <__aeabi_d2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a24      	ldr	r2, [pc, #144]	@ (8002028 <locomotion+0x258>)
 8001f96:	6013      	str	r3, [r2, #0]
      if (angle == 400) {
 8001f98:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <locomotion+0x250>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001fa0:	d10e      	bne.n	8001fc0 <locomotion+0x1f0>
        vx = 0;
 8001fa2:	4925      	ldr	r1, [pc, #148]	@ (8002038 <locomotion+0x268>)
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9c1 2300 	strd	r2, r3, [r1]
        vy = 0;
 8001fb0:	4922      	ldr	r1, [pc, #136]	@ (800203c <locomotion+0x26c>)
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8001fbe:	e026      	b.n	800200e <locomotion+0x23e>
      } else {
        calc();
 8001fc0:	f000 f842 	bl	8002048 <calc>
        break;
 8001fc4:	e023      	b.n	800200e <locomotion+0x23e>
      // case 'f':
      // angle = 270;
      // strength = (rotationstrength>)

    case 'k':
      w = -0.9;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <locomotion+0x258>)
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <locomotion+0x270>)
 8001fca:	601a      	str	r2, [r3, #0]
      calc();
 8001fcc:	f000 f83c 	bl	8002048 <calc>

      break;
 8001fd0:	e01d      	b.n	800200e <locomotion+0x23e>
    case 'K':
      w = 0.9;
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <locomotion+0x258>)
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002044 <locomotion+0x274>)
 8001fd6:	601a      	str	r2, [r3, #0]

      calc();
 8001fd8:	f000 f836 	bl	8002048 <calc>

      break;
 8001fdc:	e017      	b.n	800200e <locomotion+0x23e>
    case 'o':
      w = 0.9;
 8001fde:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <locomotion+0x258>)
 8001fe0:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <locomotion+0x274>)
 8001fe2:	601a      	str	r2, [r3, #0]

      calc();
 8001fe4:	f000 f830 	bl	8002048 <calc>

      break;
 8001fe8:	e011      	b.n	800200e <locomotion+0x23e>
    case 'O':
      w = -0.9;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <locomotion+0x258>)
 8001fec:	4a14      	ldr	r2, [pc, #80]	@ (8002040 <locomotion+0x270>)
 8001fee:	601a      	str	r2, [r3, #0]

      calc();
 8001ff0:	f000 f82a 	bl	8002048 <calc>

      break;
 8001ff4:	e00b      	b.n	800200e <locomotion+0x23e>

    default:
      if (alignn) {
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <locomotion+0x244>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <locomotion+0x236>
        w = 0;
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <locomotion+0x258>)
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
      }
      calc();
 8002006:	f000 f81f 	bl	8002048 <calc>
  }
  }
 800200a:	e000      	b.n	800200e <locomotion+0x23e>
      break;
 800200c:	bf00      	nop
  }
 800200e:	bf00      	nop
 8002010:	bdb0      	pop	{r4, r5, r7, pc}
 8002012:	bf00      	nop
 8002014:	20000020 	.word	0x20000020
 8002018:	200002f0 	.word	0x200002f0
 800201c:	20000040 	.word	0x20000040
 8002020:	20000338 	.word	0x20000338
 8002024:	2000033c 	.word	0x2000033c
 8002028:	20000350 	.word	0x20000350
 800202c:	20000324 	.word	0x20000324
 8002030:	3ff33333 	.word	0x3ff33333
 8002034:	40590000 	.word	0x40590000
 8002038:	20000340 	.word	0x20000340
 800203c:	20000348 	.word	0x20000348
 8002040:	bf666666 	.word	0xbf666666
 8002044:	3f666666 	.word	0x3f666666

08002048 <calc>:
//}

void calc() {
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	af00      	add	r7, sp, #0
  // Serial.println("Strength: " + String(strength));
  radiann = toradian(angle);
 800204c:	4b3f      	ldr	r3, [pc, #252]	@ (800214c <calc+0x104>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa67 	bl	8000524 <__aeabi_i2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	ec43 2b10 	vmov	d0, r2, r3
 800205e:	f7ff fe93 	bl	8001d88 <toradian>
 8002062:	ec53 2b10 	vmov	r2, r3, d0
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fdbd 	bl	8000be8 <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4a37      	ldr	r2, [pc, #220]	@ (8002150 <calc+0x108>)
 8002072:	6013      	str	r3, [r2, #0]
  vx = cos(radiann) * strength / 100 * multi;
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <calc+0x108>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa65 	bl	8000548 <__aeabi_f2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	ec43 2b10 	vmov	d0, r2, r3
 8002086:	f00a ff8b 	bl	800cfa0 <cos>
 800208a:	ec55 4b10 	vmov	r4, r5, d0
 800208e:	4b31      	ldr	r3, [pc, #196]	@ (8002154 <calc+0x10c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa46 	bl	8000524 <__aeabi_i2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	f7fe faaa 	bl	80005f8 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <calc+0x110>)
 80020b2:	f7fe fbcb 	bl	800084c <__aeabi_ddiv>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4614      	mov	r4, r2
 80020bc:	461d      	mov	r5, r3
 80020be:	4b27      	ldr	r3, [pc, #156]	@ (800215c <calc+0x114>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa2e 	bl	8000524 <__aeabi_i2d>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4620      	mov	r0, r4
 80020ce:	4629      	mov	r1, r5
 80020d0:	f7fe fa92 	bl	80005f8 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4921      	ldr	r1, [pc, #132]	@ (8002160 <calc+0x118>)
 80020da:	e9c1 2300 	strd	r2, r3, [r1]
  vy = sin(radiann) * strength / 100 * multi;
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <calc+0x108>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fa30 	bl	8000548 <__aeabi_f2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	ec43 2b10 	vmov	d0, r2, r3
 80020f0:	f00a ffaa 	bl	800d048 <sin>
 80020f4:	ec55 4b10 	vmov	r4, r5, d0
 80020f8:	4b16      	ldr	r3, [pc, #88]	@ (8002154 <calc+0x10c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa11 	bl	8000524 <__aeabi_i2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe fa75 	bl	80005f8 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <calc+0x110>)
 800211c:	f7fe fb96 	bl	800084c <__aeabi_ddiv>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4614      	mov	r4, r2
 8002126:	461d      	mov	r5, r3
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <calc+0x114>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f9f9 	bl	8000524 <__aeabi_i2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f7fe fa5d 	bl	80005f8 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4908      	ldr	r1, [pc, #32]	@ (8002164 <calc+0x11c>)
 8002144:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002148:	bf00      	nop
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	20000338 	.word	0x20000338
 8002150:	200003ac 	.word	0x200003ac
 8002154:	20000328 	.word	0x20000328
 8002158:	40590000 	.word	0x40590000
 800215c:	20000000 	.word	0x20000000
 8002160:	20000340 	.word	0x20000340
 8002164:	20000348 	.word	0x20000348

08002168 <locomote>:
void locomote() {
 8002168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800216c:	b08e      	sub	sp, #56	@ 0x38
 800216e:	af00      	add	r7, sp, #0
//  w = -w;
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 8002170:	4bd1      	ldr	r3, [pc, #836]	@ (80024b8 <locomote+0x350>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 80024bc <locomote+0x354>
 800217a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800217e:	ee17 0a90 	vmov	r0, s15
 8002182:	f7fe f9e1 	bl	8000548 <__aeabi_f2d>
 8002186:	4bce      	ldr	r3, [pc, #824]	@ (80024c0 <locomote+0x358>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fa34 	bl	80005f8 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4bc9      	ldr	r3, [pc, #804]	@ (80024c4 <locomote+0x35c>)
 800219e:	f7fe fb55 	bl	800084c <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	ec43 2b17 	vmov	d7, r2, r3
 80021aa:	eeb0 0a47 	vmov.f32	s0, s14
 80021ae:	eef0 0a67 	vmov.f32	s1, s15
 80021b2:	f00a fef5 	bl	800cfa0 <cos>
 80021b6:	ec53 2b10 	vmov	r2, r3, d0
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fd13 	bl	8000be8 <__aeabi_d2f>
 80021c2:	4603      	mov	r3, r0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	4bbc      	ldr	r3, [pc, #752]	@ (80024b8 <locomote+0x350>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80024bc <locomote+0x354>
 80021d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021d4:	ee17 0a90 	vmov	r0, s15
 80021d8:	f7fe f9b6 	bl	8000548 <__aeabi_f2d>
 80021dc:	4bb8      	ldr	r3, [pc, #736]	@ (80024c0 <locomote+0x358>)
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	f7fe fa09 	bl	80005f8 <__aeabi_dmul>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	4bb4      	ldr	r3, [pc, #720]	@ (80024c4 <locomote+0x35c>)
 80021f4:	f7fe fb2a 	bl	800084c <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	ec43 2b17 	vmov	d7, r2, r3
 8002200:	eeb0 0a47 	vmov.f32	s0, s14
 8002204:	eef0 0a67 	vmov.f32	s1, s15
 8002208:	f00a ff1e 	bl	800d048 <sin>
 800220c:	ec53 2b10 	vmov	r2, r3, d0
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fce8 	bl	8000be8 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	4baa      	ldr	r3, [pc, #680]	@ (80024c8 <locomote+0x360>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61fb      	str	r3, [r7, #28]
                         { cos((120 + Z_Val) * pi / 180), sin((120 + Z_Val) * pi / 180), d },
 8002222:	4ba5      	ldr	r3, [pc, #660]	@ (80024b8 <locomote+0x350>)
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 80024cc <locomote+0x364>
 800222c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002230:	ee17 0a90 	vmov	r0, s15
 8002234:	f7fe f988 	bl	8000548 <__aeabi_f2d>
 8002238:	4ba1      	ldr	r3, [pc, #644]	@ (80024c0 <locomote+0x358>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9db 	bl	80005f8 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	4b9d      	ldr	r3, [pc, #628]	@ (80024c4 <locomote+0x35c>)
 8002250:	f7fe fafc 	bl	800084c <__aeabi_ddiv>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	ec43 2b17 	vmov	d7, r2, r3
 800225c:	eeb0 0a47 	vmov.f32	s0, s14
 8002260:	eef0 0a67 	vmov.f32	s1, s15
 8002264:	f00a fe9c 	bl	800cfa0 <cos>
 8002268:	ec53 2b10 	vmov	r2, r3, d0
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fcba 	bl	8000be8 <__aeabi_d2f>
 8002274:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 8002276:	623b      	str	r3, [r7, #32]
                         { cos((120 + Z_Val) * pi / 180), sin((120 + Z_Val) * pi / 180), d },
 8002278:	4b8f      	ldr	r3, [pc, #572]	@ (80024b8 <locomote+0x350>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80024cc <locomote+0x364>
 8002282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002286:	ee17 0a90 	vmov	r0, s15
 800228a:	f7fe f95d 	bl	8000548 <__aeabi_f2d>
 800228e:	4b8c      	ldr	r3, [pc, #560]	@ (80024c0 <locomote+0x358>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe f9b0 	bl	80005f8 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	4b87      	ldr	r3, [pc, #540]	@ (80024c4 <locomote+0x35c>)
 80022a6:	f7fe fad1 	bl	800084c <__aeabi_ddiv>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	ec43 2b17 	vmov	d7, r2, r3
 80022b2:	eeb0 0a47 	vmov.f32	s0, s14
 80022b6:	eef0 0a67 	vmov.f32	s1, s15
 80022ba:	f00a fec5 	bl	800d048 <sin>
 80022be:	ec53 2b10 	vmov	r2, r3, d0
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f7fe fc8f 	bl	8000be8 <__aeabi_d2f>
 80022ca:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ce:	4b7e      	ldr	r3, [pc, #504]	@ (80024c8 <locomote+0x360>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
                         { cos((240 + Z_Val) * pi / 180), sin((240 + Z_Val) * pi / 180), d } };
 80022d4:	4b78      	ldr	r3, [pc, #480]	@ (80024b8 <locomote+0x350>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80024d0 <locomote+0x368>
 80022de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022e2:	ee17 0a90 	vmov	r0, s15
 80022e6:	f7fe f92f 	bl	8000548 <__aeabi_f2d>
 80022ea:	4b75      	ldr	r3, [pc, #468]	@ (80024c0 <locomote+0x358>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe f982 	bl	80005f8 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4b70      	ldr	r3, [pc, #448]	@ (80024c4 <locomote+0x35c>)
 8002302:	f7fe faa3 	bl	800084c <__aeabi_ddiv>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	ec43 2b17 	vmov	d7, r2, r3
 800230e:	eeb0 0a47 	vmov.f32	s0, s14
 8002312:	eef0 0a67 	vmov.f32	s1, s15
 8002316:	f00a fe43 	bl	800cfa0 <cos>
 800231a:	ec53 2b10 	vmov	r2, r3, d0
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f7fe fc61 	bl	8000be8 <__aeabi_d2f>
 8002326:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 8002328:	62fb      	str	r3, [r7, #44]	@ 0x2c
                         { cos((240 + Z_Val) * pi / 180), sin((240 + Z_Val) * pi / 180), d } };
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <locomote+0x350>)
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80024d0 <locomote+0x368>
 8002334:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002338:	ee17 0a90 	vmov	r0, s15
 800233c:	f7fe f904 	bl	8000548 <__aeabi_f2d>
 8002340:	4b5f      	ldr	r3, [pc, #380]	@ (80024c0 <locomote+0x358>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	f7fe f957 	bl	80005f8 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	4b5b      	ldr	r3, [pc, #364]	@ (80024c4 <locomote+0x35c>)
 8002358:	f7fe fa78 	bl	800084c <__aeabi_ddiv>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	ec43 2b17 	vmov	d7, r2, r3
 8002364:	eeb0 0a47 	vmov.f32	s0, s14
 8002368:	eef0 0a67 	vmov.f32	s1, s15
 800236c:	f00a fe6c 	bl	800d048 <sin>
 8002370:	ec53 2b10 	vmov	r2, r3, d0
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f7fe fc36 	bl	8000be8 <__aeabi_d2f>
 800237c:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002380:	4b51      	ldr	r3, [pc, #324]	@ (80024c8 <locomote+0x360>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
  base[0] = (matrix[0][0] * vx + matrix[0][1] * vy + w * matrix[0][2]) / r;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8dd 	bl	8000548 <__aeabi_f2d>
 800238e:	4b51      	ldr	r3, [pc, #324]	@ (80024d4 <locomote+0x36c>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f930 	bl	80005f8 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f8d0 	bl	8000548 <__aeabi_f2d>
 80023a8:	4b4b      	ldr	r3, [pc, #300]	@ (80024d8 <locomote+0x370>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	f7fe f923 	bl	80005f8 <__aeabi_dmul>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fd ff67 	bl	800028c <__adddf3>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4614      	mov	r4, r2
 80023c4:	461d      	mov	r5, r3
 80023c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80023ca:	4b44      	ldr	r3, [pc, #272]	@ (80024dc <locomote+0x374>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d4:	ee17 0a90 	vmov	r0, s15
 80023d8:	f7fe f8b6 	bl	8000548 <__aeabi_f2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4620      	mov	r0, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fd ff52 	bl	800028c <__adddf3>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4614      	mov	r4, r2
 80023ee:	461d      	mov	r5, r3
 80023f0:	4b3b      	ldr	r3, [pc, #236]	@ (80024e0 <locomote+0x378>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f8a7 	bl	8000548 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4620      	mov	r0, r4
 8002400:	4629      	mov	r1, r5
 8002402:	f7fe fa23 	bl	800084c <__aeabi_ddiv>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fba3 	bl	8000b58 <__aeabi_d2iz>
 8002412:	4603      	mov	r3, r0
 8002414:	4a33      	ldr	r2, [pc, #204]	@ (80024e4 <locomote+0x37c>)
 8002416:	6013      	str	r3, [r2, #0]
  base[1] = (matrix[1][0] * vx + matrix[1][1] * vy + w * matrix[1][2]) / r;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f894 	bl	8000548 <__aeabi_f2d>
 8002420:	4b2c      	ldr	r3, [pc, #176]	@ (80024d4 <locomote+0x36c>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fe f8e7 	bl	80005f8 <__aeabi_dmul>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4614      	mov	r4, r2
 8002430:	461d      	mov	r5, r3
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f887 	bl	8000548 <__aeabi_f2d>
 800243a:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <locomote+0x370>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f8da 	bl	80005f8 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd ff1e 	bl	800028c <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4614      	mov	r4, r2
 8002456:	461d      	mov	r5, r3
 8002458:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800245c:	4b1f      	ldr	r3, [pc, #124]	@ (80024dc <locomote+0x374>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002466:	ee17 0a90 	vmov	r0, s15
 800246a:	f7fe f86d 	bl	8000548 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fd ff09 	bl	800028c <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4614      	mov	r4, r2
 8002480:	461d      	mov	r5, r3
 8002482:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <locomote+0x378>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f85e 	bl	8000548 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fe f9da 	bl	800084c <__aeabi_ddiv>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fb5a 	bl	8000b58 <__aeabi_d2iz>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a0f      	ldr	r2, [pc, #60]	@ (80024e4 <locomote+0x37c>)
 80024a8:	6053      	str	r3, [r2, #4]
  base[2] = (matrix[2][0] * vx + matrix[2][1] * vy + w * matrix[2][2]) / r;
 80024aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f84b 	bl	8000548 <__aeabi_f2d>
 80024b2:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <locomote+0x36c>)
 80024b4:	e018      	b.n	80024e8 <locomote+0x380>
 80024b6:	bf00      	nop
 80024b8:	20000320 	.word	0x20000320
 80024bc:	00000000 	.word	0x00000000
 80024c0:	20000038 	.word	0x20000038
 80024c4:	40668000 	.word	0x40668000
 80024c8:	20000034 	.word	0x20000034
 80024cc:	42f00000 	.word	0x42f00000
 80024d0:	43700000 	.word	0x43700000
 80024d4:	20000340 	.word	0x20000340
 80024d8:	20000348 	.word	0x20000348
 80024dc:	20000350 	.word	0x20000350
 80024e0:	20000004 	.word	0x20000004
 80024e4:	200002d4 	.word	0x200002d4
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fe f884 	bl	80005f8 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4614      	mov	r4, r2
 80024f6:	461d      	mov	r5, r3
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f824 	bl	8000548 <__aeabi_f2d>
 8002500:	4bbb      	ldr	r3, [pc, #748]	@ (80027f0 <locomote+0x688>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	f7fe f877 	bl	80005f8 <__aeabi_dmul>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fd febb 	bl	800028c <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4614      	mov	r4, r2
 800251c:	461d      	mov	r5, r3
 800251e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002522:	4bb4      	ldr	r3, [pc, #720]	@ (80027f4 <locomote+0x68c>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252c:	ee17 0a90 	vmov	r0, s15
 8002530:	f7fe f80a 	bl	8000548 <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fd fea6 	bl	800028c <__adddf3>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4bab      	ldr	r3, [pc, #684]	@ (80027f8 <locomote+0x690>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7fd fffb 	bl	8000548 <__aeabi_f2d>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4620      	mov	r0, r4
 8002558:	4629      	mov	r1, r5
 800255a:	f7fe f977 	bl	800084c <__aeabi_ddiv>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f7fe faf7 	bl	8000b58 <__aeabi_d2iz>
 800256a:	4603      	mov	r3, r0
 800256c:	4aa3      	ldr	r2, [pc, #652]	@ (80027fc <locomote+0x694>)
 800256e:	6093      	str	r3, [r2, #8]

  if ((base[0] != 0) || (base[1] != 0) || base[2] != 0) {
 8002570:	4ba2      	ldr	r3, [pc, #648]	@ (80027fc <locomote+0x694>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <locomote+0x420>
 8002578:	4ba0      	ldr	r3, [pc, #640]	@ (80027fc <locomote+0x694>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d103      	bne.n	8002588 <locomote+0x420>
 8002580:	4b9e      	ldr	r3, [pc, #632]	@ (80027fc <locomote+0x694>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <locomote+0x448>
    dir[0] = (base[0] < 0) ? 1 : 0;
 8002588:	4b9c      	ldr	r3, [pc, #624]	@ (80027fc <locomote+0x694>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0fdb      	lsrs	r3, r3, #31
 800258e:	461a      	mov	r2, r3
 8002590:	4b9b      	ldr	r3, [pc, #620]	@ (8002800 <locomote+0x698>)
 8002592:	601a      	str	r2, [r3, #0]
    dir[1] = (base[1] < 0) ? 0 : 1;
 8002594:	4b99      	ldr	r3, [pc, #612]	@ (80027fc <locomote+0x694>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	43db      	mvns	r3, r3
 800259a:	0fdb      	lsrs	r3, r3, #31
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	4b97      	ldr	r3, [pc, #604]	@ (8002800 <locomote+0x698>)
 80025a2:	605a      	str	r2, [r3, #4]
    dir[2] = (base[2] < 0) ? 1 : 0;
 80025a4:	4b95      	ldr	r3, [pc, #596]	@ (80027fc <locomote+0x694>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	0fdb      	lsrs	r3, r3, #31
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b94      	ldr	r3, [pc, #592]	@ (8002800 <locomote+0x698>)
 80025ae:	609a      	str	r2, [r3, #8]
  }
//  setpoint1 = absolute((int)base[0] * 9.549);
//  setpoint2 = absolute((int)base[1] * 9.549);
//  setpoint3 = absolute((int)base[2] * 9.549);
  setpoint1 = base[0] * 9.549;
 80025b0:	4b92      	ldr	r3, [pc, #584]	@ (80027fc <locomote+0x694>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffb5 	bl	8000524 <__aeabi_i2d>
 80025ba:	a389      	add	r3, pc, #548	@ (adr r3, 80027e0 <locomote+0x678>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fe f81a 	bl	80005f8 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7fe fac4 	bl	8000b58 <__aeabi_d2iz>
 80025d0:	4603      	mov	r3, r0
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	4b8b      	ldr	r3, [pc, #556]	@ (8002804 <locomote+0x69c>)
 80025d6:	801a      	strh	r2, [r3, #0]
  setpoint2 = base[1] * 9.549;
 80025d8:	4b88      	ldr	r3, [pc, #544]	@ (80027fc <locomote+0x694>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ffa1 	bl	8000524 <__aeabi_i2d>
 80025e2:	a37f      	add	r3, pc, #508	@ (adr r3, 80027e0 <locomote+0x678>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7fe f806 	bl	80005f8 <__aeabi_dmul>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fab0 	bl	8000b58 <__aeabi_d2iz>
 80025f8:	4603      	mov	r3, r0
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	4b82      	ldr	r3, [pc, #520]	@ (8002808 <locomote+0x6a0>)
 80025fe:	801a      	strh	r2, [r3, #0]
  setpoint3 = base[2] * 9.549;
 8002600:	4b7e      	ldr	r3, [pc, #504]	@ (80027fc <locomote+0x694>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ff8d 	bl	8000524 <__aeabi_i2d>
 800260a:	a375      	add	r3, pc, #468	@ (adr r3, 80027e0 <locomote+0x678>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fd fff2 	bl	80005f8 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe fa9c 	bl	8000b58 <__aeabi_d2iz>
 8002620:	4603      	mov	r3, r0
 8002622:	b21a      	sxth	r2, r3
 8002624:	4b79      	ldr	r3, [pc, #484]	@ (800280c <locomote+0x6a4>)
 8002626:	801a      	strh	r2, [r3, #0]
  setpoint1 = (setpoint1 < 0)?(~setpoint1)+ 1: setpoint1;
 8002628:	4b76      	ldr	r3, [pc, #472]	@ (8002804 <locomote+0x69c>)
 800262a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262e:	2b00      	cmp	r3, #0
 8002630:	bfb8      	it	lt
 8002632:	425b      	neglt	r3, r3
 8002634:	b29b      	uxth	r3, r3
 8002636:	b21a      	sxth	r2, r3
 8002638:	4b72      	ldr	r3, [pc, #456]	@ (8002804 <locomote+0x69c>)
 800263a:	801a      	strh	r2, [r3, #0]
  setpoint2= (setpoint2 < 0)?(~setpoint2)+ 1: setpoint2;
 800263c:	4b72      	ldr	r3, [pc, #456]	@ (8002808 <locomote+0x6a0>)
 800263e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002642:	2b00      	cmp	r3, #0
 8002644:	bfb8      	it	lt
 8002646:	425b      	neglt	r3, r3
 8002648:	b29b      	uxth	r3, r3
 800264a:	b21a      	sxth	r2, r3
 800264c:	4b6e      	ldr	r3, [pc, #440]	@ (8002808 <locomote+0x6a0>)
 800264e:	801a      	strh	r2, [r3, #0]
  setpoint3 =(setpoint3 < 0)?(~setpoint3)+ 1: setpoint3;
 8002650:	4b6e      	ldr	r3, [pc, #440]	@ (800280c <locomote+0x6a4>)
 8002652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002656:	2b00      	cmp	r3, #0
 8002658:	bfb8      	it	lt
 800265a:	425b      	neglt	r3, r3
 800265c:	b29b      	uxth	r3, r3
 800265e:	b21a      	sxth	r2, r3
 8002660:	4b6a      	ldr	r3, [pc, #424]	@ (800280c <locomote+0x6a4>)
 8002662:	801a      	strh	r2, [r3, #0]
  basepwm[0] = base[0] * 1000;
 8002664:	4b65      	ldr	r3, [pc, #404]	@ (80027fc <locomote+0x694>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	4a67      	ldr	r2, [pc, #412]	@ (8002810 <locomote+0x6a8>)
 8002672:	6013      	str	r3, [r2, #0]
  basepwm[1] = base[1] * 1050;
 8002674:	4b61      	ldr	r3, [pc, #388]	@ (80027fc <locomote+0x694>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f240 421a 	movw	r2, #1050	@ 0x41a
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	4a63      	ldr	r2, [pc, #396]	@ (8002810 <locomote+0x6a8>)
 8002682:	6053      	str	r3, [r2, #4]
  basepwm[2] = base[2] * 980;
 8002684:	4b5d      	ldr	r3, [pc, #372]	@ (80027fc <locomote+0x694>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f44f 7275 	mov.w	r2, #980	@ 0x3d4
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	4a5f      	ldr	r2, [pc, #380]	@ (8002810 <locomote+0x6a8>)
 8002692:	6093      	str	r3, [r2, #8]

  basepwm[0] = (basepwm[0]<0)?(~basepwm[0]) + 1:basepwm[0];
 8002694:	4b5e      	ldr	r3, [pc, #376]	@ (8002810 <locomote+0x6a8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	bfb8      	it	lt
 800269c:	425b      	neglt	r3, r3
 800269e:	4a5c      	ldr	r2, [pc, #368]	@ (8002810 <locomote+0x6a8>)
 80026a0:	6013      	str	r3, [r2, #0]
  basepwm[1] = (basepwm[1]<0)?(~basepwm[1]) + 1:basepwm[1];
 80026a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002810 <locomote+0x6a8>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bfb8      	it	lt
 80026aa:	425b      	neglt	r3, r3
 80026ac:	4a58      	ldr	r2, [pc, #352]	@ (8002810 <locomote+0x6a8>)
 80026ae:	6053      	str	r3, [r2, #4]
  basepwm[2] = (basepwm[2]<0)?(~basepwm[2]) + 1:basepwm[2];
 80026b0:	4b57      	ldr	r3, [pc, #348]	@ (8002810 <locomote+0x6a8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bfb8      	it	lt
 80026b8:	425b      	neglt	r3, r3
 80026ba:	4a55      	ldr	r2, [pc, #340]	@ (8002810 <locomote+0x6a8>)
 80026bc:	6093      	str	r3, [r2, #8]

  // previous 4.28  high 4.36
  error1 = ((setpoint1 - rpm1) / 9.549) * 1075.2;
 80026be:	4b51      	ldr	r3, [pc, #324]	@ (8002804 <locomote+0x69c>)
 80026c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <locomote+0x6ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff29 	bl	8000524 <__aeabi_i2d>
 80026d2:	a343      	add	r3, pc, #268	@ (adr r3, 80027e0 <locomote+0x678>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fe f8b8 	bl	800084c <__aeabi_ddiv>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	a340      	add	r3, pc, #256	@ (adr r3, 80027e8 <locomote+0x680>)
 80026e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ea:	f7fd ff85 	bl	80005f8 <__aeabi_dmul>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe fa77 	bl	8000be8 <__aeabi_d2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a46      	ldr	r2, [pc, #280]	@ (8002818 <locomote+0x6b0>)
 80026fe:	6013      	str	r3, [r2, #0]
  error2 = ((setpoint2 - rpm2) / 9.549) * 1075.2;
 8002700:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <locomote+0x6a0>)
 8002702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002706:	461a      	mov	r2, r3
 8002708:	4b44      	ldr	r3, [pc, #272]	@ (800281c <locomote+0x6b4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff08 	bl	8000524 <__aeabi_i2d>
 8002714:	a332      	add	r3, pc, #200	@ (adr r3, 80027e0 <locomote+0x678>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fe f897 	bl	800084c <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	a330      	add	r3, pc, #192	@ (adr r3, 80027e8 <locomote+0x680>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff64 	bl	80005f8 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe fa56 	bl	8000be8 <__aeabi_d2f>
 800273c:	4603      	mov	r3, r0
 800273e:	4a38      	ldr	r2, [pc, #224]	@ (8002820 <locomote+0x6b8>)
 8002740:	6013      	str	r3, [r2, #0]
  error3 = ((setpoint3 - rpm3) / 9.549) * 1075.2;
 8002742:	4b32      	ldr	r3, [pc, #200]	@ (800280c <locomote+0x6a4>)
 8002744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002748:	461a      	mov	r2, r3
 800274a:	4b36      	ldr	r3, [pc, #216]	@ (8002824 <locomote+0x6bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fee7 	bl	8000524 <__aeabi_i2d>
 8002756:	a322      	add	r3, pc, #136	@ (adr r3, 80027e0 <locomote+0x678>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fe f876 	bl	800084c <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	a31f      	add	r3, pc, #124	@ (adr r3, 80027e8 <locomote+0x680>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd ff43 	bl	80005f8 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe fa35 	bl	8000be8 <__aeabi_d2f>
 800277e:	4603      	mov	r3, r0
 8002780:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <locomote+0x6c0>)
 8002782:	6013      	str	r3, [r2, #0]


  if (HAL_GetTick() - previousmillis >= sampletime) {
 8002784:	f002 fc46 	bl	8005014 <HAL_GetTick>
 8002788:	4603      	mov	r3, r0
 800278a:	2200      	movs	r2, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	4b26      	ldr	r3, [pc, #152]	@ (800282c <locomote+0x6c4>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800279a:	4621      	mov	r1, r4
 800279c:	ebb1 0802 	subs.w	r8, r1, r2
 80027a0:	4629      	mov	r1, r5
 80027a2:	eb61 0903 	sbc.w	r9, r1, r3
 80027a6:	4b22      	ldr	r3, [pc, #136]	@ (8002830 <locomote+0x6c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	17da      	asrs	r2, r3, #31
 80027ac:	469a      	mov	sl, r3
 80027ae:	4693      	mov	fp, r2
 80027b0:	45d0      	cmp	r8, sl
 80027b2:	eb79 030b 	sbcs.w	r3, r9, fp
 80027b6:	f2c0 80d6 	blt.w	8002966 <locomote+0x7fe>
    pwm1 = basepwm[0] + kp1 * (error1) + kd1 * (error1 - preverror1);
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <locomote+0x6a8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <locomote+0x6cc>)
 80027c8:	edd3 6a00 	vldr	s13, [r3]
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <locomote+0x6b0>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027da:	e02d      	b.n	8002838 <locomote+0x6d0>
 80027dc:	f3af 8000 	nop.w
 80027e0:	872b020c 	.word	0x872b020c
 80027e4:	40231916 	.word	0x40231916
 80027e8:	cccccccd 	.word	0xcccccccd
 80027ec:	4090cccc 	.word	0x4090cccc
 80027f0:	20000348 	.word	0x20000348
 80027f4:	20000350 	.word	0x20000350
 80027f8:	20000004 	.word	0x20000004
 80027fc:	200002d4 	.word	0x200002d4
 8002800:	200002bc 	.word	0x200002bc
 8002804:	20000354 	.word	0x20000354
 8002808:	20000356 	.word	0x20000356
 800280c:	20000358 	.word	0x20000358
 8002810:	200002c8 	.word	0x200002c8
 8002814:	2000052c 	.word	0x2000052c
 8002818:	20000368 	.word	0x20000368
 800281c:	20000530 	.word	0x20000530
 8002820:	2000036c 	.word	0x2000036c
 8002824:	20000534 	.word	0x20000534
 8002828:	20000370 	.word	0x20000370
 800282c:	20000318 	.word	0x20000318
 8002830:	20000024 	.word	0x20000024
 8002834:	20000008 	.word	0x20000008
 8002838:	4b62      	ldr	r3, [pc, #392]	@ (80029c4 <locomote+0x85c>)
 800283a:	edd3 6a00 	vldr	s13, [r3]
 800283e:	4b62      	ldr	r3, [pc, #392]	@ (80029c8 <locomote+0x860>)
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002848:	4b60      	ldr	r3, [pc, #384]	@ (80029cc <locomote+0x864>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800285a:	ee17 2a90 	vmov	r2, s15
 800285e:	4b5c      	ldr	r3, [pc, #368]	@ (80029d0 <locomote+0x868>)
 8002860:	601a      	str	r2, [r3, #0]
    //     dir[0] = (dir[0] == 0) ? 1 : 0;
    //     dirchanged1_flag = true;
    //   }
    // }

    pwm1 = constrain(pwm1, 0, 40000);
 8002862:	4b5b      	ldr	r3, [pc, #364]	@ (80029d0 <locomote+0x868>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fbed 	bl	800104c <constrain>
 8002872:	4603      	mov	r3, r0
 8002874:	4a56      	ldr	r2, [pc, #344]	@ (80029d0 <locomote+0x868>)
 8002876:	6013      	str	r3, [r2, #0]
    // prevPwm1 = currPwm1;
    pwm2 = basepwm[1] + kp2 * (error2) + kd2 * (error2 - preverror2);
 8002878:	4b56      	ldr	r3, [pc, #344]	@ (80029d4 <locomote+0x86c>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002884:	4b54      	ldr	r3, [pc, #336]	@ (80029d8 <locomote+0x870>)
 8002886:	edd3 6a00 	vldr	s13, [r3]
 800288a:	4b54      	ldr	r3, [pc, #336]	@ (80029dc <locomote+0x874>)
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002898:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <locomote+0x874>)
 800289a:	edd3 6a00 	vldr	s13, [r3]
 800289e:	4b50      	ldr	r3, [pc, #320]	@ (80029e0 <locomote+0x878>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028a8:	4b4e      	ldr	r3, [pc, #312]	@ (80029e4 <locomote+0x87c>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ba:	ee17 2a90 	vmov	r2, s15
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <locomote+0x880>)
 80028c0:	601a      	str	r2, [r3, #0]
    //     dir[1] = (dir[1] == 0) ? 1 : 0;
    //     dirchanged2_flag = true;
    //   }
    // }

    pwm2 = constrain(pwm2, 0, 40000);
 80028c2:	4b49      	ldr	r3, [pc, #292]	@ (80029e8 <locomote+0x880>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe fbbd 	bl	800104c <constrain>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4a44      	ldr	r2, [pc, #272]	@ (80029e8 <locomote+0x880>)
 80028d6:	6013      	str	r3, [r2, #0]
    // prevPwm2 = currPwm2;
    pwm3 = basepwm[2]+ kp3 * (error3) + kd3 * (error3 - preverror3);
 80028d8:	4b3e      	ldr	r3, [pc, #248]	@ (80029d4 <locomote+0x86c>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e4:	4b41      	ldr	r3, [pc, #260]	@ (80029ec <locomote+0x884>)
 80028e6:	edd3 6a00 	vldr	s13, [r3]
 80028ea:	4b41      	ldr	r3, [pc, #260]	@ (80029f0 <locomote+0x888>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f8:	4b3d      	ldr	r3, [pc, #244]	@ (80029f0 <locomote+0x888>)
 80028fa:	edd3 6a00 	vldr	s13, [r3]
 80028fe:	4b3d      	ldr	r3, [pc, #244]	@ (80029f4 <locomote+0x88c>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002908:	4b3b      	ldr	r3, [pc, #236]	@ (80029f8 <locomote+0x890>)
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800291a:	ee17 2a90 	vmov	r2, s15
 800291e:	4b37      	ldr	r3, [pc, #220]	@ (80029fc <locomote+0x894>)
 8002920:	601a      	str	r2, [r3, #0]

    //     dir[2] = (dir[2] == 0) ? 1 : 0;
    //     dirchanged3_flag = true;
    //   }
    // }
    pwm3 = constrain(pwm3, 0, 40000);
 8002922:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <locomote+0x894>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fb8d 	bl	800104c <constrain>
 8002932:	4603      	mov	r3, r0
 8002934:	4a31      	ldr	r2, [pc, #196]	@ (80029fc <locomote+0x894>)
 8002936:	6013      	str	r3, [r2, #0]
    // prevPwm3 = currPwm3;
    preverror1 = error1;
 8002938:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <locomote+0x85c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <locomote+0x860>)
 800293e:	6013      	str	r3, [r2, #0]
    preverror2 = error2;
 8002940:	4b26      	ldr	r3, [pc, #152]	@ (80029dc <locomote+0x874>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a26      	ldr	r2, [pc, #152]	@ (80029e0 <locomote+0x878>)
 8002946:	6013      	str	r3, [r2, #0]
    preverror3 = error3;
 8002948:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <locomote+0x888>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a29      	ldr	r2, [pc, #164]	@ (80029f4 <locomote+0x88c>)
 800294e:	6013      	str	r3, [r2, #0]
    previousmillis = HAL_GetTick();
 8002950:	f002 fb60 	bl	8005014 <HAL_GetTick>
 8002954:	4603      	mov	r3, r0
 8002956:	2200      	movs	r2, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	4b28      	ldr	r3, [pc, #160]	@ (8002a00 <locomote+0x898>)
 800295e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002962:	e9c3 1200 	strd	r1, r2, [r3]
//   TIM2->CCR3=pwm2;
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, dir[1]);
//  TIM2->CCR4=pwm2;
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, dir[2]);
//   TIM2->CCR2=pwm3;
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, dir[0]);
 8002966:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <locomote+0x89c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002972:	4825      	ldr	r0, [pc, #148]	@ (8002a08 <locomote+0x8a0>)
 8002974:	f003 fe2e 	bl	80065d4 <HAL_GPIO_WritePin>
  TIM2->CCR3 = pwm1;
 8002978:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <locomote+0x868>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002980:	63da      	str	r2, [r3, #60]	@ 0x3c

HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,dir[1]);
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <locomote+0x89c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800298e:	481f      	ldr	r0, [pc, #124]	@ (8002a0c <locomote+0x8a4>)
 8002990:	f003 fe20 	bl	80065d4 <HAL_GPIO_WritePin>
  TIM12->CCR1 = pwm2;
 8002994:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <locomote+0x880>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <locomote+0x8a8>)
 800299a:	635a      	str	r2, [r3, #52]	@ 0x34


 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, dir[2]);
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <locomote+0x89c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029a8:	4817      	ldr	r0, [pc, #92]	@ (8002a08 <locomote+0x8a0>)
 80029aa:	f003 fe13 	bl	80065d4 <HAL_GPIO_WritePin>
  TIM2->CCR4 = pwm3;
 80029ae:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <locomote+0x894>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
  // Serial.print(pwm2);
  // Serial.print(" Pwm3: ");
  // Serial.println(pwm3);


}
 80029b8:	bf00      	nop
 80029ba:	3738      	adds	r7, #56	@ 0x38
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	20000368 	.word	0x20000368
 80029c8:	20000374 	.word	0x20000374
 80029cc:	20000014 	.word	0x20000014
 80029d0:	2000035c 	.word	0x2000035c
 80029d4:	200002c8 	.word	0x200002c8
 80029d8:	2000000c 	.word	0x2000000c
 80029dc:	2000036c 	.word	0x2000036c
 80029e0:	20000378 	.word	0x20000378
 80029e4:	20000018 	.word	0x20000018
 80029e8:	20000360 	.word	0x20000360
 80029ec:	20000010 	.word	0x20000010
 80029f0:	20000370 	.word	0x20000370
 80029f4:	2000037c 	.word	0x2000037c
 80029f8:	2000001c 	.word	0x2000001c
 80029fc:	20000364 	.word	0x20000364
 8002a00:	20000318 	.word	0x20000318
 8002a04:	200002bc 	.word	0x200002bc
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40001800 	.word	0x40001800

08002a14 <analogRead_pa4>:
//    else if (value > max) return max;
//    else return value;
//}

ADC_HandleTypeDef hadc1;
uint16_t analogRead_pa4() {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 8002a26:	2304      	movs	r3, #4
 8002a28:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	480e      	ldr	r0, [pc, #56]	@ (8002a70 <analogRead_pa4+0x5c>)
 8002a38:	f002 fcfe 	bl	8005438 <HAL_ADC_ConfigChannel>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <analogRead_pa4+0x32>
		Error_Handler();
 8002a42:	f001 fa61 	bl	8003f08 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8002a46:	480a      	ldr	r0, [pc, #40]	@ (8002a70 <analogRead_pa4+0x5c>)
 8002a48:	f002 fb58 	bl	80050fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 8002a4c:	2114      	movs	r1, #20
 8002a4e:	4808      	ldr	r0, [pc, #32]	@ (8002a70 <analogRead_pa4+0x5c>)
 8002a50:	f002 fc59 	bl	8005306 <HAL_ADC_PollForConversion>
	uint16_t pot = HAL_ADC_GetValue(&hadc1);
 8002a54:	4806      	ldr	r0, [pc, #24]	@ (8002a70 <analogRead_pa4+0x5c>)
 8002a56:	f002 fce1 	bl	800541c <HAL_ADC_GetValue>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8002a5e:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <analogRead_pa4+0x5c>)
 8002a60:	f002 fc1e 	bl	80052a0 <HAL_ADC_Stop>
	return pot;
 8002a64:	8afb      	ldrh	r3, [r7, #22]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000550 	.word	0x20000550

08002a74 <dribble>:

void dribble() {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	temp_pot = analogRead_pa4();
 8002a78:	f7ff ffcc 	bl	8002a14 <analogRead_pa4>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b83      	ldr	r3, [pc, #524]	@ (8002c90 <dribble+0x21c>)
 8002a82:	601a      	str	r2, [r3, #0]

	if (!f_dribble) {
 8002a84:	4b83      	ldr	r3, [pc, #524]	@ (8002c94 <dribble+0x220>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	f083 0301 	eor.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 80fc 	bne.w	8002c8c <dribble+0x218>
		return;
	}

	if (fOperation == 1) {
 8002a94:	4b80      	ldr	r3, [pc, #512]	@ (8002c98 <dribble+0x224>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 80f8 	bne.w	8002c8e <dribble+0x21a>

		if (HAL_GetTick() - prevmillis_d >= 50) {
 8002a9e:	f002 fab9 	bl	8005014 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b7d      	ldr	r3, [pc, #500]	@ (8002c9c <dribble+0x228>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b31      	cmp	r3, #49	@ 0x31
 8002aac:	f240 80ef 	bls.w	8002c8e <dribble+0x21a>
			error_d = dribble_sp - temp_pot;
 8002ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca0 <dribble+0x22c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <dribble+0x21c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	4a7a      	ldr	r2, [pc, #488]	@ (8002ca4 <dribble+0x230>)
 8002abc:	6013      	str	r3, [r2, #0]
			(error_d >= 0) ?
 8002abe:	4b79      	ldr	r3, [pc, #484]	@ (8002ca4 <dribble+0x230>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
					HAL_GPIO_WritePin(dirPort_d, dirPin_d, 1) :
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db05      	blt.n	8002ad2 <dribble+0x5e>
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4877      	ldr	r0, [pc, #476]	@ (8002ca8 <dribble+0x234>)
 8002acc:	f003 fd82 	bl	80065d4 <HAL_GPIO_WritePin>
 8002ad0:	e004      	b.n	8002adc <dribble+0x68>
					HAL_GPIO_WritePin(dirPort_d, dirPin_d, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4874      	ldr	r0, [pc, #464]	@ (8002ca8 <dribble+0x234>)
 8002ad8:	f003 fd7c 	bl	80065d4 <HAL_GPIO_WritePin>
//			kart = abs(error_d);
			if (abs(error_d) <= 30) {
 8002adc:	4b71      	ldr	r3, [pc, #452]	@ (8002ca4 <dribble+0x230>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f113 0f1e 	cmn.w	r3, #30
 8002ae4:	db70      	blt.n	8002bc8 <dribble+0x154>
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca4 <dribble+0x230>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b1e      	cmp	r3, #30
 8002aec:	dc6c      	bgt.n	8002bc8 <dribble+0x154>

				TIM2->CCR1 = 0;
 8002aee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002af2:	2200      	movs	r2, #0
 8002af4:	635a      	str	r2, [r3, #52]	@ 0x34
				dalay(500);
 8002af6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002afa:	f000 f8eb 	bl	8002cd4 <dalay>
				switch (count) {
 8002afe:	4b6b      	ldr	r3, [pc, #428]	@ (8002cac <dribble+0x238>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d006      	beq.n	8002b14 <dribble+0xa0>
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	dc5c      	bgt.n	8002bc4 <dribble+0x150>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02b      	beq.n	8002b66 <dribble+0xf2>
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d011      	beq.n	8002b36 <dribble+0xc2>
					count = 1;

					break;
//					}
				default:
					break;
 8002b12:	e057      	b.n	8002bc4 <dribble+0x150>
					dribble_sp = var;
 8002b14:	4b62      	ldr	r3, [pc, #392]	@ (8002ca0 <dribble+0x22c>)
 8002b16:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8002b1a:	601a      	str	r2, [r3, #0]
					flag_amkette = true;
 8002b1c:	4b64      	ldr	r3, [pc, #400]	@ (8002cb0 <dribble+0x23c>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
					f_dribble = false;
 8002b22:	4b5c      	ldr	r3, [pc, #368]	@ (8002c94 <dribble+0x220>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
					fOperation = 0;
 8002b28:	4b5b      	ldr	r3, [pc, #364]	@ (8002c98 <dribble+0x224>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
					count = 0;
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cac <dribble+0x238>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
					break;
 8002b34:	e047      	b.n	8002bc6 <dribble+0x152>
					dribble_sp = khali;
 8002b36:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca0 <dribble+0x22c>)
 8002b38:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002b3c:	601a      	str	r2, [r3, #0]
					temp_pot = analogRead_pa4();
 8002b3e:	f7ff ff69 	bl	8002a14 <analogRead_pa4>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b52      	ldr	r3, [pc, #328]	@ (8002c90 <dribble+0x21c>)
 8002b48:	601a      	str	r2, [r3, #0]
					prev_error_pot = 0;
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb4 <dribble+0x240>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
					error_d = dribble_sp - temp_pot;
 8002b50:	4b53      	ldr	r3, [pc, #332]	@ (8002ca0 <dribble+0x22c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b4e      	ldr	r3, [pc, #312]	@ (8002c90 <dribble+0x21c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	4a52      	ldr	r2, [pc, #328]	@ (8002ca4 <dribble+0x230>)
 8002b5c:	6013      	str	r3, [r2, #0]
					count = 2;
 8002b5e:	4b53      	ldr	r3, [pc, #332]	@ (8002cac <dribble+0x238>)
 8002b60:	2202      	movs	r2, #2
 8002b62:	601a      	str	r2, [r3, #0]
					break;
 8002b64:	e02f      	b.n	8002bc6 <dribble+0x152>
					HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 8002b66:	2201      	movs	r2, #1
 8002b68:	2102      	movs	r1, #2
 8002b6a:	484f      	ldr	r0, [pc, #316]	@ (8002ca8 <dribble+0x234>)
 8002b6c:	f003 fd32 	bl	80065d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 8002b70:	2201      	movs	r2, #1
 8002b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b76:	4850      	ldr	r0, [pc, #320]	@ (8002cb8 <dribble+0x244>)
 8002b78:	f003 fd2c 	bl	80065d4 <HAL_GPIO_WritePin>
					dalay(1000);
 8002b7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b80:	f000 f8a8 	bl	8002cd4 <dalay>
					HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2102      	movs	r1, #2
 8002b88:	4847      	ldr	r0, [pc, #284]	@ (8002ca8 <dribble+0x234>)
 8002b8a:	f003 fd23 	bl	80065d4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b94:	4848      	ldr	r0, [pc, #288]	@ (8002cb8 <dribble+0x244>)
 8002b96:	f003 fd1d 	bl	80065d4 <HAL_GPIO_WritePin>
					dribble_sp = madhe;
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <dribble+0x22c>)
 8002b9c:	f240 62f1 	movw	r2, #1777	@ 0x6f1
 8002ba0:	601a      	str	r2, [r3, #0]
					temp_pot = analogRead_pa4();
 8002ba2:	f7ff ff37 	bl	8002a14 <analogRead_pa4>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b39      	ldr	r3, [pc, #228]	@ (8002c90 <dribble+0x21c>)
 8002bac:	601a      	str	r2, [r3, #0]
					error_d = dribble_sp - temp_pot;
 8002bae:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca0 <dribble+0x22c>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b37      	ldr	r3, [pc, #220]	@ (8002c90 <dribble+0x21c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca4 <dribble+0x230>)
 8002bba:	6013      	str	r3, [r2, #0]
					count = 1;
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <dribble+0x238>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
					break;
 8002bc2:	e000      	b.n	8002bc6 <dribble+0x152>
					break;
 8002bc4:	bf00      	nop
				switch (count) {
 8002bc6:	e057      	b.n	8002c78 <dribble+0x204>
				}

			} else {
				error_d = abs(error_d);
 8002bc8:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <dribble+0x230>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bfb8      	it	lt
 8002bd0:	425b      	neglt	r3, r3
 8002bd2:	4a34      	ldr	r2, [pc, #208]	@ (8002ca4 <dribble+0x230>)
 8002bd4:	6013      	str	r3, [r2, #0]
				if (error_d < 100) {
 8002bd6:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <dribble+0x230>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b63      	cmp	r3, #99	@ 0x63
 8002bdc:	dc07      	bgt.n	8002bee <dribble+0x17a>
					integral_d += error_d;
 8002bde:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <dribble+0x248>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <dribble+0x230>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a34      	ldr	r2, [pc, #208]	@ (8002cbc <dribble+0x248>)
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e002      	b.n	8002bf4 <dribble+0x180>
				} else {
					integral_d = 0;
 8002bee:	4b33      	ldr	r3, [pc, #204]	@ (8002cbc <dribble+0x248>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
				}
				pwm_dribble = 12000 + (error_d * kp_d)
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca4 <dribble+0x230>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c00:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc0 <dribble+0x24c>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002cc4 <dribble+0x250>
 8002c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
						+ kd_d * (error_d - prev_error_pot) + ki_d * integral_d; // + 0.014 * (error_d - prev_error_pot) + 0.001 * (integral);
 8002c12:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <dribble+0x230>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b27      	ldr	r3, [pc, #156]	@ (8002cb4 <dribble+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c24:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <dribble+0x254>)
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c32:	4b22      	ldr	r3, [pc, #136]	@ (8002cbc <dribble+0x248>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c3e:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <dribble+0x258>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c48:	ee77 7a27 	vadd.f32	s15, s14, s15
				pwm_dribble = 12000 + (error_d * kp_d)
 8002c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c50:	ee17 2a90 	vmov	r2, s15
 8002c54:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <dribble+0x25c>)
 8002c56:	601a      	str	r2, [r3, #0]
				pwm_dribble = constrain(pwm_dribble, 0, 65535);
 8002c58:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <dribble+0x25c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe f9f2 	bl	800104c <constrain>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4a19      	ldr	r2, [pc, #100]	@ (8002cd0 <dribble+0x25c>)
 8002c6c:	6013      	str	r3, [r2, #0]
				TIM2->CCR1 = pwm_dribble;
 8002c6e:	4b18      	ldr	r3, [pc, #96]	@ (8002cd0 <dribble+0x25c>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c76:	635a      	str	r2, [r3, #52]	@ 0x34
//        analogWrite(pwmpin_d, pwm_dribble);
			}
			prevmillis_d = HAL_GetTick();
 8002c78:	f002 f9cc 	bl	8005014 <HAL_GetTick>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4a07      	ldr	r2, [pc, #28]	@ (8002c9c <dribble+0x228>)
 8002c80:	6013      	str	r3, [r2, #0]
			prev_error_pot = error_d;
 8002c82:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <dribble+0x230>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb4 <dribble+0x240>)
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e000      	b.n	8002c8e <dribble+0x21a>
		return;
 8002c8c:	bf00      	nop
		}
	}
}
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000394 	.word	0x20000394
 8002c94:	20000390 	.word	0x20000390
 8002c98:	2000038c 	.word	0x2000038c
 8002c9c:	2000039c 	.word	0x2000039c
 8002ca0:	20000058 	.word	0x20000058
 8002ca4:	200003a8 	.word	0x200003a8
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	200003a0 	.word	0x200003a0
 8002cb0:	2000004c 	.word	0x2000004c
 8002cb4:	200002b4 	.word	0x200002b4
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	20000398 	.word	0x20000398
 8002cc0:	2000005c 	.word	0x2000005c
 8002cc4:	463b8000 	.word	0x463b8000
 8002cc8:	20000060 	.word	0x20000060
 8002ccc:	20000064 	.word	0x20000064
 8002cd0:	200003a4 	.word	0x200003a4

08002cd4 <dalay>:
//     }
//     prev_error_pot = error_pot;
//   }
// }

void dalay(int d) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	unsigned long prevmillis1 = HAL_GetTick();
 8002cdc:	f002 f99a 	bl	8005014 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - prevmillis1 <= d) {
 8002ce2:	bf00      	nop
 8002ce4:	f002 f996 	bl	8005014 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d9f7      	bls.n	8002ce4 <dalay+0x10>
		// locomotion();
		// locomote();
		// recievecmd();
		// encoders();
	}
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_IC_CaptureCallback>:
int u = 0;


//uint32_t prev=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
//	else if(htim == &htim3)counter_lower= __HAL_TIM_GetCounter(&htim3);
//	else if(htim == &htim4) counter_4= __HAL_TIM_GetCounter(&htim4);
//	else if(htim == &htim5) counter_5= __HAL_TIM_GetCounter(&htim5);
//	else counter_8= __HAL_TIM_GetCounter(&htim8);

}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
//	if (huart == &huart2)
//		HAL_UART_Receive(&huart2, Ar_data, 29,10);
	if (huart == &huart5){
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a10      	ldr	r2, [pc, #64]	@ (8002d60 <HAL_UART_RxCpltCallback+0x4c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d105      	bne.n	8002d30 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_DMA(&huart5, Rx_data, 20);
 8002d24:	2214      	movs	r2, #20
 8002d26:	490f      	ldr	r1, [pc, #60]	@ (8002d64 <HAL_UART_RxCpltCallback+0x50>)
 8002d28:	480d      	ldr	r0, [pc, #52]	@ (8002d60 <HAL_UART_RxCpltCallback+0x4c>)
 8002d2a:	f005 f9f1 	bl	8008110 <HAL_UART_Receive_DMA>
	}
	else if (huart == &huart2) {
		HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
		}

}
 8002d2e:	e012      	b.n	8002d56 <HAL_UART_RxCpltCallback+0x42>
	else if (huart == &huart4) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a0d      	ldr	r2, [pc, #52]	@ (8002d68 <HAL_UART_RxCpltCallback+0x54>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d105      	bne.n	8002d44 <HAL_UART_RxCpltCallback+0x30>
		HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
 8002d38:	2203      	movs	r2, #3
 8002d3a:	490c      	ldr	r1, [pc, #48]	@ (8002d6c <HAL_UART_RxCpltCallback+0x58>)
 8002d3c:	480a      	ldr	r0, [pc, #40]	@ (8002d68 <HAL_UART_RxCpltCallback+0x54>)
 8002d3e:	f005 f9e7 	bl	8008110 <HAL_UART_Receive_DMA>
}
 8002d42:	e008      	b.n	8002d56 <HAL_UART_RxCpltCallback+0x42>
	else if (huart == &huart2) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <HAL_UART_RxCpltCallback+0x5c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d104      	bne.n	8002d56 <HAL_UART_RxCpltCallback+0x42>
		HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
 8002d4c:	221d      	movs	r2, #29
 8002d4e:	4909      	ldr	r1, [pc, #36]	@ (8002d74 <HAL_UART_RxCpltCallback+0x60>)
 8002d50:	4807      	ldr	r0, [pc, #28]	@ (8002d70 <HAL_UART_RxCpltCallback+0x5c>)
 8002d52:	f005 f9dd 	bl	8008110 <HAL_UART_Receive_DMA>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000070c 	.word	0x2000070c
 8002d64:	20000278 	.word	0x20000278
 8002d68:	200006c4 	.word	0x200006c4
 8002d6c:	200002b0 	.word	0x200002b0
 8002d70:	2000079c 	.word	0x2000079c
 8002d74:	20000290 	.word	0x20000290

08002d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d7c:	f002 f8e4 	bl	8004f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d80:	f000 fad6 	bl	8003330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d84:	f000 fff8 	bl	8003d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d88:	f000 ff90 	bl	8003cac <MX_DMA_Init>
  MX_ADC1_Init();
 8002d8c:	f000 fb3a 	bl	8003404 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002d90:	f000 fbf0 	bl	8003574 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002d94:	f000 fc1c 	bl	80035d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d98:	f000 fc72 	bl	8003680 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d9c:	f000 fcea 	bl	8003774 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002da0:	f000 fd3c 	bl	800381c <MX_TIM4_Init>
  MX_TIM5_Init();
 8002da4:	f000 fd8e 	bl	80038c4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002da8:	f000 fde0 	bl	800396c <MX_TIM8_Init>
  MX_TIM9_Init();
 8002dac:	f000 fe36 	bl	8003a1c <MX_TIM9_Init>
  MX_TIM12_Init();
 8002db0:	f000 fe84 	bl	8003abc <MX_TIM12_Init>
  MX_UART4_Init();
 8002db4:	f000 fed2 	bl	8003b5c <MX_UART4_Init>
  MX_UART5_Init();
 8002db8:	f000 fefa 	bl	8003bb0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8002dbc:	f000 ff22 	bl	8003c04 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002dc0:	f000 ff4a 	bl	8003c58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8002dc4:	213c      	movs	r1, #60	@ 0x3c
 8002dc6:	48a9      	ldr	r0, [pc, #676]	@ (800306c <main+0x2f4>)
 8002dc8:	f004 fbb8 	bl	800753c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002dcc:	213c      	movs	r1, #60	@ 0x3c
 8002dce:	48a8      	ldr	r0, [pc, #672]	@ (8003070 <main+0x2f8>)
 8002dd0:	f004 fbb4 	bl	800753c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002dd4:	213c      	movs	r1, #60	@ 0x3c
 8002dd6:	48a7      	ldr	r0, [pc, #668]	@ (8003074 <main+0x2fc>)
 8002dd8:	f004 fbb0 	bl	800753c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8002ddc:	213c      	movs	r1, #60	@ 0x3c
 8002dde:	48a6      	ldr	r0, [pc, #664]	@ (8003078 <main+0x300>)
 8002de0:	f004 fbac 	bl	800753c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8002de4:	213c      	movs	r1, #60	@ 0x3c
 8002de6:	48a5      	ldr	r0, [pc, #660]	@ (800307c <main+0x304>)
 8002de8:	f004 fba8 	bl	800753c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002dec:	2100      	movs	r1, #0
 8002dee:	48a4      	ldr	r0, [pc, #656]	@ (8003080 <main+0x308>)
 8002df0:	f004 fa36 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002df4:	2104      	movs	r1, #4
 8002df6:	48a2      	ldr	r0, [pc, #648]	@ (8003080 <main+0x308>)
 8002df8:	f004 fa32 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002dfc:	2108      	movs	r1, #8
 8002dfe:	48a0      	ldr	r0, [pc, #640]	@ (8003080 <main+0x308>)
 8002e00:	f004 fa2e 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002e04:	210c      	movs	r1, #12
 8002e06:	489e      	ldr	r0, [pc, #632]	@ (8003080 <main+0x308>)
 8002e08:	f004 fa2a 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	489d      	ldr	r0, [pc, #628]	@ (8003084 <main+0x30c>)
 8002e10:	f004 fa26 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8002e14:	2104      	movs	r1, #4
 8002e16:	489b      	ldr	r0, [pc, #620]	@ (8003084 <main+0x30c>)
 8002e18:	f004 fa22 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_3);
 8002e1c:	2108      	movs	r1, #8
 8002e1e:	4899      	ldr	r0, [pc, #612]	@ (8003084 <main+0x30c>)
 8002e20:	f004 fa1e 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002e24:	2100      	movs	r1, #0
 8002e26:	4898      	ldr	r0, [pc, #608]	@ (8003088 <main+0x310>)
 8002e28:	f004 fa1a 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	4896      	ldr	r0, [pc, #600]	@ (8003088 <main+0x310>)
 8002e30:	f004 fa16 	bl	8007260 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_DMA(&huart5, Rx_data, 20);
 8002e34:	2214      	movs	r2, #20
 8002e36:	4995      	ldr	r1, [pc, #596]	@ (800308c <main+0x314>)
 8002e38:	4895      	ldr	r0, [pc, #596]	@ (8003090 <main+0x318>)
 8002e3a:	f005 f969 	bl	8008110 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
 8002e3e:	2203      	movs	r2, #3
 8002e40:	4994      	ldr	r1, [pc, #592]	@ (8003094 <main+0x31c>)
 8002e42:	4895      	ldr	r0, [pc, #596]	@ (8003098 <main+0x320>)
 8002e44:	f005 f964 	bl	8008110 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
 8002e48:	221d      	movs	r2, #29
 8002e4a:	4994      	ldr	r1, [pc, #592]	@ (800309c <main+0x324>)
 8002e4c:	4894      	ldr	r0, [pc, #592]	@ (80030a0 <main+0x328>)
 8002e4e:	f005 f95f 	bl	8008110 <HAL_UART_Receive_DMA>
//	bno055_setOperationModeNDOF();
//	if (hi2c1.State != HAL_I2C_STATE_READY) {
//		HAL_I2C_DeInit(&hi2c1);
//		HAL_I2C_Init(&hi2c1);
//	}
	HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 8002e52:	2201      	movs	r2, #1
 8002e54:	2102      	movs	r1, #2
 8002e56:	4893      	ldr	r0, [pc, #588]	@ (80030a4 <main+0x32c>)
 8002e58:	f003 fbbc 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e62:	4891      	ldr	r0, [pc, #580]	@ (80030a8 <main+0x330>)
 8002e64:	f003 fbb6 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2110      	movs	r1, #16
 8002e6c:	488f      	ldr	r0, [pc, #572]	@ (80030ac <main+0x334>)
 8002e6e:	f003 fbb1 	bl	80065d4 <HAL_GPIO_WritePin>
	dalay(200);
 8002e72:	20c8      	movs	r0, #200	@ 0xc8
 8002e74:	f7ff ff2e 	bl	8002cd4 <dalay>
	HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	4889      	ldr	r0, [pc, #548]	@ (80030a4 <main+0x32c>)
 8002e7e:	f003 fba9 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e88:	4887      	ldr	r0, [pc, #540]	@ (80030a8 <main+0x330>)
 8002e8a:	f003 fba3 	bl	80065d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2110      	movs	r1, #16
 8002e92:	4886      	ldr	r0, [pc, #536]	@ (80030ac <main+0x334>)
 8002e94:	f003 fb9e 	bl	80065d4 <HAL_GPIO_WritePin>
//		if (HAL_GetTick() - prevviousmillisbno > 80) {
//
//			Z_Val = (int)v.x;
//			prevviousmillisbno = HAL_GetTick();
//		}
		temp_pot = analogRead_pa4();
 8002e98:	f7ff fdbc 	bl	8002a14 <analogRead_pa4>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b83      	ldr	r3, [pc, #524]	@ (80030b0 <main+0x338>)
 8002ea2:	601a      	str	r2, [r3, #0]

//  		start

//		parseJS(&Rx_data);
//		parseJSAR(&Ar_data);
		Mpuvalueslo(&Mp_data);
 8002ea4:	487b      	ldr	r0, [pc, #492]	@ (8003094 <main+0x31c>)
 8002ea6:	f7fe fd37 	bl	8001918 <Mpuvalueslo>
		Arvalueslo(&Ar_data);
 8002eaa:	487c      	ldr	r0, [pc, #496]	@ (800309c <main+0x324>)
 8002eac:	f7fe fd06 	bl	80018bc <Arvalueslo>
		Rxvalueslo(&Rx_data);
 8002eb0:	4876      	ldr	r0, [pc, #472]	@ (800308c <main+0x314>)
 8002eb2:	f7fe fbc1 	bl	8001638 <Rxvalueslo>
strncpy(oo, Rx_data + 10,12);
 8002eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80030b4 <main+0x33c>)
 8002eb8:	220c      	movs	r2, #12
 8002eba:	4619      	mov	r1, r3
 8002ebc:	487e      	ldr	r0, [pc, #504]	@ (80030b8 <main+0x340>)
 8002ebe:	f007 fd65 	bl	800a98c <strncpy>
oo[12] = '\0';
 8002ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80030b8 <main+0x340>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	731a      	strb	r2, [r3, #12]
//gg = atoi(oo);
sscanf(oo, "%d", &gg);
 8002ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80030bc <main+0x344>)
 8002eca:	497d      	ldr	r1, [pc, #500]	@ (80030c0 <main+0x348>)
 8002ecc:	487a      	ldr	r0, [pc, #488]	@ (80030b8 <main+0x340>)
 8002ece:	f007 fc3d 	bl	800a74c <siscanf>
		dribble();
 8002ed2:	f7ff fdcf 	bl	8002a74 <dribble>
		rotors(Rotors_flag);
 8002ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80030c4 <main+0x34c>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe f988 	bl	80011f0 <rotors>

		rpm_cal();
 8002ee0:	f7fe fad6 	bl	8001490 <rpm_cal>
//		autolocomote();
		switch (loco) {
 8002ee4:	4b78      	ldr	r3, [pc, #480]	@ (80030c8 <main+0x350>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	3b41      	subs	r3, #65	@ 0x41
 8002eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8002eec:	f200 81df 	bhi.w	80032ae <main+0x536>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <main+0x180>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	080030dd 	.word	0x080030dd
 8002efc:	080031bd 	.word	0x080031bd
 8002f00:	080032af 	.word	0x080032af
 8002f04:	080032af 	.word	0x080032af
 8002f08:	080032af 	.word	0x080032af
 8002f0c:	080032af 	.word	0x080032af
 8002f10:	080032af 	.word	0x080032af
 8002f14:	080032af 	.word	0x080032af
 8002f18:	080032af 	.word	0x080032af
 8002f1c:	08003261 	.word	0x08003261
 8002f20:	08002fd3 	.word	0x08002fd3
 8002f24:	08003239 	.word	0x08003239
 8002f28:	080032af 	.word	0x080032af
 8002f2c:	080032af 	.word	0x080032af
 8002f30:	0800300f 	.word	0x0800300f
 8002f34:	080032af 	.word	0x080032af
 8002f38:	080032af 	.word	0x080032af
 8002f3c:	08003257 	.word	0x08003257
 8002f40:	080031d7 	.word	0x080031d7
 8002f44:	080032af 	.word	0x080032af
 8002f48:	080032af 	.word	0x080032af
 8002f4c:	080032af 	.word	0x080032af
 8002f50:	080032af 	.word	0x080032af
 8002f54:	080031cf 	.word	0x080031cf
 8002f58:	0800302d 	.word	0x0800302d
 8002f5c:	080032af 	.word	0x080032af
 8002f60:	080032af 	.word	0x080032af
 8002f64:	080032af 	.word	0x080032af
 8002f68:	080032af 	.word	0x080032af
 8002f6c:	080032af 	.word	0x080032af
 8002f70:	080032af 	.word	0x080032af
 8002f74:	080032af 	.word	0x080032af
 8002f78:	080032af 	.word	0x080032af
 8002f7c:	080032af 	.word	0x080032af
 8002f80:	080032af 	.word	0x080032af
 8002f84:	0800316f 	.word	0x0800316f
 8002f88:	08003197 	.word	0x08003197
 8002f8c:	080032af 	.word	0x080032af
 8002f90:	080031ed 	.word	0x080031ed
 8002f94:	080032af 	.word	0x080032af
 8002f98:	080032af 	.word	0x080032af
 8002f9c:	080032af 	.word	0x080032af
 8002fa0:	08002fb5 	.word	0x08002fb5
 8002fa4:	080032af 	.word	0x080032af
 8002fa8:	080032af 	.word	0x080032af
 8002fac:	080032af 	.word	0x080032af
 8002fb0:	08002ff1 	.word	0x08002ff1
		case 'k':
			if (!alignn) {
 8002fb4:	4b45      	ldr	r3, [pc, #276]	@ (80030cc <main+0x354>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	f083 0301 	eor.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <main+0x250>
				alignn = true;
 8002fc2:	4b42      	ldr	r3, [pc, #264]	@ (80030cc <main+0x354>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8002fc8:	f7fe ff02 	bl	8001dd0 <locomotion>
			locomote();
 8002fcc:	f7ff f8cc 	bl	8002168 <locomote>
			break;
 8002fd0:	e17a      	b.n	80032c8 <main+0x550>

		case 'K':
			if (!alignn) {
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80030cc <main+0x354>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <main+0x26e>
				alignn = true;
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80030cc <main+0x354>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8002fe6:	f7fe fef3 	bl	8001dd0 <locomotion>
			locomote();
 8002fea:	f7ff f8bd 	bl	8002168 <locomote>
			break;
 8002fee:	e16b      	b.n	80032c8 <main+0x550>
//				HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 1);
//				dalay(1000);
//				HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 0);
//				break;
		case 'o':
			if (!alignn) {
 8002ff0:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <main+0x354>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <main+0x28c>
				alignn = true;
 8002ffe:	4b33      	ldr	r3, [pc, #204]	@ (80030cc <main+0x354>)
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8003004:	f7fe fee4 	bl	8001dd0 <locomotion>
			locomote();
 8003008:	f7ff f8ae 	bl	8002168 <locomote>
			break;
 800300c:	e15c      	b.n	80032c8 <main+0x550>
		case 'O':
			if (!alignn) {
 800300e:	4b2f      	ldr	r3, [pc, #188]	@ (80030cc <main+0x354>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	f083 0301 	eor.w	r3, r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <main+0x2aa>
				alignn = true;
 800301c:	4b2b      	ldr	r3, [pc, #172]	@ (80030cc <main+0x354>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8003022:	f7fe fed5 	bl	8001dd0 <locomotion>
			locomote();
 8003026:	f7ff f89f 	bl	8002168 <locomote>
			break;
 800302a:	e14d      	b.n	80032c8 <main+0x550>
		case 'Y':
			if (!alignn) {
 800302c:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <main+0x354>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	f083 0301 	eor.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <main+0x2c8>
				alignn = true;
 800303a:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <main+0x354>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
			}

			if (flag_amkette) {
 8003040:	4b23      	ldr	r3, [pc, #140]	@ (80030d0 <main+0x358>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 813a 	beq.w	80032be <main+0x546>
				if (autoloco) {
 800304a:	4b22      	ldr	r3, [pc, #136]	@ (80030d4 <main+0x35c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <main+0x2e0>
					autoloco = false;
 8003052:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <main+0x35c>)
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
				}
				feed();
 8003058:	f7fe f9f4 	bl	8001444 <feed>
				isthreepointer = 0;
 800305c:	4b1e      	ldr	r3, [pc, #120]	@ (80030d8 <main+0x360>)
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
				flag_amkette = false;
 8003062:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <main+0x358>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003068:	e129      	b.n	80032be <main+0x546>
 800306a:	bf00      	nop
 800306c:	200003b0 	.word	0x200003b0
 8003070:	200003f8 	.word	0x200003f8
 8003074:	20000440 	.word	0x20000440
 8003078:	20000488 	.word	0x20000488
 800307c:	200004d0 	.word	0x200004d0
 8003080:	200005ec 	.word	0x200005ec
 8003084:	20000634 	.word	0x20000634
 8003088:	2000067c 	.word	0x2000067c
 800308c:	20000278 	.word	0x20000278
 8003090:	2000070c 	.word	0x2000070c
 8003094:	200002b0 	.word	0x200002b0
 8003098:	200006c4 	.word	0x200006c4
 800309c:	20000290 	.word	0x20000290
 80030a0:	2000079c 	.word	0x2000079c
 80030a4:	40020c00 	.word	0x40020c00
 80030a8:	40020800 	.word	0x40020800
 80030ac:	40020400 	.word	0x40020400
 80030b0:	20000394 	.word	0x20000394
 80030b4:	20000282 	.word	0x20000282
 80030b8:	20000270 	.word	0x20000270
 80030bc:	20000274 	.word	0x20000274
 80030c0:	0800e2ac 	.word	0x0800e2ac
 80030c4:	20000054 	.word	0x20000054
 80030c8:	20000040 	.word	0x20000040
 80030cc:	20000020 	.word	0x20000020
 80030d0:	2000004c 	.word	0x2000004c
 80030d4:	200002b3 	.word	0x200002b3
 80030d8:	20000055 	.word	0x20000055
		case 'A':
			if (!alignn) {
 80030dc:	4b7b      	ldr	r3, [pc, #492]	@ (80032cc <main+0x554>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <main+0x378>
				alignn = true;
 80030ea:	4b78      	ldr	r3, [pc, #480]	@ (80032cc <main+0x554>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
			}
			if (flag_amkette) {
 80030f0:	4b77      	ldr	r3, [pc, #476]	@ (80032d0 <main+0x558>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80e4 	beq.w	80032c2 <main+0x54a>
				if (fOperation == 0) {
 80030fa:	4b76      	ldr	r3, [pc, #472]	@ (80032d4 <main+0x55c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d131      	bne.n	8003166 <main+0x3ee>
					if (autoloco) {
 8003102:	4b75      	ldr	r3, [pc, #468]	@ (80032d8 <main+0x560>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <main+0x398>
						autoloco = false;
 800310a:	4b73      	ldr	r3, [pc, #460]	@ (80032d8 <main+0x560>)
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
					}
					f_dribble = true;
 8003110:	4b72      	ldr	r3, [pc, #456]	@ (80032dc <main+0x564>)
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
					fOperation = 1;
 8003116:	4b6f      	ldr	r3, [pc, #444]	@ (80032d4 <main+0x55c>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 1);
 800311c:	2201      	movs	r2, #1
 800311e:	2108      	movs	r1, #8
 8003120:	486f      	ldr	r0, [pc, #444]	@ (80032e0 <main+0x568>)
 8003122:	f003 fa57 	bl	80065d4 <HAL_GPIO_WritePin>
					dalay(600);
 8003126:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800312a:	f7ff fdd3 	bl	8002cd4 <dalay>
					HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2108      	movs	r1, #8
 8003132:	486b      	ldr	r0, [pc, #428]	@ (80032e0 <main+0x568>)
 8003134:	f003 fa4e 	bl	80065d4 <HAL_GPIO_WritePin>
					dalay(600);
 8003138:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800313c:	f7ff fdca 	bl	8002cd4 <dalay>
					HAL_GPIO_WritePin(extendUpper_Port, extendUpper_Pin, 1);
 8003140:	2201      	movs	r2, #1
 8003142:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003146:	4867      	ldr	r0, [pc, #412]	@ (80032e4 <main+0x56c>)
 8003148:	f003 fa44 	bl	80065d4 <HAL_GPIO_WritePin>
					dalay(150);
 800314c:	2096      	movs	r0, #150	@ 0x96
 800314e:	f7ff fdc1 	bl	8002cd4 <dalay>
					HAL_GPIO_WritePin(extendUpper_Port, extendUpper_Pin, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003158:	4862      	ldr	r0, [pc, #392]	@ (80032e4 <main+0x56c>)
 800315a:	f003 fa3b 	bl	80065d4 <HAL_GPIO_WritePin>
					dalay(300);
 800315e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003162:	f7ff fdb7 	bl	8002cd4 <dalay>
				}
				flag_amkette = false;
 8003166:	4b5a      	ldr	r3, [pc, #360]	@ (80032d0 <main+0x558>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800316c:	e0a9      	b.n	80032c2 <main+0x54a>

		case 'd':
//			if (autoloco) {
//				autoloco = false;
//			}
			isthreepointer = 1;
 800316e:	4b5e      	ldr	r3, [pc, #376]	@ (80032e8 <main+0x570>)
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
			Rotors_flag = 1;
 8003174:	4b5d      	ldr	r3, [pc, #372]	@ (80032ec <main+0x574>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
			kdLower = 0.05;
 800317a:	4b5d      	ldr	r3, [pc, #372]	@ (80032f0 <main+0x578>)
 800317c:	4a5d      	ldr	r2, [pc, #372]	@ (80032f4 <main+0x57c>)
 800317e:	601a      	str	r2, [r3, #0]
			kdUpper = 0.033;
 8003180:	4b5d      	ldr	r3, [pc, #372]	@ (80032f8 <main+0x580>)
 8003182:	4a5e      	ldr	r2, [pc, #376]	@ (80032fc <main+0x584>)
 8003184:	601a      	str	r2, [r3, #0]
			kpLower = 0.25;
 8003186:	4b5e      	ldr	r3, [pc, #376]	@ (8003300 <main+0x588>)
 8003188:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800318c:	601a      	str	r2, [r3, #0]
			kpUpper = 0.2;
 800318e:	4b5d      	ldr	r3, [pc, #372]	@ (8003304 <main+0x58c>)
 8003190:	4a5d      	ldr	r2, [pc, #372]	@ (8003308 <main+0x590>)
 8003192:	601a      	str	r2, [r3, #0]
			break;
 8003194:	e098      	b.n	80032c8 <main+0x550>
		case 'e':
//			if (autoloco) {
//				autoloco = false;
//			}
			isthreepointer = 0;
 8003196:	4b54      	ldr	r3, [pc, #336]	@ (80032e8 <main+0x570>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
			Rotors_flag = 1;
 800319c:	4b53      	ldr	r3, [pc, #332]	@ (80032ec <main+0x574>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
			kdLower = 0.05;
 80031a2:	4b53      	ldr	r3, [pc, #332]	@ (80032f0 <main+0x578>)
 80031a4:	4a53      	ldr	r2, [pc, #332]	@ (80032f4 <main+0x57c>)
 80031a6:	601a      	str	r2, [r3, #0]
			kdUpper = 0.033;
 80031a8:	4b53      	ldr	r3, [pc, #332]	@ (80032f8 <main+0x580>)
 80031aa:	4a54      	ldr	r2, [pc, #336]	@ (80032fc <main+0x584>)
 80031ac:	601a      	str	r2, [r3, #0]
			kpLower = 0.55;
 80031ae:	4b54      	ldr	r3, [pc, #336]	@ (8003300 <main+0x588>)
 80031b0:	4a56      	ldr	r2, [pc, #344]	@ (800330c <main+0x594>)
 80031b2:	601a      	str	r2, [r3, #0]
			kpUpper = 0.6;
 80031b4:	4b53      	ldr	r3, [pc, #332]	@ (8003304 <main+0x58c>)
 80031b6:	4a56      	ldr	r2, [pc, #344]	@ (8003310 <main+0x598>)
 80031b8:	601a      	str	r2, [r3, #0]
			break;
 80031ba:	e085      	b.n	80032c8 <main+0x550>
//  		      kpUpper = 0.0;
//  		      baseLower = 0;
//  		      baseUpper = 0;
//  		      break;
		case 'B':
			if (autoloco) {
 80031bc:	4b46      	ldr	r3, [pc, #280]	@ (80032d8 <main+0x560>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <main+0x452>
				autoloco = false;
 80031c4:	4b44      	ldr	r3, [pc, #272]	@ (80032d8 <main+0x560>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
			}
			NVIC_SystemReset();
 80031ca:	f7fd ff29 	bl	8001020 <__NVIC_SystemReset>
			break;
		case 'X':
			autoloco = true;
 80031ce:	4b42      	ldr	r3, [pc, #264]	@ (80032d8 <main+0x560>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
			break;
 80031d4:	e078      	b.n	80032c8 <main+0x550>
		case 'S':
			nexts = true;
 80031d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003314 <main+0x59c>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
			flag_amkette = true;
 80031dc:	4b3c      	ldr	r3, [pc, #240]	@ (80032d0 <main+0x558>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
			locomotion();
 80031e2:	f7fe fdf5 	bl	8001dd0 <locomotion>
			locomote();
 80031e6:	f7fe ffbf 	bl	8002168 <locomote>

			break;
 80031ea:	e06d      	b.n	80032c8 <main+0x550>
		case 'g':
			if (nexts) {
 80031ec:	4b49      	ldr	r3, [pc, #292]	@ (8003314 <main+0x59c>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d068      	beq.n	80032c6 <main+0x54e>
				if (alpha == 0) {
 80031f4:	4b48      	ldr	r3, [pc, #288]	@ (8003318 <main+0x5a0>)
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003202:	d103      	bne.n	800320c <main+0x494>
					alignvalue = 180;
 8003204:	4b45      	ldr	r3, [pc, #276]	@ (800331c <main+0x5a4>)
 8003206:	4a46      	ldr	r2, [pc, #280]	@ (8003320 <main+0x5a8>)
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e00e      	b.n	800322a <main+0x4b2>
				} else {
					alignvalue = Z_Val + alpha + 6;
 800320c:	4b45      	ldr	r3, [pc, #276]	@ (8003324 <main+0x5ac>)
 800320e:	ed93 7a00 	vldr	s14, [r3]
 8003212:	4b41      	ldr	r3, [pc, #260]	@ (8003318 <main+0x5a0>)
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003224:	4b3d      	ldr	r3, [pc, #244]	@ (800331c <main+0x5a4>)
 8003226:	edc3 7a00 	vstr	s15, [r3]
				}
				alignn = false;
 800322a:	4b28      	ldr	r3, [pc, #160]	@ (80032cc <main+0x554>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
				nexts = false;
 8003230:	4b38      	ldr	r3, [pc, #224]	@ (8003314 <main+0x59c>)
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003236:	e046      	b.n	80032c6 <main+0x54e>

		case 'L':
			if (!alignn) {
 8003238:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <main+0x554>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	f083 0301 	eor.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <main+0x4d4>
					alignn = true;
 8003246:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <main+0x554>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
			}
			locomotion();
 800324c:	f7fe fdc0 	bl	8001dd0 <locomotion>
			locomote();
 8003250:	f7fe ff8a 	bl	8002168 <locomote>
			break;
 8003254:	e038      	b.n	80032c8 <main+0x550>
		case 'R':

			locomotion();
 8003256:	f7fe fdbb 	bl	8001dd0 <locomotion>
			locomote();
 800325a:	f7fe ff85 	bl	8002168 <locomote>
			break;
 800325e:	e033      	b.n	80032c8 <main+0x550>
		case 'J':
//			if (autoloco) {
//				autoloco = false;
//			}
			Rotors_flag = 0;
 8003260:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <main+0x574>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 8003266:	2201      	movs	r2, #1
 8003268:	2102      	movs	r1, #2
 800326a:	481d      	ldr	r0, [pc, #116]	@ (80032e0 <main+0x568>)
 800326c:	f003 f9b2 	bl	80065d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 8003270:	2201      	movs	r2, #1
 8003272:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003276:	482c      	ldr	r0, [pc, #176]	@ (8003328 <main+0x5b0>)
 8003278:	f003 f9ac 	bl	80065d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 800327c:	2201      	movs	r2, #1
 800327e:	2110      	movs	r1, #16
 8003280:	482a      	ldr	r0, [pc, #168]	@ (800332c <main+0x5b4>)
 8003282:	f003 f9a7 	bl	80065d4 <HAL_GPIO_WritePin>
			dalay(200);
 8003286:	20c8      	movs	r0, #200	@ 0xc8
 8003288:	f7ff fd24 	bl	8002cd4 <dalay>
			HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	2102      	movs	r1, #2
 8003290:	4813      	ldr	r0, [pc, #76]	@ (80032e0 <main+0x568>)
 8003292:	f003 f99f 	bl	80065d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800329c:	4822      	ldr	r0, [pc, #136]	@ (8003328 <main+0x5b0>)
 800329e:	f003 f999 	bl	80065d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2110      	movs	r1, #16
 80032a6:	4821      	ldr	r0, [pc, #132]	@ (800332c <main+0x5b4>)
 80032a8:	f003 f994 	bl	80065d4 <HAL_GPIO_WritePin>
			break;
 80032ac:	e00c      	b.n	80032c8 <main+0x550>

		default:
			flag_amkette = true;
 80032ae:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <main+0x558>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
			locomotion();
 80032b4:	f7fe fd8c 	bl	8001dd0 <locomotion>
			locomote();
 80032b8:	f7fe ff56 	bl	8002168 <locomote>

			break;
 80032bc:	e004      	b.n	80032c8 <main+0x550>
			break;
 80032be:	bf00      	nop
 80032c0:	e5ea      	b.n	8002e98 <main+0x120>
			break;
 80032c2:	bf00      	nop
 80032c4:	e5e8      	b.n	8002e98 <main+0x120>
			break;
 80032c6:	bf00      	nop
		temp_pot = analogRead_pa4();
 80032c8:	e5e6      	b.n	8002e98 <main+0x120>
 80032ca:	bf00      	nop
 80032cc:	20000020 	.word	0x20000020
 80032d0:	2000004c 	.word	0x2000004c
 80032d4:	2000038c 	.word	0x2000038c
 80032d8:	200002b3 	.word	0x200002b3
 80032dc:	20000390 	.word	0x20000390
 80032e0:	40020c00 	.word	0x40020c00
 80032e4:	40020000 	.word	0x40020000
 80032e8:	20000055 	.word	0x20000055
 80032ec:	20000054 	.word	0x20000054
 80032f0:	20000380 	.word	0x20000380
 80032f4:	3d4ccccd 	.word	0x3d4ccccd
 80032f8:	20000384 	.word	0x20000384
 80032fc:	3d072b02 	.word	0x3d072b02
 8003300:	20000044 	.word	0x20000044
 8003304:	20000048 	.word	0x20000048
 8003308:	3e4ccccd 	.word	0x3e4ccccd
 800330c:	3f0ccccd 	.word	0x3f0ccccd
 8003310:	3f19999a 	.word	0x3f19999a
 8003314:	200002f4 	.word	0x200002f4
 8003318:	200002b8 	.word	0x200002b8
 800331c:	200002f0 	.word	0x200002f0
 8003320:	43340000 	.word	0x43340000
 8003324:	20000320 	.word	0x20000320
 8003328:	40020800 	.word	0x40020800
 800332c:	40020400 	.word	0x40020400

08003330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b094      	sub	sp, #80	@ 0x50
 8003334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003336:	f107 0320 	add.w	r3, r7, #32
 800333a:	2230      	movs	r2, #48	@ 0x30
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f007 fb0a 	bl	800a958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	2300      	movs	r3, #0
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	4b28      	ldr	r3, [pc, #160]	@ (80033fc <SystemClock_Config+0xcc>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	4a27      	ldr	r2, [pc, #156]	@ (80033fc <SystemClock_Config+0xcc>)
 800335e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003362:	6413      	str	r3, [r2, #64]	@ 0x40
 8003364:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <SystemClock_Config+0xcc>)
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003370:	2300      	movs	r3, #0
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <SystemClock_Config+0xd0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a21      	ldr	r2, [pc, #132]	@ (8003400 <SystemClock_Config+0xd0>)
 800337a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b1f      	ldr	r3, [pc, #124]	@ (8003400 <SystemClock_Config+0xd0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800338c:	2302      	movs	r3, #2
 800338e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003390:	2301      	movs	r3, #1
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003394:	2310      	movs	r3, #16
 8003396:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003398:	2302      	movs	r3, #2
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800339c:	2300      	movs	r3, #0
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033a0:	2308      	movs	r3, #8
 80033a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80033a4:	23a8      	movs	r3, #168	@ 0xa8
 80033a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033a8:	2302      	movs	r3, #2
 80033aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033ac:	2307      	movs	r3, #7
 80033ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033b0:	f107 0320 	add.w	r3, r7, #32
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 fa6b 	bl	8006890 <HAL_RCC_OscConfig>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033c0:	f000 fda2 	bl	8003f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033c4:	230f      	movs	r3, #15
 80033c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033c8:	2302      	movs	r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	2105      	movs	r1, #5
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fccc 	bl	8006d80 <HAL_RCC_ClockConfig>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80033ee:	f000 fd8b 	bl	8003f08 <Error_Handler>
  }
}
 80033f2:	bf00      	nop
 80033f4:	3750      	adds	r7, #80	@ 0x50
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	40007000 	.word	0x40007000

08003404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800340a:	463b      	mov	r3, r7
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003416:	4b54      	ldr	r3, [pc, #336]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003418:	4a54      	ldr	r2, [pc, #336]	@ (800356c <MX_ADC1_Init+0x168>)
 800341a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800341c:	4b52      	ldr	r3, [pc, #328]	@ (8003568 <MX_ADC1_Init+0x164>)
 800341e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003422:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003424:	4b50      	ldr	r3, [pc, #320]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800342a:	4b4f      	ldr	r3, [pc, #316]	@ (8003568 <MX_ADC1_Init+0x164>)
 800342c:	2201      	movs	r2, #1
 800342e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003430:	4b4d      	ldr	r3, [pc, #308]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003432:	2200      	movs	r2, #0
 8003434:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003436:	4b4c      	ldr	r3, [pc, #304]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800343e:	4b4a      	ldr	r3, [pc, #296]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003440:	2201      	movs	r2, #1
 8003442:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003444:	4b48      	ldr	r3, [pc, #288]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003446:	2200      	movs	r2, #0
 8003448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800344a:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <MX_ADC1_Init+0x164>)
 800344c:	4a48      	ldr	r2, [pc, #288]	@ (8003570 <MX_ADC1_Init+0x16c>)
 800344e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003450:	4b45      	ldr	r3, [pc, #276]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003452:	2200      	movs	r2, #0
 8003454:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8003456:	4b44      	ldr	r3, [pc, #272]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003458:	2208      	movs	r2, #8
 800345a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800345c:	4b42      	ldr	r3, [pc, #264]	@ (8003568 <MX_ADC1_Init+0x164>)
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003464:	4b40      	ldr	r3, [pc, #256]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003466:	2201      	movs	r2, #1
 8003468:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800346a:	483f      	ldr	r0, [pc, #252]	@ (8003568 <MX_ADC1_Init+0x164>)
 800346c:	f001 fe02 	bl	8005074 <HAL_ADC_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8003476:	f000 fd47 	bl	8003f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800347a:	2304      	movs	r3, #4
 800347c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8003482:	2304      	movs	r3, #4
 8003484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003486:	463b      	mov	r3, r7
 8003488:	4619      	mov	r1, r3
 800348a:	4837      	ldr	r0, [pc, #220]	@ (8003568 <MX_ADC1_Init+0x164>)
 800348c:	f001 ffd4 	bl	8005438 <HAL_ADC_ConfigChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8003496:	f000 fd37 	bl	8003f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800349a:	2305      	movs	r3, #5
 800349c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800349e:	2302      	movs	r3, #2
 80034a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034a2:	463b      	mov	r3, r7
 80034a4:	4619      	mov	r1, r3
 80034a6:	4830      	ldr	r0, [pc, #192]	@ (8003568 <MX_ADC1_Init+0x164>)
 80034a8:	f001 ffc6 	bl	8005438 <HAL_ADC_ConfigChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80034b2:	f000 fd29 	bl	8003f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80034b6:	230a      	movs	r3, #10
 80034b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80034ba:	2303      	movs	r3, #3
 80034bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034be:	463b      	mov	r3, r7
 80034c0:	4619      	mov	r1, r3
 80034c2:	4829      	ldr	r0, [pc, #164]	@ (8003568 <MX_ADC1_Init+0x164>)
 80034c4:	f001 ffb8 	bl	8005438 <HAL_ADC_ConfigChannel>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80034ce:	f000 fd1b 	bl	8003f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80034d2:	230b      	movs	r3, #11
 80034d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80034d6:	2304      	movs	r3, #4
 80034d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034da:	463b      	mov	r3, r7
 80034dc:	4619      	mov	r1, r3
 80034de:	4822      	ldr	r0, [pc, #136]	@ (8003568 <MX_ADC1_Init+0x164>)
 80034e0:	f001 ffaa 	bl	8005438 <HAL_ADC_ConfigChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80034ea:	f000 fd0d 	bl	8003f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80034ee:	230c      	movs	r3, #12
 80034f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80034f2:	2305      	movs	r3, #5
 80034f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034f6:	463b      	mov	r3, r7
 80034f8:	4619      	mov	r1, r3
 80034fa:	481b      	ldr	r0, [pc, #108]	@ (8003568 <MX_ADC1_Init+0x164>)
 80034fc:	f001 ff9c 	bl	8005438 <HAL_ADC_ConfigChannel>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8003506:	f000 fcff 	bl	8003f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800350a:	230d      	movs	r3, #13
 800350c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800350e:	2306      	movs	r3, #6
 8003510:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003512:	463b      	mov	r3, r7
 8003514:	4619      	mov	r1, r3
 8003516:	4814      	ldr	r0, [pc, #80]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003518:	f001 ff8e 	bl	8005438 <HAL_ADC_ConfigChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8003522:	f000 fcf1 	bl	8003f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003526:	230e      	movs	r3, #14
 8003528:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800352a:	2307      	movs	r3, #7
 800352c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800352e:	463b      	mov	r3, r7
 8003530:	4619      	mov	r1, r3
 8003532:	480d      	ldr	r0, [pc, #52]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003534:	f001 ff80 	bl	8005438 <HAL_ADC_ConfigChannel>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 800353e:	f000 fce3 	bl	8003f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003542:	230f      	movs	r3, #15
 8003544:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003546:	2308      	movs	r3, #8
 8003548:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800354a:	463b      	mov	r3, r7
 800354c:	4619      	mov	r1, r3
 800354e:	4806      	ldr	r0, [pc, #24]	@ (8003568 <MX_ADC1_Init+0x164>)
 8003550:	f001 ff72 	bl	8005438 <HAL_ADC_ConfigChannel>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 800355a:	f000 fcd5 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000550 	.word	0x20000550
 800356c:	40012000 	.word	0x40012000
 8003570:	0f000001 	.word	0x0f000001

08003574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003578:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <MX_I2C1_Init+0x50>)
 800357a:	4a13      	ldr	r2, [pc, #76]	@ (80035c8 <MX_I2C1_Init+0x54>)
 800357c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800357e:	4b11      	ldr	r3, [pc, #68]	@ (80035c4 <MX_I2C1_Init+0x50>)
 8003580:	4a12      	ldr	r2, [pc, #72]	@ (80035cc <MX_I2C1_Init+0x58>)
 8003582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003584:	4b0f      	ldr	r3, [pc, #60]	@ (80035c4 <MX_I2C1_Init+0x50>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800358a:	4b0e      	ldr	r3, [pc, #56]	@ (80035c4 <MX_I2C1_Init+0x50>)
 800358c:	2200      	movs	r2, #0
 800358e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003590:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <MX_I2C1_Init+0x50>)
 8003592:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <MX_I2C1_Init+0x50>)
 800359a:	2200      	movs	r2, #0
 800359c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <MX_I2C1_Init+0x50>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035a4:	4b07      	ldr	r3, [pc, #28]	@ (80035c4 <MX_I2C1_Init+0x50>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <MX_I2C1_Init+0x50>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035b0:	4804      	ldr	r0, [pc, #16]	@ (80035c4 <MX_I2C1_Init+0x50>)
 80035b2:	f003 f829 	bl	8006608 <HAL_I2C_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035bc:	f000 fca4 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000598 	.word	0x20000598
 80035c8:	40005400 	.word	0x40005400
 80035cc:	000186a0 	.word	0x000186a0

080035d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	@ 0x30
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	2224      	movs	r2, #36	@ 0x24
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f007 f9ba 	bl	800a958 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035ec:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <MX_TIM1_Init+0xa8>)
 80035ee:	4a23      	ldr	r2, [pc, #140]	@ (800367c <MX_TIM1_Init+0xac>)
 80035f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035f2:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <MX_TIM1_Init+0xa8>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <MX_TIM1_Init+0xa8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80035fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <MX_TIM1_Init+0xa8>)
 8003600:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003604:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003606:	4b1c      	ldr	r3, [pc, #112]	@ (8003678 <MX_TIM1_Init+0xa8>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800360c:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <MX_TIM1_Init+0xa8>)
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003612:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <MX_TIM1_Init+0xa8>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003618:	2303      	movs	r3, #3
 800361a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800361c:	2302      	movs	r3, #2
 800361e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003620:	2301      	movs	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003628:	230a      	movs	r3, #10
 800362a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800362c:	2302      	movs	r3, #2
 800362e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003630:	2301      	movs	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003634:	2300      	movs	r3, #0
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003638:	230a      	movs	r3, #10
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	4619      	mov	r1, r3
 8003642:	480d      	ldr	r0, [pc, #52]	@ (8003678 <MX_TIM1_Init+0xa8>)
 8003644:	f003 fed4 	bl	80073f0 <HAL_TIM_Encoder_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800364e:	f000 fc5b 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4806      	ldr	r0, [pc, #24]	@ (8003678 <MX_TIM1_Init+0xa8>)
 8003660:	f004 fc76 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800366a:	f000 fc4d 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800366e:	bf00      	nop
 8003670:	3730      	adds	r7, #48	@ 0x30
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	200003b0 	.word	0x200003b0
 800367c:	40010000 	.word	0x40010000

08003680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003686:	f107 0320 	add.w	r3, r7, #32
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003690:	1d3b      	adds	r3, r7, #4
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036a2:	4b33      	ldr	r3, [pc, #204]	@ (8003770 <MX_TIM2_Init+0xf0>)
 80036a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036aa:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <MX_TIM2_Init+0xf0>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003770 <MX_TIM2_Init+0xf0>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80036b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003770 <MX_TIM2_Init+0xf0>)
 80036b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036be:	4b2c      	ldr	r3, [pc, #176]	@ (8003770 <MX_TIM2_Init+0xf0>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <MX_TIM2_Init+0xf0>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80036ca:	4829      	ldr	r0, [pc, #164]	@ (8003770 <MX_TIM2_Init+0xf0>)
 80036cc:	f003 fd78 	bl	80071c0 <HAL_TIM_PWM_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80036d6:	f000 fc17 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036e2:	f107 0320 	add.w	r3, r7, #32
 80036e6:	4619      	mov	r1, r3
 80036e8:	4821      	ldr	r0, [pc, #132]	@ (8003770 <MX_TIM2_Init+0xf0>)
 80036ea:	f004 fc31 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80036f4:	f000 fc08 	bl	8003f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036f8:	2360      	movs	r3, #96	@ 0x60
 80036fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003704:	2304      	movs	r3, #4
 8003706:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	2200      	movs	r2, #0
 800370c:	4619      	mov	r1, r3
 800370e:	4818      	ldr	r0, [pc, #96]	@ (8003770 <MX_TIM2_Init+0xf0>)
 8003710:	f004 f8b2 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800371a:	f000 fbf5 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2204      	movs	r2, #4
 8003722:	4619      	mov	r1, r3
 8003724:	4812      	ldr	r0, [pc, #72]	@ (8003770 <MX_TIM2_Init+0xf0>)
 8003726:	f004 f8a7 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003730:	f000 fbea 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	2208      	movs	r2, #8
 8003738:	4619      	mov	r1, r3
 800373a:	480d      	ldr	r0, [pc, #52]	@ (8003770 <MX_TIM2_Init+0xf0>)
 800373c:	f004 f89c 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8003746:	f000 fbdf 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	220c      	movs	r2, #12
 800374e:	4619      	mov	r1, r3
 8003750:	4807      	ldr	r0, [pc, #28]	@ (8003770 <MX_TIM2_Init+0xf0>)
 8003752:	f004 f891 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800375c:	f000 fbd4 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003760:	4803      	ldr	r0, [pc, #12]	@ (8003770 <MX_TIM2_Init+0xf0>)
 8003762:	f000 fe79 	bl	8004458 <HAL_TIM_MspPostInit>

}
 8003766:	bf00      	nop
 8003768:	3728      	adds	r7, #40	@ 0x28
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200005ec 	.word	0x200005ec

08003774 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	@ 0x30
 8003778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	2224      	movs	r2, #36	@ 0x24
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f007 f8e8 	bl	800a958 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003788:	1d3b      	adds	r3, r7, #4
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003790:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <MX_TIM3_Init+0xa0>)
 8003792:	4a21      	ldr	r2, [pc, #132]	@ (8003818 <MX_TIM3_Init+0xa4>)
 8003794:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003796:	4b1f      	ldr	r3, [pc, #124]	@ (8003814 <MX_TIM3_Init+0xa0>)
 8003798:	2200      	movs	r2, #0
 800379a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379c:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <MX_TIM3_Init+0xa0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003814 <MX_TIM3_Init+0xa0>)
 80037a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003814 <MX_TIM3_Init+0xa0>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b0:	4b18      	ldr	r3, [pc, #96]	@ (8003814 <MX_TIM3_Init+0xa0>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037b6:	2303      	movs	r3, #3
 80037b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80037ba:	2302      	movs	r3, #2
 80037bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037be:	2301      	movs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80037c6:	230a      	movs	r3, #10
 80037c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80037ca:	2302      	movs	r3, #2
 80037cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037ce:	2301      	movs	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037d2:	2300      	movs	r3, #0
 80037d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80037d6:	230a      	movs	r3, #10
 80037d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	4619      	mov	r1, r3
 80037e0:	480c      	ldr	r0, [pc, #48]	@ (8003814 <MX_TIM3_Init+0xa0>)
 80037e2:	f003 fe05 	bl	80073f0 <HAL_TIM_Encoder_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80037ec:	f000 fb8c 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037f8:	1d3b      	adds	r3, r7, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4805      	ldr	r0, [pc, #20]	@ (8003814 <MX_TIM3_Init+0xa0>)
 80037fe:	f004 fba7 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003808:	f000 fb7e 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800380c:	bf00      	nop
 800380e:	3730      	adds	r7, #48	@ 0x30
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200003f8 	.word	0x200003f8
 8003818:	40000400 	.word	0x40000400

0800381c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	@ 0x30
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	2224      	movs	r2, #36	@ 0x24
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f007 f894 	bl	800a958 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003838:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <MX_TIM4_Init+0xa0>)
 800383a:	4a21      	ldr	r2, [pc, #132]	@ (80038c0 <MX_TIM4_Init+0xa4>)
 800383c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800383e:	4b1f      	ldr	r3, [pc, #124]	@ (80038bc <MX_TIM4_Init+0xa0>)
 8003840:	2200      	movs	r2, #0
 8003842:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003844:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <MX_TIM4_Init+0xa0>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800384a:	4b1c      	ldr	r3, [pc, #112]	@ (80038bc <MX_TIM4_Init+0xa0>)
 800384c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003850:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003852:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <MX_TIM4_Init+0xa0>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003858:	4b18      	ldr	r3, [pc, #96]	@ (80038bc <MX_TIM4_Init+0xa0>)
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800385e:	2303      	movs	r3, #3
 8003860:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003862:	2302      	movs	r3, #2
 8003864:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003866:	2301      	movs	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800386e:	230a      	movs	r3, #10
 8003870:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003872:	2302      	movs	r3, #2
 8003874:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003876:	2301      	movs	r3, #1
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800387a:	2300      	movs	r3, #0
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800387e:	230a      	movs	r3, #10
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	4619      	mov	r1, r3
 8003888:	480c      	ldr	r0, [pc, #48]	@ (80038bc <MX_TIM4_Init+0xa0>)
 800388a:	f003 fdb1 	bl	80073f0 <HAL_TIM_Encoder_Init>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003894:	f000 fb38 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003898:	2300      	movs	r3, #0
 800389a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4805      	ldr	r0, [pc, #20]	@ (80038bc <MX_TIM4_Init+0xa0>)
 80038a6:	f004 fb53 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80038b0:	f000 fb2a 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038b4:	bf00      	nop
 80038b6:	3730      	adds	r7, #48	@ 0x30
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000440 	.word	0x20000440
 80038c0:	40000800 	.word	0x40000800

080038c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08c      	sub	sp, #48	@ 0x30
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038ca:	f107 030c 	add.w	r3, r7, #12
 80038ce:	2224      	movs	r2, #36	@ 0x24
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f007 f840 	bl	800a958 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d8:	1d3b      	adds	r3, r7, #4
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038e0:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <MX_TIM5_Init+0xa0>)
 80038e2:	4a21      	ldr	r2, [pc, #132]	@ (8003968 <MX_TIM5_Init+0xa4>)
 80038e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80038e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003964 <MX_TIM5_Init+0xa0>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <MX_TIM5_Init+0xa0>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80038f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003964 <MX_TIM5_Init+0xa0>)
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003964 <MX_TIM5_Init+0xa0>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003900:	4b18      	ldr	r3, [pc, #96]	@ (8003964 <MX_TIM5_Init+0xa0>)
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003906:	2303      	movs	r3, #3
 8003908:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800390a:	2302      	movs	r3, #2
 800390c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800390e:	2301      	movs	r3, #1
 8003910:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003916:	230a      	movs	r3, #10
 8003918:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800391a:	2302      	movs	r3, #2
 800391c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800391e:	2301      	movs	r3, #1
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003922:	2300      	movs	r3, #0
 8003924:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003926:	230a      	movs	r3, #10
 8003928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	4619      	mov	r1, r3
 8003930:	480c      	ldr	r0, [pc, #48]	@ (8003964 <MX_TIM5_Init+0xa0>)
 8003932:	f003 fd5d 	bl	80073f0 <HAL_TIM_Encoder_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800393c:	f000 fae4 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003940:	2300      	movs	r3, #0
 8003942:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4805      	ldr	r0, [pc, #20]	@ (8003964 <MX_TIM5_Init+0xa0>)
 800394e:	f004 faff 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003958:	f000 fad6 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800395c:	bf00      	nop
 800395e:	3730      	adds	r7, #48	@ 0x30
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000488 	.word	0x20000488
 8003968:	40000c00 	.word	0x40000c00

0800396c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	@ 0x30
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	2224      	movs	r2, #36	@ 0x24
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f006 ffec 	bl	800a958 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003988:	4b22      	ldr	r3, [pc, #136]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 800398a:	4a23      	ldr	r2, [pc, #140]	@ (8003a18 <MX_TIM8_Init+0xac>)
 800398c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800398e:	4b21      	ldr	r3, [pc, #132]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003994:	4b1f      	ldr	r3, [pc, #124]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800399a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 800399c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80039a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ae:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039b4:	2303      	movs	r3, #3
 80039b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80039b8:	2302      	movs	r3, #2
 80039ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039bc:	2301      	movs	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80039c4:	230a      	movs	r3, #10
 80039c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80039c8:	2302      	movs	r3, #2
 80039ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039cc:	2301      	movs	r3, #1
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80039d4:	230a      	movs	r3, #10
 80039d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	4619      	mov	r1, r3
 80039de:	480d      	ldr	r0, [pc, #52]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 80039e0:	f003 fd06 	bl	80073f0 <HAL_TIM_Encoder_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80039ea:	f000 fa8d 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4806      	ldr	r0, [pc, #24]	@ (8003a14 <MX_TIM8_Init+0xa8>)
 80039fc:	f004 faa8 	bl	8007f50 <HAL_TIMEx_MasterConfigSynchronization>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003a06:	f000 fa7f 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003a0a:	bf00      	nop
 8003a0c:	3730      	adds	r7, #48	@ 0x30
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200004d0 	.word	0x200004d0
 8003a18:	40010400 	.word	0x40010400

08003a1c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	615a      	str	r2, [r3, #20]
 8003a32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003a34:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a36:	4a20      	ldr	r2, [pc, #128]	@ (8003ab8 <MX_TIM9_Init+0x9c>)
 8003a38:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a40:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003a46:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a4c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a4e:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a54:	4b17      	ldr	r3, [pc, #92]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003a5a:	4816      	ldr	r0, [pc, #88]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a5c:	f003 fbb0 	bl	80071c0 <HAL_TIM_PWM_Init>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003a66:	f000 fa4f 	bl	8003f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a6a:	2360      	movs	r3, #96	@ 0x60
 8003a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003a76:	2304      	movs	r3, #4
 8003a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	4619      	mov	r1, r3
 8003a80:	480c      	ldr	r0, [pc, #48]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a82:	f003 fef9 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003a8c:	f000 fa3c 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	2204      	movs	r2, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4807      	ldr	r0, [pc, #28]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003a98:	f003 feee 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003aa2:	f000 fa31 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003aa6:	4803      	ldr	r0, [pc, #12]	@ (8003ab4 <MX_TIM9_Init+0x98>)
 8003aa8:	f000 fcd6 	bl	8004458 <HAL_TIM_MspPostInit>

}
 8003aac:	bf00      	nop
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20000634 	.word	0x20000634
 8003ab8:	40014000 	.word	0x40014000

08003abc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
 8003ad0:	615a      	str	r2, [r3, #20]
 8003ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003ad6:	4a20      	ldr	r2, [pc, #128]	@ (8003b58 <MX_TIM12_Init+0x9c>)
 8003ad8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003ada:	4b1e      	ldr	r3, [pc, #120]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aee:	4b19      	ldr	r3, [pc, #100]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003af4:	4b17      	ldr	r3, [pc, #92]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003afa:	4816      	ldr	r0, [pc, #88]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003afc:	f003 fb60 	bl	80071c0 <HAL_TIM_PWM_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003b06:	f000 f9ff 	bl	8003f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b0a:	2360      	movs	r3, #96	@ 0x60
 8003b0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003b16:	2304      	movs	r3, #4
 8003b18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480c      	ldr	r0, [pc, #48]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003b22:	f003 fea9 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003b2c:	f000 f9ec 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	2204      	movs	r2, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4807      	ldr	r0, [pc, #28]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003b38:	f003 fe9e 	bl	8007878 <HAL_TIM_PWM_ConfigChannel>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8003b42:	f000 f9e1 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003b46:	4803      	ldr	r0, [pc, #12]	@ (8003b54 <MX_TIM12_Init+0x98>)
 8003b48:	f000 fc86 	bl	8004458 <HAL_TIM_MspPostInit>

}
 8003b4c:	bf00      	nop
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	2000067c 	.word	0x2000067c
 8003b58:	40001800 	.word	0x40001800

08003b5c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003b60:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b62:	4a12      	ldr	r2, [pc, #72]	@ (8003bac <MX_UART4_Init+0x50>)
 8003b64:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8003b66:	4b10      	ldr	r3, [pc, #64]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b68:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003b6c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003b74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b82:	220c      	movs	r2, #12
 8003b84:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b86:	4b08      	ldr	r3, [pc, #32]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003b92:	4805      	ldr	r0, [pc, #20]	@ (8003ba8 <MX_UART4_Init+0x4c>)
 8003b94:	f004 fa6c 	bl	8008070 <HAL_UART_Init>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003b9e:	f000 f9b3 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200006c4 	.word	0x200006c4
 8003bac:	40004c00 	.word	0x40004c00

08003bb0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003bb4:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003bb6:	4a12      	ldr	r2, [pc, #72]	@ (8003c00 <MX_UART5_Init+0x50>)
 8003bb8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8003bba:	4b10      	ldr	r3, [pc, #64]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003bbc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003bc0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003bce:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003bd4:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003bd6:	220c      	movs	r2, #12
 8003bd8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bda:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003be0:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003be6:	4805      	ldr	r0, [pc, #20]	@ (8003bfc <MX_UART5_Init+0x4c>)
 8003be8:	f004 fa42 	bl	8008070 <HAL_UART_Init>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003bf2:	f000 f989 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000070c 	.word	0x2000070c
 8003c00:	40005000 	.word	0x40005000

08003c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c08:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c0a:	4a12      	ldr	r2, [pc, #72]	@ (8003c54 <MX_USART1_UART_Init+0x50>)
 8003c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c16:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c22:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c28:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c3a:	4805      	ldr	r0, [pc, #20]	@ (8003c50 <MX_USART1_UART_Init+0x4c>)
 8003c3c:	f004 fa18 	bl	8008070 <HAL_UART_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c46:	f000 f95f 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000754 	.word	0x20000754
 8003c54:	40011000 	.word	0x40011000

08003c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c5e:	4a12      	ldr	r2, [pc, #72]	@ (8003ca8 <MX_USART2_UART_Init+0x50>)
 8003c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003c62:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c64:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c7c:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c7e:	220c      	movs	r2, #12
 8003c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c82:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c8e:	4805      	ldr	r0, [pc, #20]	@ (8003ca4 <MX_USART2_UART_Init+0x4c>)
 8003c90:	f004 f9ee 	bl	8008070 <HAL_UART_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003c9a:	f000 f935 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000079c 	.word	0x2000079c
 8003ca8:	40004400 	.word	0x40004400

08003cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d74 <MX_DMA_Init+0xc8>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	4a2e      	ldr	r2, [pc, #184]	@ (8003d74 <MX_DMA_Init+0xc8>)
 8003cbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d74 <MX_DMA_Init+0xc8>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4b28      	ldr	r3, [pc, #160]	@ (8003d74 <MX_DMA_Init+0xc8>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	4a27      	ldr	r2, [pc, #156]	@ (8003d74 <MX_DMA_Init+0xc8>)
 8003cd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cde:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <MX_DMA_Init+0xc8>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	200b      	movs	r0, #11
 8003cf0:	f001 fe9b 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003cf4:	200b      	movs	r0, #11
 8003cf6:	f001 feb4 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	200d      	movs	r0, #13
 8003d00:	f001 fe93 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003d04:	200d      	movs	r0, #13
 8003d06:	f001 feac 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	200f      	movs	r0, #15
 8003d10:	f001 fe8b 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003d14:	200f      	movs	r0, #15
 8003d16:	f001 fea4 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	2010      	movs	r0, #16
 8003d20:	f001 fe83 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003d24:	2010      	movs	r0, #16
 8003d26:	f001 fe9c 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	2011      	movs	r0, #17
 8003d30:	f001 fe7b 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003d34:	2011      	movs	r0, #17
 8003d36:	f001 fe94 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	202f      	movs	r0, #47	@ 0x2f
 8003d40:	f001 fe73 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003d44:	202f      	movs	r0, #47	@ 0x2f
 8003d46:	f001 fe8c 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	203a      	movs	r0, #58	@ 0x3a
 8003d50:	f001 fe6b 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003d54:	203a      	movs	r0, #58	@ 0x3a
 8003d56:	f001 fe84 	bl	8005a62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	2046      	movs	r0, #70	@ 0x46
 8003d60:	f001 fe63 	bl	8005a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003d64:	2046      	movs	r0, #70	@ 0x46
 8003d66:	f001 fe7c 	bl	8005a62 <HAL_NVIC_EnableIRQ>

}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800

08003d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	@ 0x28
 8003d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	4b57      	ldr	r3, [pc, #348]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	4a56      	ldr	r2, [pc, #344]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003d98:	f043 0310 	orr.w	r3, r3, #16
 8003d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d9e:	4b54      	ldr	r3, [pc, #336]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b50      	ldr	r3, [pc, #320]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	4a4f      	ldr	r2, [pc, #316]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dba:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	4b49      	ldr	r3, [pc, #292]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	4a48      	ldr	r2, [pc, #288]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd6:	4b46      	ldr	r3, [pc, #280]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	4b42      	ldr	r3, [pc, #264]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	4a41      	ldr	r2, [pc, #260]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003e08:	f043 0308 	orr.w	r3, r3, #8
 8003e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e0e:	4b38      	ldr	r3, [pc, #224]	@ (8003ef0 <MX_GPIO_Init+0x178>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_0, GPIO_PIN_RESET);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2115      	movs	r1, #21
 8003e1e:	4835      	ldr	r0, [pc, #212]	@ (8003ef4 <MX_GPIO_Init+0x17c>)
 8003e20:	f002 fbd8 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8003e24:	2200      	movs	r2, #0
 8003e26:	f243 2110 	movw	r1, #12816	@ 0x3210
 8003e2a:	4833      	ldr	r0, [pc, #204]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003e2c:	f002 fbd2 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8003e30:	2200      	movs	r2, #0
 8003e32:	f648 018b 	movw	r1, #34955	@ 0x888b
 8003e36:	4831      	ldr	r0, [pc, #196]	@ (8003efc <MX_GPIO_Init+0x184>)
 8003e38:	f002 fbcc 	bl	80065d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e42:	482f      	ldr	r0, [pc, #188]	@ (8003f00 <MX_GPIO_Init+0x188>)
 8003e44:	f002 fbc6 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e4e:	482d      	ldr	r0, [pc, #180]	@ (8003f04 <MX_GPIO_Init+0x18c>)
 8003e50:	f002 fbc0 	bl	80065d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_0;
 8003e54:	2315      	movs	r3, #21
 8003e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e60:	2300      	movs	r3, #0
 8003e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4822      	ldr	r0, [pc, #136]	@ (8003ef4 <MX_GPIO_Init+0x17c>)
 8003e6c:	f002 fa16 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB4 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_9;
 8003e70:	f243 2310 	movw	r3, #12816	@ 0x3210
 8003e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4619      	mov	r1, r3
 8003e88:	481b      	ldr	r0, [pc, #108]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003e8a:	f002 fa07 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD15 PD0 PD1
                           PD3 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8003e8e:	f648 038b 	movw	r3, #34955	@ 0x888b
 8003e92:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e94:	2301      	movs	r3, #1
 8003e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ea0:	f107 0314 	add.w	r3, r7, #20
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4815      	ldr	r0, [pc, #84]	@ (8003efc <MX_GPIO_Init+0x184>)
 8003ea8:	f002 f9f8 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ebe:	f107 0314 	add.w	r3, r7, #20
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	480e      	ldr	r0, [pc, #56]	@ (8003f00 <MX_GPIO_Init+0x188>)
 8003ec6:	f002 f9e9 	bl	800629c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003eca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4808      	ldr	r0, [pc, #32]	@ (8003f04 <MX_GPIO_Init+0x18c>)
 8003ee4:	f002 f9da 	bl	800629c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003ee8:	bf00      	nop
 8003eea:	3728      	adds	r7, #40	@ 0x28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40020400 	.word	0x40020400
 8003efc:	40020c00 	.word	0x40020c00
 8003f00:	40020800 	.word	0x40020800
 8003f04:	40020000 	.word	0x40020000

08003f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0c:	b672      	cpsid	i
}
 8003f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <Error_Handler+0x8>

08003f14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <HAL_MspInit+0x4c>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	4a0f      	ldr	r2, [pc, #60]	@ (8003f60 <HAL_MspInit+0x4c>)
 8003f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <HAL_MspInit+0x4c>)
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <HAL_MspInit+0x4c>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	4a08      	ldr	r2, [pc, #32]	@ (8003f60 <HAL_MspInit+0x4c>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_MspInit+0x4c>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f52:	2007      	movs	r0, #7
 8003f54:	f001 fd5e 	bl	8005a14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800

08003f64 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	@ 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a24      	ldr	r2, [pc, #144]	@ (8004014 <HAL_ADC_MspInit+0xb0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d141      	bne.n	800400a <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	4b23      	ldr	r3, [pc, #140]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8e:	4a22      	ldr	r2, [pc, #136]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f96:	4b20      	ldr	r3, [pc, #128]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	4a1b      	ldr	r2, [pc, #108]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb2:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	4b15      	ldr	r3, [pc, #84]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fce:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_ADC_MspInit+0xb4>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003fda:	233f      	movs	r3, #63	@ 0x3f
 8003fdc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe6:	f107 0314 	add.w	r3, r7, #20
 8003fea:	4619      	mov	r1, r3
 8003fec:	480b      	ldr	r0, [pc, #44]	@ (800401c <HAL_ADC_MspInit+0xb8>)
 8003fee:	f002 f955 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ff2:	2330      	movs	r3, #48	@ 0x30
 8003ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffe:	f107 0314 	add.w	r3, r7, #20
 8004002:	4619      	mov	r1, r3
 8004004:	4806      	ldr	r0, [pc, #24]	@ (8004020 <HAL_ADC_MspInit+0xbc>)
 8004006:	f002 f949 	bl	800629c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800400a:	bf00      	nop
 800400c:	3728      	adds	r7, #40	@ 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40012000 	.word	0x40012000
 8004018:	40023800 	.word	0x40023800
 800401c:	40020800 	.word	0x40020800
 8004020:	40020000 	.word	0x40020000

08004024 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	@ 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <HAL_I2C_MspInit+0x84>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12b      	bne.n	800409e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <HAL_I2C_MspInit+0x88>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <HAL_I2C_MspInit+0x88>)
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	6313      	str	r3, [r2, #48]	@ 0x30
 8004056:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <HAL_I2C_MspInit+0x88>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004062:	23c0      	movs	r3, #192	@ 0xc0
 8004064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004066:	2312      	movs	r3, #18
 8004068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406e:	2303      	movs	r3, #3
 8004070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004072:	2304      	movs	r3, #4
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004076:	f107 0314 	add.w	r3, r7, #20
 800407a:	4619      	mov	r1, r3
 800407c:	480c      	ldr	r0, [pc, #48]	@ (80040b0 <HAL_I2C_MspInit+0x8c>)
 800407e:	f002 f90d 	bl	800629c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_I2C_MspInit+0x88>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	4a08      	ldr	r2, [pc, #32]	@ (80040ac <HAL_I2C_MspInit+0x88>)
 800408c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004090:	6413      	str	r3, [r2, #64]	@ 0x40
 8004092:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <HAL_I2C_MspInit+0x88>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800409e:	bf00      	nop
 80040a0:	3728      	adds	r7, #40	@ 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40005400 	.word	0x40005400
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40020400 	.word	0x40020400

080040b4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b092      	sub	sp, #72	@ 0x48
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4aaa      	ldr	r2, [pc, #680]	@ (800437c <HAL_TIM_Encoder_MspInit+0x2c8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d14d      	bne.n	8004172 <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040da:	4ba9      	ldr	r3, [pc, #676]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	4aa8      	ldr	r2, [pc, #672]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040e6:	4ba6      	ldr	r3, [pc, #664]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040f6:	4ba2      	ldr	r3, [pc, #648]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	4aa1      	ldr	r2, [pc, #644]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80040fc:	f043 0310 	orr.w	r3, r3, #16
 8004100:	6313      	str	r3, [r2, #48]	@ 0x30
 8004102:	4b9f      	ldr	r3, [pc, #636]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800410c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800410e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004114:	2302      	movs	r3, #2
 8004116:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411c:	2300      	movs	r3, #0
 800411e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004120:	2301      	movs	r3, #1
 8004122:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004124:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004128:	4619      	mov	r1, r3
 800412a:	4896      	ldr	r0, [pc, #600]	@ (8004384 <HAL_TIM_Encoder_MspInit+0x2d0>)
 800412c:	f002 f8b6 	bl	800629c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004130:	2200      	movs	r2, #0
 8004132:	2100      	movs	r1, #0
 8004134:	2018      	movs	r0, #24
 8004136:	f001 fc78 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800413a:	2018      	movs	r0, #24
 800413c:	f001 fc91 	bl	8005a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004140:	2200      	movs	r2, #0
 8004142:	2100      	movs	r1, #0
 8004144:	2019      	movs	r0, #25
 8004146:	f001 fc70 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800414a:	2019      	movs	r0, #25
 800414c:	f001 fc89 	bl	8005a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004150:	2200      	movs	r2, #0
 8004152:	2100      	movs	r1, #0
 8004154:	201a      	movs	r0, #26
 8004156:	f001 fc68 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800415a:	201a      	movs	r0, #26
 800415c:	f001 fc81 	bl	8005a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004160:	2200      	movs	r2, #0
 8004162:	2100      	movs	r1, #0
 8004164:	201b      	movs	r0, #27
 8004166:	f001 fc60 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800416a:	201b      	movs	r0, #27
 800416c:	f001 fc79 	bl	8005a62 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004170:	e0ff      	b.n	8004372 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM3)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a84      	ldr	r2, [pc, #528]	@ (8004388 <HAL_TIM_Encoder_MspInit+0x2d4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d134      	bne.n	80041e6 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800417c:	2300      	movs	r3, #0
 800417e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004180:	4b7f      	ldr	r3, [pc, #508]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	4a7e      	ldr	r2, [pc, #504]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	6413      	str	r3, [r2, #64]	@ 0x40
 800418c:	4b7c      	ldr	r3, [pc, #496]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
 800419c:	4b78      	ldr	r3, [pc, #480]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	4a77      	ldr	r2, [pc, #476]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80041a8:	4b75      	ldr	r3, [pc, #468]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041b4:	23c0      	movs	r3, #192	@ 0xc0
 80041b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b8:	2302      	movs	r3, #2
 80041ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c0:	2300      	movs	r3, #0
 80041c2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041c4:	2302      	movs	r3, #2
 80041c6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80041cc:	4619      	mov	r1, r3
 80041ce:	486f      	ldr	r0, [pc, #444]	@ (800438c <HAL_TIM_Encoder_MspInit+0x2d8>)
 80041d0:	f002 f864 	bl	800629c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041d4:	2200      	movs	r2, #0
 80041d6:	2100      	movs	r1, #0
 80041d8:	201d      	movs	r0, #29
 80041da:	f001 fc26 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041de:	201d      	movs	r0, #29
 80041e0:	f001 fc3f 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 80041e4:	e0c5      	b.n	8004372 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM4)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a69      	ldr	r2, [pc, #420]	@ (8004390 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d135      	bne.n	800425c <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041f0:	2300      	movs	r3, #0
 80041f2:	623b      	str	r3, [r7, #32]
 80041f4:	4b62      	ldr	r3, [pc, #392]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	4a61      	ldr	r2, [pc, #388]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004200:	4b5f      	ldr	r3, [pc, #380]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	623b      	str	r3, [r7, #32]
 800420a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	4b5b      	ldr	r3, [pc, #364]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004214:	4a5a      	ldr	r2, [pc, #360]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004216:	f043 0308 	orr.w	r3, r3, #8
 800421a:	6313      	str	r3, [r2, #48]	@ 0x30
 800421c:	4b58      	ldr	r3, [pc, #352]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004228:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800422c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422e:	2302      	movs	r3, #2
 8004230:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004232:	2300      	movs	r3, #0
 8004234:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004236:	2300      	movs	r3, #0
 8004238:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800423a:	2302      	movs	r3, #2
 800423c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800423e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004242:	4619      	mov	r1, r3
 8004244:	4853      	ldr	r0, [pc, #332]	@ (8004394 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8004246:	f002 f829 	bl	800629c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800424a:	2200      	movs	r2, #0
 800424c:	2100      	movs	r1, #0
 800424e:	201e      	movs	r0, #30
 8004250:	f001 fbeb 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004254:	201e      	movs	r0, #30
 8004256:	f001 fc04 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 800425a:	e08a      	b.n	8004372 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM5)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a4d      	ldr	r2, [pc, #308]	@ (8004398 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d134      	bne.n	80042d0 <HAL_TIM_Encoder_MspInit+0x21c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	4b45      	ldr	r3, [pc, #276]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	4a44      	ldr	r2, [pc, #272]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004270:	f043 0308 	orr.w	r3, r3, #8
 8004274:	6413      	str	r3, [r2, #64]	@ 0x40
 8004276:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	4b3e      	ldr	r3, [pc, #248]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	4a3d      	ldr	r2, [pc, #244]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6313      	str	r3, [r2, #48]	@ 0x30
 8004292:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800429e:	2303      	movs	r3, #3
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	2302      	movs	r3, #2
 80042a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042aa:	2300      	movs	r3, #0
 80042ac:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80042ae:	2302      	movs	r3, #2
 80042b0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80042b6:	4619      	mov	r1, r3
 80042b8:	4834      	ldr	r0, [pc, #208]	@ (800438c <HAL_TIM_Encoder_MspInit+0x2d8>)
 80042ba:	f001 ffef 	bl	800629c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	2032      	movs	r0, #50	@ 0x32
 80042c4:	f001 fbb1 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80042c8:	2032      	movs	r0, #50	@ 0x32
 80042ca:	f001 fbca 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 80042ce:	e050      	b.n	8004372 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM8)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a31      	ldr	r2, [pc, #196]	@ (800439c <HAL_TIM_Encoder_MspInit+0x2e8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d14b      	bne.n	8004372 <HAL_TIM_Encoder_MspInit+0x2be>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	4a27      	ldr	r2, [pc, #156]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80042ea:	4b25      	ldr	r3, [pc, #148]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	4b21      	ldr	r3, [pc, #132]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	4a20      	ldr	r2, [pc, #128]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	6313      	str	r3, [r2, #48]	@ 0x30
 8004306:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004312:	23c0      	movs	r3, #192	@ 0xc0
 8004314:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004316:	2302      	movs	r3, #2
 8004318:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	2300      	movs	r3, #0
 800431c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431e:	2300      	movs	r3, #0
 8004320:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004322:	2303      	movs	r3, #3
 8004324:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004326:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800432a:	4619      	mov	r1, r3
 800432c:	481c      	ldr	r0, [pc, #112]	@ (80043a0 <HAL_TIM_Encoder_MspInit+0x2ec>)
 800432e:	f001 ffb5 	bl	800629c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004332:	2200      	movs	r2, #0
 8004334:	2100      	movs	r1, #0
 8004336:	202b      	movs	r0, #43	@ 0x2b
 8004338:	f001 fb77 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800433c:	202b      	movs	r0, #43	@ 0x2b
 800433e:	f001 fb90 	bl	8005a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	202c      	movs	r0, #44	@ 0x2c
 8004348:	f001 fb6f 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800434c:	202c      	movs	r0, #44	@ 0x2c
 800434e:	f001 fb88 	bl	8005a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004352:	2200      	movs	r2, #0
 8004354:	2100      	movs	r1, #0
 8004356:	202d      	movs	r0, #45	@ 0x2d
 8004358:	f001 fb67 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800435c:	202d      	movs	r0, #45	@ 0x2d
 800435e:	f001 fb80 	bl	8005a62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	2100      	movs	r1, #0
 8004366:	202e      	movs	r0, #46	@ 0x2e
 8004368:	f001 fb5f 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800436c:	202e      	movs	r0, #46	@ 0x2e
 800436e:	f001 fb78 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 8004372:	bf00      	nop
 8004374:	3748      	adds	r7, #72	@ 0x48
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000
 8004380:	40023800 	.word	0x40023800
 8004384:	40021000 	.word	0x40021000
 8004388:	40000400 	.word	0x40000400
 800438c:	40020000 	.word	0x40020000
 8004390:	40000800 	.word	0x40000800
 8004394:	40020c00 	.word	0x40020c00
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40010400 	.word	0x40010400
 80043a0:	40020800 	.word	0x40020800

080043a4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b4:	d10e      	bne.n	80043d4 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	4a23      	ldr	r2, [pc, #140]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c6:	4b21      	ldr	r3, [pc, #132]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 80043d2:	e036      	b.n	8004442 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM9)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004450 <HAL_TIM_PWM_MspInit+0xac>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d116      	bne.n	800440c <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	4b1a      	ldr	r3, [pc, #104]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	4a19      	ldr	r2, [pc, #100]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80043ee:	4b17      	ldr	r3, [pc, #92]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	2018      	movs	r0, #24
 8004400:	f001 fb13 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004404:	2018      	movs	r0, #24
 8004406:	f001 fb2c 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 800440a:	e01a      	b.n	8004442 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM12)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a10      	ldr	r2, [pc, #64]	@ (8004454 <HAL_TIM_PWM_MspInit+0xb0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d115      	bne.n	8004442 <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	4a0b      	ldr	r2, [pc, #44]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 8004420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004424:	6413      	str	r3, [r2, #64]	@ 0x40
 8004426:	4b09      	ldr	r3, [pc, #36]	@ (800444c <HAL_TIM_PWM_MspInit+0xa8>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004432:	2200      	movs	r2, #0
 8004434:	2100      	movs	r1, #0
 8004436:	202b      	movs	r0, #43	@ 0x2b
 8004438:	f001 faf7 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800443c:	202b      	movs	r0, #43	@ 0x2b
 800443e:	f001 fb10 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 8004442:	bf00      	nop
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	40014000 	.word	0x40014000
 8004454:	40001800 	.word	0x40001800

08004458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08c      	sub	sp, #48	@ 0x30
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004460:	f107 031c 	add.w	r3, r7, #28
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004478:	d13e      	bne.n	80044f8 <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	4b44      	ldr	r3, [pc, #272]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	4a43      	ldr	r2, [pc, #268]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 8004484:	f043 0302 	orr.w	r3, r3, #2
 8004488:	6313      	str	r3, [r2, #48]	@ 0x30
 800448a:	4b41      	ldr	r3, [pc, #260]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	4b3d      	ldr	r3, [pc, #244]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449e:	4a3c      	ldr	r2, [pc, #240]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	697b      	ldr	r3, [r7, #20]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80044b2:	f640 4308 	movw	r3, #3080	@ 0xc08
 80044b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b8:	2302      	movs	r3, #2
 80044ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044c4:	2301      	movs	r3, #1
 80044c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c8:	f107 031c 	add.w	r3, r7, #28
 80044cc:	4619      	mov	r1, r3
 80044ce:	4831      	ldr	r0, [pc, #196]	@ (8004594 <HAL_TIM_MspPostInit+0x13c>)
 80044d0:	f001 fee4 	bl	800629c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80044d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	2300      	movs	r3, #0
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044e6:	2301      	movs	r3, #1
 80044e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ea:	f107 031c 	add.w	r3, r7, #28
 80044ee:	4619      	mov	r1, r3
 80044f0:	4829      	ldr	r0, [pc, #164]	@ (8004598 <HAL_TIM_MspPostInit+0x140>)
 80044f2:	f001 fed3 	bl	800629c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80044f6:	e047      	b.n	8004588 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM9)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a27      	ldr	r2, [pc, #156]	@ (800459c <HAL_TIM_MspPostInit+0x144>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d11e      	bne.n	8004540 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	4b22      	ldr	r3, [pc, #136]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	4a21      	ldr	r2, [pc, #132]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 800450c:	f043 0310 	orr.w	r3, r3, #16
 8004510:	6313      	str	r3, [r2, #48]	@ 0x30
 8004512:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800451e:	2360      	movs	r3, #96	@ 0x60
 8004520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004522:	2302      	movs	r3, #2
 8004524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452a:	2300      	movs	r3, #0
 800452c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800452e:	2303      	movs	r3, #3
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004532:	f107 031c 	add.w	r3, r7, #28
 8004536:	4619      	mov	r1, r3
 8004538:	4819      	ldr	r0, [pc, #100]	@ (80045a0 <HAL_TIM_MspPostInit+0x148>)
 800453a:	f001 feaf 	bl	800629c <HAL_GPIO_Init>
}
 800453e:	e023      	b.n	8004588 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a17      	ldr	r2, [pc, #92]	@ (80045a4 <HAL_TIM_MspPostInit+0x14c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d11e      	bne.n	8004588 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	4b10      	ldr	r3, [pc, #64]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	4a0f      	ldr	r2, [pc, #60]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 8004554:	f043 0302 	orr.w	r3, r3, #2
 8004558:	6313      	str	r3, [r2, #48]	@ 0x30
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <HAL_TIM_MspPostInit+0x138>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004566:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800456a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	2302      	movs	r3, #2
 800456e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004574:	2300      	movs	r3, #0
 8004576:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004578:	2309      	movs	r3, #9
 800457a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457c:	f107 031c 	add.w	r3, r7, #28
 8004580:	4619      	mov	r1, r3
 8004582:	4804      	ldr	r0, [pc, #16]	@ (8004594 <HAL_TIM_MspPostInit+0x13c>)
 8004584:	f001 fe8a 	bl	800629c <HAL_GPIO_Init>
}
 8004588:	bf00      	nop
 800458a:	3730      	adds	r7, #48	@ 0x30
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	40020400 	.word	0x40020400
 8004598:	40020000 	.word	0x40020000
 800459c:	40014000 	.word	0x40014000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40001800 	.word	0x40001800

080045a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b090      	sub	sp, #64	@ 0x40
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a4a      	ldr	r2, [pc, #296]	@ (80046f0 <HAL_UART_MspInit+0x148>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f040 80a0 	bne.w	800470c <HAL_UART_MspInit+0x164>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80045cc:	2300      	movs	r3, #0
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d0:	4b48      	ldr	r3, [pc, #288]	@ (80046f4 <HAL_UART_MspInit+0x14c>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	4a47      	ldr	r2, [pc, #284]	@ (80046f4 <HAL_UART_MspInit+0x14c>)
 80045d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045da:	6413      	str	r3, [r2, #64]	@ 0x40
 80045dc:	4b45      	ldr	r3, [pc, #276]	@ (80046f4 <HAL_UART_MspInit+0x14c>)
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ec:	4b41      	ldr	r3, [pc, #260]	@ (80046f4 <HAL_UART_MspInit+0x14c>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	4a40      	ldr	r2, [pc, #256]	@ (80046f4 <HAL_UART_MspInit+0x14c>)
 80045f2:	f043 0304 	orr.w	r3, r3, #4
 80045f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80045f8:	4b3e      	ldr	r3, [pc, #248]	@ (80046f4 <HAL_UART_MspInit+0x14c>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	627b      	str	r3, [r7, #36]	@ 0x24
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004604:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460a:	2302      	movs	r3, #2
 800460c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004612:	2303      	movs	r3, #3
 8004614:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004616:	2308      	movs	r3, #8
 8004618:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800461a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800461e:	4619      	mov	r1, r3
 8004620:	4835      	ldr	r0, [pc, #212]	@ (80046f8 <HAL_UART_MspInit+0x150>)
 8004622:	f001 fe3b 	bl	800629c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004626:	4b35      	ldr	r3, [pc, #212]	@ (80046fc <HAL_UART_MspInit+0x154>)
 8004628:	4a35      	ldr	r2, [pc, #212]	@ (8004700 <HAL_UART_MspInit+0x158>)
 800462a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800462c:	4b33      	ldr	r3, [pc, #204]	@ (80046fc <HAL_UART_MspInit+0x154>)
 800462e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004632:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004634:	4b31      	ldr	r3, [pc, #196]	@ (80046fc <HAL_UART_MspInit+0x154>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800463a:	4b30      	ldr	r3, [pc, #192]	@ (80046fc <HAL_UART_MspInit+0x154>)
 800463c:	2200      	movs	r2, #0
 800463e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004640:	4b2e      	ldr	r3, [pc, #184]	@ (80046fc <HAL_UART_MspInit+0x154>)
 8004642:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004646:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004648:	4b2c      	ldr	r3, [pc, #176]	@ (80046fc <HAL_UART_MspInit+0x154>)
 800464a:	2200      	movs	r2, #0
 800464c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800464e:	4b2b      	ldr	r3, [pc, #172]	@ (80046fc <HAL_UART_MspInit+0x154>)
 8004650:	2200      	movs	r2, #0
 8004652:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004654:	4b29      	ldr	r3, [pc, #164]	@ (80046fc <HAL_UART_MspInit+0x154>)
 8004656:	2200      	movs	r2, #0
 8004658:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800465a:	4b28      	ldr	r3, [pc, #160]	@ (80046fc <HAL_UART_MspInit+0x154>)
 800465c:	2200      	movs	r2, #0
 800465e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004660:	4b26      	ldr	r3, [pc, #152]	@ (80046fc <HAL_UART_MspInit+0x154>)
 8004662:	2200      	movs	r2, #0
 8004664:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004666:	4825      	ldr	r0, [pc, #148]	@ (80046fc <HAL_UART_MspInit+0x154>)
 8004668:	f001 fa16 	bl	8005a98 <HAL_DMA_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004672:	f7ff fc49 	bl	8003f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a20      	ldr	r2, [pc, #128]	@ (80046fc <HAL_UART_MspInit+0x154>)
 800467a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800467c:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <HAL_UART_MspInit+0x154>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004682:	4b20      	ldr	r3, [pc, #128]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 8004684:	4a20      	ldr	r2, [pc, #128]	@ (8004708 <HAL_UART_MspInit+0x160>)
 8004686:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004688:	4b1e      	ldr	r3, [pc, #120]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 800468a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800468e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004690:	4b1c      	ldr	r3, [pc, #112]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 8004692:	2240      	movs	r2, #64	@ 0x40
 8004694:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004696:	4b1b      	ldr	r3, [pc, #108]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 8004698:	2200      	movs	r2, #0
 800469a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800469c:	4b19      	ldr	r3, [pc, #100]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 800469e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046a4:	4b17      	ldr	r3, [pc, #92]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046aa:	4b16      	ldr	r3, [pc, #88]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80046b0:	4b14      	ldr	r3, [pc, #80]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046b6:	4b13      	ldr	r3, [pc, #76]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046bc:	4b11      	ldr	r3, [pc, #68]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 80046be:	2200      	movs	r2, #0
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80046c2:	4810      	ldr	r0, [pc, #64]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 80046c4:	f001 f9e8 	bl	8005a98 <HAL_DMA_Init>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80046ce:	f7ff fc1b 	bl	8003f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 80046d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80046d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004704 <HAL_UART_MspInit+0x15c>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	2034      	movs	r0, #52	@ 0x34
 80046e4:	f001 f9a1 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80046e8:	2034      	movs	r0, #52	@ 0x34
 80046ea:	f001 f9ba 	bl	8005a62 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80046ee:	e1f9      	b.n	8004ae4 <HAL_UART_MspInit+0x53c>
 80046f0:	40004c00 	.word	0x40004c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40020800 	.word	0x40020800
 80046fc:	200007e4 	.word	0x200007e4
 8004700:	40026040 	.word	0x40026040
 8004704:	20000844 	.word	0x20000844
 8004708:	40026070 	.word	0x40026070
  else if(huart->Instance==UART5)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a59      	ldr	r2, [pc, #356]	@ (8004878 <HAL_UART_MspInit+0x2d0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	f040 80c0 	bne.w	8004898 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004718:	2300      	movs	r3, #0
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	4b57      	ldr	r3, [pc, #348]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	4a56      	ldr	r2, [pc, #344]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004726:	6413      	str	r3, [r2, #64]	@ 0x40
 8004728:	4b54      	ldr	r3, [pc, #336]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004734:	2300      	movs	r3, #0
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	4b50      	ldr	r3, [pc, #320]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	4a4f      	ldr	r2, [pc, #316]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	6313      	str	r3, [r2, #48]	@ 0x30
 8004744:	4b4d      	ldr	r3, [pc, #308]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	4b49      	ldr	r3, [pc, #292]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004758:	4a48      	ldr	r2, [pc, #288]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 800475a:	f043 0308 	orr.w	r3, r3, #8
 800475e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004760:	4b46      	ldr	r3, [pc, #280]	@ (800487c <HAL_UART_MspInit+0x2d4>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800476c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004772:	2302      	movs	r3, #2
 8004774:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004776:	2300      	movs	r3, #0
 8004778:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477a:	2303      	movs	r3, #3
 800477c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800477e:	2308      	movs	r3, #8
 8004780:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004782:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004786:	4619      	mov	r1, r3
 8004788:	483d      	ldr	r0, [pc, #244]	@ (8004880 <HAL_UART_MspInit+0x2d8>)
 800478a:	f001 fd87 	bl	800629c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800478e:	2304      	movs	r3, #4
 8004790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004792:	2302      	movs	r3, #2
 8004794:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800479a:	2303      	movs	r3, #3
 800479c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800479e:	2308      	movs	r3, #8
 80047a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047a6:	4619      	mov	r1, r3
 80047a8:	4836      	ldr	r0, [pc, #216]	@ (8004884 <HAL_UART_MspInit+0x2dc>)
 80047aa:	f001 fd77 	bl	800629c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80047ae:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047b0:	4a36      	ldr	r2, [pc, #216]	@ (800488c <HAL_UART_MspInit+0x2e4>)
 80047b2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80047b4:	4b34      	ldr	r3, [pc, #208]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80047ba:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047bc:	4b32      	ldr	r3, [pc, #200]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047c2:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047ce:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047d8:	2200      	movs	r2, #0
 80047da:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80047dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047de:	2200      	movs	r2, #0
 80047e0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047e2:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047e8:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80047ee:	4826      	ldr	r0, [pc, #152]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 80047f0:	f001 f952 	bl	8005a98 <HAL_DMA_Init>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_UART_MspInit+0x256>
      Error_Handler();
 80047fa:	f7ff fb85 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a21      	ldr	r2, [pc, #132]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 8004802:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004804:	4a20      	ldr	r2, [pc, #128]	@ (8004888 <HAL_UART_MspInit+0x2e0>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800480a:	4b21      	ldr	r3, [pc, #132]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 800480c:	4a21      	ldr	r2, [pc, #132]	@ (8004894 <HAL_UART_MspInit+0x2ec>)
 800480e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8004810:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 8004812:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004816:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004818:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 800481a:	2240      	movs	r2, #64	@ 0x40
 800481c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800481e:	4b1c      	ldr	r3, [pc, #112]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 8004820:	2200      	movs	r2, #0
 8004822:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004824:	4b1a      	ldr	r3, [pc, #104]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 8004826:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800482a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800482c:	4b18      	ldr	r3, [pc, #96]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 800482e:	2200      	movs	r2, #0
 8004830:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004832:	4b17      	ldr	r3, [pc, #92]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004838:	4b15      	ldr	r3, [pc, #84]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800483e:	4b14      	ldr	r3, [pc, #80]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 8004840:	2200      	movs	r2, #0
 8004842:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004844:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 8004846:	2200      	movs	r2, #0
 8004848:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800484a:	4811      	ldr	r0, [pc, #68]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 800484c:	f001 f924 	bl	8005a98 <HAL_DMA_Init>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8004856:	f7ff fb57 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a0c      	ldr	r2, [pc, #48]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004860:	4a0b      	ldr	r2, [pc, #44]	@ (8004890 <HAL_UART_MspInit+0x2e8>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004866:	2200      	movs	r2, #0
 8004868:	2100      	movs	r1, #0
 800486a:	2035      	movs	r0, #53	@ 0x35
 800486c:	f001 f8dd 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004870:	2035      	movs	r0, #53	@ 0x35
 8004872:	f001 f8f6 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 8004876:	e135      	b.n	8004ae4 <HAL_UART_MspInit+0x53c>
 8004878:	40005000 	.word	0x40005000
 800487c:	40023800 	.word	0x40023800
 8004880:	40020800 	.word	0x40020800
 8004884:	40020c00 	.word	0x40020c00
 8004888:	200008a4 	.word	0x200008a4
 800488c:	40026010 	.word	0x40026010
 8004890:	20000904 	.word	0x20000904
 8004894:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a93      	ldr	r2, [pc, #588]	@ (8004aec <HAL_UART_MspInit+0x544>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	f040 808a 	bne.w	80049b8 <HAL_UART_MspInit+0x410>
    __HAL_RCC_USART1_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	4b91      	ldr	r3, [pc, #580]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80048aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ac:	4a90      	ldr	r2, [pc, #576]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80048ae:	f043 0310 	orr.w	r3, r3, #16
 80048b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80048b4:	4b8e      	ldr	r3, [pc, #568]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80048b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	4b8a      	ldr	r3, [pc, #552]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	4a89      	ldr	r2, [pc, #548]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80048d0:	4b87      	ldr	r3, [pc, #540]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80048e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e2:	2302      	movs	r3, #2
 80048e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ea:	2303      	movs	r3, #3
 80048ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048ee:	2307      	movs	r3, #7
 80048f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048f6:	4619      	mov	r1, r3
 80048f8:	487e      	ldr	r0, [pc, #504]	@ (8004af4 <HAL_UART_MspInit+0x54c>)
 80048fa:	f001 fccf 	bl	800629c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80048fe:	4b7e      	ldr	r3, [pc, #504]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004900:	4a7e      	ldr	r2, [pc, #504]	@ (8004afc <HAL_UART_MspInit+0x554>)
 8004902:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004904:	4b7c      	ldr	r3, [pc, #496]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004906:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800490a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800490c:	4b7a      	ldr	r3, [pc, #488]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004912:	4b79      	ldr	r3, [pc, #484]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004918:	4b77      	ldr	r3, [pc, #476]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 800491a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800491e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004920:	4b75      	ldr	r3, [pc, #468]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004922:	2200      	movs	r2, #0
 8004924:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004926:	4b74      	ldr	r3, [pc, #464]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004928:	2200      	movs	r2, #0
 800492a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800492c:	4b72      	ldr	r3, [pc, #456]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 800492e:	2200      	movs	r2, #0
 8004930:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004932:	4b71      	ldr	r3, [pc, #452]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004934:	2200      	movs	r2, #0
 8004936:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004938:	4b6f      	ldr	r3, [pc, #444]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 800493a:	2200      	movs	r2, #0
 800493c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800493e:	486e      	ldr	r0, [pc, #440]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004940:	f001 f8aa 	bl	8005a98 <HAL_DMA_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 800494a:	f7ff fadd 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a69      	ldr	r2, [pc, #420]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004952:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004954:	4a68      	ldr	r2, [pc, #416]	@ (8004af8 <HAL_UART_MspInit+0x550>)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800495a:	4b69      	ldr	r3, [pc, #420]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 800495c:	4a69      	ldr	r2, [pc, #420]	@ (8004b04 <HAL_UART_MspInit+0x55c>)
 800495e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004960:	4b67      	ldr	r3, [pc, #412]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 8004962:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004966:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004968:	4b65      	ldr	r3, [pc, #404]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 800496a:	2240      	movs	r2, #64	@ 0x40
 800496c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800496e:	4b64      	ldr	r3, [pc, #400]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 8004970:	2200      	movs	r2, #0
 8004972:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004974:	4b62      	ldr	r3, [pc, #392]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 8004976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800497a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800497c:	4b60      	ldr	r3, [pc, #384]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 800497e:	2200      	movs	r2, #0
 8004980:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004982:	4b5f      	ldr	r3, [pc, #380]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 8004984:	2200      	movs	r2, #0
 8004986:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004988:	4b5d      	ldr	r3, [pc, #372]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 800498a:	2200      	movs	r2, #0
 800498c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800498e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 8004990:	2200      	movs	r2, #0
 8004992:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004994:	4b5a      	ldr	r3, [pc, #360]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 8004996:	2200      	movs	r2, #0
 8004998:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800499a:	4859      	ldr	r0, [pc, #356]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 800499c:	f001 f87c 	bl	8005a98 <HAL_DMA_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_UART_MspInit+0x402>
      Error_Handler();
 80049a6:	f7ff faaf 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a54      	ldr	r2, [pc, #336]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80049b0:	4a53      	ldr	r2, [pc, #332]	@ (8004b00 <HAL_UART_MspInit+0x558>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80049b6:	e095      	b.n	8004ae4 <HAL_UART_MspInit+0x53c>
  else if(huart->Instance==USART2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a52      	ldr	r2, [pc, #328]	@ (8004b08 <HAL_UART_MspInit+0x560>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	f040 8090 	bne.w	8004ae4 <HAL_UART_MspInit+0x53c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	4b49      	ldr	r3, [pc, #292]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	4a48      	ldr	r2, [pc, #288]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80049d4:	4b46      	ldr	r3, [pc, #280]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	4b42      	ldr	r3, [pc, #264]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80049e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e8:	4a41      	ldr	r2, [pc, #260]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80049f0:	4b3f      	ldr	r3, [pc, #252]	@ (8004af0 <HAL_UART_MspInit+0x548>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049fc:	230c      	movs	r3, #12
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a00:	2302      	movs	r3, #2
 8004a02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a0c:	2307      	movs	r3, #7
 8004a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a14:	4619      	mov	r1, r3
 8004a16:	4837      	ldr	r0, [pc, #220]	@ (8004af4 <HAL_UART_MspInit+0x54c>)
 8004a18:	f001 fc40 	bl	800629c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a1e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b10 <HAL_UART_MspInit+0x568>)
 8004a20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004a22:	4b3a      	ldr	r3, [pc, #232]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004a28:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a2a:	4b38      	ldr	r3, [pc, #224]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a30:	4b36      	ldr	r3, [pc, #216]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a36:	4b35      	ldr	r3, [pc, #212]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a3e:	4b33      	ldr	r3, [pc, #204]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a44:	4b31      	ldr	r3, [pc, #196]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004a4a:	4b30      	ldr	r3, [pc, #192]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a50:	4b2e      	ldr	r3, [pc, #184]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a56:	4b2d      	ldr	r3, [pc, #180]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004a5c:	482b      	ldr	r0, [pc, #172]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a5e:	f001 f81b 	bl	8005a98 <HAL_DMA_Init>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 8004a68:	f7ff fa4e 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a27      	ldr	r2, [pc, #156]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a72:	4a26      	ldr	r2, [pc, #152]	@ (8004b0c <HAL_UART_MspInit+0x564>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004a78:	4b26      	ldr	r3, [pc, #152]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004a7a:	4a27      	ldr	r2, [pc, #156]	@ (8004b18 <HAL_UART_MspInit+0x570>)
 8004a7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004a7e:	4b25      	ldr	r3, [pc, #148]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004a80:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004a84:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a86:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004a88:	2240      	movs	r2, #64	@ 0x40
 8004a8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a8c:	4b21      	ldr	r3, [pc, #132]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a92:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004a94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a98:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004aac:	4b19      	ldr	r3, [pc, #100]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ab2:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004ab8:	4816      	ldr	r0, [pc, #88]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004aba:	f000 ffed 	bl	8005a98 <HAL_DMA_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_UART_MspInit+0x520>
      Error_Handler();
 8004ac4:	f7ff fa20 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a12      	ldr	r2, [pc, #72]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004acc:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ace:	4a11      	ldr	r2, [pc, #68]	@ (8004b14 <HAL_UART_MspInit+0x56c>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	2026      	movs	r0, #38	@ 0x26
 8004ada:	f000 ffa6 	bl	8005a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ade:	2026      	movs	r0, #38	@ 0x26
 8004ae0:	f000 ffbf 	bl	8005a62 <HAL_NVIC_EnableIRQ>
}
 8004ae4:	bf00      	nop
 8004ae6:	3740      	adds	r7, #64	@ 0x40
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40011000 	.word	0x40011000
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40020000 	.word	0x40020000
 8004af8:	20000964 	.word	0x20000964
 8004afc:	40026440 	.word	0x40026440
 8004b00:	200009c4 	.word	0x200009c4
 8004b04:	400264b8 	.word	0x400264b8
 8004b08:	40004400 	.word	0x40004400
 8004b0c:	20000a24 	.word	0x20000a24
 8004b10:	40026088 	.word	0x40026088
 8004b14:	20000a84 	.word	0x20000a84
 8004b18:	400260a0 	.word	0x400260a0

08004b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <NMI_Handler+0x4>

08004b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b28:	bf00      	nop
 8004b2a:	e7fd      	b.n	8004b28 <HardFault_Handler+0x4>

08004b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <MemManage_Handler+0x4>

08004b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b38:	bf00      	nop
 8004b3a:	e7fd      	b.n	8004b38 <BusFault_Handler+0x4>

08004b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <UsageFault_Handler+0x4>

08004b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b72:	f000 fa3b 	bl	8004fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004b80:	4802      	ldr	r0, [pc, #8]	@ (8004b8c <DMA1_Stream0_IRQHandler+0x10>)
 8004b82:	f001 f921 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200008a4 	.word	0x200008a4

08004b90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004b94:	4802      	ldr	r0, [pc, #8]	@ (8004ba0 <DMA1_Stream2_IRQHandler+0x10>)
 8004b96:	f001 f917 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	200007e4 	.word	0x200007e4

08004ba4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004ba8:	4802      	ldr	r0, [pc, #8]	@ (8004bb4 <DMA1_Stream4_IRQHandler+0x10>)
 8004baa:	f001 f90d 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000844 	.word	0x20000844

08004bb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004bbc:	4802      	ldr	r0, [pc, #8]	@ (8004bc8 <DMA1_Stream5_IRQHandler+0x10>)
 8004bbe:	f001 f903 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000a24 	.word	0x20000a24

08004bcc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004bd0:	4802      	ldr	r0, [pc, #8]	@ (8004bdc <DMA1_Stream6_IRQHandler+0x10>)
 8004bd2:	f001 f8f9 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000a84 	.word	0x20000a84

08004be0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004be4:	4803      	ldr	r0, [pc, #12]	@ (8004bf4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004be6:	f002 fd57 	bl	8007698 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004bea:	4803      	ldr	r0, [pc, #12]	@ (8004bf8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004bec:	f002 fd54 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004bf0:	bf00      	nop
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200003b0 	.word	0x200003b0
 8004bf8:	20000634 	.word	0x20000634

08004bfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c00:	4802      	ldr	r0, [pc, #8]	@ (8004c0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004c02:	f002 fd49 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	200003b0 	.word	0x200003b0

08004c10 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c14:	4802      	ldr	r0, [pc, #8]	@ (8004c20 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004c16:	f002 fd3f 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200003b0 	.word	0x200003b0

08004c24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c28:	4802      	ldr	r0, [pc, #8]	@ (8004c34 <TIM1_CC_IRQHandler+0x10>)
 8004c2a:	f002 fd35 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200003b0 	.word	0x200003b0

08004c38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c3c:	4802      	ldr	r0, [pc, #8]	@ (8004c48 <TIM3_IRQHandler+0x10>)
 8004c3e:	f002 fd2b 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c42:	bf00      	nop
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200003f8 	.word	0x200003f8

08004c4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004c50:	4802      	ldr	r0, [pc, #8]	@ (8004c5c <TIM4_IRQHandler+0x10>)
 8004c52:	f002 fd21 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000440 	.word	0x20000440

08004c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c64:	4802      	ldr	r0, [pc, #8]	@ (8004c70 <USART2_IRQHandler+0x10>)
 8004c66:	f003 fa79 	bl	800815c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	2000079c 	.word	0x2000079c

08004c74 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004c78:	4803      	ldr	r0, [pc, #12]	@ (8004c88 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8004c7a:	f002 fd0d 	bl	8007698 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8004c7e:	4803      	ldr	r0, [pc, #12]	@ (8004c8c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8004c80:	f002 fd0a 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	200004d0 	.word	0x200004d0
 8004c8c:	2000067c 	.word	0x2000067c

08004c90 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004c94:	4802      	ldr	r0, [pc, #8]	@ (8004ca0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004c96:	f002 fcff 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200004d0 	.word	0x200004d0

08004ca4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004ca8:	4802      	ldr	r0, [pc, #8]	@ (8004cb4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004caa:	f002 fcf5 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200004d0 	.word	0x200004d0

08004cb8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004cbc:	4802      	ldr	r0, [pc, #8]	@ (8004cc8 <TIM8_CC_IRQHandler+0x10>)
 8004cbe:	f002 fceb 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200004d0 	.word	0x200004d0

08004ccc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004cd0:	4802      	ldr	r0, [pc, #8]	@ (8004cdc <DMA1_Stream7_IRQHandler+0x10>)
 8004cd2:	f001 f879 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000904 	.word	0x20000904

08004ce0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004ce4:	4802      	ldr	r0, [pc, #8]	@ (8004cf0 <TIM5_IRQHandler+0x10>)
 8004ce6:	f002 fcd7 	bl	8007698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000488 	.word	0x20000488

08004cf4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004cf8:	4802      	ldr	r0, [pc, #8]	@ (8004d04 <UART4_IRQHandler+0x10>)
 8004cfa:	f003 fa2f 	bl	800815c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	200006c4 	.word	0x200006c4

08004d08 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004d0c:	4802      	ldr	r0, [pc, #8]	@ (8004d18 <UART5_IRQHandler+0x10>)
 8004d0e:	f003 fa25 	bl	800815c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000070c 	.word	0x2000070c

08004d1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004d20:	4802      	ldr	r0, [pc, #8]	@ (8004d2c <DMA2_Stream2_IRQHandler+0x10>)
 8004d22:	f001 f851 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000964 	.word	0x20000964

08004d30 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004d34:	4802      	ldr	r0, [pc, #8]	@ (8004d40 <DMA2_Stream7_IRQHandler+0x10>)
 8004d36:	f001 f847 	bl	8005dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200009c4 	.word	0x200009c4

08004d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return 1;
 8004d48:	2301      	movs	r3, #1
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <_kill>:

int _kill(int pid, int sig)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d5e:	f005 fe7f 	bl	800aa60 <__errno>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2216      	movs	r2, #22
 8004d66:	601a      	str	r2, [r3, #0]
  return -1;
 8004d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <_exit>:

void _exit (int status)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ffe7 	bl	8004d54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <_exit+0x12>

08004d8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e00a      	b.n	8004db2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d9c:	f3af 8000 	nop.w
 8004da0:	4601      	mov	r1, r0
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	60ba      	str	r2, [r7, #8]
 8004da8:	b2ca      	uxtb	r2, r1
 8004daa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3301      	adds	r3, #1
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	dbf0      	blt.n	8004d9c <_read+0x12>
  }

  return len;
 8004dba:	687b      	ldr	r3, [r7, #4]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e009      	b.n	8004dea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	60ba      	str	r2, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3301      	adds	r3, #1
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	dbf1      	blt.n	8004dd6 <_write+0x12>
  }
  return len;
 8004df2:	687b      	ldr	r3, [r7, #4]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <_close>:

int _close(int file)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e24:	605a      	str	r2, [r3, #4]
  return 0;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <_isatty>:

int _isatty(int file)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e3c:	2301      	movs	r3, #1
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e6c:	4a14      	ldr	r2, [pc, #80]	@ (8004ec0 <_sbrk+0x5c>)
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <_sbrk+0x60>)
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e78:	4b13      	ldr	r3, [pc, #76]	@ (8004ec8 <_sbrk+0x64>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e80:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <_sbrk+0x64>)
 8004e82:	4a12      	ldr	r2, [pc, #72]	@ (8004ecc <_sbrk+0x68>)
 8004e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e86:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <_sbrk+0x64>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d207      	bcs.n	8004ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e94:	f005 fde4 	bl	800aa60 <__errno>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	220c      	movs	r2, #12
 8004e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	e009      	b.n	8004eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ea4:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <_sbrk+0x64>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004eaa:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <_sbrk+0x64>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <_sbrk+0x64>)
 8004eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20020000 	.word	0x20020000
 8004ec4:	00000400 	.word	0x00000400
 8004ec8:	20000ae4 	.word	0x20000ae4
 8004ecc:	20000c38 	.word	0x20000c38

08004ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ed4:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <SystemInit+0x20>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	4a05      	ldr	r2, [pc, #20]	@ (8004ef0 <SystemInit+0x20>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000ed00 	.word	0xe000ed00

08004ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ef4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004f2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ef8:	480d      	ldr	r0, [pc, #52]	@ (8004f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004efa:	490e      	ldr	r1, [pc, #56]	@ (8004f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004efc:	4a0e      	ldr	r2, [pc, #56]	@ (8004f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f00:	e002      	b.n	8004f08 <LoopCopyDataInit>

08004f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f06:	3304      	adds	r3, #4

08004f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f0c:	d3f9      	bcc.n	8004f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8004f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f10:	4c0b      	ldr	r4, [pc, #44]	@ (8004f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f14:	e001      	b.n	8004f1a <LoopFillZerobss>

08004f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f18:	3204      	adds	r2, #4

08004f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f1c:	d3fb      	bcc.n	8004f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f1e:	f7ff ffd7 	bl	8004ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f22:	f005 fda3 	bl	800aa6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f26:	f7fd ff27 	bl	8002d78 <main>
  bx  lr    
 8004f2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f34:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8004f38:	0800e8a0 	.word	0x0800e8a0
  ldr r2, =_sbss
 8004f3c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004f40:	20000c38 	.word	0x20000c38

08004f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f44:	e7fe      	b.n	8004f44 <ADC_IRQHandler>
	...

08004f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f88 <HAL_Init+0x40>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0d      	ldr	r2, [pc, #52]	@ (8004f88 <HAL_Init+0x40>)
 8004f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_Init+0x40>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f88 <HAL_Init+0x40>)
 8004f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f64:	4b08      	ldr	r3, [pc, #32]	@ (8004f88 <HAL_Init+0x40>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a07      	ldr	r2, [pc, #28]	@ (8004f88 <HAL_Init+0x40>)
 8004f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f70:	2003      	movs	r0, #3
 8004f72:	f000 fd4f 	bl	8005a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f76:	2000      	movs	r0, #0
 8004f78:	f000 f808 	bl	8004f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f7c:	f7fe ffca 	bl	8003f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40023c00 	.word	0x40023c00

08004f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f94:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <HAL_InitTick+0x54>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b12      	ldr	r3, [pc, #72]	@ (8004fe4 <HAL_InitTick+0x58>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fd67 	bl	8005a7e <HAL_SYSTICK_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e00e      	b.n	8004fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b0f      	cmp	r3, #15
 8004fbe:	d80a      	bhi.n	8004fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	f000 fd2f 	bl	8005a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fcc:	4a06      	ldr	r2, [pc, #24]	@ (8004fe8 <HAL_InitTick+0x5c>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000078 	.word	0x20000078
 8004fe4:	20000080 	.word	0x20000080
 8004fe8:	2000007c 	.word	0x2000007c

08004fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_IncTick+0x20>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <HAL_IncTick+0x24>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	4a04      	ldr	r2, [pc, #16]	@ (8005010 <HAL_IncTick+0x24>)
 8004ffe:	6013      	str	r3, [r2, #0]
}
 8005000:	bf00      	nop
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000080 	.word	0x20000080
 8005010:	20000ae8 	.word	0x20000ae8

08005014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return uwTick;
 8005018:	4b03      	ldr	r3, [pc, #12]	@ (8005028 <HAL_GetTick+0x14>)
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000ae8 	.word	0x20000ae8

0800502c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005034:	f7ff ffee 	bl	8005014 <HAL_GetTick>
 8005038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d005      	beq.n	8005052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005046:	4b0a      	ldr	r3, [pc, #40]	@ (8005070 <HAL_Delay+0x44>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005052:	bf00      	nop
 8005054:	f7ff ffde 	bl	8005014 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	429a      	cmp	r2, r3
 8005062:	d8f7      	bhi.n	8005054 <HAL_Delay+0x28>
  {
  }
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000080 	.word	0x20000080

08005074 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e033      	b.n	80050f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fe ff66 	bl	8003f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d118      	bne.n	80050e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80050ba:	f023 0302 	bic.w	r3, r3, #2
 80050be:	f043 0202 	orr.w	r2, r3, #2
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fad8 	bl	800567c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80050e2:	e001      	b.n	80050e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_ADC_Start+0x1a>
 8005112:	2302      	movs	r3, #2
 8005114:	e0b2      	b.n	800527c <HAL_ADC_Start+0x180>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d018      	beq.n	800515e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800513c:	4b52      	ldr	r3, [pc, #328]	@ (8005288 <HAL_ADC_Start+0x18c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a52      	ldr	r2, [pc, #328]	@ (800528c <HAL_ADC_Start+0x190>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	0c9a      	lsrs	r2, r3, #18
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005150:	e002      	b.n	8005158 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3b01      	subs	r3, #1
 8005156:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f9      	bne.n	8005152 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d17a      	bne.n	8005262 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005196:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051aa:	d106      	bne.n	80051ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b0:	f023 0206 	bic.w	r2, r3, #6
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80051b8:	e002      	b.n	80051c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051c8:	4b31      	ldr	r3, [pc, #196]	@ (8005290 <HAL_ADC_Start+0x194>)
 80051ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80051d4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d12a      	bne.n	8005238 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005294 <HAL_ADC_Start+0x198>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d015      	beq.n	8005218 <HAL_ADC_Start+0x11c>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a29      	ldr	r2, [pc, #164]	@ (8005298 <HAL_ADC_Start+0x19c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d105      	bne.n	8005202 <HAL_ADC_Start+0x106>
 80051f6:	4b26      	ldr	r3, [pc, #152]	@ (8005290 <HAL_ADC_Start+0x194>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a25      	ldr	r2, [pc, #148]	@ (800529c <HAL_ADC_Start+0x1a0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d136      	bne.n	800527a <HAL_ADC_Start+0x17e>
 800520c:	4b20      	ldr	r3, [pc, #128]	@ (8005290 <HAL_ADC_Start+0x194>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d130      	bne.n	800527a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d129      	bne.n	800527a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	e020      	b.n	800527a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a15      	ldr	r2, [pc, #84]	@ (8005294 <HAL_ADC_Start+0x198>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d11b      	bne.n	800527a <HAL_ADC_Start+0x17e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d114      	bne.n	800527a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	e00b      	b.n	800527a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	f043 0210 	orr.w	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f043 0201 	orr.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	20000078 	.word	0x20000078
 800528c:	431bde83 	.word	0x431bde83
 8005290:	40012300 	.word	0x40012300
 8005294:	40012000 	.word	0x40012000
 8005298:	40012100 	.word	0x40012100
 800529c:	40012200 	.word	0x40012200

080052a0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_ADC_Stop+0x16>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e021      	b.n	80052fa <HAL_ADC_Stop+0x5a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0201 	bic.w	r2, r2, #1
 80052cc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	f043 0201 	orr.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005322:	d113      	bne.n	800534c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800532e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005332:	d10b      	bne.n	800534c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e063      	b.n	8005414 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800534c:	f7ff fe62 	bl	8005014 <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005352:	e021      	b.n	8005398 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d01d      	beq.n	8005398 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <HAL_ADC_PollForConversion+0x6c>
 8005362:	f7ff fe57 	bl	8005014 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d212      	bcs.n	8005398 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b02      	cmp	r3, #2
 800537e:	d00b      	beq.n	8005398 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	f043 0204 	orr.w	r2, r3, #4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e03d      	b.n	8005414 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d1d6      	bne.n	8005354 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f06f 0212 	mvn.w	r2, #18
 80053ae:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d123      	bne.n	8005412 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11f      	bne.n	8005412 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d111      	bne.n	8005412 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d105      	bne.n	8005412 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	f043 0201 	orr.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x1c>
 8005450:	2302      	movs	r3, #2
 8005452:	e105      	b.n	8005660 <HAL_ADC_ConfigChannel+0x228>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b09      	cmp	r3, #9
 8005462:	d925      	bls.n	80054b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68d9      	ldr	r1, [r3, #12]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	3b1e      	subs	r3, #30
 800547a:	2207      	movs	r2, #7
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43da      	mvns	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	400a      	ands	r2, r1
 8005488:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68d9      	ldr	r1, [r3, #12]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	4618      	mov	r0, r3
 800549c:	4603      	mov	r3, r0
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4403      	add	r3, r0
 80054a2:	3b1e      	subs	r3, #30
 80054a4:	409a      	lsls	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	60da      	str	r2, [r3, #12]
 80054ae:	e022      	b.n	80054f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6919      	ldr	r1, [r3, #16]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	4613      	mov	r3, r2
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	4413      	add	r3, r2
 80054c4:	2207      	movs	r2, #7
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43da      	mvns	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	400a      	ands	r2, r1
 80054d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6919      	ldr	r1, [r3, #16]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	4618      	mov	r0, r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	4403      	add	r3, r0
 80054ec:	409a      	lsls	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d824      	bhi.n	8005548 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	3b05      	subs	r3, #5
 8005510:	221f      	movs	r2, #31
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43da      	mvns	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	400a      	ands	r2, r1
 800551e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	4618      	mov	r0, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	3b05      	subs	r3, #5
 800553a:	fa00 f203 	lsl.w	r2, r0, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	635a      	str	r2, [r3, #52]	@ 0x34
 8005546:	e04c      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b0c      	cmp	r3, #12
 800554e:	d824      	bhi.n	800559a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	3b23      	subs	r3, #35	@ 0x23
 8005562:	221f      	movs	r2, #31
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43da      	mvns	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	400a      	ands	r2, r1
 8005570:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	4618      	mov	r0, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	3b23      	subs	r3, #35	@ 0x23
 800558c:	fa00 f203 	lsl.w	r2, r0, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	631a      	str	r2, [r3, #48]	@ 0x30
 8005598:	e023      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	3b41      	subs	r3, #65	@ 0x41
 80055ac:	221f      	movs	r2, #31
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43da      	mvns	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	400a      	ands	r2, r1
 80055ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	4618      	mov	r0, r3
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	3b41      	subs	r3, #65	@ 0x41
 80055d6:	fa00 f203 	lsl.w	r2, r0, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <HAL_ADC_ConfigChannel+0x234>)
 80055e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a21      	ldr	r2, [pc, #132]	@ (8005670 <HAL_ADC_ConfigChannel+0x238>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d109      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x1cc>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b12      	cmp	r3, #18
 80055f6:	d105      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <HAL_ADC_ConfigChannel+0x238>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d123      	bne.n	8005656 <HAL_ADC_ConfigChannel+0x21e>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b10      	cmp	r3, #16
 8005614:	d003      	beq.n	800561e <HAL_ADC_ConfigChannel+0x1e6>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b11      	cmp	r3, #17
 800561c:	d11b      	bne.n	8005656 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b10      	cmp	r3, #16
 8005630:	d111      	bne.n	8005656 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <HAL_ADC_ConfigChannel+0x23c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a10      	ldr	r2, [pc, #64]	@ (8005678 <HAL_ADC_ConfigChannel+0x240>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	0c9a      	lsrs	r2, r3, #18
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005648:	e002      	b.n	8005650 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	3b01      	subs	r3, #1
 800564e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f9      	bne.n	800564a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40012300 	.word	0x40012300
 8005670:	40012000 	.word	0x40012000
 8005674:	20000078 	.word	0x20000078
 8005678:	431bde83 	.word	0x431bde83

0800567c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005684:	4b79      	ldr	r3, [pc, #484]	@ (800586c <ADC_Init+0x1f0>)
 8005686:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	021a      	lsls	r2, r3, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80056d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6899      	ldr	r1, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570e:	4a58      	ldr	r2, [pc, #352]	@ (8005870 <ADC_Init+0x1f4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d022      	beq.n	800575a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005722:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6899      	ldr	r1, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6899      	ldr	r1, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	e00f      	b.n	800577a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005778:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0202 	bic.w	r2, r2, #2
 8005788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6899      	ldr	r1, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	7e1b      	ldrb	r3, [r3, #24]
 8005794:	005a      	lsls	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01b      	beq.n	80057e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80057c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	3b01      	subs	r3, #1
 80057d4:	035a      	lsls	r2, r3, #13
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	e007      	b.n	80057f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80057fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	3b01      	subs	r3, #1
 800580c:	051a      	lsls	r2, r3, #20
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6899      	ldr	r1, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005832:	025a      	lsls	r2, r3, #9
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800584a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6899      	ldr	r1, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	029a      	lsls	r2, r3, #10
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40012300 	.word	0x40012300
 8005870:	0f000001 	.word	0x0f000001

08005874 <__NVIC_SetPriorityGrouping>:
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005884:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005890:	4013      	ands	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800589c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058a6:	4a04      	ldr	r2, [pc, #16]	@ (80058b8 <__NVIC_SetPriorityGrouping+0x44>)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	60d3      	str	r3, [r2, #12]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	e000ed00 	.word	0xe000ed00

080058bc <__NVIC_GetPriorityGrouping>:
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058c0:	4b04      	ldr	r3, [pc, #16]	@ (80058d4 <__NVIC_GetPriorityGrouping+0x18>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	f003 0307 	and.w	r3, r3, #7
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <__NVIC_EnableIRQ>:
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	db0b      	blt.n	8005902 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	f003 021f 	and.w	r2, r3, #31
 80058f0:	4907      	ldr	r1, [pc, #28]	@ (8005910 <__NVIC_EnableIRQ+0x38>)
 80058f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2001      	movs	r0, #1
 80058fa:	fa00 f202 	lsl.w	r2, r0, r2
 80058fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	e000e100 	.word	0xe000e100

08005914 <__NVIC_SetPriority>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	6039      	str	r1, [r7, #0]
 800591e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005924:	2b00      	cmp	r3, #0
 8005926:	db0a      	blt.n	800593e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	490c      	ldr	r1, [pc, #48]	@ (8005960 <__NVIC_SetPriority+0x4c>)
 800592e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005932:	0112      	lsls	r2, r2, #4
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	440b      	add	r3, r1
 8005938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800593c:	e00a      	b.n	8005954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4908      	ldr	r1, [pc, #32]	@ (8005964 <__NVIC_SetPriority+0x50>)
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	3b04      	subs	r3, #4
 800594c:	0112      	lsls	r2, r2, #4
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	440b      	add	r3, r1
 8005952:	761a      	strb	r2, [r3, #24]
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000e100 	.word	0xe000e100
 8005964:	e000ed00 	.word	0xe000ed00

08005968 <NVIC_EncodePriority>:
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	@ 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f1c3 0307 	rsb	r3, r3, #7
 8005982:	2b04      	cmp	r3, #4
 8005984:	bf28      	it	cs
 8005986:	2304      	movcs	r3, #4
 8005988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3304      	adds	r3, #4
 800598e:	2b06      	cmp	r3, #6
 8005990:	d902      	bls.n	8005998 <NVIC_EncodePriority+0x30>
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3b03      	subs	r3, #3
 8005996:	e000      	b.n	800599a <NVIC_EncodePriority+0x32>
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43da      	mvns	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	401a      	ands	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059b0:	f04f 31ff 	mov.w	r1, #4294967295
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	43d9      	mvns	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c0:	4313      	orrs	r3, r2
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3724      	adds	r7, #36	@ 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3b01      	subs	r3, #1
 80059dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059e0:	d301      	bcc.n	80059e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059e2:	2301      	movs	r3, #1
 80059e4:	e00f      	b.n	8005a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005a10 <SysTick_Config+0x40>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059ee:	210f      	movs	r1, #15
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	f7ff ff8e 	bl	8005914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059f8:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <SysTick_Config+0x40>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059fe:	4b04      	ldr	r3, [pc, #16]	@ (8005a10 <SysTick_Config+0x40>)
 8005a00:	2207      	movs	r2, #7
 8005a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000e010 	.word	0xe000e010

08005a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff29 	bl	8005874 <__NVIC_SetPriorityGrouping>
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b086      	sub	sp, #24
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	4603      	mov	r3, r0
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a3c:	f7ff ff3e 	bl	80058bc <__NVIC_GetPriorityGrouping>
 8005a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	6978      	ldr	r0, [r7, #20]
 8005a48:	f7ff ff8e 	bl	8005968 <NVIC_EncodePriority>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff5d 	bl	8005914 <__NVIC_SetPriority>
}
 8005a5a:	bf00      	nop
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	4603      	mov	r3, r0
 8005a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ff31 	bl	80058d8 <__NVIC_EnableIRQ>
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff ffa2 	bl	80059d0 <SysTick_Config>
 8005a8c:	4603      	mov	r3, r0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005aa4:	f7ff fab6 	bl	8005014 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e099      	b.n	8005be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ad4:	e00f      	b.n	8005af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ad6:	f7ff fa9d 	bl	8005014 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b05      	cmp	r3, #5
 8005ae2:	d908      	bls.n	8005af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2203      	movs	r2, #3
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e078      	b.n	8005be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e8      	bne.n	8005ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4b38      	ldr	r3, [pc, #224]	@ (8005bf0 <HAL_DMA_Init+0x158>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d107      	bne.n	8005b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0307 	bic.w	r3, r3, #7
 8005b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d117      	bne.n	8005bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00e      	beq.n	8005bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fb01 	bl	80061a4 <DMA_CheckFifoParam>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2240      	movs	r2, #64	@ 0x40
 8005bac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e016      	b.n	8005be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fab8 	bl	8006138 <DMA_CalcBaseAndBitshift>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd0:	223f      	movs	r2, #63	@ 0x3f
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	f010803f 	.word	0xf010803f

08005bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_DMA_Start_IT+0x26>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e040      	b.n	8005c9c <HAL_DMA_Start_IT+0xa8>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d12f      	bne.n	8005c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fa4a 	bl	80060dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4c:	223f      	movs	r2, #63	@ 0x3f
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0216 	orr.w	r2, r2, #22
 8005c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0208 	orr.w	r2, r2, #8
 8005c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e005      	b.n	8005c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
 8005c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005cb2:	f7ff f9af 	bl	8005014 <HAL_GetTick>
 8005cb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d008      	beq.n	8005cd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2280      	movs	r2, #128	@ 0x80
 8005cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e052      	b.n	8005d7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0216 	bic.w	r2, r2, #22
 8005ce4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cf4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <HAL_DMA_Abort+0x62>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0208 	bic.w	r2, r2, #8
 8005d14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d26:	e013      	b.n	8005d50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d28:	f7ff f974 	bl	8005014 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b05      	cmp	r3, #5
 8005d34:	d90c      	bls.n	8005d50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2203      	movs	r2, #3
 8005d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e015      	b.n	8005d7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e4      	bne.n	8005d28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d62:	223f      	movs	r2, #63	@ 0x3f
 8005d64:	409a      	lsls	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d004      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2280      	movs	r2, #128	@ 0x80
 8005d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e00c      	b.n	8005dbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2205      	movs	r2, #5
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dd4:	4b8e      	ldr	r3, [pc, #568]	@ (8006010 <HAL_DMA_IRQHandler+0x248>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a8e      	ldr	r2, [pc, #568]	@ (8006014 <HAL_DMA_IRQHandler+0x24c>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0a9b      	lsrs	r3, r3, #10
 8005de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df2:	2208      	movs	r2, #8
 8005df4:	409a      	lsls	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01a      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d013      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0204 	bic.w	r2, r2, #4
 8005e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e20:	2208      	movs	r2, #8
 8005e22:	409a      	lsls	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2c:	f043 0201 	orr.w	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e38:	2201      	movs	r2, #1
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d012      	beq.n	8005e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e56:	2201      	movs	r2, #1
 8005e58:	409a      	lsls	r2, r3
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e62:	f043 0202 	orr.w	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e6e:	2204      	movs	r2, #4
 8005e70:	409a      	lsls	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d012      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	409a      	lsls	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e98:	f043 0204 	orr.w	r2, r3, #4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d043      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d03c      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec2:	2210      	movs	r2, #16
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d108      	bne.n	8005ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d024      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
 8005ef6:	e01f      	b.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01b      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
 8005f08:	e016      	b.n	8005f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d107      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0208 	bic.w	r2, r2, #8
 8005f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 808f 	beq.w	8006068 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8087 	beq.w	8006068 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5e:	2220      	movs	r2, #32
 8005f60:	409a      	lsls	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d136      	bne.n	8005fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0216 	bic.w	r2, r2, #22
 8005f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <HAL_DMA_IRQHandler+0x1da>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0208 	bic.w	r2, r2, #8
 8005fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb6:	223f      	movs	r2, #63	@ 0x3f
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d07e      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
        }
        return;
 8005fde:	e079      	b.n	80060d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01d      	beq.n	800602a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10d      	bne.n	8006018 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	2b00      	cmp	r3, #0
 8006002:	d031      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
 800600c:	e02c      	b.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
 800600e:	bf00      	nop
 8006010:	20000078 	.word	0x20000078
 8006014:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d023      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
 8006028:	e01e      	b.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10f      	bne.n	8006058 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0210 	bic.w	r2, r2, #16
 8006046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606c:	2b00      	cmp	r3, #0
 800606e:	d032      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d022      	beq.n	80060c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2205      	movs	r2, #5
 8006080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	3301      	adds	r3, #1
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	429a      	cmp	r2, r3
 800609e:	d307      	bcc.n	80060b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f2      	bne.n	8006094 <HAL_DMA_IRQHandler+0x2cc>
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80060b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
 80060d2:	e000      	b.n	80060d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80060d4:	bf00      	nop
    }
  }
}
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b40      	cmp	r3, #64	@ 0x40
 8006108:	d108      	bne.n	800611c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800611a:	e007      	b.n	800612c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	60da      	str	r2, [r3, #12]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	3b10      	subs	r3, #16
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <DMA_CalcBaseAndBitshift+0x64>)
 800614a:	fba2 2303 	umull	r2, r3, r2, r3
 800614e:	091b      	lsrs	r3, r3, #4
 8006150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006152:	4a13      	ldr	r2, [pc, #76]	@ (80061a0 <DMA_CalcBaseAndBitshift+0x68>)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b03      	cmp	r3, #3
 8006164:	d909      	bls.n	800617a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800616e:	f023 0303 	bic.w	r3, r3, #3
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	659a      	str	r2, [r3, #88]	@ 0x58
 8006178:	e007      	b.n	800618a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006182:	f023 0303 	bic.w	r3, r3, #3
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	aaaaaaab 	.word	0xaaaaaaab
 80061a0:	0800e2d4 	.word	0x0800e2d4

080061a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d11f      	bne.n	80061fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d856      	bhi.n	8006272 <DMA_CheckFifoParam+0xce>
 80061c4:	a201      	add	r2, pc, #4	@ (adr r2, 80061cc <DMA_CheckFifoParam+0x28>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061ef 	.word	0x080061ef
 80061d4:	080061dd 	.word	0x080061dd
 80061d8:	08006273 	.word	0x08006273
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d046      	beq.n	8006276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ec:	e043      	b.n	8006276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061f6:	d140      	bne.n	800627a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061fc:	e03d      	b.n	800627a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006206:	d121      	bne.n	800624c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d837      	bhi.n	800627e <DMA_CheckFifoParam+0xda>
 800620e:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <DMA_CheckFifoParam+0x70>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006225 	.word	0x08006225
 8006218:	0800622b 	.word	0x0800622b
 800621c:	08006225 	.word	0x08006225
 8006220:	0800623d 	.word	0x0800623d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
      break;
 8006228:	e030      	b.n	800628c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d025      	beq.n	8006282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800623a:	e022      	b.n	8006282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006240:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006244:	d11f      	bne.n	8006286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800624a:	e01c      	b.n	8006286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d903      	bls.n	800625a <DMA_CheckFifoParam+0xb6>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d003      	beq.n	8006260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006258:	e018      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	73fb      	strb	r3, [r7, #15]
      break;
 800625e:	e015      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00e      	beq.n	800628a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
      break;
 8006270:	e00b      	b.n	800628a <DMA_CheckFifoParam+0xe6>
      break;
 8006272:	bf00      	nop
 8006274:	e00a      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 8006276:	bf00      	nop
 8006278:	e008      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 800627a:	bf00      	nop
 800627c:	e006      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 800627e:	bf00      	nop
 8006280:	e004      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 8006282:	bf00      	nop
 8006284:	e002      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;   
 8006286:	bf00      	nop
 8006288:	e000      	b.n	800628c <DMA_CheckFifoParam+0xe8>
      break;
 800628a:	bf00      	nop
    }
  } 
  
  return status; 
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop

0800629c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	@ 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062b2:	2300      	movs	r3, #0
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	e16b      	b.n	8006590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062b8:	2201      	movs	r2, #1
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4013      	ands	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	f040 815a 	bne.w	800658a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d005      	beq.n	80062ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d130      	bne.n	8006350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	2203      	movs	r2, #3
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4013      	ands	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4313      	orrs	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006324:	2201      	movs	r2, #1
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	4013      	ands	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	091b      	lsrs	r3, r3, #4
 800633a:	f003 0201 	and.w	r2, r3, #1
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4313      	orrs	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d017      	beq.n	800638c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	2203      	movs	r2, #3
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	43db      	mvns	r3, r3
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4013      	ands	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4313      	orrs	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d123      	bne.n	80063e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	08da      	lsrs	r2, r3, #3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3208      	adds	r2, #8
 80063a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	220f      	movs	r2, #15
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	08da      	lsrs	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3208      	adds	r2, #8
 80063da:	69b9      	ldr	r1, [r7, #24]
 80063dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	2203      	movs	r2, #3
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	43db      	mvns	r3, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4013      	ands	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f003 0203 	and.w	r2, r3, #3
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	4313      	orrs	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80b4 	beq.w	800658a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	4b60      	ldr	r3, [pc, #384]	@ (80065a8 <HAL_GPIO_Init+0x30c>)
 8006428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642a:	4a5f      	ldr	r2, [pc, #380]	@ (80065a8 <HAL_GPIO_Init+0x30c>)
 800642c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006430:	6453      	str	r3, [r2, #68]	@ 0x44
 8006432:	4b5d      	ldr	r3, [pc, #372]	@ (80065a8 <HAL_GPIO_Init+0x30c>)
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800643e:	4a5b      	ldr	r2, [pc, #364]	@ (80065ac <HAL_GPIO_Init+0x310>)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	3302      	adds	r3, #2
 8006446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800644a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	220f      	movs	r2, #15
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	4013      	ands	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a52      	ldr	r2, [pc, #328]	@ (80065b0 <HAL_GPIO_Init+0x314>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d02b      	beq.n	80064c2 <HAL_GPIO_Init+0x226>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a51      	ldr	r2, [pc, #324]	@ (80065b4 <HAL_GPIO_Init+0x318>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d025      	beq.n	80064be <HAL_GPIO_Init+0x222>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a50      	ldr	r2, [pc, #320]	@ (80065b8 <HAL_GPIO_Init+0x31c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01f      	beq.n	80064ba <HAL_GPIO_Init+0x21e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a4f      	ldr	r2, [pc, #316]	@ (80065bc <HAL_GPIO_Init+0x320>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d019      	beq.n	80064b6 <HAL_GPIO_Init+0x21a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a4e      	ldr	r2, [pc, #312]	@ (80065c0 <HAL_GPIO_Init+0x324>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_GPIO_Init+0x216>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a4d      	ldr	r2, [pc, #308]	@ (80065c4 <HAL_GPIO_Init+0x328>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00d      	beq.n	80064ae <HAL_GPIO_Init+0x212>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a4c      	ldr	r2, [pc, #304]	@ (80065c8 <HAL_GPIO_Init+0x32c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <HAL_GPIO_Init+0x20e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a4b      	ldr	r2, [pc, #300]	@ (80065cc <HAL_GPIO_Init+0x330>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <HAL_GPIO_Init+0x20a>
 80064a2:	2307      	movs	r3, #7
 80064a4:	e00e      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064a6:	2308      	movs	r3, #8
 80064a8:	e00c      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064aa:	2306      	movs	r3, #6
 80064ac:	e00a      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064ae:	2305      	movs	r3, #5
 80064b0:	e008      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064b2:	2304      	movs	r3, #4
 80064b4:	e006      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064b6:	2303      	movs	r3, #3
 80064b8:	e004      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e002      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <HAL_GPIO_Init+0x228>
 80064c2:	2300      	movs	r3, #0
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	f002 0203 	and.w	r2, r2, #3
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	4093      	lsls	r3, r2
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064d4:	4935      	ldr	r1, [pc, #212]	@ (80065ac <HAL_GPIO_Init+0x310>)
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	089b      	lsrs	r3, r3, #2
 80064da:	3302      	adds	r3, #2
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064e2:	4b3b      	ldr	r3, [pc, #236]	@ (80065d0 <HAL_GPIO_Init+0x334>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	43db      	mvns	r3, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4013      	ands	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006506:	4a32      	ldr	r2, [pc, #200]	@ (80065d0 <HAL_GPIO_Init+0x334>)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800650c:	4b30      	ldr	r3, [pc, #192]	@ (80065d0 <HAL_GPIO_Init+0x334>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	43db      	mvns	r3, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006530:	4a27      	ldr	r2, [pc, #156]	@ (80065d0 <HAL_GPIO_Init+0x334>)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006536:	4b26      	ldr	r3, [pc, #152]	@ (80065d0 <HAL_GPIO_Init+0x334>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	43db      	mvns	r3, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4013      	ands	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800655a:	4a1d      	ldr	r2, [pc, #116]	@ (80065d0 <HAL_GPIO_Init+0x334>)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006560:	4b1b      	ldr	r3, [pc, #108]	@ (80065d0 <HAL_GPIO_Init+0x334>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	43db      	mvns	r3, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4013      	ands	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006584:	4a12      	ldr	r2, [pc, #72]	@ (80065d0 <HAL_GPIO_Init+0x334>)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3301      	adds	r3, #1
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b0f      	cmp	r3, #15
 8006594:	f67f ae90 	bls.w	80062b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	3724      	adds	r7, #36	@ 0x24
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40013800 	.word	0x40013800
 80065b0:	40020000 	.word	0x40020000
 80065b4:	40020400 	.word	0x40020400
 80065b8:	40020800 	.word	0x40020800
 80065bc:	40020c00 	.word	0x40020c00
 80065c0:	40021000 	.word	0x40021000
 80065c4:	40021400 	.word	0x40021400
 80065c8:	40021800 	.word	0x40021800
 80065cc:	40021c00 	.word	0x40021c00
 80065d0:	40013c00 	.word	0x40013c00

080065d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	807b      	strh	r3, [r7, #2]
 80065e0:	4613      	mov	r3, r2
 80065e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065e4:	787b      	ldrb	r3, [r7, #1]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065ea:	887a      	ldrh	r2, [r7, #2]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065f0:	e003      	b.n	80065fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065f2:	887b      	ldrh	r3, [r7, #2]
 80065f4:	041a      	lsls	r2, r3, #16
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	619a      	str	r2, [r3, #24]
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
	...

08006608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e12b      	b.n	8006872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fd fcf8 	bl	8004024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2224      	movs	r2, #36	@ 0x24
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800665a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800666a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800666c:	f000 fd80 	bl	8007170 <HAL_RCC_GetPCLK1Freq>
 8006670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	4a81      	ldr	r2, [pc, #516]	@ (800687c <HAL_I2C_Init+0x274>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d807      	bhi.n	800668c <HAL_I2C_Init+0x84>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a80      	ldr	r2, [pc, #512]	@ (8006880 <HAL_I2C_Init+0x278>)
 8006680:	4293      	cmp	r3, r2
 8006682:	bf94      	ite	ls
 8006684:	2301      	movls	r3, #1
 8006686:	2300      	movhi	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	e006      	b.n	800669a <HAL_I2C_Init+0x92>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a7d      	ldr	r2, [pc, #500]	@ (8006884 <HAL_I2C_Init+0x27c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	bf94      	ite	ls
 8006694:	2301      	movls	r3, #1
 8006696:	2300      	movhi	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e0e7      	b.n	8006872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4a78      	ldr	r2, [pc, #480]	@ (8006888 <HAL_I2C_Init+0x280>)
 80066a6:	fba2 2303 	umull	r2, r3, r2, r3
 80066aa:	0c9b      	lsrs	r3, r3, #18
 80066ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4a6a      	ldr	r2, [pc, #424]	@ (800687c <HAL_I2C_Init+0x274>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d802      	bhi.n	80066dc <HAL_I2C_Init+0xd4>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	3301      	adds	r3, #1
 80066da:	e009      	b.n	80066f0 <HAL_I2C_Init+0xe8>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	4a69      	ldr	r2, [pc, #420]	@ (800688c <HAL_I2C_Init+0x284>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	099b      	lsrs	r3, r3, #6
 80066ee:	3301      	adds	r3, #1
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006702:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	495c      	ldr	r1, [pc, #368]	@ (800687c <HAL_I2C_Init+0x274>)
 800670c:	428b      	cmp	r3, r1
 800670e:	d819      	bhi.n	8006744 <HAL_I2C_Init+0x13c>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1e59      	subs	r1, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	fbb1 f3f3 	udiv	r3, r1, r3
 800671e:	1c59      	adds	r1, r3, #1
 8006720:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006724:	400b      	ands	r3, r1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <HAL_I2C_Init+0x138>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1e59      	subs	r1, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	fbb1 f3f3 	udiv	r3, r1, r3
 8006738:	3301      	adds	r3, #1
 800673a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800673e:	e051      	b.n	80067e4 <HAL_I2C_Init+0x1dc>
 8006740:	2304      	movs	r3, #4
 8006742:	e04f      	b.n	80067e4 <HAL_I2C_Init+0x1dc>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d111      	bne.n	8006770 <HAL_I2C_Init+0x168>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	1e58      	subs	r0, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6859      	ldr	r1, [r3, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	440b      	add	r3, r1
 800675a:	fbb0 f3f3 	udiv	r3, r0, r3
 800675e:	3301      	adds	r3, #1
 8006760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006764:	2b00      	cmp	r3, #0
 8006766:	bf0c      	ite	eq
 8006768:	2301      	moveq	r3, #1
 800676a:	2300      	movne	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	e012      	b.n	8006796 <HAL_I2C_Init+0x18e>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1e58      	subs	r0, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6859      	ldr	r1, [r3, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	0099      	lsls	r1, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	fbb0 f3f3 	udiv	r3, r0, r3
 8006786:	3301      	adds	r3, #1
 8006788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678c:	2b00      	cmp	r3, #0
 800678e:	bf0c      	ite	eq
 8006790:	2301      	moveq	r3, #1
 8006792:	2300      	movne	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_I2C_Init+0x196>
 800679a:	2301      	movs	r3, #1
 800679c:	e022      	b.n	80067e4 <HAL_I2C_Init+0x1dc>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10e      	bne.n	80067c4 <HAL_I2C_Init+0x1bc>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1e58      	subs	r0, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6859      	ldr	r1, [r3, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	440b      	add	r3, r1
 80067b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80067b8:	3301      	adds	r3, #1
 80067ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c2:	e00f      	b.n	80067e4 <HAL_I2C_Init+0x1dc>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	1e58      	subs	r0, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6859      	ldr	r1, [r3, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	0099      	lsls	r1, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067da:	3301      	adds	r3, #1
 80067dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	6809      	ldr	r1, [r1, #0]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	431a      	orrs	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006812:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6911      	ldr	r1, [r2, #16]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68d2      	ldr	r2, [r2, #12]
 800681e:	4311      	orrs	r1, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	430b      	orrs	r3, r1
 8006826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	695a      	ldr	r2, [r3, #20]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	000186a0 	.word	0x000186a0
 8006880:	001e847f 	.word	0x001e847f
 8006884:	003d08ff 	.word	0x003d08ff
 8006888:	431bde83 	.word	0x431bde83
 800688c:	10624dd3 	.word	0x10624dd3

08006890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e267      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d075      	beq.n	800699a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80068ae:	4b88      	ldr	r3, [pc, #544]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d00c      	beq.n	80068d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ba:	4b85      	ldr	r3, [pc, #532]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d112      	bne.n	80068ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c6:	4b82      	ldr	r3, [pc, #520]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068d2:	d10b      	bne.n	80068ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05b      	beq.n	8006998 <HAL_RCC_OscConfig+0x108>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d157      	bne.n	8006998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e242      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f4:	d106      	bne.n	8006904 <HAL_RCC_OscConfig+0x74>
 80068f6:	4b76      	ldr	r3, [pc, #472]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a75      	ldr	r2, [pc, #468]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e01d      	b.n	8006940 <HAL_RCC_OscConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800690c:	d10c      	bne.n	8006928 <HAL_RCC_OscConfig+0x98>
 800690e:	4b70      	ldr	r3, [pc, #448]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a6f      	ldr	r2, [pc, #444]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006914:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e00b      	b.n	8006940 <HAL_RCC_OscConfig+0xb0>
 8006928:	4b69      	ldr	r3, [pc, #420]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a68      	ldr	r2, [pc, #416]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 800692e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	4b66      	ldr	r3, [pc, #408]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a65      	ldr	r2, [pc, #404]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 800693a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800693e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d013      	beq.n	8006970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fe fb64 	bl	8005014 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006950:	f7fe fb60 	bl	8005014 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	@ 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e207      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006962:	4b5b      	ldr	r3, [pc, #364]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCC_OscConfig+0xc0>
 800696e:	e014      	b.n	800699a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006970:	f7fe fb50 	bl	8005014 <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006978:	f7fe fb4c 	bl	8005014 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b64      	cmp	r3, #100	@ 0x64
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e1f3      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698a:	4b51      	ldr	r3, [pc, #324]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f0      	bne.n	8006978 <HAL_RCC_OscConfig+0xe8>
 8006996:	e000      	b.n	800699a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d063      	beq.n	8006a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80069a6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069b2:	4b47      	ldr	r3, [pc, #284]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d11c      	bne.n	80069f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069be:	4b44      	ldr	r3, [pc, #272]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d116      	bne.n	80069f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ca:	4b41      	ldr	r3, [pc, #260]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <HAL_RCC_OscConfig+0x152>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d001      	beq.n	80069e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e1c7      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4937      	ldr	r1, [pc, #220]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f6:	e03a      	b.n	8006a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d020      	beq.n	8006a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a00:	4b34      	ldr	r3, [pc, #208]	@ (8006ad4 <HAL_RCC_OscConfig+0x244>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a06:	f7fe fb05 	bl	8005014 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a0e:	f7fe fb01 	bl	8005014 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e1a8      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a20:	4b2b      	ldr	r3, [pc, #172]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0f0      	beq.n	8006a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2c:	4b28      	ldr	r3, [pc, #160]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	4925      	ldr	r1, [pc, #148]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]
 8006a40:	e015      	b.n	8006a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a42:	4b24      	ldr	r3, [pc, #144]	@ (8006ad4 <HAL_RCC_OscConfig+0x244>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fe fae4 	bl	8005014 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a50:	f7fe fae0 	bl	8005014 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e187      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a62:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f0      	bne.n	8006a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d036      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d016      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a82:	4b15      	ldr	r3, [pc, #84]	@ (8006ad8 <HAL_RCC_OscConfig+0x248>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a88:	f7fe fac4 	bl	8005014 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a90:	f7fe fac0 	bl	8005014 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e167      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <HAL_RCC_OscConfig+0x240>)
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0f0      	beq.n	8006a90 <HAL_RCC_OscConfig+0x200>
 8006aae:	e01b      	b.n	8006ae8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab0:	4b09      	ldr	r3, [pc, #36]	@ (8006ad8 <HAL_RCC_OscConfig+0x248>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab6:	f7fe faad 	bl	8005014 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006abc:	e00e      	b.n	8006adc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006abe:	f7fe faa9 	bl	8005014 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d907      	bls.n	8006adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e150      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	42470000 	.word	0x42470000
 8006ad8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006adc:	4b88      	ldr	r3, [pc, #544]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1ea      	bne.n	8006abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8097 	beq.w	8006c24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006afa:	4b81      	ldr	r3, [pc, #516]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10f      	bne.n	8006b26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b06:	2300      	movs	r3, #0
 8006b08:	60bb      	str	r3, [r7, #8]
 8006b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0e:	4a7c      	ldr	r2, [pc, #496]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b16:	4b7a      	ldr	r3, [pc, #488]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b1e:	60bb      	str	r3, [r7, #8]
 8006b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b22:	2301      	movs	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b26:	4b77      	ldr	r3, [pc, #476]	@ (8006d04 <HAL_RCC_OscConfig+0x474>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d118      	bne.n	8006b64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b32:	4b74      	ldr	r3, [pc, #464]	@ (8006d04 <HAL_RCC_OscConfig+0x474>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a73      	ldr	r2, [pc, #460]	@ (8006d04 <HAL_RCC_OscConfig+0x474>)
 8006b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3e:	f7fe fa69 	bl	8005014 <HAL_GetTick>
 8006b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b44:	e008      	b.n	8006b58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b46:	f7fe fa65 	bl	8005014 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e10c      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b58:	4b6a      	ldr	r3, [pc, #424]	@ (8006d04 <HAL_RCC_OscConfig+0x474>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f0      	beq.n	8006b46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d106      	bne.n	8006b7a <HAL_RCC_OscConfig+0x2ea>
 8006b6c:	4b64      	ldr	r3, [pc, #400]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b70:	4a63      	ldr	r2, [pc, #396]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b72:	f043 0301 	orr.w	r3, r3, #1
 8006b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b78:	e01c      	b.n	8006bb4 <HAL_RCC_OscConfig+0x324>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2b05      	cmp	r3, #5
 8006b80:	d10c      	bne.n	8006b9c <HAL_RCC_OscConfig+0x30c>
 8006b82:	4b5f      	ldr	r3, [pc, #380]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b86:	4a5e      	ldr	r2, [pc, #376]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b88:	f043 0304 	orr.w	r3, r3, #4
 8006b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b92:	4a5b      	ldr	r2, [pc, #364]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b9a:	e00b      	b.n	8006bb4 <HAL_RCC_OscConfig+0x324>
 8006b9c:	4b58      	ldr	r3, [pc, #352]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba0:	4a57      	ldr	r2, [pc, #348]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	f023 0301 	bic.w	r3, r3, #1
 8006ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ba8:	4b55      	ldr	r3, [pc, #340]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bac:	4a54      	ldr	r2, [pc, #336]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006bae:	f023 0304 	bic.w	r3, r3, #4
 8006bb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d015      	beq.n	8006be8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbc:	f7fe fa2a 	bl	8005014 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc2:	e00a      	b.n	8006bda <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc4:	f7fe fa26 	bl	8005014 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e0cb      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bda:	4b49      	ldr	r3, [pc, #292]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0ee      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x334>
 8006be6:	e014      	b.n	8006c12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be8:	f7fe fa14 	bl	8005014 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bee:	e00a      	b.n	8006c06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf0:	f7fe fa10 	bl	8005014 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e0b5      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c06:	4b3e      	ldr	r3, [pc, #248]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1ee      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d105      	bne.n	8006c24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c18:	4b39      	ldr	r3, [pc, #228]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1c:	4a38      	ldr	r2, [pc, #224]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80a1 	beq.w	8006d70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c2e:	4b34      	ldr	r3, [pc, #208]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 030c 	and.w	r3, r3, #12
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d05c      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d141      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c42:	4b31      	ldr	r3, [pc, #196]	@ (8006d08 <HAL_RCC_OscConfig+0x478>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c48:	f7fe f9e4 	bl	8005014 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c50:	f7fe f9e0 	bl	8005014 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e087      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c62:	4b27      	ldr	r3, [pc, #156]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f0      	bne.n	8006c50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7c:	019b      	lsls	r3, r3, #6
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	085b      	lsrs	r3, r3, #1
 8006c86:	3b01      	subs	r3, #1
 8006c88:	041b      	lsls	r3, r3, #16
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c90:	061b      	lsls	r3, r3, #24
 8006c92:	491b      	ldr	r1, [pc, #108]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c98:	4b1b      	ldr	r3, [pc, #108]	@ (8006d08 <HAL_RCC_OscConfig+0x478>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9e:	f7fe f9b9 	bl	8005014 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca6:	f7fe f9b5 	bl	8005014 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e05c      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb8:	4b11      	ldr	r3, [pc, #68]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x416>
 8006cc4:	e054      	b.n	8006d70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc6:	4b10      	ldr	r3, [pc, #64]	@ (8006d08 <HAL_RCC_OscConfig+0x478>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ccc:	f7fe f9a2 	bl	8005014 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd4:	f7fe f99e 	bl	8005014 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e045      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce6:	4b06      	ldr	r3, [pc, #24]	@ (8006d00 <HAL_RCC_OscConfig+0x470>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x444>
 8006cf2:	e03d      	b.n	8006d70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e038      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
 8006d00:	40023800 	.word	0x40023800
 8006d04:	40007000 	.word	0x40007000
 8006d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006d7c <HAL_RCC_OscConfig+0x4ec>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d028      	beq.n	8006d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d121      	bne.n	8006d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d11a      	bne.n	8006d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d111      	bne.n	8006d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	3b01      	subs	r3, #1
 8006d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d001      	beq.n	8006d70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40023800 	.word	0x40023800

08006d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0cc      	b.n	8006f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d94:	4b68      	ldr	r3, [pc, #416]	@ (8006f38 <HAL_RCC_ClockConfig+0x1b8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d90c      	bls.n	8006dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da2:	4b65      	ldr	r3, [pc, #404]	@ (8006f38 <HAL_RCC_ClockConfig+0x1b8>)
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	4b63      	ldr	r3, [pc, #396]	@ (8006f38 <HAL_RCC_ClockConfig+0x1b8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0b8      	b.n	8006f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d020      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dd4:	4b59      	ldr	r3, [pc, #356]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	4a58      	ldr	r2, [pc, #352]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006dde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dec:	4b53      	ldr	r3, [pc, #332]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	4a52      	ldr	r2, [pc, #328]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df8:	4b50      	ldr	r3, [pc, #320]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	494d      	ldr	r1, [pc, #308]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d044      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1e:	4b47      	ldr	r3, [pc, #284]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d119      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e07f      	b.n	8006f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d003      	beq.n	8006e3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e06f      	b.n	8006f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e067      	b.n	8006f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e5e:	4b37      	ldr	r3, [pc, #220]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f023 0203 	bic.w	r2, r3, #3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4934      	ldr	r1, [pc, #208]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e70:	f7fe f8d0 	bl	8005014 <HAL_GetTick>
 8006e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e76:	e00a      	b.n	8006e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e78:	f7fe f8cc 	bl	8005014 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e04f      	b.n	8006f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 020c 	and.w	r2, r3, #12
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d1eb      	bne.n	8006e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ea0:	4b25      	ldr	r3, [pc, #148]	@ (8006f38 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d20c      	bcs.n	8006ec8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eae:	4b22      	ldr	r3, [pc, #136]	@ (8006f38 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb6:	4b20      	ldr	r3, [pc, #128]	@ (8006f38 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d001      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e032      	b.n	8006f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed4:	4b19      	ldr	r3, [pc, #100]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4916      	ldr	r1, [pc, #88]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ef2:	4b12      	ldr	r3, [pc, #72]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	490e      	ldr	r1, [pc, #56]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f06:	f000 f821 	bl	8006f4c <HAL_RCC_GetSysClockFreq>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f3c <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	091b      	lsrs	r3, r3, #4
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	490a      	ldr	r1, [pc, #40]	@ (8006f40 <HAL_RCC_ClockConfig+0x1c0>)
 8006f18:	5ccb      	ldrb	r3, [r1, r3]
 8006f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1e:	4a09      	ldr	r2, [pc, #36]	@ (8006f44 <HAL_RCC_ClockConfig+0x1c4>)
 8006f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006f22:	4b09      	ldr	r3, [pc, #36]	@ (8006f48 <HAL_RCC_ClockConfig+0x1c8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe f830 	bl	8004f8c <HAL_InitTick>

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	40023c00 	.word	0x40023c00
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	0800e2bc 	.word	0x0800e2bc
 8006f44:	20000078 	.word	0x20000078
 8006f48:	2000007c 	.word	0x2000007c

08006f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f50:	b094      	sub	sp, #80	@ 0x50
 8006f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f64:	4b79      	ldr	r3, [pc, #484]	@ (800714c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 030c 	and.w	r3, r3, #12
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d00d      	beq.n	8006f8c <HAL_RCC_GetSysClockFreq+0x40>
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	f200 80e1 	bhi.w	8007138 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <HAL_RCC_GetSysClockFreq+0x34>
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d003      	beq.n	8006f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f7e:	e0db      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f80:	4b73      	ldr	r3, [pc, #460]	@ (8007150 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f84:	e0db      	b.n	800713e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f86:	4b73      	ldr	r3, [pc, #460]	@ (8007154 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f8a:	e0d8      	b.n	800713e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f8c:	4b6f      	ldr	r3, [pc, #444]	@ (800714c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f96:	4b6d      	ldr	r3, [pc, #436]	@ (800714c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d063      	beq.n	800706a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800714c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	2200      	movs	r2, #0
 8006faa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f04f 0100 	mov.w	r1, #0
 8006fca:	0159      	lsls	r1, r3, #5
 8006fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fd0:	0150      	lsls	r0, r2, #5
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	1a51      	subs	r1, r2, r1
 8006fda:	6139      	str	r1, [r7, #16]
 8006fdc:	4629      	mov	r1, r5
 8006fde:	eb63 0301 	sbc.w	r3, r3, r1
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ff0:	4659      	mov	r1, fp
 8006ff2:	018b      	lsls	r3, r1, #6
 8006ff4:	4651      	mov	r1, sl
 8006ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	018a      	lsls	r2, r1, #6
 8006ffe:	4651      	mov	r1, sl
 8007000:	ebb2 0801 	subs.w	r8, r2, r1
 8007004:	4659      	mov	r1, fp
 8007006:	eb63 0901 	sbc.w	r9, r3, r1
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800701a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800701e:	4690      	mov	r8, r2
 8007020:	4699      	mov	r9, r3
 8007022:	4623      	mov	r3, r4
 8007024:	eb18 0303 	adds.w	r3, r8, r3
 8007028:	60bb      	str	r3, [r7, #8]
 800702a:	462b      	mov	r3, r5
 800702c:	eb49 0303 	adc.w	r3, r9, r3
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800703e:	4629      	mov	r1, r5
 8007040:	024b      	lsls	r3, r1, #9
 8007042:	4621      	mov	r1, r4
 8007044:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007048:	4621      	mov	r1, r4
 800704a:	024a      	lsls	r2, r1, #9
 800704c:	4610      	mov	r0, r2
 800704e:	4619      	mov	r1, r3
 8007050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007052:	2200      	movs	r2, #0
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800705c:	f7f9 fe14 	bl	8000c88 <__aeabi_uldivmod>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4613      	mov	r3, r2
 8007066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007068:	e058      	b.n	800711c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706a:	4b38      	ldr	r3, [pc, #224]	@ (800714c <HAL_RCC_GetSysClockFreq+0x200>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	099b      	lsrs	r3, r3, #6
 8007070:	2200      	movs	r2, #0
 8007072:	4618      	mov	r0, r3
 8007074:	4611      	mov	r1, r2
 8007076:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800707a:	623b      	str	r3, [r7, #32]
 800707c:	2300      	movs	r3, #0
 800707e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007080:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	f04f 0000 	mov.w	r0, #0
 800708c:	f04f 0100 	mov.w	r1, #0
 8007090:	0159      	lsls	r1, r3, #5
 8007092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007096:	0150      	lsls	r0, r2, #5
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4641      	mov	r1, r8
 800709e:	ebb2 0a01 	subs.w	sl, r2, r1
 80070a2:	4649      	mov	r1, r9
 80070a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070bc:	ebb2 040a 	subs.w	r4, r2, sl
 80070c0:	eb63 050b 	sbc.w	r5, r3, fp
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	00eb      	lsls	r3, r5, #3
 80070ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070d2:	00e2      	lsls	r2, r4, #3
 80070d4:	4614      	mov	r4, r2
 80070d6:	461d      	mov	r5, r3
 80070d8:	4643      	mov	r3, r8
 80070da:	18e3      	adds	r3, r4, r3
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	464b      	mov	r3, r9
 80070e0:	eb45 0303 	adc.w	r3, r5, r3
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070f2:	4629      	mov	r1, r5
 80070f4:	028b      	lsls	r3, r1, #10
 80070f6:	4621      	mov	r1, r4
 80070f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070fc:	4621      	mov	r1, r4
 80070fe:	028a      	lsls	r2, r1, #10
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007106:	2200      	movs	r2, #0
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	61fa      	str	r2, [r7, #28]
 800710c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007110:	f7f9 fdba 	bl	8000c88 <__aeabi_uldivmod>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4613      	mov	r3, r2
 800711a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <HAL_RCC_GetSysClockFreq+0x200>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	0c1b      	lsrs	r3, r3, #16
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	3301      	adds	r3, #1
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800712c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800712e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007130:	fbb2 f3f3 	udiv	r3, r2, r3
 8007134:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007136:	e002      	b.n	800713e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007138:	4b05      	ldr	r3, [pc, #20]	@ (8007150 <HAL_RCC_GetSysClockFreq+0x204>)
 800713a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800713c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800713e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007140:	4618      	mov	r0, r3
 8007142:	3750      	adds	r7, #80	@ 0x50
 8007144:	46bd      	mov	sp, r7
 8007146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800714a:	bf00      	nop
 800714c:	40023800 	.word	0x40023800
 8007150:	00f42400 	.word	0x00f42400
 8007154:	007a1200 	.word	0x007a1200

08007158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800715c:	4b03      	ldr	r3, [pc, #12]	@ (800716c <HAL_RCC_GetHCLKFreq+0x14>)
 800715e:	681b      	ldr	r3, [r3, #0]
}
 8007160:	4618      	mov	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000078 	.word	0x20000078

08007170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007174:	f7ff fff0 	bl	8007158 <HAL_RCC_GetHCLKFreq>
 8007178:	4602      	mov	r2, r0
 800717a:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	0a9b      	lsrs	r3, r3, #10
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	4903      	ldr	r1, [pc, #12]	@ (8007194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007186:	5ccb      	ldrb	r3, [r1, r3]
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800718c:	4618      	mov	r0, r3
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40023800 	.word	0x40023800
 8007194:	0800e2cc 	.word	0x0800e2cc

08007198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800719c:	f7ff ffdc 	bl	8007158 <HAL_RCC_GetHCLKFreq>
 80071a0:	4602      	mov	r2, r0
 80071a2:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	0b5b      	lsrs	r3, r3, #13
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	4903      	ldr	r1, [pc, #12]	@ (80071bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ae:	5ccb      	ldrb	r3, [r1, r3]
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40023800 	.word	0x40023800
 80071bc:	0800e2cc 	.word	0x0800e2cc

080071c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e041      	b.n	8007256 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fd f8dc 	bl	80043a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f000 fc24 	bl	8007a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <HAL_TIM_PWM_Start+0x24>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b01      	cmp	r3, #1
 800727a:	bf14      	ite	ne
 800727c:	2301      	movne	r3, #1
 800727e:	2300      	moveq	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	e022      	b.n	80072ca <HAL_TIM_PWM_Start+0x6a>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b04      	cmp	r3, #4
 8007288:	d109      	bne.n	800729e <HAL_TIM_PWM_Start+0x3e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b01      	cmp	r3, #1
 8007294:	bf14      	ite	ne
 8007296:	2301      	movne	r3, #1
 8007298:	2300      	moveq	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	e015      	b.n	80072ca <HAL_TIM_PWM_Start+0x6a>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d109      	bne.n	80072b8 <HAL_TIM_PWM_Start+0x58>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	e008      	b.n	80072ca <HAL_TIM_PWM_Start+0x6a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e07c      	b.n	80073cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_PWM_Start+0x82>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072e0:	e013      	b.n	800730a <HAL_TIM_PWM_Start+0xaa>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_PWM_Start+0x92>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072f0:	e00b      	b.n	800730a <HAL_TIM_PWM_Start+0xaa>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_PWM_Start+0xa2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007300:	e003      	b.n	800730a <HAL_TIM_PWM_Start+0xaa>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2202      	movs	r2, #2
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2201      	movs	r2, #1
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fdf6 	bl	8007f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a2d      	ldr	r2, [pc, #180]	@ (80073d4 <HAL_TIM_PWM_Start+0x174>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <HAL_TIM_PWM_Start+0xcc>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2c      	ldr	r2, [pc, #176]	@ (80073d8 <HAL_TIM_PWM_Start+0x178>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d101      	bne.n	8007330 <HAL_TIM_PWM_Start+0xd0>
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <HAL_TIM_PWM_Start+0xd2>
 8007330:	2300      	movs	r3, #0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007344:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a22      	ldr	r2, [pc, #136]	@ (80073d4 <HAL_TIM_PWM_Start+0x174>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d022      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007358:	d01d      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1f      	ldr	r2, [pc, #124]	@ (80073dc <HAL_TIM_PWM_Start+0x17c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d018      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1d      	ldr	r2, [pc, #116]	@ (80073e0 <HAL_TIM_PWM_Start+0x180>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1c      	ldr	r2, [pc, #112]	@ (80073e4 <HAL_TIM_PWM_Start+0x184>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00e      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a16      	ldr	r2, [pc, #88]	@ (80073d8 <HAL_TIM_PWM_Start+0x178>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a18      	ldr	r2, [pc, #96]	@ (80073e8 <HAL_TIM_PWM_Start+0x188>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a16      	ldr	r2, [pc, #88]	@ (80073ec <HAL_TIM_PWM_Start+0x18c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d111      	bne.n	80073ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b06      	cmp	r3, #6
 80073a6:	d010      	beq.n	80073ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	e007      	b.n	80073ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40010400 	.word	0x40010400
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40001800 	.word	0x40001800

080073f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e097      	b.n	8007534 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fc fe4b 	bl	80040b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2202      	movs	r2, #2
 8007422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007434:	f023 0307 	bic.w	r3, r3, #7
 8007438:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3304      	adds	r3, #4
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f000 fb01 	bl	8007a4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007472:	f023 0303 	bic.w	r3, r3, #3
 8007476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	4313      	orrs	r3, r2
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007490:	f023 030c 	bic.w	r3, r3, #12
 8007494:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800749c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	4313      	orrs	r3, r2
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	011a      	lsls	r2, r3, #4
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	031b      	lsls	r3, r3, #12
 80074c0:	4313      	orrs	r3, r2
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80074ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	4313      	orrs	r3, r2
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800754c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007554:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800755c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007564:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d110      	bne.n	800758e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d102      	bne.n	8007578 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007572:	7b7b      	ldrb	r3, [r7, #13]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d001      	beq.n	800757c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e089      	b.n	8007690 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800758c:	e031      	b.n	80075f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b04      	cmp	r3, #4
 8007592:	d110      	bne.n	80075b6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d102      	bne.n	80075a0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800759a:	7b3b      	ldrb	r3, [r7, #12]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d001      	beq.n	80075a4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e075      	b.n	8007690 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075b4:	e01d      	b.n	80075f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d108      	bne.n	80075ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d105      	bne.n	80075ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075c2:	7b7b      	ldrb	r3, [r7, #13]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d102      	bne.n	80075ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075c8:	7b3b      	ldrb	r3, [r7, #12]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d001      	beq.n	80075d2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e05e      	b.n	8007690 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2202      	movs	r2, #2
 80075de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2202      	movs	r2, #2
 80075e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_TIM_Encoder_Start_IT+0xc4>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d010      	beq.n	8007620 <HAL_TIM_Encoder_Start_IT+0xe4>
 80075fe:	e01f      	b.n	8007640 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2201      	movs	r2, #1
 8007606:	2100      	movs	r1, #0
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fc7b 	bl	8007f04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0202 	orr.w	r2, r2, #2
 800761c:	60da      	str	r2, [r3, #12]
      break;
 800761e:	e02e      	b.n	800767e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2201      	movs	r2, #1
 8007626:	2104      	movs	r1, #4
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fc6b 	bl	8007f04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0204 	orr.w	r2, r2, #4
 800763c:	60da      	str	r2, [r3, #12]
      break;
 800763e:	e01e      	b.n	800767e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2201      	movs	r2, #1
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fc5b 	bl	8007f04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2201      	movs	r2, #1
 8007654:	2104      	movs	r1, #4
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fc54 	bl	8007f04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0202 	orr.w	r2, r2, #2
 800766a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0204 	orr.w	r2, r2, #4
 800767a:	60da      	str	r2, [r3, #12]
      break;
 800767c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0201 	orr.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d020      	beq.n	80076fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01b      	beq.n	80076fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0202 	mvn.w	r2, #2
 80076cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7fb fb0b 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f990 	bl	8007a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f997 	bl	8007a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d020      	beq.n	8007748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01b      	beq.n	8007748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0204 	mvn.w	r2, #4
 8007718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fb fae5 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 8007734:	e005      	b.n	8007742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f96a 	bl	8007a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f971 	bl	8007a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d020      	beq.n	8007794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01b      	beq.n	8007794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0208 	mvn.w	r2, #8
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fb fabf 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 8007780:	e005      	b.n	800778e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f944 	bl	8007a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f94b 	bl	8007a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b00      	cmp	r3, #0
 800779c:	d020      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01b      	beq.n	80077e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0210 	mvn.w	r2, #16
 80077b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2208      	movs	r2, #8
 80077b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fb fa99 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 80077cc:	e005      	b.n	80077da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f91e 	bl	8007a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f925 	bl	8007a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00c      	beq.n	8007804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d007      	beq.n	8007804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0201 	mvn.w	r2, #1
 80077fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f8fc 	bl	80079fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00c      	beq.n	8007828 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fc1a 	bl	800805c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00c      	beq.n	800784c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8f6 	bl	8007a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00c      	beq.n	8007870 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0220 	mvn.w	r2, #32
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fbec 	bl	8008048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007892:	2302      	movs	r3, #2
 8007894:	e0ae      	b.n	80079f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b0c      	cmp	r3, #12
 80078a2:	f200 809f 	bhi.w	80079e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078a6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078e1 	.word	0x080078e1
 80078b0:	080079e5 	.word	0x080079e5
 80078b4:	080079e5 	.word	0x080079e5
 80078b8:	080079e5 	.word	0x080079e5
 80078bc:	08007921 	.word	0x08007921
 80078c0:	080079e5 	.word	0x080079e5
 80078c4:	080079e5 	.word	0x080079e5
 80078c8:	080079e5 	.word	0x080079e5
 80078cc:	08007963 	.word	0x08007963
 80078d0:	080079e5 	.word	0x080079e5
 80078d4:	080079e5 	.word	0x080079e5
 80078d8:	080079e5 	.word	0x080079e5
 80078dc:	080079a3 	.word	0x080079a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f95c 	bl	8007ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699a      	ldr	r2, [r3, #24]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0208 	orr.w	r2, r2, #8
 80078fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0204 	bic.w	r2, r2, #4
 800790a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6999      	ldr	r1, [r3, #24]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	619a      	str	r2, [r3, #24]
      break;
 800791e:	e064      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f9ac 	bl	8007c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699a      	ldr	r2, [r3, #24]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800793a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800794a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6999      	ldr	r1, [r3, #24]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	021a      	lsls	r2, r3, #8
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	619a      	str	r2, [r3, #24]
      break;
 8007960:	e043      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fa01 	bl	8007d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0208 	orr.w	r2, r2, #8
 800797c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69da      	ldr	r2, [r3, #28]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 0204 	bic.w	r2, r2, #4
 800798c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69d9      	ldr	r1, [r3, #28]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	691a      	ldr	r2, [r3, #16]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	61da      	str	r2, [r3, #28]
      break;
 80079a0:	e023      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fa55 	bl	8007e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69d9      	ldr	r1, [r3, #28]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	021a      	lsls	r2, r3, #8
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	61da      	str	r2, [r3, #28]
      break;
 80079e2:	e002      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a46      	ldr	r2, [pc, #280]	@ (8007b78 <TIM_Base_SetConfig+0x12c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a6a:	d00f      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a43      	ldr	r2, [pc, #268]	@ (8007b7c <TIM_Base_SetConfig+0x130>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a42      	ldr	r2, [pc, #264]	@ (8007b80 <TIM_Base_SetConfig+0x134>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a41      	ldr	r2, [pc, #260]	@ (8007b84 <TIM_Base_SetConfig+0x138>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a40      	ldr	r2, [pc, #256]	@ (8007b88 <TIM_Base_SetConfig+0x13c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d108      	bne.n	8007a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a35      	ldr	r2, [pc, #212]	@ (8007b78 <TIM_Base_SetConfig+0x12c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d02b      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aac:	d027      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a32      	ldr	r2, [pc, #200]	@ (8007b7c <TIM_Base_SetConfig+0x130>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d023      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a31      	ldr	r2, [pc, #196]	@ (8007b80 <TIM_Base_SetConfig+0x134>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d01f      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a30      	ldr	r2, [pc, #192]	@ (8007b84 <TIM_Base_SetConfig+0x138>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01b      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8007b88 <TIM_Base_SetConfig+0x13c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d017      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8007b8c <TIM_Base_SetConfig+0x140>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8007b90 <TIM_Base_SetConfig+0x144>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00f      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8007b94 <TIM_Base_SetConfig+0x148>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00b      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8007b98 <TIM_Base_SetConfig+0x14c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d007      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2a      	ldr	r2, [pc, #168]	@ (8007b9c <TIM_Base_SetConfig+0x150>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a29      	ldr	r2, [pc, #164]	@ (8007ba0 <TIM_Base_SetConfig+0x154>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d108      	bne.n	8007b10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a10      	ldr	r2, [pc, #64]	@ (8007b78 <TIM_Base_SetConfig+0x12c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a12      	ldr	r2, [pc, #72]	@ (8007b88 <TIM_Base_SetConfig+0x13c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d103      	bne.n	8007b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d105      	bne.n	8007b6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f023 0201 	bic.w	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	611a      	str	r2, [r3, #16]
  }
}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40000800 	.word	0x40000800
 8007b84:	40000c00 	.word	0x40000c00
 8007b88:	40010400 	.word	0x40010400
 8007b8c:	40014000 	.word	0x40014000
 8007b90:	40014400 	.word	0x40014400
 8007b94:	40014800 	.word	0x40014800
 8007b98:	40001800 	.word	0x40001800
 8007b9c:	40001c00 	.word	0x40001c00
 8007ba0:	40002000 	.word	0x40002000

08007ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	f023 0201 	bic.w	r2, r3, #1
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f023 0302 	bic.w	r3, r3, #2
 8007bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a20      	ldr	r2, [pc, #128]	@ (8007c7c <TIM_OC1_SetConfig+0xd8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_OC1_SetConfig+0x64>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a1f      	ldr	r2, [pc, #124]	@ (8007c80 <TIM_OC1_SetConfig+0xdc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d10c      	bne.n	8007c22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f023 0308 	bic.w	r3, r3, #8
 8007c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f023 0304 	bic.w	r3, r3, #4
 8007c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a15      	ldr	r2, [pc, #84]	@ (8007c7c <TIM_OC1_SetConfig+0xd8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d003      	beq.n	8007c32 <TIM_OC1_SetConfig+0x8e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a14      	ldr	r2, [pc, #80]	@ (8007c80 <TIM_OC1_SetConfig+0xdc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d111      	bne.n	8007c56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	621a      	str	r2, [r3, #32]
}
 8007c70:	bf00      	nop
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40010400 	.word	0x40010400

08007c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	f023 0210 	bic.w	r2, r3, #16
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f023 0320 	bic.w	r3, r3, #32
 8007cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a22      	ldr	r2, [pc, #136]	@ (8007d68 <TIM_OC2_SetConfig+0xe4>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d003      	beq.n	8007cec <TIM_OC2_SetConfig+0x68>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a21      	ldr	r2, [pc, #132]	@ (8007d6c <TIM_OC2_SetConfig+0xe8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d10d      	bne.n	8007d08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a17      	ldr	r2, [pc, #92]	@ (8007d68 <TIM_OC2_SetConfig+0xe4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_OC2_SetConfig+0x94>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a16      	ldr	r2, [pc, #88]	@ (8007d6c <TIM_OC2_SetConfig+0xe8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d113      	bne.n	8007d40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	621a      	str	r2, [r3, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40010400 	.word	0x40010400

08007d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f023 0303 	bic.w	r3, r3, #3
 8007da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a21      	ldr	r2, [pc, #132]	@ (8007e50 <TIM_OC3_SetConfig+0xe0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <TIM_OC3_SetConfig+0x66>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a20      	ldr	r2, [pc, #128]	@ (8007e54 <TIM_OC3_SetConfig+0xe4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d10d      	bne.n	8007df2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a16      	ldr	r2, [pc, #88]	@ (8007e50 <TIM_OC3_SetConfig+0xe0>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d003      	beq.n	8007e02 <TIM_OC3_SetConfig+0x92>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a15      	ldr	r2, [pc, #84]	@ (8007e54 <TIM_OC3_SetConfig+0xe4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d113      	bne.n	8007e2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	621a      	str	r2, [r3, #32]
}
 8007e44:	bf00      	nop
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	40010000 	.word	0x40010000
 8007e54:	40010400 	.word	0x40010400

08007e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	031b      	lsls	r3, r3, #12
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a12      	ldr	r2, [pc, #72]	@ (8007efc <TIM_OC4_SetConfig+0xa4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d003      	beq.n	8007ec0 <TIM_OC4_SetConfig+0x68>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a11      	ldr	r2, [pc, #68]	@ (8007f00 <TIM_OC4_SetConfig+0xa8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d109      	bne.n	8007ed4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	019b      	lsls	r3, r3, #6
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	621a      	str	r2, [r3, #32]
}
 8007eee:	bf00      	nop
 8007ef0:	371c      	adds	r7, #28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40010400 	.word	0x40010400

08007f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	2201      	movs	r2, #1
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6a1a      	ldr	r2, [r3, #32]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	401a      	ands	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1a      	ldr	r2, [r3, #32]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e05a      	b.n	800801e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a21      	ldr	r2, [pc, #132]	@ (800802c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d022      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1d      	ldr	r2, [pc, #116]	@ (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d018      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8008034 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1a      	ldr	r2, [pc, #104]	@ (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	@ (800803c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a17      	ldr	r2, [pc, #92]	@ (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a15      	ldr	r2, [pc, #84]	@ (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10c      	bne.n	800800c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4313      	orrs	r3, r2
 8008002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40001800 	.word	0x40001800

08008048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e042      	b.n	8008108 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fc fa86 	bl	80045a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2224      	movs	r2, #36	@ 0x24
 80080a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fe6b 	bl	8008d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	695a      	ldr	r2, [r3, #20]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b20      	cmp	r3, #32
 8008128:	d112      	bne.n	8008150 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <HAL_UART_Receive_DMA+0x26>
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e00b      	b.n	8008152 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008140:	88fb      	ldrh	r3, [r7, #6]
 8008142:	461a      	mov	r2, r3
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fbc2 	bl	80088d0 <UART_Start_Receive_DMA>
 800814c:	4603      	mov	r3, r0
 800814e:	e000      	b.n	8008152 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
  }
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b0ba      	sub	sp, #232	@ 0xe8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008182:	2300      	movs	r3, #0
 8008184:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008188:	2300      	movs	r3, #0
 800818a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800819a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10f      	bne.n	80081c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <HAL_UART_IRQHandler+0x66>
 80081ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fd29 	bl	8008c12 <UART_Receive_IT>
      return;
 80081c0:	e25b      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80de 	beq.w	8008388 <HAL_UART_IRQHandler+0x22c>
 80081cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d106      	bne.n	80081e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80d1 	beq.w	8008388 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00b      	beq.n	800820a <HAL_UART_IRQHandler+0xae>
 80081f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008202:	f043 0201 	orr.w	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <HAL_UART_IRQHandler+0xd2>
 8008216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008226:	f043 0202 	orr.w	r2, r3, #2
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800822e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <HAL_UART_IRQHandler+0xf6>
 800823a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824a:	f043 0204 	orr.w	r2, r3, #4
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d011      	beq.n	8008282 <HAL_UART_IRQHandler+0x126>
 800825e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800826a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827a:	f043 0208 	orr.w	r2, r3, #8
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 81f2 	beq.w	8008670 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800828c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008290:	f003 0320 	and.w	r3, r3, #32
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_UART_IRQHandler+0x14e>
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fcb4 	bl	8008c12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b4:	2b40      	cmp	r3, #64	@ 0x40
 80082b6:	bf0c      	ite	eq
 80082b8:	2301      	moveq	r3, #1
 80082ba:	2300      	movne	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d103      	bne.n	80082d6 <HAL_UART_IRQHandler+0x17a>
 80082ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d04f      	beq.n	8008376 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fbbc 	bl	8008a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e6:	2b40      	cmp	r3, #64	@ 0x40
 80082e8:	d141      	bne.n	800836e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3314      	adds	r3, #20
 80082f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3314      	adds	r3, #20
 8008312:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008316:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800831a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008322:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800832e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1d9      	bne.n	80082ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d013      	beq.n	8008366 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008342:	4a7e      	ldr	r2, [pc, #504]	@ (800853c <HAL_UART_IRQHandler+0x3e0>)
 8008344:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834a:	4618      	mov	r0, r3
 800834c:	f7fd fd1a 	bl	8005d84 <HAL_DMA_Abort_IT>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d016      	beq.n	8008384 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	e00e      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f99e 	bl	80086a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e00a      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f99a 	bl	80086a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	e006      	b.n	8008384 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f996 	bl	80086a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008382:	e175      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	bf00      	nop
    return;
 8008386:	e173      	b.n	8008670 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838c:	2b01      	cmp	r3, #1
 800838e:	f040 814f 	bne.w	8008630 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8148 	beq.w	8008630 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8141 	beq.w	8008630 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	60bb      	str	r3, [r7, #8]
 80083c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ce:	2b40      	cmp	r3, #64	@ 0x40
 80083d0:	f040 80b6 	bne.w	8008540 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 8145 	beq.w	8008674 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083f2:	429a      	cmp	r2, r3
 80083f4:	f080 813e 	bcs.w	8008674 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800840a:	f000 8088 	beq.w	800851e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	330c      	adds	r3, #12
 8008414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008424:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800842c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800843a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800843e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008446:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1d9      	bne.n	800840e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3314      	adds	r3, #20
 8008460:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800846a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800846c:	f023 0301 	bic.w	r3, r3, #1
 8008470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3314      	adds	r3, #20
 800847a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800847e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008482:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008486:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e1      	bne.n	800845a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3314      	adds	r3, #20
 800849c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3314      	adds	r3, #20
 80084b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80084c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e3      	bne.n	8008496 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	330c      	adds	r3, #12
 80084e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084ee:	f023 0310 	bic.w	r3, r3, #16
 80084f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	330c      	adds	r3, #12
 80084fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008500:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008502:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008506:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800850e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e3      	bne.n	80084dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008518:	4618      	mov	r0, r3
 800851a:	f7fd fbc3 	bl	8005ca4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800852c:	b29b      	uxth	r3, r3
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	b29b      	uxth	r3, r3
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f8c1 	bl	80086bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800853a:	e09b      	b.n	8008674 <HAL_UART_IRQHandler+0x518>
 800853c:	08008b1b 	.word	0x08008b1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008548:	b29b      	uxth	r3, r3
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 808e 	beq.w	8008678 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800855c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8089 	beq.w	8008678 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	330c      	adds	r3, #12
 800856c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800857c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	330c      	adds	r3, #12
 8008586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800858a:	647a      	str	r2, [r7, #68]	@ 0x44
 800858c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e3      	bne.n	8008566 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3314      	adds	r3, #20
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	623b      	str	r3, [r7, #32]
   return(result);
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	f023 0301 	bic.w	r3, r3, #1
 80085b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3314      	adds	r3, #20
 80085be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80085c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e3      	bne.n	800859e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	330c      	adds	r3, #12
 80085ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0310 	bic.w	r3, r3, #16
 80085fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	330c      	adds	r3, #12
 8008604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008608:	61fa      	str	r2, [r7, #28]
 800860a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	617b      	str	r3, [r7, #20]
   return(result);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e3      	bne.n	80085e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f847 	bl	80086bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800862e:	e023      	b.n	8008678 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008638:	2b00      	cmp	r3, #0
 800863a:	d009      	beq.n	8008650 <HAL_UART_IRQHandler+0x4f4>
 800863c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fa7a 	bl	8008b42 <UART_Transmit_IT>
    return;
 800864e:	e014      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00e      	beq.n	800867a <HAL_UART_IRQHandler+0x51e>
 800865c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d008      	beq.n	800867a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 faba 	bl	8008be2 <UART_EndTransmit_IT>
    return;
 800866e:	e004      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
    return;
 8008670:	bf00      	nop
 8008672:	e002      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
      return;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <HAL_UART_IRQHandler+0x51e>
      return;
 8008678:	bf00      	nop
  }
}
 800867a:	37e8      	adds	r7, #232	@ 0xe8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b09c      	sub	sp, #112	@ 0x70
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d172      	bne.n	80087d6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80086f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f2:	2200      	movs	r2, #0
 80086f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	330c      	adds	r3, #12
 80086fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800870c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800870e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008716:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008718:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800871c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800871e:	e841 2300 	strex	r3, r2, [r1]
 8008722:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1e5      	bne.n	80086f6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800872a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3314      	adds	r3, #20
 8008730:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800873a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873c:	f023 0301 	bic.w	r3, r3, #1
 8008740:	667b      	str	r3, [r7, #100]	@ 0x64
 8008742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3314      	adds	r3, #20
 8008748:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800874a:	647a      	str	r2, [r7, #68]	@ 0x44
 800874c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e5      	bne.n	800872a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800875e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3314      	adds	r3, #20
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	623b      	str	r3, [r7, #32]
   return(result);
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008774:	663b      	str	r3, [r7, #96]	@ 0x60
 8008776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3314      	adds	r3, #20
 800877c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800877e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008780:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800878c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e5      	bne.n	800875e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008794:	2220      	movs	r2, #32
 8008796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800879c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d119      	bne.n	80087d6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	330c      	adds	r3, #12
 80087a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f023 0310 	bic.w	r3, r3, #16
 80087b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	330c      	adds	r3, #12
 80087c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80087c2:	61fa      	str	r2, [r7, #28]
 80087c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	69b9      	ldr	r1, [r7, #24]
 80087c8:	69fa      	ldr	r2, [r7, #28]
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	617b      	str	r3, [r7, #20]
   return(result);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e5      	bne.n	80087a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087d8:	2200      	movs	r2, #0
 80087da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d106      	bne.n	80087f2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087e8:	4619      	mov	r1, r3
 80087ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087ec:	f7ff ff66 	bl	80086bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087f0:	e002      	b.n	80087f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80087f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087f4:	f7fa fa8e 	bl	8002d14 <HAL_UART_RxCpltCallback>
}
 80087f8:	bf00      	nop
 80087fa:	3770      	adds	r7, #112	@ 0x70
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008818:	2b01      	cmp	r3, #1
 800881a:	d108      	bne.n	800882e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	b29b      	uxth	r3, r3
 8008824:	4619      	mov	r1, r3
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f7ff ff48 	bl	80086bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800882c:	e002      	b.n	8008834 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7ff ff30 	bl	8008694 <HAL_UART_RxHalfCpltCallback>
}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008858:	2b80      	cmp	r3, #128	@ 0x80
 800885a:	bf0c      	ite	eq
 800885c:	2301      	moveq	r3, #1
 800885e:	2300      	movne	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b21      	cmp	r3, #33	@ 0x21
 800886e:	d108      	bne.n	8008882 <UART_DMAError+0x46>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2200      	movs	r2, #0
 800887a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800887c:	68b8      	ldr	r0, [r7, #8]
 800887e:	f000 f8c1 	bl	8008a04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800888c:	2b40      	cmp	r3, #64	@ 0x40
 800888e:	bf0c      	ite	eq
 8008890:	2301      	moveq	r3, #1
 8008892:	2300      	movne	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b22      	cmp	r3, #34	@ 0x22
 80088a2:	d108      	bne.n	80088b6 <UART_DMAError+0x7a>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d005      	beq.n	80088b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2200      	movs	r2, #0
 80088ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80088b0:	68b8      	ldr	r0, [r7, #8]
 80088b2:	f000 f8cf 	bl	8008a54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ba:	f043 0210 	orr.w	r2, r3, #16
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088c2:	68b8      	ldr	r0, [r7, #8]
 80088c4:	f7ff fef0 	bl	80086a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b098      	sub	sp, #96	@ 0x60
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4613      	mov	r3, r2
 80088dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	88fa      	ldrh	r2, [r7, #6]
 80088e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2222      	movs	r2, #34	@ 0x22
 80088f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fc:	4a3e      	ldr	r2, [pc, #248]	@ (80089f8 <UART_Start_Receive_DMA+0x128>)
 80088fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008904:	4a3d      	ldr	r2, [pc, #244]	@ (80089fc <UART_Start_Receive_DMA+0x12c>)
 8008906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890c:	4a3c      	ldr	r2, [pc, #240]	@ (8008a00 <UART_Start_Receive_DMA+0x130>)
 800890e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008914:	2200      	movs	r2, #0
 8008916:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	88fb      	ldrh	r3, [r7, #6]
 8008930:	f7fd f960 	bl	8005bf4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008934:	2300      	movs	r3, #0
 8008936:	613b      	str	r3, [r7, #16]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	613b      	str	r3, [r7, #16]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d019      	beq.n	8008986 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	330c      	adds	r3, #12
 8008958:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008968:	65bb      	str	r3, [r7, #88]	@ 0x58
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	330c      	adds	r3, #12
 8008970:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008972:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008974:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008978:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e5      	bne.n	8008952 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3314      	adds	r3, #20
 800898c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	f043 0301 	orr.w	r3, r3, #1
 800899c:	657b      	str	r3, [r7, #84]	@ 0x54
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3314      	adds	r3, #20
 80089a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80089a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80089ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e5      	bne.n	8008986 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3314      	adds	r3, #20
 80089c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	617b      	str	r3, [r7, #20]
   return(result);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3314      	adds	r3, #20
 80089d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80089da:	627a      	str	r2, [r7, #36]	@ 0x24
 80089dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6a39      	ldr	r1, [r7, #32]
 80089e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3760      	adds	r7, #96	@ 0x60
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	080086d5 	.word	0x080086d5
 80089fc:	08008801 	.word	0x08008801
 8008a00:	0800883d 	.word	0x0800883d

08008a04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b089      	sub	sp, #36	@ 0x24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	330c      	adds	r3, #12
 8008a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a22:	61fb      	str	r3, [r7, #28]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	330c      	adds	r3, #12
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	61ba      	str	r2, [r7, #24]
 8008a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6979      	ldr	r1, [r7, #20]
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e5      	bne.n	8008a0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008a48:	bf00      	nop
 8008a4a:	3724      	adds	r7, #36	@ 0x24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b095      	sub	sp, #84	@ 0x54
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e5      	bne.n	8008a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3314      	adds	r3, #20
 8008a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	f023 0301 	bic.w	r3, r3, #1
 8008aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3314      	adds	r3, #20
 8008aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ab8:	e841 2300 	strex	r3, r2, [r1]
 8008abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e5      	bne.n	8008a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d119      	bne.n	8008b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f023 0310 	bic.w	r3, r3, #16
 8008ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	330c      	adds	r3, #12
 8008aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008aec:	61ba      	str	r2, [r7, #24]
 8008aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af0:	6979      	ldr	r1, [r7, #20]
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	e841 2300 	strex	r3, r2, [r1]
 8008af8:	613b      	str	r3, [r7, #16]
   return(result);
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e5      	bne.n	8008acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008b0e:	bf00      	nop
 8008b10:	3754      	adds	r7, #84	@ 0x54
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f7ff fdb7 	bl	80086a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b3a:	bf00      	nop
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b085      	sub	sp, #20
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b21      	cmp	r3, #33	@ 0x21
 8008b54:	d13e      	bne.n	8008bd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b5e:	d114      	bne.n	8008b8a <UART_Transmit_IT+0x48>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d110      	bne.n	8008b8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	1c9a      	adds	r2, r3, #2
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	621a      	str	r2, [r3, #32]
 8008b88:	e008      	b.n	8008b9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	1c59      	adds	r1, r3, #1
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	6211      	str	r1, [r2, #32]
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10f      	bne.n	8008bd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008bbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008bce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e000      	b.n	8008bd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bd4:	2302      	movs	r3, #2
  }
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff fd3c 	bl	8008680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b08c      	sub	sp, #48	@ 0x30
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b22      	cmp	r3, #34	@ 0x22
 8008c24:	f040 80ae 	bne.w	8008d84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c30:	d117      	bne.n	8008c62 <UART_Receive_IT+0x50>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d113      	bne.n	8008c62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c42:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5a:	1c9a      	adds	r2, r3, #2
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c60:	e026      	b.n	8008cb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c74:	d007      	beq.n	8008c86 <UART_Receive_IT+0x74>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <UART_Receive_IT+0x82>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d106      	bne.n	8008c94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	e008      	b.n	8008ca6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d15d      	bne.n	8008d80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0220 	bic.w	r2, r2, #32
 8008cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695a      	ldr	r2, [r3, #20]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0201 	bic.w	r2, r2, #1
 8008cf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d135      	bne.n	8008d76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	330c      	adds	r3, #12
 8008d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f023 0310 	bic.w	r3, r3, #16
 8008d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d30:	623a      	str	r2, [r7, #32]
 8008d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	69f9      	ldr	r1, [r7, #28]
 8008d36:	6a3a      	ldr	r2, [r7, #32]
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e5      	bne.n	8008d10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0310 	and.w	r3, r3, #16
 8008d4e:	2b10      	cmp	r3, #16
 8008d50:	d10a      	bne.n	8008d68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff fca4 	bl	80086bc <HAL_UARTEx_RxEventCallback>
 8008d74:	e002      	b.n	8008d7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7f9 ffcc 	bl	8002d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e002      	b.n	8008d86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	e000      	b.n	8008d86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008d84:	2302      	movs	r3, #2
  }
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3730      	adds	r7, #48	@ 0x30
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d94:	b0c0      	sub	sp, #256	@ 0x100
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dac:	68d9      	ldr	r1, [r3, #12]
 8008dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	ea40 0301 	orr.w	r3, r0, r1
 8008db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008de8:	f021 010c 	bic.w	r1, r1, #12
 8008dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008df6:	430b      	orrs	r3, r1
 8008df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e0a:	6999      	ldr	r1, [r3, #24]
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	ea40 0301 	orr.w	r3, r0, r1
 8008e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800905c <UART_SetConfig+0x2cc>)
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d005      	beq.n	8008e30 <UART_SetConfig+0xa0>
 8008e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8009060 <UART_SetConfig+0x2d0>)
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d104      	bne.n	8008e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e30:	f7fe f9b2 	bl	8007198 <HAL_RCC_GetPCLK2Freq>
 8008e34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008e38:	e003      	b.n	8008e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e3a:	f7fe f999 	bl	8007170 <HAL_RCC_GetPCLK1Freq>
 8008e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e4c:	f040 810c 	bne.w	8009068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e62:	4622      	mov	r2, r4
 8008e64:	462b      	mov	r3, r5
 8008e66:	1891      	adds	r1, r2, r2
 8008e68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e6a:	415b      	adcs	r3, r3
 8008e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e72:	4621      	mov	r1, r4
 8008e74:	eb12 0801 	adds.w	r8, r2, r1
 8008e78:	4629      	mov	r1, r5
 8008e7a:	eb43 0901 	adc.w	r9, r3, r1
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e92:	4690      	mov	r8, r2
 8008e94:	4699      	mov	r9, r3
 8008e96:	4623      	mov	r3, r4
 8008e98:	eb18 0303 	adds.w	r3, r8, r3
 8008e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ea0:	462b      	mov	r3, r5
 8008ea2:	eb49 0303 	adc.w	r3, r9, r3
 8008ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	18db      	adds	r3, r3, r3
 8008ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	eb42 0303 	adc.w	r3, r2, r3
 8008eca:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008ed4:	f7f7 fed8 	bl	8000c88 <__aeabi_uldivmod>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4b61      	ldr	r3, [pc, #388]	@ (8009064 <UART_SetConfig+0x2d4>)
 8008ede:	fba3 2302 	umull	r2, r3, r3, r2
 8008ee2:	095b      	lsrs	r3, r3, #5
 8008ee4:	011c      	lsls	r4, r3, #4
 8008ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eea:	2200      	movs	r2, #0
 8008eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008ef8:	4642      	mov	r2, r8
 8008efa:	464b      	mov	r3, r9
 8008efc:	1891      	adds	r1, r2, r2
 8008efe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008f00:	415b      	adcs	r3, r3
 8008f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f08:	4641      	mov	r1, r8
 8008f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f0e:	4649      	mov	r1, r9
 8008f10:	eb43 0b01 	adc.w	fp, r3, r1
 8008f14:	f04f 0200 	mov.w	r2, #0
 8008f18:	f04f 0300 	mov.w	r3, #0
 8008f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f28:	4692      	mov	sl, r2
 8008f2a:	469b      	mov	fp, r3
 8008f2c:	4643      	mov	r3, r8
 8008f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f36:	464b      	mov	r3, r9
 8008f38:	eb4b 0303 	adc.w	r3, fp, r3
 8008f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f54:	460b      	mov	r3, r1
 8008f56:	18db      	adds	r3, r3, r3
 8008f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	eb42 0303 	adc.w	r3, r2, r3
 8008f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f6a:	f7f7 fe8d 	bl	8000c88 <__aeabi_uldivmod>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4611      	mov	r1, r2
 8008f74:	4b3b      	ldr	r3, [pc, #236]	@ (8009064 <UART_SetConfig+0x2d4>)
 8008f76:	fba3 2301 	umull	r2, r3, r3, r1
 8008f7a:	095b      	lsrs	r3, r3, #5
 8008f7c:	2264      	movs	r2, #100	@ 0x64
 8008f7e:	fb02 f303 	mul.w	r3, r2, r3
 8008f82:	1acb      	subs	r3, r1, r3
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f8a:	4b36      	ldr	r3, [pc, #216]	@ (8009064 <UART_SetConfig+0x2d4>)
 8008f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f90:	095b      	lsrs	r3, r3, #5
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f98:	441c      	add	r4, r3
 8008f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008fac:	4642      	mov	r2, r8
 8008fae:	464b      	mov	r3, r9
 8008fb0:	1891      	adds	r1, r2, r2
 8008fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008fb4:	415b      	adcs	r3, r3
 8008fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008fbc:	4641      	mov	r1, r8
 8008fbe:	1851      	adds	r1, r2, r1
 8008fc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008fc2:	4649      	mov	r1, r9
 8008fc4:	414b      	adcs	r3, r1
 8008fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc8:	f04f 0200 	mov.w	r2, #0
 8008fcc:	f04f 0300 	mov.w	r3, #0
 8008fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008fd4:	4659      	mov	r1, fp
 8008fd6:	00cb      	lsls	r3, r1, #3
 8008fd8:	4651      	mov	r1, sl
 8008fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fde:	4651      	mov	r1, sl
 8008fe0:	00ca      	lsls	r2, r1, #3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4642      	mov	r2, r8
 8008fea:	189b      	adds	r3, r3, r2
 8008fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	460a      	mov	r2, r1
 8008ff4:	eb42 0303 	adc.w	r3, r2, r3
 8008ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009008:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800900c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009010:	460b      	mov	r3, r1
 8009012:	18db      	adds	r3, r3, r3
 8009014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009016:	4613      	mov	r3, r2
 8009018:	eb42 0303 	adc.w	r3, r2, r3
 800901c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800901e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009026:	f7f7 fe2f 	bl	8000c88 <__aeabi_uldivmod>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4b0d      	ldr	r3, [pc, #52]	@ (8009064 <UART_SetConfig+0x2d4>)
 8009030:	fba3 1302 	umull	r1, r3, r3, r2
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	2164      	movs	r1, #100	@ 0x64
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	3332      	adds	r3, #50	@ 0x32
 8009042:	4a08      	ldr	r2, [pc, #32]	@ (8009064 <UART_SetConfig+0x2d4>)
 8009044:	fba2 2303 	umull	r2, r3, r2, r3
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	f003 0207 	and.w	r2, r3, #7
 800904e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4422      	add	r2, r4
 8009056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009058:	e106      	b.n	8009268 <UART_SetConfig+0x4d8>
 800905a:	bf00      	nop
 800905c:	40011000 	.word	0x40011000
 8009060:	40011400 	.word	0x40011400
 8009064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800906c:	2200      	movs	r2, #0
 800906e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800907a:	4642      	mov	r2, r8
 800907c:	464b      	mov	r3, r9
 800907e:	1891      	adds	r1, r2, r2
 8009080:	6239      	str	r1, [r7, #32]
 8009082:	415b      	adcs	r3, r3
 8009084:	627b      	str	r3, [r7, #36]	@ 0x24
 8009086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800908a:	4641      	mov	r1, r8
 800908c:	1854      	adds	r4, r2, r1
 800908e:	4649      	mov	r1, r9
 8009090:	eb43 0501 	adc.w	r5, r3, r1
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	00eb      	lsls	r3, r5, #3
 800909e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090a2:	00e2      	lsls	r2, r4, #3
 80090a4:	4614      	mov	r4, r2
 80090a6:	461d      	mov	r5, r3
 80090a8:	4643      	mov	r3, r8
 80090aa:	18e3      	adds	r3, r4, r3
 80090ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090b0:	464b      	mov	r3, r9
 80090b2:	eb45 0303 	adc.w	r3, r5, r3
 80090b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090ca:	f04f 0200 	mov.w	r2, #0
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80090d6:	4629      	mov	r1, r5
 80090d8:	008b      	lsls	r3, r1, #2
 80090da:	4621      	mov	r1, r4
 80090dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090e0:	4621      	mov	r1, r4
 80090e2:	008a      	lsls	r2, r1, #2
 80090e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80090e8:	f7f7 fdce 	bl	8000c88 <__aeabi_uldivmod>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4b60      	ldr	r3, [pc, #384]	@ (8009274 <UART_SetConfig+0x4e4>)
 80090f2:	fba3 2302 	umull	r2, r3, r3, r2
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	011c      	lsls	r4, r3, #4
 80090fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800910c:	4642      	mov	r2, r8
 800910e:	464b      	mov	r3, r9
 8009110:	1891      	adds	r1, r2, r2
 8009112:	61b9      	str	r1, [r7, #24]
 8009114:	415b      	adcs	r3, r3
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800911c:	4641      	mov	r1, r8
 800911e:	1851      	adds	r1, r2, r1
 8009120:	6139      	str	r1, [r7, #16]
 8009122:	4649      	mov	r1, r9
 8009124:	414b      	adcs	r3, r1
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009134:	4659      	mov	r1, fp
 8009136:	00cb      	lsls	r3, r1, #3
 8009138:	4651      	mov	r1, sl
 800913a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800913e:	4651      	mov	r1, sl
 8009140:	00ca      	lsls	r2, r1, #3
 8009142:	4610      	mov	r0, r2
 8009144:	4619      	mov	r1, r3
 8009146:	4603      	mov	r3, r0
 8009148:	4642      	mov	r2, r8
 800914a:	189b      	adds	r3, r3, r2
 800914c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009150:	464b      	mov	r3, r9
 8009152:	460a      	mov	r2, r1
 8009154:	eb42 0303 	adc.w	r3, r2, r3
 8009158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009166:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009168:	f04f 0200 	mov.w	r2, #0
 800916c:	f04f 0300 	mov.w	r3, #0
 8009170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009174:	4649      	mov	r1, r9
 8009176:	008b      	lsls	r3, r1, #2
 8009178:	4641      	mov	r1, r8
 800917a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800917e:	4641      	mov	r1, r8
 8009180:	008a      	lsls	r2, r1, #2
 8009182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009186:	f7f7 fd7f 	bl	8000c88 <__aeabi_uldivmod>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4611      	mov	r1, r2
 8009190:	4b38      	ldr	r3, [pc, #224]	@ (8009274 <UART_SetConfig+0x4e4>)
 8009192:	fba3 2301 	umull	r2, r3, r3, r1
 8009196:	095b      	lsrs	r3, r3, #5
 8009198:	2264      	movs	r2, #100	@ 0x64
 800919a:	fb02 f303 	mul.w	r3, r2, r3
 800919e:	1acb      	subs	r3, r1, r3
 80091a0:	011b      	lsls	r3, r3, #4
 80091a2:	3332      	adds	r3, #50	@ 0x32
 80091a4:	4a33      	ldr	r2, [pc, #204]	@ (8009274 <UART_SetConfig+0x4e4>)
 80091a6:	fba2 2303 	umull	r2, r3, r2, r3
 80091aa:	095b      	lsrs	r3, r3, #5
 80091ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091b0:	441c      	add	r4, r3
 80091b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091b6:	2200      	movs	r2, #0
 80091b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80091ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80091bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80091c0:	4642      	mov	r2, r8
 80091c2:	464b      	mov	r3, r9
 80091c4:	1891      	adds	r1, r2, r2
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	415b      	adcs	r3, r3
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091d0:	4641      	mov	r1, r8
 80091d2:	1851      	adds	r1, r2, r1
 80091d4:	6039      	str	r1, [r7, #0]
 80091d6:	4649      	mov	r1, r9
 80091d8:	414b      	adcs	r3, r1
 80091da:	607b      	str	r3, [r7, #4]
 80091dc:	f04f 0200 	mov.w	r2, #0
 80091e0:	f04f 0300 	mov.w	r3, #0
 80091e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091e8:	4659      	mov	r1, fp
 80091ea:	00cb      	lsls	r3, r1, #3
 80091ec:	4651      	mov	r1, sl
 80091ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091f2:	4651      	mov	r1, sl
 80091f4:	00ca      	lsls	r2, r1, #3
 80091f6:	4610      	mov	r0, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	4642      	mov	r2, r8
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009202:	464b      	mov	r3, r9
 8009204:	460a      	mov	r2, r1
 8009206:	eb42 0303 	adc.w	r3, r2, r3
 800920a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	663b      	str	r3, [r7, #96]	@ 0x60
 8009216:	667a      	str	r2, [r7, #100]	@ 0x64
 8009218:	f04f 0200 	mov.w	r2, #0
 800921c:	f04f 0300 	mov.w	r3, #0
 8009220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009224:	4649      	mov	r1, r9
 8009226:	008b      	lsls	r3, r1, #2
 8009228:	4641      	mov	r1, r8
 800922a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800922e:	4641      	mov	r1, r8
 8009230:	008a      	lsls	r2, r1, #2
 8009232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009236:	f7f7 fd27 	bl	8000c88 <__aeabi_uldivmod>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <UART_SetConfig+0x4e4>)
 8009240:	fba3 1302 	umull	r1, r3, r3, r2
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	2164      	movs	r1, #100	@ 0x64
 8009248:	fb01 f303 	mul.w	r3, r1, r3
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	3332      	adds	r3, #50	@ 0x32
 8009252:	4a08      	ldr	r2, [pc, #32]	@ (8009274 <UART_SetConfig+0x4e4>)
 8009254:	fba2 2303 	umull	r2, r3, r2, r3
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	f003 020f 	and.w	r2, r3, #15
 800925e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4422      	add	r2, r4
 8009266:	609a      	str	r2, [r3, #8]
}
 8009268:	bf00      	nop
 800926a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800926e:	46bd      	mov	sp, r7
 8009270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009274:	51eb851f 	.word	0x51eb851f

08009278 <atoi>:
 8009278:	220a      	movs	r2, #10
 800927a:	2100      	movs	r1, #0
 800927c:	f000 bf6a 	b.w	800a154 <strtol>

08009280 <malloc>:
 8009280:	4b02      	ldr	r3, [pc, #8]	@ (800928c <malloc+0xc>)
 8009282:	4601      	mov	r1, r0
 8009284:	6818      	ldr	r0, [r3, #0]
 8009286:	f000 b825 	b.w	80092d4 <_malloc_r>
 800928a:	bf00      	nop
 800928c:	200001fc 	.word	0x200001fc

08009290 <sbrk_aligned>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	4e0f      	ldr	r6, [pc, #60]	@ (80092d0 <sbrk_aligned+0x40>)
 8009294:	460c      	mov	r4, r1
 8009296:	6831      	ldr	r1, [r6, #0]
 8009298:	4605      	mov	r5, r0
 800929a:	b911      	cbnz	r1, 80092a2 <sbrk_aligned+0x12>
 800929c:	f001 fbbe 	bl	800aa1c <_sbrk_r>
 80092a0:	6030      	str	r0, [r6, #0]
 80092a2:	4621      	mov	r1, r4
 80092a4:	4628      	mov	r0, r5
 80092a6:	f001 fbb9 	bl	800aa1c <_sbrk_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d103      	bne.n	80092b6 <sbrk_aligned+0x26>
 80092ae:	f04f 34ff 	mov.w	r4, #4294967295
 80092b2:	4620      	mov	r0, r4
 80092b4:	bd70      	pop	{r4, r5, r6, pc}
 80092b6:	1cc4      	adds	r4, r0, #3
 80092b8:	f024 0403 	bic.w	r4, r4, #3
 80092bc:	42a0      	cmp	r0, r4
 80092be:	d0f8      	beq.n	80092b2 <sbrk_aligned+0x22>
 80092c0:	1a21      	subs	r1, r4, r0
 80092c2:	4628      	mov	r0, r5
 80092c4:	f001 fbaa 	bl	800aa1c <_sbrk_r>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d1f2      	bne.n	80092b2 <sbrk_aligned+0x22>
 80092cc:	e7ef      	b.n	80092ae <sbrk_aligned+0x1e>
 80092ce:	bf00      	nop
 80092d0:	20000aec 	.word	0x20000aec

080092d4 <_malloc_r>:
 80092d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d8:	1ccd      	adds	r5, r1, #3
 80092da:	f025 0503 	bic.w	r5, r5, #3
 80092de:	3508      	adds	r5, #8
 80092e0:	2d0c      	cmp	r5, #12
 80092e2:	bf38      	it	cc
 80092e4:	250c      	movcc	r5, #12
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	4606      	mov	r6, r0
 80092ea:	db01      	blt.n	80092f0 <_malloc_r+0x1c>
 80092ec:	42a9      	cmp	r1, r5
 80092ee:	d904      	bls.n	80092fa <_malloc_r+0x26>
 80092f0:	230c      	movs	r3, #12
 80092f2:	6033      	str	r3, [r6, #0]
 80092f4:	2000      	movs	r0, #0
 80092f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093d0 <_malloc_r+0xfc>
 80092fe:	f000 f869 	bl	80093d4 <__malloc_lock>
 8009302:	f8d8 3000 	ldr.w	r3, [r8]
 8009306:	461c      	mov	r4, r3
 8009308:	bb44      	cbnz	r4, 800935c <_malloc_r+0x88>
 800930a:	4629      	mov	r1, r5
 800930c:	4630      	mov	r0, r6
 800930e:	f7ff ffbf 	bl	8009290 <sbrk_aligned>
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	4604      	mov	r4, r0
 8009316:	d158      	bne.n	80093ca <_malloc_r+0xf6>
 8009318:	f8d8 4000 	ldr.w	r4, [r8]
 800931c:	4627      	mov	r7, r4
 800931e:	2f00      	cmp	r7, #0
 8009320:	d143      	bne.n	80093aa <_malloc_r+0xd6>
 8009322:	2c00      	cmp	r4, #0
 8009324:	d04b      	beq.n	80093be <_malloc_r+0xea>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	4639      	mov	r1, r7
 800932a:	4630      	mov	r0, r6
 800932c:	eb04 0903 	add.w	r9, r4, r3
 8009330:	f001 fb74 	bl	800aa1c <_sbrk_r>
 8009334:	4581      	cmp	r9, r0
 8009336:	d142      	bne.n	80093be <_malloc_r+0xea>
 8009338:	6821      	ldr	r1, [r4, #0]
 800933a:	1a6d      	subs	r5, r5, r1
 800933c:	4629      	mov	r1, r5
 800933e:	4630      	mov	r0, r6
 8009340:	f7ff ffa6 	bl	8009290 <sbrk_aligned>
 8009344:	3001      	adds	r0, #1
 8009346:	d03a      	beq.n	80093be <_malloc_r+0xea>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	442b      	add	r3, r5
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	f8d8 3000 	ldr.w	r3, [r8]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	bb62      	cbnz	r2, 80093b0 <_malloc_r+0xdc>
 8009356:	f8c8 7000 	str.w	r7, [r8]
 800935a:	e00f      	b.n	800937c <_malloc_r+0xa8>
 800935c:	6822      	ldr	r2, [r4, #0]
 800935e:	1b52      	subs	r2, r2, r5
 8009360:	d420      	bmi.n	80093a4 <_malloc_r+0xd0>
 8009362:	2a0b      	cmp	r2, #11
 8009364:	d917      	bls.n	8009396 <_malloc_r+0xc2>
 8009366:	1961      	adds	r1, r4, r5
 8009368:	42a3      	cmp	r3, r4
 800936a:	6025      	str	r5, [r4, #0]
 800936c:	bf18      	it	ne
 800936e:	6059      	strne	r1, [r3, #4]
 8009370:	6863      	ldr	r3, [r4, #4]
 8009372:	bf08      	it	eq
 8009374:	f8c8 1000 	streq.w	r1, [r8]
 8009378:	5162      	str	r2, [r4, r5]
 800937a:	604b      	str	r3, [r1, #4]
 800937c:	4630      	mov	r0, r6
 800937e:	f000 f82f 	bl	80093e0 <__malloc_unlock>
 8009382:	f104 000b 	add.w	r0, r4, #11
 8009386:	1d23      	adds	r3, r4, #4
 8009388:	f020 0007 	bic.w	r0, r0, #7
 800938c:	1ac2      	subs	r2, r0, r3
 800938e:	bf1c      	itt	ne
 8009390:	1a1b      	subne	r3, r3, r0
 8009392:	50a3      	strne	r3, [r4, r2]
 8009394:	e7af      	b.n	80092f6 <_malloc_r+0x22>
 8009396:	6862      	ldr	r2, [r4, #4]
 8009398:	42a3      	cmp	r3, r4
 800939a:	bf0c      	ite	eq
 800939c:	f8c8 2000 	streq.w	r2, [r8]
 80093a0:	605a      	strne	r2, [r3, #4]
 80093a2:	e7eb      	b.n	800937c <_malloc_r+0xa8>
 80093a4:	4623      	mov	r3, r4
 80093a6:	6864      	ldr	r4, [r4, #4]
 80093a8:	e7ae      	b.n	8009308 <_malloc_r+0x34>
 80093aa:	463c      	mov	r4, r7
 80093ac:	687f      	ldr	r7, [r7, #4]
 80093ae:	e7b6      	b.n	800931e <_malloc_r+0x4a>
 80093b0:	461a      	mov	r2, r3
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	42a3      	cmp	r3, r4
 80093b6:	d1fb      	bne.n	80093b0 <_malloc_r+0xdc>
 80093b8:	2300      	movs	r3, #0
 80093ba:	6053      	str	r3, [r2, #4]
 80093bc:	e7de      	b.n	800937c <_malloc_r+0xa8>
 80093be:	230c      	movs	r3, #12
 80093c0:	6033      	str	r3, [r6, #0]
 80093c2:	4630      	mov	r0, r6
 80093c4:	f000 f80c 	bl	80093e0 <__malloc_unlock>
 80093c8:	e794      	b.n	80092f4 <_malloc_r+0x20>
 80093ca:	6005      	str	r5, [r0, #0]
 80093cc:	e7d6      	b.n	800937c <_malloc_r+0xa8>
 80093ce:	bf00      	nop
 80093d0:	20000af0 	.word	0x20000af0

080093d4 <__malloc_lock>:
 80093d4:	4801      	ldr	r0, [pc, #4]	@ (80093dc <__malloc_lock+0x8>)
 80093d6:	f001 bb6e 	b.w	800aab6 <__retarget_lock_acquire_recursive>
 80093da:	bf00      	nop
 80093dc:	20000c34 	.word	0x20000c34

080093e0 <__malloc_unlock>:
 80093e0:	4801      	ldr	r0, [pc, #4]	@ (80093e8 <__malloc_unlock+0x8>)
 80093e2:	f001 bb69 	b.w	800aab8 <__retarget_lock_release_recursive>
 80093e6:	bf00      	nop
 80093e8:	20000c34 	.word	0x20000c34

080093ec <_realloc_r>:
 80093ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f0:	4607      	mov	r7, r0
 80093f2:	4614      	mov	r4, r2
 80093f4:	460d      	mov	r5, r1
 80093f6:	b921      	cbnz	r1, 8009402 <_realloc_r+0x16>
 80093f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093fc:	4611      	mov	r1, r2
 80093fe:	f7ff bf69 	b.w	80092d4 <_malloc_r>
 8009402:	b92a      	cbnz	r2, 8009410 <_realloc_r+0x24>
 8009404:	f001 fb76 	bl	800aaf4 <_free_r>
 8009408:	4625      	mov	r5, r4
 800940a:	4628      	mov	r0, r5
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	f002 fbb0 	bl	800bb74 <_malloc_usable_size_r>
 8009414:	4284      	cmp	r4, r0
 8009416:	4606      	mov	r6, r0
 8009418:	d802      	bhi.n	8009420 <_realloc_r+0x34>
 800941a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800941e:	d8f4      	bhi.n	800940a <_realloc_r+0x1e>
 8009420:	4621      	mov	r1, r4
 8009422:	4638      	mov	r0, r7
 8009424:	f7ff ff56 	bl	80092d4 <_malloc_r>
 8009428:	4680      	mov	r8, r0
 800942a:	b908      	cbnz	r0, 8009430 <_realloc_r+0x44>
 800942c:	4645      	mov	r5, r8
 800942e:	e7ec      	b.n	800940a <_realloc_r+0x1e>
 8009430:	42b4      	cmp	r4, r6
 8009432:	4622      	mov	r2, r4
 8009434:	4629      	mov	r1, r5
 8009436:	bf28      	it	cs
 8009438:	4632      	movcs	r2, r6
 800943a:	f001 fb3e 	bl	800aaba <memcpy>
 800943e:	4629      	mov	r1, r5
 8009440:	4638      	mov	r0, r7
 8009442:	f001 fb57 	bl	800aaf4 <_free_r>
 8009446:	e7f1      	b.n	800942c <_realloc_r+0x40>

08009448 <sulp>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4604      	mov	r4, r0
 800944c:	460d      	mov	r5, r1
 800944e:	ec45 4b10 	vmov	d0, r4, r5
 8009452:	4616      	mov	r6, r2
 8009454:	f002 fa50 	bl	800b8f8 <__ulp>
 8009458:	ec51 0b10 	vmov	r0, r1, d0
 800945c:	b17e      	cbz	r6, 800947e <sulp+0x36>
 800945e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009462:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009466:	2b00      	cmp	r3, #0
 8009468:	dd09      	ble.n	800947e <sulp+0x36>
 800946a:	051b      	lsls	r3, r3, #20
 800946c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009470:	2400      	movs	r4, #0
 8009472:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009476:	4622      	mov	r2, r4
 8009478:	462b      	mov	r3, r5
 800947a:	f7f7 f8bd 	bl	80005f8 <__aeabi_dmul>
 800947e:	ec41 0b10 	vmov	d0, r0, r1
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	0000      	movs	r0, r0
	...

08009488 <_strtod_l>:
 8009488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	b09f      	sub	sp, #124	@ 0x7c
 800948e:	460c      	mov	r4, r1
 8009490:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009492:	2200      	movs	r2, #0
 8009494:	921a      	str	r2, [sp, #104]	@ 0x68
 8009496:	9005      	str	r0, [sp, #20]
 8009498:	f04f 0a00 	mov.w	sl, #0
 800949c:	f04f 0b00 	mov.w	fp, #0
 80094a0:	460a      	mov	r2, r1
 80094a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80094a4:	7811      	ldrb	r1, [r2, #0]
 80094a6:	292b      	cmp	r1, #43	@ 0x2b
 80094a8:	d04a      	beq.n	8009540 <_strtod_l+0xb8>
 80094aa:	d838      	bhi.n	800951e <_strtod_l+0x96>
 80094ac:	290d      	cmp	r1, #13
 80094ae:	d832      	bhi.n	8009516 <_strtod_l+0x8e>
 80094b0:	2908      	cmp	r1, #8
 80094b2:	d832      	bhi.n	800951a <_strtod_l+0x92>
 80094b4:	2900      	cmp	r1, #0
 80094b6:	d03b      	beq.n	8009530 <_strtod_l+0xa8>
 80094b8:	2200      	movs	r2, #0
 80094ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80094bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80094be:	782a      	ldrb	r2, [r5, #0]
 80094c0:	2a30      	cmp	r2, #48	@ 0x30
 80094c2:	f040 80b2 	bne.w	800962a <_strtod_l+0x1a2>
 80094c6:	786a      	ldrb	r2, [r5, #1]
 80094c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094cc:	2a58      	cmp	r2, #88	@ 0x58
 80094ce:	d16e      	bne.n	80095ae <_strtod_l+0x126>
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4a8f      	ldr	r2, [pc, #572]	@ (8009718 <_strtod_l+0x290>)
 80094dc:	9805      	ldr	r0, [sp, #20]
 80094de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80094e0:	a919      	add	r1, sp, #100	@ 0x64
 80094e2:	f001 fbb9 	bl	800ac58 <__gethex>
 80094e6:	f010 060f 	ands.w	r6, r0, #15
 80094ea:	4604      	mov	r4, r0
 80094ec:	d005      	beq.n	80094fa <_strtod_l+0x72>
 80094ee:	2e06      	cmp	r6, #6
 80094f0:	d128      	bne.n	8009544 <_strtod_l+0xbc>
 80094f2:	3501      	adds	r5, #1
 80094f4:	2300      	movs	r3, #0
 80094f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80094f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80094fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f040 858e 	bne.w	800a01e <_strtod_l+0xb96>
 8009502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009504:	b1cb      	cbz	r3, 800953a <_strtod_l+0xb2>
 8009506:	4652      	mov	r2, sl
 8009508:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800950c:	ec43 2b10 	vmov	d0, r2, r3
 8009510:	b01f      	add	sp, #124	@ 0x7c
 8009512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009516:	2920      	cmp	r1, #32
 8009518:	d1ce      	bne.n	80094b8 <_strtod_l+0x30>
 800951a:	3201      	adds	r2, #1
 800951c:	e7c1      	b.n	80094a2 <_strtod_l+0x1a>
 800951e:	292d      	cmp	r1, #45	@ 0x2d
 8009520:	d1ca      	bne.n	80094b8 <_strtod_l+0x30>
 8009522:	2101      	movs	r1, #1
 8009524:	910e      	str	r1, [sp, #56]	@ 0x38
 8009526:	1c51      	adds	r1, r2, #1
 8009528:	9119      	str	r1, [sp, #100]	@ 0x64
 800952a:	7852      	ldrb	r2, [r2, #1]
 800952c:	2a00      	cmp	r2, #0
 800952e:	d1c5      	bne.n	80094bc <_strtod_l+0x34>
 8009530:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009532:	9419      	str	r4, [sp, #100]	@ 0x64
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 8570 	bne.w	800a01a <_strtod_l+0xb92>
 800953a:	4652      	mov	r2, sl
 800953c:	465b      	mov	r3, fp
 800953e:	e7e5      	b.n	800950c <_strtod_l+0x84>
 8009540:	2100      	movs	r1, #0
 8009542:	e7ef      	b.n	8009524 <_strtod_l+0x9c>
 8009544:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009546:	b13a      	cbz	r2, 8009558 <_strtod_l+0xd0>
 8009548:	2135      	movs	r1, #53	@ 0x35
 800954a:	a81c      	add	r0, sp, #112	@ 0x70
 800954c:	f002 face 	bl	800baec <__copybits>
 8009550:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009552:	9805      	ldr	r0, [sp, #20]
 8009554:	f001 fea4 	bl	800b2a0 <_Bfree>
 8009558:	3e01      	subs	r6, #1
 800955a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800955c:	2e04      	cmp	r6, #4
 800955e:	d806      	bhi.n	800956e <_strtod_l+0xe6>
 8009560:	e8df f006 	tbb	[pc, r6]
 8009564:	201d0314 	.word	0x201d0314
 8009568:	14          	.byte	0x14
 8009569:	00          	.byte	0x00
 800956a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800956e:	05e1      	lsls	r1, r4, #23
 8009570:	bf48      	it	mi
 8009572:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009576:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800957a:	0d1b      	lsrs	r3, r3, #20
 800957c:	051b      	lsls	r3, r3, #20
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1bb      	bne.n	80094fa <_strtod_l+0x72>
 8009582:	f001 fa6d 	bl	800aa60 <__errno>
 8009586:	2322      	movs	r3, #34	@ 0x22
 8009588:	6003      	str	r3, [r0, #0]
 800958a:	e7b6      	b.n	80094fa <_strtod_l+0x72>
 800958c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009590:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009594:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009598:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800959c:	e7e7      	b.n	800956e <_strtod_l+0xe6>
 800959e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009720 <_strtod_l+0x298>
 80095a2:	e7e4      	b.n	800956e <_strtod_l+0xe6>
 80095a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80095a8:	f04f 3aff 	mov.w	sl, #4294967295
 80095ac:	e7df      	b.n	800956e <_strtod_l+0xe6>
 80095ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	2b30      	cmp	r3, #48	@ 0x30
 80095b8:	d0f9      	beq.n	80095ae <_strtod_l+0x126>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d09d      	beq.n	80094fa <_strtod_l+0x72>
 80095be:	2301      	movs	r3, #1
 80095c0:	2700      	movs	r7, #0
 80095c2:	9308      	str	r3, [sp, #32]
 80095c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80095c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80095ca:	46b9      	mov	r9, r7
 80095cc:	220a      	movs	r2, #10
 80095ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80095d0:	7805      	ldrb	r5, [r0, #0]
 80095d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80095d6:	b2d9      	uxtb	r1, r3
 80095d8:	2909      	cmp	r1, #9
 80095da:	d928      	bls.n	800962e <_strtod_l+0x1a6>
 80095dc:	494f      	ldr	r1, [pc, #316]	@ (800971c <_strtod_l+0x294>)
 80095de:	2201      	movs	r2, #1
 80095e0:	f001 f9c2 	bl	800a968 <strncmp>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d032      	beq.n	800964e <_strtod_l+0x1c6>
 80095e8:	2000      	movs	r0, #0
 80095ea:	462a      	mov	r2, r5
 80095ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80095ee:	464d      	mov	r5, r9
 80095f0:	4603      	mov	r3, r0
 80095f2:	2a65      	cmp	r2, #101	@ 0x65
 80095f4:	d001      	beq.n	80095fa <_strtod_l+0x172>
 80095f6:	2a45      	cmp	r2, #69	@ 0x45
 80095f8:	d114      	bne.n	8009624 <_strtod_l+0x19c>
 80095fa:	b91d      	cbnz	r5, 8009604 <_strtod_l+0x17c>
 80095fc:	9a08      	ldr	r2, [sp, #32]
 80095fe:	4302      	orrs	r2, r0
 8009600:	d096      	beq.n	8009530 <_strtod_l+0xa8>
 8009602:	2500      	movs	r5, #0
 8009604:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009606:	1c62      	adds	r2, r4, #1
 8009608:	9219      	str	r2, [sp, #100]	@ 0x64
 800960a:	7862      	ldrb	r2, [r4, #1]
 800960c:	2a2b      	cmp	r2, #43	@ 0x2b
 800960e:	d07a      	beq.n	8009706 <_strtod_l+0x27e>
 8009610:	2a2d      	cmp	r2, #45	@ 0x2d
 8009612:	d07e      	beq.n	8009712 <_strtod_l+0x28a>
 8009614:	f04f 0c00 	mov.w	ip, #0
 8009618:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800961c:	2909      	cmp	r1, #9
 800961e:	f240 8085 	bls.w	800972c <_strtod_l+0x2a4>
 8009622:	9419      	str	r4, [sp, #100]	@ 0x64
 8009624:	f04f 0800 	mov.w	r8, #0
 8009628:	e0a5      	b.n	8009776 <_strtod_l+0x2ee>
 800962a:	2300      	movs	r3, #0
 800962c:	e7c8      	b.n	80095c0 <_strtod_l+0x138>
 800962e:	f1b9 0f08 	cmp.w	r9, #8
 8009632:	bfd8      	it	le
 8009634:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009636:	f100 0001 	add.w	r0, r0, #1
 800963a:	bfda      	itte	le
 800963c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009640:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009642:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009646:	f109 0901 	add.w	r9, r9, #1
 800964a:	9019      	str	r0, [sp, #100]	@ 0x64
 800964c:	e7bf      	b.n	80095ce <_strtod_l+0x146>
 800964e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	9219      	str	r2, [sp, #100]	@ 0x64
 8009654:	785a      	ldrb	r2, [r3, #1]
 8009656:	f1b9 0f00 	cmp.w	r9, #0
 800965a:	d03b      	beq.n	80096d4 <_strtod_l+0x24c>
 800965c:	900a      	str	r0, [sp, #40]	@ 0x28
 800965e:	464d      	mov	r5, r9
 8009660:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009664:	2b09      	cmp	r3, #9
 8009666:	d912      	bls.n	800968e <_strtod_l+0x206>
 8009668:	2301      	movs	r3, #1
 800966a:	e7c2      	b.n	80095f2 <_strtod_l+0x16a>
 800966c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	9219      	str	r2, [sp, #100]	@ 0x64
 8009672:	785a      	ldrb	r2, [r3, #1]
 8009674:	3001      	adds	r0, #1
 8009676:	2a30      	cmp	r2, #48	@ 0x30
 8009678:	d0f8      	beq.n	800966c <_strtod_l+0x1e4>
 800967a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800967e:	2b08      	cmp	r3, #8
 8009680:	f200 84d2 	bhi.w	800a028 <_strtod_l+0xba0>
 8009684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009686:	900a      	str	r0, [sp, #40]	@ 0x28
 8009688:	2000      	movs	r0, #0
 800968a:	930c      	str	r3, [sp, #48]	@ 0x30
 800968c:	4605      	mov	r5, r0
 800968e:	3a30      	subs	r2, #48	@ 0x30
 8009690:	f100 0301 	add.w	r3, r0, #1
 8009694:	d018      	beq.n	80096c8 <_strtod_l+0x240>
 8009696:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009698:	4419      	add	r1, r3
 800969a:	910a      	str	r1, [sp, #40]	@ 0x28
 800969c:	462e      	mov	r6, r5
 800969e:	f04f 0e0a 	mov.w	lr, #10
 80096a2:	1c71      	adds	r1, r6, #1
 80096a4:	eba1 0c05 	sub.w	ip, r1, r5
 80096a8:	4563      	cmp	r3, ip
 80096aa:	dc15      	bgt.n	80096d8 <_strtod_l+0x250>
 80096ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80096b0:	182b      	adds	r3, r5, r0
 80096b2:	2b08      	cmp	r3, #8
 80096b4:	f105 0501 	add.w	r5, r5, #1
 80096b8:	4405      	add	r5, r0
 80096ba:	dc1a      	bgt.n	80096f2 <_strtod_l+0x26a>
 80096bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096be:	230a      	movs	r3, #10
 80096c0:	fb03 2301 	mla	r3, r3, r1, r2
 80096c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096c6:	2300      	movs	r3, #0
 80096c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096ca:	1c51      	adds	r1, r2, #1
 80096cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80096ce:	7852      	ldrb	r2, [r2, #1]
 80096d0:	4618      	mov	r0, r3
 80096d2:	e7c5      	b.n	8009660 <_strtod_l+0x1d8>
 80096d4:	4648      	mov	r0, r9
 80096d6:	e7ce      	b.n	8009676 <_strtod_l+0x1ee>
 80096d8:	2e08      	cmp	r6, #8
 80096da:	dc05      	bgt.n	80096e8 <_strtod_l+0x260>
 80096dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80096de:	fb0e f606 	mul.w	r6, lr, r6
 80096e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80096e4:	460e      	mov	r6, r1
 80096e6:	e7dc      	b.n	80096a2 <_strtod_l+0x21a>
 80096e8:	2910      	cmp	r1, #16
 80096ea:	bfd8      	it	le
 80096ec:	fb0e f707 	mulle.w	r7, lr, r7
 80096f0:	e7f8      	b.n	80096e4 <_strtod_l+0x25c>
 80096f2:	2b0f      	cmp	r3, #15
 80096f4:	bfdc      	itt	le
 80096f6:	230a      	movle	r3, #10
 80096f8:	fb03 2707 	mlale	r7, r3, r7, r2
 80096fc:	e7e3      	b.n	80096c6 <_strtod_l+0x23e>
 80096fe:	2300      	movs	r3, #0
 8009700:	930a      	str	r3, [sp, #40]	@ 0x28
 8009702:	2301      	movs	r3, #1
 8009704:	e77a      	b.n	80095fc <_strtod_l+0x174>
 8009706:	f04f 0c00 	mov.w	ip, #0
 800970a:	1ca2      	adds	r2, r4, #2
 800970c:	9219      	str	r2, [sp, #100]	@ 0x64
 800970e:	78a2      	ldrb	r2, [r4, #2]
 8009710:	e782      	b.n	8009618 <_strtod_l+0x190>
 8009712:	f04f 0c01 	mov.w	ip, #1
 8009716:	e7f8      	b.n	800970a <_strtod_l+0x282>
 8009718:	0800e478 	.word	0x0800e478
 800971c:	0800e2dc 	.word	0x0800e2dc
 8009720:	7ff00000 	.word	0x7ff00000
 8009724:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009726:	1c51      	adds	r1, r2, #1
 8009728:	9119      	str	r1, [sp, #100]	@ 0x64
 800972a:	7852      	ldrb	r2, [r2, #1]
 800972c:	2a30      	cmp	r2, #48	@ 0x30
 800972e:	d0f9      	beq.n	8009724 <_strtod_l+0x29c>
 8009730:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009734:	2908      	cmp	r1, #8
 8009736:	f63f af75 	bhi.w	8009624 <_strtod_l+0x19c>
 800973a:	3a30      	subs	r2, #48	@ 0x30
 800973c:	9209      	str	r2, [sp, #36]	@ 0x24
 800973e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009740:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009742:	f04f 080a 	mov.w	r8, #10
 8009746:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009748:	1c56      	adds	r6, r2, #1
 800974a:	9619      	str	r6, [sp, #100]	@ 0x64
 800974c:	7852      	ldrb	r2, [r2, #1]
 800974e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009752:	f1be 0f09 	cmp.w	lr, #9
 8009756:	d939      	bls.n	80097cc <_strtod_l+0x344>
 8009758:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800975a:	1a76      	subs	r6, r6, r1
 800975c:	2e08      	cmp	r6, #8
 800975e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009762:	dc03      	bgt.n	800976c <_strtod_l+0x2e4>
 8009764:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009766:	4588      	cmp	r8, r1
 8009768:	bfa8      	it	ge
 800976a:	4688      	movge	r8, r1
 800976c:	f1bc 0f00 	cmp.w	ip, #0
 8009770:	d001      	beq.n	8009776 <_strtod_l+0x2ee>
 8009772:	f1c8 0800 	rsb	r8, r8, #0
 8009776:	2d00      	cmp	r5, #0
 8009778:	d14e      	bne.n	8009818 <_strtod_l+0x390>
 800977a:	9908      	ldr	r1, [sp, #32]
 800977c:	4308      	orrs	r0, r1
 800977e:	f47f aebc 	bne.w	80094fa <_strtod_l+0x72>
 8009782:	2b00      	cmp	r3, #0
 8009784:	f47f aed4 	bne.w	8009530 <_strtod_l+0xa8>
 8009788:	2a69      	cmp	r2, #105	@ 0x69
 800978a:	d028      	beq.n	80097de <_strtod_l+0x356>
 800978c:	dc25      	bgt.n	80097da <_strtod_l+0x352>
 800978e:	2a49      	cmp	r2, #73	@ 0x49
 8009790:	d025      	beq.n	80097de <_strtod_l+0x356>
 8009792:	2a4e      	cmp	r2, #78	@ 0x4e
 8009794:	f47f aecc 	bne.w	8009530 <_strtod_l+0xa8>
 8009798:	499a      	ldr	r1, [pc, #616]	@ (8009a04 <_strtod_l+0x57c>)
 800979a:	a819      	add	r0, sp, #100	@ 0x64
 800979c:	f001 fc7e 	bl	800b09c <__match>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	f43f aec5 	beq.w	8009530 <_strtod_l+0xa8>
 80097a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	2b28      	cmp	r3, #40	@ 0x28
 80097ac:	d12e      	bne.n	800980c <_strtod_l+0x384>
 80097ae:	4996      	ldr	r1, [pc, #600]	@ (8009a08 <_strtod_l+0x580>)
 80097b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80097b2:	a819      	add	r0, sp, #100	@ 0x64
 80097b4:	f001 fc86 	bl	800b0c4 <__hexnan>
 80097b8:	2805      	cmp	r0, #5
 80097ba:	d127      	bne.n	800980c <_strtod_l+0x384>
 80097bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80097c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80097c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80097ca:	e696      	b.n	80094fa <_strtod_l+0x72>
 80097cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097ce:	fb08 2101 	mla	r1, r8, r1, r2
 80097d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80097d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80097d8:	e7b5      	b.n	8009746 <_strtod_l+0x2be>
 80097da:	2a6e      	cmp	r2, #110	@ 0x6e
 80097dc:	e7da      	b.n	8009794 <_strtod_l+0x30c>
 80097de:	498b      	ldr	r1, [pc, #556]	@ (8009a0c <_strtod_l+0x584>)
 80097e0:	a819      	add	r0, sp, #100	@ 0x64
 80097e2:	f001 fc5b 	bl	800b09c <__match>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f43f aea2 	beq.w	8009530 <_strtod_l+0xa8>
 80097ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097ee:	4988      	ldr	r1, [pc, #544]	@ (8009a10 <_strtod_l+0x588>)
 80097f0:	3b01      	subs	r3, #1
 80097f2:	a819      	add	r0, sp, #100	@ 0x64
 80097f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80097f6:	f001 fc51 	bl	800b09c <__match>
 80097fa:	b910      	cbnz	r0, 8009802 <_strtod_l+0x37a>
 80097fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097fe:	3301      	adds	r3, #1
 8009800:	9319      	str	r3, [sp, #100]	@ 0x64
 8009802:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009a20 <_strtod_l+0x598>
 8009806:	f04f 0a00 	mov.w	sl, #0
 800980a:	e676      	b.n	80094fa <_strtod_l+0x72>
 800980c:	4881      	ldr	r0, [pc, #516]	@ (8009a14 <_strtod_l+0x58c>)
 800980e:	f001 f963 	bl	800aad8 <nan>
 8009812:	ec5b ab10 	vmov	sl, fp, d0
 8009816:	e670      	b.n	80094fa <_strtod_l+0x72>
 8009818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800981c:	eba8 0303 	sub.w	r3, r8, r3
 8009820:	f1b9 0f00 	cmp.w	r9, #0
 8009824:	bf08      	it	eq
 8009826:	46a9      	moveq	r9, r5
 8009828:	2d10      	cmp	r5, #16
 800982a:	9309      	str	r3, [sp, #36]	@ 0x24
 800982c:	462c      	mov	r4, r5
 800982e:	bfa8      	it	ge
 8009830:	2410      	movge	r4, #16
 8009832:	f7f6 fe67 	bl	8000504 <__aeabi_ui2d>
 8009836:	2d09      	cmp	r5, #9
 8009838:	4682      	mov	sl, r0
 800983a:	468b      	mov	fp, r1
 800983c:	dc13      	bgt.n	8009866 <_strtod_l+0x3de>
 800983e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009840:	2b00      	cmp	r3, #0
 8009842:	f43f ae5a 	beq.w	80094fa <_strtod_l+0x72>
 8009846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009848:	dd78      	ble.n	800993c <_strtod_l+0x4b4>
 800984a:	2b16      	cmp	r3, #22
 800984c:	dc5f      	bgt.n	800990e <_strtod_l+0x486>
 800984e:	4972      	ldr	r1, [pc, #456]	@ (8009a18 <_strtod_l+0x590>)
 8009850:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009858:	4652      	mov	r2, sl
 800985a:	465b      	mov	r3, fp
 800985c:	f7f6 fecc 	bl	80005f8 <__aeabi_dmul>
 8009860:	4682      	mov	sl, r0
 8009862:	468b      	mov	fp, r1
 8009864:	e649      	b.n	80094fa <_strtod_l+0x72>
 8009866:	4b6c      	ldr	r3, [pc, #432]	@ (8009a18 <_strtod_l+0x590>)
 8009868:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800986c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009870:	f7f6 fec2 	bl	80005f8 <__aeabi_dmul>
 8009874:	4682      	mov	sl, r0
 8009876:	4638      	mov	r0, r7
 8009878:	468b      	mov	fp, r1
 800987a:	f7f6 fe43 	bl	8000504 <__aeabi_ui2d>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4650      	mov	r0, sl
 8009884:	4659      	mov	r1, fp
 8009886:	f7f6 fd01 	bl	800028c <__adddf3>
 800988a:	2d0f      	cmp	r5, #15
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	ddd5      	ble.n	800983e <_strtod_l+0x3b6>
 8009892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009894:	1b2c      	subs	r4, r5, r4
 8009896:	441c      	add	r4, r3
 8009898:	2c00      	cmp	r4, #0
 800989a:	f340 8093 	ble.w	80099c4 <_strtod_l+0x53c>
 800989e:	f014 030f 	ands.w	r3, r4, #15
 80098a2:	d00a      	beq.n	80098ba <_strtod_l+0x432>
 80098a4:	495c      	ldr	r1, [pc, #368]	@ (8009a18 <_strtod_l+0x590>)
 80098a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098aa:	4652      	mov	r2, sl
 80098ac:	465b      	mov	r3, fp
 80098ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b2:	f7f6 fea1 	bl	80005f8 <__aeabi_dmul>
 80098b6:	4682      	mov	sl, r0
 80098b8:	468b      	mov	fp, r1
 80098ba:	f034 040f 	bics.w	r4, r4, #15
 80098be:	d073      	beq.n	80099a8 <_strtod_l+0x520>
 80098c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80098c4:	dd49      	ble.n	800995a <_strtod_l+0x4d2>
 80098c6:	2400      	movs	r4, #0
 80098c8:	46a0      	mov	r8, r4
 80098ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80098cc:	46a1      	mov	r9, r4
 80098ce:	9a05      	ldr	r2, [sp, #20]
 80098d0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009a20 <_strtod_l+0x598>
 80098d4:	2322      	movs	r3, #34	@ 0x22
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	f04f 0a00 	mov.w	sl, #0
 80098dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f43f ae0b 	beq.w	80094fa <_strtod_l+0x72>
 80098e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098e6:	9805      	ldr	r0, [sp, #20]
 80098e8:	f001 fcda 	bl	800b2a0 <_Bfree>
 80098ec:	9805      	ldr	r0, [sp, #20]
 80098ee:	4649      	mov	r1, r9
 80098f0:	f001 fcd6 	bl	800b2a0 <_Bfree>
 80098f4:	9805      	ldr	r0, [sp, #20]
 80098f6:	4641      	mov	r1, r8
 80098f8:	f001 fcd2 	bl	800b2a0 <_Bfree>
 80098fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098fe:	9805      	ldr	r0, [sp, #20]
 8009900:	f001 fcce 	bl	800b2a0 <_Bfree>
 8009904:	9805      	ldr	r0, [sp, #20]
 8009906:	4621      	mov	r1, r4
 8009908:	f001 fcca 	bl	800b2a0 <_Bfree>
 800990c:	e5f5      	b.n	80094fa <_strtod_l+0x72>
 800990e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009910:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009914:	4293      	cmp	r3, r2
 8009916:	dbbc      	blt.n	8009892 <_strtod_l+0x40a>
 8009918:	4c3f      	ldr	r4, [pc, #252]	@ (8009a18 <_strtod_l+0x590>)
 800991a:	f1c5 050f 	rsb	r5, r5, #15
 800991e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009922:	4652      	mov	r2, sl
 8009924:	465b      	mov	r3, fp
 8009926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800992a:	f7f6 fe65 	bl	80005f8 <__aeabi_dmul>
 800992e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009930:	1b5d      	subs	r5, r3, r5
 8009932:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009936:	e9d4 2300 	ldrd	r2, r3, [r4]
 800993a:	e78f      	b.n	800985c <_strtod_l+0x3d4>
 800993c:	3316      	adds	r3, #22
 800993e:	dba8      	blt.n	8009892 <_strtod_l+0x40a>
 8009940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009942:	eba3 0808 	sub.w	r8, r3, r8
 8009946:	4b34      	ldr	r3, [pc, #208]	@ (8009a18 <_strtod_l+0x590>)
 8009948:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800994c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009950:	4650      	mov	r0, sl
 8009952:	4659      	mov	r1, fp
 8009954:	f7f6 ff7a 	bl	800084c <__aeabi_ddiv>
 8009958:	e782      	b.n	8009860 <_strtod_l+0x3d8>
 800995a:	2300      	movs	r3, #0
 800995c:	4f2f      	ldr	r7, [pc, #188]	@ (8009a1c <_strtod_l+0x594>)
 800995e:	1124      	asrs	r4, r4, #4
 8009960:	4650      	mov	r0, sl
 8009962:	4659      	mov	r1, fp
 8009964:	461e      	mov	r6, r3
 8009966:	2c01      	cmp	r4, #1
 8009968:	dc21      	bgt.n	80099ae <_strtod_l+0x526>
 800996a:	b10b      	cbz	r3, 8009970 <_strtod_l+0x4e8>
 800996c:	4682      	mov	sl, r0
 800996e:	468b      	mov	fp, r1
 8009970:	492a      	ldr	r1, [pc, #168]	@ (8009a1c <_strtod_l+0x594>)
 8009972:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009976:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800997a:	4652      	mov	r2, sl
 800997c:	465b      	mov	r3, fp
 800997e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009982:	f7f6 fe39 	bl	80005f8 <__aeabi_dmul>
 8009986:	4b26      	ldr	r3, [pc, #152]	@ (8009a20 <_strtod_l+0x598>)
 8009988:	460a      	mov	r2, r1
 800998a:	400b      	ands	r3, r1
 800998c:	4925      	ldr	r1, [pc, #148]	@ (8009a24 <_strtod_l+0x59c>)
 800998e:	428b      	cmp	r3, r1
 8009990:	4682      	mov	sl, r0
 8009992:	d898      	bhi.n	80098c6 <_strtod_l+0x43e>
 8009994:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009998:	428b      	cmp	r3, r1
 800999a:	bf86      	itte	hi
 800999c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009a28 <_strtod_l+0x5a0>
 80099a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80099a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80099a8:	2300      	movs	r3, #0
 80099aa:	9308      	str	r3, [sp, #32]
 80099ac:	e076      	b.n	8009a9c <_strtod_l+0x614>
 80099ae:	07e2      	lsls	r2, r4, #31
 80099b0:	d504      	bpl.n	80099bc <_strtod_l+0x534>
 80099b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099b6:	f7f6 fe1f 	bl	80005f8 <__aeabi_dmul>
 80099ba:	2301      	movs	r3, #1
 80099bc:	3601      	adds	r6, #1
 80099be:	1064      	asrs	r4, r4, #1
 80099c0:	3708      	adds	r7, #8
 80099c2:	e7d0      	b.n	8009966 <_strtod_l+0x4de>
 80099c4:	d0f0      	beq.n	80099a8 <_strtod_l+0x520>
 80099c6:	4264      	negs	r4, r4
 80099c8:	f014 020f 	ands.w	r2, r4, #15
 80099cc:	d00a      	beq.n	80099e4 <_strtod_l+0x55c>
 80099ce:	4b12      	ldr	r3, [pc, #72]	@ (8009a18 <_strtod_l+0x590>)
 80099d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099d4:	4650      	mov	r0, sl
 80099d6:	4659      	mov	r1, fp
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f7f6 ff36 	bl	800084c <__aeabi_ddiv>
 80099e0:	4682      	mov	sl, r0
 80099e2:	468b      	mov	fp, r1
 80099e4:	1124      	asrs	r4, r4, #4
 80099e6:	d0df      	beq.n	80099a8 <_strtod_l+0x520>
 80099e8:	2c1f      	cmp	r4, #31
 80099ea:	dd1f      	ble.n	8009a2c <_strtod_l+0x5a4>
 80099ec:	2400      	movs	r4, #0
 80099ee:	46a0      	mov	r8, r4
 80099f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099f2:	46a1      	mov	r9, r4
 80099f4:	9a05      	ldr	r2, [sp, #20]
 80099f6:	2322      	movs	r3, #34	@ 0x22
 80099f8:	f04f 0a00 	mov.w	sl, #0
 80099fc:	f04f 0b00 	mov.w	fp, #0
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	e76b      	b.n	80098dc <_strtod_l+0x454>
 8009a04:	0800e2e7 	.word	0x0800e2e7
 8009a08:	0800e464 	.word	0x0800e464
 8009a0c:	0800e2de 	.word	0x0800e2de
 8009a10:	0800e2e1 	.word	0x0800e2e1
 8009a14:	0800e461 	.word	0x0800e461
 8009a18:	0800e5f0 	.word	0x0800e5f0
 8009a1c:	0800e5c8 	.word	0x0800e5c8
 8009a20:	7ff00000 	.word	0x7ff00000
 8009a24:	7ca00000 	.word	0x7ca00000
 8009a28:	7fefffff 	.word	0x7fefffff
 8009a2c:	f014 0310 	ands.w	r3, r4, #16
 8009a30:	bf18      	it	ne
 8009a32:	236a      	movne	r3, #106	@ 0x6a
 8009a34:	4ea9      	ldr	r6, [pc, #676]	@ (8009cdc <_strtod_l+0x854>)
 8009a36:	9308      	str	r3, [sp, #32]
 8009a38:	4650      	mov	r0, sl
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	07e7      	lsls	r7, r4, #31
 8009a40:	d504      	bpl.n	8009a4c <_strtod_l+0x5c4>
 8009a42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a46:	f7f6 fdd7 	bl	80005f8 <__aeabi_dmul>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	1064      	asrs	r4, r4, #1
 8009a4e:	f106 0608 	add.w	r6, r6, #8
 8009a52:	d1f4      	bne.n	8009a3e <_strtod_l+0x5b6>
 8009a54:	b10b      	cbz	r3, 8009a5a <_strtod_l+0x5d2>
 8009a56:	4682      	mov	sl, r0
 8009a58:	468b      	mov	fp, r1
 8009a5a:	9b08      	ldr	r3, [sp, #32]
 8009a5c:	b1b3      	cbz	r3, 8009a8c <_strtod_l+0x604>
 8009a5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	4659      	mov	r1, fp
 8009a6a:	dd0f      	ble.n	8009a8c <_strtod_l+0x604>
 8009a6c:	2b1f      	cmp	r3, #31
 8009a6e:	dd56      	ble.n	8009b1e <_strtod_l+0x696>
 8009a70:	2b34      	cmp	r3, #52	@ 0x34
 8009a72:	bfde      	ittt	le
 8009a74:	f04f 33ff 	movle.w	r3, #4294967295
 8009a78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009a7c:	4093      	lslle	r3, r2
 8009a7e:	f04f 0a00 	mov.w	sl, #0
 8009a82:	bfcc      	ite	gt
 8009a84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009a88:	ea03 0b01 	andle.w	fp, r3, r1
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4650      	mov	r0, sl
 8009a92:	4659      	mov	r1, fp
 8009a94:	f7f7 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d1a7      	bne.n	80099ec <_strtod_l+0x564>
 8009a9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009aa2:	9805      	ldr	r0, [sp, #20]
 8009aa4:	462b      	mov	r3, r5
 8009aa6:	464a      	mov	r2, r9
 8009aa8:	f001 fc62 	bl	800b370 <__s2b>
 8009aac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f43f af09 	beq.w	80098c6 <_strtod_l+0x43e>
 8009ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab8:	2a00      	cmp	r2, #0
 8009aba:	eba3 0308 	sub.w	r3, r3, r8
 8009abe:	bfa8      	it	ge
 8009ac0:	2300      	movge	r3, #0
 8009ac2:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ac4:	2400      	movs	r4, #0
 8009ac6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009aca:	9316      	str	r3, [sp, #88]	@ 0x58
 8009acc:	46a0      	mov	r8, r4
 8009ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ad0:	9805      	ldr	r0, [sp, #20]
 8009ad2:	6859      	ldr	r1, [r3, #4]
 8009ad4:	f001 fba4 	bl	800b220 <_Balloc>
 8009ad8:	4681      	mov	r9, r0
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f43f aef7 	beq.w	80098ce <_strtod_l+0x446>
 8009ae0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ae2:	691a      	ldr	r2, [r3, #16]
 8009ae4:	3202      	adds	r2, #2
 8009ae6:	f103 010c 	add.w	r1, r3, #12
 8009aea:	0092      	lsls	r2, r2, #2
 8009aec:	300c      	adds	r0, #12
 8009aee:	f000 ffe4 	bl	800aaba <memcpy>
 8009af2:	ec4b ab10 	vmov	d0, sl, fp
 8009af6:	9805      	ldr	r0, [sp, #20]
 8009af8:	aa1c      	add	r2, sp, #112	@ 0x70
 8009afa:	a91b      	add	r1, sp, #108	@ 0x6c
 8009afc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009b00:	f001 ff6a 	bl	800b9d8 <__d2b>
 8009b04:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f43f aee1 	beq.w	80098ce <_strtod_l+0x446>
 8009b0c:	9805      	ldr	r0, [sp, #20]
 8009b0e:	2101      	movs	r1, #1
 8009b10:	f001 fcc4 	bl	800b49c <__i2b>
 8009b14:	4680      	mov	r8, r0
 8009b16:	b948      	cbnz	r0, 8009b2c <_strtod_l+0x6a4>
 8009b18:	f04f 0800 	mov.w	r8, #0
 8009b1c:	e6d7      	b.n	80098ce <_strtod_l+0x446>
 8009b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b22:	fa02 f303 	lsl.w	r3, r2, r3
 8009b26:	ea03 0a0a 	and.w	sl, r3, sl
 8009b2a:	e7af      	b.n	8009a8c <_strtod_l+0x604>
 8009b2c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009b2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009b30:	2d00      	cmp	r5, #0
 8009b32:	bfab      	itete	ge
 8009b34:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009b36:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009b38:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009b3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009b3c:	bfac      	ite	ge
 8009b3e:	18ef      	addge	r7, r5, r3
 8009b40:	1b5e      	sublt	r6, r3, r5
 8009b42:	9b08      	ldr	r3, [sp, #32]
 8009b44:	1aed      	subs	r5, r5, r3
 8009b46:	4415      	add	r5, r2
 8009b48:	4b65      	ldr	r3, [pc, #404]	@ (8009ce0 <_strtod_l+0x858>)
 8009b4a:	3d01      	subs	r5, #1
 8009b4c:	429d      	cmp	r5, r3
 8009b4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009b52:	da50      	bge.n	8009bf6 <_strtod_l+0x76e>
 8009b54:	1b5b      	subs	r3, r3, r5
 8009b56:	2b1f      	cmp	r3, #31
 8009b58:	eba2 0203 	sub.w	r2, r2, r3
 8009b5c:	f04f 0101 	mov.w	r1, #1
 8009b60:	dc3d      	bgt.n	8009bde <_strtod_l+0x756>
 8009b62:	fa01 f303 	lsl.w	r3, r1, r3
 8009b66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b6c:	18bd      	adds	r5, r7, r2
 8009b6e:	9b08      	ldr	r3, [sp, #32]
 8009b70:	42af      	cmp	r7, r5
 8009b72:	4416      	add	r6, r2
 8009b74:	441e      	add	r6, r3
 8009b76:	463b      	mov	r3, r7
 8009b78:	bfa8      	it	ge
 8009b7a:	462b      	movge	r3, r5
 8009b7c:	42b3      	cmp	r3, r6
 8009b7e:	bfa8      	it	ge
 8009b80:	4633      	movge	r3, r6
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfc2      	ittt	gt
 8009b86:	1aed      	subgt	r5, r5, r3
 8009b88:	1af6      	subgt	r6, r6, r3
 8009b8a:	1aff      	subgt	r7, r7, r3
 8009b8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dd16      	ble.n	8009bc0 <_strtod_l+0x738>
 8009b92:	4641      	mov	r1, r8
 8009b94:	9805      	ldr	r0, [sp, #20]
 8009b96:	461a      	mov	r2, r3
 8009b98:	f001 fd38 	bl	800b60c <__pow5mult>
 8009b9c:	4680      	mov	r8, r0
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d0ba      	beq.n	8009b18 <_strtod_l+0x690>
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ba6:	9805      	ldr	r0, [sp, #20]
 8009ba8:	f001 fc8e 	bl	800b4c8 <__multiply>
 8009bac:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	f43f ae8d 	beq.w	80098ce <_strtod_l+0x446>
 8009bb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bb6:	9805      	ldr	r0, [sp, #20]
 8009bb8:	f001 fb72 	bl	800b2a0 <_Bfree>
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bc0:	2d00      	cmp	r5, #0
 8009bc2:	dc1d      	bgt.n	8009c00 <_strtod_l+0x778>
 8009bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	dd23      	ble.n	8009c12 <_strtod_l+0x78a>
 8009bca:	4649      	mov	r1, r9
 8009bcc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009bce:	9805      	ldr	r0, [sp, #20]
 8009bd0:	f001 fd1c 	bl	800b60c <__pow5mult>
 8009bd4:	4681      	mov	r9, r0
 8009bd6:	b9e0      	cbnz	r0, 8009c12 <_strtod_l+0x78a>
 8009bd8:	f04f 0900 	mov.w	r9, #0
 8009bdc:	e677      	b.n	80098ce <_strtod_l+0x446>
 8009bde:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009be2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009be6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009bea:	35e2      	adds	r5, #226	@ 0xe2
 8009bec:	fa01 f305 	lsl.w	r3, r1, r5
 8009bf0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bf2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009bf4:	e7ba      	b.n	8009b6c <_strtod_l+0x6e4>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bfe:	e7b5      	b.n	8009b6c <_strtod_l+0x6e4>
 8009c00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c02:	9805      	ldr	r0, [sp, #20]
 8009c04:	462a      	mov	r2, r5
 8009c06:	f001 fd5b 	bl	800b6c0 <__lshift>
 8009c0a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d1d9      	bne.n	8009bc4 <_strtod_l+0x73c>
 8009c10:	e65d      	b.n	80098ce <_strtod_l+0x446>
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	dd07      	ble.n	8009c26 <_strtod_l+0x79e>
 8009c16:	4649      	mov	r1, r9
 8009c18:	9805      	ldr	r0, [sp, #20]
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	f001 fd50 	bl	800b6c0 <__lshift>
 8009c20:	4681      	mov	r9, r0
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d0d8      	beq.n	8009bd8 <_strtod_l+0x750>
 8009c26:	2f00      	cmp	r7, #0
 8009c28:	dd08      	ble.n	8009c3c <_strtod_l+0x7b4>
 8009c2a:	4641      	mov	r1, r8
 8009c2c:	9805      	ldr	r0, [sp, #20]
 8009c2e:	463a      	mov	r2, r7
 8009c30:	f001 fd46 	bl	800b6c0 <__lshift>
 8009c34:	4680      	mov	r8, r0
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f43f ae49 	beq.w	80098ce <_strtod_l+0x446>
 8009c3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c3e:	9805      	ldr	r0, [sp, #20]
 8009c40:	464a      	mov	r2, r9
 8009c42:	f001 fdc5 	bl	800b7d0 <__mdiff>
 8009c46:	4604      	mov	r4, r0
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	f43f ae40 	beq.w	80098ce <_strtod_l+0x446>
 8009c4e:	68c3      	ldr	r3, [r0, #12]
 8009c50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c52:	2300      	movs	r3, #0
 8009c54:	60c3      	str	r3, [r0, #12]
 8009c56:	4641      	mov	r1, r8
 8009c58:	f001 fd9e 	bl	800b798 <__mcmp>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	da45      	bge.n	8009cec <_strtod_l+0x864>
 8009c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c62:	ea53 030a 	orrs.w	r3, r3, sl
 8009c66:	d16b      	bne.n	8009d40 <_strtod_l+0x8b8>
 8009c68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d167      	bne.n	8009d40 <_strtod_l+0x8b8>
 8009c70:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c74:	0d1b      	lsrs	r3, r3, #20
 8009c76:	051b      	lsls	r3, r3, #20
 8009c78:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c7c:	d960      	bls.n	8009d40 <_strtod_l+0x8b8>
 8009c7e:	6963      	ldr	r3, [r4, #20]
 8009c80:	b913      	cbnz	r3, 8009c88 <_strtod_l+0x800>
 8009c82:	6923      	ldr	r3, [r4, #16]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	dd5b      	ble.n	8009d40 <_strtod_l+0x8b8>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	9805      	ldr	r0, [sp, #20]
 8009c8e:	f001 fd17 	bl	800b6c0 <__lshift>
 8009c92:	4641      	mov	r1, r8
 8009c94:	4604      	mov	r4, r0
 8009c96:	f001 fd7f 	bl	800b798 <__mcmp>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	dd50      	ble.n	8009d40 <_strtod_l+0x8b8>
 8009c9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ca2:	9a08      	ldr	r2, [sp, #32]
 8009ca4:	0d1b      	lsrs	r3, r3, #20
 8009ca6:	051b      	lsls	r3, r3, #20
 8009ca8:	2a00      	cmp	r2, #0
 8009caa:	d06a      	beq.n	8009d82 <_strtod_l+0x8fa>
 8009cac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009cb0:	d867      	bhi.n	8009d82 <_strtod_l+0x8fa>
 8009cb2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009cb6:	f67f ae9d 	bls.w	80099f4 <_strtod_l+0x56c>
 8009cba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce4 <_strtod_l+0x85c>)
 8009cbc:	4650      	mov	r0, sl
 8009cbe:	4659      	mov	r1, fp
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f7f6 fc99 	bl	80005f8 <__aeabi_dmul>
 8009cc6:	4b08      	ldr	r3, [pc, #32]	@ (8009ce8 <_strtod_l+0x860>)
 8009cc8:	400b      	ands	r3, r1
 8009cca:	4682      	mov	sl, r0
 8009ccc:	468b      	mov	fp, r1
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f47f ae08 	bne.w	80098e4 <_strtod_l+0x45c>
 8009cd4:	9a05      	ldr	r2, [sp, #20]
 8009cd6:	2322      	movs	r3, #34	@ 0x22
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	e603      	b.n	80098e4 <_strtod_l+0x45c>
 8009cdc:	0800e490 	.word	0x0800e490
 8009ce0:	fffffc02 	.word	0xfffffc02
 8009ce4:	39500000 	.word	0x39500000
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009cf0:	d165      	bne.n	8009dbe <_strtod_l+0x936>
 8009cf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009cf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cf8:	b35a      	cbz	r2, 8009d52 <_strtod_l+0x8ca>
 8009cfa:	4a9f      	ldr	r2, [pc, #636]	@ (8009f78 <_strtod_l+0xaf0>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d12b      	bne.n	8009d58 <_strtod_l+0x8d0>
 8009d00:	9b08      	ldr	r3, [sp, #32]
 8009d02:	4651      	mov	r1, sl
 8009d04:	b303      	cbz	r3, 8009d48 <_strtod_l+0x8c0>
 8009d06:	4b9d      	ldr	r3, [pc, #628]	@ (8009f7c <_strtod_l+0xaf4>)
 8009d08:	465a      	mov	r2, fp
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009d10:	f04f 32ff 	mov.w	r2, #4294967295
 8009d14:	d81b      	bhi.n	8009d4e <_strtod_l+0x8c6>
 8009d16:	0d1b      	lsrs	r3, r3, #20
 8009d18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d20:	4299      	cmp	r1, r3
 8009d22:	d119      	bne.n	8009d58 <_strtod_l+0x8d0>
 8009d24:	4b96      	ldr	r3, [pc, #600]	@ (8009f80 <_strtod_l+0xaf8>)
 8009d26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d102      	bne.n	8009d32 <_strtod_l+0x8aa>
 8009d2c:	3101      	adds	r1, #1
 8009d2e:	f43f adce 	beq.w	80098ce <_strtod_l+0x446>
 8009d32:	4b92      	ldr	r3, [pc, #584]	@ (8009f7c <_strtod_l+0xaf4>)
 8009d34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d36:	401a      	ands	r2, r3
 8009d38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009d3c:	f04f 0a00 	mov.w	sl, #0
 8009d40:	9b08      	ldr	r3, [sp, #32]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1b9      	bne.n	8009cba <_strtod_l+0x832>
 8009d46:	e5cd      	b.n	80098e4 <_strtod_l+0x45c>
 8009d48:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4c:	e7e8      	b.n	8009d20 <_strtod_l+0x898>
 8009d4e:	4613      	mov	r3, r2
 8009d50:	e7e6      	b.n	8009d20 <_strtod_l+0x898>
 8009d52:	ea53 030a 	orrs.w	r3, r3, sl
 8009d56:	d0a2      	beq.n	8009c9e <_strtod_l+0x816>
 8009d58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d5a:	b1db      	cbz	r3, 8009d94 <_strtod_l+0x90c>
 8009d5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d5e:	4213      	tst	r3, r2
 8009d60:	d0ee      	beq.n	8009d40 <_strtod_l+0x8b8>
 8009d62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d64:	9a08      	ldr	r2, [sp, #32]
 8009d66:	4650      	mov	r0, sl
 8009d68:	4659      	mov	r1, fp
 8009d6a:	b1bb      	cbz	r3, 8009d9c <_strtod_l+0x914>
 8009d6c:	f7ff fb6c 	bl	8009448 <sulp>
 8009d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d74:	ec53 2b10 	vmov	r2, r3, d0
 8009d78:	f7f6 fa88 	bl	800028c <__adddf3>
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	468b      	mov	fp, r1
 8009d80:	e7de      	b.n	8009d40 <_strtod_l+0x8b8>
 8009d82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009d86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d8e:	f04f 3aff 	mov.w	sl, #4294967295
 8009d92:	e7d5      	b.n	8009d40 <_strtod_l+0x8b8>
 8009d94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d96:	ea13 0f0a 	tst.w	r3, sl
 8009d9a:	e7e1      	b.n	8009d60 <_strtod_l+0x8d8>
 8009d9c:	f7ff fb54 	bl	8009448 <sulp>
 8009da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009da4:	ec53 2b10 	vmov	r2, r3, d0
 8009da8:	f7f6 fa6e 	bl	8000288 <__aeabi_dsub>
 8009dac:	2200      	movs	r2, #0
 8009dae:	2300      	movs	r3, #0
 8009db0:	4682      	mov	sl, r0
 8009db2:	468b      	mov	fp, r1
 8009db4:	f7f6 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d0c1      	beq.n	8009d40 <_strtod_l+0x8b8>
 8009dbc:	e61a      	b.n	80099f4 <_strtod_l+0x56c>
 8009dbe:	4641      	mov	r1, r8
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f001 fe61 	bl	800ba88 <__ratio>
 8009dc6:	ec57 6b10 	vmov	r6, r7, d0
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fe8c 	bl	8000af0 <__aeabi_dcmple>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d06f      	beq.n	8009ebc <_strtod_l+0xa34>
 8009ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d17a      	bne.n	8009ed8 <_strtod_l+0xa50>
 8009de2:	f1ba 0f00 	cmp.w	sl, #0
 8009de6:	d158      	bne.n	8009e9a <_strtod_l+0xa12>
 8009de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d15a      	bne.n	8009ea8 <_strtod_l+0xa20>
 8009df2:	4b64      	ldr	r3, [pc, #400]	@ (8009f84 <_strtod_l+0xafc>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	4630      	mov	r0, r6
 8009df8:	4639      	mov	r1, r7
 8009dfa:	f7f6 fe6f 	bl	8000adc <__aeabi_dcmplt>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d159      	bne.n	8009eb6 <_strtod_l+0xa2e>
 8009e02:	4630      	mov	r0, r6
 8009e04:	4639      	mov	r1, r7
 8009e06:	4b60      	ldr	r3, [pc, #384]	@ (8009f88 <_strtod_l+0xb00>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f7f6 fbf5 	bl	80005f8 <__aeabi_dmul>
 8009e0e:	4606      	mov	r6, r0
 8009e10:	460f      	mov	r7, r1
 8009e12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009e16:	9606      	str	r6, [sp, #24]
 8009e18:	9307      	str	r3, [sp, #28]
 8009e1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e1e:	4d57      	ldr	r5, [pc, #348]	@ (8009f7c <_strtod_l+0xaf4>)
 8009e20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e26:	401d      	ands	r5, r3
 8009e28:	4b58      	ldr	r3, [pc, #352]	@ (8009f8c <_strtod_l+0xb04>)
 8009e2a:	429d      	cmp	r5, r3
 8009e2c:	f040 80b2 	bne.w	8009f94 <_strtod_l+0xb0c>
 8009e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009e36:	ec4b ab10 	vmov	d0, sl, fp
 8009e3a:	f001 fd5d 	bl	800b8f8 <__ulp>
 8009e3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e42:	ec51 0b10 	vmov	r0, r1, d0
 8009e46:	f7f6 fbd7 	bl	80005f8 <__aeabi_dmul>
 8009e4a:	4652      	mov	r2, sl
 8009e4c:	465b      	mov	r3, fp
 8009e4e:	f7f6 fa1d 	bl	800028c <__adddf3>
 8009e52:	460b      	mov	r3, r1
 8009e54:	4949      	ldr	r1, [pc, #292]	@ (8009f7c <_strtod_l+0xaf4>)
 8009e56:	4a4e      	ldr	r2, [pc, #312]	@ (8009f90 <_strtod_l+0xb08>)
 8009e58:	4019      	ands	r1, r3
 8009e5a:	4291      	cmp	r1, r2
 8009e5c:	4682      	mov	sl, r0
 8009e5e:	d942      	bls.n	8009ee6 <_strtod_l+0xa5e>
 8009e60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e62:	4b47      	ldr	r3, [pc, #284]	@ (8009f80 <_strtod_l+0xaf8>)
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d103      	bne.n	8009e70 <_strtod_l+0x9e8>
 8009e68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	f43f ad2f 	beq.w	80098ce <_strtod_l+0x446>
 8009e70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009f80 <_strtod_l+0xaf8>
 8009e74:	f04f 3aff 	mov.w	sl, #4294967295
 8009e78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e7a:	9805      	ldr	r0, [sp, #20]
 8009e7c:	f001 fa10 	bl	800b2a0 <_Bfree>
 8009e80:	9805      	ldr	r0, [sp, #20]
 8009e82:	4649      	mov	r1, r9
 8009e84:	f001 fa0c 	bl	800b2a0 <_Bfree>
 8009e88:	9805      	ldr	r0, [sp, #20]
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	f001 fa08 	bl	800b2a0 <_Bfree>
 8009e90:	9805      	ldr	r0, [sp, #20]
 8009e92:	4621      	mov	r1, r4
 8009e94:	f001 fa04 	bl	800b2a0 <_Bfree>
 8009e98:	e619      	b.n	8009ace <_strtod_l+0x646>
 8009e9a:	f1ba 0f01 	cmp.w	sl, #1
 8009e9e:	d103      	bne.n	8009ea8 <_strtod_l+0xa20>
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f43f ada6 	beq.w	80099f4 <_strtod_l+0x56c>
 8009ea8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009f58 <_strtod_l+0xad0>
 8009eac:	4f35      	ldr	r7, [pc, #212]	@ (8009f84 <_strtod_l+0xafc>)
 8009eae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	e7b1      	b.n	8009e1a <_strtod_l+0x992>
 8009eb6:	4f34      	ldr	r7, [pc, #208]	@ (8009f88 <_strtod_l+0xb00>)
 8009eb8:	2600      	movs	r6, #0
 8009eba:	e7aa      	b.n	8009e12 <_strtod_l+0x98a>
 8009ebc:	4b32      	ldr	r3, [pc, #200]	@ (8009f88 <_strtod_l+0xb00>)
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f7f6 fb98 	bl	80005f8 <__aeabi_dmul>
 8009ec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460f      	mov	r7, r1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d09f      	beq.n	8009e12 <_strtod_l+0x98a>
 8009ed2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009ed6:	e7a0      	b.n	8009e1a <_strtod_l+0x992>
 8009ed8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009f60 <_strtod_l+0xad8>
 8009edc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ee0:	ec57 6b17 	vmov	r6, r7, d7
 8009ee4:	e799      	b.n	8009e1a <_strtod_l+0x992>
 8009ee6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009eea:	9b08      	ldr	r3, [sp, #32]
 8009eec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1c1      	bne.n	8009e78 <_strtod_l+0x9f0>
 8009ef4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ef8:	0d1b      	lsrs	r3, r3, #20
 8009efa:	051b      	lsls	r3, r3, #20
 8009efc:	429d      	cmp	r5, r3
 8009efe:	d1bb      	bne.n	8009e78 <_strtod_l+0x9f0>
 8009f00:	4630      	mov	r0, r6
 8009f02:	4639      	mov	r1, r7
 8009f04:	f7f6 fed8 	bl	8000cb8 <__aeabi_d2lz>
 8009f08:	f7f6 fb48 	bl	800059c <__aeabi_l2d>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4630      	mov	r0, r6
 8009f12:	4639      	mov	r1, r7
 8009f14:	f7f6 f9b8 	bl	8000288 <__aeabi_dsub>
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009f20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f26:	ea46 060a 	orr.w	r6, r6, sl
 8009f2a:	431e      	orrs	r6, r3
 8009f2c:	d06f      	beq.n	800a00e <_strtod_l+0xb86>
 8009f2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f68 <_strtod_l+0xae0>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f7f6 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	f47f acd3 	bne.w	80098e4 <_strtod_l+0x45c>
 8009f3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009f70 <_strtod_l+0xae8>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f48:	f7f6 fde6 	bl	8000b18 <__aeabi_dcmpgt>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d093      	beq.n	8009e78 <_strtod_l+0x9f0>
 8009f50:	e4c8      	b.n	80098e4 <_strtod_l+0x45c>
 8009f52:	bf00      	nop
 8009f54:	f3af 8000 	nop.w
 8009f58:	00000000 	.word	0x00000000
 8009f5c:	bff00000 	.word	0xbff00000
 8009f60:	00000000 	.word	0x00000000
 8009f64:	3ff00000 	.word	0x3ff00000
 8009f68:	94a03595 	.word	0x94a03595
 8009f6c:	3fdfffff 	.word	0x3fdfffff
 8009f70:	35afe535 	.word	0x35afe535
 8009f74:	3fe00000 	.word	0x3fe00000
 8009f78:	000fffff 	.word	0x000fffff
 8009f7c:	7ff00000 	.word	0x7ff00000
 8009f80:	7fefffff 	.word	0x7fefffff
 8009f84:	3ff00000 	.word	0x3ff00000
 8009f88:	3fe00000 	.word	0x3fe00000
 8009f8c:	7fe00000 	.word	0x7fe00000
 8009f90:	7c9fffff 	.word	0x7c9fffff
 8009f94:	9b08      	ldr	r3, [sp, #32]
 8009f96:	b323      	cbz	r3, 8009fe2 <_strtod_l+0xb5a>
 8009f98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009f9c:	d821      	bhi.n	8009fe2 <_strtod_l+0xb5a>
 8009f9e:	a328      	add	r3, pc, #160	@ (adr r3, 800a040 <_strtod_l+0xbb8>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	f7f6 fda2 	bl	8000af0 <__aeabi_dcmple>
 8009fac:	b1a0      	cbz	r0, 8009fd8 <_strtod_l+0xb50>
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7f6 fdf9 	bl	8000ba8 <__aeabi_d2uiz>
 8009fb6:	2801      	cmp	r0, #1
 8009fb8:	bf38      	it	cc
 8009fba:	2001      	movcc	r0, #1
 8009fbc:	f7f6 faa2 	bl	8000504 <__aeabi_ui2d>
 8009fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460f      	mov	r7, r1
 8009fc6:	b9fb      	cbnz	r3, 800a008 <_strtod_l+0xb80>
 8009fc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fcc:	9014      	str	r0, [sp, #80]	@ 0x50
 8009fce:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009fd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009fd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009fde:	1b5b      	subs	r3, r3, r5
 8009fe0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009fe2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009fe6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009fea:	f001 fc85 	bl	800b8f8 <__ulp>
 8009fee:	4650      	mov	r0, sl
 8009ff0:	ec53 2b10 	vmov	r2, r3, d0
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	f7f6 faff 	bl	80005f8 <__aeabi_dmul>
 8009ffa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ffe:	f7f6 f945 	bl	800028c <__adddf3>
 800a002:	4682      	mov	sl, r0
 800a004:	468b      	mov	fp, r1
 800a006:	e770      	b.n	8009eea <_strtod_l+0xa62>
 800a008:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a00c:	e7e0      	b.n	8009fd0 <_strtod_l+0xb48>
 800a00e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a048 <_strtod_l+0xbc0>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f7f6 fd62 	bl	8000adc <__aeabi_dcmplt>
 800a018:	e798      	b.n	8009f4c <_strtod_l+0xac4>
 800a01a:	2300      	movs	r3, #0
 800a01c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a01e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	f7ff ba6d 	b.w	8009502 <_strtod_l+0x7a>
 800a028:	2a65      	cmp	r2, #101	@ 0x65
 800a02a:	f43f ab68 	beq.w	80096fe <_strtod_l+0x276>
 800a02e:	2a45      	cmp	r2, #69	@ 0x45
 800a030:	f43f ab65 	beq.w	80096fe <_strtod_l+0x276>
 800a034:	2301      	movs	r3, #1
 800a036:	f7ff bba0 	b.w	800977a <_strtod_l+0x2f2>
 800a03a:	bf00      	nop
 800a03c:	f3af 8000 	nop.w
 800a040:	ffc00000 	.word	0xffc00000
 800a044:	41dfffff 	.word	0x41dfffff
 800a048:	94a03595 	.word	0x94a03595
 800a04c:	3fcfffff 	.word	0x3fcfffff

0800a050 <_strtod_r>:
 800a050:	4b01      	ldr	r3, [pc, #4]	@ (800a058 <_strtod_r+0x8>)
 800a052:	f7ff ba19 	b.w	8009488 <_strtod_l>
 800a056:	bf00      	nop
 800a058:	20000090 	.word	0x20000090

0800a05c <_strtol_l.isra.0>:
 800a05c:	2b24      	cmp	r3, #36	@ 0x24
 800a05e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a062:	4686      	mov	lr, r0
 800a064:	4690      	mov	r8, r2
 800a066:	d801      	bhi.n	800a06c <_strtol_l.isra.0+0x10>
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d106      	bne.n	800a07a <_strtol_l.isra.0+0x1e>
 800a06c:	f000 fcf8 	bl	800aa60 <__errno>
 800a070:	2316      	movs	r3, #22
 800a072:	6003      	str	r3, [r0, #0]
 800a074:	2000      	movs	r0, #0
 800a076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07a:	4834      	ldr	r0, [pc, #208]	@ (800a14c <_strtol_l.isra.0+0xf0>)
 800a07c:	460d      	mov	r5, r1
 800a07e:	462a      	mov	r2, r5
 800a080:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a084:	5d06      	ldrb	r6, [r0, r4]
 800a086:	f016 0608 	ands.w	r6, r6, #8
 800a08a:	d1f8      	bne.n	800a07e <_strtol_l.isra.0+0x22>
 800a08c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a08e:	d110      	bne.n	800a0b2 <_strtol_l.isra.0+0x56>
 800a090:	782c      	ldrb	r4, [r5, #0]
 800a092:	2601      	movs	r6, #1
 800a094:	1c95      	adds	r5, r2, #2
 800a096:	f033 0210 	bics.w	r2, r3, #16
 800a09a:	d115      	bne.n	800a0c8 <_strtol_l.isra.0+0x6c>
 800a09c:	2c30      	cmp	r4, #48	@ 0x30
 800a09e:	d10d      	bne.n	800a0bc <_strtol_l.isra.0+0x60>
 800a0a0:	782a      	ldrb	r2, [r5, #0]
 800a0a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a0a6:	2a58      	cmp	r2, #88	@ 0x58
 800a0a8:	d108      	bne.n	800a0bc <_strtol_l.isra.0+0x60>
 800a0aa:	786c      	ldrb	r4, [r5, #1]
 800a0ac:	3502      	adds	r5, #2
 800a0ae:	2310      	movs	r3, #16
 800a0b0:	e00a      	b.n	800a0c8 <_strtol_l.isra.0+0x6c>
 800a0b2:	2c2b      	cmp	r4, #43	@ 0x2b
 800a0b4:	bf04      	itt	eq
 800a0b6:	782c      	ldrbeq	r4, [r5, #0]
 800a0b8:	1c95      	addeq	r5, r2, #2
 800a0ba:	e7ec      	b.n	800a096 <_strtol_l.isra.0+0x3a>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1f6      	bne.n	800a0ae <_strtol_l.isra.0+0x52>
 800a0c0:	2c30      	cmp	r4, #48	@ 0x30
 800a0c2:	bf14      	ite	ne
 800a0c4:	230a      	movne	r3, #10
 800a0c6:	2308      	moveq	r3, #8
 800a0c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a0cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	fbbc f9f3 	udiv	r9, ip, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a0dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a0e0:	2f09      	cmp	r7, #9
 800a0e2:	d80f      	bhi.n	800a104 <_strtol_l.isra.0+0xa8>
 800a0e4:	463c      	mov	r4, r7
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	dd1b      	ble.n	800a122 <_strtol_l.isra.0+0xc6>
 800a0ea:	1c57      	adds	r7, r2, #1
 800a0ec:	d007      	beq.n	800a0fe <_strtol_l.isra.0+0xa2>
 800a0ee:	4581      	cmp	r9, r0
 800a0f0:	d314      	bcc.n	800a11c <_strtol_l.isra.0+0xc0>
 800a0f2:	d101      	bne.n	800a0f8 <_strtol_l.isra.0+0x9c>
 800a0f4:	45a2      	cmp	sl, r4
 800a0f6:	db11      	blt.n	800a11c <_strtol_l.isra.0+0xc0>
 800a0f8:	fb00 4003 	mla	r0, r0, r3, r4
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a102:	e7eb      	b.n	800a0dc <_strtol_l.isra.0+0x80>
 800a104:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a108:	2f19      	cmp	r7, #25
 800a10a:	d801      	bhi.n	800a110 <_strtol_l.isra.0+0xb4>
 800a10c:	3c37      	subs	r4, #55	@ 0x37
 800a10e:	e7ea      	b.n	800a0e6 <_strtol_l.isra.0+0x8a>
 800a110:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a114:	2f19      	cmp	r7, #25
 800a116:	d804      	bhi.n	800a122 <_strtol_l.isra.0+0xc6>
 800a118:	3c57      	subs	r4, #87	@ 0x57
 800a11a:	e7e4      	b.n	800a0e6 <_strtol_l.isra.0+0x8a>
 800a11c:	f04f 32ff 	mov.w	r2, #4294967295
 800a120:	e7ed      	b.n	800a0fe <_strtol_l.isra.0+0xa2>
 800a122:	1c53      	adds	r3, r2, #1
 800a124:	d108      	bne.n	800a138 <_strtol_l.isra.0+0xdc>
 800a126:	2322      	movs	r3, #34	@ 0x22
 800a128:	f8ce 3000 	str.w	r3, [lr]
 800a12c:	4660      	mov	r0, ip
 800a12e:	f1b8 0f00 	cmp.w	r8, #0
 800a132:	d0a0      	beq.n	800a076 <_strtol_l.isra.0+0x1a>
 800a134:	1e69      	subs	r1, r5, #1
 800a136:	e006      	b.n	800a146 <_strtol_l.isra.0+0xea>
 800a138:	b106      	cbz	r6, 800a13c <_strtol_l.isra.0+0xe0>
 800a13a:	4240      	negs	r0, r0
 800a13c:	f1b8 0f00 	cmp.w	r8, #0
 800a140:	d099      	beq.n	800a076 <_strtol_l.isra.0+0x1a>
 800a142:	2a00      	cmp	r2, #0
 800a144:	d1f6      	bne.n	800a134 <_strtol_l.isra.0+0xd8>
 800a146:	f8c8 1000 	str.w	r1, [r8]
 800a14a:	e794      	b.n	800a076 <_strtol_l.isra.0+0x1a>
 800a14c:	0800e4b9 	.word	0x0800e4b9

0800a150 <_strtol_r>:
 800a150:	f7ff bf84 	b.w	800a05c <_strtol_l.isra.0>

0800a154 <strtol>:
 800a154:	4613      	mov	r3, r2
 800a156:	460a      	mov	r2, r1
 800a158:	4601      	mov	r1, r0
 800a15a:	4802      	ldr	r0, [pc, #8]	@ (800a164 <strtol+0x10>)
 800a15c:	6800      	ldr	r0, [r0, #0]
 800a15e:	f7ff bf7d 	b.w	800a05c <_strtol_l.isra.0>
 800a162:	bf00      	nop
 800a164:	200001fc 	.word	0x200001fc

0800a168 <_scanf_float>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	b087      	sub	sp, #28
 800a16e:	4691      	mov	r9, r2
 800a170:	9303      	str	r3, [sp, #12]
 800a172:	688b      	ldr	r3, [r1, #8]
 800a174:	1e5a      	subs	r2, r3, #1
 800a176:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a17a:	bf81      	itttt	hi
 800a17c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a180:	eb03 0b05 	addhi.w	fp, r3, r5
 800a184:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a188:	608b      	strhi	r3, [r1, #8]
 800a18a:	680b      	ldr	r3, [r1, #0]
 800a18c:	460a      	mov	r2, r1
 800a18e:	f04f 0500 	mov.w	r5, #0
 800a192:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a196:	f842 3b1c 	str.w	r3, [r2], #28
 800a19a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a19e:	4680      	mov	r8, r0
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	bf98      	it	ls
 800a1a4:	f04f 0b00 	movls.w	fp, #0
 800a1a8:	9201      	str	r2, [sp, #4]
 800a1aa:	4616      	mov	r6, r2
 800a1ac:	46aa      	mov	sl, r5
 800a1ae:	462f      	mov	r7, r5
 800a1b0:	9502      	str	r5, [sp, #8]
 800a1b2:	68a2      	ldr	r2, [r4, #8]
 800a1b4:	b15a      	cbz	r2, 800a1ce <_scanf_float+0x66>
 800a1b6:	f8d9 3000 	ldr.w	r3, [r9]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b4e      	cmp	r3, #78	@ 0x4e
 800a1be:	d863      	bhi.n	800a288 <_scanf_float+0x120>
 800a1c0:	2b40      	cmp	r3, #64	@ 0x40
 800a1c2:	d83b      	bhi.n	800a23c <_scanf_float+0xd4>
 800a1c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a1c8:	b2c8      	uxtb	r0, r1
 800a1ca:	280e      	cmp	r0, #14
 800a1cc:	d939      	bls.n	800a242 <_scanf_float+0xda>
 800a1ce:	b11f      	cbz	r7, 800a1d8 <_scanf_float+0x70>
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1dc:	f1ba 0f01 	cmp.w	sl, #1
 800a1e0:	f200 8114 	bhi.w	800a40c <_scanf_float+0x2a4>
 800a1e4:	9b01      	ldr	r3, [sp, #4]
 800a1e6:	429e      	cmp	r6, r3
 800a1e8:	f200 8105 	bhi.w	800a3f6 <_scanf_float+0x28e>
 800a1ec:	2001      	movs	r0, #1
 800a1ee:	b007      	add	sp, #28
 800a1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a1f8:	2a0d      	cmp	r2, #13
 800a1fa:	d8e8      	bhi.n	800a1ce <_scanf_float+0x66>
 800a1fc:	a101      	add	r1, pc, #4	@ (adr r1, 800a204 <_scanf_float+0x9c>)
 800a1fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a34d 	.word	0x0800a34d
 800a208:	0800a1cf 	.word	0x0800a1cf
 800a20c:	0800a1cf 	.word	0x0800a1cf
 800a210:	0800a1cf 	.word	0x0800a1cf
 800a214:	0800a3a9 	.word	0x0800a3a9
 800a218:	0800a383 	.word	0x0800a383
 800a21c:	0800a1cf 	.word	0x0800a1cf
 800a220:	0800a1cf 	.word	0x0800a1cf
 800a224:	0800a35b 	.word	0x0800a35b
 800a228:	0800a1cf 	.word	0x0800a1cf
 800a22c:	0800a1cf 	.word	0x0800a1cf
 800a230:	0800a1cf 	.word	0x0800a1cf
 800a234:	0800a1cf 	.word	0x0800a1cf
 800a238:	0800a317 	.word	0x0800a317
 800a23c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a240:	e7da      	b.n	800a1f8 <_scanf_float+0x90>
 800a242:	290e      	cmp	r1, #14
 800a244:	d8c3      	bhi.n	800a1ce <_scanf_float+0x66>
 800a246:	a001      	add	r0, pc, #4	@ (adr r0, 800a24c <_scanf_float+0xe4>)
 800a248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a24c:	0800a307 	.word	0x0800a307
 800a250:	0800a1cf 	.word	0x0800a1cf
 800a254:	0800a307 	.word	0x0800a307
 800a258:	0800a397 	.word	0x0800a397
 800a25c:	0800a1cf 	.word	0x0800a1cf
 800a260:	0800a2a9 	.word	0x0800a2a9
 800a264:	0800a2ed 	.word	0x0800a2ed
 800a268:	0800a2ed 	.word	0x0800a2ed
 800a26c:	0800a2ed 	.word	0x0800a2ed
 800a270:	0800a2ed 	.word	0x0800a2ed
 800a274:	0800a2ed 	.word	0x0800a2ed
 800a278:	0800a2ed 	.word	0x0800a2ed
 800a27c:	0800a2ed 	.word	0x0800a2ed
 800a280:	0800a2ed 	.word	0x0800a2ed
 800a284:	0800a2ed 	.word	0x0800a2ed
 800a288:	2b6e      	cmp	r3, #110	@ 0x6e
 800a28a:	d809      	bhi.n	800a2a0 <_scanf_float+0x138>
 800a28c:	2b60      	cmp	r3, #96	@ 0x60
 800a28e:	d8b1      	bhi.n	800a1f4 <_scanf_float+0x8c>
 800a290:	2b54      	cmp	r3, #84	@ 0x54
 800a292:	d07b      	beq.n	800a38c <_scanf_float+0x224>
 800a294:	2b59      	cmp	r3, #89	@ 0x59
 800a296:	d19a      	bne.n	800a1ce <_scanf_float+0x66>
 800a298:	2d07      	cmp	r5, #7
 800a29a:	d198      	bne.n	800a1ce <_scanf_float+0x66>
 800a29c:	2508      	movs	r5, #8
 800a29e:	e02f      	b.n	800a300 <_scanf_float+0x198>
 800a2a0:	2b74      	cmp	r3, #116	@ 0x74
 800a2a2:	d073      	beq.n	800a38c <_scanf_float+0x224>
 800a2a4:	2b79      	cmp	r3, #121	@ 0x79
 800a2a6:	e7f6      	b.n	800a296 <_scanf_float+0x12e>
 800a2a8:	6821      	ldr	r1, [r4, #0]
 800a2aa:	05c8      	lsls	r0, r1, #23
 800a2ac:	d51e      	bpl.n	800a2ec <_scanf_float+0x184>
 800a2ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a2b2:	6021      	str	r1, [r4, #0]
 800a2b4:	3701      	adds	r7, #1
 800a2b6:	f1bb 0f00 	cmp.w	fp, #0
 800a2ba:	d003      	beq.n	800a2c4 <_scanf_float+0x15c>
 800a2bc:	3201      	adds	r2, #1
 800a2be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2c2:	60a2      	str	r2, [r4, #8]
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	60a3      	str	r3, [r4, #8]
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	6123      	str	r3, [r4, #16]
 800a2d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f8c9 3004 	str.w	r3, [r9, #4]
 800a2dc:	f340 8082 	ble.w	800a3e4 <_scanf_float+0x27c>
 800a2e0:	f8d9 3000 	ldr.w	r3, [r9]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	f8c9 3000 	str.w	r3, [r9]
 800a2ea:	e762      	b.n	800a1b2 <_scanf_float+0x4a>
 800a2ec:	eb1a 0105 	adds.w	r1, sl, r5
 800a2f0:	f47f af6d 	bne.w	800a1ce <_scanf_float+0x66>
 800a2f4:	6822      	ldr	r2, [r4, #0]
 800a2f6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a2fa:	6022      	str	r2, [r4, #0]
 800a2fc:	460d      	mov	r5, r1
 800a2fe:	468a      	mov	sl, r1
 800a300:	f806 3b01 	strb.w	r3, [r6], #1
 800a304:	e7de      	b.n	800a2c4 <_scanf_float+0x15c>
 800a306:	6822      	ldr	r2, [r4, #0]
 800a308:	0610      	lsls	r0, r2, #24
 800a30a:	f57f af60 	bpl.w	800a1ce <_scanf_float+0x66>
 800a30e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a312:	6022      	str	r2, [r4, #0]
 800a314:	e7f4      	b.n	800a300 <_scanf_float+0x198>
 800a316:	f1ba 0f00 	cmp.w	sl, #0
 800a31a:	d10c      	bne.n	800a336 <_scanf_float+0x1ce>
 800a31c:	b977      	cbnz	r7, 800a33c <_scanf_float+0x1d4>
 800a31e:	6822      	ldr	r2, [r4, #0]
 800a320:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a324:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a328:	d108      	bne.n	800a33c <_scanf_float+0x1d4>
 800a32a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a32e:	6022      	str	r2, [r4, #0]
 800a330:	f04f 0a01 	mov.w	sl, #1
 800a334:	e7e4      	b.n	800a300 <_scanf_float+0x198>
 800a336:	f1ba 0f02 	cmp.w	sl, #2
 800a33a:	d050      	beq.n	800a3de <_scanf_float+0x276>
 800a33c:	2d01      	cmp	r5, #1
 800a33e:	d002      	beq.n	800a346 <_scanf_float+0x1de>
 800a340:	2d04      	cmp	r5, #4
 800a342:	f47f af44 	bne.w	800a1ce <_scanf_float+0x66>
 800a346:	3501      	adds	r5, #1
 800a348:	b2ed      	uxtb	r5, r5
 800a34a:	e7d9      	b.n	800a300 <_scanf_float+0x198>
 800a34c:	f1ba 0f01 	cmp.w	sl, #1
 800a350:	f47f af3d 	bne.w	800a1ce <_scanf_float+0x66>
 800a354:	f04f 0a02 	mov.w	sl, #2
 800a358:	e7d2      	b.n	800a300 <_scanf_float+0x198>
 800a35a:	b975      	cbnz	r5, 800a37a <_scanf_float+0x212>
 800a35c:	2f00      	cmp	r7, #0
 800a35e:	f47f af37 	bne.w	800a1d0 <_scanf_float+0x68>
 800a362:	6822      	ldr	r2, [r4, #0]
 800a364:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a368:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a36c:	f040 8103 	bne.w	800a576 <_scanf_float+0x40e>
 800a370:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	2501      	movs	r5, #1
 800a378:	e7c2      	b.n	800a300 <_scanf_float+0x198>
 800a37a:	2d03      	cmp	r5, #3
 800a37c:	d0e3      	beq.n	800a346 <_scanf_float+0x1de>
 800a37e:	2d05      	cmp	r5, #5
 800a380:	e7df      	b.n	800a342 <_scanf_float+0x1da>
 800a382:	2d02      	cmp	r5, #2
 800a384:	f47f af23 	bne.w	800a1ce <_scanf_float+0x66>
 800a388:	2503      	movs	r5, #3
 800a38a:	e7b9      	b.n	800a300 <_scanf_float+0x198>
 800a38c:	2d06      	cmp	r5, #6
 800a38e:	f47f af1e 	bne.w	800a1ce <_scanf_float+0x66>
 800a392:	2507      	movs	r5, #7
 800a394:	e7b4      	b.n	800a300 <_scanf_float+0x198>
 800a396:	6822      	ldr	r2, [r4, #0]
 800a398:	0591      	lsls	r1, r2, #22
 800a39a:	f57f af18 	bpl.w	800a1ce <_scanf_float+0x66>
 800a39e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	9702      	str	r7, [sp, #8]
 800a3a6:	e7ab      	b.n	800a300 <_scanf_float+0x198>
 800a3a8:	6822      	ldr	r2, [r4, #0]
 800a3aa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a3ae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a3b2:	d005      	beq.n	800a3c0 <_scanf_float+0x258>
 800a3b4:	0550      	lsls	r0, r2, #21
 800a3b6:	f57f af0a 	bpl.w	800a1ce <_scanf_float+0x66>
 800a3ba:	2f00      	cmp	r7, #0
 800a3bc:	f000 80db 	beq.w	800a576 <_scanf_float+0x40e>
 800a3c0:	0591      	lsls	r1, r2, #22
 800a3c2:	bf58      	it	pl
 800a3c4:	9902      	ldrpl	r1, [sp, #8]
 800a3c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3ca:	bf58      	it	pl
 800a3cc:	1a79      	subpl	r1, r7, r1
 800a3ce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a3d2:	bf58      	it	pl
 800a3d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a3d8:	6022      	str	r2, [r4, #0]
 800a3da:	2700      	movs	r7, #0
 800a3dc:	e790      	b.n	800a300 <_scanf_float+0x198>
 800a3de:	f04f 0a03 	mov.w	sl, #3
 800a3e2:	e78d      	b.n	800a300 <_scanf_float+0x198>
 800a3e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4798      	blx	r3
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	f43f aedf 	beq.w	800a1b2 <_scanf_float+0x4a>
 800a3f4:	e6eb      	b.n	800a1ce <_scanf_float+0x66>
 800a3f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3fe:	464a      	mov	r2, r9
 800a400:	4640      	mov	r0, r8
 800a402:	4798      	blx	r3
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	3b01      	subs	r3, #1
 800a408:	6123      	str	r3, [r4, #16]
 800a40a:	e6eb      	b.n	800a1e4 <_scanf_float+0x7c>
 800a40c:	1e6b      	subs	r3, r5, #1
 800a40e:	2b06      	cmp	r3, #6
 800a410:	d824      	bhi.n	800a45c <_scanf_float+0x2f4>
 800a412:	2d02      	cmp	r5, #2
 800a414:	d836      	bhi.n	800a484 <_scanf_float+0x31c>
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	429e      	cmp	r6, r3
 800a41a:	f67f aee7 	bls.w	800a1ec <_scanf_float+0x84>
 800a41e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a422:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a426:	464a      	mov	r2, r9
 800a428:	4640      	mov	r0, r8
 800a42a:	4798      	blx	r3
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	3b01      	subs	r3, #1
 800a430:	6123      	str	r3, [r4, #16]
 800a432:	e7f0      	b.n	800a416 <_scanf_float+0x2ae>
 800a434:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a438:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a43c:	464a      	mov	r2, r9
 800a43e:	4640      	mov	r0, r8
 800a440:	4798      	blx	r3
 800a442:	6923      	ldr	r3, [r4, #16]
 800a444:	3b01      	subs	r3, #1
 800a446:	6123      	str	r3, [r4, #16]
 800a448:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a44c:	fa5f fa8a 	uxtb.w	sl, sl
 800a450:	f1ba 0f02 	cmp.w	sl, #2
 800a454:	d1ee      	bne.n	800a434 <_scanf_float+0x2cc>
 800a456:	3d03      	subs	r5, #3
 800a458:	b2ed      	uxtb	r5, r5
 800a45a:	1b76      	subs	r6, r6, r5
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	05da      	lsls	r2, r3, #23
 800a460:	d530      	bpl.n	800a4c4 <_scanf_float+0x35c>
 800a462:	055b      	lsls	r3, r3, #21
 800a464:	d511      	bpl.n	800a48a <_scanf_float+0x322>
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	429e      	cmp	r6, r3
 800a46a:	f67f aebf 	bls.w	800a1ec <_scanf_float+0x84>
 800a46e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a476:	464a      	mov	r2, r9
 800a478:	4640      	mov	r0, r8
 800a47a:	4798      	blx	r3
 800a47c:	6923      	ldr	r3, [r4, #16]
 800a47e:	3b01      	subs	r3, #1
 800a480:	6123      	str	r3, [r4, #16]
 800a482:	e7f0      	b.n	800a466 <_scanf_float+0x2fe>
 800a484:	46aa      	mov	sl, r5
 800a486:	46b3      	mov	fp, r6
 800a488:	e7de      	b.n	800a448 <_scanf_float+0x2e0>
 800a48a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a48e:	6923      	ldr	r3, [r4, #16]
 800a490:	2965      	cmp	r1, #101	@ 0x65
 800a492:	f103 33ff 	add.w	r3, r3, #4294967295
 800a496:	f106 35ff 	add.w	r5, r6, #4294967295
 800a49a:	6123      	str	r3, [r4, #16]
 800a49c:	d00c      	beq.n	800a4b8 <_scanf_float+0x350>
 800a49e:	2945      	cmp	r1, #69	@ 0x45
 800a4a0:	d00a      	beq.n	800a4b8 <_scanf_float+0x350>
 800a4a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4a6:	464a      	mov	r2, r9
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	4798      	blx	r3
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	1eb5      	subs	r5, r6, #2
 800a4b6:	6123      	str	r3, [r4, #16]
 800a4b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4bc:	464a      	mov	r2, r9
 800a4be:	4640      	mov	r0, r8
 800a4c0:	4798      	blx	r3
 800a4c2:	462e      	mov	r6, r5
 800a4c4:	6822      	ldr	r2, [r4, #0]
 800a4c6:	f012 0210 	ands.w	r2, r2, #16
 800a4ca:	d001      	beq.n	800a4d0 <_scanf_float+0x368>
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	e68e      	b.n	800a1ee <_scanf_float+0x86>
 800a4d0:	7032      	strb	r2, [r6, #0]
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a4d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4dc:	d125      	bne.n	800a52a <_scanf_float+0x3c2>
 800a4de:	9b02      	ldr	r3, [sp, #8]
 800a4e0:	429f      	cmp	r7, r3
 800a4e2:	d00a      	beq.n	800a4fa <_scanf_float+0x392>
 800a4e4:	1bda      	subs	r2, r3, r7
 800a4e6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a4ea:	429e      	cmp	r6, r3
 800a4ec:	bf28      	it	cs
 800a4ee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a4f2:	4922      	ldr	r1, [pc, #136]	@ (800a57c <_scanf_float+0x414>)
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f000 f907 	bl	800a708 <siprintf>
 800a4fa:	9901      	ldr	r1, [sp, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4640      	mov	r0, r8
 800a500:	f7ff fda6 	bl	800a050 <_strtod_r>
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	6821      	ldr	r1, [r4, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f011 0f02 	tst.w	r1, #2
 800a50e:	ec57 6b10 	vmov	r6, r7, d0
 800a512:	f103 0204 	add.w	r2, r3, #4
 800a516:	d015      	beq.n	800a544 <_scanf_float+0x3dc>
 800a518:	9903      	ldr	r1, [sp, #12]
 800a51a:	600a      	str	r2, [r1, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	e9c3 6700 	strd	r6, r7, [r3]
 800a522:	68e3      	ldr	r3, [r4, #12]
 800a524:	3301      	adds	r3, #1
 800a526:	60e3      	str	r3, [r4, #12]
 800a528:	e7d0      	b.n	800a4cc <_scanf_float+0x364>
 800a52a:	9b04      	ldr	r3, [sp, #16]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0e4      	beq.n	800a4fa <_scanf_float+0x392>
 800a530:	9905      	ldr	r1, [sp, #20]
 800a532:	230a      	movs	r3, #10
 800a534:	3101      	adds	r1, #1
 800a536:	4640      	mov	r0, r8
 800a538:	f7ff fe0a 	bl	800a150 <_strtol_r>
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	9e05      	ldr	r6, [sp, #20]
 800a540:	1ac2      	subs	r2, r0, r3
 800a542:	e7d0      	b.n	800a4e6 <_scanf_float+0x37e>
 800a544:	f011 0f04 	tst.w	r1, #4
 800a548:	9903      	ldr	r1, [sp, #12]
 800a54a:	600a      	str	r2, [r1, #0]
 800a54c:	d1e6      	bne.n	800a51c <_scanf_float+0x3b4>
 800a54e:	681d      	ldr	r5, [r3, #0]
 800a550:	4632      	mov	r2, r6
 800a552:	463b      	mov	r3, r7
 800a554:	4630      	mov	r0, r6
 800a556:	4639      	mov	r1, r7
 800a558:	f7f6 fae8 	bl	8000b2c <__aeabi_dcmpun>
 800a55c:	b128      	cbz	r0, 800a56a <_scanf_float+0x402>
 800a55e:	4808      	ldr	r0, [pc, #32]	@ (800a580 <_scanf_float+0x418>)
 800a560:	f000 fac2 	bl	800aae8 <nanf>
 800a564:	ed85 0a00 	vstr	s0, [r5]
 800a568:	e7db      	b.n	800a522 <_scanf_float+0x3ba>
 800a56a:	4630      	mov	r0, r6
 800a56c:	4639      	mov	r1, r7
 800a56e:	f7f6 fb3b 	bl	8000be8 <__aeabi_d2f>
 800a572:	6028      	str	r0, [r5, #0]
 800a574:	e7d5      	b.n	800a522 <_scanf_float+0x3ba>
 800a576:	2700      	movs	r7, #0
 800a578:	e62e      	b.n	800a1d8 <_scanf_float+0x70>
 800a57a:	bf00      	nop
 800a57c:	0800e2ea 	.word	0x0800e2ea
 800a580:	0800e461 	.word	0x0800e461

0800a584 <std>:
 800a584:	2300      	movs	r3, #0
 800a586:	b510      	push	{r4, lr}
 800a588:	4604      	mov	r4, r0
 800a58a:	e9c0 3300 	strd	r3, r3, [r0]
 800a58e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a592:	6083      	str	r3, [r0, #8]
 800a594:	8181      	strh	r1, [r0, #12]
 800a596:	6643      	str	r3, [r0, #100]	@ 0x64
 800a598:	81c2      	strh	r2, [r0, #14]
 800a59a:	6183      	str	r3, [r0, #24]
 800a59c:	4619      	mov	r1, r3
 800a59e:	2208      	movs	r2, #8
 800a5a0:	305c      	adds	r0, #92	@ 0x5c
 800a5a2:	f000 f9d9 	bl	800a958 <memset>
 800a5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5dc <std+0x58>)
 800a5a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e0 <std+0x5c>)
 800a5ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e4 <std+0x60>)
 800a5b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e8 <std+0x64>)
 800a5b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <std+0x68>)
 800a5b8:	6224      	str	r4, [r4, #32]
 800a5ba:	429c      	cmp	r4, r3
 800a5bc:	d006      	beq.n	800a5cc <std+0x48>
 800a5be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5c2:	4294      	cmp	r4, r2
 800a5c4:	d002      	beq.n	800a5cc <std+0x48>
 800a5c6:	33d0      	adds	r3, #208	@ 0xd0
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d105      	bne.n	800a5d8 <std+0x54>
 800a5cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d4:	f000 ba6e 	b.w	800aab4 <__retarget_lock_init_recursive>
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800a7a5 	.word	0x0800a7a5
 800a5e0:	0800a7cb 	.word	0x0800a7cb
 800a5e4:	0800a803 	.word	0x0800a803
 800a5e8:	0800a827 	.word	0x0800a827
 800a5ec:	20000af4 	.word	0x20000af4

0800a5f0 <stdio_exit_handler>:
 800a5f0:	4a02      	ldr	r2, [pc, #8]	@ (800a5fc <stdio_exit_handler+0xc>)
 800a5f2:	4903      	ldr	r1, [pc, #12]	@ (800a600 <stdio_exit_handler+0x10>)
 800a5f4:	4803      	ldr	r0, [pc, #12]	@ (800a604 <stdio_exit_handler+0x14>)
 800a5f6:	f000 b869 	b.w	800a6cc <_fwalk_sglue>
 800a5fa:	bf00      	nop
 800a5fc:	20000084 	.word	0x20000084
 800a600:	0800cb2d 	.word	0x0800cb2d
 800a604:	20000200 	.word	0x20000200

0800a608 <cleanup_stdio>:
 800a608:	6841      	ldr	r1, [r0, #4]
 800a60a:	4b0c      	ldr	r3, [pc, #48]	@ (800a63c <cleanup_stdio+0x34>)
 800a60c:	4299      	cmp	r1, r3
 800a60e:	b510      	push	{r4, lr}
 800a610:	4604      	mov	r4, r0
 800a612:	d001      	beq.n	800a618 <cleanup_stdio+0x10>
 800a614:	f002 fa8a 	bl	800cb2c <_fflush_r>
 800a618:	68a1      	ldr	r1, [r4, #8]
 800a61a:	4b09      	ldr	r3, [pc, #36]	@ (800a640 <cleanup_stdio+0x38>)
 800a61c:	4299      	cmp	r1, r3
 800a61e:	d002      	beq.n	800a626 <cleanup_stdio+0x1e>
 800a620:	4620      	mov	r0, r4
 800a622:	f002 fa83 	bl	800cb2c <_fflush_r>
 800a626:	68e1      	ldr	r1, [r4, #12]
 800a628:	4b06      	ldr	r3, [pc, #24]	@ (800a644 <cleanup_stdio+0x3c>)
 800a62a:	4299      	cmp	r1, r3
 800a62c:	d004      	beq.n	800a638 <cleanup_stdio+0x30>
 800a62e:	4620      	mov	r0, r4
 800a630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a634:	f002 ba7a 	b.w	800cb2c <_fflush_r>
 800a638:	bd10      	pop	{r4, pc}
 800a63a:	bf00      	nop
 800a63c:	20000af4 	.word	0x20000af4
 800a640:	20000b5c 	.word	0x20000b5c
 800a644:	20000bc4 	.word	0x20000bc4

0800a648 <global_stdio_init.part.0>:
 800a648:	b510      	push	{r4, lr}
 800a64a:	4b0b      	ldr	r3, [pc, #44]	@ (800a678 <global_stdio_init.part.0+0x30>)
 800a64c:	4c0b      	ldr	r4, [pc, #44]	@ (800a67c <global_stdio_init.part.0+0x34>)
 800a64e:	4a0c      	ldr	r2, [pc, #48]	@ (800a680 <global_stdio_init.part.0+0x38>)
 800a650:	601a      	str	r2, [r3, #0]
 800a652:	4620      	mov	r0, r4
 800a654:	2200      	movs	r2, #0
 800a656:	2104      	movs	r1, #4
 800a658:	f7ff ff94 	bl	800a584 <std>
 800a65c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a660:	2201      	movs	r2, #1
 800a662:	2109      	movs	r1, #9
 800a664:	f7ff ff8e 	bl	800a584 <std>
 800a668:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a66c:	2202      	movs	r2, #2
 800a66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a672:	2112      	movs	r1, #18
 800a674:	f7ff bf86 	b.w	800a584 <std>
 800a678:	20000c2c 	.word	0x20000c2c
 800a67c:	20000af4 	.word	0x20000af4
 800a680:	0800a5f1 	.word	0x0800a5f1

0800a684 <__sfp_lock_acquire>:
 800a684:	4801      	ldr	r0, [pc, #4]	@ (800a68c <__sfp_lock_acquire+0x8>)
 800a686:	f000 ba16 	b.w	800aab6 <__retarget_lock_acquire_recursive>
 800a68a:	bf00      	nop
 800a68c:	20000c35 	.word	0x20000c35

0800a690 <__sfp_lock_release>:
 800a690:	4801      	ldr	r0, [pc, #4]	@ (800a698 <__sfp_lock_release+0x8>)
 800a692:	f000 ba11 	b.w	800aab8 <__retarget_lock_release_recursive>
 800a696:	bf00      	nop
 800a698:	20000c35 	.word	0x20000c35

0800a69c <__sinit>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	f7ff fff0 	bl	800a684 <__sfp_lock_acquire>
 800a6a4:	6a23      	ldr	r3, [r4, #32]
 800a6a6:	b11b      	cbz	r3, 800a6b0 <__sinit+0x14>
 800a6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ac:	f7ff bff0 	b.w	800a690 <__sfp_lock_release>
 800a6b0:	4b04      	ldr	r3, [pc, #16]	@ (800a6c4 <__sinit+0x28>)
 800a6b2:	6223      	str	r3, [r4, #32]
 800a6b4:	4b04      	ldr	r3, [pc, #16]	@ (800a6c8 <__sinit+0x2c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1f5      	bne.n	800a6a8 <__sinit+0xc>
 800a6bc:	f7ff ffc4 	bl	800a648 <global_stdio_init.part.0>
 800a6c0:	e7f2      	b.n	800a6a8 <__sinit+0xc>
 800a6c2:	bf00      	nop
 800a6c4:	0800a609 	.word	0x0800a609
 800a6c8:	20000c2c 	.word	0x20000c2c

0800a6cc <_fwalk_sglue>:
 800a6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	4688      	mov	r8, r1
 800a6d4:	4614      	mov	r4, r2
 800a6d6:	2600      	movs	r6, #0
 800a6d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6dc:	f1b9 0901 	subs.w	r9, r9, #1
 800a6e0:	d505      	bpl.n	800a6ee <_fwalk_sglue+0x22>
 800a6e2:	6824      	ldr	r4, [r4, #0]
 800a6e4:	2c00      	cmp	r4, #0
 800a6e6:	d1f7      	bne.n	800a6d8 <_fwalk_sglue+0xc>
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ee:	89ab      	ldrh	r3, [r5, #12]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d907      	bls.n	800a704 <_fwalk_sglue+0x38>
 800a6f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	d003      	beq.n	800a704 <_fwalk_sglue+0x38>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4638      	mov	r0, r7
 800a700:	47c0      	blx	r8
 800a702:	4306      	orrs	r6, r0
 800a704:	3568      	adds	r5, #104	@ 0x68
 800a706:	e7e9      	b.n	800a6dc <_fwalk_sglue+0x10>

0800a708 <siprintf>:
 800a708:	b40e      	push	{r1, r2, r3}
 800a70a:	b510      	push	{r4, lr}
 800a70c:	b09d      	sub	sp, #116	@ 0x74
 800a70e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a710:	9002      	str	r0, [sp, #8]
 800a712:	9006      	str	r0, [sp, #24]
 800a714:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a718:	480a      	ldr	r0, [pc, #40]	@ (800a744 <siprintf+0x3c>)
 800a71a:	9107      	str	r1, [sp, #28]
 800a71c:	9104      	str	r1, [sp, #16]
 800a71e:	490a      	ldr	r1, [pc, #40]	@ (800a748 <siprintf+0x40>)
 800a720:	f853 2b04 	ldr.w	r2, [r3], #4
 800a724:	9105      	str	r1, [sp, #20]
 800a726:	2400      	movs	r4, #0
 800a728:	a902      	add	r1, sp, #8
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a730:	f001 fa90 	bl	800bc54 <_svfiprintf_r>
 800a734:	9b02      	ldr	r3, [sp, #8]
 800a736:	701c      	strb	r4, [r3, #0]
 800a738:	b01d      	add	sp, #116	@ 0x74
 800a73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a73e:	b003      	add	sp, #12
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	200001fc 	.word	0x200001fc
 800a748:	ffff0208 	.word	0xffff0208

0800a74c <siscanf>:
 800a74c:	b40e      	push	{r1, r2, r3}
 800a74e:	b570      	push	{r4, r5, r6, lr}
 800a750:	b09d      	sub	sp, #116	@ 0x74
 800a752:	ac21      	add	r4, sp, #132	@ 0x84
 800a754:	2500      	movs	r5, #0
 800a756:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a75a:	f854 6b04 	ldr.w	r6, [r4], #4
 800a75e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a762:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a764:	9002      	str	r0, [sp, #8]
 800a766:	9006      	str	r0, [sp, #24]
 800a768:	f7f5 fd32 	bl	80001d0 <strlen>
 800a76c:	4b0b      	ldr	r3, [pc, #44]	@ (800a79c <siscanf+0x50>)
 800a76e:	9003      	str	r0, [sp, #12]
 800a770:	9007      	str	r0, [sp, #28]
 800a772:	480b      	ldr	r0, [pc, #44]	@ (800a7a0 <siscanf+0x54>)
 800a774:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a776:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a77a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a77e:	4632      	mov	r2, r6
 800a780:	4623      	mov	r3, r4
 800a782:	a902      	add	r1, sp, #8
 800a784:	6800      	ldr	r0, [r0, #0]
 800a786:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a788:	9514      	str	r5, [sp, #80]	@ 0x50
 800a78a:	9401      	str	r4, [sp, #4]
 800a78c:	f001 fbb8 	bl	800bf00 <__ssvfiscanf_r>
 800a790:	b01d      	add	sp, #116	@ 0x74
 800a792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a796:	b003      	add	sp, #12
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	0800a7c7 	.word	0x0800a7c7
 800a7a0:	200001fc 	.word	0x200001fc

0800a7a4 <__sread>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ac:	f000 f924 	bl	800a9f8 <_read_r>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	bfab      	itete	ge
 800a7b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a7b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a7b8:	181b      	addge	r3, r3, r0
 800a7ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a7be:	bfac      	ite	ge
 800a7c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a7c2:	81a3      	strhlt	r3, [r4, #12]
 800a7c4:	bd10      	pop	{r4, pc}

0800a7c6 <__seofread>:
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	4770      	bx	lr

0800a7ca <__swrite>:
 800a7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ce:	461f      	mov	r7, r3
 800a7d0:	898b      	ldrh	r3, [r1, #12]
 800a7d2:	05db      	lsls	r3, r3, #23
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	4616      	mov	r6, r2
 800a7da:	d505      	bpl.n	800a7e8 <__swrite+0x1e>
 800a7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f000 f8f6 	bl	800a9d4 <_lseek_r>
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	4632      	mov	r2, r6
 800a7f6:	463b      	mov	r3, r7
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fe:	f000 b91d 	b.w	800aa3c <_write_r>

0800a802 <__sseek>:
 800a802:	b510      	push	{r4, lr}
 800a804:	460c      	mov	r4, r1
 800a806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a80a:	f000 f8e3 	bl	800a9d4 <_lseek_r>
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	bf15      	itete	ne
 800a814:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a81a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a81e:	81a3      	strheq	r3, [r4, #12]
 800a820:	bf18      	it	ne
 800a822:	81a3      	strhne	r3, [r4, #12]
 800a824:	bd10      	pop	{r4, pc}

0800a826 <__sclose>:
 800a826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a82a:	f000 b8c3 	b.w	800a9b4 <_close_r>

0800a82e <__swbuf_r>:
 800a82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a830:	460e      	mov	r6, r1
 800a832:	4614      	mov	r4, r2
 800a834:	4605      	mov	r5, r0
 800a836:	b118      	cbz	r0, 800a840 <__swbuf_r+0x12>
 800a838:	6a03      	ldr	r3, [r0, #32]
 800a83a:	b90b      	cbnz	r3, 800a840 <__swbuf_r+0x12>
 800a83c:	f7ff ff2e 	bl	800a69c <__sinit>
 800a840:	69a3      	ldr	r3, [r4, #24]
 800a842:	60a3      	str	r3, [r4, #8]
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	071a      	lsls	r2, r3, #28
 800a848:	d501      	bpl.n	800a84e <__swbuf_r+0x20>
 800a84a:	6923      	ldr	r3, [r4, #16]
 800a84c:	b943      	cbnz	r3, 800a860 <__swbuf_r+0x32>
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f000 f82b 	bl	800a8ac <__swsetup_r>
 800a856:	b118      	cbz	r0, 800a860 <__swbuf_r+0x32>
 800a858:	f04f 37ff 	mov.w	r7, #4294967295
 800a85c:	4638      	mov	r0, r7
 800a85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	6922      	ldr	r2, [r4, #16]
 800a864:	1a98      	subs	r0, r3, r2
 800a866:	6963      	ldr	r3, [r4, #20]
 800a868:	b2f6      	uxtb	r6, r6
 800a86a:	4283      	cmp	r3, r0
 800a86c:	4637      	mov	r7, r6
 800a86e:	dc05      	bgt.n	800a87c <__swbuf_r+0x4e>
 800a870:	4621      	mov	r1, r4
 800a872:	4628      	mov	r0, r5
 800a874:	f002 f95a 	bl	800cb2c <_fflush_r>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d1ed      	bne.n	800a858 <__swbuf_r+0x2a>
 800a87c:	68a3      	ldr	r3, [r4, #8]
 800a87e:	3b01      	subs	r3, #1
 800a880:	60a3      	str	r3, [r4, #8]
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	6022      	str	r2, [r4, #0]
 800a888:	701e      	strb	r6, [r3, #0]
 800a88a:	6962      	ldr	r2, [r4, #20]
 800a88c:	1c43      	adds	r3, r0, #1
 800a88e:	429a      	cmp	r2, r3
 800a890:	d004      	beq.n	800a89c <__swbuf_r+0x6e>
 800a892:	89a3      	ldrh	r3, [r4, #12]
 800a894:	07db      	lsls	r3, r3, #31
 800a896:	d5e1      	bpl.n	800a85c <__swbuf_r+0x2e>
 800a898:	2e0a      	cmp	r6, #10
 800a89a:	d1df      	bne.n	800a85c <__swbuf_r+0x2e>
 800a89c:	4621      	mov	r1, r4
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f002 f944 	bl	800cb2c <_fflush_r>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d0d9      	beq.n	800a85c <__swbuf_r+0x2e>
 800a8a8:	e7d6      	b.n	800a858 <__swbuf_r+0x2a>
	...

0800a8ac <__swsetup_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4b29      	ldr	r3, [pc, #164]	@ (800a954 <__swsetup_r+0xa8>)
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	6818      	ldr	r0, [r3, #0]
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	b118      	cbz	r0, 800a8c0 <__swsetup_r+0x14>
 800a8b8:	6a03      	ldr	r3, [r0, #32]
 800a8ba:	b90b      	cbnz	r3, 800a8c0 <__swsetup_r+0x14>
 800a8bc:	f7ff feee 	bl	800a69c <__sinit>
 800a8c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c4:	0719      	lsls	r1, r3, #28
 800a8c6:	d422      	bmi.n	800a90e <__swsetup_r+0x62>
 800a8c8:	06da      	lsls	r2, r3, #27
 800a8ca:	d407      	bmi.n	800a8dc <__swsetup_r+0x30>
 800a8cc:	2209      	movs	r2, #9
 800a8ce:	602a      	str	r2, [r5, #0]
 800a8d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8da:	e033      	b.n	800a944 <__swsetup_r+0x98>
 800a8dc:	0758      	lsls	r0, r3, #29
 800a8de:	d512      	bpl.n	800a906 <__swsetup_r+0x5a>
 800a8e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8e2:	b141      	cbz	r1, 800a8f6 <__swsetup_r+0x4a>
 800a8e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8e8:	4299      	cmp	r1, r3
 800a8ea:	d002      	beq.n	800a8f2 <__swsetup_r+0x46>
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f000 f901 	bl	800aaf4 <_free_r>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8fc:	81a3      	strh	r3, [r4, #12]
 800a8fe:	2300      	movs	r3, #0
 800a900:	6063      	str	r3, [r4, #4]
 800a902:	6923      	ldr	r3, [r4, #16]
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	f043 0308 	orr.w	r3, r3, #8
 800a90c:	81a3      	strh	r3, [r4, #12]
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	b94b      	cbnz	r3, 800a926 <__swsetup_r+0x7a>
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a91c:	d003      	beq.n	800a926 <__swsetup_r+0x7a>
 800a91e:	4621      	mov	r1, r4
 800a920:	4628      	mov	r0, r5
 800a922:	f002 f951 	bl	800cbc8 <__smakebuf_r>
 800a926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92a:	f013 0201 	ands.w	r2, r3, #1
 800a92e:	d00a      	beq.n	800a946 <__swsetup_r+0x9a>
 800a930:	2200      	movs	r2, #0
 800a932:	60a2      	str	r2, [r4, #8]
 800a934:	6962      	ldr	r2, [r4, #20]
 800a936:	4252      	negs	r2, r2
 800a938:	61a2      	str	r2, [r4, #24]
 800a93a:	6922      	ldr	r2, [r4, #16]
 800a93c:	b942      	cbnz	r2, 800a950 <__swsetup_r+0xa4>
 800a93e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a942:	d1c5      	bne.n	800a8d0 <__swsetup_r+0x24>
 800a944:	bd38      	pop	{r3, r4, r5, pc}
 800a946:	0799      	lsls	r1, r3, #30
 800a948:	bf58      	it	pl
 800a94a:	6962      	ldrpl	r2, [r4, #20]
 800a94c:	60a2      	str	r2, [r4, #8]
 800a94e:	e7f4      	b.n	800a93a <__swsetup_r+0x8e>
 800a950:	2000      	movs	r0, #0
 800a952:	e7f7      	b.n	800a944 <__swsetup_r+0x98>
 800a954:	200001fc 	.word	0x200001fc

0800a958 <memset>:
 800a958:	4402      	add	r2, r0
 800a95a:	4603      	mov	r3, r0
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d100      	bne.n	800a962 <memset+0xa>
 800a960:	4770      	bx	lr
 800a962:	f803 1b01 	strb.w	r1, [r3], #1
 800a966:	e7f9      	b.n	800a95c <memset+0x4>

0800a968 <strncmp>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	b16a      	cbz	r2, 800a988 <strncmp+0x20>
 800a96c:	3901      	subs	r1, #1
 800a96e:	1884      	adds	r4, r0, r2
 800a970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a974:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a978:	429a      	cmp	r2, r3
 800a97a:	d103      	bne.n	800a984 <strncmp+0x1c>
 800a97c:	42a0      	cmp	r0, r4
 800a97e:	d001      	beq.n	800a984 <strncmp+0x1c>
 800a980:	2a00      	cmp	r2, #0
 800a982:	d1f5      	bne.n	800a970 <strncmp+0x8>
 800a984:	1ad0      	subs	r0, r2, r3
 800a986:	bd10      	pop	{r4, pc}
 800a988:	4610      	mov	r0, r2
 800a98a:	e7fc      	b.n	800a986 <strncmp+0x1e>

0800a98c <strncpy>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	3901      	subs	r1, #1
 800a990:	4603      	mov	r3, r0
 800a992:	b132      	cbz	r2, 800a9a2 <strncpy+0x16>
 800a994:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a998:	f803 4b01 	strb.w	r4, [r3], #1
 800a99c:	3a01      	subs	r2, #1
 800a99e:	2c00      	cmp	r4, #0
 800a9a0:	d1f7      	bne.n	800a992 <strncpy+0x6>
 800a9a2:	441a      	add	r2, r3
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d100      	bne.n	800a9ac <strncpy+0x20>
 800a9aa:	bd10      	pop	{r4, pc}
 800a9ac:	f803 1b01 	strb.w	r1, [r3], #1
 800a9b0:	e7f9      	b.n	800a9a6 <strncpy+0x1a>
	...

0800a9b4 <_close_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4d06      	ldr	r5, [pc, #24]	@ (800a9d0 <_close_r+0x1c>)
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	4608      	mov	r0, r1
 800a9be:	602b      	str	r3, [r5, #0]
 800a9c0:	f7fa fa1c 	bl	8004dfc <_close>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d102      	bne.n	800a9ce <_close_r+0x1a>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	b103      	cbz	r3, 800a9ce <_close_r+0x1a>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	20000c30 	.word	0x20000c30

0800a9d4 <_lseek_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d07      	ldr	r5, [pc, #28]	@ (800a9f4 <_lseek_r+0x20>)
 800a9d8:	4604      	mov	r4, r0
 800a9da:	4608      	mov	r0, r1
 800a9dc:	4611      	mov	r1, r2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	602a      	str	r2, [r5, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f7fa fa31 	bl	8004e4a <_lseek>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d102      	bne.n	800a9f2 <_lseek_r+0x1e>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	b103      	cbz	r3, 800a9f2 <_lseek_r+0x1e>
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	20000c30 	.word	0x20000c30

0800a9f8 <_read_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d07      	ldr	r5, [pc, #28]	@ (800aa18 <_read_r+0x20>)
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f7fa f9bf 	bl	8004d8a <_read>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_read_r+0x1e>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_read_r+0x1e>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	20000c30 	.word	0x20000c30

0800aa1c <_sbrk_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d06      	ldr	r5, [pc, #24]	@ (800aa38 <_sbrk_r+0x1c>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	602b      	str	r3, [r5, #0]
 800aa28:	f7fa fa1c 	bl	8004e64 <_sbrk>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_sbrk_r+0x1a>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_sbrk_r+0x1a>
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	20000c30 	.word	0x20000c30

0800aa3c <_write_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	@ (800aa5c <_write_r+0x20>)
 800aa40:	4604      	mov	r4, r0
 800aa42:	4608      	mov	r0, r1
 800aa44:	4611      	mov	r1, r2
 800aa46:	2200      	movs	r2, #0
 800aa48:	602a      	str	r2, [r5, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f7fa f9ba 	bl	8004dc4 <_write>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_write_r+0x1e>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_write_r+0x1e>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	20000c30 	.word	0x20000c30

0800aa60 <__errno>:
 800aa60:	4b01      	ldr	r3, [pc, #4]	@ (800aa68 <__errno+0x8>)
 800aa62:	6818      	ldr	r0, [r3, #0]
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	200001fc 	.word	0x200001fc

0800aa6c <__libc_init_array>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	4d0d      	ldr	r5, [pc, #52]	@ (800aaa4 <__libc_init_array+0x38>)
 800aa70:	4c0d      	ldr	r4, [pc, #52]	@ (800aaa8 <__libc_init_array+0x3c>)
 800aa72:	1b64      	subs	r4, r4, r5
 800aa74:	10a4      	asrs	r4, r4, #2
 800aa76:	2600      	movs	r6, #0
 800aa78:	42a6      	cmp	r6, r4
 800aa7a:	d109      	bne.n	800aa90 <__libc_init_array+0x24>
 800aa7c:	4d0b      	ldr	r5, [pc, #44]	@ (800aaac <__libc_init_array+0x40>)
 800aa7e:	4c0c      	ldr	r4, [pc, #48]	@ (800aab0 <__libc_init_array+0x44>)
 800aa80:	f003 fb06 	bl	800e090 <_init>
 800aa84:	1b64      	subs	r4, r4, r5
 800aa86:	10a4      	asrs	r4, r4, #2
 800aa88:	2600      	movs	r6, #0
 800aa8a:	42a6      	cmp	r6, r4
 800aa8c:	d105      	bne.n	800aa9a <__libc_init_array+0x2e>
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa94:	4798      	blx	r3
 800aa96:	3601      	adds	r6, #1
 800aa98:	e7ee      	b.n	800aa78 <__libc_init_array+0xc>
 800aa9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa9e:	4798      	blx	r3
 800aaa0:	3601      	adds	r6, #1
 800aaa2:	e7f2      	b.n	800aa8a <__libc_init_array+0x1e>
 800aaa4:	0800e898 	.word	0x0800e898
 800aaa8:	0800e898 	.word	0x0800e898
 800aaac:	0800e898 	.word	0x0800e898
 800aab0:	0800e89c 	.word	0x0800e89c

0800aab4 <__retarget_lock_init_recursive>:
 800aab4:	4770      	bx	lr

0800aab6 <__retarget_lock_acquire_recursive>:
 800aab6:	4770      	bx	lr

0800aab8 <__retarget_lock_release_recursive>:
 800aab8:	4770      	bx	lr

0800aaba <memcpy>:
 800aaba:	440a      	add	r2, r1
 800aabc:	4291      	cmp	r1, r2
 800aabe:	f100 33ff 	add.w	r3, r0, #4294967295
 800aac2:	d100      	bne.n	800aac6 <memcpy+0xc>
 800aac4:	4770      	bx	lr
 800aac6:	b510      	push	{r4, lr}
 800aac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aacc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aad0:	4291      	cmp	r1, r2
 800aad2:	d1f9      	bne.n	800aac8 <memcpy+0xe>
 800aad4:	bd10      	pop	{r4, pc}
	...

0800aad8 <nan>:
 800aad8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aae0 <nan+0x8>
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	00000000 	.word	0x00000000
 800aae4:	7ff80000 	.word	0x7ff80000

0800aae8 <nanf>:
 800aae8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aaf0 <nanf+0x8>
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	7fc00000 	.word	0x7fc00000

0800aaf4 <_free_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	2900      	cmp	r1, #0
 800aafa:	d041      	beq.n	800ab80 <_free_r+0x8c>
 800aafc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab00:	1f0c      	subs	r4, r1, #4
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bfb8      	it	lt
 800ab06:	18e4      	addlt	r4, r4, r3
 800ab08:	f7fe fc64 	bl	80093d4 <__malloc_lock>
 800ab0c:	4a1d      	ldr	r2, [pc, #116]	@ (800ab84 <_free_r+0x90>)
 800ab0e:	6813      	ldr	r3, [r2, #0]
 800ab10:	b933      	cbnz	r3, 800ab20 <_free_r+0x2c>
 800ab12:	6063      	str	r3, [r4, #4]
 800ab14:	6014      	str	r4, [r2, #0]
 800ab16:	4628      	mov	r0, r5
 800ab18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab1c:	f7fe bc60 	b.w	80093e0 <__malloc_unlock>
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	d908      	bls.n	800ab36 <_free_r+0x42>
 800ab24:	6820      	ldr	r0, [r4, #0]
 800ab26:	1821      	adds	r1, r4, r0
 800ab28:	428b      	cmp	r3, r1
 800ab2a:	bf01      	itttt	eq
 800ab2c:	6819      	ldreq	r1, [r3, #0]
 800ab2e:	685b      	ldreq	r3, [r3, #4]
 800ab30:	1809      	addeq	r1, r1, r0
 800ab32:	6021      	streq	r1, [r4, #0]
 800ab34:	e7ed      	b.n	800ab12 <_free_r+0x1e>
 800ab36:	461a      	mov	r2, r3
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	b10b      	cbz	r3, 800ab40 <_free_r+0x4c>
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	d9fa      	bls.n	800ab36 <_free_r+0x42>
 800ab40:	6811      	ldr	r1, [r2, #0]
 800ab42:	1850      	adds	r0, r2, r1
 800ab44:	42a0      	cmp	r0, r4
 800ab46:	d10b      	bne.n	800ab60 <_free_r+0x6c>
 800ab48:	6820      	ldr	r0, [r4, #0]
 800ab4a:	4401      	add	r1, r0
 800ab4c:	1850      	adds	r0, r2, r1
 800ab4e:	4283      	cmp	r3, r0
 800ab50:	6011      	str	r1, [r2, #0]
 800ab52:	d1e0      	bne.n	800ab16 <_free_r+0x22>
 800ab54:	6818      	ldr	r0, [r3, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	6053      	str	r3, [r2, #4]
 800ab5a:	4408      	add	r0, r1
 800ab5c:	6010      	str	r0, [r2, #0]
 800ab5e:	e7da      	b.n	800ab16 <_free_r+0x22>
 800ab60:	d902      	bls.n	800ab68 <_free_r+0x74>
 800ab62:	230c      	movs	r3, #12
 800ab64:	602b      	str	r3, [r5, #0]
 800ab66:	e7d6      	b.n	800ab16 <_free_r+0x22>
 800ab68:	6820      	ldr	r0, [r4, #0]
 800ab6a:	1821      	adds	r1, r4, r0
 800ab6c:	428b      	cmp	r3, r1
 800ab6e:	bf04      	itt	eq
 800ab70:	6819      	ldreq	r1, [r3, #0]
 800ab72:	685b      	ldreq	r3, [r3, #4]
 800ab74:	6063      	str	r3, [r4, #4]
 800ab76:	bf04      	itt	eq
 800ab78:	1809      	addeq	r1, r1, r0
 800ab7a:	6021      	streq	r1, [r4, #0]
 800ab7c:	6054      	str	r4, [r2, #4]
 800ab7e:	e7ca      	b.n	800ab16 <_free_r+0x22>
 800ab80:	bd38      	pop	{r3, r4, r5, pc}
 800ab82:	bf00      	nop
 800ab84:	20000af0 	.word	0x20000af0

0800ab88 <rshift>:
 800ab88:	6903      	ldr	r3, [r0, #16]
 800ab8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab96:	f100 0414 	add.w	r4, r0, #20
 800ab9a:	dd45      	ble.n	800ac28 <rshift+0xa0>
 800ab9c:	f011 011f 	ands.w	r1, r1, #31
 800aba0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aba4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aba8:	d10c      	bne.n	800abc4 <rshift+0x3c>
 800abaa:	f100 0710 	add.w	r7, r0, #16
 800abae:	4629      	mov	r1, r5
 800abb0:	42b1      	cmp	r1, r6
 800abb2:	d334      	bcc.n	800ac1e <rshift+0x96>
 800abb4:	1a9b      	subs	r3, r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	1eea      	subs	r2, r5, #3
 800abba:	4296      	cmp	r6, r2
 800abbc:	bf38      	it	cc
 800abbe:	2300      	movcc	r3, #0
 800abc0:	4423      	add	r3, r4
 800abc2:	e015      	b.n	800abf0 <rshift+0x68>
 800abc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abc8:	f1c1 0820 	rsb	r8, r1, #32
 800abcc:	40cf      	lsrs	r7, r1
 800abce:	f105 0e04 	add.w	lr, r5, #4
 800abd2:	46a1      	mov	r9, r4
 800abd4:	4576      	cmp	r6, lr
 800abd6:	46f4      	mov	ip, lr
 800abd8:	d815      	bhi.n	800ac06 <rshift+0x7e>
 800abda:	1a9a      	subs	r2, r3, r2
 800abdc:	0092      	lsls	r2, r2, #2
 800abde:	3a04      	subs	r2, #4
 800abe0:	3501      	adds	r5, #1
 800abe2:	42ae      	cmp	r6, r5
 800abe4:	bf38      	it	cc
 800abe6:	2200      	movcc	r2, #0
 800abe8:	18a3      	adds	r3, r4, r2
 800abea:	50a7      	str	r7, [r4, r2]
 800abec:	b107      	cbz	r7, 800abf0 <rshift+0x68>
 800abee:	3304      	adds	r3, #4
 800abf0:	1b1a      	subs	r2, r3, r4
 800abf2:	42a3      	cmp	r3, r4
 800abf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abf8:	bf08      	it	eq
 800abfa:	2300      	moveq	r3, #0
 800abfc:	6102      	str	r2, [r0, #16]
 800abfe:	bf08      	it	eq
 800ac00:	6143      	streq	r3, [r0, #20]
 800ac02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac06:	f8dc c000 	ldr.w	ip, [ip]
 800ac0a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac0e:	ea4c 0707 	orr.w	r7, ip, r7
 800ac12:	f849 7b04 	str.w	r7, [r9], #4
 800ac16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac1a:	40cf      	lsrs	r7, r1
 800ac1c:	e7da      	b.n	800abd4 <rshift+0x4c>
 800ac1e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac22:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac26:	e7c3      	b.n	800abb0 <rshift+0x28>
 800ac28:	4623      	mov	r3, r4
 800ac2a:	e7e1      	b.n	800abf0 <rshift+0x68>

0800ac2c <__hexdig_fun>:
 800ac2c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac30:	2b09      	cmp	r3, #9
 800ac32:	d802      	bhi.n	800ac3a <__hexdig_fun+0xe>
 800ac34:	3820      	subs	r0, #32
 800ac36:	b2c0      	uxtb	r0, r0
 800ac38:	4770      	bx	lr
 800ac3a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	d801      	bhi.n	800ac46 <__hexdig_fun+0x1a>
 800ac42:	3847      	subs	r0, #71	@ 0x47
 800ac44:	e7f7      	b.n	800ac36 <__hexdig_fun+0xa>
 800ac46:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	d801      	bhi.n	800ac52 <__hexdig_fun+0x26>
 800ac4e:	3827      	subs	r0, #39	@ 0x27
 800ac50:	e7f1      	b.n	800ac36 <__hexdig_fun+0xa>
 800ac52:	2000      	movs	r0, #0
 800ac54:	4770      	bx	lr
	...

0800ac58 <__gethex>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	468a      	mov	sl, r1
 800ac60:	9302      	str	r3, [sp, #8]
 800ac62:	680b      	ldr	r3, [r1, #0]
 800ac64:	9001      	str	r0, [sp, #4]
 800ac66:	4690      	mov	r8, r2
 800ac68:	1c9c      	adds	r4, r3, #2
 800ac6a:	46a1      	mov	r9, r4
 800ac6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac70:	2830      	cmp	r0, #48	@ 0x30
 800ac72:	d0fa      	beq.n	800ac6a <__gethex+0x12>
 800ac74:	eba9 0303 	sub.w	r3, r9, r3
 800ac78:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac7c:	f7ff ffd6 	bl	800ac2c <__hexdig_fun>
 800ac80:	4605      	mov	r5, r0
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d168      	bne.n	800ad58 <__gethex+0x100>
 800ac86:	49a0      	ldr	r1, [pc, #640]	@ (800af08 <__gethex+0x2b0>)
 800ac88:	2201      	movs	r2, #1
 800ac8a:	4648      	mov	r0, r9
 800ac8c:	f7ff fe6c 	bl	800a968 <strncmp>
 800ac90:	4607      	mov	r7, r0
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d167      	bne.n	800ad66 <__gethex+0x10e>
 800ac96:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac9a:	4626      	mov	r6, r4
 800ac9c:	f7ff ffc6 	bl	800ac2c <__hexdig_fun>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d062      	beq.n	800ad6a <__gethex+0x112>
 800aca4:	4623      	mov	r3, r4
 800aca6:	7818      	ldrb	r0, [r3, #0]
 800aca8:	2830      	cmp	r0, #48	@ 0x30
 800acaa:	4699      	mov	r9, r3
 800acac:	f103 0301 	add.w	r3, r3, #1
 800acb0:	d0f9      	beq.n	800aca6 <__gethex+0x4e>
 800acb2:	f7ff ffbb 	bl	800ac2c <__hexdig_fun>
 800acb6:	fab0 f580 	clz	r5, r0
 800acba:	096d      	lsrs	r5, r5, #5
 800acbc:	f04f 0b01 	mov.w	fp, #1
 800acc0:	464a      	mov	r2, r9
 800acc2:	4616      	mov	r6, r2
 800acc4:	3201      	adds	r2, #1
 800acc6:	7830      	ldrb	r0, [r6, #0]
 800acc8:	f7ff ffb0 	bl	800ac2c <__hexdig_fun>
 800accc:	2800      	cmp	r0, #0
 800acce:	d1f8      	bne.n	800acc2 <__gethex+0x6a>
 800acd0:	498d      	ldr	r1, [pc, #564]	@ (800af08 <__gethex+0x2b0>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7ff fe47 	bl	800a968 <strncmp>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d13f      	bne.n	800ad5e <__gethex+0x106>
 800acde:	b944      	cbnz	r4, 800acf2 <__gethex+0x9a>
 800ace0:	1c74      	adds	r4, r6, #1
 800ace2:	4622      	mov	r2, r4
 800ace4:	4616      	mov	r6, r2
 800ace6:	3201      	adds	r2, #1
 800ace8:	7830      	ldrb	r0, [r6, #0]
 800acea:	f7ff ff9f 	bl	800ac2c <__hexdig_fun>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d1f8      	bne.n	800ace4 <__gethex+0x8c>
 800acf2:	1ba4      	subs	r4, r4, r6
 800acf4:	00a7      	lsls	r7, r4, #2
 800acf6:	7833      	ldrb	r3, [r6, #0]
 800acf8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acfc:	2b50      	cmp	r3, #80	@ 0x50
 800acfe:	d13e      	bne.n	800ad7e <__gethex+0x126>
 800ad00:	7873      	ldrb	r3, [r6, #1]
 800ad02:	2b2b      	cmp	r3, #43	@ 0x2b
 800ad04:	d033      	beq.n	800ad6e <__gethex+0x116>
 800ad06:	2b2d      	cmp	r3, #45	@ 0x2d
 800ad08:	d034      	beq.n	800ad74 <__gethex+0x11c>
 800ad0a:	1c71      	adds	r1, r6, #1
 800ad0c:	2400      	movs	r4, #0
 800ad0e:	7808      	ldrb	r0, [r1, #0]
 800ad10:	f7ff ff8c 	bl	800ac2c <__hexdig_fun>
 800ad14:	1e43      	subs	r3, r0, #1
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	2b18      	cmp	r3, #24
 800ad1a:	d830      	bhi.n	800ad7e <__gethex+0x126>
 800ad1c:	f1a0 0210 	sub.w	r2, r0, #16
 800ad20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad24:	f7ff ff82 	bl	800ac2c <__hexdig_fun>
 800ad28:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad2c:	fa5f fc8c 	uxtb.w	ip, ip
 800ad30:	f1bc 0f18 	cmp.w	ip, #24
 800ad34:	f04f 030a 	mov.w	r3, #10
 800ad38:	d91e      	bls.n	800ad78 <__gethex+0x120>
 800ad3a:	b104      	cbz	r4, 800ad3e <__gethex+0xe6>
 800ad3c:	4252      	negs	r2, r2
 800ad3e:	4417      	add	r7, r2
 800ad40:	f8ca 1000 	str.w	r1, [sl]
 800ad44:	b1ed      	cbz	r5, 800ad82 <__gethex+0x12a>
 800ad46:	f1bb 0f00 	cmp.w	fp, #0
 800ad4a:	bf0c      	ite	eq
 800ad4c:	2506      	moveq	r5, #6
 800ad4e:	2500      	movne	r5, #0
 800ad50:	4628      	mov	r0, r5
 800ad52:	b005      	add	sp, #20
 800ad54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad58:	2500      	movs	r5, #0
 800ad5a:	462c      	mov	r4, r5
 800ad5c:	e7b0      	b.n	800acc0 <__gethex+0x68>
 800ad5e:	2c00      	cmp	r4, #0
 800ad60:	d1c7      	bne.n	800acf2 <__gethex+0x9a>
 800ad62:	4627      	mov	r7, r4
 800ad64:	e7c7      	b.n	800acf6 <__gethex+0x9e>
 800ad66:	464e      	mov	r6, r9
 800ad68:	462f      	mov	r7, r5
 800ad6a:	2501      	movs	r5, #1
 800ad6c:	e7c3      	b.n	800acf6 <__gethex+0x9e>
 800ad6e:	2400      	movs	r4, #0
 800ad70:	1cb1      	adds	r1, r6, #2
 800ad72:	e7cc      	b.n	800ad0e <__gethex+0xb6>
 800ad74:	2401      	movs	r4, #1
 800ad76:	e7fb      	b.n	800ad70 <__gethex+0x118>
 800ad78:	fb03 0002 	mla	r0, r3, r2, r0
 800ad7c:	e7ce      	b.n	800ad1c <__gethex+0xc4>
 800ad7e:	4631      	mov	r1, r6
 800ad80:	e7de      	b.n	800ad40 <__gethex+0xe8>
 800ad82:	eba6 0309 	sub.w	r3, r6, r9
 800ad86:	3b01      	subs	r3, #1
 800ad88:	4629      	mov	r1, r5
 800ad8a:	2b07      	cmp	r3, #7
 800ad8c:	dc0a      	bgt.n	800ada4 <__gethex+0x14c>
 800ad8e:	9801      	ldr	r0, [sp, #4]
 800ad90:	f000 fa46 	bl	800b220 <_Balloc>
 800ad94:	4604      	mov	r4, r0
 800ad96:	b940      	cbnz	r0, 800adaa <__gethex+0x152>
 800ad98:	4b5c      	ldr	r3, [pc, #368]	@ (800af0c <__gethex+0x2b4>)
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	21e4      	movs	r1, #228	@ 0xe4
 800ad9e:	485c      	ldr	r0, [pc, #368]	@ (800af10 <__gethex+0x2b8>)
 800ada0:	f001 fffe 	bl	800cda0 <__assert_func>
 800ada4:	3101      	adds	r1, #1
 800ada6:	105b      	asrs	r3, r3, #1
 800ada8:	e7ef      	b.n	800ad8a <__gethex+0x132>
 800adaa:	f100 0a14 	add.w	sl, r0, #20
 800adae:	2300      	movs	r3, #0
 800adb0:	4655      	mov	r5, sl
 800adb2:	469b      	mov	fp, r3
 800adb4:	45b1      	cmp	r9, r6
 800adb6:	d337      	bcc.n	800ae28 <__gethex+0x1d0>
 800adb8:	f845 bb04 	str.w	fp, [r5], #4
 800adbc:	eba5 050a 	sub.w	r5, r5, sl
 800adc0:	10ad      	asrs	r5, r5, #2
 800adc2:	6125      	str	r5, [r4, #16]
 800adc4:	4658      	mov	r0, fp
 800adc6:	f000 fb1d 	bl	800b404 <__hi0bits>
 800adca:	016d      	lsls	r5, r5, #5
 800adcc:	f8d8 6000 	ldr.w	r6, [r8]
 800add0:	1a2d      	subs	r5, r5, r0
 800add2:	42b5      	cmp	r5, r6
 800add4:	dd54      	ble.n	800ae80 <__gethex+0x228>
 800add6:	1bad      	subs	r5, r5, r6
 800add8:	4629      	mov	r1, r5
 800adda:	4620      	mov	r0, r4
 800addc:	f000 fea9 	bl	800bb32 <__any_on>
 800ade0:	4681      	mov	r9, r0
 800ade2:	b178      	cbz	r0, 800ae04 <__gethex+0x1ac>
 800ade4:	1e6b      	subs	r3, r5, #1
 800ade6:	1159      	asrs	r1, r3, #5
 800ade8:	f003 021f 	and.w	r2, r3, #31
 800adec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800adf0:	f04f 0901 	mov.w	r9, #1
 800adf4:	fa09 f202 	lsl.w	r2, r9, r2
 800adf8:	420a      	tst	r2, r1
 800adfa:	d003      	beq.n	800ae04 <__gethex+0x1ac>
 800adfc:	454b      	cmp	r3, r9
 800adfe:	dc36      	bgt.n	800ae6e <__gethex+0x216>
 800ae00:	f04f 0902 	mov.w	r9, #2
 800ae04:	4629      	mov	r1, r5
 800ae06:	4620      	mov	r0, r4
 800ae08:	f7ff febe 	bl	800ab88 <rshift>
 800ae0c:	442f      	add	r7, r5
 800ae0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae12:	42bb      	cmp	r3, r7
 800ae14:	da42      	bge.n	800ae9c <__gethex+0x244>
 800ae16:	9801      	ldr	r0, [sp, #4]
 800ae18:	4621      	mov	r1, r4
 800ae1a:	f000 fa41 	bl	800b2a0 <_Bfree>
 800ae1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae20:	2300      	movs	r3, #0
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	25a3      	movs	r5, #163	@ 0xa3
 800ae26:	e793      	b.n	800ad50 <__gethex+0xf8>
 800ae28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae2c:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae2e:	d012      	beq.n	800ae56 <__gethex+0x1fe>
 800ae30:	2b20      	cmp	r3, #32
 800ae32:	d104      	bne.n	800ae3e <__gethex+0x1e6>
 800ae34:	f845 bb04 	str.w	fp, [r5], #4
 800ae38:	f04f 0b00 	mov.w	fp, #0
 800ae3c:	465b      	mov	r3, fp
 800ae3e:	7830      	ldrb	r0, [r6, #0]
 800ae40:	9303      	str	r3, [sp, #12]
 800ae42:	f7ff fef3 	bl	800ac2c <__hexdig_fun>
 800ae46:	9b03      	ldr	r3, [sp, #12]
 800ae48:	f000 000f 	and.w	r0, r0, #15
 800ae4c:	4098      	lsls	r0, r3
 800ae4e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae52:	3304      	adds	r3, #4
 800ae54:	e7ae      	b.n	800adb4 <__gethex+0x15c>
 800ae56:	45b1      	cmp	r9, r6
 800ae58:	d8ea      	bhi.n	800ae30 <__gethex+0x1d8>
 800ae5a:	492b      	ldr	r1, [pc, #172]	@ (800af08 <__gethex+0x2b0>)
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff fd81 	bl	800a968 <strncmp>
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d1e1      	bne.n	800ae30 <__gethex+0x1d8>
 800ae6c:	e7a2      	b.n	800adb4 <__gethex+0x15c>
 800ae6e:	1ea9      	subs	r1, r5, #2
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 fe5e 	bl	800bb32 <__any_on>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d0c2      	beq.n	800ae00 <__gethex+0x1a8>
 800ae7a:	f04f 0903 	mov.w	r9, #3
 800ae7e:	e7c1      	b.n	800ae04 <__gethex+0x1ac>
 800ae80:	da09      	bge.n	800ae96 <__gethex+0x23e>
 800ae82:	1b75      	subs	r5, r6, r5
 800ae84:	4621      	mov	r1, r4
 800ae86:	9801      	ldr	r0, [sp, #4]
 800ae88:	462a      	mov	r2, r5
 800ae8a:	f000 fc19 	bl	800b6c0 <__lshift>
 800ae8e:	1b7f      	subs	r7, r7, r5
 800ae90:	4604      	mov	r4, r0
 800ae92:	f100 0a14 	add.w	sl, r0, #20
 800ae96:	f04f 0900 	mov.w	r9, #0
 800ae9a:	e7b8      	b.n	800ae0e <__gethex+0x1b6>
 800ae9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aea0:	42bd      	cmp	r5, r7
 800aea2:	dd6f      	ble.n	800af84 <__gethex+0x32c>
 800aea4:	1bed      	subs	r5, r5, r7
 800aea6:	42ae      	cmp	r6, r5
 800aea8:	dc34      	bgt.n	800af14 <__gethex+0x2bc>
 800aeaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d022      	beq.n	800aef8 <__gethex+0x2a0>
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d024      	beq.n	800af00 <__gethex+0x2a8>
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d115      	bne.n	800aee6 <__gethex+0x28e>
 800aeba:	42ae      	cmp	r6, r5
 800aebc:	d113      	bne.n	800aee6 <__gethex+0x28e>
 800aebe:	2e01      	cmp	r6, #1
 800aec0:	d10b      	bne.n	800aeda <__gethex+0x282>
 800aec2:	9a02      	ldr	r2, [sp, #8]
 800aec4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	2301      	movs	r3, #1
 800aecc:	6123      	str	r3, [r4, #16]
 800aece:	f8ca 3000 	str.w	r3, [sl]
 800aed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aed4:	2562      	movs	r5, #98	@ 0x62
 800aed6:	601c      	str	r4, [r3, #0]
 800aed8:	e73a      	b.n	800ad50 <__gethex+0xf8>
 800aeda:	1e71      	subs	r1, r6, #1
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 fe28 	bl	800bb32 <__any_on>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d1ed      	bne.n	800aec2 <__gethex+0x26a>
 800aee6:	9801      	ldr	r0, [sp, #4]
 800aee8:	4621      	mov	r1, r4
 800aeea:	f000 f9d9 	bl	800b2a0 <_Bfree>
 800aeee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aef0:	2300      	movs	r3, #0
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	2550      	movs	r5, #80	@ 0x50
 800aef6:	e72b      	b.n	800ad50 <__gethex+0xf8>
 800aef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1f3      	bne.n	800aee6 <__gethex+0x28e>
 800aefe:	e7e0      	b.n	800aec2 <__gethex+0x26a>
 800af00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1dd      	bne.n	800aec2 <__gethex+0x26a>
 800af06:	e7ee      	b.n	800aee6 <__gethex+0x28e>
 800af08:	0800e2dc 	.word	0x0800e2dc
 800af0c:	0800e2f7 	.word	0x0800e2f7
 800af10:	0800e308 	.word	0x0800e308
 800af14:	1e6f      	subs	r7, r5, #1
 800af16:	f1b9 0f00 	cmp.w	r9, #0
 800af1a:	d130      	bne.n	800af7e <__gethex+0x326>
 800af1c:	b127      	cbz	r7, 800af28 <__gethex+0x2d0>
 800af1e:	4639      	mov	r1, r7
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fe06 	bl	800bb32 <__any_on>
 800af26:	4681      	mov	r9, r0
 800af28:	117a      	asrs	r2, r7, #5
 800af2a:	2301      	movs	r3, #1
 800af2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af30:	f007 071f 	and.w	r7, r7, #31
 800af34:	40bb      	lsls	r3, r7
 800af36:	4213      	tst	r3, r2
 800af38:	4629      	mov	r1, r5
 800af3a:	4620      	mov	r0, r4
 800af3c:	bf18      	it	ne
 800af3e:	f049 0902 	orrne.w	r9, r9, #2
 800af42:	f7ff fe21 	bl	800ab88 <rshift>
 800af46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af4a:	1b76      	subs	r6, r6, r5
 800af4c:	2502      	movs	r5, #2
 800af4e:	f1b9 0f00 	cmp.w	r9, #0
 800af52:	d047      	beq.n	800afe4 <__gethex+0x38c>
 800af54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d015      	beq.n	800af88 <__gethex+0x330>
 800af5c:	2b03      	cmp	r3, #3
 800af5e:	d017      	beq.n	800af90 <__gethex+0x338>
 800af60:	2b01      	cmp	r3, #1
 800af62:	d109      	bne.n	800af78 <__gethex+0x320>
 800af64:	f019 0f02 	tst.w	r9, #2
 800af68:	d006      	beq.n	800af78 <__gethex+0x320>
 800af6a:	f8da 3000 	ldr.w	r3, [sl]
 800af6e:	ea49 0903 	orr.w	r9, r9, r3
 800af72:	f019 0f01 	tst.w	r9, #1
 800af76:	d10e      	bne.n	800af96 <__gethex+0x33e>
 800af78:	f045 0510 	orr.w	r5, r5, #16
 800af7c:	e032      	b.n	800afe4 <__gethex+0x38c>
 800af7e:	f04f 0901 	mov.w	r9, #1
 800af82:	e7d1      	b.n	800af28 <__gethex+0x2d0>
 800af84:	2501      	movs	r5, #1
 800af86:	e7e2      	b.n	800af4e <__gethex+0x2f6>
 800af88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af8a:	f1c3 0301 	rsb	r3, r3, #1
 800af8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0f0      	beq.n	800af78 <__gethex+0x320>
 800af96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af9a:	f104 0314 	add.w	r3, r4, #20
 800af9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800afa2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800afa6:	f04f 0c00 	mov.w	ip, #0
 800afaa:	4618      	mov	r0, r3
 800afac:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afb4:	d01b      	beq.n	800afee <__gethex+0x396>
 800afb6:	3201      	adds	r2, #1
 800afb8:	6002      	str	r2, [r0, #0]
 800afba:	2d02      	cmp	r5, #2
 800afbc:	f104 0314 	add.w	r3, r4, #20
 800afc0:	d13c      	bne.n	800b03c <__gethex+0x3e4>
 800afc2:	f8d8 2000 	ldr.w	r2, [r8]
 800afc6:	3a01      	subs	r2, #1
 800afc8:	42b2      	cmp	r2, r6
 800afca:	d109      	bne.n	800afe0 <__gethex+0x388>
 800afcc:	1171      	asrs	r1, r6, #5
 800afce:	2201      	movs	r2, #1
 800afd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afd4:	f006 061f 	and.w	r6, r6, #31
 800afd8:	fa02 f606 	lsl.w	r6, r2, r6
 800afdc:	421e      	tst	r6, r3
 800afde:	d13a      	bne.n	800b056 <__gethex+0x3fe>
 800afe0:	f045 0520 	orr.w	r5, r5, #32
 800afe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afe6:	601c      	str	r4, [r3, #0]
 800afe8:	9b02      	ldr	r3, [sp, #8]
 800afea:	601f      	str	r7, [r3, #0]
 800afec:	e6b0      	b.n	800ad50 <__gethex+0xf8>
 800afee:	4299      	cmp	r1, r3
 800aff0:	f843 cc04 	str.w	ip, [r3, #-4]
 800aff4:	d8d9      	bhi.n	800afaa <__gethex+0x352>
 800aff6:	68a3      	ldr	r3, [r4, #8]
 800aff8:	459b      	cmp	fp, r3
 800affa:	db17      	blt.n	800b02c <__gethex+0x3d4>
 800affc:	6861      	ldr	r1, [r4, #4]
 800affe:	9801      	ldr	r0, [sp, #4]
 800b000:	3101      	adds	r1, #1
 800b002:	f000 f90d 	bl	800b220 <_Balloc>
 800b006:	4681      	mov	r9, r0
 800b008:	b918      	cbnz	r0, 800b012 <__gethex+0x3ba>
 800b00a:	4b1a      	ldr	r3, [pc, #104]	@ (800b074 <__gethex+0x41c>)
 800b00c:	4602      	mov	r2, r0
 800b00e:	2184      	movs	r1, #132	@ 0x84
 800b010:	e6c5      	b.n	800ad9e <__gethex+0x146>
 800b012:	6922      	ldr	r2, [r4, #16]
 800b014:	3202      	adds	r2, #2
 800b016:	f104 010c 	add.w	r1, r4, #12
 800b01a:	0092      	lsls	r2, r2, #2
 800b01c:	300c      	adds	r0, #12
 800b01e:	f7ff fd4c 	bl	800aaba <memcpy>
 800b022:	4621      	mov	r1, r4
 800b024:	9801      	ldr	r0, [sp, #4]
 800b026:	f000 f93b 	bl	800b2a0 <_Bfree>
 800b02a:	464c      	mov	r4, r9
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b034:	6122      	str	r2, [r4, #16]
 800b036:	2201      	movs	r2, #1
 800b038:	615a      	str	r2, [r3, #20]
 800b03a:	e7be      	b.n	800afba <__gethex+0x362>
 800b03c:	6922      	ldr	r2, [r4, #16]
 800b03e:	455a      	cmp	r2, fp
 800b040:	dd0b      	ble.n	800b05a <__gethex+0x402>
 800b042:	2101      	movs	r1, #1
 800b044:	4620      	mov	r0, r4
 800b046:	f7ff fd9f 	bl	800ab88 <rshift>
 800b04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b04e:	3701      	adds	r7, #1
 800b050:	42bb      	cmp	r3, r7
 800b052:	f6ff aee0 	blt.w	800ae16 <__gethex+0x1be>
 800b056:	2501      	movs	r5, #1
 800b058:	e7c2      	b.n	800afe0 <__gethex+0x388>
 800b05a:	f016 061f 	ands.w	r6, r6, #31
 800b05e:	d0fa      	beq.n	800b056 <__gethex+0x3fe>
 800b060:	4453      	add	r3, sl
 800b062:	f1c6 0620 	rsb	r6, r6, #32
 800b066:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b06a:	f000 f9cb 	bl	800b404 <__hi0bits>
 800b06e:	42b0      	cmp	r0, r6
 800b070:	dbe7      	blt.n	800b042 <__gethex+0x3ea>
 800b072:	e7f0      	b.n	800b056 <__gethex+0x3fe>
 800b074:	0800e2f7 	.word	0x0800e2f7

0800b078 <L_shift>:
 800b078:	f1c2 0208 	rsb	r2, r2, #8
 800b07c:	0092      	lsls	r2, r2, #2
 800b07e:	b570      	push	{r4, r5, r6, lr}
 800b080:	f1c2 0620 	rsb	r6, r2, #32
 800b084:	6843      	ldr	r3, [r0, #4]
 800b086:	6804      	ldr	r4, [r0, #0]
 800b088:	fa03 f506 	lsl.w	r5, r3, r6
 800b08c:	432c      	orrs	r4, r5
 800b08e:	40d3      	lsrs	r3, r2
 800b090:	6004      	str	r4, [r0, #0]
 800b092:	f840 3f04 	str.w	r3, [r0, #4]!
 800b096:	4288      	cmp	r0, r1
 800b098:	d3f4      	bcc.n	800b084 <L_shift+0xc>
 800b09a:	bd70      	pop	{r4, r5, r6, pc}

0800b09c <__match>:
 800b09c:	b530      	push	{r4, r5, lr}
 800b09e:	6803      	ldr	r3, [r0, #0]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0a6:	b914      	cbnz	r4, 800b0ae <__match+0x12>
 800b0a8:	6003      	str	r3, [r0, #0]
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	bd30      	pop	{r4, r5, pc}
 800b0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b0b6:	2d19      	cmp	r5, #25
 800b0b8:	bf98      	it	ls
 800b0ba:	3220      	addls	r2, #32
 800b0bc:	42a2      	cmp	r2, r4
 800b0be:	d0f0      	beq.n	800b0a2 <__match+0x6>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	e7f3      	b.n	800b0ac <__match+0x10>

0800b0c4 <__hexnan>:
 800b0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c8:	680b      	ldr	r3, [r1, #0]
 800b0ca:	6801      	ldr	r1, [r0, #0]
 800b0cc:	115e      	asrs	r6, r3, #5
 800b0ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0d2:	f013 031f 	ands.w	r3, r3, #31
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	bf18      	it	ne
 800b0da:	3604      	addne	r6, #4
 800b0dc:	2500      	movs	r5, #0
 800b0de:	1f37      	subs	r7, r6, #4
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	4690      	mov	r8, r2
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0ea:	46b9      	mov	r9, r7
 800b0ec:	463c      	mov	r4, r7
 800b0ee:	9502      	str	r5, [sp, #8]
 800b0f0:	46ab      	mov	fp, r5
 800b0f2:	784a      	ldrb	r2, [r1, #1]
 800b0f4:	1c4b      	adds	r3, r1, #1
 800b0f6:	9303      	str	r3, [sp, #12]
 800b0f8:	b342      	cbz	r2, 800b14c <__hexnan+0x88>
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	9105      	str	r1, [sp, #20]
 800b0fe:	9204      	str	r2, [sp, #16]
 800b100:	f7ff fd94 	bl	800ac2c <__hexdig_fun>
 800b104:	2800      	cmp	r0, #0
 800b106:	d151      	bne.n	800b1ac <__hexnan+0xe8>
 800b108:	9a04      	ldr	r2, [sp, #16]
 800b10a:	9905      	ldr	r1, [sp, #20]
 800b10c:	2a20      	cmp	r2, #32
 800b10e:	d818      	bhi.n	800b142 <__hexnan+0x7e>
 800b110:	9b02      	ldr	r3, [sp, #8]
 800b112:	459b      	cmp	fp, r3
 800b114:	dd13      	ble.n	800b13e <__hexnan+0x7a>
 800b116:	454c      	cmp	r4, r9
 800b118:	d206      	bcs.n	800b128 <__hexnan+0x64>
 800b11a:	2d07      	cmp	r5, #7
 800b11c:	dc04      	bgt.n	800b128 <__hexnan+0x64>
 800b11e:	462a      	mov	r2, r5
 800b120:	4649      	mov	r1, r9
 800b122:	4620      	mov	r0, r4
 800b124:	f7ff ffa8 	bl	800b078 <L_shift>
 800b128:	4544      	cmp	r4, r8
 800b12a:	d952      	bls.n	800b1d2 <__hexnan+0x10e>
 800b12c:	2300      	movs	r3, #0
 800b12e:	f1a4 0904 	sub.w	r9, r4, #4
 800b132:	f844 3c04 	str.w	r3, [r4, #-4]
 800b136:	f8cd b008 	str.w	fp, [sp, #8]
 800b13a:	464c      	mov	r4, r9
 800b13c:	461d      	mov	r5, r3
 800b13e:	9903      	ldr	r1, [sp, #12]
 800b140:	e7d7      	b.n	800b0f2 <__hexnan+0x2e>
 800b142:	2a29      	cmp	r2, #41	@ 0x29
 800b144:	d157      	bne.n	800b1f6 <__hexnan+0x132>
 800b146:	3102      	adds	r1, #2
 800b148:	f8ca 1000 	str.w	r1, [sl]
 800b14c:	f1bb 0f00 	cmp.w	fp, #0
 800b150:	d051      	beq.n	800b1f6 <__hexnan+0x132>
 800b152:	454c      	cmp	r4, r9
 800b154:	d206      	bcs.n	800b164 <__hexnan+0xa0>
 800b156:	2d07      	cmp	r5, #7
 800b158:	dc04      	bgt.n	800b164 <__hexnan+0xa0>
 800b15a:	462a      	mov	r2, r5
 800b15c:	4649      	mov	r1, r9
 800b15e:	4620      	mov	r0, r4
 800b160:	f7ff ff8a 	bl	800b078 <L_shift>
 800b164:	4544      	cmp	r4, r8
 800b166:	d936      	bls.n	800b1d6 <__hexnan+0x112>
 800b168:	f1a8 0204 	sub.w	r2, r8, #4
 800b16c:	4623      	mov	r3, r4
 800b16e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b172:	f842 1f04 	str.w	r1, [r2, #4]!
 800b176:	429f      	cmp	r7, r3
 800b178:	d2f9      	bcs.n	800b16e <__hexnan+0xaa>
 800b17a:	1b3b      	subs	r3, r7, r4
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	3304      	adds	r3, #4
 800b182:	3401      	adds	r4, #1
 800b184:	3e03      	subs	r6, #3
 800b186:	42b4      	cmp	r4, r6
 800b188:	bf88      	it	hi
 800b18a:	2304      	movhi	r3, #4
 800b18c:	4443      	add	r3, r8
 800b18e:	2200      	movs	r2, #0
 800b190:	f843 2b04 	str.w	r2, [r3], #4
 800b194:	429f      	cmp	r7, r3
 800b196:	d2fb      	bcs.n	800b190 <__hexnan+0xcc>
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	b91b      	cbnz	r3, 800b1a4 <__hexnan+0xe0>
 800b19c:	4547      	cmp	r7, r8
 800b19e:	d128      	bne.n	800b1f2 <__hexnan+0x12e>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	2005      	movs	r0, #5
 800b1a6:	b007      	add	sp, #28
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	3501      	adds	r5, #1
 800b1ae:	2d08      	cmp	r5, #8
 800b1b0:	f10b 0b01 	add.w	fp, fp, #1
 800b1b4:	dd06      	ble.n	800b1c4 <__hexnan+0x100>
 800b1b6:	4544      	cmp	r4, r8
 800b1b8:	d9c1      	bls.n	800b13e <__hexnan+0x7a>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1c0:	2501      	movs	r5, #1
 800b1c2:	3c04      	subs	r4, #4
 800b1c4:	6822      	ldr	r2, [r4, #0]
 800b1c6:	f000 000f 	and.w	r0, r0, #15
 800b1ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1ce:	6020      	str	r0, [r4, #0]
 800b1d0:	e7b5      	b.n	800b13e <__hexnan+0x7a>
 800b1d2:	2508      	movs	r5, #8
 800b1d4:	e7b3      	b.n	800b13e <__hexnan+0x7a>
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d0dd      	beq.n	800b198 <__hexnan+0xd4>
 800b1dc:	f1c3 0320 	rsb	r3, r3, #32
 800b1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e4:	40da      	lsrs	r2, r3
 800b1e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1f0:	e7d2      	b.n	800b198 <__hexnan+0xd4>
 800b1f2:	3f04      	subs	r7, #4
 800b1f4:	e7d0      	b.n	800b198 <__hexnan+0xd4>
 800b1f6:	2004      	movs	r0, #4
 800b1f8:	e7d5      	b.n	800b1a6 <__hexnan+0xe2>

0800b1fa <__ascii_mbtowc>:
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	b901      	cbnz	r1, 800b200 <__ascii_mbtowc+0x6>
 800b1fe:	a901      	add	r1, sp, #4
 800b200:	b142      	cbz	r2, 800b214 <__ascii_mbtowc+0x1a>
 800b202:	b14b      	cbz	r3, 800b218 <__ascii_mbtowc+0x1e>
 800b204:	7813      	ldrb	r3, [r2, #0]
 800b206:	600b      	str	r3, [r1, #0]
 800b208:	7812      	ldrb	r2, [r2, #0]
 800b20a:	1e10      	subs	r0, r2, #0
 800b20c:	bf18      	it	ne
 800b20e:	2001      	movne	r0, #1
 800b210:	b002      	add	sp, #8
 800b212:	4770      	bx	lr
 800b214:	4610      	mov	r0, r2
 800b216:	e7fb      	b.n	800b210 <__ascii_mbtowc+0x16>
 800b218:	f06f 0001 	mvn.w	r0, #1
 800b21c:	e7f8      	b.n	800b210 <__ascii_mbtowc+0x16>
	...

0800b220 <_Balloc>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	69c6      	ldr	r6, [r0, #28]
 800b224:	4604      	mov	r4, r0
 800b226:	460d      	mov	r5, r1
 800b228:	b976      	cbnz	r6, 800b248 <_Balloc+0x28>
 800b22a:	2010      	movs	r0, #16
 800b22c:	f7fe f828 	bl	8009280 <malloc>
 800b230:	4602      	mov	r2, r0
 800b232:	61e0      	str	r0, [r4, #28]
 800b234:	b920      	cbnz	r0, 800b240 <_Balloc+0x20>
 800b236:	4b18      	ldr	r3, [pc, #96]	@ (800b298 <_Balloc+0x78>)
 800b238:	4818      	ldr	r0, [pc, #96]	@ (800b29c <_Balloc+0x7c>)
 800b23a:	216b      	movs	r1, #107	@ 0x6b
 800b23c:	f001 fdb0 	bl	800cda0 <__assert_func>
 800b240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b244:	6006      	str	r6, [r0, #0]
 800b246:	60c6      	str	r6, [r0, #12]
 800b248:	69e6      	ldr	r6, [r4, #28]
 800b24a:	68f3      	ldr	r3, [r6, #12]
 800b24c:	b183      	cbz	r3, 800b270 <_Balloc+0x50>
 800b24e:	69e3      	ldr	r3, [r4, #28]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b256:	b9b8      	cbnz	r0, 800b288 <_Balloc+0x68>
 800b258:	2101      	movs	r1, #1
 800b25a:	fa01 f605 	lsl.w	r6, r1, r5
 800b25e:	1d72      	adds	r2, r6, #5
 800b260:	0092      	lsls	r2, r2, #2
 800b262:	4620      	mov	r0, r4
 800b264:	f001 fdba 	bl	800cddc <_calloc_r>
 800b268:	b160      	cbz	r0, 800b284 <_Balloc+0x64>
 800b26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b26e:	e00e      	b.n	800b28e <_Balloc+0x6e>
 800b270:	2221      	movs	r2, #33	@ 0x21
 800b272:	2104      	movs	r1, #4
 800b274:	4620      	mov	r0, r4
 800b276:	f001 fdb1 	bl	800cddc <_calloc_r>
 800b27a:	69e3      	ldr	r3, [r4, #28]
 800b27c:	60f0      	str	r0, [r6, #12]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e4      	bne.n	800b24e <_Balloc+0x2e>
 800b284:	2000      	movs	r0, #0
 800b286:	bd70      	pop	{r4, r5, r6, pc}
 800b288:	6802      	ldr	r2, [r0, #0]
 800b28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b28e:	2300      	movs	r3, #0
 800b290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b294:	e7f7      	b.n	800b286 <_Balloc+0x66>
 800b296:	bf00      	nop
 800b298:	0800e368 	.word	0x0800e368
 800b29c:	0800e37f 	.word	0x0800e37f

0800b2a0 <_Bfree>:
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	69c6      	ldr	r6, [r0, #28]
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	b976      	cbnz	r6, 800b2c8 <_Bfree+0x28>
 800b2aa:	2010      	movs	r0, #16
 800b2ac:	f7fd ffe8 	bl	8009280 <malloc>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	61e8      	str	r0, [r5, #28]
 800b2b4:	b920      	cbnz	r0, 800b2c0 <_Bfree+0x20>
 800b2b6:	4b09      	ldr	r3, [pc, #36]	@ (800b2dc <_Bfree+0x3c>)
 800b2b8:	4809      	ldr	r0, [pc, #36]	@ (800b2e0 <_Bfree+0x40>)
 800b2ba:	218f      	movs	r1, #143	@ 0x8f
 800b2bc:	f001 fd70 	bl	800cda0 <__assert_func>
 800b2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2c4:	6006      	str	r6, [r0, #0]
 800b2c6:	60c6      	str	r6, [r0, #12]
 800b2c8:	b13c      	cbz	r4, 800b2da <_Bfree+0x3a>
 800b2ca:	69eb      	ldr	r3, [r5, #28]
 800b2cc:	6862      	ldr	r2, [r4, #4]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2d4:	6021      	str	r1, [r4, #0]
 800b2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	0800e368 	.word	0x0800e368
 800b2e0:	0800e37f 	.word	0x0800e37f

0800b2e4 <__multadd>:
 800b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e8:	690d      	ldr	r5, [r1, #16]
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	461e      	mov	r6, r3
 800b2f0:	f101 0c14 	add.w	ip, r1, #20
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2fa:	b299      	uxth	r1, r3
 800b2fc:	fb02 6101 	mla	r1, r2, r1, r6
 800b300:	0c1e      	lsrs	r6, r3, #16
 800b302:	0c0b      	lsrs	r3, r1, #16
 800b304:	fb02 3306 	mla	r3, r2, r6, r3
 800b308:	b289      	uxth	r1, r1
 800b30a:	3001      	adds	r0, #1
 800b30c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b310:	4285      	cmp	r5, r0
 800b312:	f84c 1b04 	str.w	r1, [ip], #4
 800b316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b31a:	dcec      	bgt.n	800b2f6 <__multadd+0x12>
 800b31c:	b30e      	cbz	r6, 800b362 <__multadd+0x7e>
 800b31e:	68a3      	ldr	r3, [r4, #8]
 800b320:	42ab      	cmp	r3, r5
 800b322:	dc19      	bgt.n	800b358 <__multadd+0x74>
 800b324:	6861      	ldr	r1, [r4, #4]
 800b326:	4638      	mov	r0, r7
 800b328:	3101      	adds	r1, #1
 800b32a:	f7ff ff79 	bl	800b220 <_Balloc>
 800b32e:	4680      	mov	r8, r0
 800b330:	b928      	cbnz	r0, 800b33e <__multadd+0x5a>
 800b332:	4602      	mov	r2, r0
 800b334:	4b0c      	ldr	r3, [pc, #48]	@ (800b368 <__multadd+0x84>)
 800b336:	480d      	ldr	r0, [pc, #52]	@ (800b36c <__multadd+0x88>)
 800b338:	21ba      	movs	r1, #186	@ 0xba
 800b33a:	f001 fd31 	bl	800cda0 <__assert_func>
 800b33e:	6922      	ldr	r2, [r4, #16]
 800b340:	3202      	adds	r2, #2
 800b342:	f104 010c 	add.w	r1, r4, #12
 800b346:	0092      	lsls	r2, r2, #2
 800b348:	300c      	adds	r0, #12
 800b34a:	f7ff fbb6 	bl	800aaba <memcpy>
 800b34e:	4621      	mov	r1, r4
 800b350:	4638      	mov	r0, r7
 800b352:	f7ff ffa5 	bl	800b2a0 <_Bfree>
 800b356:	4644      	mov	r4, r8
 800b358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b35c:	3501      	adds	r5, #1
 800b35e:	615e      	str	r6, [r3, #20]
 800b360:	6125      	str	r5, [r4, #16]
 800b362:	4620      	mov	r0, r4
 800b364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b368:	0800e2f7 	.word	0x0800e2f7
 800b36c:	0800e37f 	.word	0x0800e37f

0800b370 <__s2b>:
 800b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b374:	460c      	mov	r4, r1
 800b376:	4615      	mov	r5, r2
 800b378:	461f      	mov	r7, r3
 800b37a:	2209      	movs	r2, #9
 800b37c:	3308      	adds	r3, #8
 800b37e:	4606      	mov	r6, r0
 800b380:	fb93 f3f2 	sdiv	r3, r3, r2
 800b384:	2100      	movs	r1, #0
 800b386:	2201      	movs	r2, #1
 800b388:	429a      	cmp	r2, r3
 800b38a:	db09      	blt.n	800b3a0 <__s2b+0x30>
 800b38c:	4630      	mov	r0, r6
 800b38e:	f7ff ff47 	bl	800b220 <_Balloc>
 800b392:	b940      	cbnz	r0, 800b3a6 <__s2b+0x36>
 800b394:	4602      	mov	r2, r0
 800b396:	4b19      	ldr	r3, [pc, #100]	@ (800b3fc <__s2b+0x8c>)
 800b398:	4819      	ldr	r0, [pc, #100]	@ (800b400 <__s2b+0x90>)
 800b39a:	21d3      	movs	r1, #211	@ 0xd3
 800b39c:	f001 fd00 	bl	800cda0 <__assert_func>
 800b3a0:	0052      	lsls	r2, r2, #1
 800b3a2:	3101      	adds	r1, #1
 800b3a4:	e7f0      	b.n	800b388 <__s2b+0x18>
 800b3a6:	9b08      	ldr	r3, [sp, #32]
 800b3a8:	6143      	str	r3, [r0, #20]
 800b3aa:	2d09      	cmp	r5, #9
 800b3ac:	f04f 0301 	mov.w	r3, #1
 800b3b0:	6103      	str	r3, [r0, #16]
 800b3b2:	dd16      	ble.n	800b3e2 <__s2b+0x72>
 800b3b4:	f104 0909 	add.w	r9, r4, #9
 800b3b8:	46c8      	mov	r8, r9
 800b3ba:	442c      	add	r4, r5
 800b3bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b3c0:	4601      	mov	r1, r0
 800b3c2:	3b30      	subs	r3, #48	@ 0x30
 800b3c4:	220a      	movs	r2, #10
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	f7ff ff8c 	bl	800b2e4 <__multadd>
 800b3cc:	45a0      	cmp	r8, r4
 800b3ce:	d1f5      	bne.n	800b3bc <__s2b+0x4c>
 800b3d0:	f1a5 0408 	sub.w	r4, r5, #8
 800b3d4:	444c      	add	r4, r9
 800b3d6:	1b2d      	subs	r5, r5, r4
 800b3d8:	1963      	adds	r3, r4, r5
 800b3da:	42bb      	cmp	r3, r7
 800b3dc:	db04      	blt.n	800b3e8 <__s2b+0x78>
 800b3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3e2:	340a      	adds	r4, #10
 800b3e4:	2509      	movs	r5, #9
 800b3e6:	e7f6      	b.n	800b3d6 <__s2b+0x66>
 800b3e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3ec:	4601      	mov	r1, r0
 800b3ee:	3b30      	subs	r3, #48	@ 0x30
 800b3f0:	220a      	movs	r2, #10
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7ff ff76 	bl	800b2e4 <__multadd>
 800b3f8:	e7ee      	b.n	800b3d8 <__s2b+0x68>
 800b3fa:	bf00      	nop
 800b3fc:	0800e2f7 	.word	0x0800e2f7
 800b400:	0800e37f 	.word	0x0800e37f

0800b404 <__hi0bits>:
 800b404:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b408:	4603      	mov	r3, r0
 800b40a:	bf36      	itet	cc
 800b40c:	0403      	lslcc	r3, r0, #16
 800b40e:	2000      	movcs	r0, #0
 800b410:	2010      	movcc	r0, #16
 800b412:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b416:	bf3c      	itt	cc
 800b418:	021b      	lslcc	r3, r3, #8
 800b41a:	3008      	addcc	r0, #8
 800b41c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b420:	bf3c      	itt	cc
 800b422:	011b      	lslcc	r3, r3, #4
 800b424:	3004      	addcc	r0, #4
 800b426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b42a:	bf3c      	itt	cc
 800b42c:	009b      	lslcc	r3, r3, #2
 800b42e:	3002      	addcc	r0, #2
 800b430:	2b00      	cmp	r3, #0
 800b432:	db05      	blt.n	800b440 <__hi0bits+0x3c>
 800b434:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b438:	f100 0001 	add.w	r0, r0, #1
 800b43c:	bf08      	it	eq
 800b43e:	2020      	moveq	r0, #32
 800b440:	4770      	bx	lr

0800b442 <__lo0bits>:
 800b442:	6803      	ldr	r3, [r0, #0]
 800b444:	4602      	mov	r2, r0
 800b446:	f013 0007 	ands.w	r0, r3, #7
 800b44a:	d00b      	beq.n	800b464 <__lo0bits+0x22>
 800b44c:	07d9      	lsls	r1, r3, #31
 800b44e:	d421      	bmi.n	800b494 <__lo0bits+0x52>
 800b450:	0798      	lsls	r0, r3, #30
 800b452:	bf49      	itett	mi
 800b454:	085b      	lsrmi	r3, r3, #1
 800b456:	089b      	lsrpl	r3, r3, #2
 800b458:	2001      	movmi	r0, #1
 800b45a:	6013      	strmi	r3, [r2, #0]
 800b45c:	bf5c      	itt	pl
 800b45e:	6013      	strpl	r3, [r2, #0]
 800b460:	2002      	movpl	r0, #2
 800b462:	4770      	bx	lr
 800b464:	b299      	uxth	r1, r3
 800b466:	b909      	cbnz	r1, 800b46c <__lo0bits+0x2a>
 800b468:	0c1b      	lsrs	r3, r3, #16
 800b46a:	2010      	movs	r0, #16
 800b46c:	b2d9      	uxtb	r1, r3
 800b46e:	b909      	cbnz	r1, 800b474 <__lo0bits+0x32>
 800b470:	3008      	adds	r0, #8
 800b472:	0a1b      	lsrs	r3, r3, #8
 800b474:	0719      	lsls	r1, r3, #28
 800b476:	bf04      	itt	eq
 800b478:	091b      	lsreq	r3, r3, #4
 800b47a:	3004      	addeq	r0, #4
 800b47c:	0799      	lsls	r1, r3, #30
 800b47e:	bf04      	itt	eq
 800b480:	089b      	lsreq	r3, r3, #2
 800b482:	3002      	addeq	r0, #2
 800b484:	07d9      	lsls	r1, r3, #31
 800b486:	d403      	bmi.n	800b490 <__lo0bits+0x4e>
 800b488:	085b      	lsrs	r3, r3, #1
 800b48a:	f100 0001 	add.w	r0, r0, #1
 800b48e:	d003      	beq.n	800b498 <__lo0bits+0x56>
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	4770      	bx	lr
 800b494:	2000      	movs	r0, #0
 800b496:	4770      	bx	lr
 800b498:	2020      	movs	r0, #32
 800b49a:	4770      	bx	lr

0800b49c <__i2b>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	460c      	mov	r4, r1
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	f7ff febd 	bl	800b220 <_Balloc>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	b928      	cbnz	r0, 800b4b6 <__i2b+0x1a>
 800b4aa:	4b05      	ldr	r3, [pc, #20]	@ (800b4c0 <__i2b+0x24>)
 800b4ac:	4805      	ldr	r0, [pc, #20]	@ (800b4c4 <__i2b+0x28>)
 800b4ae:	f240 1145 	movw	r1, #325	@ 0x145
 800b4b2:	f001 fc75 	bl	800cda0 <__assert_func>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	6144      	str	r4, [r0, #20]
 800b4ba:	6103      	str	r3, [r0, #16]
 800b4bc:	bd10      	pop	{r4, pc}
 800b4be:	bf00      	nop
 800b4c0:	0800e2f7 	.word	0x0800e2f7
 800b4c4:	0800e37f 	.word	0x0800e37f

0800b4c8 <__multiply>:
 800b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	4617      	mov	r7, r2
 800b4ce:	690a      	ldr	r2, [r1, #16]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	bfa8      	it	ge
 800b4d6:	463b      	movge	r3, r7
 800b4d8:	4689      	mov	r9, r1
 800b4da:	bfa4      	itt	ge
 800b4dc:	460f      	movge	r7, r1
 800b4de:	4699      	movge	r9, r3
 800b4e0:	693d      	ldr	r5, [r7, #16]
 800b4e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	eb05 060a 	add.w	r6, r5, sl
 800b4ee:	42b3      	cmp	r3, r6
 800b4f0:	b085      	sub	sp, #20
 800b4f2:	bfb8      	it	lt
 800b4f4:	3101      	addlt	r1, #1
 800b4f6:	f7ff fe93 	bl	800b220 <_Balloc>
 800b4fa:	b930      	cbnz	r0, 800b50a <__multiply+0x42>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	4b41      	ldr	r3, [pc, #260]	@ (800b604 <__multiply+0x13c>)
 800b500:	4841      	ldr	r0, [pc, #260]	@ (800b608 <__multiply+0x140>)
 800b502:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b506:	f001 fc4b 	bl	800cda0 <__assert_func>
 800b50a:	f100 0414 	add.w	r4, r0, #20
 800b50e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b512:	4623      	mov	r3, r4
 800b514:	2200      	movs	r2, #0
 800b516:	4573      	cmp	r3, lr
 800b518:	d320      	bcc.n	800b55c <__multiply+0x94>
 800b51a:	f107 0814 	add.w	r8, r7, #20
 800b51e:	f109 0114 	add.w	r1, r9, #20
 800b522:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b526:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b52a:	9302      	str	r3, [sp, #8]
 800b52c:	1beb      	subs	r3, r5, r7
 800b52e:	3b15      	subs	r3, #21
 800b530:	f023 0303 	bic.w	r3, r3, #3
 800b534:	3304      	adds	r3, #4
 800b536:	3715      	adds	r7, #21
 800b538:	42bd      	cmp	r5, r7
 800b53a:	bf38      	it	cc
 800b53c:	2304      	movcc	r3, #4
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	9b02      	ldr	r3, [sp, #8]
 800b542:	9103      	str	r1, [sp, #12]
 800b544:	428b      	cmp	r3, r1
 800b546:	d80c      	bhi.n	800b562 <__multiply+0x9a>
 800b548:	2e00      	cmp	r6, #0
 800b54a:	dd03      	ble.n	800b554 <__multiply+0x8c>
 800b54c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b550:	2b00      	cmp	r3, #0
 800b552:	d055      	beq.n	800b600 <__multiply+0x138>
 800b554:	6106      	str	r6, [r0, #16]
 800b556:	b005      	add	sp, #20
 800b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55c:	f843 2b04 	str.w	r2, [r3], #4
 800b560:	e7d9      	b.n	800b516 <__multiply+0x4e>
 800b562:	f8b1 a000 	ldrh.w	sl, [r1]
 800b566:	f1ba 0f00 	cmp.w	sl, #0
 800b56a:	d01f      	beq.n	800b5ac <__multiply+0xe4>
 800b56c:	46c4      	mov	ip, r8
 800b56e:	46a1      	mov	r9, r4
 800b570:	2700      	movs	r7, #0
 800b572:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b576:	f8d9 3000 	ldr.w	r3, [r9]
 800b57a:	fa1f fb82 	uxth.w	fp, r2
 800b57e:	b29b      	uxth	r3, r3
 800b580:	fb0a 330b 	mla	r3, sl, fp, r3
 800b584:	443b      	add	r3, r7
 800b586:	f8d9 7000 	ldr.w	r7, [r9]
 800b58a:	0c12      	lsrs	r2, r2, #16
 800b58c:	0c3f      	lsrs	r7, r7, #16
 800b58e:	fb0a 7202 	mla	r2, sl, r2, r7
 800b592:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b596:	b29b      	uxth	r3, r3
 800b598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b59c:	4565      	cmp	r5, ip
 800b59e:	f849 3b04 	str.w	r3, [r9], #4
 800b5a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b5a6:	d8e4      	bhi.n	800b572 <__multiply+0xaa>
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	50e7      	str	r7, [r4, r3]
 800b5ac:	9b03      	ldr	r3, [sp, #12]
 800b5ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b5b2:	3104      	adds	r1, #4
 800b5b4:	f1b9 0f00 	cmp.w	r9, #0
 800b5b8:	d020      	beq.n	800b5fc <__multiply+0x134>
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	4647      	mov	r7, r8
 800b5be:	46a4      	mov	ip, r4
 800b5c0:	f04f 0a00 	mov.w	sl, #0
 800b5c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800b5c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b5cc:	fb09 220b 	mla	r2, r9, fp, r2
 800b5d0:	4452      	add	r2, sl
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5d8:	f84c 3b04 	str.w	r3, [ip], #4
 800b5dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800b5e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800b5e8:	fb09 330a 	mla	r3, r9, sl, r3
 800b5ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b5f0:	42bd      	cmp	r5, r7
 800b5f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5f6:	d8e5      	bhi.n	800b5c4 <__multiply+0xfc>
 800b5f8:	9a01      	ldr	r2, [sp, #4]
 800b5fa:	50a3      	str	r3, [r4, r2]
 800b5fc:	3404      	adds	r4, #4
 800b5fe:	e79f      	b.n	800b540 <__multiply+0x78>
 800b600:	3e01      	subs	r6, #1
 800b602:	e7a1      	b.n	800b548 <__multiply+0x80>
 800b604:	0800e2f7 	.word	0x0800e2f7
 800b608:	0800e37f 	.word	0x0800e37f

0800b60c <__pow5mult>:
 800b60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b610:	4615      	mov	r5, r2
 800b612:	f012 0203 	ands.w	r2, r2, #3
 800b616:	4607      	mov	r7, r0
 800b618:	460e      	mov	r6, r1
 800b61a:	d007      	beq.n	800b62c <__pow5mult+0x20>
 800b61c:	4c25      	ldr	r4, [pc, #148]	@ (800b6b4 <__pow5mult+0xa8>)
 800b61e:	3a01      	subs	r2, #1
 800b620:	2300      	movs	r3, #0
 800b622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b626:	f7ff fe5d 	bl	800b2e4 <__multadd>
 800b62a:	4606      	mov	r6, r0
 800b62c:	10ad      	asrs	r5, r5, #2
 800b62e:	d03d      	beq.n	800b6ac <__pow5mult+0xa0>
 800b630:	69fc      	ldr	r4, [r7, #28]
 800b632:	b97c      	cbnz	r4, 800b654 <__pow5mult+0x48>
 800b634:	2010      	movs	r0, #16
 800b636:	f7fd fe23 	bl	8009280 <malloc>
 800b63a:	4602      	mov	r2, r0
 800b63c:	61f8      	str	r0, [r7, #28]
 800b63e:	b928      	cbnz	r0, 800b64c <__pow5mult+0x40>
 800b640:	4b1d      	ldr	r3, [pc, #116]	@ (800b6b8 <__pow5mult+0xac>)
 800b642:	481e      	ldr	r0, [pc, #120]	@ (800b6bc <__pow5mult+0xb0>)
 800b644:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b648:	f001 fbaa 	bl	800cda0 <__assert_func>
 800b64c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b650:	6004      	str	r4, [r0, #0]
 800b652:	60c4      	str	r4, [r0, #12]
 800b654:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b65c:	b94c      	cbnz	r4, 800b672 <__pow5mult+0x66>
 800b65e:	f240 2171 	movw	r1, #625	@ 0x271
 800b662:	4638      	mov	r0, r7
 800b664:	f7ff ff1a 	bl	800b49c <__i2b>
 800b668:	2300      	movs	r3, #0
 800b66a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b66e:	4604      	mov	r4, r0
 800b670:	6003      	str	r3, [r0, #0]
 800b672:	f04f 0900 	mov.w	r9, #0
 800b676:	07eb      	lsls	r3, r5, #31
 800b678:	d50a      	bpl.n	800b690 <__pow5mult+0x84>
 800b67a:	4631      	mov	r1, r6
 800b67c:	4622      	mov	r2, r4
 800b67e:	4638      	mov	r0, r7
 800b680:	f7ff ff22 	bl	800b4c8 <__multiply>
 800b684:	4631      	mov	r1, r6
 800b686:	4680      	mov	r8, r0
 800b688:	4638      	mov	r0, r7
 800b68a:	f7ff fe09 	bl	800b2a0 <_Bfree>
 800b68e:	4646      	mov	r6, r8
 800b690:	106d      	asrs	r5, r5, #1
 800b692:	d00b      	beq.n	800b6ac <__pow5mult+0xa0>
 800b694:	6820      	ldr	r0, [r4, #0]
 800b696:	b938      	cbnz	r0, 800b6a8 <__pow5mult+0x9c>
 800b698:	4622      	mov	r2, r4
 800b69a:	4621      	mov	r1, r4
 800b69c:	4638      	mov	r0, r7
 800b69e:	f7ff ff13 	bl	800b4c8 <__multiply>
 800b6a2:	6020      	str	r0, [r4, #0]
 800b6a4:	f8c0 9000 	str.w	r9, [r0]
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	e7e4      	b.n	800b676 <__pow5mult+0x6a>
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b2:	bf00      	nop
 800b6b4:	0800e5bc 	.word	0x0800e5bc
 800b6b8:	0800e368 	.word	0x0800e368
 800b6bc:	0800e37f 	.word	0x0800e37f

0800b6c0 <__lshift>:
 800b6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	6849      	ldr	r1, [r1, #4]
 800b6c8:	6923      	ldr	r3, [r4, #16]
 800b6ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	4691      	mov	r9, r2
 800b6d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6d8:	f108 0601 	add.w	r6, r8, #1
 800b6dc:	42b3      	cmp	r3, r6
 800b6de:	db0b      	blt.n	800b6f8 <__lshift+0x38>
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	f7ff fd9d 	bl	800b220 <_Balloc>
 800b6e6:	4605      	mov	r5, r0
 800b6e8:	b948      	cbnz	r0, 800b6fe <__lshift+0x3e>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	4b28      	ldr	r3, [pc, #160]	@ (800b790 <__lshift+0xd0>)
 800b6ee:	4829      	ldr	r0, [pc, #164]	@ (800b794 <__lshift+0xd4>)
 800b6f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b6f4:	f001 fb54 	bl	800cda0 <__assert_func>
 800b6f8:	3101      	adds	r1, #1
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	e7ee      	b.n	800b6dc <__lshift+0x1c>
 800b6fe:	2300      	movs	r3, #0
 800b700:	f100 0114 	add.w	r1, r0, #20
 800b704:	f100 0210 	add.w	r2, r0, #16
 800b708:	4618      	mov	r0, r3
 800b70a:	4553      	cmp	r3, sl
 800b70c:	db33      	blt.n	800b776 <__lshift+0xb6>
 800b70e:	6920      	ldr	r0, [r4, #16]
 800b710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b714:	f104 0314 	add.w	r3, r4, #20
 800b718:	f019 091f 	ands.w	r9, r9, #31
 800b71c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b720:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b724:	d02b      	beq.n	800b77e <__lshift+0xbe>
 800b726:	f1c9 0e20 	rsb	lr, r9, #32
 800b72a:	468a      	mov	sl, r1
 800b72c:	2200      	movs	r2, #0
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	fa00 f009 	lsl.w	r0, r0, r9
 800b734:	4310      	orrs	r0, r2
 800b736:	f84a 0b04 	str.w	r0, [sl], #4
 800b73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73e:	459c      	cmp	ip, r3
 800b740:	fa22 f20e 	lsr.w	r2, r2, lr
 800b744:	d8f3      	bhi.n	800b72e <__lshift+0x6e>
 800b746:	ebac 0304 	sub.w	r3, ip, r4
 800b74a:	3b15      	subs	r3, #21
 800b74c:	f023 0303 	bic.w	r3, r3, #3
 800b750:	3304      	adds	r3, #4
 800b752:	f104 0015 	add.w	r0, r4, #21
 800b756:	4560      	cmp	r0, ip
 800b758:	bf88      	it	hi
 800b75a:	2304      	movhi	r3, #4
 800b75c:	50ca      	str	r2, [r1, r3]
 800b75e:	b10a      	cbz	r2, 800b764 <__lshift+0xa4>
 800b760:	f108 0602 	add.w	r6, r8, #2
 800b764:	3e01      	subs	r6, #1
 800b766:	4638      	mov	r0, r7
 800b768:	612e      	str	r6, [r5, #16]
 800b76a:	4621      	mov	r1, r4
 800b76c:	f7ff fd98 	bl	800b2a0 <_Bfree>
 800b770:	4628      	mov	r0, r5
 800b772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b776:	f842 0f04 	str.w	r0, [r2, #4]!
 800b77a:	3301      	adds	r3, #1
 800b77c:	e7c5      	b.n	800b70a <__lshift+0x4a>
 800b77e:	3904      	subs	r1, #4
 800b780:	f853 2b04 	ldr.w	r2, [r3], #4
 800b784:	f841 2f04 	str.w	r2, [r1, #4]!
 800b788:	459c      	cmp	ip, r3
 800b78a:	d8f9      	bhi.n	800b780 <__lshift+0xc0>
 800b78c:	e7ea      	b.n	800b764 <__lshift+0xa4>
 800b78e:	bf00      	nop
 800b790:	0800e2f7 	.word	0x0800e2f7
 800b794:	0800e37f 	.word	0x0800e37f

0800b798 <__mcmp>:
 800b798:	690a      	ldr	r2, [r1, #16]
 800b79a:	4603      	mov	r3, r0
 800b79c:	6900      	ldr	r0, [r0, #16]
 800b79e:	1a80      	subs	r0, r0, r2
 800b7a0:	b530      	push	{r4, r5, lr}
 800b7a2:	d10e      	bne.n	800b7c2 <__mcmp+0x2a>
 800b7a4:	3314      	adds	r3, #20
 800b7a6:	3114      	adds	r1, #20
 800b7a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b7ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b7b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b7b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b7b8:	4295      	cmp	r5, r2
 800b7ba:	d003      	beq.n	800b7c4 <__mcmp+0x2c>
 800b7bc:	d205      	bcs.n	800b7ca <__mcmp+0x32>
 800b7be:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c2:	bd30      	pop	{r4, r5, pc}
 800b7c4:	42a3      	cmp	r3, r4
 800b7c6:	d3f3      	bcc.n	800b7b0 <__mcmp+0x18>
 800b7c8:	e7fb      	b.n	800b7c2 <__mcmp+0x2a>
 800b7ca:	2001      	movs	r0, #1
 800b7cc:	e7f9      	b.n	800b7c2 <__mcmp+0x2a>
	...

0800b7d0 <__mdiff>:
 800b7d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	4689      	mov	r9, r1
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	4611      	mov	r1, r2
 800b7da:	4648      	mov	r0, r9
 800b7dc:	4614      	mov	r4, r2
 800b7de:	f7ff ffdb 	bl	800b798 <__mcmp>
 800b7e2:	1e05      	subs	r5, r0, #0
 800b7e4:	d112      	bne.n	800b80c <__mdiff+0x3c>
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7ff fd19 	bl	800b220 <_Balloc>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	b928      	cbnz	r0, 800b7fe <__mdiff+0x2e>
 800b7f2:	4b3f      	ldr	r3, [pc, #252]	@ (800b8f0 <__mdiff+0x120>)
 800b7f4:	f240 2137 	movw	r1, #567	@ 0x237
 800b7f8:	483e      	ldr	r0, [pc, #248]	@ (800b8f4 <__mdiff+0x124>)
 800b7fa:	f001 fad1 	bl	800cda0 <__assert_func>
 800b7fe:	2301      	movs	r3, #1
 800b800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b804:	4610      	mov	r0, r2
 800b806:	b003      	add	sp, #12
 800b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80c:	bfbc      	itt	lt
 800b80e:	464b      	movlt	r3, r9
 800b810:	46a1      	movlt	r9, r4
 800b812:	4630      	mov	r0, r6
 800b814:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b818:	bfba      	itte	lt
 800b81a:	461c      	movlt	r4, r3
 800b81c:	2501      	movlt	r5, #1
 800b81e:	2500      	movge	r5, #0
 800b820:	f7ff fcfe 	bl	800b220 <_Balloc>
 800b824:	4602      	mov	r2, r0
 800b826:	b918      	cbnz	r0, 800b830 <__mdiff+0x60>
 800b828:	4b31      	ldr	r3, [pc, #196]	@ (800b8f0 <__mdiff+0x120>)
 800b82a:	f240 2145 	movw	r1, #581	@ 0x245
 800b82e:	e7e3      	b.n	800b7f8 <__mdiff+0x28>
 800b830:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b834:	6926      	ldr	r6, [r4, #16]
 800b836:	60c5      	str	r5, [r0, #12]
 800b838:	f109 0310 	add.w	r3, r9, #16
 800b83c:	f109 0514 	add.w	r5, r9, #20
 800b840:	f104 0e14 	add.w	lr, r4, #20
 800b844:	f100 0b14 	add.w	fp, r0, #20
 800b848:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b84c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	46d9      	mov	r9, fp
 800b854:	f04f 0c00 	mov.w	ip, #0
 800b858:	9b01      	ldr	r3, [sp, #4]
 800b85a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b85e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	fa1f f38a 	uxth.w	r3, sl
 800b868:	4619      	mov	r1, r3
 800b86a:	b283      	uxth	r3, r0
 800b86c:	1acb      	subs	r3, r1, r3
 800b86e:	0c00      	lsrs	r0, r0, #16
 800b870:	4463      	add	r3, ip
 800b872:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b876:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b880:	4576      	cmp	r6, lr
 800b882:	f849 3b04 	str.w	r3, [r9], #4
 800b886:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b88a:	d8e5      	bhi.n	800b858 <__mdiff+0x88>
 800b88c:	1b33      	subs	r3, r6, r4
 800b88e:	3b15      	subs	r3, #21
 800b890:	f023 0303 	bic.w	r3, r3, #3
 800b894:	3415      	adds	r4, #21
 800b896:	3304      	adds	r3, #4
 800b898:	42a6      	cmp	r6, r4
 800b89a:	bf38      	it	cc
 800b89c:	2304      	movcc	r3, #4
 800b89e:	441d      	add	r5, r3
 800b8a0:	445b      	add	r3, fp
 800b8a2:	461e      	mov	r6, r3
 800b8a4:	462c      	mov	r4, r5
 800b8a6:	4544      	cmp	r4, r8
 800b8a8:	d30e      	bcc.n	800b8c8 <__mdiff+0xf8>
 800b8aa:	f108 0103 	add.w	r1, r8, #3
 800b8ae:	1b49      	subs	r1, r1, r5
 800b8b0:	f021 0103 	bic.w	r1, r1, #3
 800b8b4:	3d03      	subs	r5, #3
 800b8b6:	45a8      	cmp	r8, r5
 800b8b8:	bf38      	it	cc
 800b8ba:	2100      	movcc	r1, #0
 800b8bc:	440b      	add	r3, r1
 800b8be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8c2:	b191      	cbz	r1, 800b8ea <__mdiff+0x11a>
 800b8c4:	6117      	str	r7, [r2, #16]
 800b8c6:	e79d      	b.n	800b804 <__mdiff+0x34>
 800b8c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b8cc:	46e6      	mov	lr, ip
 800b8ce:	0c08      	lsrs	r0, r1, #16
 800b8d0:	fa1c fc81 	uxtah	ip, ip, r1
 800b8d4:	4471      	add	r1, lr
 800b8d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b8da:	b289      	uxth	r1, r1
 800b8dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b8e0:	f846 1b04 	str.w	r1, [r6], #4
 800b8e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8e8:	e7dd      	b.n	800b8a6 <__mdiff+0xd6>
 800b8ea:	3f01      	subs	r7, #1
 800b8ec:	e7e7      	b.n	800b8be <__mdiff+0xee>
 800b8ee:	bf00      	nop
 800b8f0:	0800e2f7 	.word	0x0800e2f7
 800b8f4:	0800e37f 	.word	0x0800e37f

0800b8f8 <__ulp>:
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	ed8d 0b00 	vstr	d0, [sp]
 800b8fe:	9a01      	ldr	r2, [sp, #4]
 800b900:	4b0f      	ldr	r3, [pc, #60]	@ (800b940 <__ulp+0x48>)
 800b902:	4013      	ands	r3, r2
 800b904:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dc08      	bgt.n	800b91e <__ulp+0x26>
 800b90c:	425b      	negs	r3, r3
 800b90e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b912:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b916:	da04      	bge.n	800b922 <__ulp+0x2a>
 800b918:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b91c:	4113      	asrs	r3, r2
 800b91e:	2200      	movs	r2, #0
 800b920:	e008      	b.n	800b934 <__ulp+0x3c>
 800b922:	f1a2 0314 	sub.w	r3, r2, #20
 800b926:	2b1e      	cmp	r3, #30
 800b928:	bfda      	itte	le
 800b92a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b92e:	40da      	lsrle	r2, r3
 800b930:	2201      	movgt	r2, #1
 800b932:	2300      	movs	r3, #0
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	ec41 0b10 	vmov	d0, r0, r1
 800b93c:	b002      	add	sp, #8
 800b93e:	4770      	bx	lr
 800b940:	7ff00000 	.word	0x7ff00000

0800b944 <__b2d>:
 800b944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b948:	6906      	ldr	r6, [r0, #16]
 800b94a:	f100 0814 	add.w	r8, r0, #20
 800b94e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b952:	1f37      	subs	r7, r6, #4
 800b954:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b958:	4610      	mov	r0, r2
 800b95a:	f7ff fd53 	bl	800b404 <__hi0bits>
 800b95e:	f1c0 0320 	rsb	r3, r0, #32
 800b962:	280a      	cmp	r0, #10
 800b964:	600b      	str	r3, [r1, #0]
 800b966:	491b      	ldr	r1, [pc, #108]	@ (800b9d4 <__b2d+0x90>)
 800b968:	dc15      	bgt.n	800b996 <__b2d+0x52>
 800b96a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b96e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b972:	45b8      	cmp	r8, r7
 800b974:	ea43 0501 	orr.w	r5, r3, r1
 800b978:	bf34      	ite	cc
 800b97a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b97e:	2300      	movcs	r3, #0
 800b980:	3015      	adds	r0, #21
 800b982:	fa02 f000 	lsl.w	r0, r2, r0
 800b986:	fa23 f30c 	lsr.w	r3, r3, ip
 800b98a:	4303      	orrs	r3, r0
 800b98c:	461c      	mov	r4, r3
 800b98e:	ec45 4b10 	vmov	d0, r4, r5
 800b992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b996:	45b8      	cmp	r8, r7
 800b998:	bf3a      	itte	cc
 800b99a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b99e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b9a2:	2300      	movcs	r3, #0
 800b9a4:	380b      	subs	r0, #11
 800b9a6:	d012      	beq.n	800b9ce <__b2d+0x8a>
 800b9a8:	f1c0 0120 	rsb	r1, r0, #32
 800b9ac:	fa23 f401 	lsr.w	r4, r3, r1
 800b9b0:	4082      	lsls	r2, r0
 800b9b2:	4322      	orrs	r2, r4
 800b9b4:	4547      	cmp	r7, r8
 800b9b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b9ba:	bf8c      	ite	hi
 800b9bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b9c0:	2200      	movls	r2, #0
 800b9c2:	4083      	lsls	r3, r0
 800b9c4:	40ca      	lsrs	r2, r1
 800b9c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	e7de      	b.n	800b98c <__b2d+0x48>
 800b9ce:	ea42 0501 	orr.w	r5, r2, r1
 800b9d2:	e7db      	b.n	800b98c <__b2d+0x48>
 800b9d4:	3ff00000 	.word	0x3ff00000

0800b9d8 <__d2b>:
 800b9d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	460f      	mov	r7, r1
 800b9de:	2101      	movs	r1, #1
 800b9e0:	ec59 8b10 	vmov	r8, r9, d0
 800b9e4:	4616      	mov	r6, r2
 800b9e6:	f7ff fc1b 	bl	800b220 <_Balloc>
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	b930      	cbnz	r0, 800b9fc <__d2b+0x24>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	4b23      	ldr	r3, [pc, #140]	@ (800ba80 <__d2b+0xa8>)
 800b9f2:	4824      	ldr	r0, [pc, #144]	@ (800ba84 <__d2b+0xac>)
 800b9f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b9f8:	f001 f9d2 	bl	800cda0 <__assert_func>
 800b9fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba04:	b10d      	cbz	r5, 800ba0a <__d2b+0x32>
 800ba06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	f1b8 0300 	subs.w	r3, r8, #0
 800ba10:	d023      	beq.n	800ba5a <__d2b+0x82>
 800ba12:	4668      	mov	r0, sp
 800ba14:	9300      	str	r3, [sp, #0]
 800ba16:	f7ff fd14 	bl	800b442 <__lo0bits>
 800ba1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba1e:	b1d0      	cbz	r0, 800ba56 <__d2b+0x7e>
 800ba20:	f1c0 0320 	rsb	r3, r0, #32
 800ba24:	fa02 f303 	lsl.w	r3, r2, r3
 800ba28:	430b      	orrs	r3, r1
 800ba2a:	40c2      	lsrs	r2, r0
 800ba2c:	6163      	str	r3, [r4, #20]
 800ba2e:	9201      	str	r2, [sp, #4]
 800ba30:	9b01      	ldr	r3, [sp, #4]
 800ba32:	61a3      	str	r3, [r4, #24]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bf0c      	ite	eq
 800ba38:	2201      	moveq	r2, #1
 800ba3a:	2202      	movne	r2, #2
 800ba3c:	6122      	str	r2, [r4, #16]
 800ba3e:	b1a5      	cbz	r5, 800ba6a <__d2b+0x92>
 800ba40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba44:	4405      	add	r5, r0
 800ba46:	603d      	str	r5, [r7, #0]
 800ba48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba4c:	6030      	str	r0, [r6, #0]
 800ba4e:	4620      	mov	r0, r4
 800ba50:	b003      	add	sp, #12
 800ba52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba56:	6161      	str	r1, [r4, #20]
 800ba58:	e7ea      	b.n	800ba30 <__d2b+0x58>
 800ba5a:	a801      	add	r0, sp, #4
 800ba5c:	f7ff fcf1 	bl	800b442 <__lo0bits>
 800ba60:	9b01      	ldr	r3, [sp, #4]
 800ba62:	6163      	str	r3, [r4, #20]
 800ba64:	3020      	adds	r0, #32
 800ba66:	2201      	movs	r2, #1
 800ba68:	e7e8      	b.n	800ba3c <__d2b+0x64>
 800ba6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba72:	6038      	str	r0, [r7, #0]
 800ba74:	6918      	ldr	r0, [r3, #16]
 800ba76:	f7ff fcc5 	bl	800b404 <__hi0bits>
 800ba7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba7e:	e7e5      	b.n	800ba4c <__d2b+0x74>
 800ba80:	0800e2f7 	.word	0x0800e2f7
 800ba84:	0800e37f 	.word	0x0800e37f

0800ba88 <__ratio>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	e9cd 1000 	strd	r1, r0, [sp]
 800ba92:	a902      	add	r1, sp, #8
 800ba94:	f7ff ff56 	bl	800b944 <__b2d>
 800ba98:	9800      	ldr	r0, [sp, #0]
 800ba9a:	a903      	add	r1, sp, #12
 800ba9c:	ec55 4b10 	vmov	r4, r5, d0
 800baa0:	f7ff ff50 	bl	800b944 <__b2d>
 800baa4:	9b01      	ldr	r3, [sp, #4]
 800baa6:	6919      	ldr	r1, [r3, #16]
 800baa8:	9b00      	ldr	r3, [sp, #0]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	1ac9      	subs	r1, r1, r3
 800baae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bab2:	1a9b      	subs	r3, r3, r2
 800bab4:	ec5b ab10 	vmov	sl, fp, d0
 800bab8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800babc:	2b00      	cmp	r3, #0
 800babe:	bfce      	itee	gt
 800bac0:	462a      	movgt	r2, r5
 800bac2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bac6:	465a      	movle	r2, fp
 800bac8:	462f      	mov	r7, r5
 800baca:	46d9      	mov	r9, fp
 800bacc:	bfcc      	ite	gt
 800bace:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bad2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bad6:	464b      	mov	r3, r9
 800bad8:	4652      	mov	r2, sl
 800bada:	4620      	mov	r0, r4
 800badc:	4639      	mov	r1, r7
 800bade:	f7f4 feb5 	bl	800084c <__aeabi_ddiv>
 800bae2:	ec41 0b10 	vmov	d0, r0, r1
 800bae6:	b005      	add	sp, #20
 800bae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800baec <__copybits>:
 800baec:	3901      	subs	r1, #1
 800baee:	b570      	push	{r4, r5, r6, lr}
 800baf0:	1149      	asrs	r1, r1, #5
 800baf2:	6914      	ldr	r4, [r2, #16]
 800baf4:	3101      	adds	r1, #1
 800baf6:	f102 0314 	add.w	r3, r2, #20
 800bafa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bafe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb02:	1f05      	subs	r5, r0, #4
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	d30c      	bcc.n	800bb22 <__copybits+0x36>
 800bb08:	1aa3      	subs	r3, r4, r2
 800bb0a:	3b11      	subs	r3, #17
 800bb0c:	f023 0303 	bic.w	r3, r3, #3
 800bb10:	3211      	adds	r2, #17
 800bb12:	42a2      	cmp	r2, r4
 800bb14:	bf88      	it	hi
 800bb16:	2300      	movhi	r3, #0
 800bb18:	4418      	add	r0, r3
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4288      	cmp	r0, r1
 800bb1e:	d305      	bcc.n	800bb2c <__copybits+0x40>
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb26:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb2a:	e7eb      	b.n	800bb04 <__copybits+0x18>
 800bb2c:	f840 3b04 	str.w	r3, [r0], #4
 800bb30:	e7f4      	b.n	800bb1c <__copybits+0x30>

0800bb32 <__any_on>:
 800bb32:	f100 0214 	add.w	r2, r0, #20
 800bb36:	6900      	ldr	r0, [r0, #16]
 800bb38:	114b      	asrs	r3, r1, #5
 800bb3a:	4298      	cmp	r0, r3
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	db11      	blt.n	800bb64 <__any_on+0x32>
 800bb40:	dd0a      	ble.n	800bb58 <__any_on+0x26>
 800bb42:	f011 011f 	ands.w	r1, r1, #31
 800bb46:	d007      	beq.n	800bb58 <__any_on+0x26>
 800bb48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb4c:	fa24 f001 	lsr.w	r0, r4, r1
 800bb50:	fa00 f101 	lsl.w	r1, r0, r1
 800bb54:	428c      	cmp	r4, r1
 800bb56:	d10b      	bne.n	800bb70 <__any_on+0x3e>
 800bb58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d803      	bhi.n	800bb68 <__any_on+0x36>
 800bb60:	2000      	movs	r0, #0
 800bb62:	bd10      	pop	{r4, pc}
 800bb64:	4603      	mov	r3, r0
 800bb66:	e7f7      	b.n	800bb58 <__any_on+0x26>
 800bb68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb6c:	2900      	cmp	r1, #0
 800bb6e:	d0f5      	beq.n	800bb5c <__any_on+0x2a>
 800bb70:	2001      	movs	r0, #1
 800bb72:	e7f6      	b.n	800bb62 <__any_on+0x30>

0800bb74 <_malloc_usable_size_r>:
 800bb74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb78:	1f18      	subs	r0, r3, #4
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfbc      	itt	lt
 800bb7e:	580b      	ldrlt	r3, [r1, r0]
 800bb80:	18c0      	addlt	r0, r0, r3
 800bb82:	4770      	bx	lr

0800bb84 <__ascii_wctomb>:
 800bb84:	4603      	mov	r3, r0
 800bb86:	4608      	mov	r0, r1
 800bb88:	b141      	cbz	r1, 800bb9c <__ascii_wctomb+0x18>
 800bb8a:	2aff      	cmp	r2, #255	@ 0xff
 800bb8c:	d904      	bls.n	800bb98 <__ascii_wctomb+0x14>
 800bb8e:	228a      	movs	r2, #138	@ 0x8a
 800bb90:	601a      	str	r2, [r3, #0]
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295
 800bb96:	4770      	bx	lr
 800bb98:	700a      	strb	r2, [r1, #0]
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	4770      	bx	lr

0800bb9e <__ssputs_r>:
 800bb9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba2:	688e      	ldr	r6, [r1, #8]
 800bba4:	461f      	mov	r7, r3
 800bba6:	42be      	cmp	r6, r7
 800bba8:	680b      	ldr	r3, [r1, #0]
 800bbaa:	4682      	mov	sl, r0
 800bbac:	460c      	mov	r4, r1
 800bbae:	4690      	mov	r8, r2
 800bbb0:	d82d      	bhi.n	800bc0e <__ssputs_r+0x70>
 800bbb2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbb6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bbba:	d026      	beq.n	800bc0a <__ssputs_r+0x6c>
 800bbbc:	6965      	ldr	r5, [r4, #20]
 800bbbe:	6909      	ldr	r1, [r1, #16]
 800bbc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc4:	eba3 0901 	sub.w	r9, r3, r1
 800bbc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbcc:	1c7b      	adds	r3, r7, #1
 800bbce:	444b      	add	r3, r9
 800bbd0:	106d      	asrs	r5, r5, #1
 800bbd2:	429d      	cmp	r5, r3
 800bbd4:	bf38      	it	cc
 800bbd6:	461d      	movcc	r5, r3
 800bbd8:	0553      	lsls	r3, r2, #21
 800bbda:	d527      	bpl.n	800bc2c <__ssputs_r+0x8e>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	f7fd fb79 	bl	80092d4 <_malloc_r>
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	b360      	cbz	r0, 800bc40 <__ssputs_r+0xa2>
 800bbe6:	6921      	ldr	r1, [r4, #16]
 800bbe8:	464a      	mov	r2, r9
 800bbea:	f7fe ff66 	bl	800aaba <memcpy>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	6126      	str	r6, [r4, #16]
 800bbfc:	6165      	str	r5, [r4, #20]
 800bbfe:	444e      	add	r6, r9
 800bc00:	eba5 0509 	sub.w	r5, r5, r9
 800bc04:	6026      	str	r6, [r4, #0]
 800bc06:	60a5      	str	r5, [r4, #8]
 800bc08:	463e      	mov	r6, r7
 800bc0a:	42be      	cmp	r6, r7
 800bc0c:	d900      	bls.n	800bc10 <__ssputs_r+0x72>
 800bc0e:	463e      	mov	r6, r7
 800bc10:	6820      	ldr	r0, [r4, #0]
 800bc12:	4632      	mov	r2, r6
 800bc14:	4641      	mov	r1, r8
 800bc16:	f001 f886 	bl	800cd26 <memmove>
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	1b9b      	subs	r3, r3, r6
 800bc1e:	60a3      	str	r3, [r4, #8]
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	4433      	add	r3, r6
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	2000      	movs	r0, #0
 800bc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	f7fd fbdd 	bl	80093ec <_realloc_r>
 800bc32:	4606      	mov	r6, r0
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d1e0      	bne.n	800bbfa <__ssputs_r+0x5c>
 800bc38:	6921      	ldr	r1, [r4, #16]
 800bc3a:	4650      	mov	r0, sl
 800bc3c:	f7fe ff5a 	bl	800aaf4 <_free_r>
 800bc40:	230c      	movs	r3, #12
 800bc42:	f8ca 3000 	str.w	r3, [sl]
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc52:	e7e9      	b.n	800bc28 <__ssputs_r+0x8a>

0800bc54 <_svfiprintf_r>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4698      	mov	r8, r3
 800bc5a:	898b      	ldrh	r3, [r1, #12]
 800bc5c:	061b      	lsls	r3, r3, #24
 800bc5e:	b09d      	sub	sp, #116	@ 0x74
 800bc60:	4607      	mov	r7, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	d510      	bpl.n	800bc8a <_svfiprintf_r+0x36>
 800bc68:	690b      	ldr	r3, [r1, #16]
 800bc6a:	b973      	cbnz	r3, 800bc8a <_svfiprintf_r+0x36>
 800bc6c:	2140      	movs	r1, #64	@ 0x40
 800bc6e:	f7fd fb31 	bl	80092d4 <_malloc_r>
 800bc72:	6028      	str	r0, [r5, #0]
 800bc74:	6128      	str	r0, [r5, #16]
 800bc76:	b930      	cbnz	r0, 800bc86 <_svfiprintf_r+0x32>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	b01d      	add	sp, #116	@ 0x74
 800bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc86:	2340      	movs	r3, #64	@ 0x40
 800bc88:	616b      	str	r3, [r5, #20]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc8e:	2320      	movs	r3, #32
 800bc90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc94:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc98:	2330      	movs	r3, #48	@ 0x30
 800bc9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be38 <_svfiprintf_r+0x1e4>
 800bc9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bca2:	f04f 0901 	mov.w	r9, #1
 800bca6:	4623      	mov	r3, r4
 800bca8:	469a      	mov	sl, r3
 800bcaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcae:	b10a      	cbz	r2, 800bcb4 <_svfiprintf_r+0x60>
 800bcb0:	2a25      	cmp	r2, #37	@ 0x25
 800bcb2:	d1f9      	bne.n	800bca8 <_svfiprintf_r+0x54>
 800bcb4:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb8:	d00b      	beq.n	800bcd2 <_svfiprintf_r+0x7e>
 800bcba:	465b      	mov	r3, fp
 800bcbc:	4622      	mov	r2, r4
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	f7ff ff6c 	bl	800bb9e <__ssputs_r>
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	f000 80a7 	beq.w	800be1a <_svfiprintf_r+0x1c6>
 800bccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcce:	445a      	add	r2, fp
 800bcd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 809f 	beq.w	800be1a <_svfiprintf_r+0x1c6>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295
 800bce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce6:	f10a 0a01 	add.w	sl, sl, #1
 800bcea:	9304      	str	r3, [sp, #16]
 800bcec:	9307      	str	r3, [sp, #28]
 800bcee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcf2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcf4:	4654      	mov	r4, sl
 800bcf6:	2205      	movs	r2, #5
 800bcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfc:	484e      	ldr	r0, [pc, #312]	@ (800be38 <_svfiprintf_r+0x1e4>)
 800bcfe:	f7f4 fa6f 	bl	80001e0 <memchr>
 800bd02:	9a04      	ldr	r2, [sp, #16]
 800bd04:	b9d8      	cbnz	r0, 800bd3e <_svfiprintf_r+0xea>
 800bd06:	06d0      	lsls	r0, r2, #27
 800bd08:	bf44      	itt	mi
 800bd0a:	2320      	movmi	r3, #32
 800bd0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd10:	0711      	lsls	r1, r2, #28
 800bd12:	bf44      	itt	mi
 800bd14:	232b      	movmi	r3, #43	@ 0x2b
 800bd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd20:	d015      	beq.n	800bd4e <_svfiprintf_r+0xfa>
 800bd22:	9a07      	ldr	r2, [sp, #28]
 800bd24:	4654      	mov	r4, sl
 800bd26:	2000      	movs	r0, #0
 800bd28:	f04f 0c0a 	mov.w	ip, #10
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd32:	3b30      	subs	r3, #48	@ 0x30
 800bd34:	2b09      	cmp	r3, #9
 800bd36:	d94b      	bls.n	800bdd0 <_svfiprintf_r+0x17c>
 800bd38:	b1b0      	cbz	r0, 800bd68 <_svfiprintf_r+0x114>
 800bd3a:	9207      	str	r2, [sp, #28]
 800bd3c:	e014      	b.n	800bd68 <_svfiprintf_r+0x114>
 800bd3e:	eba0 0308 	sub.w	r3, r0, r8
 800bd42:	fa09 f303 	lsl.w	r3, r9, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	9304      	str	r3, [sp, #16]
 800bd4a:	46a2      	mov	sl, r4
 800bd4c:	e7d2      	b.n	800bcf4 <_svfiprintf_r+0xa0>
 800bd4e:	9b03      	ldr	r3, [sp, #12]
 800bd50:	1d19      	adds	r1, r3, #4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	9103      	str	r1, [sp, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bfbb      	ittet	lt
 800bd5a:	425b      	neglt	r3, r3
 800bd5c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd60:	9307      	strge	r3, [sp, #28]
 800bd62:	9307      	strlt	r3, [sp, #28]
 800bd64:	bfb8      	it	lt
 800bd66:	9204      	strlt	r2, [sp, #16]
 800bd68:	7823      	ldrb	r3, [r4, #0]
 800bd6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd6c:	d10a      	bne.n	800bd84 <_svfiprintf_r+0x130>
 800bd6e:	7863      	ldrb	r3, [r4, #1]
 800bd70:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd72:	d132      	bne.n	800bdda <_svfiprintf_r+0x186>
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	9203      	str	r2, [sp, #12]
 800bd7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd80:	3402      	adds	r4, #2
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be48 <_svfiprintf_r+0x1f4>
 800bd88:	7821      	ldrb	r1, [r4, #0]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	f7f4 fa27 	bl	80001e0 <memchr>
 800bd92:	b138      	cbz	r0, 800bda4 <_svfiprintf_r+0x150>
 800bd94:	9b04      	ldr	r3, [sp, #16]
 800bd96:	eba0 000a 	sub.w	r0, r0, sl
 800bd9a:	2240      	movs	r2, #64	@ 0x40
 800bd9c:	4082      	lsls	r2, r0
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	3401      	adds	r4, #1
 800bda2:	9304      	str	r3, [sp, #16]
 800bda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda8:	4824      	ldr	r0, [pc, #144]	@ (800be3c <_svfiprintf_r+0x1e8>)
 800bdaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdae:	2206      	movs	r2, #6
 800bdb0:	f7f4 fa16 	bl	80001e0 <memchr>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d036      	beq.n	800be26 <_svfiprintf_r+0x1d2>
 800bdb8:	4b21      	ldr	r3, [pc, #132]	@ (800be40 <_svfiprintf_r+0x1ec>)
 800bdba:	bb1b      	cbnz	r3, 800be04 <_svfiprintf_r+0x1b0>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	3307      	adds	r3, #7
 800bdc0:	f023 0307 	bic.w	r3, r3, #7
 800bdc4:	3308      	adds	r3, #8
 800bdc6:	9303      	str	r3, [sp, #12]
 800bdc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdca:	4433      	add	r3, r6
 800bdcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdce:	e76a      	b.n	800bca6 <_svfiprintf_r+0x52>
 800bdd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e7a8      	b.n	800bd2c <_svfiprintf_r+0xd8>
 800bdda:	2300      	movs	r3, #0
 800bddc:	3401      	adds	r4, #1
 800bdde:	9305      	str	r3, [sp, #20]
 800bde0:	4619      	mov	r1, r3
 800bde2:	f04f 0c0a 	mov.w	ip, #10
 800bde6:	4620      	mov	r0, r4
 800bde8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdec:	3a30      	subs	r2, #48	@ 0x30
 800bdee:	2a09      	cmp	r2, #9
 800bdf0:	d903      	bls.n	800bdfa <_svfiprintf_r+0x1a6>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0c6      	beq.n	800bd84 <_svfiprintf_r+0x130>
 800bdf6:	9105      	str	r1, [sp, #20]
 800bdf8:	e7c4      	b.n	800bd84 <_svfiprintf_r+0x130>
 800bdfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdfe:	4604      	mov	r4, r0
 800be00:	2301      	movs	r3, #1
 800be02:	e7f0      	b.n	800bde6 <_svfiprintf_r+0x192>
 800be04:	ab03      	add	r3, sp, #12
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	462a      	mov	r2, r5
 800be0a:	4b0e      	ldr	r3, [pc, #56]	@ (800be44 <_svfiprintf_r+0x1f0>)
 800be0c:	a904      	add	r1, sp, #16
 800be0e:	4638      	mov	r0, r7
 800be10:	f3af 8000 	nop.w
 800be14:	1c42      	adds	r2, r0, #1
 800be16:	4606      	mov	r6, r0
 800be18:	d1d6      	bne.n	800bdc8 <_svfiprintf_r+0x174>
 800be1a:	89ab      	ldrh	r3, [r5, #12]
 800be1c:	065b      	lsls	r3, r3, #25
 800be1e:	f53f af2d 	bmi.w	800bc7c <_svfiprintf_r+0x28>
 800be22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be24:	e72c      	b.n	800bc80 <_svfiprintf_r+0x2c>
 800be26:	ab03      	add	r3, sp, #12
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	462a      	mov	r2, r5
 800be2c:	4b05      	ldr	r3, [pc, #20]	@ (800be44 <_svfiprintf_r+0x1f0>)
 800be2e:	a904      	add	r1, sp, #16
 800be30:	4638      	mov	r0, r7
 800be32:	f000 fb8b 	bl	800c54c <_printf_i>
 800be36:	e7ed      	b.n	800be14 <_svfiprintf_r+0x1c0>
 800be38:	0800e3d8 	.word	0x0800e3d8
 800be3c:	0800e3e2 	.word	0x0800e3e2
 800be40:	00000000 	.word	0x00000000
 800be44:	0800bb9f 	.word	0x0800bb9f
 800be48:	0800e3de 	.word	0x0800e3de

0800be4c <_sungetc_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	1c4b      	adds	r3, r1, #1
 800be50:	4614      	mov	r4, r2
 800be52:	d103      	bne.n	800be5c <_sungetc_r+0x10>
 800be54:	f04f 35ff 	mov.w	r5, #4294967295
 800be58:	4628      	mov	r0, r5
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	8993      	ldrh	r3, [r2, #12]
 800be5e:	f023 0320 	bic.w	r3, r3, #32
 800be62:	8193      	strh	r3, [r2, #12]
 800be64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be66:	6852      	ldr	r2, [r2, #4]
 800be68:	b2cd      	uxtb	r5, r1
 800be6a:	b18b      	cbz	r3, 800be90 <_sungetc_r+0x44>
 800be6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800be6e:	4293      	cmp	r3, r2
 800be70:	dd08      	ble.n	800be84 <_sungetc_r+0x38>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	1e5a      	subs	r2, r3, #1
 800be76:	6022      	str	r2, [r4, #0]
 800be78:	f803 5c01 	strb.w	r5, [r3, #-1]
 800be7c:	6863      	ldr	r3, [r4, #4]
 800be7e:	3301      	adds	r3, #1
 800be80:	6063      	str	r3, [r4, #4]
 800be82:	e7e9      	b.n	800be58 <_sungetc_r+0xc>
 800be84:	4621      	mov	r1, r4
 800be86:	f000 ff14 	bl	800ccb2 <__submore>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d0f1      	beq.n	800be72 <_sungetc_r+0x26>
 800be8e:	e7e1      	b.n	800be54 <_sungetc_r+0x8>
 800be90:	6921      	ldr	r1, [r4, #16]
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	b151      	cbz	r1, 800beac <_sungetc_r+0x60>
 800be96:	4299      	cmp	r1, r3
 800be98:	d208      	bcs.n	800beac <_sungetc_r+0x60>
 800be9a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800be9e:	42a9      	cmp	r1, r5
 800bea0:	d104      	bne.n	800beac <_sungetc_r+0x60>
 800bea2:	3b01      	subs	r3, #1
 800bea4:	3201      	adds	r2, #1
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	6062      	str	r2, [r4, #4]
 800beaa:	e7d5      	b.n	800be58 <_sungetc_r+0xc>
 800beac:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800beb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800beb6:	2303      	movs	r3, #3
 800beb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800beba:	4623      	mov	r3, r4
 800bebc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	2301      	movs	r3, #1
 800bec4:	e7dc      	b.n	800be80 <_sungetc_r+0x34>

0800bec6 <__ssrefill_r>:
 800bec6:	b510      	push	{r4, lr}
 800bec8:	460c      	mov	r4, r1
 800beca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800becc:	b169      	cbz	r1, 800beea <__ssrefill_r+0x24>
 800bece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bed2:	4299      	cmp	r1, r3
 800bed4:	d001      	beq.n	800beda <__ssrefill_r+0x14>
 800bed6:	f7fe fe0d 	bl	800aaf4 <_free_r>
 800beda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bedc:	6063      	str	r3, [r4, #4]
 800bede:	2000      	movs	r0, #0
 800bee0:	6360      	str	r0, [r4, #52]	@ 0x34
 800bee2:	b113      	cbz	r3, 800beea <__ssrefill_r+0x24>
 800bee4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	bd10      	pop	{r4, pc}
 800beea:	6923      	ldr	r3, [r4, #16]
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	2300      	movs	r3, #0
 800bef0:	6063      	str	r3, [r4, #4]
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	f043 0320 	orr.w	r3, r3, #32
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	f04f 30ff 	mov.w	r0, #4294967295
 800befe:	e7f3      	b.n	800bee8 <__ssrefill_r+0x22>

0800bf00 <__ssvfiscanf_r>:
 800bf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf04:	460c      	mov	r4, r1
 800bf06:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bf10:	49a6      	ldr	r1, [pc, #664]	@ (800c1ac <__ssvfiscanf_r+0x2ac>)
 800bf12:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bf14:	f10d 0804 	add.w	r8, sp, #4
 800bf18:	49a5      	ldr	r1, [pc, #660]	@ (800c1b0 <__ssvfiscanf_r+0x2b0>)
 800bf1a:	4fa6      	ldr	r7, [pc, #664]	@ (800c1b4 <__ssvfiscanf_r+0x2b4>)
 800bf1c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bf20:	4606      	mov	r6, r0
 800bf22:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	f892 9000 	ldrb.w	r9, [r2]
 800bf2a:	f1b9 0f00 	cmp.w	r9, #0
 800bf2e:	f000 8158 	beq.w	800c1e2 <__ssvfiscanf_r+0x2e2>
 800bf32:	f817 3009 	ldrb.w	r3, [r7, r9]
 800bf36:	f013 0308 	ands.w	r3, r3, #8
 800bf3a:	f102 0501 	add.w	r5, r2, #1
 800bf3e:	d019      	beq.n	800bf74 <__ssvfiscanf_r+0x74>
 800bf40:	6863      	ldr	r3, [r4, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dd0f      	ble.n	800bf66 <__ssvfiscanf_r+0x66>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	5cba      	ldrb	r2, [r7, r2]
 800bf4c:	0712      	lsls	r2, r2, #28
 800bf4e:	d401      	bmi.n	800bf54 <__ssvfiscanf_r+0x54>
 800bf50:	462a      	mov	r2, r5
 800bf52:	e7e8      	b.n	800bf26 <__ssvfiscanf_r+0x26>
 800bf54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bf56:	3201      	adds	r2, #1
 800bf58:	9245      	str	r2, [sp, #276]	@ 0x114
 800bf5a:	6862      	ldr	r2, [r4, #4]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	3a01      	subs	r2, #1
 800bf60:	6062      	str	r2, [r4, #4]
 800bf62:	6023      	str	r3, [r4, #0]
 800bf64:	e7ec      	b.n	800bf40 <__ssvfiscanf_r+0x40>
 800bf66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	4798      	blx	r3
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d0e9      	beq.n	800bf46 <__ssvfiscanf_r+0x46>
 800bf72:	e7ed      	b.n	800bf50 <__ssvfiscanf_r+0x50>
 800bf74:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800bf78:	f040 8085 	bne.w	800c086 <__ssvfiscanf_r+0x186>
 800bf7c:	9341      	str	r3, [sp, #260]	@ 0x104
 800bf7e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bf80:	7853      	ldrb	r3, [r2, #1]
 800bf82:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf84:	bf02      	ittt	eq
 800bf86:	2310      	moveq	r3, #16
 800bf88:	1c95      	addeq	r5, r2, #2
 800bf8a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800bf8c:	220a      	movs	r2, #10
 800bf8e:	46aa      	mov	sl, r5
 800bf90:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bf94:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800bf98:	2b09      	cmp	r3, #9
 800bf9a:	d91e      	bls.n	800bfda <__ssvfiscanf_r+0xda>
 800bf9c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800c1b8 <__ssvfiscanf_r+0x2b8>
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	4658      	mov	r0, fp
 800bfa4:	f7f4 f91c 	bl	80001e0 <memchr>
 800bfa8:	b138      	cbz	r0, 800bfba <__ssvfiscanf_r+0xba>
 800bfaa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bfac:	eba0 000b 	sub.w	r0, r0, fp
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	4083      	lsls	r3, r0
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	9341      	str	r3, [sp, #260]	@ 0x104
 800bfb8:	4655      	mov	r5, sl
 800bfba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bfbe:	2b78      	cmp	r3, #120	@ 0x78
 800bfc0:	d806      	bhi.n	800bfd0 <__ssvfiscanf_r+0xd0>
 800bfc2:	2b57      	cmp	r3, #87	@ 0x57
 800bfc4:	d810      	bhi.n	800bfe8 <__ssvfiscanf_r+0xe8>
 800bfc6:	2b25      	cmp	r3, #37	@ 0x25
 800bfc8:	d05d      	beq.n	800c086 <__ssvfiscanf_r+0x186>
 800bfca:	d857      	bhi.n	800c07c <__ssvfiscanf_r+0x17c>
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d075      	beq.n	800c0bc <__ssvfiscanf_r+0x1bc>
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bfd4:	230a      	movs	r3, #10
 800bfd6:	9342      	str	r3, [sp, #264]	@ 0x108
 800bfd8:	e088      	b.n	800c0ec <__ssvfiscanf_r+0x1ec>
 800bfda:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bfdc:	fb02 1103 	mla	r1, r2, r3, r1
 800bfe0:	3930      	subs	r1, #48	@ 0x30
 800bfe2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bfe4:	4655      	mov	r5, sl
 800bfe6:	e7d2      	b.n	800bf8e <__ssvfiscanf_r+0x8e>
 800bfe8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bfec:	2a20      	cmp	r2, #32
 800bfee:	d8ef      	bhi.n	800bfd0 <__ssvfiscanf_r+0xd0>
 800bff0:	a101      	add	r1, pc, #4	@ (adr r1, 800bff8 <__ssvfiscanf_r+0xf8>)
 800bff2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c0cb 	.word	0x0800c0cb
 800bffc:	0800bfd1 	.word	0x0800bfd1
 800c000:	0800bfd1 	.word	0x0800bfd1
 800c004:	0800c125 	.word	0x0800c125
 800c008:	0800bfd1 	.word	0x0800bfd1
 800c00c:	0800bfd1 	.word	0x0800bfd1
 800c010:	0800bfd1 	.word	0x0800bfd1
 800c014:	0800bfd1 	.word	0x0800bfd1
 800c018:	0800bfd1 	.word	0x0800bfd1
 800c01c:	0800bfd1 	.word	0x0800bfd1
 800c020:	0800bfd1 	.word	0x0800bfd1
 800c024:	0800c13b 	.word	0x0800c13b
 800c028:	0800c121 	.word	0x0800c121
 800c02c:	0800c083 	.word	0x0800c083
 800c030:	0800c083 	.word	0x0800c083
 800c034:	0800c083 	.word	0x0800c083
 800c038:	0800bfd1 	.word	0x0800bfd1
 800c03c:	0800c0dd 	.word	0x0800c0dd
 800c040:	0800bfd1 	.word	0x0800bfd1
 800c044:	0800bfd1 	.word	0x0800bfd1
 800c048:	0800bfd1 	.word	0x0800bfd1
 800c04c:	0800bfd1 	.word	0x0800bfd1
 800c050:	0800c14b 	.word	0x0800c14b
 800c054:	0800c0e5 	.word	0x0800c0e5
 800c058:	0800c0c3 	.word	0x0800c0c3
 800c05c:	0800bfd1 	.word	0x0800bfd1
 800c060:	0800bfd1 	.word	0x0800bfd1
 800c064:	0800c147 	.word	0x0800c147
 800c068:	0800bfd1 	.word	0x0800bfd1
 800c06c:	0800c121 	.word	0x0800c121
 800c070:	0800bfd1 	.word	0x0800bfd1
 800c074:	0800bfd1 	.word	0x0800bfd1
 800c078:	0800c0cb 	.word	0x0800c0cb
 800c07c:	3b45      	subs	r3, #69	@ 0x45
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d8a6      	bhi.n	800bfd0 <__ssvfiscanf_r+0xd0>
 800c082:	2305      	movs	r3, #5
 800c084:	e031      	b.n	800c0ea <__ssvfiscanf_r+0x1ea>
 800c086:	6863      	ldr	r3, [r4, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	dd0d      	ble.n	800c0a8 <__ssvfiscanf_r+0x1a8>
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	781a      	ldrb	r2, [r3, #0]
 800c090:	454a      	cmp	r2, r9
 800c092:	f040 80a6 	bne.w	800c1e2 <__ssvfiscanf_r+0x2e2>
 800c096:	3301      	adds	r3, #1
 800c098:	6862      	ldr	r2, [r4, #4]
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c09e:	3a01      	subs	r2, #1
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	6062      	str	r2, [r4, #4]
 800c0a4:	9345      	str	r3, [sp, #276]	@ 0x114
 800c0a6:	e753      	b.n	800bf50 <__ssvfiscanf_r+0x50>
 800c0a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	4798      	blx	r3
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d0eb      	beq.n	800c08c <__ssvfiscanf_r+0x18c>
 800c0b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f040 808b 	bne.w	800c1d2 <__ssvfiscanf_r+0x2d2>
 800c0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c0:	e08b      	b.n	800c1da <__ssvfiscanf_r+0x2da>
 800c0c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c0c4:	f042 0220 	orr.w	r2, r2, #32
 800c0c8:	9241      	str	r2, [sp, #260]	@ 0x104
 800c0ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c0cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0d0:	9241      	str	r2, [sp, #260]	@ 0x104
 800c0d2:	2210      	movs	r2, #16
 800c0d4:	2b6e      	cmp	r3, #110	@ 0x6e
 800c0d6:	9242      	str	r2, [sp, #264]	@ 0x108
 800c0d8:	d902      	bls.n	800c0e0 <__ssvfiscanf_r+0x1e0>
 800c0da:	e005      	b.n	800c0e8 <__ssvfiscanf_r+0x1e8>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9342      	str	r3, [sp, #264]	@ 0x108
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e002      	b.n	800c0ea <__ssvfiscanf_r+0x1ea>
 800c0e4:	2308      	movs	r3, #8
 800c0e6:	9342      	str	r3, [sp, #264]	@ 0x108
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c0ec:	6863      	ldr	r3, [r4, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	dd39      	ble.n	800c166 <__ssvfiscanf_r+0x266>
 800c0f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c0f4:	0659      	lsls	r1, r3, #25
 800c0f6:	d404      	bmi.n	800c102 <__ssvfiscanf_r+0x202>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	781a      	ldrb	r2, [r3, #0]
 800c0fc:	5cba      	ldrb	r2, [r7, r2]
 800c0fe:	0712      	lsls	r2, r2, #28
 800c100:	d438      	bmi.n	800c174 <__ssvfiscanf_r+0x274>
 800c102:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c104:	2b02      	cmp	r3, #2
 800c106:	dc47      	bgt.n	800c198 <__ssvfiscanf_r+0x298>
 800c108:	466b      	mov	r3, sp
 800c10a:	4622      	mov	r2, r4
 800c10c:	a941      	add	r1, sp, #260	@ 0x104
 800c10e:	4630      	mov	r0, r6
 800c110:	f000 fb3a 	bl	800c788 <_scanf_chars>
 800c114:	2801      	cmp	r0, #1
 800c116:	d064      	beq.n	800c1e2 <__ssvfiscanf_r+0x2e2>
 800c118:	2802      	cmp	r0, #2
 800c11a:	f47f af19 	bne.w	800bf50 <__ssvfiscanf_r+0x50>
 800c11e:	e7c9      	b.n	800c0b4 <__ssvfiscanf_r+0x1b4>
 800c120:	220a      	movs	r2, #10
 800c122:	e7d7      	b.n	800c0d4 <__ssvfiscanf_r+0x1d4>
 800c124:	4629      	mov	r1, r5
 800c126:	4640      	mov	r0, r8
 800c128:	f000 fd8a 	bl	800cc40 <__sccl>
 800c12c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c132:	9341      	str	r3, [sp, #260]	@ 0x104
 800c134:	4605      	mov	r5, r0
 800c136:	2301      	movs	r3, #1
 800c138:	e7d7      	b.n	800c0ea <__ssvfiscanf_r+0x1ea>
 800c13a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c13c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c140:	9341      	str	r3, [sp, #260]	@ 0x104
 800c142:	2300      	movs	r3, #0
 800c144:	e7d1      	b.n	800c0ea <__ssvfiscanf_r+0x1ea>
 800c146:	2302      	movs	r3, #2
 800c148:	e7cf      	b.n	800c0ea <__ssvfiscanf_r+0x1ea>
 800c14a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c14c:	06c3      	lsls	r3, r0, #27
 800c14e:	f53f aeff 	bmi.w	800bf50 <__ssvfiscanf_r+0x50>
 800c152:	9b00      	ldr	r3, [sp, #0]
 800c154:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c156:	1d19      	adds	r1, r3, #4
 800c158:	9100      	str	r1, [sp, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	07c0      	lsls	r0, r0, #31
 800c15e:	bf4c      	ite	mi
 800c160:	801a      	strhmi	r2, [r3, #0]
 800c162:	601a      	strpl	r2, [r3, #0]
 800c164:	e6f4      	b.n	800bf50 <__ssvfiscanf_r+0x50>
 800c166:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c168:	4621      	mov	r1, r4
 800c16a:	4630      	mov	r0, r6
 800c16c:	4798      	blx	r3
 800c16e:	2800      	cmp	r0, #0
 800c170:	d0bf      	beq.n	800c0f2 <__ssvfiscanf_r+0x1f2>
 800c172:	e79f      	b.n	800c0b4 <__ssvfiscanf_r+0x1b4>
 800c174:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c176:	3201      	adds	r2, #1
 800c178:	9245      	str	r2, [sp, #276]	@ 0x114
 800c17a:	6862      	ldr	r2, [r4, #4]
 800c17c:	3a01      	subs	r2, #1
 800c17e:	2a00      	cmp	r2, #0
 800c180:	6062      	str	r2, [r4, #4]
 800c182:	dd02      	ble.n	800c18a <__ssvfiscanf_r+0x28a>
 800c184:	3301      	adds	r3, #1
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	e7b6      	b.n	800c0f8 <__ssvfiscanf_r+0x1f8>
 800c18a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c18c:	4621      	mov	r1, r4
 800c18e:	4630      	mov	r0, r6
 800c190:	4798      	blx	r3
 800c192:	2800      	cmp	r0, #0
 800c194:	d0b0      	beq.n	800c0f8 <__ssvfiscanf_r+0x1f8>
 800c196:	e78d      	b.n	800c0b4 <__ssvfiscanf_r+0x1b4>
 800c198:	2b04      	cmp	r3, #4
 800c19a:	dc0f      	bgt.n	800c1bc <__ssvfiscanf_r+0x2bc>
 800c19c:	466b      	mov	r3, sp
 800c19e:	4622      	mov	r2, r4
 800c1a0:	a941      	add	r1, sp, #260	@ 0x104
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f000 fb4a 	bl	800c83c <_scanf_i>
 800c1a8:	e7b4      	b.n	800c114 <__ssvfiscanf_r+0x214>
 800c1aa:	bf00      	nop
 800c1ac:	0800be4d 	.word	0x0800be4d
 800c1b0:	0800bec7 	.word	0x0800bec7
 800c1b4:	0800e4b9 	.word	0x0800e4b9
 800c1b8:	0800e3de 	.word	0x0800e3de
 800c1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c1e8 <__ssvfiscanf_r+0x2e8>)
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f43f aec6 	beq.w	800bf50 <__ssvfiscanf_r+0x50>
 800c1c4:	466b      	mov	r3, sp
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	a941      	add	r1, sp, #260	@ 0x104
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f7fd ffcc 	bl	800a168 <_scanf_float>
 800c1d0:	e7a0      	b.n	800c114 <__ssvfiscanf_r+0x214>
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	065b      	lsls	r3, r3, #25
 800c1d6:	f53f af71 	bmi.w	800c0bc <__ssvfiscanf_r+0x1bc>
 800c1da:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c1e4:	e7f9      	b.n	800c1da <__ssvfiscanf_r+0x2da>
 800c1e6:	bf00      	nop
 800c1e8:	0800a169 	.word	0x0800a169

0800c1ec <__sfputc_r>:
 800c1ec:	6893      	ldr	r3, [r2, #8]
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	b410      	push	{r4}
 800c1f4:	6093      	str	r3, [r2, #8]
 800c1f6:	da08      	bge.n	800c20a <__sfputc_r+0x1e>
 800c1f8:	6994      	ldr	r4, [r2, #24]
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	db01      	blt.n	800c202 <__sfputc_r+0x16>
 800c1fe:	290a      	cmp	r1, #10
 800c200:	d103      	bne.n	800c20a <__sfputc_r+0x1e>
 800c202:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c206:	f7fe bb12 	b.w	800a82e <__swbuf_r>
 800c20a:	6813      	ldr	r3, [r2, #0]
 800c20c:	1c58      	adds	r0, r3, #1
 800c20e:	6010      	str	r0, [r2, #0]
 800c210:	7019      	strb	r1, [r3, #0]
 800c212:	4608      	mov	r0, r1
 800c214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <__sfputs_r>:
 800c21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21c:	4606      	mov	r6, r0
 800c21e:	460f      	mov	r7, r1
 800c220:	4614      	mov	r4, r2
 800c222:	18d5      	adds	r5, r2, r3
 800c224:	42ac      	cmp	r4, r5
 800c226:	d101      	bne.n	800c22c <__sfputs_r+0x12>
 800c228:	2000      	movs	r0, #0
 800c22a:	e007      	b.n	800c23c <__sfputs_r+0x22>
 800c22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c230:	463a      	mov	r2, r7
 800c232:	4630      	mov	r0, r6
 800c234:	f7ff ffda 	bl	800c1ec <__sfputc_r>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d1f3      	bne.n	800c224 <__sfputs_r+0xa>
 800c23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c240 <_vfiprintf_r>:
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	460d      	mov	r5, r1
 800c246:	b09d      	sub	sp, #116	@ 0x74
 800c248:	4614      	mov	r4, r2
 800c24a:	4698      	mov	r8, r3
 800c24c:	4606      	mov	r6, r0
 800c24e:	b118      	cbz	r0, 800c258 <_vfiprintf_r+0x18>
 800c250:	6a03      	ldr	r3, [r0, #32]
 800c252:	b90b      	cbnz	r3, 800c258 <_vfiprintf_r+0x18>
 800c254:	f7fe fa22 	bl	800a69c <__sinit>
 800c258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c25a:	07d9      	lsls	r1, r3, #31
 800c25c:	d405      	bmi.n	800c26a <_vfiprintf_r+0x2a>
 800c25e:	89ab      	ldrh	r3, [r5, #12]
 800c260:	059a      	lsls	r2, r3, #22
 800c262:	d402      	bmi.n	800c26a <_vfiprintf_r+0x2a>
 800c264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c266:	f7fe fc26 	bl	800aab6 <__retarget_lock_acquire_recursive>
 800c26a:	89ab      	ldrh	r3, [r5, #12]
 800c26c:	071b      	lsls	r3, r3, #28
 800c26e:	d501      	bpl.n	800c274 <_vfiprintf_r+0x34>
 800c270:	692b      	ldr	r3, [r5, #16]
 800c272:	b99b      	cbnz	r3, 800c29c <_vfiprintf_r+0x5c>
 800c274:	4629      	mov	r1, r5
 800c276:	4630      	mov	r0, r6
 800c278:	f7fe fb18 	bl	800a8ac <__swsetup_r>
 800c27c:	b170      	cbz	r0, 800c29c <_vfiprintf_r+0x5c>
 800c27e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c280:	07dc      	lsls	r4, r3, #31
 800c282:	d504      	bpl.n	800c28e <_vfiprintf_r+0x4e>
 800c284:	f04f 30ff 	mov.w	r0, #4294967295
 800c288:	b01d      	add	sp, #116	@ 0x74
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	0598      	lsls	r0, r3, #22
 800c292:	d4f7      	bmi.n	800c284 <_vfiprintf_r+0x44>
 800c294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c296:	f7fe fc0f 	bl	800aab8 <__retarget_lock_release_recursive>
 800c29a:	e7f3      	b.n	800c284 <_vfiprintf_r+0x44>
 800c29c:	2300      	movs	r3, #0
 800c29e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2a0:	2320      	movs	r3, #32
 800c2a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2aa:	2330      	movs	r3, #48	@ 0x30
 800c2ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c45c <_vfiprintf_r+0x21c>
 800c2b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2b4:	f04f 0901 	mov.w	r9, #1
 800c2b8:	4623      	mov	r3, r4
 800c2ba:	469a      	mov	sl, r3
 800c2bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c0:	b10a      	cbz	r2, 800c2c6 <_vfiprintf_r+0x86>
 800c2c2:	2a25      	cmp	r2, #37	@ 0x25
 800c2c4:	d1f9      	bne.n	800c2ba <_vfiprintf_r+0x7a>
 800c2c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ca:	d00b      	beq.n	800c2e4 <_vfiprintf_r+0xa4>
 800c2cc:	465b      	mov	r3, fp
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff ffa1 	bl	800c21a <__sfputs_r>
 800c2d8:	3001      	adds	r0, #1
 800c2da:	f000 80a7 	beq.w	800c42c <_vfiprintf_r+0x1ec>
 800c2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2e0:	445a      	add	r2, fp
 800c2e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 809f 	beq.w	800c42c <_vfiprintf_r+0x1ec>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2f8:	f10a 0a01 	add.w	sl, sl, #1
 800c2fc:	9304      	str	r3, [sp, #16]
 800c2fe:	9307      	str	r3, [sp, #28]
 800c300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c304:	931a      	str	r3, [sp, #104]	@ 0x68
 800c306:	4654      	mov	r4, sl
 800c308:	2205      	movs	r2, #5
 800c30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c30e:	4853      	ldr	r0, [pc, #332]	@ (800c45c <_vfiprintf_r+0x21c>)
 800c310:	f7f3 ff66 	bl	80001e0 <memchr>
 800c314:	9a04      	ldr	r2, [sp, #16]
 800c316:	b9d8      	cbnz	r0, 800c350 <_vfiprintf_r+0x110>
 800c318:	06d1      	lsls	r1, r2, #27
 800c31a:	bf44      	itt	mi
 800c31c:	2320      	movmi	r3, #32
 800c31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c322:	0713      	lsls	r3, r2, #28
 800c324:	bf44      	itt	mi
 800c326:	232b      	movmi	r3, #43	@ 0x2b
 800c328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c32c:	f89a 3000 	ldrb.w	r3, [sl]
 800c330:	2b2a      	cmp	r3, #42	@ 0x2a
 800c332:	d015      	beq.n	800c360 <_vfiprintf_r+0x120>
 800c334:	9a07      	ldr	r2, [sp, #28]
 800c336:	4654      	mov	r4, sl
 800c338:	2000      	movs	r0, #0
 800c33a:	f04f 0c0a 	mov.w	ip, #10
 800c33e:	4621      	mov	r1, r4
 800c340:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c344:	3b30      	subs	r3, #48	@ 0x30
 800c346:	2b09      	cmp	r3, #9
 800c348:	d94b      	bls.n	800c3e2 <_vfiprintf_r+0x1a2>
 800c34a:	b1b0      	cbz	r0, 800c37a <_vfiprintf_r+0x13a>
 800c34c:	9207      	str	r2, [sp, #28]
 800c34e:	e014      	b.n	800c37a <_vfiprintf_r+0x13a>
 800c350:	eba0 0308 	sub.w	r3, r0, r8
 800c354:	fa09 f303 	lsl.w	r3, r9, r3
 800c358:	4313      	orrs	r3, r2
 800c35a:	9304      	str	r3, [sp, #16]
 800c35c:	46a2      	mov	sl, r4
 800c35e:	e7d2      	b.n	800c306 <_vfiprintf_r+0xc6>
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	1d19      	adds	r1, r3, #4
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	9103      	str	r1, [sp, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bfbb      	ittet	lt
 800c36c:	425b      	neglt	r3, r3
 800c36e:	f042 0202 	orrlt.w	r2, r2, #2
 800c372:	9307      	strge	r3, [sp, #28]
 800c374:	9307      	strlt	r3, [sp, #28]
 800c376:	bfb8      	it	lt
 800c378:	9204      	strlt	r2, [sp, #16]
 800c37a:	7823      	ldrb	r3, [r4, #0]
 800c37c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c37e:	d10a      	bne.n	800c396 <_vfiprintf_r+0x156>
 800c380:	7863      	ldrb	r3, [r4, #1]
 800c382:	2b2a      	cmp	r3, #42	@ 0x2a
 800c384:	d132      	bne.n	800c3ec <_vfiprintf_r+0x1ac>
 800c386:	9b03      	ldr	r3, [sp, #12]
 800c388:	1d1a      	adds	r2, r3, #4
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	9203      	str	r2, [sp, #12]
 800c38e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c392:	3402      	adds	r4, #2
 800c394:	9305      	str	r3, [sp, #20]
 800c396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c46c <_vfiprintf_r+0x22c>
 800c39a:	7821      	ldrb	r1, [r4, #0]
 800c39c:	2203      	movs	r2, #3
 800c39e:	4650      	mov	r0, sl
 800c3a0:	f7f3 ff1e 	bl	80001e0 <memchr>
 800c3a4:	b138      	cbz	r0, 800c3b6 <_vfiprintf_r+0x176>
 800c3a6:	9b04      	ldr	r3, [sp, #16]
 800c3a8:	eba0 000a 	sub.w	r0, r0, sl
 800c3ac:	2240      	movs	r2, #64	@ 0x40
 800c3ae:	4082      	lsls	r2, r0
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	3401      	adds	r4, #1
 800c3b4:	9304      	str	r3, [sp, #16]
 800c3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ba:	4829      	ldr	r0, [pc, #164]	@ (800c460 <_vfiprintf_r+0x220>)
 800c3bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3c0:	2206      	movs	r2, #6
 800c3c2:	f7f3 ff0d 	bl	80001e0 <memchr>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d03f      	beq.n	800c44a <_vfiprintf_r+0x20a>
 800c3ca:	4b26      	ldr	r3, [pc, #152]	@ (800c464 <_vfiprintf_r+0x224>)
 800c3cc:	bb1b      	cbnz	r3, 800c416 <_vfiprintf_r+0x1d6>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	3307      	adds	r3, #7
 800c3d2:	f023 0307 	bic.w	r3, r3, #7
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	9303      	str	r3, [sp, #12]
 800c3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3dc:	443b      	add	r3, r7
 800c3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3e0:	e76a      	b.n	800c2b8 <_vfiprintf_r+0x78>
 800c3e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	e7a8      	b.n	800c33e <_vfiprintf_r+0xfe>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	3401      	adds	r4, #1
 800c3f0:	9305      	str	r3, [sp, #20]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	f04f 0c0a 	mov.w	ip, #10
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3fe:	3a30      	subs	r2, #48	@ 0x30
 800c400:	2a09      	cmp	r2, #9
 800c402:	d903      	bls.n	800c40c <_vfiprintf_r+0x1cc>
 800c404:	2b00      	cmp	r3, #0
 800c406:	d0c6      	beq.n	800c396 <_vfiprintf_r+0x156>
 800c408:	9105      	str	r1, [sp, #20]
 800c40a:	e7c4      	b.n	800c396 <_vfiprintf_r+0x156>
 800c40c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c410:	4604      	mov	r4, r0
 800c412:	2301      	movs	r3, #1
 800c414:	e7f0      	b.n	800c3f8 <_vfiprintf_r+0x1b8>
 800c416:	ab03      	add	r3, sp, #12
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	462a      	mov	r2, r5
 800c41c:	4b12      	ldr	r3, [pc, #72]	@ (800c468 <_vfiprintf_r+0x228>)
 800c41e:	a904      	add	r1, sp, #16
 800c420:	4630      	mov	r0, r6
 800c422:	f3af 8000 	nop.w
 800c426:	4607      	mov	r7, r0
 800c428:	1c78      	adds	r0, r7, #1
 800c42a:	d1d6      	bne.n	800c3da <_vfiprintf_r+0x19a>
 800c42c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c42e:	07d9      	lsls	r1, r3, #31
 800c430:	d405      	bmi.n	800c43e <_vfiprintf_r+0x1fe>
 800c432:	89ab      	ldrh	r3, [r5, #12]
 800c434:	059a      	lsls	r2, r3, #22
 800c436:	d402      	bmi.n	800c43e <_vfiprintf_r+0x1fe>
 800c438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c43a:	f7fe fb3d 	bl	800aab8 <__retarget_lock_release_recursive>
 800c43e:	89ab      	ldrh	r3, [r5, #12]
 800c440:	065b      	lsls	r3, r3, #25
 800c442:	f53f af1f 	bmi.w	800c284 <_vfiprintf_r+0x44>
 800c446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c448:	e71e      	b.n	800c288 <_vfiprintf_r+0x48>
 800c44a:	ab03      	add	r3, sp, #12
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	462a      	mov	r2, r5
 800c450:	4b05      	ldr	r3, [pc, #20]	@ (800c468 <_vfiprintf_r+0x228>)
 800c452:	a904      	add	r1, sp, #16
 800c454:	4630      	mov	r0, r6
 800c456:	f000 f879 	bl	800c54c <_printf_i>
 800c45a:	e7e4      	b.n	800c426 <_vfiprintf_r+0x1e6>
 800c45c:	0800e3d8 	.word	0x0800e3d8
 800c460:	0800e3e2 	.word	0x0800e3e2
 800c464:	00000000 	.word	0x00000000
 800c468:	0800c21b 	.word	0x0800c21b
 800c46c:	0800e3de 	.word	0x0800e3de

0800c470 <_printf_common>:
 800c470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c474:	4616      	mov	r6, r2
 800c476:	4698      	mov	r8, r3
 800c478:	688a      	ldr	r2, [r1, #8]
 800c47a:	690b      	ldr	r3, [r1, #16]
 800c47c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c480:	4293      	cmp	r3, r2
 800c482:	bfb8      	it	lt
 800c484:	4613      	movlt	r3, r2
 800c486:	6033      	str	r3, [r6, #0]
 800c488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c48c:	4607      	mov	r7, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b10a      	cbz	r2, 800c496 <_printf_common+0x26>
 800c492:	3301      	adds	r3, #1
 800c494:	6033      	str	r3, [r6, #0]
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	0699      	lsls	r1, r3, #26
 800c49a:	bf42      	ittt	mi
 800c49c:	6833      	ldrmi	r3, [r6, #0]
 800c49e:	3302      	addmi	r3, #2
 800c4a0:	6033      	strmi	r3, [r6, #0]
 800c4a2:	6825      	ldr	r5, [r4, #0]
 800c4a4:	f015 0506 	ands.w	r5, r5, #6
 800c4a8:	d106      	bne.n	800c4b8 <_printf_common+0x48>
 800c4aa:	f104 0a19 	add.w	sl, r4, #25
 800c4ae:	68e3      	ldr	r3, [r4, #12]
 800c4b0:	6832      	ldr	r2, [r6, #0]
 800c4b2:	1a9b      	subs	r3, r3, r2
 800c4b4:	42ab      	cmp	r3, r5
 800c4b6:	dc26      	bgt.n	800c506 <_printf_common+0x96>
 800c4b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4bc:	6822      	ldr	r2, [r4, #0]
 800c4be:	3b00      	subs	r3, #0
 800c4c0:	bf18      	it	ne
 800c4c2:	2301      	movne	r3, #1
 800c4c4:	0692      	lsls	r2, r2, #26
 800c4c6:	d42b      	bmi.n	800c520 <_printf_common+0xb0>
 800c4c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c4cc:	4641      	mov	r1, r8
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	47c8      	blx	r9
 800c4d2:	3001      	adds	r0, #1
 800c4d4:	d01e      	beq.n	800c514 <_printf_common+0xa4>
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	6922      	ldr	r2, [r4, #16]
 800c4da:	f003 0306 	and.w	r3, r3, #6
 800c4de:	2b04      	cmp	r3, #4
 800c4e0:	bf02      	ittt	eq
 800c4e2:	68e5      	ldreq	r5, [r4, #12]
 800c4e4:	6833      	ldreq	r3, [r6, #0]
 800c4e6:	1aed      	subeq	r5, r5, r3
 800c4e8:	68a3      	ldr	r3, [r4, #8]
 800c4ea:	bf0c      	ite	eq
 800c4ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4f0:	2500      	movne	r5, #0
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	bfc4      	itt	gt
 800c4f6:	1a9b      	subgt	r3, r3, r2
 800c4f8:	18ed      	addgt	r5, r5, r3
 800c4fa:	2600      	movs	r6, #0
 800c4fc:	341a      	adds	r4, #26
 800c4fe:	42b5      	cmp	r5, r6
 800c500:	d11a      	bne.n	800c538 <_printf_common+0xc8>
 800c502:	2000      	movs	r0, #0
 800c504:	e008      	b.n	800c518 <_printf_common+0xa8>
 800c506:	2301      	movs	r3, #1
 800c508:	4652      	mov	r2, sl
 800c50a:	4641      	mov	r1, r8
 800c50c:	4638      	mov	r0, r7
 800c50e:	47c8      	blx	r9
 800c510:	3001      	adds	r0, #1
 800c512:	d103      	bne.n	800c51c <_printf_common+0xac>
 800c514:	f04f 30ff 	mov.w	r0, #4294967295
 800c518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c51c:	3501      	adds	r5, #1
 800c51e:	e7c6      	b.n	800c4ae <_printf_common+0x3e>
 800c520:	18e1      	adds	r1, r4, r3
 800c522:	1c5a      	adds	r2, r3, #1
 800c524:	2030      	movs	r0, #48	@ 0x30
 800c526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c52a:	4422      	add	r2, r4
 800c52c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c534:	3302      	adds	r3, #2
 800c536:	e7c7      	b.n	800c4c8 <_printf_common+0x58>
 800c538:	2301      	movs	r3, #1
 800c53a:	4622      	mov	r2, r4
 800c53c:	4641      	mov	r1, r8
 800c53e:	4638      	mov	r0, r7
 800c540:	47c8      	blx	r9
 800c542:	3001      	adds	r0, #1
 800c544:	d0e6      	beq.n	800c514 <_printf_common+0xa4>
 800c546:	3601      	adds	r6, #1
 800c548:	e7d9      	b.n	800c4fe <_printf_common+0x8e>
	...

0800c54c <_printf_i>:
 800c54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c550:	7e0f      	ldrb	r7, [r1, #24]
 800c552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c554:	2f78      	cmp	r7, #120	@ 0x78
 800c556:	4691      	mov	r9, r2
 800c558:	4680      	mov	r8, r0
 800c55a:	460c      	mov	r4, r1
 800c55c:	469a      	mov	sl, r3
 800c55e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c562:	d807      	bhi.n	800c574 <_printf_i+0x28>
 800c564:	2f62      	cmp	r7, #98	@ 0x62
 800c566:	d80a      	bhi.n	800c57e <_printf_i+0x32>
 800c568:	2f00      	cmp	r7, #0
 800c56a:	f000 80d1 	beq.w	800c710 <_printf_i+0x1c4>
 800c56e:	2f58      	cmp	r7, #88	@ 0x58
 800c570:	f000 80b8 	beq.w	800c6e4 <_printf_i+0x198>
 800c574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c57c:	e03a      	b.n	800c5f4 <_printf_i+0xa8>
 800c57e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c582:	2b15      	cmp	r3, #21
 800c584:	d8f6      	bhi.n	800c574 <_printf_i+0x28>
 800c586:	a101      	add	r1, pc, #4	@ (adr r1, 800c58c <_printf_i+0x40>)
 800c588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c58c:	0800c5e5 	.word	0x0800c5e5
 800c590:	0800c5f9 	.word	0x0800c5f9
 800c594:	0800c575 	.word	0x0800c575
 800c598:	0800c575 	.word	0x0800c575
 800c59c:	0800c575 	.word	0x0800c575
 800c5a0:	0800c575 	.word	0x0800c575
 800c5a4:	0800c5f9 	.word	0x0800c5f9
 800c5a8:	0800c575 	.word	0x0800c575
 800c5ac:	0800c575 	.word	0x0800c575
 800c5b0:	0800c575 	.word	0x0800c575
 800c5b4:	0800c575 	.word	0x0800c575
 800c5b8:	0800c6f7 	.word	0x0800c6f7
 800c5bc:	0800c623 	.word	0x0800c623
 800c5c0:	0800c6b1 	.word	0x0800c6b1
 800c5c4:	0800c575 	.word	0x0800c575
 800c5c8:	0800c575 	.word	0x0800c575
 800c5cc:	0800c719 	.word	0x0800c719
 800c5d0:	0800c575 	.word	0x0800c575
 800c5d4:	0800c623 	.word	0x0800c623
 800c5d8:	0800c575 	.word	0x0800c575
 800c5dc:	0800c575 	.word	0x0800c575
 800c5e0:	0800c6b9 	.word	0x0800c6b9
 800c5e4:	6833      	ldr	r3, [r6, #0]
 800c5e6:	1d1a      	adds	r2, r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6032      	str	r2, [r6, #0]
 800c5ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e09c      	b.n	800c732 <_printf_i+0x1e6>
 800c5f8:	6833      	ldr	r3, [r6, #0]
 800c5fa:	6820      	ldr	r0, [r4, #0]
 800c5fc:	1d19      	adds	r1, r3, #4
 800c5fe:	6031      	str	r1, [r6, #0]
 800c600:	0606      	lsls	r6, r0, #24
 800c602:	d501      	bpl.n	800c608 <_printf_i+0xbc>
 800c604:	681d      	ldr	r5, [r3, #0]
 800c606:	e003      	b.n	800c610 <_printf_i+0xc4>
 800c608:	0645      	lsls	r5, r0, #25
 800c60a:	d5fb      	bpl.n	800c604 <_printf_i+0xb8>
 800c60c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c610:	2d00      	cmp	r5, #0
 800c612:	da03      	bge.n	800c61c <_printf_i+0xd0>
 800c614:	232d      	movs	r3, #45	@ 0x2d
 800c616:	426d      	negs	r5, r5
 800c618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c61c:	4858      	ldr	r0, [pc, #352]	@ (800c780 <_printf_i+0x234>)
 800c61e:	230a      	movs	r3, #10
 800c620:	e011      	b.n	800c646 <_printf_i+0xfa>
 800c622:	6821      	ldr	r1, [r4, #0]
 800c624:	6833      	ldr	r3, [r6, #0]
 800c626:	0608      	lsls	r0, r1, #24
 800c628:	f853 5b04 	ldr.w	r5, [r3], #4
 800c62c:	d402      	bmi.n	800c634 <_printf_i+0xe8>
 800c62e:	0649      	lsls	r1, r1, #25
 800c630:	bf48      	it	mi
 800c632:	b2ad      	uxthmi	r5, r5
 800c634:	2f6f      	cmp	r7, #111	@ 0x6f
 800c636:	4852      	ldr	r0, [pc, #328]	@ (800c780 <_printf_i+0x234>)
 800c638:	6033      	str	r3, [r6, #0]
 800c63a:	bf14      	ite	ne
 800c63c:	230a      	movne	r3, #10
 800c63e:	2308      	moveq	r3, #8
 800c640:	2100      	movs	r1, #0
 800c642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c646:	6866      	ldr	r6, [r4, #4]
 800c648:	60a6      	str	r6, [r4, #8]
 800c64a:	2e00      	cmp	r6, #0
 800c64c:	db05      	blt.n	800c65a <_printf_i+0x10e>
 800c64e:	6821      	ldr	r1, [r4, #0]
 800c650:	432e      	orrs	r6, r5
 800c652:	f021 0104 	bic.w	r1, r1, #4
 800c656:	6021      	str	r1, [r4, #0]
 800c658:	d04b      	beq.n	800c6f2 <_printf_i+0x1a6>
 800c65a:	4616      	mov	r6, r2
 800c65c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c660:	fb03 5711 	mls	r7, r3, r1, r5
 800c664:	5dc7      	ldrb	r7, [r0, r7]
 800c666:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c66a:	462f      	mov	r7, r5
 800c66c:	42bb      	cmp	r3, r7
 800c66e:	460d      	mov	r5, r1
 800c670:	d9f4      	bls.n	800c65c <_printf_i+0x110>
 800c672:	2b08      	cmp	r3, #8
 800c674:	d10b      	bne.n	800c68e <_printf_i+0x142>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	07df      	lsls	r7, r3, #31
 800c67a:	d508      	bpl.n	800c68e <_printf_i+0x142>
 800c67c:	6923      	ldr	r3, [r4, #16]
 800c67e:	6861      	ldr	r1, [r4, #4]
 800c680:	4299      	cmp	r1, r3
 800c682:	bfde      	ittt	le
 800c684:	2330      	movle	r3, #48	@ 0x30
 800c686:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c68a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c68e:	1b92      	subs	r2, r2, r6
 800c690:	6122      	str	r2, [r4, #16]
 800c692:	f8cd a000 	str.w	sl, [sp]
 800c696:	464b      	mov	r3, r9
 800c698:	aa03      	add	r2, sp, #12
 800c69a:	4621      	mov	r1, r4
 800c69c:	4640      	mov	r0, r8
 800c69e:	f7ff fee7 	bl	800c470 <_printf_common>
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d14a      	bne.n	800c73c <_printf_i+0x1f0>
 800c6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6aa:	b004      	add	sp, #16
 800c6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	f043 0320 	orr.w	r3, r3, #32
 800c6b6:	6023      	str	r3, [r4, #0]
 800c6b8:	4832      	ldr	r0, [pc, #200]	@ (800c784 <_printf_i+0x238>)
 800c6ba:	2778      	movs	r7, #120	@ 0x78
 800c6bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6c0:	6823      	ldr	r3, [r4, #0]
 800c6c2:	6831      	ldr	r1, [r6, #0]
 800c6c4:	061f      	lsls	r7, r3, #24
 800c6c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c6ca:	d402      	bmi.n	800c6d2 <_printf_i+0x186>
 800c6cc:	065f      	lsls	r7, r3, #25
 800c6ce:	bf48      	it	mi
 800c6d0:	b2ad      	uxthmi	r5, r5
 800c6d2:	6031      	str	r1, [r6, #0]
 800c6d4:	07d9      	lsls	r1, r3, #31
 800c6d6:	bf44      	itt	mi
 800c6d8:	f043 0320 	orrmi.w	r3, r3, #32
 800c6dc:	6023      	strmi	r3, [r4, #0]
 800c6de:	b11d      	cbz	r5, 800c6e8 <_printf_i+0x19c>
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	e7ad      	b.n	800c640 <_printf_i+0xf4>
 800c6e4:	4826      	ldr	r0, [pc, #152]	@ (800c780 <_printf_i+0x234>)
 800c6e6:	e7e9      	b.n	800c6bc <_printf_i+0x170>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	f023 0320 	bic.w	r3, r3, #32
 800c6ee:	6023      	str	r3, [r4, #0]
 800c6f0:	e7f6      	b.n	800c6e0 <_printf_i+0x194>
 800c6f2:	4616      	mov	r6, r2
 800c6f4:	e7bd      	b.n	800c672 <_printf_i+0x126>
 800c6f6:	6833      	ldr	r3, [r6, #0]
 800c6f8:	6825      	ldr	r5, [r4, #0]
 800c6fa:	6961      	ldr	r1, [r4, #20]
 800c6fc:	1d18      	adds	r0, r3, #4
 800c6fe:	6030      	str	r0, [r6, #0]
 800c700:	062e      	lsls	r6, r5, #24
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	d501      	bpl.n	800c70a <_printf_i+0x1be>
 800c706:	6019      	str	r1, [r3, #0]
 800c708:	e002      	b.n	800c710 <_printf_i+0x1c4>
 800c70a:	0668      	lsls	r0, r5, #25
 800c70c:	d5fb      	bpl.n	800c706 <_printf_i+0x1ba>
 800c70e:	8019      	strh	r1, [r3, #0]
 800c710:	2300      	movs	r3, #0
 800c712:	6123      	str	r3, [r4, #16]
 800c714:	4616      	mov	r6, r2
 800c716:	e7bc      	b.n	800c692 <_printf_i+0x146>
 800c718:	6833      	ldr	r3, [r6, #0]
 800c71a:	1d1a      	adds	r2, r3, #4
 800c71c:	6032      	str	r2, [r6, #0]
 800c71e:	681e      	ldr	r6, [r3, #0]
 800c720:	6862      	ldr	r2, [r4, #4]
 800c722:	2100      	movs	r1, #0
 800c724:	4630      	mov	r0, r6
 800c726:	f7f3 fd5b 	bl	80001e0 <memchr>
 800c72a:	b108      	cbz	r0, 800c730 <_printf_i+0x1e4>
 800c72c:	1b80      	subs	r0, r0, r6
 800c72e:	6060      	str	r0, [r4, #4]
 800c730:	6863      	ldr	r3, [r4, #4]
 800c732:	6123      	str	r3, [r4, #16]
 800c734:	2300      	movs	r3, #0
 800c736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c73a:	e7aa      	b.n	800c692 <_printf_i+0x146>
 800c73c:	6923      	ldr	r3, [r4, #16]
 800c73e:	4632      	mov	r2, r6
 800c740:	4649      	mov	r1, r9
 800c742:	4640      	mov	r0, r8
 800c744:	47d0      	blx	sl
 800c746:	3001      	adds	r0, #1
 800c748:	d0ad      	beq.n	800c6a6 <_printf_i+0x15a>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	079b      	lsls	r3, r3, #30
 800c74e:	d413      	bmi.n	800c778 <_printf_i+0x22c>
 800c750:	68e0      	ldr	r0, [r4, #12]
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	4298      	cmp	r0, r3
 800c756:	bfb8      	it	lt
 800c758:	4618      	movlt	r0, r3
 800c75a:	e7a6      	b.n	800c6aa <_printf_i+0x15e>
 800c75c:	2301      	movs	r3, #1
 800c75e:	4632      	mov	r2, r6
 800c760:	4649      	mov	r1, r9
 800c762:	4640      	mov	r0, r8
 800c764:	47d0      	blx	sl
 800c766:	3001      	adds	r0, #1
 800c768:	d09d      	beq.n	800c6a6 <_printf_i+0x15a>
 800c76a:	3501      	adds	r5, #1
 800c76c:	68e3      	ldr	r3, [r4, #12]
 800c76e:	9903      	ldr	r1, [sp, #12]
 800c770:	1a5b      	subs	r3, r3, r1
 800c772:	42ab      	cmp	r3, r5
 800c774:	dcf2      	bgt.n	800c75c <_printf_i+0x210>
 800c776:	e7eb      	b.n	800c750 <_printf_i+0x204>
 800c778:	2500      	movs	r5, #0
 800c77a:	f104 0619 	add.w	r6, r4, #25
 800c77e:	e7f5      	b.n	800c76c <_printf_i+0x220>
 800c780:	0800e3e9 	.word	0x0800e3e9
 800c784:	0800e3fa 	.word	0x0800e3fa

0800c788 <_scanf_chars>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	4615      	mov	r5, r2
 800c78e:	688a      	ldr	r2, [r1, #8]
 800c790:	4680      	mov	r8, r0
 800c792:	460c      	mov	r4, r1
 800c794:	b932      	cbnz	r2, 800c7a4 <_scanf_chars+0x1c>
 800c796:	698a      	ldr	r2, [r1, #24]
 800c798:	2a00      	cmp	r2, #0
 800c79a:	bf14      	ite	ne
 800c79c:	f04f 32ff 	movne.w	r2, #4294967295
 800c7a0:	2201      	moveq	r2, #1
 800c7a2:	608a      	str	r2, [r1, #8]
 800c7a4:	6822      	ldr	r2, [r4, #0]
 800c7a6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c838 <_scanf_chars+0xb0>
 800c7aa:	06d1      	lsls	r1, r2, #27
 800c7ac:	bf5f      	itttt	pl
 800c7ae:	681a      	ldrpl	r2, [r3, #0]
 800c7b0:	1d11      	addpl	r1, r2, #4
 800c7b2:	6019      	strpl	r1, [r3, #0]
 800c7b4:	6816      	ldrpl	r6, [r2, #0]
 800c7b6:	2700      	movs	r7, #0
 800c7b8:	69a0      	ldr	r0, [r4, #24]
 800c7ba:	b188      	cbz	r0, 800c7e0 <_scanf_chars+0x58>
 800c7bc:	2801      	cmp	r0, #1
 800c7be:	d107      	bne.n	800c7d0 <_scanf_chars+0x48>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	781a      	ldrb	r2, [r3, #0]
 800c7c4:	6963      	ldr	r3, [r4, #20]
 800c7c6:	5c9b      	ldrb	r3, [r3, r2]
 800c7c8:	b953      	cbnz	r3, 800c7e0 <_scanf_chars+0x58>
 800c7ca:	2f00      	cmp	r7, #0
 800c7cc:	d031      	beq.n	800c832 <_scanf_chars+0xaa>
 800c7ce:	e022      	b.n	800c816 <_scanf_chars+0x8e>
 800c7d0:	2802      	cmp	r0, #2
 800c7d2:	d120      	bne.n	800c816 <_scanf_chars+0x8e>
 800c7d4:	682b      	ldr	r3, [r5, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c7dc:	071b      	lsls	r3, r3, #28
 800c7de:	d41a      	bmi.n	800c816 <_scanf_chars+0x8e>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	06da      	lsls	r2, r3, #27
 800c7e4:	bf5e      	ittt	pl
 800c7e6:	682b      	ldrpl	r3, [r5, #0]
 800c7e8:	781b      	ldrbpl	r3, [r3, #0]
 800c7ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c7ee:	682a      	ldr	r2, [r5, #0]
 800c7f0:	686b      	ldr	r3, [r5, #4]
 800c7f2:	3201      	adds	r2, #1
 800c7f4:	602a      	str	r2, [r5, #0]
 800c7f6:	68a2      	ldr	r2, [r4, #8]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	3a01      	subs	r2, #1
 800c7fc:	606b      	str	r3, [r5, #4]
 800c7fe:	3701      	adds	r7, #1
 800c800:	60a2      	str	r2, [r4, #8]
 800c802:	b142      	cbz	r2, 800c816 <_scanf_chars+0x8e>
 800c804:	2b00      	cmp	r3, #0
 800c806:	dcd7      	bgt.n	800c7b8 <_scanf_chars+0x30>
 800c808:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c80c:	4629      	mov	r1, r5
 800c80e:	4640      	mov	r0, r8
 800c810:	4798      	blx	r3
 800c812:	2800      	cmp	r0, #0
 800c814:	d0d0      	beq.n	800c7b8 <_scanf_chars+0x30>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	f013 0310 	ands.w	r3, r3, #16
 800c81c:	d105      	bne.n	800c82a <_scanf_chars+0xa2>
 800c81e:	68e2      	ldr	r2, [r4, #12]
 800c820:	3201      	adds	r2, #1
 800c822:	60e2      	str	r2, [r4, #12]
 800c824:	69a2      	ldr	r2, [r4, #24]
 800c826:	b102      	cbz	r2, 800c82a <_scanf_chars+0xa2>
 800c828:	7033      	strb	r3, [r6, #0]
 800c82a:	6923      	ldr	r3, [r4, #16]
 800c82c:	443b      	add	r3, r7
 800c82e:	6123      	str	r3, [r4, #16]
 800c830:	2000      	movs	r0, #0
 800c832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c836:	bf00      	nop
 800c838:	0800e4b9 	.word	0x0800e4b9

0800c83c <_scanf_i>:
 800c83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c840:	4698      	mov	r8, r3
 800c842:	4b74      	ldr	r3, [pc, #464]	@ (800ca14 <_scanf_i+0x1d8>)
 800c844:	460c      	mov	r4, r1
 800c846:	4682      	mov	sl, r0
 800c848:	4616      	mov	r6, r2
 800c84a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c84e:	b087      	sub	sp, #28
 800c850:	ab03      	add	r3, sp, #12
 800c852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c856:	4b70      	ldr	r3, [pc, #448]	@ (800ca18 <_scanf_i+0x1dc>)
 800c858:	69a1      	ldr	r1, [r4, #24]
 800c85a:	4a70      	ldr	r2, [pc, #448]	@ (800ca1c <_scanf_i+0x1e0>)
 800c85c:	2903      	cmp	r1, #3
 800c85e:	bf08      	it	eq
 800c860:	461a      	moveq	r2, r3
 800c862:	68a3      	ldr	r3, [r4, #8]
 800c864:	9201      	str	r2, [sp, #4]
 800c866:	1e5a      	subs	r2, r3, #1
 800c868:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c86c:	bf88      	it	hi
 800c86e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c872:	4627      	mov	r7, r4
 800c874:	bf82      	ittt	hi
 800c876:	eb03 0905 	addhi.w	r9, r3, r5
 800c87a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c87e:	60a3      	strhi	r3, [r4, #8]
 800c880:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c884:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c888:	bf98      	it	ls
 800c88a:	f04f 0900 	movls.w	r9, #0
 800c88e:	6023      	str	r3, [r4, #0]
 800c890:	463d      	mov	r5, r7
 800c892:	f04f 0b00 	mov.w	fp, #0
 800c896:	6831      	ldr	r1, [r6, #0]
 800c898:	ab03      	add	r3, sp, #12
 800c89a:	7809      	ldrb	r1, [r1, #0]
 800c89c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c8a0:	2202      	movs	r2, #2
 800c8a2:	f7f3 fc9d 	bl	80001e0 <memchr>
 800c8a6:	b328      	cbz	r0, 800c8f4 <_scanf_i+0xb8>
 800c8a8:	f1bb 0f01 	cmp.w	fp, #1
 800c8ac:	d159      	bne.n	800c962 <_scanf_i+0x126>
 800c8ae:	6862      	ldr	r2, [r4, #4]
 800c8b0:	b92a      	cbnz	r2, 800c8be <_scanf_i+0x82>
 800c8b2:	6822      	ldr	r2, [r4, #0]
 800c8b4:	2108      	movs	r1, #8
 800c8b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8ba:	6061      	str	r1, [r4, #4]
 800c8bc:	6022      	str	r2, [r4, #0]
 800c8be:	6822      	ldr	r2, [r4, #0]
 800c8c0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c8c4:	6022      	str	r2, [r4, #0]
 800c8c6:	68a2      	ldr	r2, [r4, #8]
 800c8c8:	1e51      	subs	r1, r2, #1
 800c8ca:	60a1      	str	r1, [r4, #8]
 800c8cc:	b192      	cbz	r2, 800c8f4 <_scanf_i+0xb8>
 800c8ce:	6832      	ldr	r2, [r6, #0]
 800c8d0:	1c51      	adds	r1, r2, #1
 800c8d2:	6031      	str	r1, [r6, #0]
 800c8d4:	7812      	ldrb	r2, [r2, #0]
 800c8d6:	f805 2b01 	strb.w	r2, [r5], #1
 800c8da:	6872      	ldr	r2, [r6, #4]
 800c8dc:	3a01      	subs	r2, #1
 800c8de:	2a00      	cmp	r2, #0
 800c8e0:	6072      	str	r2, [r6, #4]
 800c8e2:	dc07      	bgt.n	800c8f4 <_scanf_i+0xb8>
 800c8e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	4650      	mov	r0, sl
 800c8ec:	4790      	blx	r2
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f040 8085 	bne.w	800c9fe <_scanf_i+0x1c2>
 800c8f4:	f10b 0b01 	add.w	fp, fp, #1
 800c8f8:	f1bb 0f03 	cmp.w	fp, #3
 800c8fc:	d1cb      	bne.n	800c896 <_scanf_i+0x5a>
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	b90b      	cbnz	r3, 800c906 <_scanf_i+0xca>
 800c902:	230a      	movs	r3, #10
 800c904:	6063      	str	r3, [r4, #4]
 800c906:	6863      	ldr	r3, [r4, #4]
 800c908:	4945      	ldr	r1, [pc, #276]	@ (800ca20 <_scanf_i+0x1e4>)
 800c90a:	6960      	ldr	r0, [r4, #20]
 800c90c:	1ac9      	subs	r1, r1, r3
 800c90e:	f000 f997 	bl	800cc40 <__sccl>
 800c912:	f04f 0b00 	mov.w	fp, #0
 800c916:	68a3      	ldr	r3, [r4, #8]
 800c918:	6822      	ldr	r2, [r4, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d03d      	beq.n	800c99a <_scanf_i+0x15e>
 800c91e:	6831      	ldr	r1, [r6, #0]
 800c920:	6960      	ldr	r0, [r4, #20]
 800c922:	f891 c000 	ldrb.w	ip, [r1]
 800c926:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d035      	beq.n	800c99a <_scanf_i+0x15e>
 800c92e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c932:	d124      	bne.n	800c97e <_scanf_i+0x142>
 800c934:	0510      	lsls	r0, r2, #20
 800c936:	d522      	bpl.n	800c97e <_scanf_i+0x142>
 800c938:	f10b 0b01 	add.w	fp, fp, #1
 800c93c:	f1b9 0f00 	cmp.w	r9, #0
 800c940:	d003      	beq.n	800c94a <_scanf_i+0x10e>
 800c942:	3301      	adds	r3, #1
 800c944:	f109 39ff 	add.w	r9, r9, #4294967295
 800c948:	60a3      	str	r3, [r4, #8]
 800c94a:	6873      	ldr	r3, [r6, #4]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	6073      	str	r3, [r6, #4]
 800c952:	dd1b      	ble.n	800c98c <_scanf_i+0x150>
 800c954:	6833      	ldr	r3, [r6, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	6033      	str	r3, [r6, #0]
 800c95a:	68a3      	ldr	r3, [r4, #8]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	60a3      	str	r3, [r4, #8]
 800c960:	e7d9      	b.n	800c916 <_scanf_i+0xda>
 800c962:	f1bb 0f02 	cmp.w	fp, #2
 800c966:	d1ae      	bne.n	800c8c6 <_scanf_i+0x8a>
 800c968:	6822      	ldr	r2, [r4, #0]
 800c96a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c96e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c972:	d1c4      	bne.n	800c8fe <_scanf_i+0xc2>
 800c974:	2110      	movs	r1, #16
 800c976:	6061      	str	r1, [r4, #4]
 800c978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c97c:	e7a2      	b.n	800c8c4 <_scanf_i+0x88>
 800c97e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c982:	6022      	str	r2, [r4, #0]
 800c984:	780b      	ldrb	r3, [r1, #0]
 800c986:	f805 3b01 	strb.w	r3, [r5], #1
 800c98a:	e7de      	b.n	800c94a <_scanf_i+0x10e>
 800c98c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c990:	4631      	mov	r1, r6
 800c992:	4650      	mov	r0, sl
 800c994:	4798      	blx	r3
 800c996:	2800      	cmp	r0, #0
 800c998:	d0df      	beq.n	800c95a <_scanf_i+0x11e>
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	05d9      	lsls	r1, r3, #23
 800c99e:	d50d      	bpl.n	800c9bc <_scanf_i+0x180>
 800c9a0:	42bd      	cmp	r5, r7
 800c9a2:	d909      	bls.n	800c9b8 <_scanf_i+0x17c>
 800c9a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c9a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9ac:	4632      	mov	r2, r6
 800c9ae:	4650      	mov	r0, sl
 800c9b0:	4798      	blx	r3
 800c9b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c9b6:	464d      	mov	r5, r9
 800c9b8:	42bd      	cmp	r5, r7
 800c9ba:	d028      	beq.n	800ca0e <_scanf_i+0x1d2>
 800c9bc:	6822      	ldr	r2, [r4, #0]
 800c9be:	f012 0210 	ands.w	r2, r2, #16
 800c9c2:	d113      	bne.n	800c9ec <_scanf_i+0x1b0>
 800c9c4:	702a      	strb	r2, [r5, #0]
 800c9c6:	6863      	ldr	r3, [r4, #4]
 800c9c8:	9e01      	ldr	r6, [sp, #4]
 800c9ca:	4639      	mov	r1, r7
 800c9cc:	4650      	mov	r0, sl
 800c9ce:	47b0      	blx	r6
 800c9d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c9d4:	6821      	ldr	r1, [r4, #0]
 800c9d6:	1d1a      	adds	r2, r3, #4
 800c9d8:	f8c8 2000 	str.w	r2, [r8]
 800c9dc:	f011 0f20 	tst.w	r1, #32
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	d00f      	beq.n	800ca04 <_scanf_i+0x1c8>
 800c9e4:	6018      	str	r0, [r3, #0]
 800c9e6:	68e3      	ldr	r3, [r4, #12]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	60e3      	str	r3, [r4, #12]
 800c9ec:	6923      	ldr	r3, [r4, #16]
 800c9ee:	1bed      	subs	r5, r5, r7
 800c9f0:	445d      	add	r5, fp
 800c9f2:	442b      	add	r3, r5
 800c9f4:	6123      	str	r3, [r4, #16]
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	b007      	add	sp, #28
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	f04f 0b00 	mov.w	fp, #0
 800ca02:	e7ca      	b.n	800c99a <_scanf_i+0x15e>
 800ca04:	07ca      	lsls	r2, r1, #31
 800ca06:	bf4c      	ite	mi
 800ca08:	8018      	strhmi	r0, [r3, #0]
 800ca0a:	6018      	strpl	r0, [r3, #0]
 800ca0c:	e7eb      	b.n	800c9e6 <_scanf_i+0x1aa>
 800ca0e:	2001      	movs	r0, #1
 800ca10:	e7f2      	b.n	800c9f8 <_scanf_i+0x1bc>
 800ca12:	bf00      	nop
 800ca14:	0800e2b0 	.word	0x0800e2b0
 800ca18:	0800a151 	.word	0x0800a151
 800ca1c:	0800cee1 	.word	0x0800cee1
 800ca20:	0800e41b 	.word	0x0800e41b

0800ca24 <__sflush_r>:
 800ca24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2c:	0716      	lsls	r6, r2, #28
 800ca2e:	4605      	mov	r5, r0
 800ca30:	460c      	mov	r4, r1
 800ca32:	d454      	bmi.n	800cade <__sflush_r+0xba>
 800ca34:	684b      	ldr	r3, [r1, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	dc02      	bgt.n	800ca40 <__sflush_r+0x1c>
 800ca3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	dd48      	ble.n	800cad2 <__sflush_r+0xae>
 800ca40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca42:	2e00      	cmp	r6, #0
 800ca44:	d045      	beq.n	800cad2 <__sflush_r+0xae>
 800ca46:	2300      	movs	r3, #0
 800ca48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca4c:	682f      	ldr	r7, [r5, #0]
 800ca4e:	6a21      	ldr	r1, [r4, #32]
 800ca50:	602b      	str	r3, [r5, #0]
 800ca52:	d030      	beq.n	800cab6 <__sflush_r+0x92>
 800ca54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	0759      	lsls	r1, r3, #29
 800ca5a:	d505      	bpl.n	800ca68 <__sflush_r+0x44>
 800ca5c:	6863      	ldr	r3, [r4, #4]
 800ca5e:	1ad2      	subs	r2, r2, r3
 800ca60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca62:	b10b      	cbz	r3, 800ca68 <__sflush_r+0x44>
 800ca64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca66:	1ad2      	subs	r2, r2, r3
 800ca68:	2300      	movs	r3, #0
 800ca6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca6c:	6a21      	ldr	r1, [r4, #32]
 800ca6e:	4628      	mov	r0, r5
 800ca70:	47b0      	blx	r6
 800ca72:	1c43      	adds	r3, r0, #1
 800ca74:	89a3      	ldrh	r3, [r4, #12]
 800ca76:	d106      	bne.n	800ca86 <__sflush_r+0x62>
 800ca78:	6829      	ldr	r1, [r5, #0]
 800ca7a:	291d      	cmp	r1, #29
 800ca7c:	d82b      	bhi.n	800cad6 <__sflush_r+0xb2>
 800ca7e:	4a2a      	ldr	r2, [pc, #168]	@ (800cb28 <__sflush_r+0x104>)
 800ca80:	40ca      	lsrs	r2, r1
 800ca82:	07d6      	lsls	r6, r2, #31
 800ca84:	d527      	bpl.n	800cad6 <__sflush_r+0xb2>
 800ca86:	2200      	movs	r2, #0
 800ca88:	6062      	str	r2, [r4, #4]
 800ca8a:	04d9      	lsls	r1, r3, #19
 800ca8c:	6922      	ldr	r2, [r4, #16]
 800ca8e:	6022      	str	r2, [r4, #0]
 800ca90:	d504      	bpl.n	800ca9c <__sflush_r+0x78>
 800ca92:	1c42      	adds	r2, r0, #1
 800ca94:	d101      	bne.n	800ca9a <__sflush_r+0x76>
 800ca96:	682b      	ldr	r3, [r5, #0]
 800ca98:	b903      	cbnz	r3, 800ca9c <__sflush_r+0x78>
 800ca9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca9e:	602f      	str	r7, [r5, #0]
 800caa0:	b1b9      	cbz	r1, 800cad2 <__sflush_r+0xae>
 800caa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caa6:	4299      	cmp	r1, r3
 800caa8:	d002      	beq.n	800cab0 <__sflush_r+0x8c>
 800caaa:	4628      	mov	r0, r5
 800caac:	f7fe f822 	bl	800aaf4 <_free_r>
 800cab0:	2300      	movs	r3, #0
 800cab2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cab4:	e00d      	b.n	800cad2 <__sflush_r+0xae>
 800cab6:	2301      	movs	r3, #1
 800cab8:	4628      	mov	r0, r5
 800caba:	47b0      	blx	r6
 800cabc:	4602      	mov	r2, r0
 800cabe:	1c50      	adds	r0, r2, #1
 800cac0:	d1c9      	bne.n	800ca56 <__sflush_r+0x32>
 800cac2:	682b      	ldr	r3, [r5, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0c6      	beq.n	800ca56 <__sflush_r+0x32>
 800cac8:	2b1d      	cmp	r3, #29
 800caca:	d001      	beq.n	800cad0 <__sflush_r+0xac>
 800cacc:	2b16      	cmp	r3, #22
 800cace:	d11e      	bne.n	800cb0e <__sflush_r+0xea>
 800cad0:	602f      	str	r7, [r5, #0]
 800cad2:	2000      	movs	r0, #0
 800cad4:	e022      	b.n	800cb1c <__sflush_r+0xf8>
 800cad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cada:	b21b      	sxth	r3, r3
 800cadc:	e01b      	b.n	800cb16 <__sflush_r+0xf2>
 800cade:	690f      	ldr	r7, [r1, #16]
 800cae0:	2f00      	cmp	r7, #0
 800cae2:	d0f6      	beq.n	800cad2 <__sflush_r+0xae>
 800cae4:	0793      	lsls	r3, r2, #30
 800cae6:	680e      	ldr	r6, [r1, #0]
 800cae8:	bf08      	it	eq
 800caea:	694b      	ldreq	r3, [r1, #20]
 800caec:	600f      	str	r7, [r1, #0]
 800caee:	bf18      	it	ne
 800caf0:	2300      	movne	r3, #0
 800caf2:	eba6 0807 	sub.w	r8, r6, r7
 800caf6:	608b      	str	r3, [r1, #8]
 800caf8:	f1b8 0f00 	cmp.w	r8, #0
 800cafc:	dde9      	ble.n	800cad2 <__sflush_r+0xae>
 800cafe:	6a21      	ldr	r1, [r4, #32]
 800cb00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb02:	4643      	mov	r3, r8
 800cb04:	463a      	mov	r2, r7
 800cb06:	4628      	mov	r0, r5
 800cb08:	47b0      	blx	r6
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	dc08      	bgt.n	800cb20 <__sflush_r+0xfc>
 800cb0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb16:	81a3      	strh	r3, [r4, #12]
 800cb18:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb20:	4407      	add	r7, r0
 800cb22:	eba8 0800 	sub.w	r8, r8, r0
 800cb26:	e7e7      	b.n	800caf8 <__sflush_r+0xd4>
 800cb28:	20400001 	.word	0x20400001

0800cb2c <_fflush_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	690b      	ldr	r3, [r1, #16]
 800cb30:	4605      	mov	r5, r0
 800cb32:	460c      	mov	r4, r1
 800cb34:	b913      	cbnz	r3, 800cb3c <_fflush_r+0x10>
 800cb36:	2500      	movs	r5, #0
 800cb38:	4628      	mov	r0, r5
 800cb3a:	bd38      	pop	{r3, r4, r5, pc}
 800cb3c:	b118      	cbz	r0, 800cb46 <_fflush_r+0x1a>
 800cb3e:	6a03      	ldr	r3, [r0, #32]
 800cb40:	b90b      	cbnz	r3, 800cb46 <_fflush_r+0x1a>
 800cb42:	f7fd fdab 	bl	800a69c <__sinit>
 800cb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0f3      	beq.n	800cb36 <_fflush_r+0xa>
 800cb4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb50:	07d0      	lsls	r0, r2, #31
 800cb52:	d404      	bmi.n	800cb5e <_fflush_r+0x32>
 800cb54:	0599      	lsls	r1, r3, #22
 800cb56:	d402      	bmi.n	800cb5e <_fflush_r+0x32>
 800cb58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb5a:	f7fd ffac 	bl	800aab6 <__retarget_lock_acquire_recursive>
 800cb5e:	4628      	mov	r0, r5
 800cb60:	4621      	mov	r1, r4
 800cb62:	f7ff ff5f 	bl	800ca24 <__sflush_r>
 800cb66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb68:	07da      	lsls	r2, r3, #31
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	d4e4      	bmi.n	800cb38 <_fflush_r+0xc>
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	059b      	lsls	r3, r3, #22
 800cb72:	d4e1      	bmi.n	800cb38 <_fflush_r+0xc>
 800cb74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb76:	f7fd ff9f 	bl	800aab8 <__retarget_lock_release_recursive>
 800cb7a:	e7dd      	b.n	800cb38 <_fflush_r+0xc>

0800cb7c <__swhatbuf_r>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	460c      	mov	r4, r1
 800cb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb84:	2900      	cmp	r1, #0
 800cb86:	b096      	sub	sp, #88	@ 0x58
 800cb88:	4615      	mov	r5, r2
 800cb8a:	461e      	mov	r6, r3
 800cb8c:	da0d      	bge.n	800cbaa <__swhatbuf_r+0x2e>
 800cb8e:	89a3      	ldrh	r3, [r4, #12]
 800cb90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb94:	f04f 0100 	mov.w	r1, #0
 800cb98:	bf14      	ite	ne
 800cb9a:	2340      	movne	r3, #64	@ 0x40
 800cb9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cba0:	2000      	movs	r0, #0
 800cba2:	6031      	str	r1, [r6, #0]
 800cba4:	602b      	str	r3, [r5, #0]
 800cba6:	b016      	add	sp, #88	@ 0x58
 800cba8:	bd70      	pop	{r4, r5, r6, pc}
 800cbaa:	466a      	mov	r2, sp
 800cbac:	f000 f8d6 	bl	800cd5c <_fstat_r>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	dbec      	blt.n	800cb8e <__swhatbuf_r+0x12>
 800cbb4:	9901      	ldr	r1, [sp, #4]
 800cbb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbbe:	4259      	negs	r1, r3
 800cbc0:	4159      	adcs	r1, r3
 800cbc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbc6:	e7eb      	b.n	800cba0 <__swhatbuf_r+0x24>

0800cbc8 <__smakebuf_r>:
 800cbc8:	898b      	ldrh	r3, [r1, #12]
 800cbca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbcc:	079d      	lsls	r5, r3, #30
 800cbce:	4606      	mov	r6, r0
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	d507      	bpl.n	800cbe4 <__smakebuf_r+0x1c>
 800cbd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	6123      	str	r3, [r4, #16]
 800cbdc:	2301      	movs	r3, #1
 800cbde:	6163      	str	r3, [r4, #20]
 800cbe0:	b003      	add	sp, #12
 800cbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbe4:	ab01      	add	r3, sp, #4
 800cbe6:	466a      	mov	r2, sp
 800cbe8:	f7ff ffc8 	bl	800cb7c <__swhatbuf_r>
 800cbec:	9f00      	ldr	r7, [sp, #0]
 800cbee:	4605      	mov	r5, r0
 800cbf0:	4639      	mov	r1, r7
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f7fc fb6e 	bl	80092d4 <_malloc_r>
 800cbf8:	b948      	cbnz	r0, 800cc0e <__smakebuf_r+0x46>
 800cbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbfe:	059a      	lsls	r2, r3, #22
 800cc00:	d4ee      	bmi.n	800cbe0 <__smakebuf_r+0x18>
 800cc02:	f023 0303 	bic.w	r3, r3, #3
 800cc06:	f043 0302 	orr.w	r3, r3, #2
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	e7e2      	b.n	800cbd4 <__smakebuf_r+0xc>
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	6020      	str	r0, [r4, #0]
 800cc12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc16:	81a3      	strh	r3, [r4, #12]
 800cc18:	9b01      	ldr	r3, [sp, #4]
 800cc1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc1e:	b15b      	cbz	r3, 800cc38 <__smakebuf_r+0x70>
 800cc20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc24:	4630      	mov	r0, r6
 800cc26:	f000 f8ab 	bl	800cd80 <_isatty_r>
 800cc2a:	b128      	cbz	r0, 800cc38 <__smakebuf_r+0x70>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f023 0303 	bic.w	r3, r3, #3
 800cc32:	f043 0301 	orr.w	r3, r3, #1
 800cc36:	81a3      	strh	r3, [r4, #12]
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	431d      	orrs	r5, r3
 800cc3c:	81a5      	strh	r5, [r4, #12]
 800cc3e:	e7cf      	b.n	800cbe0 <__smakebuf_r+0x18>

0800cc40 <__sccl>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	780b      	ldrb	r3, [r1, #0]
 800cc44:	4604      	mov	r4, r0
 800cc46:	2b5e      	cmp	r3, #94	@ 0x5e
 800cc48:	bf0b      	itete	eq
 800cc4a:	784b      	ldrbeq	r3, [r1, #1]
 800cc4c:	1c4a      	addne	r2, r1, #1
 800cc4e:	1c8a      	addeq	r2, r1, #2
 800cc50:	2100      	movne	r1, #0
 800cc52:	bf08      	it	eq
 800cc54:	2101      	moveq	r1, #1
 800cc56:	3801      	subs	r0, #1
 800cc58:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800cc5c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cc60:	42a8      	cmp	r0, r5
 800cc62:	d1fb      	bne.n	800cc5c <__sccl+0x1c>
 800cc64:	b90b      	cbnz	r3, 800cc6a <__sccl+0x2a>
 800cc66:	1e50      	subs	r0, r2, #1
 800cc68:	bd70      	pop	{r4, r5, r6, pc}
 800cc6a:	f081 0101 	eor.w	r1, r1, #1
 800cc6e:	54e1      	strb	r1, [r4, r3]
 800cc70:	4610      	mov	r0, r2
 800cc72:	4602      	mov	r2, r0
 800cc74:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cc78:	2d2d      	cmp	r5, #45	@ 0x2d
 800cc7a:	d005      	beq.n	800cc88 <__sccl+0x48>
 800cc7c:	2d5d      	cmp	r5, #93	@ 0x5d
 800cc7e:	d016      	beq.n	800ccae <__sccl+0x6e>
 800cc80:	2d00      	cmp	r5, #0
 800cc82:	d0f1      	beq.n	800cc68 <__sccl+0x28>
 800cc84:	462b      	mov	r3, r5
 800cc86:	e7f2      	b.n	800cc6e <__sccl+0x2e>
 800cc88:	7846      	ldrb	r6, [r0, #1]
 800cc8a:	2e5d      	cmp	r6, #93	@ 0x5d
 800cc8c:	d0fa      	beq.n	800cc84 <__sccl+0x44>
 800cc8e:	42b3      	cmp	r3, r6
 800cc90:	dcf8      	bgt.n	800cc84 <__sccl+0x44>
 800cc92:	3002      	adds	r0, #2
 800cc94:	461a      	mov	r2, r3
 800cc96:	3201      	adds	r2, #1
 800cc98:	4296      	cmp	r6, r2
 800cc9a:	54a1      	strb	r1, [r4, r2]
 800cc9c:	dcfb      	bgt.n	800cc96 <__sccl+0x56>
 800cc9e:	1af2      	subs	r2, r6, r3
 800cca0:	3a01      	subs	r2, #1
 800cca2:	1c5d      	adds	r5, r3, #1
 800cca4:	42b3      	cmp	r3, r6
 800cca6:	bfa8      	it	ge
 800cca8:	2200      	movge	r2, #0
 800ccaa:	18ab      	adds	r3, r5, r2
 800ccac:	e7e1      	b.n	800cc72 <__sccl+0x32>
 800ccae:	4610      	mov	r0, r2
 800ccb0:	e7da      	b.n	800cc68 <__sccl+0x28>

0800ccb2 <__submore>:
 800ccb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ccba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccbe:	4299      	cmp	r1, r3
 800ccc0:	d11d      	bne.n	800ccfe <__submore+0x4c>
 800ccc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ccc6:	f7fc fb05 	bl	80092d4 <_malloc_r>
 800ccca:	b918      	cbnz	r0, 800ccd4 <__submore+0x22>
 800cccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccd8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ccda:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ccde:	6360      	str	r0, [r4, #52]	@ 0x34
 800cce0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800cce4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cce8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ccec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ccf0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ccf4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ccf8:	6020      	str	r0, [r4, #0]
 800ccfa:	2000      	movs	r0, #0
 800ccfc:	e7e8      	b.n	800ccd0 <__submore+0x1e>
 800ccfe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cd00:	0077      	lsls	r7, r6, #1
 800cd02:	463a      	mov	r2, r7
 800cd04:	f7fc fb72 	bl	80093ec <_realloc_r>
 800cd08:	4605      	mov	r5, r0
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d0de      	beq.n	800cccc <__submore+0x1a>
 800cd0e:	eb00 0806 	add.w	r8, r0, r6
 800cd12:	4601      	mov	r1, r0
 800cd14:	4632      	mov	r2, r6
 800cd16:	4640      	mov	r0, r8
 800cd18:	f7fd fecf 	bl	800aaba <memcpy>
 800cd1c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cd20:	f8c4 8000 	str.w	r8, [r4]
 800cd24:	e7e9      	b.n	800ccfa <__submore+0x48>

0800cd26 <memmove>:
 800cd26:	4288      	cmp	r0, r1
 800cd28:	b510      	push	{r4, lr}
 800cd2a:	eb01 0402 	add.w	r4, r1, r2
 800cd2e:	d902      	bls.n	800cd36 <memmove+0x10>
 800cd30:	4284      	cmp	r4, r0
 800cd32:	4623      	mov	r3, r4
 800cd34:	d807      	bhi.n	800cd46 <memmove+0x20>
 800cd36:	1e43      	subs	r3, r0, #1
 800cd38:	42a1      	cmp	r1, r4
 800cd3a:	d008      	beq.n	800cd4e <memmove+0x28>
 800cd3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd40:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd44:	e7f8      	b.n	800cd38 <memmove+0x12>
 800cd46:	4402      	add	r2, r0
 800cd48:	4601      	mov	r1, r0
 800cd4a:	428a      	cmp	r2, r1
 800cd4c:	d100      	bne.n	800cd50 <memmove+0x2a>
 800cd4e:	bd10      	pop	{r4, pc}
 800cd50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd58:	e7f7      	b.n	800cd4a <memmove+0x24>
	...

0800cd5c <_fstat_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d07      	ldr	r5, [pc, #28]	@ (800cd7c <_fstat_r+0x20>)
 800cd60:	2300      	movs	r3, #0
 800cd62:	4604      	mov	r4, r0
 800cd64:	4608      	mov	r0, r1
 800cd66:	4611      	mov	r1, r2
 800cd68:	602b      	str	r3, [r5, #0]
 800cd6a:	f7f8 f853 	bl	8004e14 <_fstat>
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	d102      	bne.n	800cd78 <_fstat_r+0x1c>
 800cd72:	682b      	ldr	r3, [r5, #0]
 800cd74:	b103      	cbz	r3, 800cd78 <_fstat_r+0x1c>
 800cd76:	6023      	str	r3, [r4, #0]
 800cd78:	bd38      	pop	{r3, r4, r5, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20000c30 	.word	0x20000c30

0800cd80 <_isatty_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4d06      	ldr	r5, [pc, #24]	@ (800cd9c <_isatty_r+0x1c>)
 800cd84:	2300      	movs	r3, #0
 800cd86:	4604      	mov	r4, r0
 800cd88:	4608      	mov	r0, r1
 800cd8a:	602b      	str	r3, [r5, #0]
 800cd8c:	f7f8 f852 	bl	8004e34 <_isatty>
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	d102      	bne.n	800cd9a <_isatty_r+0x1a>
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	b103      	cbz	r3, 800cd9a <_isatty_r+0x1a>
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	bd38      	pop	{r3, r4, r5, pc}
 800cd9c:	20000c30 	.word	0x20000c30

0800cda0 <__assert_func>:
 800cda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cda2:	4614      	mov	r4, r2
 800cda4:	461a      	mov	r2, r3
 800cda6:	4b09      	ldr	r3, [pc, #36]	@ (800cdcc <__assert_func+0x2c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4605      	mov	r5, r0
 800cdac:	68d8      	ldr	r0, [r3, #12]
 800cdae:	b14c      	cbz	r4, 800cdc4 <__assert_func+0x24>
 800cdb0:	4b07      	ldr	r3, [pc, #28]	@ (800cdd0 <__assert_func+0x30>)
 800cdb2:	9100      	str	r1, [sp, #0]
 800cdb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdb8:	4906      	ldr	r1, [pc, #24]	@ (800cdd4 <__assert_func+0x34>)
 800cdba:	462b      	mov	r3, r5
 800cdbc:	f000 f892 	bl	800cee4 <fiprintf>
 800cdc0:	f000 f8a2 	bl	800cf08 <abort>
 800cdc4:	4b04      	ldr	r3, [pc, #16]	@ (800cdd8 <__assert_func+0x38>)
 800cdc6:	461c      	mov	r4, r3
 800cdc8:	e7f3      	b.n	800cdb2 <__assert_func+0x12>
 800cdca:	bf00      	nop
 800cdcc:	200001fc 	.word	0x200001fc
 800cdd0:	0800e426 	.word	0x0800e426
 800cdd4:	0800e433 	.word	0x0800e433
 800cdd8:	0800e461 	.word	0x0800e461

0800cddc <_calloc_r>:
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	fba1 5402 	umull	r5, r4, r1, r2
 800cde2:	b934      	cbnz	r4, 800cdf2 <_calloc_r+0x16>
 800cde4:	4629      	mov	r1, r5
 800cde6:	f7fc fa75 	bl	80092d4 <_malloc_r>
 800cdea:	4606      	mov	r6, r0
 800cdec:	b928      	cbnz	r0, 800cdfa <_calloc_r+0x1e>
 800cdee:	4630      	mov	r0, r6
 800cdf0:	bd70      	pop	{r4, r5, r6, pc}
 800cdf2:	220c      	movs	r2, #12
 800cdf4:	6002      	str	r2, [r0, #0]
 800cdf6:	2600      	movs	r6, #0
 800cdf8:	e7f9      	b.n	800cdee <_calloc_r+0x12>
 800cdfa:	462a      	mov	r2, r5
 800cdfc:	4621      	mov	r1, r4
 800cdfe:	f7fd fdab 	bl	800a958 <memset>
 800ce02:	e7f4      	b.n	800cdee <_calloc_r+0x12>

0800ce04 <_strtoul_l.isra.0>:
 800ce04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce08:	4e34      	ldr	r6, [pc, #208]	@ (800cedc <_strtoul_l.isra.0+0xd8>)
 800ce0a:	4686      	mov	lr, r0
 800ce0c:	460d      	mov	r5, r1
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce14:	5d37      	ldrb	r7, [r6, r4]
 800ce16:	f017 0708 	ands.w	r7, r7, #8
 800ce1a:	d1f8      	bne.n	800ce0e <_strtoul_l.isra.0+0xa>
 800ce1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce1e:	d110      	bne.n	800ce42 <_strtoul_l.isra.0+0x3e>
 800ce20:	782c      	ldrb	r4, [r5, #0]
 800ce22:	2701      	movs	r7, #1
 800ce24:	1c85      	adds	r5, r0, #2
 800ce26:	f033 0010 	bics.w	r0, r3, #16
 800ce2a:	d115      	bne.n	800ce58 <_strtoul_l.isra.0+0x54>
 800ce2c:	2c30      	cmp	r4, #48	@ 0x30
 800ce2e:	d10d      	bne.n	800ce4c <_strtoul_l.isra.0+0x48>
 800ce30:	7828      	ldrb	r0, [r5, #0]
 800ce32:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ce36:	2858      	cmp	r0, #88	@ 0x58
 800ce38:	d108      	bne.n	800ce4c <_strtoul_l.isra.0+0x48>
 800ce3a:	786c      	ldrb	r4, [r5, #1]
 800ce3c:	3502      	adds	r5, #2
 800ce3e:	2310      	movs	r3, #16
 800ce40:	e00a      	b.n	800ce58 <_strtoul_l.isra.0+0x54>
 800ce42:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce44:	bf04      	itt	eq
 800ce46:	782c      	ldrbeq	r4, [r5, #0]
 800ce48:	1c85      	addeq	r5, r0, #2
 800ce4a:	e7ec      	b.n	800ce26 <_strtoul_l.isra.0+0x22>
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1f6      	bne.n	800ce3e <_strtoul_l.isra.0+0x3a>
 800ce50:	2c30      	cmp	r4, #48	@ 0x30
 800ce52:	bf14      	ite	ne
 800ce54:	230a      	movne	r3, #10
 800ce56:	2308      	moveq	r3, #8
 800ce58:	f04f 38ff 	mov.w	r8, #4294967295
 800ce5c:	2600      	movs	r6, #0
 800ce5e:	fbb8 f8f3 	udiv	r8, r8, r3
 800ce62:	fb03 f908 	mul.w	r9, r3, r8
 800ce66:	ea6f 0909 	mvn.w	r9, r9
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ce70:	f1bc 0f09 	cmp.w	ip, #9
 800ce74:	d810      	bhi.n	800ce98 <_strtoul_l.isra.0+0x94>
 800ce76:	4664      	mov	r4, ip
 800ce78:	42a3      	cmp	r3, r4
 800ce7a:	dd1e      	ble.n	800ceba <_strtoul_l.isra.0+0xb6>
 800ce7c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ce80:	d007      	beq.n	800ce92 <_strtoul_l.isra.0+0x8e>
 800ce82:	4580      	cmp	r8, r0
 800ce84:	d316      	bcc.n	800ceb4 <_strtoul_l.isra.0+0xb0>
 800ce86:	d101      	bne.n	800ce8c <_strtoul_l.isra.0+0x88>
 800ce88:	45a1      	cmp	r9, r4
 800ce8a:	db13      	blt.n	800ceb4 <_strtoul_l.isra.0+0xb0>
 800ce8c:	fb00 4003 	mla	r0, r0, r3, r4
 800ce90:	2601      	movs	r6, #1
 800ce92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce96:	e7e9      	b.n	800ce6c <_strtoul_l.isra.0+0x68>
 800ce98:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ce9c:	f1bc 0f19 	cmp.w	ip, #25
 800cea0:	d801      	bhi.n	800cea6 <_strtoul_l.isra.0+0xa2>
 800cea2:	3c37      	subs	r4, #55	@ 0x37
 800cea4:	e7e8      	b.n	800ce78 <_strtoul_l.isra.0+0x74>
 800cea6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ceaa:	f1bc 0f19 	cmp.w	ip, #25
 800ceae:	d804      	bhi.n	800ceba <_strtoul_l.isra.0+0xb6>
 800ceb0:	3c57      	subs	r4, #87	@ 0x57
 800ceb2:	e7e1      	b.n	800ce78 <_strtoul_l.isra.0+0x74>
 800ceb4:	f04f 36ff 	mov.w	r6, #4294967295
 800ceb8:	e7eb      	b.n	800ce92 <_strtoul_l.isra.0+0x8e>
 800ceba:	1c73      	adds	r3, r6, #1
 800cebc:	d106      	bne.n	800cecc <_strtoul_l.isra.0+0xc8>
 800cebe:	2322      	movs	r3, #34	@ 0x22
 800cec0:	f8ce 3000 	str.w	r3, [lr]
 800cec4:	4630      	mov	r0, r6
 800cec6:	b932      	cbnz	r2, 800ced6 <_strtoul_l.isra.0+0xd2>
 800cec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cecc:	b107      	cbz	r7, 800ced0 <_strtoul_l.isra.0+0xcc>
 800cece:	4240      	negs	r0, r0
 800ced0:	2a00      	cmp	r2, #0
 800ced2:	d0f9      	beq.n	800cec8 <_strtoul_l.isra.0+0xc4>
 800ced4:	b106      	cbz	r6, 800ced8 <_strtoul_l.isra.0+0xd4>
 800ced6:	1e69      	subs	r1, r5, #1
 800ced8:	6011      	str	r1, [r2, #0]
 800ceda:	e7f5      	b.n	800cec8 <_strtoul_l.isra.0+0xc4>
 800cedc:	0800e4b9 	.word	0x0800e4b9

0800cee0 <_strtoul_r>:
 800cee0:	f7ff bf90 	b.w	800ce04 <_strtoul_l.isra.0>

0800cee4 <fiprintf>:
 800cee4:	b40e      	push	{r1, r2, r3}
 800cee6:	b503      	push	{r0, r1, lr}
 800cee8:	4601      	mov	r1, r0
 800ceea:	ab03      	add	r3, sp, #12
 800ceec:	4805      	ldr	r0, [pc, #20]	@ (800cf04 <fiprintf+0x20>)
 800ceee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef2:	6800      	ldr	r0, [r0, #0]
 800cef4:	9301      	str	r3, [sp, #4]
 800cef6:	f7ff f9a3 	bl	800c240 <_vfiprintf_r>
 800cefa:	b002      	add	sp, #8
 800cefc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf00:	b003      	add	sp, #12
 800cf02:	4770      	bx	lr
 800cf04:	200001fc 	.word	0x200001fc

0800cf08 <abort>:
 800cf08:	b508      	push	{r3, lr}
 800cf0a:	2006      	movs	r0, #6
 800cf0c:	f000 f82c 	bl	800cf68 <raise>
 800cf10:	2001      	movs	r0, #1
 800cf12:	f7f7 ff2f 	bl	8004d74 <_exit>

0800cf16 <_raise_r>:
 800cf16:	291f      	cmp	r1, #31
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	d904      	bls.n	800cf2a <_raise_r+0x14>
 800cf20:	2316      	movs	r3, #22
 800cf22:	6003      	str	r3, [r0, #0]
 800cf24:	f04f 30ff 	mov.w	r0, #4294967295
 800cf28:	bd38      	pop	{r3, r4, r5, pc}
 800cf2a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf2c:	b112      	cbz	r2, 800cf34 <_raise_r+0x1e>
 800cf2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf32:	b94b      	cbnz	r3, 800cf48 <_raise_r+0x32>
 800cf34:	4628      	mov	r0, r5
 800cf36:	f000 f831 	bl	800cf9c <_getpid_r>
 800cf3a:	4622      	mov	r2, r4
 800cf3c:	4601      	mov	r1, r0
 800cf3e:	4628      	mov	r0, r5
 800cf40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf44:	f000 b818 	b.w	800cf78 <_kill_r>
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d00a      	beq.n	800cf62 <_raise_r+0x4c>
 800cf4c:	1c59      	adds	r1, r3, #1
 800cf4e:	d103      	bne.n	800cf58 <_raise_r+0x42>
 800cf50:	2316      	movs	r3, #22
 800cf52:	6003      	str	r3, [r0, #0]
 800cf54:	2001      	movs	r0, #1
 800cf56:	e7e7      	b.n	800cf28 <_raise_r+0x12>
 800cf58:	2100      	movs	r1, #0
 800cf5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	4798      	blx	r3
 800cf62:	2000      	movs	r0, #0
 800cf64:	e7e0      	b.n	800cf28 <_raise_r+0x12>
	...

0800cf68 <raise>:
 800cf68:	4b02      	ldr	r3, [pc, #8]	@ (800cf74 <raise+0xc>)
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f7ff bfd2 	b.w	800cf16 <_raise_r>
 800cf72:	bf00      	nop
 800cf74:	200001fc 	.word	0x200001fc

0800cf78 <_kill_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d07      	ldr	r5, [pc, #28]	@ (800cf98 <_kill_r+0x20>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	4611      	mov	r1, r2
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	f7f7 fee5 	bl	8004d54 <_kill>
 800cf8a:	1c43      	adds	r3, r0, #1
 800cf8c:	d102      	bne.n	800cf94 <_kill_r+0x1c>
 800cf8e:	682b      	ldr	r3, [r5, #0]
 800cf90:	b103      	cbz	r3, 800cf94 <_kill_r+0x1c>
 800cf92:	6023      	str	r3, [r4, #0]
 800cf94:	bd38      	pop	{r3, r4, r5, pc}
 800cf96:	bf00      	nop
 800cf98:	20000c30 	.word	0x20000c30

0800cf9c <_getpid_r>:
 800cf9c:	f7f7 bed2 	b.w	8004d44 <_getpid>

0800cfa0 <cos>:
 800cfa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfa2:	ec53 2b10 	vmov	r2, r3, d0
 800cfa6:	4826      	ldr	r0, [pc, #152]	@ (800d040 <cos+0xa0>)
 800cfa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cfac:	4281      	cmp	r1, r0
 800cfae:	d806      	bhi.n	800cfbe <cos+0x1e>
 800cfb0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d038 <cos+0x98>
 800cfb4:	b005      	add	sp, #20
 800cfb6:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfba:	f000 b899 	b.w	800d0f0 <__kernel_cos>
 800cfbe:	4821      	ldr	r0, [pc, #132]	@ (800d044 <cos+0xa4>)
 800cfc0:	4281      	cmp	r1, r0
 800cfc2:	d908      	bls.n	800cfd6 <cos+0x36>
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	f7f3 f95e 	bl	8000288 <__aeabi_dsub>
 800cfcc:	ec41 0b10 	vmov	d0, r0, r1
 800cfd0:	b005      	add	sp, #20
 800cfd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfd6:	4668      	mov	r0, sp
 800cfd8:	f000 fa0e 	bl	800d3f8 <__ieee754_rem_pio2>
 800cfdc:	f000 0003 	and.w	r0, r0, #3
 800cfe0:	2801      	cmp	r0, #1
 800cfe2:	d00b      	beq.n	800cffc <cos+0x5c>
 800cfe4:	2802      	cmp	r0, #2
 800cfe6:	d015      	beq.n	800d014 <cos+0x74>
 800cfe8:	b9d8      	cbnz	r0, 800d022 <cos+0x82>
 800cfea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfee:	ed9d 0b00 	vldr	d0, [sp]
 800cff2:	f000 f87d 	bl	800d0f0 <__kernel_cos>
 800cff6:	ec51 0b10 	vmov	r0, r1, d0
 800cffa:	e7e7      	b.n	800cfcc <cos+0x2c>
 800cffc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d000:	ed9d 0b00 	vldr	d0, [sp]
 800d004:	f000 f93c 	bl	800d280 <__kernel_sin>
 800d008:	ec53 2b10 	vmov	r2, r3, d0
 800d00c:	4610      	mov	r0, r2
 800d00e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d012:	e7db      	b.n	800cfcc <cos+0x2c>
 800d014:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d018:	ed9d 0b00 	vldr	d0, [sp]
 800d01c:	f000 f868 	bl	800d0f0 <__kernel_cos>
 800d020:	e7f2      	b.n	800d008 <cos+0x68>
 800d022:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d026:	ed9d 0b00 	vldr	d0, [sp]
 800d02a:	2001      	movs	r0, #1
 800d02c:	f000 f928 	bl	800d280 <__kernel_sin>
 800d030:	e7e1      	b.n	800cff6 <cos+0x56>
 800d032:	bf00      	nop
 800d034:	f3af 8000 	nop.w
	...
 800d040:	3fe921fb 	.word	0x3fe921fb
 800d044:	7fefffff 	.word	0x7fefffff

0800d048 <sin>:
 800d048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d04a:	ec53 2b10 	vmov	r2, r3, d0
 800d04e:	4826      	ldr	r0, [pc, #152]	@ (800d0e8 <sin+0xa0>)
 800d050:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d054:	4281      	cmp	r1, r0
 800d056:	d807      	bhi.n	800d068 <sin+0x20>
 800d058:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d0e0 <sin+0x98>
 800d05c:	2000      	movs	r0, #0
 800d05e:	b005      	add	sp, #20
 800d060:	f85d eb04 	ldr.w	lr, [sp], #4
 800d064:	f000 b90c 	b.w	800d280 <__kernel_sin>
 800d068:	4820      	ldr	r0, [pc, #128]	@ (800d0ec <sin+0xa4>)
 800d06a:	4281      	cmp	r1, r0
 800d06c:	d908      	bls.n	800d080 <sin+0x38>
 800d06e:	4610      	mov	r0, r2
 800d070:	4619      	mov	r1, r3
 800d072:	f7f3 f909 	bl	8000288 <__aeabi_dsub>
 800d076:	ec41 0b10 	vmov	d0, r0, r1
 800d07a:	b005      	add	sp, #20
 800d07c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d080:	4668      	mov	r0, sp
 800d082:	f000 f9b9 	bl	800d3f8 <__ieee754_rem_pio2>
 800d086:	f000 0003 	and.w	r0, r0, #3
 800d08a:	2801      	cmp	r0, #1
 800d08c:	d00c      	beq.n	800d0a8 <sin+0x60>
 800d08e:	2802      	cmp	r0, #2
 800d090:	d011      	beq.n	800d0b6 <sin+0x6e>
 800d092:	b9e8      	cbnz	r0, 800d0d0 <sin+0x88>
 800d094:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d098:	ed9d 0b00 	vldr	d0, [sp]
 800d09c:	2001      	movs	r0, #1
 800d09e:	f000 f8ef 	bl	800d280 <__kernel_sin>
 800d0a2:	ec51 0b10 	vmov	r0, r1, d0
 800d0a6:	e7e6      	b.n	800d076 <sin+0x2e>
 800d0a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0ac:	ed9d 0b00 	vldr	d0, [sp]
 800d0b0:	f000 f81e 	bl	800d0f0 <__kernel_cos>
 800d0b4:	e7f5      	b.n	800d0a2 <sin+0x5a>
 800d0b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0ba:	ed9d 0b00 	vldr	d0, [sp]
 800d0be:	2001      	movs	r0, #1
 800d0c0:	f000 f8de 	bl	800d280 <__kernel_sin>
 800d0c4:	ec53 2b10 	vmov	r2, r3, d0
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d0ce:	e7d2      	b.n	800d076 <sin+0x2e>
 800d0d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0d4:	ed9d 0b00 	vldr	d0, [sp]
 800d0d8:	f000 f80a 	bl	800d0f0 <__kernel_cos>
 800d0dc:	e7f2      	b.n	800d0c4 <sin+0x7c>
 800d0de:	bf00      	nop
	...
 800d0e8:	3fe921fb 	.word	0x3fe921fb
 800d0ec:	7fefffff 	.word	0x7fefffff

0800d0f0 <__kernel_cos>:
 800d0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f4:	ec57 6b10 	vmov	r6, r7, d0
 800d0f8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d0fc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d100:	ed8d 1b00 	vstr	d1, [sp]
 800d104:	d206      	bcs.n	800d114 <__kernel_cos+0x24>
 800d106:	4630      	mov	r0, r6
 800d108:	4639      	mov	r1, r7
 800d10a:	f7f3 fd25 	bl	8000b58 <__aeabi_d2iz>
 800d10e:	2800      	cmp	r0, #0
 800d110:	f000 8088 	beq.w	800d224 <__kernel_cos+0x134>
 800d114:	4632      	mov	r2, r6
 800d116:	463b      	mov	r3, r7
 800d118:	4630      	mov	r0, r6
 800d11a:	4639      	mov	r1, r7
 800d11c:	f7f3 fa6c 	bl	80005f8 <__aeabi_dmul>
 800d120:	4b51      	ldr	r3, [pc, #324]	@ (800d268 <__kernel_cos+0x178>)
 800d122:	2200      	movs	r2, #0
 800d124:	4604      	mov	r4, r0
 800d126:	460d      	mov	r5, r1
 800d128:	f7f3 fa66 	bl	80005f8 <__aeabi_dmul>
 800d12c:	a340      	add	r3, pc, #256	@ (adr r3, 800d230 <__kernel_cos+0x140>)
 800d12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d132:	4682      	mov	sl, r0
 800d134:	468b      	mov	fp, r1
 800d136:	4620      	mov	r0, r4
 800d138:	4629      	mov	r1, r5
 800d13a:	f7f3 fa5d 	bl	80005f8 <__aeabi_dmul>
 800d13e:	a33e      	add	r3, pc, #248	@ (adr r3, 800d238 <__kernel_cos+0x148>)
 800d140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d144:	f7f3 f8a2 	bl	800028c <__adddf3>
 800d148:	4622      	mov	r2, r4
 800d14a:	462b      	mov	r3, r5
 800d14c:	f7f3 fa54 	bl	80005f8 <__aeabi_dmul>
 800d150:	a33b      	add	r3, pc, #236	@ (adr r3, 800d240 <__kernel_cos+0x150>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	f7f3 f897 	bl	8000288 <__aeabi_dsub>
 800d15a:	4622      	mov	r2, r4
 800d15c:	462b      	mov	r3, r5
 800d15e:	f7f3 fa4b 	bl	80005f8 <__aeabi_dmul>
 800d162:	a339      	add	r3, pc, #228	@ (adr r3, 800d248 <__kernel_cos+0x158>)
 800d164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d168:	f7f3 f890 	bl	800028c <__adddf3>
 800d16c:	4622      	mov	r2, r4
 800d16e:	462b      	mov	r3, r5
 800d170:	f7f3 fa42 	bl	80005f8 <__aeabi_dmul>
 800d174:	a336      	add	r3, pc, #216	@ (adr r3, 800d250 <__kernel_cos+0x160>)
 800d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17a:	f7f3 f885 	bl	8000288 <__aeabi_dsub>
 800d17e:	4622      	mov	r2, r4
 800d180:	462b      	mov	r3, r5
 800d182:	f7f3 fa39 	bl	80005f8 <__aeabi_dmul>
 800d186:	a334      	add	r3, pc, #208	@ (adr r3, 800d258 <__kernel_cos+0x168>)
 800d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18c:	f7f3 f87e 	bl	800028c <__adddf3>
 800d190:	4622      	mov	r2, r4
 800d192:	462b      	mov	r3, r5
 800d194:	f7f3 fa30 	bl	80005f8 <__aeabi_dmul>
 800d198:	4622      	mov	r2, r4
 800d19a:	462b      	mov	r3, r5
 800d19c:	f7f3 fa2c 	bl	80005f8 <__aeabi_dmul>
 800d1a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	460d      	mov	r5, r1
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	f7f3 fa24 	bl	80005f8 <__aeabi_dmul>
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f7f3 f866 	bl	8000288 <__aeabi_dsub>
 800d1bc:	4b2b      	ldr	r3, [pc, #172]	@ (800d26c <__kernel_cos+0x17c>)
 800d1be:	4598      	cmp	r8, r3
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	460f      	mov	r7, r1
 800d1c4:	d810      	bhi.n	800d1e8 <__kernel_cos+0xf8>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4650      	mov	r0, sl
 800d1cc:	4659      	mov	r1, fp
 800d1ce:	f7f3 f85b 	bl	8000288 <__aeabi_dsub>
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4926      	ldr	r1, [pc, #152]	@ (800d270 <__kernel_cos+0x180>)
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	2000      	movs	r0, #0
 800d1da:	f7f3 f855 	bl	8000288 <__aeabi_dsub>
 800d1de:	ec41 0b10 	vmov	d0, r0, r1
 800d1e2:	b003      	add	sp, #12
 800d1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e8:	4b22      	ldr	r3, [pc, #136]	@ (800d274 <__kernel_cos+0x184>)
 800d1ea:	4921      	ldr	r1, [pc, #132]	@ (800d270 <__kernel_cos+0x180>)
 800d1ec:	4598      	cmp	r8, r3
 800d1ee:	bf8c      	ite	hi
 800d1f0:	4d21      	ldrhi	r5, [pc, #132]	@ (800d278 <__kernel_cos+0x188>)
 800d1f2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d1f6:	2400      	movs	r4, #0
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	462b      	mov	r3, r5
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	f7f3 f843 	bl	8000288 <__aeabi_dsub>
 800d202:	4622      	mov	r2, r4
 800d204:	4680      	mov	r8, r0
 800d206:	4689      	mov	r9, r1
 800d208:	462b      	mov	r3, r5
 800d20a:	4650      	mov	r0, sl
 800d20c:	4659      	mov	r1, fp
 800d20e:	f7f3 f83b 	bl	8000288 <__aeabi_dsub>
 800d212:	4632      	mov	r2, r6
 800d214:	463b      	mov	r3, r7
 800d216:	f7f3 f837 	bl	8000288 <__aeabi_dsub>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	4640      	mov	r0, r8
 800d220:	4649      	mov	r1, r9
 800d222:	e7da      	b.n	800d1da <__kernel_cos+0xea>
 800d224:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d260 <__kernel_cos+0x170>
 800d228:	e7db      	b.n	800d1e2 <__kernel_cos+0xf2>
 800d22a:	bf00      	nop
 800d22c:	f3af 8000 	nop.w
 800d230:	be8838d4 	.word	0xbe8838d4
 800d234:	bda8fae9 	.word	0xbda8fae9
 800d238:	bdb4b1c4 	.word	0xbdb4b1c4
 800d23c:	3e21ee9e 	.word	0x3e21ee9e
 800d240:	809c52ad 	.word	0x809c52ad
 800d244:	3e927e4f 	.word	0x3e927e4f
 800d248:	19cb1590 	.word	0x19cb1590
 800d24c:	3efa01a0 	.word	0x3efa01a0
 800d250:	16c15177 	.word	0x16c15177
 800d254:	3f56c16c 	.word	0x3f56c16c
 800d258:	5555554c 	.word	0x5555554c
 800d25c:	3fa55555 	.word	0x3fa55555
 800d260:	00000000 	.word	0x00000000
 800d264:	3ff00000 	.word	0x3ff00000
 800d268:	3fe00000 	.word	0x3fe00000
 800d26c:	3fd33332 	.word	0x3fd33332
 800d270:	3ff00000 	.word	0x3ff00000
 800d274:	3fe90000 	.word	0x3fe90000
 800d278:	3fd20000 	.word	0x3fd20000
 800d27c:	00000000 	.word	0x00000000

0800d280 <__kernel_sin>:
 800d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d284:	ec55 4b10 	vmov	r4, r5, d0
 800d288:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d28c:	b085      	sub	sp, #20
 800d28e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d292:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d296:	4680      	mov	r8, r0
 800d298:	d205      	bcs.n	800d2a6 <__kernel_sin+0x26>
 800d29a:	4620      	mov	r0, r4
 800d29c:	4629      	mov	r1, r5
 800d29e:	f7f3 fc5b 	bl	8000b58 <__aeabi_d2iz>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d052      	beq.n	800d34c <__kernel_sin+0xcc>
 800d2a6:	4622      	mov	r2, r4
 800d2a8:	462b      	mov	r3, r5
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	f7f3 f9a3 	bl	80005f8 <__aeabi_dmul>
 800d2b2:	4682      	mov	sl, r0
 800d2b4:	468b      	mov	fp, r1
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	4629      	mov	r1, r5
 800d2be:	f7f3 f99b 	bl	80005f8 <__aeabi_dmul>
 800d2c2:	a342      	add	r3, pc, #264	@ (adr r3, 800d3cc <__kernel_sin+0x14c>)
 800d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c8:	e9cd 0100 	strd	r0, r1, [sp]
 800d2cc:	4650      	mov	r0, sl
 800d2ce:	4659      	mov	r1, fp
 800d2d0:	f7f3 f992 	bl	80005f8 <__aeabi_dmul>
 800d2d4:	a33f      	add	r3, pc, #252	@ (adr r3, 800d3d4 <__kernel_sin+0x154>)
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f7f2 ffd5 	bl	8000288 <__aeabi_dsub>
 800d2de:	4652      	mov	r2, sl
 800d2e0:	465b      	mov	r3, fp
 800d2e2:	f7f3 f989 	bl	80005f8 <__aeabi_dmul>
 800d2e6:	a33d      	add	r3, pc, #244	@ (adr r3, 800d3dc <__kernel_sin+0x15c>)
 800d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ec:	f7f2 ffce 	bl	800028c <__adddf3>
 800d2f0:	4652      	mov	r2, sl
 800d2f2:	465b      	mov	r3, fp
 800d2f4:	f7f3 f980 	bl	80005f8 <__aeabi_dmul>
 800d2f8:	a33a      	add	r3, pc, #232	@ (adr r3, 800d3e4 <__kernel_sin+0x164>)
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f7f2 ffc3 	bl	8000288 <__aeabi_dsub>
 800d302:	4652      	mov	r2, sl
 800d304:	465b      	mov	r3, fp
 800d306:	f7f3 f977 	bl	80005f8 <__aeabi_dmul>
 800d30a:	a338      	add	r3, pc, #224	@ (adr r3, 800d3ec <__kernel_sin+0x16c>)
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	f7f2 ffbc 	bl	800028c <__adddf3>
 800d314:	4606      	mov	r6, r0
 800d316:	460f      	mov	r7, r1
 800d318:	f1b8 0f00 	cmp.w	r8, #0
 800d31c:	d11b      	bne.n	800d356 <__kernel_sin+0xd6>
 800d31e:	4602      	mov	r2, r0
 800d320:	460b      	mov	r3, r1
 800d322:	4650      	mov	r0, sl
 800d324:	4659      	mov	r1, fp
 800d326:	f7f3 f967 	bl	80005f8 <__aeabi_dmul>
 800d32a:	a325      	add	r3, pc, #148	@ (adr r3, 800d3c0 <__kernel_sin+0x140>)
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	f7f2 ffaa 	bl	8000288 <__aeabi_dsub>
 800d334:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d338:	f7f3 f95e 	bl	80005f8 <__aeabi_dmul>
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	4620      	mov	r0, r4
 800d342:	4629      	mov	r1, r5
 800d344:	f7f2 ffa2 	bl	800028c <__adddf3>
 800d348:	4604      	mov	r4, r0
 800d34a:	460d      	mov	r5, r1
 800d34c:	ec45 4b10 	vmov	d0, r4, r5
 800d350:	b005      	add	sp, #20
 800d352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d35a:	4b1b      	ldr	r3, [pc, #108]	@ (800d3c8 <__kernel_sin+0x148>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	f7f3 f94b 	bl	80005f8 <__aeabi_dmul>
 800d362:	4632      	mov	r2, r6
 800d364:	4680      	mov	r8, r0
 800d366:	4689      	mov	r9, r1
 800d368:	463b      	mov	r3, r7
 800d36a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d36e:	f7f3 f943 	bl	80005f8 <__aeabi_dmul>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	4640      	mov	r0, r8
 800d378:	4649      	mov	r1, r9
 800d37a:	f7f2 ff85 	bl	8000288 <__aeabi_dsub>
 800d37e:	4652      	mov	r2, sl
 800d380:	465b      	mov	r3, fp
 800d382:	f7f3 f939 	bl	80005f8 <__aeabi_dmul>
 800d386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d38a:	f7f2 ff7d 	bl	8000288 <__aeabi_dsub>
 800d38e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d3c0 <__kernel_sin+0x140>)
 800d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d394:	4606      	mov	r6, r0
 800d396:	460f      	mov	r7, r1
 800d398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d39c:	f7f3 f92c 	bl	80005f8 <__aeabi_dmul>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	f7f2 ff70 	bl	800028c <__adddf3>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	4629      	mov	r1, r5
 800d3b4:	f7f2 ff68 	bl	8000288 <__aeabi_dsub>
 800d3b8:	e7c6      	b.n	800d348 <__kernel_sin+0xc8>
 800d3ba:	bf00      	nop
 800d3bc:	f3af 8000 	nop.w
 800d3c0:	55555549 	.word	0x55555549
 800d3c4:	3fc55555 	.word	0x3fc55555
 800d3c8:	3fe00000 	.word	0x3fe00000
 800d3cc:	5acfd57c 	.word	0x5acfd57c
 800d3d0:	3de5d93a 	.word	0x3de5d93a
 800d3d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d3d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d3dc:	57b1fe7d 	.word	0x57b1fe7d
 800d3e0:	3ec71de3 	.word	0x3ec71de3
 800d3e4:	19c161d5 	.word	0x19c161d5
 800d3e8:	3f2a01a0 	.word	0x3f2a01a0
 800d3ec:	1110f8a6 	.word	0x1110f8a6
 800d3f0:	3f811111 	.word	0x3f811111
 800d3f4:	00000000 	.word	0x00000000

0800d3f8 <__ieee754_rem_pio2>:
 800d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	ec57 6b10 	vmov	r6, r7, d0
 800d400:	4bc5      	ldr	r3, [pc, #788]	@ (800d718 <__ieee754_rem_pio2+0x320>)
 800d402:	b08d      	sub	sp, #52	@ 0x34
 800d404:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d408:	4598      	cmp	r8, r3
 800d40a:	4604      	mov	r4, r0
 800d40c:	9704      	str	r7, [sp, #16]
 800d40e:	d807      	bhi.n	800d420 <__ieee754_rem_pio2+0x28>
 800d410:	2200      	movs	r2, #0
 800d412:	2300      	movs	r3, #0
 800d414:	ed80 0b00 	vstr	d0, [r0]
 800d418:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d41c:	2500      	movs	r5, #0
 800d41e:	e028      	b.n	800d472 <__ieee754_rem_pio2+0x7a>
 800d420:	4bbe      	ldr	r3, [pc, #760]	@ (800d71c <__ieee754_rem_pio2+0x324>)
 800d422:	4598      	cmp	r8, r3
 800d424:	d878      	bhi.n	800d518 <__ieee754_rem_pio2+0x120>
 800d426:	9b04      	ldr	r3, [sp, #16]
 800d428:	4dbd      	ldr	r5, [pc, #756]	@ (800d720 <__ieee754_rem_pio2+0x328>)
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	4630      	mov	r0, r6
 800d42e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d6e0 <__ieee754_rem_pio2+0x2e8>)
 800d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d434:	4639      	mov	r1, r7
 800d436:	dd38      	ble.n	800d4aa <__ieee754_rem_pio2+0xb2>
 800d438:	f7f2 ff26 	bl	8000288 <__aeabi_dsub>
 800d43c:	45a8      	cmp	r8, r5
 800d43e:	4606      	mov	r6, r0
 800d440:	460f      	mov	r7, r1
 800d442:	d01a      	beq.n	800d47a <__ieee754_rem_pio2+0x82>
 800d444:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d6e8 <__ieee754_rem_pio2+0x2f0>)
 800d446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44a:	f7f2 ff1d 	bl	8000288 <__aeabi_dsub>
 800d44e:	4602      	mov	r2, r0
 800d450:	460b      	mov	r3, r1
 800d452:	4680      	mov	r8, r0
 800d454:	4689      	mov	r9, r1
 800d456:	4630      	mov	r0, r6
 800d458:	4639      	mov	r1, r7
 800d45a:	f7f2 ff15 	bl	8000288 <__aeabi_dsub>
 800d45e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d6e8 <__ieee754_rem_pio2+0x2f0>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	f7f2 ff10 	bl	8000288 <__aeabi_dsub>
 800d468:	e9c4 8900 	strd	r8, r9, [r4]
 800d46c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d470:	2501      	movs	r5, #1
 800d472:	4628      	mov	r0, r5
 800d474:	b00d      	add	sp, #52	@ 0x34
 800d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47a:	a39d      	add	r3, pc, #628	@ (adr r3, 800d6f0 <__ieee754_rem_pio2+0x2f8>)
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	f7f2 ff02 	bl	8000288 <__aeabi_dsub>
 800d484:	a39c      	add	r3, pc, #624	@ (adr r3, 800d6f8 <__ieee754_rem_pio2+0x300>)
 800d486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48a:	4606      	mov	r6, r0
 800d48c:	460f      	mov	r7, r1
 800d48e:	f7f2 fefb 	bl	8000288 <__aeabi_dsub>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	4680      	mov	r8, r0
 800d498:	4689      	mov	r9, r1
 800d49a:	4630      	mov	r0, r6
 800d49c:	4639      	mov	r1, r7
 800d49e:	f7f2 fef3 	bl	8000288 <__aeabi_dsub>
 800d4a2:	a395      	add	r3, pc, #596	@ (adr r3, 800d6f8 <__ieee754_rem_pio2+0x300>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	e7dc      	b.n	800d464 <__ieee754_rem_pio2+0x6c>
 800d4aa:	f7f2 feef 	bl	800028c <__adddf3>
 800d4ae:	45a8      	cmp	r8, r5
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	460f      	mov	r7, r1
 800d4b4:	d018      	beq.n	800d4e8 <__ieee754_rem_pio2+0xf0>
 800d4b6:	a38c      	add	r3, pc, #560	@ (adr r3, 800d6e8 <__ieee754_rem_pio2+0x2f0>)
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	f7f2 fee6 	bl	800028c <__adddf3>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	4689      	mov	r9, r1
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	f7f2 fedc 	bl	8000288 <__aeabi_dsub>
 800d4d0:	a385      	add	r3, pc, #532	@ (adr r3, 800d6e8 <__ieee754_rem_pio2+0x2f0>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	f7f2 fed9 	bl	800028c <__adddf3>
 800d4da:	f04f 35ff 	mov.w	r5, #4294967295
 800d4de:	e9c4 8900 	strd	r8, r9, [r4]
 800d4e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d4e6:	e7c4      	b.n	800d472 <__ieee754_rem_pio2+0x7a>
 800d4e8:	a381      	add	r3, pc, #516	@ (adr r3, 800d6f0 <__ieee754_rem_pio2+0x2f8>)
 800d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ee:	f7f2 fecd 	bl	800028c <__adddf3>
 800d4f2:	a381      	add	r3, pc, #516	@ (adr r3, 800d6f8 <__ieee754_rem_pio2+0x300>)
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	460f      	mov	r7, r1
 800d4fc:	f7f2 fec6 	bl	800028c <__adddf3>
 800d500:	4602      	mov	r2, r0
 800d502:	460b      	mov	r3, r1
 800d504:	4680      	mov	r8, r0
 800d506:	4689      	mov	r9, r1
 800d508:	4630      	mov	r0, r6
 800d50a:	4639      	mov	r1, r7
 800d50c:	f7f2 febc 	bl	8000288 <__aeabi_dsub>
 800d510:	a379      	add	r3, pc, #484	@ (adr r3, 800d6f8 <__ieee754_rem_pio2+0x300>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	e7de      	b.n	800d4d6 <__ieee754_rem_pio2+0xde>
 800d518:	4b82      	ldr	r3, [pc, #520]	@ (800d724 <__ieee754_rem_pio2+0x32c>)
 800d51a:	4598      	cmp	r8, r3
 800d51c:	f200 80d1 	bhi.w	800d6c2 <__ieee754_rem_pio2+0x2ca>
 800d520:	f000 f966 	bl	800d7f0 <fabs>
 800d524:	ec57 6b10 	vmov	r6, r7, d0
 800d528:	a375      	add	r3, pc, #468	@ (adr r3, 800d700 <__ieee754_rem_pio2+0x308>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	4630      	mov	r0, r6
 800d530:	4639      	mov	r1, r7
 800d532:	f7f3 f861 	bl	80005f8 <__aeabi_dmul>
 800d536:	4b7c      	ldr	r3, [pc, #496]	@ (800d728 <__ieee754_rem_pio2+0x330>)
 800d538:	2200      	movs	r2, #0
 800d53a:	f7f2 fea7 	bl	800028c <__adddf3>
 800d53e:	f7f3 fb0b 	bl	8000b58 <__aeabi_d2iz>
 800d542:	4605      	mov	r5, r0
 800d544:	f7f2 ffee 	bl	8000524 <__aeabi_i2d>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d550:	a363      	add	r3, pc, #396	@ (adr r3, 800d6e0 <__ieee754_rem_pio2+0x2e8>)
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f7f3 f84f 	bl	80005f8 <__aeabi_dmul>
 800d55a:	4602      	mov	r2, r0
 800d55c:	460b      	mov	r3, r1
 800d55e:	4630      	mov	r0, r6
 800d560:	4639      	mov	r1, r7
 800d562:	f7f2 fe91 	bl	8000288 <__aeabi_dsub>
 800d566:	a360      	add	r3, pc, #384	@ (adr r3, 800d6e8 <__ieee754_rem_pio2+0x2f0>)
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	4682      	mov	sl, r0
 800d56e:	468b      	mov	fp, r1
 800d570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d574:	f7f3 f840 	bl	80005f8 <__aeabi_dmul>
 800d578:	2d1f      	cmp	r5, #31
 800d57a:	4606      	mov	r6, r0
 800d57c:	460f      	mov	r7, r1
 800d57e:	dc0c      	bgt.n	800d59a <__ieee754_rem_pio2+0x1a2>
 800d580:	4b6a      	ldr	r3, [pc, #424]	@ (800d72c <__ieee754_rem_pio2+0x334>)
 800d582:	1e6a      	subs	r2, r5, #1
 800d584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d588:	4543      	cmp	r3, r8
 800d58a:	d006      	beq.n	800d59a <__ieee754_rem_pio2+0x1a2>
 800d58c:	4632      	mov	r2, r6
 800d58e:	463b      	mov	r3, r7
 800d590:	4650      	mov	r0, sl
 800d592:	4659      	mov	r1, fp
 800d594:	f7f2 fe78 	bl	8000288 <__aeabi_dsub>
 800d598:	e00e      	b.n	800d5b8 <__ieee754_rem_pio2+0x1c0>
 800d59a:	463b      	mov	r3, r7
 800d59c:	4632      	mov	r2, r6
 800d59e:	4650      	mov	r0, sl
 800d5a0:	4659      	mov	r1, fp
 800d5a2:	f7f2 fe71 	bl	8000288 <__aeabi_dsub>
 800d5a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d5aa:	9305      	str	r3, [sp, #20]
 800d5ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d5b4:	2b10      	cmp	r3, #16
 800d5b6:	dc02      	bgt.n	800d5be <__ieee754_rem_pio2+0x1c6>
 800d5b8:	e9c4 0100 	strd	r0, r1, [r4]
 800d5bc:	e039      	b.n	800d632 <__ieee754_rem_pio2+0x23a>
 800d5be:	a34c      	add	r3, pc, #304	@ (adr r3, 800d6f0 <__ieee754_rem_pio2+0x2f8>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5c8:	f7f3 f816 	bl	80005f8 <__aeabi_dmul>
 800d5cc:	4606      	mov	r6, r0
 800d5ce:	460f      	mov	r7, r1
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4650      	mov	r0, sl
 800d5d6:	4659      	mov	r1, fp
 800d5d8:	f7f2 fe56 	bl	8000288 <__aeabi_dsub>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4680      	mov	r8, r0
 800d5e2:	4689      	mov	r9, r1
 800d5e4:	4650      	mov	r0, sl
 800d5e6:	4659      	mov	r1, fp
 800d5e8:	f7f2 fe4e 	bl	8000288 <__aeabi_dsub>
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	463b      	mov	r3, r7
 800d5f0:	f7f2 fe4a 	bl	8000288 <__aeabi_dsub>
 800d5f4:	a340      	add	r3, pc, #256	@ (adr r3, 800d6f8 <__ieee754_rem_pio2+0x300>)
 800d5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	460f      	mov	r7, r1
 800d5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d602:	f7f2 fff9 	bl	80005f8 <__aeabi_dmul>
 800d606:	4632      	mov	r2, r6
 800d608:	463b      	mov	r3, r7
 800d60a:	f7f2 fe3d 	bl	8000288 <__aeabi_dsub>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	4606      	mov	r6, r0
 800d614:	460f      	mov	r7, r1
 800d616:	4640      	mov	r0, r8
 800d618:	4649      	mov	r1, r9
 800d61a:	f7f2 fe35 	bl	8000288 <__aeabi_dsub>
 800d61e:	9a05      	ldr	r2, [sp, #20]
 800d620:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d624:	1ad3      	subs	r3, r2, r3
 800d626:	2b31      	cmp	r3, #49	@ 0x31
 800d628:	dc20      	bgt.n	800d66c <__ieee754_rem_pio2+0x274>
 800d62a:	e9c4 0100 	strd	r0, r1, [r4]
 800d62e:	46c2      	mov	sl, r8
 800d630:	46cb      	mov	fp, r9
 800d632:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d636:	4650      	mov	r0, sl
 800d638:	4642      	mov	r2, r8
 800d63a:	464b      	mov	r3, r9
 800d63c:	4659      	mov	r1, fp
 800d63e:	f7f2 fe23 	bl	8000288 <__aeabi_dsub>
 800d642:	463b      	mov	r3, r7
 800d644:	4632      	mov	r2, r6
 800d646:	f7f2 fe1f 	bl	8000288 <__aeabi_dsub>
 800d64a:	9b04      	ldr	r3, [sp, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d652:	f6bf af0e 	bge.w	800d472 <__ieee754_rem_pio2+0x7a>
 800d656:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d65a:	6063      	str	r3, [r4, #4]
 800d65c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d660:	f8c4 8000 	str.w	r8, [r4]
 800d664:	60a0      	str	r0, [r4, #8]
 800d666:	60e3      	str	r3, [r4, #12]
 800d668:	426d      	negs	r5, r5
 800d66a:	e702      	b.n	800d472 <__ieee754_rem_pio2+0x7a>
 800d66c:	a326      	add	r3, pc, #152	@ (adr r3, 800d708 <__ieee754_rem_pio2+0x310>)
 800d66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d676:	f7f2 ffbf 	bl	80005f8 <__aeabi_dmul>
 800d67a:	4606      	mov	r6, r0
 800d67c:	460f      	mov	r7, r1
 800d67e:	4602      	mov	r2, r0
 800d680:	460b      	mov	r3, r1
 800d682:	4640      	mov	r0, r8
 800d684:	4649      	mov	r1, r9
 800d686:	f7f2 fdff 	bl	8000288 <__aeabi_dsub>
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	4682      	mov	sl, r0
 800d690:	468b      	mov	fp, r1
 800d692:	4640      	mov	r0, r8
 800d694:	4649      	mov	r1, r9
 800d696:	f7f2 fdf7 	bl	8000288 <__aeabi_dsub>
 800d69a:	4632      	mov	r2, r6
 800d69c:	463b      	mov	r3, r7
 800d69e:	f7f2 fdf3 	bl	8000288 <__aeabi_dsub>
 800d6a2:	a31b      	add	r3, pc, #108	@ (adr r3, 800d710 <__ieee754_rem_pio2+0x318>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	460f      	mov	r7, r1
 800d6ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6b0:	f7f2 ffa2 	bl	80005f8 <__aeabi_dmul>
 800d6b4:	4632      	mov	r2, r6
 800d6b6:	463b      	mov	r3, r7
 800d6b8:	f7f2 fde6 	bl	8000288 <__aeabi_dsub>
 800d6bc:	4606      	mov	r6, r0
 800d6be:	460f      	mov	r7, r1
 800d6c0:	e764      	b.n	800d58c <__ieee754_rem_pio2+0x194>
 800d6c2:	4b1b      	ldr	r3, [pc, #108]	@ (800d730 <__ieee754_rem_pio2+0x338>)
 800d6c4:	4598      	cmp	r8, r3
 800d6c6:	d935      	bls.n	800d734 <__ieee754_rem_pio2+0x33c>
 800d6c8:	4632      	mov	r2, r6
 800d6ca:	463b      	mov	r3, r7
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	4639      	mov	r1, r7
 800d6d0:	f7f2 fdda 	bl	8000288 <__aeabi_dsub>
 800d6d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d6d8:	e9c4 0100 	strd	r0, r1, [r4]
 800d6dc:	e69e      	b.n	800d41c <__ieee754_rem_pio2+0x24>
 800d6de:	bf00      	nop
 800d6e0:	54400000 	.word	0x54400000
 800d6e4:	3ff921fb 	.word	0x3ff921fb
 800d6e8:	1a626331 	.word	0x1a626331
 800d6ec:	3dd0b461 	.word	0x3dd0b461
 800d6f0:	1a600000 	.word	0x1a600000
 800d6f4:	3dd0b461 	.word	0x3dd0b461
 800d6f8:	2e037073 	.word	0x2e037073
 800d6fc:	3ba3198a 	.word	0x3ba3198a
 800d700:	6dc9c883 	.word	0x6dc9c883
 800d704:	3fe45f30 	.word	0x3fe45f30
 800d708:	2e000000 	.word	0x2e000000
 800d70c:	3ba3198a 	.word	0x3ba3198a
 800d710:	252049c1 	.word	0x252049c1
 800d714:	397b839a 	.word	0x397b839a
 800d718:	3fe921fb 	.word	0x3fe921fb
 800d71c:	4002d97b 	.word	0x4002d97b
 800d720:	3ff921fb 	.word	0x3ff921fb
 800d724:	413921fb 	.word	0x413921fb
 800d728:	3fe00000 	.word	0x3fe00000
 800d72c:	0800e6b8 	.word	0x0800e6b8
 800d730:	7fefffff 	.word	0x7fefffff
 800d734:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d738:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d73c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d740:	4630      	mov	r0, r6
 800d742:	460f      	mov	r7, r1
 800d744:	f7f3 fa08 	bl	8000b58 <__aeabi_d2iz>
 800d748:	f7f2 feec 	bl	8000524 <__aeabi_i2d>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4630      	mov	r0, r6
 800d752:	4639      	mov	r1, r7
 800d754:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d758:	f7f2 fd96 	bl	8000288 <__aeabi_dsub>
 800d75c:	4b22      	ldr	r3, [pc, #136]	@ (800d7e8 <__ieee754_rem_pio2+0x3f0>)
 800d75e:	2200      	movs	r2, #0
 800d760:	f7f2 ff4a 	bl	80005f8 <__aeabi_dmul>
 800d764:	460f      	mov	r7, r1
 800d766:	4606      	mov	r6, r0
 800d768:	f7f3 f9f6 	bl	8000b58 <__aeabi_d2iz>
 800d76c:	f7f2 feda 	bl	8000524 <__aeabi_i2d>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4630      	mov	r0, r6
 800d776:	4639      	mov	r1, r7
 800d778:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d77c:	f7f2 fd84 	bl	8000288 <__aeabi_dsub>
 800d780:	4b19      	ldr	r3, [pc, #100]	@ (800d7e8 <__ieee754_rem_pio2+0x3f0>)
 800d782:	2200      	movs	r2, #0
 800d784:	f7f2 ff38 	bl	80005f8 <__aeabi_dmul>
 800d788:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d78c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d790:	f04f 0803 	mov.w	r8, #3
 800d794:	2600      	movs	r6, #0
 800d796:	2700      	movs	r7, #0
 800d798:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d79c:	4632      	mov	r2, r6
 800d79e:	463b      	mov	r3, r7
 800d7a0:	46c2      	mov	sl, r8
 800d7a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d7a6:	f7f3 f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d1f4      	bne.n	800d798 <__ieee754_rem_pio2+0x3a0>
 800d7ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d7ec <__ieee754_rem_pio2+0x3f4>)
 800d7b0:	9301      	str	r3, [sp, #4]
 800d7b2:	2302      	movs	r3, #2
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	462a      	mov	r2, r5
 800d7b8:	4653      	mov	r3, sl
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	a806      	add	r0, sp, #24
 800d7be:	f000 f81f 	bl	800d800 <__kernel_rem_pio2>
 800d7c2:	9b04      	ldr	r3, [sp, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	f6bf ae53 	bge.w	800d472 <__ieee754_rem_pio2+0x7a>
 800d7cc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d7d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7d4:	e9c4 2300 	strd	r2, r3, [r4]
 800d7d8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d7dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d7e4:	e740      	b.n	800d668 <__ieee754_rem_pio2+0x270>
 800d7e6:	bf00      	nop
 800d7e8:	41700000 	.word	0x41700000
 800d7ec:	0800e738 	.word	0x0800e738

0800d7f0 <fabs>:
 800d7f0:	ec51 0b10 	vmov	r0, r1, d0
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d7fa:	ec43 2b10 	vmov	d0, r2, r3
 800d7fe:	4770      	bx	lr

0800d800 <__kernel_rem_pio2>:
 800d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	ed2d 8b02 	vpush	{d8}
 800d808:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d80c:	f112 0f14 	cmn.w	r2, #20
 800d810:	9306      	str	r3, [sp, #24]
 800d812:	9104      	str	r1, [sp, #16]
 800d814:	4bc2      	ldr	r3, [pc, #776]	@ (800db20 <__kernel_rem_pio2+0x320>)
 800d816:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d818:	9008      	str	r0, [sp, #32]
 800d81a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	9b06      	ldr	r3, [sp, #24]
 800d822:	f103 33ff 	add.w	r3, r3, #4294967295
 800d826:	bfa8      	it	ge
 800d828:	1ed4      	subge	r4, r2, #3
 800d82a:	9305      	str	r3, [sp, #20]
 800d82c:	bfb2      	itee	lt
 800d82e:	2400      	movlt	r4, #0
 800d830:	2318      	movge	r3, #24
 800d832:	fb94 f4f3 	sdivge	r4, r4, r3
 800d836:	f06f 0317 	mvn.w	r3, #23
 800d83a:	fb04 3303 	mla	r3, r4, r3, r3
 800d83e:	eb03 0b02 	add.w	fp, r3, r2
 800d842:	9b00      	ldr	r3, [sp, #0]
 800d844:	9a05      	ldr	r2, [sp, #20]
 800d846:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800db10 <__kernel_rem_pio2+0x310>
 800d84a:	eb03 0802 	add.w	r8, r3, r2
 800d84e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d850:	1aa7      	subs	r7, r4, r2
 800d852:	ae20      	add	r6, sp, #128	@ 0x80
 800d854:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d858:	2500      	movs	r5, #0
 800d85a:	4545      	cmp	r5, r8
 800d85c:	dd12      	ble.n	800d884 <__kernel_rem_pio2+0x84>
 800d85e:	9b06      	ldr	r3, [sp, #24]
 800d860:	aa20      	add	r2, sp, #128	@ 0x80
 800d862:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d866:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d86a:	2700      	movs	r7, #0
 800d86c:	9b00      	ldr	r3, [sp, #0]
 800d86e:	429f      	cmp	r7, r3
 800d870:	dc2e      	bgt.n	800d8d0 <__kernel_rem_pio2+0xd0>
 800d872:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800db10 <__kernel_rem_pio2+0x310>
 800d876:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d87a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d87e:	46a8      	mov	r8, r5
 800d880:	2600      	movs	r6, #0
 800d882:	e01b      	b.n	800d8bc <__kernel_rem_pio2+0xbc>
 800d884:	42ef      	cmn	r7, r5
 800d886:	d407      	bmi.n	800d898 <__kernel_rem_pio2+0x98>
 800d888:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d88c:	f7f2 fe4a 	bl	8000524 <__aeabi_i2d>
 800d890:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d894:	3501      	adds	r5, #1
 800d896:	e7e0      	b.n	800d85a <__kernel_rem_pio2+0x5a>
 800d898:	ec51 0b18 	vmov	r0, r1, d8
 800d89c:	e7f8      	b.n	800d890 <__kernel_rem_pio2+0x90>
 800d89e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800d8a2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d8a6:	f7f2 fea7 	bl	80005f8 <__aeabi_dmul>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8b2:	f7f2 fceb 	bl	800028c <__adddf3>
 800d8b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8ba:	3601      	adds	r6, #1
 800d8bc:	9b05      	ldr	r3, [sp, #20]
 800d8be:	429e      	cmp	r6, r3
 800d8c0:	dded      	ble.n	800d89e <__kernel_rem_pio2+0x9e>
 800d8c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8c6:	3701      	adds	r7, #1
 800d8c8:	ecaa 7b02 	vstmia	sl!, {d7}
 800d8cc:	3508      	adds	r5, #8
 800d8ce:	e7cd      	b.n	800d86c <__kernel_rem_pio2+0x6c>
 800d8d0:	9b00      	ldr	r3, [sp, #0]
 800d8d2:	f8dd 8000 	ldr.w	r8, [sp]
 800d8d6:	aa0c      	add	r2, sp, #48	@ 0x30
 800d8d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d8e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d8e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d8ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8ec:	ab98      	add	r3, sp, #608	@ 0x260
 800d8ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d8f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d8f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8fa:	ac0c      	add	r4, sp, #48	@ 0x30
 800d8fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d8fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d902:	46a1      	mov	r9, r4
 800d904:	46c2      	mov	sl, r8
 800d906:	f1ba 0f00 	cmp.w	sl, #0
 800d90a:	dc77      	bgt.n	800d9fc <__kernel_rem_pio2+0x1fc>
 800d90c:	4658      	mov	r0, fp
 800d90e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d912:	f000 fac5 	bl	800dea0 <scalbn>
 800d916:	ec57 6b10 	vmov	r6, r7, d0
 800d91a:	2200      	movs	r2, #0
 800d91c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d920:	4630      	mov	r0, r6
 800d922:	4639      	mov	r1, r7
 800d924:	f7f2 fe68 	bl	80005f8 <__aeabi_dmul>
 800d928:	ec41 0b10 	vmov	d0, r0, r1
 800d92c:	f000 fb34 	bl	800df98 <floor>
 800d930:	4b7c      	ldr	r3, [pc, #496]	@ (800db24 <__kernel_rem_pio2+0x324>)
 800d932:	ec51 0b10 	vmov	r0, r1, d0
 800d936:	2200      	movs	r2, #0
 800d938:	f7f2 fe5e 	bl	80005f8 <__aeabi_dmul>
 800d93c:	4602      	mov	r2, r0
 800d93e:	460b      	mov	r3, r1
 800d940:	4630      	mov	r0, r6
 800d942:	4639      	mov	r1, r7
 800d944:	f7f2 fca0 	bl	8000288 <__aeabi_dsub>
 800d948:	460f      	mov	r7, r1
 800d94a:	4606      	mov	r6, r0
 800d94c:	f7f3 f904 	bl	8000b58 <__aeabi_d2iz>
 800d950:	9002      	str	r0, [sp, #8]
 800d952:	f7f2 fde7 	bl	8000524 <__aeabi_i2d>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4630      	mov	r0, r6
 800d95c:	4639      	mov	r1, r7
 800d95e:	f7f2 fc93 	bl	8000288 <__aeabi_dsub>
 800d962:	f1bb 0f00 	cmp.w	fp, #0
 800d966:	4606      	mov	r6, r0
 800d968:	460f      	mov	r7, r1
 800d96a:	dd6c      	ble.n	800da46 <__kernel_rem_pio2+0x246>
 800d96c:	f108 31ff 	add.w	r1, r8, #4294967295
 800d970:	ab0c      	add	r3, sp, #48	@ 0x30
 800d972:	9d02      	ldr	r5, [sp, #8]
 800d974:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d978:	f1cb 0018 	rsb	r0, fp, #24
 800d97c:	fa43 f200 	asr.w	r2, r3, r0
 800d980:	4415      	add	r5, r2
 800d982:	4082      	lsls	r2, r0
 800d984:	1a9b      	subs	r3, r3, r2
 800d986:	aa0c      	add	r2, sp, #48	@ 0x30
 800d988:	9502      	str	r5, [sp, #8]
 800d98a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d98e:	f1cb 0217 	rsb	r2, fp, #23
 800d992:	fa43 f902 	asr.w	r9, r3, r2
 800d996:	f1b9 0f00 	cmp.w	r9, #0
 800d99a:	dd64      	ble.n	800da66 <__kernel_rem_pio2+0x266>
 800d99c:	9b02      	ldr	r3, [sp, #8]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	9302      	str	r3, [sp, #8]
 800d9a4:	4615      	mov	r5, r2
 800d9a6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d9aa:	4590      	cmp	r8, r2
 800d9ac:	f300 80a1 	bgt.w	800daf2 <__kernel_rem_pio2+0x2f2>
 800d9b0:	f1bb 0f00 	cmp.w	fp, #0
 800d9b4:	dd07      	ble.n	800d9c6 <__kernel_rem_pio2+0x1c6>
 800d9b6:	f1bb 0f01 	cmp.w	fp, #1
 800d9ba:	f000 80c1 	beq.w	800db40 <__kernel_rem_pio2+0x340>
 800d9be:	f1bb 0f02 	cmp.w	fp, #2
 800d9c2:	f000 80c8 	beq.w	800db56 <__kernel_rem_pio2+0x356>
 800d9c6:	f1b9 0f02 	cmp.w	r9, #2
 800d9ca:	d14c      	bne.n	800da66 <__kernel_rem_pio2+0x266>
 800d9cc:	4632      	mov	r2, r6
 800d9ce:	463b      	mov	r3, r7
 800d9d0:	4955      	ldr	r1, [pc, #340]	@ (800db28 <__kernel_rem_pio2+0x328>)
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	f7f2 fc58 	bl	8000288 <__aeabi_dsub>
 800d9d8:	4606      	mov	r6, r0
 800d9da:	460f      	mov	r7, r1
 800d9dc:	2d00      	cmp	r5, #0
 800d9de:	d042      	beq.n	800da66 <__kernel_rem_pio2+0x266>
 800d9e0:	4658      	mov	r0, fp
 800d9e2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800db18 <__kernel_rem_pio2+0x318>
 800d9e6:	f000 fa5b 	bl	800dea0 <scalbn>
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	ec53 2b10 	vmov	r2, r3, d0
 800d9f2:	f7f2 fc49 	bl	8000288 <__aeabi_dsub>
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	460f      	mov	r7, r1
 800d9fa:	e034      	b.n	800da66 <__kernel_rem_pio2+0x266>
 800d9fc:	4b4b      	ldr	r3, [pc, #300]	@ (800db2c <__kernel_rem_pio2+0x32c>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da04:	f7f2 fdf8 	bl	80005f8 <__aeabi_dmul>
 800da08:	f7f3 f8a6 	bl	8000b58 <__aeabi_d2iz>
 800da0c:	f7f2 fd8a 	bl	8000524 <__aeabi_i2d>
 800da10:	4b47      	ldr	r3, [pc, #284]	@ (800db30 <__kernel_rem_pio2+0x330>)
 800da12:	2200      	movs	r2, #0
 800da14:	4606      	mov	r6, r0
 800da16:	460f      	mov	r7, r1
 800da18:	f7f2 fdee 	bl	80005f8 <__aeabi_dmul>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da24:	f7f2 fc30 	bl	8000288 <__aeabi_dsub>
 800da28:	f7f3 f896 	bl	8000b58 <__aeabi_d2iz>
 800da2c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800da30:	f849 0b04 	str.w	r0, [r9], #4
 800da34:	4639      	mov	r1, r7
 800da36:	4630      	mov	r0, r6
 800da38:	f7f2 fc28 	bl	800028c <__adddf3>
 800da3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da44:	e75f      	b.n	800d906 <__kernel_rem_pio2+0x106>
 800da46:	d107      	bne.n	800da58 <__kernel_rem_pio2+0x258>
 800da48:	f108 33ff 	add.w	r3, r8, #4294967295
 800da4c:	aa0c      	add	r2, sp, #48	@ 0x30
 800da4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da52:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800da56:	e79e      	b.n	800d996 <__kernel_rem_pio2+0x196>
 800da58:	4b36      	ldr	r3, [pc, #216]	@ (800db34 <__kernel_rem_pio2+0x334>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	f7f3 f852 	bl	8000b04 <__aeabi_dcmpge>
 800da60:	2800      	cmp	r0, #0
 800da62:	d143      	bne.n	800daec <__kernel_rem_pio2+0x2ec>
 800da64:	4681      	mov	r9, r0
 800da66:	2200      	movs	r2, #0
 800da68:	2300      	movs	r3, #0
 800da6a:	4630      	mov	r0, r6
 800da6c:	4639      	mov	r1, r7
 800da6e:	f7f3 f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 800da72:	2800      	cmp	r0, #0
 800da74:	f000 80c1 	beq.w	800dbfa <__kernel_rem_pio2+0x3fa>
 800da78:	f108 33ff 	add.w	r3, r8, #4294967295
 800da7c:	2200      	movs	r2, #0
 800da7e:	9900      	ldr	r1, [sp, #0]
 800da80:	428b      	cmp	r3, r1
 800da82:	da70      	bge.n	800db66 <__kernel_rem_pio2+0x366>
 800da84:	2a00      	cmp	r2, #0
 800da86:	f000 808b 	beq.w	800dba0 <__kernel_rem_pio2+0x3a0>
 800da8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800da8e:	ab0c      	add	r3, sp, #48	@ 0x30
 800da90:	f1ab 0b18 	sub.w	fp, fp, #24
 800da94:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d0f6      	beq.n	800da8a <__kernel_rem_pio2+0x28a>
 800da9c:	4658      	mov	r0, fp
 800da9e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800db18 <__kernel_rem_pio2+0x318>
 800daa2:	f000 f9fd 	bl	800dea0 <scalbn>
 800daa6:	f108 0301 	add.w	r3, r8, #1
 800daaa:	00da      	lsls	r2, r3, #3
 800daac:	9205      	str	r2, [sp, #20]
 800daae:	ec55 4b10 	vmov	r4, r5, d0
 800dab2:	aa70      	add	r2, sp, #448	@ 0x1c0
 800dab4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800db2c <__kernel_rem_pio2+0x32c>
 800dab8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800dabc:	4646      	mov	r6, r8
 800dabe:	f04f 0a00 	mov.w	sl, #0
 800dac2:	2e00      	cmp	r6, #0
 800dac4:	f280 80d1 	bge.w	800dc6a <__kernel_rem_pio2+0x46a>
 800dac8:	4644      	mov	r4, r8
 800daca:	2c00      	cmp	r4, #0
 800dacc:	f2c0 80ff 	blt.w	800dcce <__kernel_rem_pio2+0x4ce>
 800dad0:	4b19      	ldr	r3, [pc, #100]	@ (800db38 <__kernel_rem_pio2+0x338>)
 800dad2:	461f      	mov	r7, r3
 800dad4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dad6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dada:	9306      	str	r3, [sp, #24]
 800dadc:	f04f 0a00 	mov.w	sl, #0
 800dae0:	f04f 0b00 	mov.w	fp, #0
 800dae4:	2600      	movs	r6, #0
 800dae6:	eba8 0504 	sub.w	r5, r8, r4
 800daea:	e0e4      	b.n	800dcb6 <__kernel_rem_pio2+0x4b6>
 800daec:	f04f 0902 	mov.w	r9, #2
 800daf0:	e754      	b.n	800d99c <__kernel_rem_pio2+0x19c>
 800daf2:	f854 3b04 	ldr.w	r3, [r4], #4
 800daf6:	bb0d      	cbnz	r5, 800db3c <__kernel_rem_pio2+0x33c>
 800daf8:	b123      	cbz	r3, 800db04 <__kernel_rem_pio2+0x304>
 800dafa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800dafe:	f844 3c04 	str.w	r3, [r4, #-4]
 800db02:	2301      	movs	r3, #1
 800db04:	3201      	adds	r2, #1
 800db06:	461d      	mov	r5, r3
 800db08:	e74f      	b.n	800d9aa <__kernel_rem_pio2+0x1aa>
 800db0a:	bf00      	nop
 800db0c:	f3af 8000 	nop.w
	...
 800db1c:	3ff00000 	.word	0x3ff00000
 800db20:	0800e880 	.word	0x0800e880
 800db24:	40200000 	.word	0x40200000
 800db28:	3ff00000 	.word	0x3ff00000
 800db2c:	3e700000 	.word	0x3e700000
 800db30:	41700000 	.word	0x41700000
 800db34:	3fe00000 	.word	0x3fe00000
 800db38:	0800e840 	.word	0x0800e840
 800db3c:	1acb      	subs	r3, r1, r3
 800db3e:	e7de      	b.n	800dafe <__kernel_rem_pio2+0x2fe>
 800db40:	f108 32ff 	add.w	r2, r8, #4294967295
 800db44:	ab0c      	add	r3, sp, #48	@ 0x30
 800db46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800db4e:	a90c      	add	r1, sp, #48	@ 0x30
 800db50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800db54:	e737      	b.n	800d9c6 <__kernel_rem_pio2+0x1c6>
 800db56:	f108 32ff 	add.w	r2, r8, #4294967295
 800db5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800db5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db64:	e7f3      	b.n	800db4e <__kernel_rem_pio2+0x34e>
 800db66:	a90c      	add	r1, sp, #48	@ 0x30
 800db68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	430a      	orrs	r2, r1
 800db70:	e785      	b.n	800da7e <__kernel_rem_pio2+0x27e>
 800db72:	3401      	adds	r4, #1
 800db74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800db78:	2a00      	cmp	r2, #0
 800db7a:	d0fa      	beq.n	800db72 <__kernel_rem_pio2+0x372>
 800db7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800db82:	eb0d 0503 	add.w	r5, sp, r3
 800db86:	9b06      	ldr	r3, [sp, #24]
 800db88:	aa20      	add	r2, sp, #128	@ 0x80
 800db8a:	4443      	add	r3, r8
 800db8c:	f108 0701 	add.w	r7, r8, #1
 800db90:	3d98      	subs	r5, #152	@ 0x98
 800db92:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800db96:	4444      	add	r4, r8
 800db98:	42bc      	cmp	r4, r7
 800db9a:	da04      	bge.n	800dba6 <__kernel_rem_pio2+0x3a6>
 800db9c:	46a0      	mov	r8, r4
 800db9e:	e6a2      	b.n	800d8e6 <__kernel_rem_pio2+0xe6>
 800dba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba2:	2401      	movs	r4, #1
 800dba4:	e7e6      	b.n	800db74 <__kernel_rem_pio2+0x374>
 800dba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dba8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800dbac:	f7f2 fcba 	bl	8000524 <__aeabi_i2d>
 800dbb0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800de70 <__kernel_rem_pio2+0x670>
 800dbb4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dbb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbc0:	46b2      	mov	sl, r6
 800dbc2:	f04f 0800 	mov.w	r8, #0
 800dbc6:	9b05      	ldr	r3, [sp, #20]
 800dbc8:	4598      	cmp	r8, r3
 800dbca:	dd05      	ble.n	800dbd8 <__kernel_rem_pio2+0x3d8>
 800dbcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbd0:	3701      	adds	r7, #1
 800dbd2:	eca5 7b02 	vstmia	r5!, {d7}
 800dbd6:	e7df      	b.n	800db98 <__kernel_rem_pio2+0x398>
 800dbd8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800dbdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dbe0:	f7f2 fd0a 	bl	80005f8 <__aeabi_dmul>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbec:	f7f2 fb4e 	bl	800028c <__adddf3>
 800dbf0:	f108 0801 	add.w	r8, r8, #1
 800dbf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbf8:	e7e5      	b.n	800dbc6 <__kernel_rem_pio2+0x3c6>
 800dbfa:	f1cb 0000 	rsb	r0, fp, #0
 800dbfe:	ec47 6b10 	vmov	d0, r6, r7
 800dc02:	f000 f94d 	bl	800dea0 <scalbn>
 800dc06:	ec55 4b10 	vmov	r4, r5, d0
 800dc0a:	4b9b      	ldr	r3, [pc, #620]	@ (800de78 <__kernel_rem_pio2+0x678>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	4620      	mov	r0, r4
 800dc10:	4629      	mov	r1, r5
 800dc12:	f7f2 ff77 	bl	8000b04 <__aeabi_dcmpge>
 800dc16:	b300      	cbz	r0, 800dc5a <__kernel_rem_pio2+0x45a>
 800dc18:	4b98      	ldr	r3, [pc, #608]	@ (800de7c <__kernel_rem_pio2+0x67c>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	4629      	mov	r1, r5
 800dc20:	f7f2 fcea 	bl	80005f8 <__aeabi_dmul>
 800dc24:	f7f2 ff98 	bl	8000b58 <__aeabi_d2iz>
 800dc28:	4606      	mov	r6, r0
 800dc2a:	f7f2 fc7b 	bl	8000524 <__aeabi_i2d>
 800dc2e:	4b92      	ldr	r3, [pc, #584]	@ (800de78 <__kernel_rem_pio2+0x678>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	f7f2 fce1 	bl	80005f8 <__aeabi_dmul>
 800dc36:	460b      	mov	r3, r1
 800dc38:	4602      	mov	r2, r0
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f7f2 fb23 	bl	8000288 <__aeabi_dsub>
 800dc42:	f7f2 ff89 	bl	8000b58 <__aeabi_d2iz>
 800dc46:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc48:	f10b 0b18 	add.w	fp, fp, #24
 800dc4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dc50:	f108 0801 	add.w	r8, r8, #1
 800dc54:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800dc58:	e720      	b.n	800da9c <__kernel_rem_pio2+0x29c>
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	f7f2 ff7b 	bl	8000b58 <__aeabi_d2iz>
 800dc62:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dc68:	e718      	b.n	800da9c <__kernel_rem_pio2+0x29c>
 800dc6a:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dc70:	f7f2 fc58 	bl	8000524 <__aeabi_i2d>
 800dc74:	4622      	mov	r2, r4
 800dc76:	462b      	mov	r3, r5
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	4652      	mov	r2, sl
 800dc7e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800dc82:	465b      	mov	r3, fp
 800dc84:	4620      	mov	r0, r4
 800dc86:	4629      	mov	r1, r5
 800dc88:	f7f2 fcb6 	bl	80005f8 <__aeabi_dmul>
 800dc8c:	3e01      	subs	r6, #1
 800dc8e:	4604      	mov	r4, r0
 800dc90:	460d      	mov	r5, r1
 800dc92:	e716      	b.n	800dac2 <__kernel_rem_pio2+0x2c2>
 800dc94:	9906      	ldr	r1, [sp, #24]
 800dc96:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800dc9a:	9106      	str	r1, [sp, #24]
 800dc9c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800dca0:	f7f2 fcaa 	bl	80005f8 <__aeabi_dmul>
 800dca4:	4602      	mov	r2, r0
 800dca6:	460b      	mov	r3, r1
 800dca8:	4650      	mov	r0, sl
 800dcaa:	4659      	mov	r1, fp
 800dcac:	f7f2 faee 	bl	800028c <__adddf3>
 800dcb0:	3601      	adds	r6, #1
 800dcb2:	4682      	mov	sl, r0
 800dcb4:	468b      	mov	fp, r1
 800dcb6:	9b00      	ldr	r3, [sp, #0]
 800dcb8:	429e      	cmp	r6, r3
 800dcba:	dc01      	bgt.n	800dcc0 <__kernel_rem_pio2+0x4c0>
 800dcbc:	42ae      	cmp	r6, r5
 800dcbe:	dde9      	ble.n	800dc94 <__kernel_rem_pio2+0x494>
 800dcc0:	ab48      	add	r3, sp, #288	@ 0x120
 800dcc2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dcc6:	e9c5 ab00 	strd	sl, fp, [r5]
 800dcca:	3c01      	subs	r4, #1
 800dccc:	e6fd      	b.n	800daca <__kernel_rem_pio2+0x2ca>
 800dcce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	dc0b      	bgt.n	800dcec <__kernel_rem_pio2+0x4ec>
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	dc35      	bgt.n	800dd44 <__kernel_rem_pio2+0x544>
 800dcd8:	d059      	beq.n	800dd8e <__kernel_rem_pio2+0x58e>
 800dcda:	9b02      	ldr	r3, [sp, #8]
 800dcdc:	f003 0007 	and.w	r0, r3, #7
 800dce0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800dce4:	ecbd 8b02 	vpop	{d8}
 800dce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dcee:	2b03      	cmp	r3, #3
 800dcf0:	d1f3      	bne.n	800dcda <__kernel_rem_pio2+0x4da>
 800dcf2:	9b05      	ldr	r3, [sp, #20]
 800dcf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dcf8:	eb0d 0403 	add.w	r4, sp, r3
 800dcfc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800dd00:	4625      	mov	r5, r4
 800dd02:	46c2      	mov	sl, r8
 800dd04:	f1ba 0f00 	cmp.w	sl, #0
 800dd08:	dc69      	bgt.n	800ddde <__kernel_rem_pio2+0x5de>
 800dd0a:	4645      	mov	r5, r8
 800dd0c:	2d01      	cmp	r5, #1
 800dd0e:	f300 8087 	bgt.w	800de20 <__kernel_rem_pio2+0x620>
 800dd12:	9c05      	ldr	r4, [sp, #20]
 800dd14:	ab48      	add	r3, sp, #288	@ 0x120
 800dd16:	441c      	add	r4, r3
 800dd18:	2000      	movs	r0, #0
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	f1b8 0f01 	cmp.w	r8, #1
 800dd20:	f300 809c 	bgt.w	800de5c <__kernel_rem_pio2+0x65c>
 800dd24:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800dd28:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800dd2c:	f1b9 0f00 	cmp.w	r9, #0
 800dd30:	f040 80a6 	bne.w	800de80 <__kernel_rem_pio2+0x680>
 800dd34:	9b04      	ldr	r3, [sp, #16]
 800dd36:	e9c3 5600 	strd	r5, r6, [r3]
 800dd3a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dd3e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dd42:	e7ca      	b.n	800dcda <__kernel_rem_pio2+0x4da>
 800dd44:	9d05      	ldr	r5, [sp, #20]
 800dd46:	ab48      	add	r3, sp, #288	@ 0x120
 800dd48:	441d      	add	r5, r3
 800dd4a:	4644      	mov	r4, r8
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	2100      	movs	r1, #0
 800dd50:	2c00      	cmp	r4, #0
 800dd52:	da35      	bge.n	800ddc0 <__kernel_rem_pio2+0x5c0>
 800dd54:	f1b9 0f00 	cmp.w	r9, #0
 800dd58:	d038      	beq.n	800ddcc <__kernel_rem_pio2+0x5cc>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd60:	9c04      	ldr	r4, [sp, #16]
 800dd62:	e9c4 2300 	strd	r2, r3, [r4]
 800dd66:	4602      	mov	r2, r0
 800dd68:	460b      	mov	r3, r1
 800dd6a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800dd6e:	f7f2 fa8b 	bl	8000288 <__aeabi_dsub>
 800dd72:	ad4a      	add	r5, sp, #296	@ 0x128
 800dd74:	2401      	movs	r4, #1
 800dd76:	45a0      	cmp	r8, r4
 800dd78:	da2b      	bge.n	800ddd2 <__kernel_rem_pio2+0x5d2>
 800dd7a:	f1b9 0f00 	cmp.w	r9, #0
 800dd7e:	d002      	beq.n	800dd86 <__kernel_rem_pio2+0x586>
 800dd80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd84:	4619      	mov	r1, r3
 800dd86:	9b04      	ldr	r3, [sp, #16]
 800dd88:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dd8c:	e7a5      	b.n	800dcda <__kernel_rem_pio2+0x4da>
 800dd8e:	9c05      	ldr	r4, [sp, #20]
 800dd90:	ab48      	add	r3, sp, #288	@ 0x120
 800dd92:	441c      	add	r4, r3
 800dd94:	2000      	movs	r0, #0
 800dd96:	2100      	movs	r1, #0
 800dd98:	f1b8 0f00 	cmp.w	r8, #0
 800dd9c:	da09      	bge.n	800ddb2 <__kernel_rem_pio2+0x5b2>
 800dd9e:	f1b9 0f00 	cmp.w	r9, #0
 800dda2:	d002      	beq.n	800ddaa <__kernel_rem_pio2+0x5aa>
 800dda4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dda8:	4619      	mov	r1, r3
 800ddaa:	9b04      	ldr	r3, [sp, #16]
 800ddac:	e9c3 0100 	strd	r0, r1, [r3]
 800ddb0:	e793      	b.n	800dcda <__kernel_rem_pio2+0x4da>
 800ddb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ddb6:	f7f2 fa69 	bl	800028c <__adddf3>
 800ddba:	f108 38ff 	add.w	r8, r8, #4294967295
 800ddbe:	e7eb      	b.n	800dd98 <__kernel_rem_pio2+0x598>
 800ddc0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ddc4:	f7f2 fa62 	bl	800028c <__adddf3>
 800ddc8:	3c01      	subs	r4, #1
 800ddca:	e7c1      	b.n	800dd50 <__kernel_rem_pio2+0x550>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	460b      	mov	r3, r1
 800ddd0:	e7c6      	b.n	800dd60 <__kernel_rem_pio2+0x560>
 800ddd2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ddd6:	f7f2 fa59 	bl	800028c <__adddf3>
 800ddda:	3401      	adds	r4, #1
 800dddc:	e7cb      	b.n	800dd76 <__kernel_rem_pio2+0x576>
 800ddde:	ed35 7b02 	vldmdb	r5!, {d7}
 800dde2:	ed8d 7b00 	vstr	d7, [sp]
 800dde6:	ed95 7b02 	vldr	d7, [r5, #8]
 800ddea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddee:	ec53 2b17 	vmov	r2, r3, d7
 800ddf2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ddf6:	f7f2 fa49 	bl	800028c <__adddf3>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4606      	mov	r6, r0
 800de00:	460f      	mov	r7, r1
 800de02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de06:	f7f2 fa3f 	bl	8000288 <__aeabi_dsub>
 800de0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de0e:	f7f2 fa3d 	bl	800028c <__adddf3>
 800de12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de16:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800de1a:	e9c5 6700 	strd	r6, r7, [r5]
 800de1e:	e771      	b.n	800dd04 <__kernel_rem_pio2+0x504>
 800de20:	ed34 7b02 	vldmdb	r4!, {d7}
 800de24:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800de28:	ec51 0b17 	vmov	r0, r1, d7
 800de2c:	4652      	mov	r2, sl
 800de2e:	465b      	mov	r3, fp
 800de30:	ed8d 7b00 	vstr	d7, [sp]
 800de34:	f7f2 fa2a 	bl	800028c <__adddf3>
 800de38:	4602      	mov	r2, r0
 800de3a:	460b      	mov	r3, r1
 800de3c:	4606      	mov	r6, r0
 800de3e:	460f      	mov	r7, r1
 800de40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de44:	f7f2 fa20 	bl	8000288 <__aeabi_dsub>
 800de48:	4652      	mov	r2, sl
 800de4a:	465b      	mov	r3, fp
 800de4c:	f7f2 fa1e 	bl	800028c <__adddf3>
 800de50:	3d01      	subs	r5, #1
 800de52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de56:	e9c4 6700 	strd	r6, r7, [r4]
 800de5a:	e757      	b.n	800dd0c <__kernel_rem_pio2+0x50c>
 800de5c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de60:	f7f2 fa14 	bl	800028c <__adddf3>
 800de64:	f108 38ff 	add.w	r8, r8, #4294967295
 800de68:	e758      	b.n	800dd1c <__kernel_rem_pio2+0x51c>
 800de6a:	bf00      	nop
 800de6c:	f3af 8000 	nop.w
	...
 800de78:	41700000 	.word	0x41700000
 800de7c:	3e700000 	.word	0x3e700000
 800de80:	9b04      	ldr	r3, [sp, #16]
 800de82:	9a04      	ldr	r2, [sp, #16]
 800de84:	601d      	str	r5, [r3, #0]
 800de86:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800de8a:	605c      	str	r4, [r3, #4]
 800de8c:	609f      	str	r7, [r3, #8]
 800de8e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800de92:	60d3      	str	r3, [r2, #12]
 800de94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de98:	6110      	str	r0, [r2, #16]
 800de9a:	6153      	str	r3, [r2, #20]
 800de9c:	e71d      	b.n	800dcda <__kernel_rem_pio2+0x4da>
 800de9e:	bf00      	nop

0800dea0 <scalbn>:
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	ec55 4b10 	vmov	r4, r5, d0
 800dea6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800deaa:	4606      	mov	r6, r0
 800deac:	462b      	mov	r3, r5
 800deae:	b991      	cbnz	r1, 800ded6 <scalbn+0x36>
 800deb0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800deb4:	4323      	orrs	r3, r4
 800deb6:	d03b      	beq.n	800df30 <scalbn+0x90>
 800deb8:	4b33      	ldr	r3, [pc, #204]	@ (800df88 <scalbn+0xe8>)
 800deba:	4620      	mov	r0, r4
 800debc:	4629      	mov	r1, r5
 800debe:	2200      	movs	r2, #0
 800dec0:	f7f2 fb9a 	bl	80005f8 <__aeabi_dmul>
 800dec4:	4b31      	ldr	r3, [pc, #196]	@ (800df8c <scalbn+0xec>)
 800dec6:	429e      	cmp	r6, r3
 800dec8:	4604      	mov	r4, r0
 800deca:	460d      	mov	r5, r1
 800decc:	da0f      	bge.n	800deee <scalbn+0x4e>
 800dece:	a326      	add	r3, pc, #152	@ (adr r3, 800df68 <scalbn+0xc8>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	e01e      	b.n	800df14 <scalbn+0x74>
 800ded6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800deda:	4291      	cmp	r1, r2
 800dedc:	d10b      	bne.n	800def6 <scalbn+0x56>
 800dede:	4622      	mov	r2, r4
 800dee0:	4620      	mov	r0, r4
 800dee2:	4629      	mov	r1, r5
 800dee4:	f7f2 f9d2 	bl	800028c <__adddf3>
 800dee8:	4604      	mov	r4, r0
 800deea:	460d      	mov	r5, r1
 800deec:	e020      	b.n	800df30 <scalbn+0x90>
 800deee:	460b      	mov	r3, r1
 800def0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800def4:	3936      	subs	r1, #54	@ 0x36
 800def6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800defa:	4296      	cmp	r6, r2
 800defc:	dd0d      	ble.n	800df1a <scalbn+0x7a>
 800defe:	2d00      	cmp	r5, #0
 800df00:	a11b      	add	r1, pc, #108	@ (adr r1, 800df70 <scalbn+0xd0>)
 800df02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df06:	da02      	bge.n	800df0e <scalbn+0x6e>
 800df08:	a11b      	add	r1, pc, #108	@ (adr r1, 800df78 <scalbn+0xd8>)
 800df0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df0e:	a318      	add	r3, pc, #96	@ (adr r3, 800df70 <scalbn+0xd0>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	f7f2 fb70 	bl	80005f8 <__aeabi_dmul>
 800df18:	e7e6      	b.n	800dee8 <scalbn+0x48>
 800df1a:	1872      	adds	r2, r6, r1
 800df1c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800df20:	428a      	cmp	r2, r1
 800df22:	dcec      	bgt.n	800defe <scalbn+0x5e>
 800df24:	2a00      	cmp	r2, #0
 800df26:	dd06      	ble.n	800df36 <scalbn+0x96>
 800df28:	f36f 531e 	bfc	r3, #20, #11
 800df2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df30:	ec45 4b10 	vmov	d0, r4, r5
 800df34:	bd70      	pop	{r4, r5, r6, pc}
 800df36:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800df3a:	da08      	bge.n	800df4e <scalbn+0xae>
 800df3c:	2d00      	cmp	r5, #0
 800df3e:	a10a      	add	r1, pc, #40	@ (adr r1, 800df68 <scalbn+0xc8>)
 800df40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df44:	dac3      	bge.n	800dece <scalbn+0x2e>
 800df46:	a10e      	add	r1, pc, #56	@ (adr r1, 800df80 <scalbn+0xe0>)
 800df48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df4c:	e7bf      	b.n	800dece <scalbn+0x2e>
 800df4e:	3236      	adds	r2, #54	@ 0x36
 800df50:	f36f 531e 	bfc	r3, #20, #11
 800df54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df58:	4620      	mov	r0, r4
 800df5a:	4b0d      	ldr	r3, [pc, #52]	@ (800df90 <scalbn+0xf0>)
 800df5c:	4629      	mov	r1, r5
 800df5e:	2200      	movs	r2, #0
 800df60:	e7d8      	b.n	800df14 <scalbn+0x74>
 800df62:	bf00      	nop
 800df64:	f3af 8000 	nop.w
 800df68:	c2f8f359 	.word	0xc2f8f359
 800df6c:	01a56e1f 	.word	0x01a56e1f
 800df70:	8800759c 	.word	0x8800759c
 800df74:	7e37e43c 	.word	0x7e37e43c
 800df78:	8800759c 	.word	0x8800759c
 800df7c:	fe37e43c 	.word	0xfe37e43c
 800df80:	c2f8f359 	.word	0xc2f8f359
 800df84:	81a56e1f 	.word	0x81a56e1f
 800df88:	43500000 	.word	0x43500000
 800df8c:	ffff3cb0 	.word	0xffff3cb0
 800df90:	3c900000 	.word	0x3c900000
 800df94:	00000000 	.word	0x00000000

0800df98 <floor>:
 800df98:	ec51 0b10 	vmov	r0, r1, d0
 800df9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800dfa8:	2e13      	cmp	r6, #19
 800dfaa:	460c      	mov	r4, r1
 800dfac:	4605      	mov	r5, r0
 800dfae:	4680      	mov	r8, r0
 800dfb0:	dc34      	bgt.n	800e01c <floor+0x84>
 800dfb2:	2e00      	cmp	r6, #0
 800dfb4:	da17      	bge.n	800dfe6 <floor+0x4e>
 800dfb6:	a332      	add	r3, pc, #200	@ (adr r3, 800e080 <floor+0xe8>)
 800dfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbc:	f7f2 f966 	bl	800028c <__adddf3>
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f7f2 fda8 	bl	8000b18 <__aeabi_dcmpgt>
 800dfc8:	b150      	cbz	r0, 800dfe0 <floor+0x48>
 800dfca:	2c00      	cmp	r4, #0
 800dfcc:	da55      	bge.n	800e07a <floor+0xe2>
 800dfce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dfd2:	432c      	orrs	r4, r5
 800dfd4:	2500      	movs	r5, #0
 800dfd6:	42ac      	cmp	r4, r5
 800dfd8:	4c2b      	ldr	r4, [pc, #172]	@ (800e088 <floor+0xf0>)
 800dfda:	bf08      	it	eq
 800dfdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	e023      	b.n	800e02e <floor+0x96>
 800dfe6:	4f29      	ldr	r7, [pc, #164]	@ (800e08c <floor+0xf4>)
 800dfe8:	4137      	asrs	r7, r6
 800dfea:	ea01 0307 	and.w	r3, r1, r7
 800dfee:	4303      	orrs	r3, r0
 800dff0:	d01d      	beq.n	800e02e <floor+0x96>
 800dff2:	a323      	add	r3, pc, #140	@ (adr r3, 800e080 <floor+0xe8>)
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	f7f2 f948 	bl	800028c <__adddf3>
 800dffc:	2200      	movs	r2, #0
 800dffe:	2300      	movs	r3, #0
 800e000:	f7f2 fd8a 	bl	8000b18 <__aeabi_dcmpgt>
 800e004:	2800      	cmp	r0, #0
 800e006:	d0eb      	beq.n	800dfe0 <floor+0x48>
 800e008:	2c00      	cmp	r4, #0
 800e00a:	bfbe      	ittt	lt
 800e00c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e010:	4133      	asrlt	r3, r6
 800e012:	18e4      	addlt	r4, r4, r3
 800e014:	ea24 0407 	bic.w	r4, r4, r7
 800e018:	2500      	movs	r5, #0
 800e01a:	e7e1      	b.n	800dfe0 <floor+0x48>
 800e01c:	2e33      	cmp	r6, #51	@ 0x33
 800e01e:	dd0a      	ble.n	800e036 <floor+0x9e>
 800e020:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e024:	d103      	bne.n	800e02e <floor+0x96>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	f7f2 f92f 	bl	800028c <__adddf3>
 800e02e:	ec41 0b10 	vmov	d0, r0, r1
 800e032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e036:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e03a:	f04f 37ff 	mov.w	r7, #4294967295
 800e03e:	40df      	lsrs	r7, r3
 800e040:	4207      	tst	r7, r0
 800e042:	d0f4      	beq.n	800e02e <floor+0x96>
 800e044:	a30e      	add	r3, pc, #56	@ (adr r3, 800e080 <floor+0xe8>)
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f7f2 f91f 	bl	800028c <__adddf3>
 800e04e:	2200      	movs	r2, #0
 800e050:	2300      	movs	r3, #0
 800e052:	f7f2 fd61 	bl	8000b18 <__aeabi_dcmpgt>
 800e056:	2800      	cmp	r0, #0
 800e058:	d0c2      	beq.n	800dfe0 <floor+0x48>
 800e05a:	2c00      	cmp	r4, #0
 800e05c:	da0a      	bge.n	800e074 <floor+0xdc>
 800e05e:	2e14      	cmp	r6, #20
 800e060:	d101      	bne.n	800e066 <floor+0xce>
 800e062:	3401      	adds	r4, #1
 800e064:	e006      	b.n	800e074 <floor+0xdc>
 800e066:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e06a:	2301      	movs	r3, #1
 800e06c:	40b3      	lsls	r3, r6
 800e06e:	441d      	add	r5, r3
 800e070:	4545      	cmp	r5, r8
 800e072:	d3f6      	bcc.n	800e062 <floor+0xca>
 800e074:	ea25 0507 	bic.w	r5, r5, r7
 800e078:	e7b2      	b.n	800dfe0 <floor+0x48>
 800e07a:	2500      	movs	r5, #0
 800e07c:	462c      	mov	r4, r5
 800e07e:	e7af      	b.n	800dfe0 <floor+0x48>
 800e080:	8800759c 	.word	0x8800759c
 800e084:	7e37e43c 	.word	0x7e37e43c
 800e088:	bff00000 	.word	0xbff00000
 800e08c:	000fffff 	.word	0x000fffff

0800e090 <_init>:
 800e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e092:	bf00      	nop
 800e094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e096:	bc08      	pop	{r3}
 800e098:	469e      	mov	lr, r3
 800e09a:	4770      	bx	lr

0800e09c <_fini>:
 800e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09e:	bf00      	nop
 800e0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0a2:	bc08      	pop	{r3}
 800e0a4:	469e      	mov	lr, r3
 800e0a6:	4770      	bx	lr
