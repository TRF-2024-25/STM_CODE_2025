
all_pins_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800dd48  0800dd48  0000ed48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e530  0800e530  000102c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e530  0800e530  0000f530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e538  0800e538  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e538  0800e538  0000f538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e53c  0800e53c  0000f53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800e540  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c4  2**0
                  CONTENTS
 10 .bss          0000090c  200002c8  200002c8  000102c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000bd4  20000bd4  000102c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013590  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255b  00000000  00000000  00023884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00025de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eae  00000000  00000000  00027058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d61  00000000  00000000  00027f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015461  00000000  00000000  00049c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de657  00000000  00000000  0005f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d71f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000679c  00000000  00000000  0013d764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00143f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd30 	.word	0x0800dd30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800dd30 	.word	0x0800dd30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001024:	f3bf 8f4f 	dsb	sy
}
 8001028:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <__NVIC_SystemReset+0x24>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001032:	4904      	ldr	r1, [pc, #16]	@ (8001044 <__NVIC_SystemReset+0x24>)
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_SystemReset+0x28>)
 8001036:	4313      	orrs	r3, r2
 8001038:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800103a:	f3bf 8f4f 	dsb	sy
}
 800103e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <__NVIC_SystemReset+0x20>
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	05fa0004 	.word	0x05fa0004

0800104c <constrain>:
int16_t counter_lower = 0;
int16_t counter_4 = 0;
int16_t counter_5 = 0;
int16_t counter_8 = 0;

int constrain(int value, int min, int max) {
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
	if (value < min)
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	429a      	cmp	r2, r3
 800105e:	da01      	bge.n	8001064 <constrain+0x18>
		return min;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	e006      	b.n	8001072 <constrain+0x26>
	else if (value > max)
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dd01      	ble.n	8001070 <constrain+0x24>
		return max;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	e000      	b.n	8001072 <constrain+0x26>
	else
		return value;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <constrain_float>:

float constrain_float(float value,float min,float max){
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	ed87 0a03 	vstr	s0, [r7, #12]
 8001088:	edc7 0a02 	vstr	s1, [r7, #8]
 800108c:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value<min){
 8001090:	ed97 7a03 	vldr	s14, [r7, #12]
 8001094:	edd7 7a02 	vldr	s15, [r7, #8]
 8001098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a0:	d501      	bpl.n	80010a6 <constrain_float+0x28>
		return min;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	e00b      	b.n	80010be <constrain_float+0x40>
	}
	else if(value> max){
 80010a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	dd01      	ble.n	80010bc <constrain_float+0x3e>
		return max;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	e000      	b.n	80010be <constrain_float+0x40>
	}
	else{
		return value;
 80010bc:	68fb      	ldr	r3, [r7, #12]
	}
}
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <dis_cal>:
		*value = (~*value) + 1;
	}
//	return value;
}

void dis_cal() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

	// if (ARdistance > 0.0) {
	ARdistance = 5;
 80010d4:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <dis_cal+0x100>)
 80010d6:	4a3f      	ldr	r2, [pc, #252]	@ (80011d4 <dis_cal+0x104>)
 80010d8:	601a      	str	r2, [r3, #0]
	Rpm_set_lower =2850;//(isthreepointer) ?(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 160)<0? (~(int)(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 160) +1):(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 160) :2900;
 80010da:	4b3f      	ldr	r3, [pc, #252]	@ (80011d8 <dis_cal+0x108>)
 80010dc:	f640 3222 	movw	r2, #2850	@ 0xb22
 80010e0:	601a      	str	r2, [r3, #0]
	Rpm_set_lower = constrain(Rpm_set_lower, 0, 3200);
 80010e2:	4b3d      	ldr	r3, [pc, #244]	@ (80011d8 <dis_cal+0x108>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffad 	bl	800104c <constrain>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a38      	ldr	r2, [pc, #224]	@ (80011d8 <dis_cal+0x108>)
 80010f6:	6013      	str	r3, [r2, #0]
	Rpm_set_upper =2200;//(isthreepointer) ?(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 190)<0? (~(int)(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 190) +1):(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 190) :900;
 80010f8:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <dis_cal+0x10c>)
 80010fa:	f640 0298 	movw	r2, #2200	@ 0x898
 80010fe:	601a      	str	r2, [r3, #0]
	Rpm_set_upper = constrain(Rpm_set_upper, 0, 3200);
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <dis_cal+0x10c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff9e 	bl	800104c <constrain>
 8001110:	4603      	mov	r3, r0
 8001112:	4a32      	ldr	r2, [pc, #200]	@ (80011dc <dis_cal+0x10c>)
 8001114:	6013      	str	r3, [r2, #0]
	baseLower = 17.2*Rpm_set_lower + 4088.9+1400;
 8001116:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <dis_cal+0x108>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa02 	bl	8000524 <__aeabi_i2d>
 8001120:	a323      	add	r3, pc, #140	@ (adr r3, 80011b0 <dis_cal+0xe0>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fa67 	bl	80005f8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	a321      	add	r3, pc, #132	@ (adr r3, 80011b8 <dis_cal+0xe8>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff f8a8 	bl	800028c <__adddf3>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <dis_cal+0x110>)
 800114a:	f7ff f89f 	bl	800028c <__adddf3>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fcff 	bl	8000b58 <__aeabi_d2iz>
 800115a:	4603      	mov	r3, r0
 800115c:	4a21      	ldr	r2, [pc, #132]	@ (80011e4 <dis_cal+0x114>)
 800115e:	6013      	str	r3, [r2, #0]
	baseUpper = 16.877*Rpm_set_upper + 5313.2+1000;
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <dis_cal+0x10c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9dd 	bl	8000524 <__aeabi_i2d>
 800116a:	a315      	add	r3, pc, #84	@ (adr r3, 80011c0 <dis_cal+0xf0>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fa42 	bl	80005f8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	a312      	add	r3, pc, #72	@ (adr r3, 80011c8 <dis_cal+0xf8>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff f883 	bl	800028c <__adddf3>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <dis_cal+0x118>)
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fcda 	bl	8000b58 <__aeabi_d2iz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <dis_cal+0x11c>)
 80011a8:	6013      	str	r3, [r2, #0]
	// }
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	33333333 	.word	0x33333333
 80011b4:	40313333 	.word	0x40313333
 80011b8:	cccccccd 	.word	0xcccccccd
 80011bc:	40aff1cc 	.word	0x40aff1cc
 80011c0:	126e978d 	.word	0x126e978d
 80011c4:	4030e083 	.word	0x4030e083
 80011c8:	33333333 	.word	0x33333333
 80011cc:	40b4c133 	.word	0x40b4c133
 80011d0:	200000c8 	.word	0x200000c8
 80011d4:	40a00000 	.word	0x40a00000
 80011d8:	200003f8 	.word	0x200003f8
 80011dc:	200003fc 	.word	0x200003fc
 80011e0:	4095e000 	.word	0x4095e000
 80011e4:	20000408 	.word	0x20000408
 80011e8:	408f4000 	.word	0x408f4000
 80011ec:	2000040c 	.word	0x2000040c

080011f0 <rotors>:

void rotors(bool flag) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	if (!flag) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f083 0301 	eor.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <rotors+0x24>
		TIM12->CCR1 =  0;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <rotors+0x34>)
 8001208:	2200      	movs	r2, #0
 800120a:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM12->CCR2 = 0 ;
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <rotors+0x34>)
 800120e:	2200      	movs	r2, #0
 8001210:	639a      	str	r2, [r3, #56]	@ 0x38
		return;
 8001212:	e003      	b.n	800121c <rotors+0x2c>
	} else
		dis_cal();
 8001214:	f7ff ff5c 	bl	80010d0 <dis_cal>
	if (HAL_GetTick() - prev >= RotorsSampling)
 8001218:	f003 fd00 	bl	8004c1c <HAL_GetTick>
//		__HAL_TIM_SET_COUNTER(&htim4, 0);
//		__HAL_TIM_SET_COUNTER(&htim8, 0);

	}

}
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40001800 	.word	0x40001800

08001228 <feed>:

void feed() {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pistonUp_Port, pistonUp_Pin, 1);
 800122c:	2201      	movs	r2, #1
 800122e:	2180      	movs	r1, #128	@ 0x80
 8001230:	480f      	ldr	r0, [pc, #60]	@ (8001270 <feed+0x48>)
 8001232:	f004 ffd3 	bl	80061dc <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001236:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800123a:	f003 fcfb 	bl	8004c34 <HAL_Delay>
	HAL_GPIO_WritePin(pistonUp_Port, pistonUp_Pin, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2180      	movs	r1, #128	@ 0x80
 8001242:	480b      	ldr	r0, [pc, #44]	@ (8001270 <feed+0x48>)
 8001244:	f004 ffca 	bl	80061dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800124e:	4809      	ldr	r0, [pc, #36]	@ (8001274 <feed+0x4c>)
 8001250:	f004 ffc4 	bl	80061dc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001254:	20c8      	movs	r0, #200	@ 0xc8
 8001256:	f003 fced 	bl	8004c34 <HAL_Delay>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001260:	4804      	ldr	r0, [pc, #16]	@ (8001274 <feed+0x4c>)
 8001262:	f004 ffbb 	bl	80061dc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001266:	20c8      	movs	r0, #200	@ 0xc8
 8001268:	f003 fce4 	bl	8004c34 <HAL_Delay>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40020000 	.word	0x40020000

08001278 <rpm_cal>:

void rpm_cal() {
 8001278:	b598      	push	{r3, r4, r7, lr}
 800127a:	af00      	add	r7, sp, #0

	if (HAL_GetTick() - prev_loco >= RotorsSampling) {
 800127c:	f003 fcce 	bl	8004c1c <HAL_GetTick>
 8001280:	4603      	mov	r3, r0
 8001282:	4a59      	ldr	r2, [pc, #356]	@ (80013e8 <rpm_cal+0x170>)
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	4a58      	ldr	r2, [pc, #352]	@ (80013ec <rpm_cal+0x174>)
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	4293      	cmp	r3, r2
 800128e:	f0c0 80a8 	bcc.w	80013e2 <rpm_cal+0x16a>

		counter_4 = TIM1->CNT;
 8001292:	4b57      	ldr	r3, [pc, #348]	@ (80013f0 <rpm_cal+0x178>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b56      	ldr	r3, [pc, #344]	@ (80013f4 <rpm_cal+0x17c>)
 800129a:	801a      	strh	r2, [r3, #0]
//		counter_5 = TIM3->CNT;
		counter_5 = TIM8->CNT;
 800129c:	4b56      	ldr	r3, [pc, #344]	@ (80013f8 <rpm_cal+0x180>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b56      	ldr	r3, [pc, #344]	@ (80013fc <rpm_cal+0x184>)
 80012a4:	801a      	strh	r2, [r3, #0]
		counter_8 = TIM5->CNT;
 80012a6:	4b56      	ldr	r3, [pc, #344]	@ (8001400 <rpm_cal+0x188>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b55      	ldr	r3, [pc, #340]	@ (8001404 <rpm_cal+0x18c>)
 80012ae:	801a      	strh	r2, [r3, #0]

		counter_8 = counter_8 / 4;
 80012b0:	4b54      	ldr	r3, [pc, #336]	@ (8001404 <rpm_cal+0x18c>)
 80012b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da00      	bge.n	80012bc <rpm_cal+0x44>
 80012ba:	3303      	adds	r3, #3
 80012bc:	109b      	asrs	r3, r3, #2
 80012be:	b21a      	sxth	r2, r3
 80012c0:	4b50      	ldr	r3, [pc, #320]	@ (8001404 <rpm_cal+0x18c>)
 80012c2:	801a      	strh	r2, [r3, #0]
		rpm1 = (counter_8 *sixtythousand)/(ppr*((int32_t)HAL_GetTick()-prev_loco));
 80012c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001404 <rpm_cal+0x18c>)
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001408 <rpm_cal+0x190>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	fb03 f402 	mul.w	r4, r3, r2
 80012d4:	f003 fca2 	bl	8004c1c <HAL_GetTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b42      	ldr	r3, [pc, #264]	@ (80013e8 <rpm_cal+0x170>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	4a4a      	ldr	r2, [pc, #296]	@ (800140c <rpm_cal+0x194>)
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	fb94 f3f3 	sdiv	r3, r4, r3
 80012ee:	4a48      	ldr	r2, [pc, #288]	@ (8001410 <rpm_cal+0x198>)
 80012f0:	6013      	str	r3, [r2, #0]

		counter_5 = counter_5 / 4;
 80012f2:	4b42      	ldr	r3, [pc, #264]	@ (80013fc <rpm_cal+0x184>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da00      	bge.n	80012fe <rpm_cal+0x86>
 80012fc:	3303      	adds	r3, #3
 80012fe:	109b      	asrs	r3, r3, #2
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b3e      	ldr	r3, [pc, #248]	@ (80013fc <rpm_cal+0x184>)
 8001304:	801a      	strh	r2, [r3, #0]
		rpm2 = (counter_5 *sixtythousand)/(Sixhunppr*((int32_t)HAL_GetTick()-prev_loco));
 8001306:	4b3d      	ldr	r3, [pc, #244]	@ (80013fc <rpm_cal+0x184>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	461a      	mov	r2, r3
 800130e:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <rpm_cal+0x190>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	fb03 f402 	mul.w	r4, r3, r2
 8001316:	f003 fc81 	bl	8004c1c <HAL_GetTick>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b32      	ldr	r3, [pc, #200]	@ (80013e8 <rpm_cal+0x170>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4a3b      	ldr	r2, [pc, #236]	@ (8001414 <rpm_cal+0x19c>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	fb94 f3f3 	sdiv	r3, r4, r3
 8001330:	4a39      	ldr	r2, [pc, #228]	@ (8001418 <rpm_cal+0x1a0>)
 8001332:	6013      	str	r3, [r2, #0]


		counter_4 = counter_4 / 4;
 8001334:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <rpm_cal+0x17c>)
 8001336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da00      	bge.n	8001340 <rpm_cal+0xc8>
 800133e:	3303      	adds	r3, #3
 8001340:	109b      	asrs	r3, r3, #2
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <rpm_cal+0x17c>)
 8001346:	801a      	strh	r2, [r3, #0]
		rpm3 =(counter_4 *sixtythousand)/(ppr*((int32_t)HAL_GetTick() -prev_loco));
 8001348:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <rpm_cal+0x17c>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	461a      	mov	r2, r3
 8001350:	4b2d      	ldr	r3, [pc, #180]	@ (8001408 <rpm_cal+0x190>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	fb03 f402 	mul.w	r4, r3, r2
 8001358:	f003 fc60 	bl	8004c1c <HAL_GetTick>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <rpm_cal+0x170>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4a29      	ldr	r2, [pc, #164]	@ (800140c <rpm_cal+0x194>)
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	fb94 f3f3 	sdiv	r3, r4, r3
 8001372:	4a2a      	ldr	r2, [pc, #168]	@ (800141c <rpm_cal+0x1a4>)
 8001374:	6013      	str	r3, [r2, #0]

		rpm1 = (rpm1<0)?(~rpm1) +1 : rpm1;
 8001376:	4b26      	ldr	r3, [pc, #152]	@ (8001410 <rpm_cal+0x198>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	da03      	bge.n	8001386 <rpm_cal+0x10e>
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <rpm_cal+0x198>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	425b      	negs	r3, r3
 8001384:	e001      	b.n	800138a <rpm_cal+0x112>
 8001386:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <rpm_cal+0x198>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <rpm_cal+0x198>)
 800138c:	6013      	str	r3, [r2, #0]
		rpm2 = (rpm2<0)?(~rpm2) +1: rpm2;
 800138e:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <rpm_cal+0x1a0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da03      	bge.n	800139e <rpm_cal+0x126>
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <rpm_cal+0x1a0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	425b      	negs	r3, r3
 800139c:	e001      	b.n	80013a2 <rpm_cal+0x12a>
 800139e:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <rpm_cal+0x1a0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <rpm_cal+0x1a0>)
 80013a4:	6013      	str	r3, [r2, #0]
		rpm3 = (rpm3<0)?(~rpm3)+1:rpm3;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <rpm_cal+0x1a4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da03      	bge.n	80013b6 <rpm_cal+0x13e>
 80013ae:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <rpm_cal+0x1a4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	425b      	negs	r3, r3
 80013b4:	e001      	b.n	80013ba <rpm_cal+0x142>
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <rpm_cal+0x1a4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a18      	ldr	r2, [pc, #96]	@ (800141c <rpm_cal+0x1a4>)
 80013bc:	6013      	str	r3, [r2, #0]
//			  rotors();

		prev_loco = HAL_GetTick();
 80013be:	f003 fc2d 	bl	8004c1c <HAL_GetTick>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <rpm_cal+0x170>)
 80013c8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <rpm_cal+0x1a8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
//		__HAL_TIM_SET_COUNTER(&htim3, 0);
		__HAL_TIM_SET_COUNTER(&htim8, 0);
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <rpm_cal+0x1ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <rpm_cal+0x1b0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	@ 0x24

	}
}
 80013e2:	bf00      	nop
 80013e4:	bd98      	pop	{r3, r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003f4 	.word	0x200003f4
 80013ec:	200000d0 	.word	0x200000d0
 80013f0:	40010000 	.word	0x40010000
 80013f4:	200005a4 	.word	0x200005a4
 80013f8:	40010400 	.word	0x40010400
 80013fc:	200005a6 	.word	0x200005a6
 8001400:	40000c00 	.word	0x40000c00
 8001404:	200005a8 	.word	0x200005a8
 8001408:	200000d4 	.word	0x200000d4
 800140c:	200000d8 	.word	0x200000d8
 8001410:	200003e8 	.word	0x200003e8
 8001414:	200000dc 	.word	0x200000dc
 8001418:	200003ec 	.word	0x200003ec
 800141c:	200003f0 	.word	0x200003f0
 8001420:	2000043c 	.word	0x2000043c
 8001424:	2000055c 	.word	0x2000055c
 8001428:	20000514 	.word	0x20000514
 800142c:	00000000 	.word	0x00000000

08001430 <Rxvalueslo>:
#ifndef SRC_COMMUNICATION_H_
#define SRC_COMMUNICATION_H_

#include "variables.h"
#include "cJSON.h"
int Rxvalueslo(char *Rx_data){
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
//	if(Rx_data!=NULL && Rx_data[1] =='{'){
		a++;
 8001438:	4b8d      	ldr	r3, [pc, #564]	@ (8001670 <Rxvalueslo+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a8c      	ldr	r2, [pc, #560]	@ (8001670 <Rxvalueslo+0x240>)
 8001440:	6013      	str	r3, [r2, #0]
		loco = Rx_data[8];
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7a1a      	ldrb	r2, [r3, #8]
 8001446:	4b8b      	ldr	r3, [pc, #556]	@ (8001674 <Rxvalueslo+0x244>)
 8001448:	701a      	strb	r2, [r3, #0]
		char Rotate[4];
		strncpy(Rotate, Rx_data +9, 3);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f103 0109 	add.w	r1, r3, #9
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2203      	movs	r2, #3
 8001456:	4618      	mov	r0, r3
 8001458:	f009 f8e8 	bl	800a62c <strncpy>
		rotationstrength = atoi(Rotate);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4618      	mov	r0, r3
 8001462:	f007 fd5b 	bl	8008f1c <atoi>
 8001466:	4603      	mov	r3, r0
 8001468:	4a83      	ldr	r2, [pc, #524]	@ (8001678 <Rxvalueslo+0x248>)
 800146a:	6013      	str	r3, [r2, #0]
		char Angle[4];
		strncpy(Angle, Rx_data +12, 3);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f103 010c 	add.w	r1, r3, #12
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	2203      	movs	r2, #3
 8001478:	4618      	mov	r0, r3
 800147a:	f009 f8d7 	bl	800a62c <strncpy>
		angle = atoi(Angle);
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4618      	mov	r0, r3
 8001484:	f007 fd4a 	bl	8008f1c <atoi>
 8001488:	4603      	mov	r3, r0
 800148a:	4a7c      	ldr	r2, [pc, #496]	@ (800167c <Rxvalueslo+0x24c>)
 800148c:	6013      	str	r3, [r2, #0]
		angle = (angle == 400) ? 400 : (angle + 180) % 360;
 800148e:	4b7b      	ldr	r3, [pc, #492]	@ (800167c <Rxvalueslo+0x24c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001496:	d00f      	beq.n	80014b8 <Rxvalueslo+0x88>
 8001498:	4b78      	ldr	r3, [pc, #480]	@ (800167c <Rxvalueslo+0x24c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	33b4      	adds	r3, #180	@ 0xb4
 800149e:	4a78      	ldr	r2, [pc, #480]	@ (8001680 <Rxvalueslo+0x250>)
 80014a0:	fb82 1203 	smull	r1, r2, r2, r3
 80014a4:	441a      	add	r2, r3
 80014a6:	1211      	asrs	r1, r2, #8
 80014a8:	17da      	asrs	r2, r3, #31
 80014aa:	1a8a      	subs	r2, r1, r2
 80014ac:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80014b0:	fb01 f202 	mul.w	r2, r1, r2
 80014b4:	1a9a      	subs	r2, r3, r2
 80014b6:	e001      	b.n	80014bc <Rxvalueslo+0x8c>
 80014b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80014bc:	4b6f      	ldr	r3, [pc, #444]	@ (800167c <Rxvalueslo+0x24c>)
 80014be:	601a      	str	r2, [r3, #0]

		char Strength[4];
		strncpy(Strength, Rx_data +15, 3);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f103 010f 	add.w	r1, r3, #15
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2203      	movs	r2, #3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f009 f8ad 	bl	800a62c <strncpy>
		strengthX = atoi(Strength);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4618      	mov	r0, r3
 80014d8:	f007 fd20 	bl	8008f1c <atoi>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a69      	ldr	r2, [pc, #420]	@ (8001684 <Rxvalueslo+0x254>)
 80014e0:	6013      	str	r3, [r2, #0]
		 if ((int32_t)HAL_GetTick() - strengthsampling > decleration_acceleration_sampling) {
 80014e2:	f003 fb9b 	bl	8004c1c <HAL_GetTick>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b67      	ldr	r3, [pc, #412]	@ (8001688 <Rxvalueslo+0x258>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1ad2      	subs	r2, r2, r3
 80014f0:	4b66      	ldr	r3, [pc, #408]	@ (800168c <Rxvalueslo+0x25c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f340 80a4 	ble.w	8001642 <Rxvalueslo+0x212>
			if (strengthX - strengthc >strength_effective_for_deceleration_acceleration_constant) {
 80014fa:	4b62      	ldr	r3, [pc, #392]	@ (8001684 <Rxvalueslo+0x254>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b64      	ldr	r3, [pc, #400]	@ (8001690 <Rxvalueslo+0x260>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1ad2      	subs	r2, r2, r3
 8001504:	4b63      	ldr	r3, [pc, #396]	@ (8001694 <Rxvalueslo+0x264>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	dd1c      	ble.n	8001546 <Rxvalueslo+0x116>
				strengthX -= (strengthX - strengthc) * deceleration_constant;
 800150c:	4b5d      	ldr	r3, [pc, #372]	@ (8001684 <Rxvalueslo+0x254>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001518:	4b5a      	ldr	r3, [pc, #360]	@ (8001684 <Rxvalueslo+0x254>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <Rxvalueslo+0x260>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800152a:	4b5b      	ldr	r3, [pc, #364]	@ (8001698 <Rxvalueslo+0x268>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800153c:	ee17 2a90 	vmov	r2, s15
 8001540:	4b50      	ldr	r3, [pc, #320]	@ (8001684 <Rxvalueslo+0x254>)
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e06f      	b.n	8001626 <Rxvalueslo+0x1f6>
			 } else if (strengthX - strengthc < -strength_effective_for_deceleration_acceleration_constant) {
 8001546:	4b4f      	ldr	r3, [pc, #316]	@ (8001684 <Rxvalueslo+0x254>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b51      	ldr	r3, [pc, #324]	@ (8001690 <Rxvalueslo+0x260>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	1ad2      	subs	r2, r2, r3
 8001550:	4b50      	ldr	r3, [pc, #320]	@ (8001694 <Rxvalueslo+0x264>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	425b      	negs	r3, r3
 8001556:	429a      	cmp	r2, r3
 8001558:	da65      	bge.n	8001626 <Rxvalueslo+0x1f6>

				       if((int)(angle - Z_Val ) %360 > 140 && (int)(angle - Z_Val ) %360 < 220)
 800155a:	4b48      	ldr	r3, [pc, #288]	@ (800167c <Rxvalueslo+0x24c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b4f      	ldr	r3, [pc, #316]	@ (800169c <Rxvalueslo+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a46      	ldr	r2, [pc, #280]	@ (8001680 <Rxvalueslo+0x250>)
 8001566:	fb82 1203 	smull	r1, r2, r2, r3
 800156a:	441a      	add	r2, r3
 800156c:	1211      	asrs	r1, r2, #8
 800156e:	17da      	asrs	r2, r3, #31
 8001570:	1a8a      	subs	r2, r1, r2
 8001572:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001576:	fb01 f202 	mul.w	r2, r1, r2
 800157a:	1a9a      	subs	r2, r3, r2
 800157c:	2a8c      	cmp	r2, #140	@ 0x8c
 800157e:	dd36      	ble.n	80015ee <Rxvalueslo+0x1be>
 8001580:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <Rxvalueslo+0x24c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b45      	ldr	r3, [pc, #276]	@ (800169c <Rxvalueslo+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	4a3d      	ldr	r2, [pc, #244]	@ (8001680 <Rxvalueslo+0x250>)
 800158c:	fb82 1203 	smull	r1, r2, r2, r3
 8001590:	441a      	add	r2, r3
 8001592:	1211      	asrs	r1, r2, #8
 8001594:	17da      	asrs	r2, r3, #31
 8001596:	1a8a      	subs	r2, r1, r2
 8001598:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800159c:	fb01 f202 	mul.w	r2, r1, r2
 80015a0:	1a9a      	subs	r2, r3, r2
 80015a2:	2adb      	cmp	r2, #219	@ 0xdb
 80015a4:	dc23      	bgt.n	80015ee <Rxvalueslo+0x1be>

				       {
				    	   strengthX -= (strengthX - strengthc) * 0.97;
 80015a6:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <Rxvalueslo+0x254>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffba 	bl	8000524 <__aeabi_i2d>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	4b33      	ldr	r3, [pc, #204]	@ (8001684 <Rxvalueslo+0x254>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <Rxvalueslo+0x260>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffb0 	bl	8000524 <__aeabi_i2d>
 80015c4:	a328      	add	r3, pc, #160	@ (adr r3, 8001668 <Rxvalueslo+0x238>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7ff f815 	bl	80005f8 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe fe57 	bl	8000288 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fab9 	bl	8000b58 <__aeabi_d2iz>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a26      	ldr	r2, [pc, #152]	@ (8001684 <Rxvalueslo+0x254>)
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e01b      	b.n	8001626 <Rxvalueslo+0x1f6>
				       }
				       else
				       {

					   strengthX -= (strengthX - strengthc) *acceleration_constant;
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <Rxvalueslo+0x254>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015fa:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <Rxvalueslo+0x254>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <Rxvalueslo+0x260>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <Rxvalueslo+0x270>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800161e:	ee17 2a90 	vmov	r2, s15
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <Rxvalueslo+0x254>)
 8001624:	601a      	str	r2, [r3, #0]
		 	     }
			 }
		  	 strengthc = strengthX;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <Rxvalueslo+0x254>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a19      	ldr	r2, [pc, #100]	@ (8001690 <Rxvalueslo+0x260>)
 800162c:	6013      	str	r3, [r2, #0]
					strength = strengthX;
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <Rxvalueslo+0x254>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <Rxvalueslo+0x274>)
 8001634:	6013      	str	r3, [r2, #0]
					   strengthsampling = HAL_GetTick();
 8001636:	f003 faf1 	bl	8004c1c <HAL_GetTick>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <Rxvalueslo+0x258>)
 8001640:	601a      	str	r2, [r3, #0]
					 }
					 strength  = constrain(strength,0,max_strength_set);
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <Rxvalueslo+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a18      	ldr	r2, [pc, #96]	@ (80016a8 <Rxvalueslo+0x278>)
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fcfd 	bl	800104c <constrain>
 8001652:	4603      	mov	r3, r0
 8001654:	4a13      	ldr	r2, [pc, #76]	@ (80016a4 <Rxvalueslo+0x274>)
 8001656:	6013      	str	r3, [r2, #0]


//	}
}
 8001658:	bf00      	nop
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bdb0      	pop	{r4, r5, r7, pc}
 8001662:	bf00      	nop
 8001664:	f3af 8000 	nop.w
 8001668:	70a3d70a 	.word	0x70a3d70a
 800166c:	3fef0a3d 	.word	0x3fef0a3d
 8001670:	20000410 	.word	0x20000410
 8001674:	200000b8 	.word	0x200000b8
 8001678:	2000038c 	.word	0x2000038c
 800167c:	200003a0 	.word	0x200003a0
 8001680:	b60b60b7 	.word	0xb60b60b7
 8001684:	20000398 	.word	0x20000398
 8001688:	2000039c 	.word	0x2000039c
 800168c:	20000084 	.word	0x20000084
 8001690:	20000394 	.word	0x20000394
 8001694:	20000080 	.word	0x20000080
 8001698:	2000008c 	.word	0x2000008c
 800169c:	20000388 	.word	0x20000388
 80016a0:	20000088 	.word	0x20000088
 80016a4:	20000390 	.word	0x20000390
 80016a8:	20000090 	.word	0x20000090

080016ac <Arvalueslo>:

int Arvalueslo(char *Ar_data){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
   if(Ar_data!= NULL){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d017      	beq.n	80016ea <Arvalueslo+0x3e>
	   strncpy(disString,Ar_data +6,7);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3306      	adds	r3, #6
 80016be:	2207      	movs	r2, #7
 80016c0:	4619      	mov	r1, r3
 80016c2:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <Arvalueslo+0x48>)
 80016c4:	f008 ffb2 	bl	800a62c <strncpy>
	   strncpy(angleString,Ar_data + 20,7);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3314      	adds	r3, #20
 80016cc:	2207      	movs	r2, #7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <Arvalueslo+0x4c>)
 80016d2:	f008 ffab 	bl	800a62c <strncpy>
	   sscanf(disString,"%f",&ARdistance);
 80016d6:	4a09      	ldr	r2, [pc, #36]	@ (80016fc <Arvalueslo+0x50>)
 80016d8:	4909      	ldr	r1, [pc, #36]	@ (8001700 <Arvalueslo+0x54>)
 80016da:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <Arvalueslo+0x48>)
 80016dc:	f008 fe86 	bl	800a3ec <siscanf>
	   sscanf(angleString,"%f",&alpha);
 80016e0:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <Arvalueslo+0x58>)
 80016e2:	4907      	ldr	r1, [pc, #28]	@ (8001700 <Arvalueslo+0x54>)
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <Arvalueslo+0x4c>)
 80016e6:	f008 fe81 	bl	800a3ec <siscanf>
   }
}
 80016ea:	bf00      	nop
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000348 	.word	0x20000348
 80016f8:	20000350 	.word	0x20000350
 80016fc:	200000c8 	.word	0x200000c8
 8001700:	0800df48 	.word	0x0800df48
 8001704:	20000320 	.word	0x20000320

08001708 <Mpuvalueslo>:
int Mpuvalueslo(char *Mp_data){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	sscanf(Mp_data,"%d",&Z_Val);
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <Mpuvalueslo+0x1c>)
 8001712:	4905      	ldr	r1, [pc, #20]	@ (8001728 <Mpuvalueslo+0x20>)
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f008 fe69 	bl	800a3ec <siscanf>
//	Z_Val =0;
}
 800171a:	bf00      	nop
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000388 	.word	0x20000388
 8001728:	0800df4c 	.word	0x0800df4c

0800172c <align>:
#ifndef SRC_ALIGNMENT_H_
#define SRC_ALIGNMENT_H_

bool align(float target) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	ed87 0a01 	vstr	s0, [r7, #4]

  float delta = target - Z_Val;
 8001736:	4bac      	ldr	r3, [pc, #688]	@ (80019e8 <align+0x2bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	ed97 7a01 	vldr	s14, [r7, #4]
 8001746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174a:	edc7 7a03 	vstr	s15, [r7, #12]
  if (delta > 180) {
 800174e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001752:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80019ec <align+0x2c0>
 8001756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	dd07      	ble.n	8001770 <align+0x44>
    delta = delta - 360;
 8001760:	edd7 7a03 	vldr	s15, [r7, #12]
 8001764:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80019f0 <align+0x2c4>
 8001768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800176c:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  if (delta < -180) {
 8001770:	edd7 7a03 	vldr	s15, [r7, #12]
 8001774:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80019f4 <align+0x2c8>
 8001778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	d507      	bpl.n	8001792 <align+0x66>
    delta = delta + 360;
 8001782:	edd7 7a03 	vldr	s15, [r7, #12]
 8001786:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80019f0 <align+0x2c4>
 800178a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800178e:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  if (initialdelta == 0) {
 8001792:	4b99      	ldr	r3, [pc, #612]	@ (80019f8 <align+0x2cc>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	eef5 7a40 	vcmp.f32	s15, #0.0
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d102      	bne.n	80017a8 <align+0x7c>
    initialdelta = delta;
 80017a2:	4a95      	ldr	r2, [pc, #596]	@ (80019f8 <align+0x2cc>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6013      	str	r3, [r2, #0]
  }


  s = delta;
 80017a8:	4a94      	ldr	r2, [pc, #592]	@ (80019fc <align+0x2d0>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6013      	str	r3, [r2, #0]
  if (initialdelta < 0) {
 80017ae:	4b92      	ldr	r3, [pc, #584]	@ (80019f8 <align+0x2cc>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	d521      	bpl.n	8001802 <align+0xd6>
    if (delta > -nextanglesetpointalignmentconstant + initialdelta*alignmentinitialdeltamultiplier && delta < nextanglesetpointalignmentconstant) {
 80017be:	4b8e      	ldr	r3, [pc, #568]	@ (80019f8 <align+0x2cc>)
 80017c0:	ed93 7a00 	vldr	s14, [r3]
 80017c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001a00 <align+0x2d4>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001a04 <align+0x2d8>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80017dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	dd30      	ble.n	8001848 <align+0x11c>
 80017e6:	4b87      	ldr	r3, [pc, #540]	@ (8001a04 <align+0x2d8>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80017f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	d526      	bpl.n	8001848 <align+0x11c>
      donealign = true;
 80017fa:	4b83      	ldr	r3, [pc, #524]	@ (8001a08 <align+0x2dc>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e022      	b.n	8001848 <align+0x11c>
    }
  } else {
    if (delta > -nextanglesetpointalignmentconstant && delta < nextanglesetpointalignmentconstant + initialdelta*alignmentinitialdeltamultiplier) {
 8001802:	4b80      	ldr	r3, [pc, #512]	@ (8001a04 <align+0x2d8>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	eef1 7a67 	vneg.f32	s15, s15
 800180c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001810:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	dd16      	ble.n	8001848 <align+0x11c>
 800181a:	4b77      	ldr	r3, [pc, #476]	@ (80019f8 <align+0x2cc>)
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	4b77      	ldr	r3, [pc, #476]	@ (8001a00 <align+0x2d4>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800182a:	4b76      	ldr	r3, [pc, #472]	@ (8001a04 <align+0x2d8>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	ed97 7a03 	vldr	s14, [r7, #12]
 8001838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	d502      	bpl.n	8001848 <align+0x11c>
      donealign = true;
 8001842:	4b71      	ldr	r3, [pc, #452]	@ (8001a08 <align+0x2dc>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
    }
  }
  if (donealign) {
 8001848:	4b6f      	ldr	r3, [pc, #444]	@ (8001a08 <align+0x2dc>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d02f      	beq.n	80018b0 <align+0x184>
	if(delta < alignmentsetpoint && delta >-alignmentsetpoint){
 8001850:	4b6e      	ldr	r3, [pc, #440]	@ (8001a0c <align+0x2e0>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ed97 7a03 	vldr	s14, [r7, #12]
 800185a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	d51f      	bpl.n	80018a4 <align+0x178>
 8001864:	4b69      	ldr	r3, [pc, #420]	@ (8001a0c <align+0x2e0>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	eef1 7a67 	vneg.f32	s15, s15
 800186e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	dd13      	ble.n	80018a4 <align+0x178>
    w = 0;
 800187c:	4b64      	ldr	r3, [pc, #400]	@ (8001a10 <align+0x2e4>)
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
    alignn = true;
 8001884:	4b63      	ldr	r3, [pc, #396]	@ (8001a14 <align+0x2e8>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
    integralalign = 0;
 800188a:	4b63      	ldr	r3, [pc, #396]	@ (8001a18 <align+0x2ec>)
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
    donealign = false;
 8001892:	4b5d      	ldr	r3, [pc, #372]	@ (8001a08 <align+0x2dc>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
    initialdelta = 0;
 8001898:	4b57      	ldr	r3, [pc, #348]	@ (80019f8 <align+0x2cc>)
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
    return true;}
 80018a0:	2301      	movs	r3, #1
 80018a2:	e133      	b.n	8001b0c <align+0x3e0>
	else{
		initialdelta =0;
 80018a4:	4b54      	ldr	r3, [pc, #336]	@ (80019f8 <align+0x2cc>)
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
		return false;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e12d      	b.n	8001b0c <align+0x3e0>
	}
  }
  if (HAL_GetTick() - previousalignsampling > alignmentsamplingtime) {
 80018b0:	f003 f9b4 	bl	8004c1c <HAL_GetTick>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a59      	ldr	r2, [pc, #356]	@ (8001a1c <align+0x2f0>)
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	4a58      	ldr	r2, [pc, #352]	@ (8001a20 <align+0x2f4>)
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4293      	cmp	r3, r2
 80018c2:	f240 8122 	bls.w	8001b0a <align+0x3de>

    if (s< PID_IN_ALIGNMENT_RANGE && s > -PID_IN_ALIGNMENT_RANGE) {
 80018c6:	4b4d      	ldr	r3, [pc, #308]	@ (80019fc <align+0x2d0>)
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	4b55      	ldr	r3, [pc, #340]	@ (8001a24 <align+0x2f8>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	f140 80f8 	bpl.w	8001ace <align+0x3a2>
 80018de:	4b51      	ldr	r3, [pc, #324]	@ (8001a24 <align+0x2f8>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eeb1 7a67 	vneg.f32	s14, s15
 80018e8:	4b44      	ldr	r3, [pc, #272]	@ (80019fc <align+0x2d0>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	f140 80ea 	bpl.w	8001ace <align+0x3a2>
      if (s < active_ki_for_alignment_range && s > -active_ki_for_alignment_range) {
 80018fa:	4b40      	ldr	r3, [pc, #256]	@ (80019fc <align+0x2d0>)
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	4b49      	ldr	r3, [pc, #292]	@ (8001a28 <align+0x2fc>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	d52f      	bpl.n	8001970 <align+0x244>
 8001910:	4b45      	ldr	r3, [pc, #276]	@ (8001a28 <align+0x2fc>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eeb1 7a67 	vneg.f32	s14, s15
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <align+0x2d0>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	d522      	bpl.n	8001970 <align+0x244>
        integralalign += s;
 800192a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <align+0x2ec>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <align+0x2d0>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	4b37      	ldr	r3, [pc, #220]	@ (8001a18 <align+0x2ec>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
        if (integralalign > maxalignmentintegralconstant) {
 8001940:	4b3a      	ldr	r3, [pc, #232]	@ (8001a2c <align+0x300>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194c:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <align+0x2ec>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	d50d      	bpl.n	8001978 <align+0x24c>
          integralalign = maxalignmentintegralconstant;
 800195c:	4b33      	ldr	r3, [pc, #204]	@ (8001a2c <align+0x300>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001968:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <align+0x2ec>)
 800196a:	edc3 7a00 	vstr	s15, [r3]
        if (integralalign > maxalignmentintegralconstant) {
 800196e:	e003      	b.n	8001978 <align+0x24c>
        }
      }
      else{
         integralalign = 0;
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <align+0x2ec>)
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
      }
      errordiff_align = s - previousS;
 8001978:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <align+0x2d0>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a30 <align+0x304>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <align+0x308>)
 800198a:	edc3 7a00 	vstr	s15, [r3]
      if (s < 0) {
 800198e:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <align+0x2d0>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d556      	bpl.n	8001a4c <align+0x320>
        w_align = kp_align * s + kd_align * errordiff_align + ki_align * integralalign - alignment_base_w;
 800199e:	4b26      	ldr	r3, [pc, #152]	@ (8001a38 <align+0x30c>)
 80019a0:	ed93 7a00 	vldr	s14, [r3]
 80019a4:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <align+0x2d0>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ae:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <align+0x310>)
 80019b0:	edd3 6a00 	vldr	s13, [r3]
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <align+0x308>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <align+0x314>)
 80019c4:	edd3 6a00 	vldr	s13, [r3]
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <align+0x2ec>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <align+0x318>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <align+0x31c>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
 80019e6:	e055      	b.n	8001a94 <align+0x368>
 80019e8:	20000388 	.word	0x20000388
 80019ec:	43340000 	.word	0x43340000
 80019f0:	43b40000 	.word	0x43b40000
 80019f4:	c3340000 	.word	0xc3340000
 80019f8:	20000360 	.word	0x20000360
 80019fc:	20000364 	.word	0x20000364
 8001a00:	20000060 	.word	0x20000060
 8001a04:	2000005c 	.word	0x2000005c
 8001a08:	20000368 	.word	0x20000368
 8001a0c:	20000064 	.word	0x20000064
 8001a10:	200003b8 	.word	0x200003b8
 8001a14:	20000094 	.word	0x20000094
 8001a18:	2000036c 	.word	0x2000036c
 8001a1c:	20000374 	.word	0x20000374
 8001a20:	20000068 	.word	0x20000068
 8001a24:	20000070 	.word	0x20000070
 8001a28:	2000006c 	.word	0x2000006c
 8001a2c:	20000074 	.word	0x20000074
 8001a30:	20000378 	.word	0x20000378
 8001a34:	2000037c 	.word	0x2000037c
 8001a38:	2000009c 	.word	0x2000009c
 8001a3c:	200000a0 	.word	0x200000a0
 8001a40:	200000a4 	.word	0x200000a4
 8001a44:	20000078 	.word	0x20000078
 8001a48:	20000370 	.word	0x20000370
      } else {
        w_align = kp_align * s + kd_align * errordiff_align + ki_align * integralalign + alignment_base_w;
 8001a4c:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <align+0x3e8>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4b31      	ldr	r3, [pc, #196]	@ (8001b18 <align+0x3ec>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <align+0x3f0>)
 8001a5e:	edd3 6a00 	vldr	s13, [r3]
 8001a62:	4b2f      	ldr	r3, [pc, #188]	@ (8001b20 <align+0x3f4>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a70:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <align+0x3f8>)
 8001a72:	edd3 6a00 	vldr	s13, [r3]
 8001a76:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <align+0x3fc>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a84:	4b29      	ldr	r3, [pc, #164]	@ (8001b2c <align+0x400>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <align+0x404>)
 8001a90:	edc3 7a00 	vstr	s15, [r3]
      }

      w_align = constrain_float(w_align, -w_limit_for_alignment, w_limit_for_alignment);
 8001a94:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <align+0x404>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <align+0x408>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eef1 7a67 	vneg.f32	s15, s15
 8001aa4:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <align+0x408>)
 8001aa6:	edd3 6a00 	vldr	s13, [r3]
 8001aaa:	eeb0 1a66 	vmov.f32	s2, s13
 8001aae:	eef0 0a67 	vmov.f32	s1, s15
 8001ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab6:	f7ff fae2 	bl	800107e <constrain_float>
 8001aba:	eef0 7a40 	vmov.f32	s15, s0
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <align+0x404>)
 8001ac0:	edc3 7a00 	vstr	s15, [r3]
      w = w_align;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <align+0x404>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b38 <align+0x40c>)
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e013      	b.n	8001af6 <align+0x3ca>
    } else {
      w = (s < 0) ? -w_limit_for_alignment : w_limit_for_alignment;
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <align+0x3ec>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d505      	bpl.n	8001aea <align+0x3be>
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <align+0x408>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eef1 7a67 	vneg.f32	s15, s15
 8001ae8:	e002      	b.n	8001af0 <align+0x3c4>
 8001aea:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <align+0x408>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <align+0x40c>)
 8001af2:	edc3 7a00 	vstr	s15, [r3]
    }
//    w = -w;
    previousalignsampling = HAL_GetTick();
 8001af6:	f003 f891 	bl	8004c1c <HAL_GetTick>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <align+0x410>)
 8001b00:	601a      	str	r2, [r3, #0]
    previousS = s;
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <align+0x3ec>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0e      	ldr	r2, [pc, #56]	@ (8001b40 <align+0x414>)
 8001b08:	6013      	str	r3, [r2, #0]
  }

  return false;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000009c 	.word	0x2000009c
 8001b18:	20000364 	.word	0x20000364
 8001b1c:	200000a0 	.word	0x200000a0
 8001b20:	2000037c 	.word	0x2000037c
 8001b24:	200000a4 	.word	0x200000a4
 8001b28:	2000036c 	.word	0x2000036c
 8001b2c:	20000078 	.word	0x20000078
 8001b30:	20000370 	.word	0x20000370
 8001b34:	2000007c 	.word	0x2000007c
 8001b38:	200003b8 	.word	0x200003b8
 8001b3c:	20000374 	.word	0x20000374
 8001b40:	20000378 	.word	0x20000378

08001b44 <toradian>:

#ifndef SRC_LOCOMOTION_H_
#define SRC_LOCOMOTION_H_
#include "variables.h"
#include "alignment.h"
double toradian(double x) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0b00 	vstr	d0, [r7]
  return x * pi / 180;
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <toradian+0x40>)
 8001b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b58:	f7fe fd4e 	bl	80005f8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <toradian+0x44>)
 8001b6a:	f7fe fe6f 	bl	800084c <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b76:	eeb0 0a47 	vmov.f32	s0, s14
 8001b7a:	eef0 0a67 	vmov.f32	s1, s15
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200000b0 	.word	0x200000b0
 8001b88:	40668000 	.word	0x40668000

08001b8c <locomotion>:


void locomotion() {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  if (!alignn) {
 8001b90:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc4 <locomotion+0x238>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	f083 0301 	eor.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00a      	beq.n	8001bb4 <locomotion+0x28>
    alignn = align(alignvalue);
 8001b9e:	4b8a      	ldr	r3, [pc, #552]	@ (8001dc8 <locomotion+0x23c>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	f7ff fdc0 	bl	800172c <align>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b84      	ldr	r3, [pc, #528]	@ (8001dc4 <locomotion+0x238>)
 8001bb2:	701a      	strb	r2, [r3, #0]
  }

  switch (loco) {
 8001bb4:	4b85      	ldr	r3, [pc, #532]	@ (8001dcc <locomotion+0x240>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	3b4b      	subs	r3, #75	@ 0x4b
 8001bba:	2b24      	cmp	r3, #36	@ 0x24
 8001bbc:	f200 80f4 	bhi.w	8001da8 <locomotion+0x21c>
 8001bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc8 <locomotion+0x3c>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001d61 	.word	0x08001d61
 8001bcc:	08001cb5 	.word	0x08001cb5
 8001bd0:	08001da9 	.word	0x08001da9
 8001bd4:	08001da9 	.word	0x08001da9
 8001bd8:	08001d93 	.word	0x08001d93
 8001bdc:	08001da9 	.word	0x08001da9
 8001be0:	08001da9 	.word	0x08001da9
 8001be4:	08001d0d 	.word	0x08001d0d
 8001be8:	08001c5d 	.word	0x08001c5d
 8001bec:	08001da9 	.word	0x08001da9
 8001bf0:	08001da9 	.word	0x08001da9
 8001bf4:	08001da9 	.word	0x08001da9
 8001bf8:	08001da9 	.word	0x08001da9
 8001bfc:	08001da9 	.word	0x08001da9
 8001c00:	08001da9 	.word	0x08001da9
 8001c04:	08001da9 	.word	0x08001da9
 8001c08:	08001da9 	.word	0x08001da9
 8001c0c:	08001da9 	.word	0x08001da9
 8001c10:	08001da9 	.word	0x08001da9
 8001c14:	08001da9 	.word	0x08001da9
 8001c18:	08001da9 	.word	0x08001da9
 8001c1c:	08001da9 	.word	0x08001da9
 8001c20:	08001da9 	.word	0x08001da9
 8001c24:	08001da9 	.word	0x08001da9
 8001c28:	08001da9 	.word	0x08001da9
 8001c2c:	08001da9 	.word	0x08001da9
 8001c30:	08001da9 	.word	0x08001da9
 8001c34:	08001da9 	.word	0x08001da9
 8001c38:	08001da9 	.word	0x08001da9
 8001c3c:	08001da9 	.word	0x08001da9
 8001c40:	08001da9 	.word	0x08001da9
 8001c44:	08001da9 	.word	0x08001da9
 8001c48:	08001d77 	.word	0x08001d77
 8001c4c:	08001da9 	.word	0x08001da9
 8001c50:	08001da9 	.word	0x08001da9
 8001c54:	08001da9 	.word	0x08001da9
 8001c58:	08001d85 	.word	0x08001d85

    case 'S':
      if (angle == defaultcontrollerangle) {
 8001c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd0 <locomotion+0x244>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd4 <locomotion+0x248>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d10e      	bne.n	8001c86 <locomotion+0xfa>
        angle = prevangle;
 8001c68:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <locomotion+0x24c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <locomotion+0x244>)
 8001c6e:	6013      	str	r3, [r2, #0]
        calc();
 8001c70:	f000 f8c4 	bl	8001dfc <calc>
        if (alignn) {
 8001c74:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <locomotion+0x238>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <locomotion+0x106>
          w = 0;
 8001c7c:	4b57      	ldr	r3, [pc, #348]	@ (8001ddc <locomotion+0x250>)
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e005      	b.n	8001c92 <locomotion+0x106>
        }
      } else {
    	prevangle = angle;
 8001c86:	4b52      	ldr	r3, [pc, #328]	@ (8001dd0 <locomotion+0x244>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a53      	ldr	r2, [pc, #332]	@ (8001dd8 <locomotion+0x24c>)
 8001c8c:	6013      	str	r3, [r2, #0]
        calc();
 8001c8e:	f000 f8b5 	bl	8001dfc <calc>
      }
      if (angle != defaultcontrollerangle) {
 8001c92:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd0 <locomotion+0x244>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd4 <locomotion+0x248>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	f000 808f 	beq.w	8001dbe <locomotion+0x232>
        if (alignn) {
 8001ca0:	4b48      	ldr	r3, [pc, #288]	@ (8001dc4 <locomotion+0x238>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 808a 	beq.w	8001dbe <locomotion+0x232>
          w = 0;
 8001caa:	4b4c      	ldr	r3, [pc, #304]	@ (8001ddc <locomotion+0x250>)
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
        }
      }
      break;
 8001cb2:	e084      	b.n	8001dbe <locomotion+0x232>
    case 'L':

      w = -(joystickwconstant * rotationstrength) / 100;
 8001cb4:	4b4a      	ldr	r3, [pc, #296]	@ (8001de0 <locomotion+0x254>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc0:	4b48      	ldr	r3, [pc, #288]	@ (8001de4 <locomotion+0x258>)
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cca:	eeb1 7a67 	vneg.f32	s14, s15
 8001cce:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001de8 <locomotion+0x25c>
 8001cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd6:	4b41      	ldr	r3, [pc, #260]	@ (8001ddc <locomotion+0x250>)
 8001cd8:	edc3 7a00 	vstr	s15, [r3]
      if (angle == defaultcontrollerangle) {
 8001cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd0 <locomotion+0x244>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd4 <locomotion+0x248>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10e      	bne.n	8001d06 <locomotion+0x17a>
        vx = 0;
 8001ce8:	4940      	ldr	r1, [pc, #256]	@ (8001dec <locomotion+0x260>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9c1 2300 	strd	r2, r3, [r1]
        vy = 0;
 8001cf6:	493e      	ldr	r1, [pc, #248]	@ (8001df0 <locomotion+0x264>)
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8001d04:	e05c      	b.n	8001dc0 <locomotion+0x234>
      } else {
        calc();
 8001d06:	f000 f879 	bl	8001dfc <calc>
        break;
 8001d0a:	e059      	b.n	8001dc0 <locomotion+0x234>
      }
      break;
    case 'R':
      w = (joystickwconstant * rotationstrength) / 100;
 8001d0c:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <locomotion+0x254>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d18:	4b32      	ldr	r3, [pc, #200]	@ (8001de4 <locomotion+0x258>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d22:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001de8 <locomotion+0x25c>
 8001d26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ddc <locomotion+0x250>)
 8001d2c:	edc3 7a00 	vstr	s15, [r3]
      if (angle == defaultcontrollerangle) {
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <locomotion+0x244>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <locomotion+0x248>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10e      	bne.n	8001d5a <locomotion+0x1ce>
        vx = 0;
 8001d3c:	492b      	ldr	r1, [pc, #172]	@ (8001dec <locomotion+0x260>)
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9c1 2300 	strd	r2, r3, [r1]
        vy = 0;
 8001d4a:	4929      	ldr	r1, [pc, #164]	@ (8001df0 <locomotion+0x264>)
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8001d58:	e032      	b.n	8001dc0 <locomotion+0x234>
      } else {
        calc();
 8001d5a:	f000 f84f 	bl	8001dfc <calc>
        break;
 8001d5e:	e02f      	b.n	8001dc0 <locomotion+0x234>
      }
      break;

    case 'K':
      w = -kcasew ;
 8001d60:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <locomotion+0x268>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eef1 7a67 	vneg.f32	s15, s15
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <locomotion+0x250>)
 8001d6c:	edc3 7a00 	vstr	s15, [r3]
      calc();
 8001d70:	f000 f844 	bl	8001dfc <calc>

      break;
 8001d74:	e024      	b.n	8001dc0 <locomotion+0x234>
    case 'k':
      w = kcasew ;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <locomotion+0x268>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a18      	ldr	r2, [pc, #96]	@ (8001ddc <locomotion+0x250>)
 8001d7c:	6013      	str	r3, [r2, #0]

      calc();
 8001d7e:	f000 f83d 	bl	8001dfc <calc>

      break;
 8001d82:	e01d      	b.n	8001dc0 <locomotion+0x234>
    case 'o':
      w = ocasew;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <locomotion+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <locomotion+0x250>)
 8001d8a:	6013      	str	r3, [r2, #0]

      calc();
 8001d8c:	f000 f836 	bl	8001dfc <calc>

      break;
 8001d90:	e016      	b.n	8001dc0 <locomotion+0x234>
    case 'O':
      w = -ocasew;
 8001d92:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <locomotion+0x26c>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	eef1 7a67 	vneg.f32	s15, s15
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <locomotion+0x250>)
 8001d9e:	edc3 7a00 	vstr	s15, [r3]

      calc();
 8001da2:	f000 f82b 	bl	8001dfc <calc>

      break;
 8001da6:	e00b      	b.n	8001dc0 <locomotion+0x234>

    default:
      if (alignn) {
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <locomotion+0x238>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <locomotion+0x22c>
        w = 0;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <locomotion+0x250>)
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
      }
      calc();
 8001db8:	f000 f820 	bl	8001dfc <calc>
  }
  }
 8001dbc:	e000      	b.n	8001dc0 <locomotion+0x234>
      break;
 8001dbe:	bf00      	nop
  }
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000094 	.word	0x20000094
 8001dc8:	20000358 	.word	0x20000358
 8001dcc:	200000b8 	.word	0x200000b8
 8001dd0:	200003a0 	.word	0x200003a0
 8001dd4:	2000004c 	.word	0x2000004c
 8001dd8:	200003a4 	.word	0x200003a4
 8001ddc:	200003b8 	.word	0x200003b8
 8001de0:	2000038c 	.word	0x2000038c
 8001de4:	20000048 	.word	0x20000048
 8001de8:	42c80000 	.word	0x42c80000
 8001dec:	200003a8 	.word	0x200003a8
 8001df0:	200003b0 	.word	0x200003b0
 8001df4:	20000050 	.word	0x20000050
 8001df8:	20000054 	.word	0x20000054

08001dfc <calc>:
//}

void calc() {
 8001dfc:	b5b0      	push	{r4, r5, r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

  radiann = toradian(angle);
 8001e00:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <calc+0x104>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b10 	vmov	d0, r2, r3
 8001e12:	f7ff fe97 	bl	8001b44 <toradian>
 8001e16:	ec53 2b10 	vmov	r2, r3, d0
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fee3 	bl	8000be8 <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4a37      	ldr	r2, [pc, #220]	@ (8001f04 <calc+0x108>)
 8001e26:	6013      	str	r3, [r2, #0]
  vx = cos(radiann) * strength / 100 * multi;
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <calc+0x108>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb8b 	bl	8000548 <__aeabi_f2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	ec43 2b10 	vmov	d0, r2, r3
 8001e3a:	f00a ff01 	bl	800cc40 <cos>
 8001e3e:	ec55 4b10 	vmov	r4, r5, d0
 8001e42:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <calc+0x10c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb6c 	bl	8000524 <__aeabi_i2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4620      	mov	r0, r4
 8001e52:	4629      	mov	r1, r5
 8001e54:	f7fe fbd0 	bl	80005f8 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <calc+0x110>)
 8001e66:	f7fe fcf1 	bl	800084c <__aeabi_ddiv>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4614      	mov	r4, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <calc+0x114>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb54 	bl	8000524 <__aeabi_i2d>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe fbb8 	bl	80005f8 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4921      	ldr	r1, [pc, #132]	@ (8001f14 <calc+0x118>)
 8001e8e:	e9c1 2300 	strd	r2, r3, [r1]
  vy = sin(radiann) * strength / 100 * multi;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <calc+0x108>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb56 	bl	8000548 <__aeabi_f2d>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	ec43 2b10 	vmov	d0, r2, r3
 8001ea4:	f00a ff20 	bl	800cce8 <sin>
 8001ea8:	ec55 4b10 	vmov	r4, r5, d0
 8001eac:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <calc+0x10c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb37 	bl	8000524 <__aeabi_i2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe fb9b 	bl	80005f8 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <calc+0x110>)
 8001ed0:	f7fe fcbc 	bl	800084c <__aeabi_ddiv>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4614      	mov	r4, r2
 8001eda:	461d      	mov	r5, r3
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <calc+0x114>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb1f 	bl	8000524 <__aeabi_i2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe fb83 	bl	80005f8 <__aeabi_dmul>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <calc+0x11c>)
 8001ef8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001efc:	bf00      	nop
 8001efe:	bdb0      	pop	{r4, r5, r7, pc}
 8001f00:	200003a0 	.word	0x200003a0
 8001f04:	20000438 	.word	0x20000438
 8001f08:	20000390 	.word	0x20000390
 8001f0c:	40590000 	.word	0x40590000
 8001f10:	20000014 	.word	0x20000014
 8001f14:	200003a8 	.word	0x200003a8
 8001f18:	200003b0 	.word	0x200003b0

08001f1c <locomote>:
void locomote() {
 8001f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f20:	b08e      	sub	sp, #56	@ 0x38
 8001f22:	af00      	add	r7, sp, #0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 8001f24:	4bcc      	ldr	r3, [pc, #816]	@ (8002258 <locomote+0x33c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fafb 	bl	8000524 <__aeabi_i2d>
 8001f2e:	4bcb      	ldr	r3, [pc, #812]	@ (800225c <locomote+0x340>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe fb60 	bl	80005f8 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4bc6      	ldr	r3, [pc, #792]	@ (8002260 <locomote+0x344>)
 8001f46:	f7fe fc81 	bl	800084c <__aeabi_ddiv>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	ec43 2b17 	vmov	d7, r2, r3
 8001f52:	eeb0 0a47 	vmov.f32	s0, s14
 8001f56:	eef0 0a67 	vmov.f32	s1, s15
 8001f5a:	f00a fe71 	bl	800cc40 <cos>
 8001f5e:	ec53 2b10 	vmov	r2, r3, d0
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fe3f 	bl	8000be8 <__aeabi_d2f>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	4bba      	ldr	r3, [pc, #744]	@ (8002258 <locomote+0x33c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fad6 	bl	8000524 <__aeabi_i2d>
 8001f78:	4bb8      	ldr	r3, [pc, #736]	@ (800225c <locomote+0x340>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fb3b 	bl	80005f8 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	4bb4      	ldr	r3, [pc, #720]	@ (8002260 <locomote+0x344>)
 8001f90:	f7fe fc5c 	bl	800084c <__aeabi_ddiv>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	ec43 2b17 	vmov	d7, r2, r3
 8001f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa0:	eef0 0a67 	vmov.f32	s1, s15
 8001fa4:	f00a fea0 	bl	800cce8 <sin>
 8001fa8:	ec53 2b10 	vmov	r2, r3, d0
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f7fe fe1a 	bl	8000be8 <__aeabi_d2f>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	4baa      	ldr	r3, [pc, #680]	@ (8002264 <locomote+0x348>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61fb      	str	r3, [r7, #28]
                         { cos((120 + Z_Val) * pi / 180), sin((120 + Z_Val) * pi / 180), d },
 8001fbe:	4ba6      	ldr	r3, [pc, #664]	@ (8002258 <locomote+0x33c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3378      	adds	r3, #120	@ 0x78
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe faad 	bl	8000524 <__aeabi_i2d>
 8001fca:	4ba4      	ldr	r3, [pc, #656]	@ (800225c <locomote+0x340>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fb12 	bl	80005f8 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b9f      	ldr	r3, [pc, #636]	@ (8002260 <locomote+0x344>)
 8001fe2:	f7fe fc33 	bl	800084c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	ec43 2b17 	vmov	d7, r2, r3
 8001fee:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff2:	eef0 0a67 	vmov.f32	s1, s15
 8001ff6:	f00a fe23 	bl	800cc40 <cos>
 8001ffa:	ec53 2b10 	vmov	r2, r3, d0
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fdf1 	bl	8000be8 <__aeabi_d2f>
 8002006:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 8002008:	623b      	str	r3, [r7, #32]
                         { cos((120 + Z_Val) * pi / 180), sin((120 + Z_Val) * pi / 180), d },
 800200a:	4b93      	ldr	r3, [pc, #588]	@ (8002258 <locomote+0x33c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3378      	adds	r3, #120	@ 0x78
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa87 	bl	8000524 <__aeabi_i2d>
 8002016:	4b91      	ldr	r3, [pc, #580]	@ (800225c <locomote+0x340>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe faec 	bl	80005f8 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b8c      	ldr	r3, [pc, #560]	@ (8002260 <locomote+0x344>)
 800202e:	f7fe fc0d 	bl	800084c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	ec43 2b17 	vmov	d7, r2, r3
 800203a:	eeb0 0a47 	vmov.f32	s0, s14
 800203e:	eef0 0a67 	vmov.f32	s1, s15
 8002042:	f00a fe51 	bl	800cce8 <sin>
 8002046:	ec53 2b10 	vmov	r2, r3, d0
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fdcb 	bl	8000be8 <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
 8002056:	4b83      	ldr	r3, [pc, #524]	@ (8002264 <locomote+0x348>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
                         { cos((240 + Z_Val) * pi / 180), sin((240 + Z_Val) * pi / 180), d } };
 800205c:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <locomote+0x33c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	33f0      	adds	r3, #240	@ 0xf0
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa5e 	bl	8000524 <__aeabi_i2d>
 8002068:	4b7c      	ldr	r3, [pc, #496]	@ (800225c <locomote+0x340>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe fac3 	bl	80005f8 <__aeabi_dmul>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b78      	ldr	r3, [pc, #480]	@ (8002260 <locomote+0x344>)
 8002080:	f7fe fbe4 	bl	800084c <__aeabi_ddiv>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	ec43 2b17 	vmov	d7, r2, r3
 800208c:	eeb0 0a47 	vmov.f32	s0, s14
 8002090:	eef0 0a67 	vmov.f32	s1, s15
 8002094:	f00a fdd4 	bl	800cc40 <cos>
 8002098:	ec53 2b10 	vmov	r2, r3, d0
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fda2 	bl	8000be8 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80020a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                         { cos((240 + Z_Val) * pi / 180), sin((240 + Z_Val) * pi / 180), d } };
 80020a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002258 <locomote+0x33c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	33f0      	adds	r3, #240	@ 0xf0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa38 	bl	8000524 <__aeabi_i2d>
 80020b4:	4b69      	ldr	r3, [pc, #420]	@ (800225c <locomote+0x340>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe fa9d 	bl	80005f8 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	4b65      	ldr	r3, [pc, #404]	@ (8002260 <locomote+0x344>)
 80020cc:	f7fe fbbe 	bl	800084c <__aeabi_ddiv>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	ec43 2b17 	vmov	d7, r2, r3
 80020d8:	eeb0 0a47 	vmov.f32	s0, s14
 80020dc:	eef0 0a67 	vmov.f32	s1, s15
 80020e0:	f00a fe02 	bl	800cce8 <sin>
 80020e4:	ec53 2b10 	vmov	r2, r3, d0
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7fe fd7c 	bl	8000be8 <__aeabi_d2f>
 80020f0:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80020f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80020f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002264 <locomote+0x348>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	637b      	str	r3, [r7, #52]	@ 0x34
  base[0] = (matrix[0][0] * vx + matrix[0][1] * vy + w * matrix[0][2]) / r;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa23 	bl	8000548 <__aeabi_f2d>
 8002102:	4b59      	ldr	r3, [pc, #356]	@ (8002268 <locomote+0x34c>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fa76 	bl	80005f8 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4614      	mov	r4, r2
 8002112:	461d      	mov	r5, r3
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa16 	bl	8000548 <__aeabi_f2d>
 800211c:	4b53      	ldr	r3, [pc, #332]	@ (800226c <locomote+0x350>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe fa69 	bl	80005f8 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4620      	mov	r0, r4
 800212c:	4629      	mov	r1, r5
 800212e:	f7fe f8ad 	bl	800028c <__adddf3>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4614      	mov	r4, r2
 8002138:	461d      	mov	r5, r3
 800213a:	ed97 7a07 	vldr	s14, [r7, #28]
 800213e:	4b4c      	ldr	r3, [pc, #304]	@ (8002270 <locomote+0x354>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	ee17 0a90 	vmov	r0, s15
 800214c:	f7fe f9fc 	bl	8000548 <__aeabi_f2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4620      	mov	r0, r4
 8002156:	4629      	mov	r1, r5
 8002158:	f7fe f898 	bl	800028c <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4614      	mov	r4, r2
 8002162:	461d      	mov	r5, r3
 8002164:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <locomote+0x358>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f9ed 	bl	8000548 <__aeabi_f2d>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe fb69 	bl	800084c <__aeabi_ddiv>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fce9 	bl	8000b58 <__aeabi_d2iz>
 8002186:	4603      	mov	r3, r0
 8002188:	4a3b      	ldr	r2, [pc, #236]	@ (8002278 <locomote+0x35c>)
 800218a:	6013      	str	r3, [r2, #0]
  base[1] = (matrix[1][0] * vx + matrix[1][1] * vy + w * matrix[1][2]) / r;
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9da 	bl	8000548 <__aeabi_f2d>
 8002194:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <locomote+0x34c>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe fa2d 	bl	80005f8 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4614      	mov	r4, r2
 80021a4:	461d      	mov	r5, r3
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9cd 	bl	8000548 <__aeabi_f2d>
 80021ae:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <locomote+0x350>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe fa20 	bl	80005f8 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fe f864 	bl	800028c <__adddf3>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	461d      	mov	r5, r3
 80021cc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80021d0:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <locomote+0x354>)
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021da:	ee17 0a90 	vmov	r0, s15
 80021de:	f7fe f9b3 	bl	8000548 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4620      	mov	r0, r4
 80021e8:	4629      	mov	r1, r5
 80021ea:	f7fe f84f 	bl	800028c <__adddf3>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4614      	mov	r4, r2
 80021f4:	461d      	mov	r5, r3
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <locomote+0x358>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f9a4 	bl	8000548 <__aeabi_f2d>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fe fb20 	bl	800084c <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fca0 	bl	8000b58 <__aeabi_d2iz>
 8002218:	4603      	mov	r3, r0
 800221a:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <locomote+0x35c>)
 800221c:	6053      	str	r3, [r2, #4]
  base[2] = (matrix[2][0] * vx + matrix[2][1] * vy + w * matrix[2][2]) / r;
 800221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f991 	bl	8000548 <__aeabi_f2d>
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <locomote+0x34c>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f9e4 	bl	80005f8 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4614      	mov	r4, r2
 8002236:	461d      	mov	r5, r3
 8002238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f984 	bl	8000548 <__aeabi_f2d>
 8002240:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <locomote+0x350>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fe f9d7 	bl	80005f8 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4620      	mov	r0, r4
 8002250:	4629      	mov	r1, r5
 8002252:	f7fe f81b 	bl	800028c <__adddf3>
 8002256:	e011      	b.n	800227c <locomote+0x360>
 8002258:	20000388 	.word	0x20000388
 800225c:	200000b0 	.word	0x200000b0
 8002260:	40668000 	.word	0x40668000
 8002264:	200000a8 	.word	0x200000a8
 8002268:	200003a8 	.word	0x200003a8
 800226c:	200003b0 	.word	0x200003b0
 8002270:	200003b8 	.word	0x200003b8
 8002274:	20000018 	.word	0x20000018
 8002278:	2000033c 	.word	0x2000033c
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002288:	4bba      	ldr	r3, [pc, #744]	@ (8002574 <locomote+0x658>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	ee17 0a90 	vmov	r0, s15
 8002296:	f7fe f957 	bl	8000548 <__aeabi_f2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f7fd fff3 	bl	800028c <__adddf3>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4614      	mov	r4, r2
 80022ac:	461d      	mov	r5, r3
 80022ae:	4bb2      	ldr	r3, [pc, #712]	@ (8002578 <locomote+0x65c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f948 	bl	8000548 <__aeabi_f2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4620      	mov	r0, r4
 80022be:	4629      	mov	r1, r5
 80022c0:	f7fe fac4 	bl	800084c <__aeabi_ddiv>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc44 	bl	8000b58 <__aeabi_d2iz>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4aaa      	ldr	r2, [pc, #680]	@ (800257c <locomote+0x660>)
 80022d4:	6093      	str	r3, [r2, #8]

  if ((base[0] != 0) || (base[1] != 0) || base[2] != 0) {
 80022d6:	4ba9      	ldr	r3, [pc, #676]	@ (800257c <locomote+0x660>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d107      	bne.n	80022ee <locomote+0x3d2>
 80022de:	4ba7      	ldr	r3, [pc, #668]	@ (800257c <locomote+0x660>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <locomote+0x3d2>
 80022e6:	4ba5      	ldr	r3, [pc, #660]	@ (800257c <locomote+0x660>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <locomote+0x3fe>
    dir[0] = (base[0] < 0) ? 1: 0;
 80022ee:	4ba3      	ldr	r3, [pc, #652]	@ (800257c <locomote+0x660>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0fdb      	lsrs	r3, r3, #31
 80022f4:	461a      	mov	r2, r3
 80022f6:	4ba2      	ldr	r3, [pc, #648]	@ (8002580 <locomote+0x664>)
 80022f8:	601a      	str	r2, [r3, #0]
    dir[1] = (base[1] < 0) ? 0:1;
 80022fa:	4ba0      	ldr	r3, [pc, #640]	@ (800257c <locomote+0x660>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	43db      	mvns	r3, r3
 8002300:	0fdb      	lsrs	r3, r3, #31
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	4b9e      	ldr	r3, [pc, #632]	@ (8002580 <locomote+0x664>)
 8002308:	605a      	str	r2, [r3, #4]
    dir[2] = (base[2] < 0) ? 0: 1;
 800230a:	4b9c      	ldr	r3, [pc, #624]	@ (800257c <locomote+0x660>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	43db      	mvns	r3, r3
 8002310:	0fdb      	lsrs	r3, r3, #31
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4b9a      	ldr	r3, [pc, #616]	@ (8002580 <locomote+0x664>)
 8002318:	609a      	str	r2, [r3, #8]
  }
  setpoint1 = base[0] *  rpmtoradian;
 800231a:	4b98      	ldr	r3, [pc, #608]	@ (800257c <locomote+0x660>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002326:	4b97      	ldr	r3, [pc, #604]	@ (8002584 <locomote+0x668>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002334:	ee17 3a90 	vmov	r3, s15
 8002338:	b21a      	sxth	r2, r3
 800233a:	4b93      	ldr	r3, [pc, #588]	@ (8002588 <locomote+0x66c>)
 800233c:	801a      	strh	r2, [r3, #0]
  setpoint2 = base[1] *  rpmtoradian;
 800233e:	4b8f      	ldr	r3, [pc, #572]	@ (800257c <locomote+0x660>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800234a:	4b8e      	ldr	r3, [pc, #568]	@ (8002584 <locomote+0x668>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002358:	ee17 3a90 	vmov	r3, s15
 800235c:	b21a      	sxth	r2, r3
 800235e:	4b8b      	ldr	r3, [pc, #556]	@ (800258c <locomote+0x670>)
 8002360:	801a      	strh	r2, [r3, #0]
  setpoint3 = base[2] *  rpmtoradian;
 8002362:	4b86      	ldr	r3, [pc, #536]	@ (800257c <locomote+0x660>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236e:	4b85      	ldr	r3, [pc, #532]	@ (8002584 <locomote+0x668>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	b21a      	sxth	r2, r3
 8002382:	4b83      	ldr	r3, [pc, #524]	@ (8002590 <locomote+0x674>)
 8002384:	801a      	strh	r2, [r3, #0]
  setpoint1 = (setpoint1 < 0)?(~setpoint1)+ 1: setpoint1;
 8002386:	4b80      	ldr	r3, [pc, #512]	@ (8002588 <locomote+0x66c>)
 8002388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238c:	2b00      	cmp	r3, #0
 800238e:	bfb8      	it	lt
 8002390:	425b      	neglt	r3, r3
 8002392:	b29b      	uxth	r3, r3
 8002394:	b21a      	sxth	r2, r3
 8002396:	4b7c      	ldr	r3, [pc, #496]	@ (8002588 <locomote+0x66c>)
 8002398:	801a      	strh	r2, [r3, #0]
  setpoint2= (setpoint2 < 0)?(~setpoint2)+ 1: setpoint2;
 800239a:	4b7c      	ldr	r3, [pc, #496]	@ (800258c <locomote+0x670>)
 800239c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bfb8      	it	lt
 80023a4:	425b      	neglt	r3, r3
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b21a      	sxth	r2, r3
 80023aa:	4b78      	ldr	r3, [pc, #480]	@ (800258c <locomote+0x670>)
 80023ac:	801a      	strh	r2, [r3, #0]
  setpoint3 =(setpoint3 < 0)?(~setpoint3)+ 1: setpoint3;
 80023ae:	4b78      	ldr	r3, [pc, #480]	@ (8002590 <locomote+0x674>)
 80023b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bfb8      	it	lt
 80023b8:	425b      	neglt	r3, r3
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b21a      	sxth	r2, r3
 80023be:	4b74      	ldr	r3, [pc, #464]	@ (8002590 <locomote+0x674>)
 80023c0:	801a      	strh	r2, [r3, #0]
  basepwm[0] = base[0] * base1multiplier ;
 80023c2:	4b6e      	ldr	r3, [pc, #440]	@ (800257c <locomote+0x660>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ce:	4b71      	ldr	r3, [pc, #452]	@ (8002594 <locomote+0x678>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023dc:	ee17 2a90 	vmov	r2, s15
 80023e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002598 <locomote+0x67c>)
 80023e2:	601a      	str	r2, [r3, #0]
  basepwm[1] = base[1] * base2multiplier ;
 80023e4:	4b65      	ldr	r3, [pc, #404]	@ (800257c <locomote+0x660>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f0:	4b6a      	ldr	r3, [pc, #424]	@ (800259c <locomote+0x680>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fe:	ee17 2a90 	vmov	r2, s15
 8002402:	4b65      	ldr	r3, [pc, #404]	@ (8002598 <locomote+0x67c>)
 8002404:	605a      	str	r2, [r3, #4]
  basepwm[2] = base[2] * base3multiplier ;
 8002406:	4b5d      	ldr	r3, [pc, #372]	@ (800257c <locomote+0x660>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002412:	4b63      	ldr	r3, [pc, #396]	@ (80025a0 <locomote+0x684>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 2a90 	vmov	r2, s15
 8002424:	4b5c      	ldr	r3, [pc, #368]	@ (8002598 <locomote+0x67c>)
 8002426:	609a      	str	r2, [r3, #8]

  basepwm[0] = (basepwm[0]<0)?(~basepwm[0]) + 1:basepwm[0];
 8002428:	4b5b      	ldr	r3, [pc, #364]	@ (8002598 <locomote+0x67c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	bfb8      	it	lt
 8002430:	425b      	neglt	r3, r3
 8002432:	4a59      	ldr	r2, [pc, #356]	@ (8002598 <locomote+0x67c>)
 8002434:	6013      	str	r3, [r2, #0]
  basepwm[1] = (basepwm[1]<0)?(~basepwm[1]) + 1:basepwm[1];
 8002436:	4b58      	ldr	r3, [pc, #352]	@ (8002598 <locomote+0x67c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	bfb8      	it	lt
 800243e:	425b      	neglt	r3, r3
 8002440:	4a55      	ldr	r2, [pc, #340]	@ (8002598 <locomote+0x67c>)
 8002442:	6053      	str	r3, [r2, #4]
  basepwm[2] = (basepwm[2]<0)?(~basepwm[2]) + 1:basepwm[2];
 8002444:	4b54      	ldr	r3, [pc, #336]	@ (8002598 <locomote+0x67c>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	bfb8      	it	lt
 800244c:	425b      	neglt	r3, r3
 800244e:	4a52      	ldr	r2, [pc, #328]	@ (8002598 <locomote+0x67c>)
 8002450:	6093      	str	r3, [r2, #8]


  error1 = ((setpoint1 - rpm1) /  rpmtoradian) * radiantopwm;
 8002452:	4b4d      	ldr	r3, [pc, #308]	@ (8002588 <locomote+0x66c>)
 8002454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002458:	461a      	mov	r2, r3
 800245a:	4b52      	ldr	r3, [pc, #328]	@ (80025a4 <locomote+0x688>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002468:	4b46      	ldr	r3, [pc, #280]	@ (8002584 <locomote+0x668>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002472:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <locomote+0x68c>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	4b4b      	ldr	r3, [pc, #300]	@ (80025ac <locomote+0x690>)
 800247e:	edc3 7a00 	vstr	s15, [r3]
  error2 = ((setpoint2 - rpm2) /  rpmtoradian) * radiantopwm;
 8002482:	4b42      	ldr	r3, [pc, #264]	@ (800258c <locomote+0x670>)
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	461a      	mov	r2, r3
 800248a:	4b49      	ldr	r3, [pc, #292]	@ (80025b0 <locomote+0x694>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002498:	4b3a      	ldr	r3, [pc, #232]	@ (8002584 <locomote+0x668>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <locomote+0x68c>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ac:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <locomote+0x698>)
 80024ae:	edc3 7a00 	vstr	s15, [r3]
  error3 = ((setpoint3 - rpm3) /  rpmtoradian) * radiantopwm;
 80024b2:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <locomote+0x674>)
 80024b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b3f      	ldr	r3, [pc, #252]	@ (80025b8 <locomote+0x69c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	ee07 3a90 	vmov	s15, r3
 80024c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002584 <locomote+0x668>)
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024d2:	4b35      	ldr	r3, [pc, #212]	@ (80025a8 <locomote+0x68c>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024dc:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <locomote+0x6a0>)
 80024de:	edc3 7a00 	vstr	s15, [r3]


  if (HAL_GetTick() - previousmillis >= sampletime) {
 80024e2:	f002 fb9b 	bl	8004c1c <HAL_GetTick>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2200      	movs	r2, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	60fa      	str	r2, [r7, #12]
 80024ee:	4b34      	ldr	r3, [pc, #208]	@ (80025c0 <locomote+0x6a4>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024f8:	4621      	mov	r1, r4
 80024fa:	ebb1 0802 	subs.w	r8, r1, r2
 80024fe:	4629      	mov	r1, r5
 8002500:	eb61 0903 	sbc.w	r9, r1, r3
 8002504:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <locomote+0x6a8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	17da      	asrs	r2, r3, #31
 800250a:	469a      	mov	sl, r3
 800250c:	4693      	mov	fp, r2
 800250e:	45d0      	cmp	r8, sl
 8002510:	eb79 030b 	sbcs.w	r3, r9, fp
 8002514:	f2c0 80dc 	blt.w	80026d0 <locomote+0x7b4>
    pwm1 = basepwm[0] + kp1 * (error1) + kd1 * (error1 - preverror1);
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <locomote+0x67c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002524:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <locomote+0x6ac>)
 8002526:	edd3 6a00 	vldr	s13, [r3]
 800252a:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <locomote+0x690>)
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002538:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <locomote+0x690>)
 800253a:	edd3 6a00 	vldr	s13, [r3]
 800253e:	4b23      	ldr	r3, [pc, #140]	@ (80025cc <locomote+0x6b0>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002548:	4b21      	ldr	r3, [pc, #132]	@ (80025d0 <locomote+0x6b4>)
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800255a:	ee17 2a90 	vmov	r2, s15
 800255e:	4b1d      	ldr	r3, [pc, #116]	@ (80025d4 <locomote+0x6b8>)
 8002560:	601a      	str	r2, [r3, #0]


    pwm1 = constrain(pwm1, 0, upperlimitlocomotionconstant);
 8002562:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <locomote+0x6b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <locomote+0x6bc>)
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fd6d 	bl	800104c <constrain>
 8002572:	e033      	b.n	80025dc <locomote+0x6c0>
 8002574:	200003b8 	.word	0x200003b8
 8002578:	20000018 	.word	0x20000018
 800257c:	2000033c 	.word	0x2000033c
 8002580:	20000324 	.word	0x20000324
 8002584:	20000038 	.word	0x20000038
 8002588:	200003bc 	.word	0x200003bc
 800258c:	200003be 	.word	0x200003be
 8002590:	200003c0 	.word	0x200003c0
 8002594:	2000003c 	.word	0x2000003c
 8002598:	20000330 	.word	0x20000330
 800259c:	20000040 	.word	0x20000040
 80025a0:	20000044 	.word	0x20000044
 80025a4:	200003e8 	.word	0x200003e8
 80025a8:	20000034 	.word	0x20000034
 80025ac:	200003d0 	.word	0x200003d0
 80025b0:	200003ec 	.word	0x200003ec
 80025b4:	200003d4 	.word	0x200003d4
 80025b8:	200003f0 	.word	0x200003f0
 80025bc:	200003d8 	.word	0x200003d8
 80025c0:	20000380 	.word	0x20000380
 80025c4:	20000098 	.word	0x20000098
 80025c8:	2000001c 	.word	0x2000001c
 80025cc:	200003dc 	.word	0x200003dc
 80025d0:	20000028 	.word	0x20000028
 80025d4:	200003c4 	.word	0x200003c4
 80025d8:	20000058 	.word	0x20000058
 80025dc:	4603      	mov	r3, r0
 80025de:	4a53      	ldr	r2, [pc, #332]	@ (800272c <locomote+0x810>)
 80025e0:	6013      	str	r3, [r2, #0]
    pwm2 = basepwm[1] + kp2 * (error2) + kd2 * (error2 - preverror2);
 80025e2:	4b53      	ldr	r3, [pc, #332]	@ (8002730 <locomote+0x814>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	ee07 3a90 	vmov	s15, r3
 80025ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ee:	4b51      	ldr	r3, [pc, #324]	@ (8002734 <locomote+0x818>)
 80025f0:	edd3 6a00 	vldr	s13, [r3]
 80025f4:	4b50      	ldr	r3, [pc, #320]	@ (8002738 <locomote+0x81c>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002602:	4b4d      	ldr	r3, [pc, #308]	@ (8002738 <locomote+0x81c>)
 8002604:	edd3 6a00 	vldr	s13, [r3]
 8002608:	4b4c      	ldr	r3, [pc, #304]	@ (800273c <locomote+0x820>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002612:	4b4b      	ldr	r3, [pc, #300]	@ (8002740 <locomote+0x824>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002624:	ee17 2a90 	vmov	r2, s15
 8002628:	4b46      	ldr	r3, [pc, #280]	@ (8002744 <locomote+0x828>)
 800262a:	601a      	str	r2, [r3, #0]

    pwm2 = constrain(pwm2, 0, upperlimitlocomotionconstant);
 800262c:	4b45      	ldr	r3, [pc, #276]	@ (8002744 <locomote+0x828>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a45      	ldr	r2, [pc, #276]	@ (8002748 <locomote+0x82c>)
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fd08 	bl	800104c <constrain>
 800263c:	4603      	mov	r3, r0
 800263e:	4a41      	ldr	r2, [pc, #260]	@ (8002744 <locomote+0x828>)
 8002640:	6013      	str	r3, [r2, #0]
    pwm3 = basepwm[2]+ kp3 * (error3) + kd3 * (error3 - preverror3);
 8002642:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <locomote+0x814>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800264e:	4b3f      	ldr	r3, [pc, #252]	@ (800274c <locomote+0x830>)
 8002650:	edd3 6a00 	vldr	s13, [r3]
 8002654:	4b3e      	ldr	r3, [pc, #248]	@ (8002750 <locomote+0x834>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800265e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002662:	4b3b      	ldr	r3, [pc, #236]	@ (8002750 <locomote+0x834>)
 8002664:	edd3 6a00 	vldr	s13, [r3]
 8002668:	4b3a      	ldr	r3, [pc, #232]	@ (8002754 <locomote+0x838>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002672:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <locomote+0x83c>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002684:	ee17 2a90 	vmov	r2, s15
 8002688:	4b34      	ldr	r3, [pc, #208]	@ (800275c <locomote+0x840>)
 800268a:	601a      	str	r2, [r3, #0]

    pwm3 = constrain(pwm3, 0, upperlimitlocomotionconstant);
 800268c:	4b33      	ldr	r3, [pc, #204]	@ (800275c <locomote+0x840>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2d      	ldr	r2, [pc, #180]	@ (8002748 <locomote+0x82c>)
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fcd8 	bl	800104c <constrain>
 800269c:	4603      	mov	r3, r0
 800269e:	4a2f      	ldr	r2, [pc, #188]	@ (800275c <locomote+0x840>)
 80026a0:	6013      	str	r3, [r2, #0]
    preverror1 = error1;
 80026a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002760 <locomote+0x844>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002764 <locomote+0x848>)
 80026a8:	6013      	str	r3, [r2, #0]
    preverror2 = error2;
 80026aa:	4b23      	ldr	r3, [pc, #140]	@ (8002738 <locomote+0x81c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a23      	ldr	r2, [pc, #140]	@ (800273c <locomote+0x820>)
 80026b0:	6013      	str	r3, [r2, #0]
    preverror3 = error3;
 80026b2:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <locomote+0x834>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <locomote+0x838>)
 80026b8:	6013      	str	r3, [r2, #0]
    previousmillis = HAL_GetTick();
 80026ba:	f002 faaf 	bl	8004c1c <HAL_GetTick>
 80026be:	4603      	mov	r3, r0
 80026c0:	2200      	movs	r2, #0
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <locomote+0x84c>)
 80026c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80026cc:	e9c3 1200 	strd	r1, r2, [r3]
  }

// R1 LOCOMOTION
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, dir[1]);
 80026d0:	4b26      	ldr	r3, [pc, #152]	@ (800276c <locomote+0x850>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026dc:	4824      	ldr	r0, [pc, #144]	@ (8002770 <locomote+0x854>)
 80026de:	f003 fd7d 	bl	80061dc <HAL_GPIO_WritePin>
  TIM2->CCR4 = pwm2;
 80026e2:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <locomote+0x828>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80026ea:	641a      	str	r2, [r3, #64]	@ 0x40

HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,dir[0]);
 80026ec:	4b1f      	ldr	r3, [pc, #124]	@ (800276c <locomote+0x850>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026f8:	481d      	ldr	r0, [pc, #116]	@ (8002770 <locomote+0x854>)
 80026fa:	f003 fd6f 	bl	80061dc <HAL_GPIO_WritePin>
  TIM2->CCR3 = pwm1;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <locomote+0x810>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002706:	63da      	str	r2, [r3, #60]	@ 0x3c


 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, dir[2]);
 8002708:	4b18      	ldr	r3, [pc, #96]	@ (800276c <locomote+0x850>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	2101      	movs	r1, #1
 8002712:	4818      	ldr	r0, [pc, #96]	@ (8002774 <locomote+0x858>)
 8002714:	f003 fd62 	bl	80061dc <HAL_GPIO_WritePin>
  TIM2->CCR1 = pwm3;
 8002718:	4b10      	ldr	r3, [pc, #64]	@ (800275c <locomote+0x840>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002720:	635a      	str	r2, [r3, #52]	@ 0x34
//  TIM2 ->CCR3 = pwm3;




}
 8002722:	bf00      	nop
 8002724:	3738      	adds	r7, #56	@ 0x38
 8002726:	46bd      	mov	sp, r7
 8002728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272c:	200003c4 	.word	0x200003c4
 8002730:	20000330 	.word	0x20000330
 8002734:	20000020 	.word	0x20000020
 8002738:	200003d4 	.word	0x200003d4
 800273c:	200003e0 	.word	0x200003e0
 8002740:	2000002c 	.word	0x2000002c
 8002744:	200003c8 	.word	0x200003c8
 8002748:	20000058 	.word	0x20000058
 800274c:	20000024 	.word	0x20000024
 8002750:	200003d8 	.word	0x200003d8
 8002754:	200003e4 	.word	0x200003e4
 8002758:	20000030 	.word	0x20000030
 800275c:	200003cc 	.word	0x200003cc
 8002760:	200003d0 	.word	0x200003d0
 8002764:	200003dc 	.word	0x200003dc
 8002768:	20000380 	.word	0x20000380
 800276c:	20000324 	.word	0x20000324
 8002770:	40020400 	.word	0x40020400
 8002774:	40020c00 	.word	0x40020c00

08002778 <analogRead_pa4>:

#include "variables.h"
#include "stm32f4xx_hal.h"

ADC_HandleTypeDef hadc1;
uint16_t analogRead_pa4() {
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_10;
 800278a:	230a      	movs	r3, #10
 800278c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 800278e:	2301      	movs	r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002792:	2304      	movs	r3, #4
 8002794:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	4619      	mov	r1, r3
 800279a:	480e      	ldr	r0, [pc, #56]	@ (80027d4 <analogRead_pa4+0x5c>)
 800279c:	f002 fc50 	bl	8005040 <HAL_ADC_ConfigChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <analogRead_pa4+0x32>
		Error_Handler();
 80027a6:	f001 fa0f 	bl	8003bc8 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 80027aa:	480a      	ldr	r0, [pc, #40]	@ (80027d4 <analogRead_pa4+0x5c>)
 80027ac:	f002 faaa 	bl	8004d04 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80027b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027b4:	4807      	ldr	r0, [pc, #28]	@ (80027d4 <analogRead_pa4+0x5c>)
 80027b6:	f002 fbaa 	bl	8004f0e <HAL_ADC_PollForConversion>
	uint16_t pot = HAL_ADC_GetValue(&hadc1);
 80027ba:	4806      	ldr	r0, [pc, #24]	@ (80027d4 <analogRead_pa4+0x5c>)
 80027bc:	f002 fc32 	bl	8005024 <HAL_ADC_GetValue>
 80027c0:	4603      	mov	r3, r0
 80027c2:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 80027c4:	4803      	ldr	r0, [pc, #12]	@ (80027d4 <analogRead_pa4+0x5c>)
 80027c6:	f002 fb6f 	bl	8004ea8 <HAL_ADC_Stop>
	return pot;
 80027ca:	8afb      	ldrh	r3, [r7, #22]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200005ac 	.word	0x200005ac

080027d8 <dribble>:

void dribble() {
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	temp_pot = analogRead_pa4();
 80027dc:	f7ff ffcc 	bl	8002778 <analogRead_pa4>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b80      	ldr	r3, [pc, #512]	@ (80029e8 <dribble+0x210>)
 80027e6:	601a      	str	r2, [r3, #0]

	if (!f_dribble) {
 80027e8:	4b80      	ldr	r3, [pc, #512]	@ (80029ec <dribble+0x214>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	f083 0301 	eor.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 80f5 	bne.w	80029e2 <dribble+0x20a>
		return;
	}

	if (HAL_GetTick() - prevmillis_d >= 50) {
 80027f8:	f002 fa10 	bl	8004c1c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b7c      	ldr	r3, [pc, #496]	@ (80029f0 <dribble+0x218>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b31      	cmp	r3, #49	@ 0x31
 8002806:	f240 80ed 	bls.w	80029e4 <dribble+0x20c>
		error_d = dribble_sp - temp_pot;
 800280a:	4b7a      	ldr	r3, [pc, #488]	@ (80029f4 <dribble+0x21c>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b76      	ldr	r3, [pc, #472]	@ (80029e8 <dribble+0x210>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	4a78      	ldr	r2, [pc, #480]	@ (80029f8 <dribble+0x220>)
 8002816:	6013      	str	r3, [r2, #0]
		(error_d >= 0) ?
 8002818:	4b77      	ldr	r3, [pc, #476]	@ (80029f8 <dribble+0x220>)
 800281a:	681b      	ldr	r3, [r3, #0]
				HAL_GPIO_WritePin(dirPort_d, dirPin_d, 1) :
 800281c:	2b00      	cmp	r3, #0
 800281e:	db05      	blt.n	800282c <dribble+0x54>
 8002820:	2201      	movs	r2, #1
 8002822:	2180      	movs	r1, #128	@ 0x80
 8002824:	4875      	ldr	r0, [pc, #468]	@ (80029fc <dribble+0x224>)
 8002826:	f003 fcd9 	bl	80061dc <HAL_GPIO_WritePin>
 800282a:	e004      	b.n	8002836 <dribble+0x5e>
				HAL_GPIO_WritePin(dirPort_d, dirPin_d, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2180      	movs	r1, #128	@ 0x80
 8002830:	4872      	ldr	r0, [pc, #456]	@ (80029fc <dribble+0x224>)
 8002832:	f003 fcd3 	bl	80061dc <HAL_GPIO_WritePin>

		if (abs(error_d) <= 30) {
 8002836:	4b70      	ldr	r3, [pc, #448]	@ (80029f8 <dribble+0x220>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f113 0f1e 	cmn.w	r3, #30
 800283e:	db6f      	blt.n	8002920 <dribble+0x148>
 8002840:	4b6d      	ldr	r3, [pc, #436]	@ (80029f8 <dribble+0x220>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b1e      	cmp	r3, #30
 8002846:	dc6b      	bgt.n	8002920 <dribble+0x148>

			TIM10->CCR1 = 0;
 8002848:	4b6d      	ldr	r3, [pc, #436]	@ (8002a00 <dribble+0x228>)
 800284a:	2200      	movs	r2, #0
 800284c:	635a      	str	r2, [r3, #52]	@ 0x34
			dalay(500);
 800284e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002852:	f000 f8ef 	bl	8002a34 <dalay>
			switch (count) {
 8002856:	4b6b      	ldr	r3, [pc, #428]	@ (8002a04 <dribble+0x22c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d04d      	beq.n	80028fa <dribble+0x122>
 800285e:	2b02      	cmp	r3, #2
 8002860:	dc5c      	bgt.n	800291c <dribble+0x144>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <dribble+0x94>
 8002866:	2b01      	cmp	r3, #1
 8002868:	d02f      	beq.n	80028ca <dribble+0xf2>
				count = 0;
				break;

			default:

				break;
 800286a:	e057      	b.n	800291c <dribble+0x144>
				HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 800286c:	2201      	movs	r2, #1
 800286e:	2102      	movs	r1, #2
 8002870:	4865      	ldr	r0, [pc, #404]	@ (8002a08 <dribble+0x230>)
 8002872:	f003 fcb3 	bl	80061dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 8002876:	2201      	movs	r2, #1
 8002878:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800287c:	4863      	ldr	r0, [pc, #396]	@ (8002a0c <dribble+0x234>)
 800287e:	f003 fcad 	bl	80061dc <HAL_GPIO_WritePin>
				dalay(1000);
 8002882:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002886:	f000 f8d5 	bl	8002a34 <dalay>
				HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2102      	movs	r1, #2
 800288e:	485e      	ldr	r0, [pc, #376]	@ (8002a08 <dribble+0x230>)
 8002890:	f003 fca4 	bl	80061dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800289a:	485c      	ldr	r0, [pc, #368]	@ (8002a0c <dribble+0x234>)
 800289c:	f003 fc9e 	bl	80061dc <HAL_GPIO_WritePin>
				dribble_sp = madhe;
 80028a0:	4b54      	ldr	r3, [pc, #336]	@ (80029f4 <dribble+0x21c>)
 80028a2:	f640 0298 	movw	r2, #2200	@ 0x898
 80028a6:	601a      	str	r2, [r3, #0]
				temp_pot = analogRead_pa4();
 80028a8:	f7ff ff66 	bl	8002778 <analogRead_pa4>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b4d      	ldr	r3, [pc, #308]	@ (80029e8 <dribble+0x210>)
 80028b2:	601a      	str	r2, [r3, #0]
				error_d = dribble_sp - temp_pot;
 80028b4:	4b4f      	ldr	r3, [pc, #316]	@ (80029f4 <dribble+0x21c>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b4b      	ldr	r3, [pc, #300]	@ (80029e8 <dribble+0x210>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	4a4e      	ldr	r2, [pc, #312]	@ (80029f8 <dribble+0x220>)
 80028c0:	6013      	str	r3, [r2, #0]
				count = 1;
 80028c2:	4b50      	ldr	r3, [pc, #320]	@ (8002a04 <dribble+0x22c>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
				break;
 80028c8:	e029      	b.n	800291e <dribble+0x146>
				dribble_sp = khali;
 80028ca:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <dribble+0x21c>)
 80028cc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80028d0:	601a      	str	r2, [r3, #0]
				temp_pot = analogRead_pa4();
 80028d2:	f7ff ff51 	bl	8002778 <analogRead_pa4>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <dribble+0x210>)
 80028dc:	601a      	str	r2, [r3, #0]
				prev_error_pot = 0;
 80028de:	4b4c      	ldr	r3, [pc, #304]	@ (8002a10 <dribble+0x238>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
				error_d = dribble_sp - temp_pot;
 80028e4:	4b43      	ldr	r3, [pc, #268]	@ (80029f4 <dribble+0x21c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b3f      	ldr	r3, [pc, #252]	@ (80029e8 <dribble+0x210>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	4a42      	ldr	r2, [pc, #264]	@ (80029f8 <dribble+0x220>)
 80028f0:	6013      	str	r3, [r2, #0]
				count = 2;
 80028f2:	4b44      	ldr	r3, [pc, #272]	@ (8002a04 <dribble+0x22c>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
				break;
 80028f8:	e011      	b.n	800291e <dribble+0x146>
				dribble_sp = var;
 80028fa:	4b3e      	ldr	r3, [pc, #248]	@ (80029f4 <dribble+0x21c>)
 80028fc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002900:	601a      	str	r2, [r3, #0]
				flag_amkette = true;
 8002902:	4b44      	ldr	r3, [pc, #272]	@ (8002a14 <dribble+0x23c>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
				f_dribble = false;
 8002908:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <dribble+0x214>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
				fOperation = 0;
 800290e:	4b42      	ldr	r3, [pc, #264]	@ (8002a18 <dribble+0x240>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
				count = 0;
 8002914:	4b3b      	ldr	r3, [pc, #236]	@ (8002a04 <dribble+0x22c>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
				break;
 800291a:	e000      	b.n	800291e <dribble+0x146>
				break;
 800291c:	bf00      	nop
			switch (count) {
 800291e:	e056      	b.n	80029ce <dribble+0x1f6>
			}

		} else {
			error_d = abs(error_d);
 8002920:	4b35      	ldr	r3, [pc, #212]	@ (80029f8 <dribble+0x220>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	bfb8      	it	lt
 8002928:	425b      	neglt	r3, r3
 800292a:	4a33      	ldr	r2, [pc, #204]	@ (80029f8 <dribble+0x220>)
 800292c:	6013      	str	r3, [r2, #0]
			if (error_d < 100) {
 800292e:	4b32      	ldr	r3, [pc, #200]	@ (80029f8 <dribble+0x220>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b63      	cmp	r3, #99	@ 0x63
 8002934:	dc07      	bgt.n	8002946 <dribble+0x16e>
				integral_d += error_d;
 8002936:	4b39      	ldr	r3, [pc, #228]	@ (8002a1c <dribble+0x244>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b2f      	ldr	r3, [pc, #188]	@ (80029f8 <dribble+0x220>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a36      	ldr	r2, [pc, #216]	@ (8002a1c <dribble+0x244>)
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	e002      	b.n	800294c <dribble+0x174>
			} else {
				integral_d = 0;
 8002946:	4b35      	ldr	r3, [pc, #212]	@ (8002a1c <dribble+0x244>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
			}
			pwm_dribble = 12000 + (error_d * kp_d)
 800294c:	4b2a      	ldr	r3, [pc, #168]	@ (80029f8 <dribble+0x220>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002958:	4b31      	ldr	r3, [pc, #196]	@ (8002a20 <dribble+0x248>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002962:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002a24 <dribble+0x24c>
 8002966:	ee37 7a87 	vadd.f32	s14, s15, s14
					+ kd_d * (error_d - prev_error_pot) + ki_d * integral_d; // + 0.014 * (error_d - prev_error_pot) + 0.001 * (integral);
 800296a:	4b23      	ldr	r3, [pc, #140]	@ (80029f8 <dribble+0x220>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <dribble+0x238>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <dribble+0x250>)
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	4b24      	ldr	r3, [pc, #144]	@ (8002a1c <dribble+0x244>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002996:	4b25      	ldr	r3, [pc, #148]	@ (8002a2c <dribble+0x254>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a0:	ee77 7a27 	vadd.f32	s15, s14, s15
			pwm_dribble = 12000 + (error_d * kp_d)
 80029a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a8:	ee17 2a90 	vmov	r2, s15
 80029ac:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <dribble+0x258>)
 80029ae:	601a      	str	r2, [r3, #0]
			pwm_dribble = constrain(pwm_dribble, 0, 65535);
 80029b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a30 <dribble+0x258>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fb46 	bl	800104c <constrain>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a30 <dribble+0x258>)
 80029c4:	6013      	str	r3, [r2, #0]
			TIM10->CCR1 = pwm_dribble;
 80029c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <dribble+0x258>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <dribble+0x228>)
 80029cc:	635a      	str	r2, [r3, #52]	@ 0x34
//        analogWrite(pwmpin_d, pwm_dribble);
		}
		prevmillis_d = HAL_GetTick();
 80029ce:	f002 f925 	bl	8004c1c <HAL_GetTick>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a06      	ldr	r2, [pc, #24]	@ (80029f0 <dribble+0x218>)
 80029d6:	6013      	str	r3, [r2, #0]
		prev_error_pot = error_d;
 80029d8:	4b07      	ldr	r3, [pc, #28]	@ (80029f8 <dribble+0x220>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002a10 <dribble+0x238>)
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e000      	b.n	80029e4 <dribble+0x20c>
		return;
 80029e2:	bf00      	nop
	}

}
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000420 	.word	0x20000420
 80029ec:	2000041c 	.word	0x2000041c
 80029f0:	20000428 	.word	0x20000428
 80029f4:	200000e0 	.word	0x200000e0
 80029f8:	20000434 	.word	0x20000434
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40014400 	.word	0x40014400
 8002a04:	2000042c 	.word	0x2000042c
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	2000031c 	.word	0x2000031c
 8002a14:	200000c4 	.word	0x200000c4
 8002a18:	20000418 	.word	0x20000418
 8002a1c:	20000424 	.word	0x20000424
 8002a20:	200000e4 	.word	0x200000e4
 8002a24:	463b8000 	.word	0x463b8000
 8002a28:	200000e8 	.word	0x200000e8
 8002a2c:	200000ec 	.word	0x200000ec
 8002a30:	20000430 	.word	0x20000430

08002a34 <dalay>:
//     }
//     prev_error_pot = error_pot;
//   }
// }

void dalay(int d) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	unsigned long prevmillis1 = HAL_GetTick();
 8002a3c:	f002 f8ee 	bl	8004c1c <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - prevmillis1 <= d) {
 8002a42:	bf00      	nop
 8002a44:	f002 f8ea 	bl	8004c1c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad2      	subs	r2, r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d9f7      	bls.n	8002a44 <dalay+0x10>
		// locomotion();
		// locomote();
		// recievecmd();
		// encoders();
	}
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_TIM_IC_CaptureCallback>:
float z = 0;
int u = 0;
int yaw = 0;
//uint32_t prev=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
//	else if(htim == &htim3)counter_lower= __HAL_TIM_GetCounter(&htim3);
//	else if(htim == &htim4) counter_4= __HAL_TIM_GetCounter(&htim4);
//	else if(htim == &htim5) counter_5= __HAL_TIM_GetCounter(&htim5);
//	else counter_8= __HAL_TIM_GetCounter(&htim8);

}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
//	if (huart == &huart2)
//		HAL_UART_Receive(&huart2, Ar_data, 29,10);
	if (huart == &huart5) {
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a10      	ldr	r2, [pc, #64]	@ (8002ac0 <HAL_UART_RxCpltCallback+0x4c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d105      	bne.n	8002a90 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_DMA(&huart5, rx_data, 20);
 8002a84:	2214      	movs	r2, #20
 8002a86:	490f      	ldr	r1, [pc, #60]	@ (8002ac4 <HAL_UART_RxCpltCallback+0x50>)
 8002a88:	480d      	ldr	r0, [pc, #52]	@ (8002ac0 <HAL_UART_RxCpltCallback+0x4c>)
 8002a8a:	f005 f993 	bl	8007db4 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
	} else if (huart == &huart2) {
		HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
	}

}
 8002a8e:	e012      	b.n	8002ab6 <HAL_UART_RxCpltCallback+0x42>
	} else if (huart == &huart4) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <HAL_UART_RxCpltCallback+0x54>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d105      	bne.n	8002aa4 <HAL_UART_RxCpltCallback+0x30>
		HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
 8002a98:	2203      	movs	r2, #3
 8002a9a:	490c      	ldr	r1, [pc, #48]	@ (8002acc <HAL_UART_RxCpltCallback+0x58>)
 8002a9c:	480a      	ldr	r0, [pc, #40]	@ (8002ac8 <HAL_UART_RxCpltCallback+0x54>)
 8002a9e:	f005 f989 	bl	8007db4 <HAL_UART_Receive_DMA>
}
 8002aa2:	e008      	b.n	8002ab6 <HAL_UART_RxCpltCallback+0x42>
	} else if (huart == &huart2) {
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <HAL_UART_RxCpltCallback+0x5c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d104      	bne.n	8002ab6 <HAL_UART_RxCpltCallback+0x42>
		HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
 8002aac:	221d      	movs	r2, #29
 8002aae:	4909      	ldr	r1, [pc, #36]	@ (8002ad4 <HAL_UART_RxCpltCallback+0x60>)
 8002ab0:	4807      	ldr	r0, [pc, #28]	@ (8002ad0 <HAL_UART_RxCpltCallback+0x5c>)
 8002ab2:	f005 f97f 	bl	8007db4 <HAL_UART_Receive_DMA>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200007b0 	.word	0x200007b0
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000768 	.word	0x20000768
 8002acc:	20000318 	.word	0x20000318
 8002ad0:	200007f8 	.word	0x200007f8
 8002ad4:	200002f8 	.word	0x200002f8

08002ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002adc:	f002 f838 	bl	8004b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae0:	f000 fae6 	bl	80030b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae4:	f000 ffa8 	bl	8003a38 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ae8:	f000 ff5e 	bl	80039a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002aec:	f000 fb4a 	bl	8003184 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002af0:	f000 fbc8 	bl	8003284 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002af4:	f000 fc1e 	bl	8003334 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002af8:	f000 fc96 	bl	8003428 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002afc:	f000 fce8 	bl	80034d0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002b00:	f000 fd3a 	bl	8003578 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002b04:	f000 fd8c 	bl	8003620 <MX_TIM8_Init>
  MX_TIM9_Init();
 8002b08:	f000 fde2 	bl	80036d0 <MX_TIM9_Init>
  MX_TIM12_Init();
 8002b0c:	f000 fe7e 	bl	800380c <MX_TIM12_Init>
  MX_UART4_Init();
 8002b10:	f000 fecc 	bl	80038ac <MX_UART4_Init>
  MX_UART5_Init();
 8002b14:	f000 fef4 	bl	8003900 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8002b18:	f000 ff1c 	bl	8003954 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8002b1c:	f000 fe28 	bl	8003770 <MX_TIM10_Init>
  MX_I2C1_Init();
 8002b20:	f000 fb82 	bl	8003228 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8002b24:	213c      	movs	r1, #60	@ 0x3c
 8002b26:	48c8      	ldr	r0, [pc, #800]	@ (8002e48 <main+0x370>)
 8002b28:	f004 fb5a 	bl	80071e0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002b2c:	213c      	movs	r1, #60	@ 0x3c
 8002b2e:	48c7      	ldr	r0, [pc, #796]	@ (8002e4c <main+0x374>)
 8002b30:	f004 fb56 	bl	80071e0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002b34:	213c      	movs	r1, #60	@ 0x3c
 8002b36:	48c6      	ldr	r0, [pc, #792]	@ (8002e50 <main+0x378>)
 8002b38:	f004 fb52 	bl	80071e0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8002b3c:	213c      	movs	r1, #60	@ 0x3c
 8002b3e:	48c5      	ldr	r0, [pc, #788]	@ (8002e54 <main+0x37c>)
 8002b40:	f004 fb4e 	bl	80071e0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8002b44:	213c      	movs	r1, #60	@ 0x3c
 8002b46:	48c4      	ldr	r0, [pc, #784]	@ (8002e58 <main+0x380>)
 8002b48:	f004 fb4a 	bl	80071e0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	48c3      	ldr	r0, [pc, #780]	@ (8002e5c <main+0x384>)
 8002b50:	f004 f9d8 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002b54:	2104      	movs	r1, #4
 8002b56:	48c1      	ldr	r0, [pc, #772]	@ (8002e5c <main+0x384>)
 8002b58:	f004 f9d4 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	48bf      	ldr	r0, [pc, #764]	@ (8002e5c <main+0x384>)
 8002b60:	f004 f9d0 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002b64:	210c      	movs	r1, #12
 8002b66:	48bd      	ldr	r0, [pc, #756]	@ (8002e5c <main+0x384>)
 8002b68:	f004 f9cc 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	48bc      	ldr	r0, [pc, #752]	@ (8002e60 <main+0x388>)
 8002b70:	f004 f9c8 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8002b74:	2104      	movs	r1, #4
 8002b76:	48ba      	ldr	r0, [pc, #744]	@ (8002e60 <main+0x388>)
 8002b78:	f004 f9c4 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_3);
 8002b7c:	2108      	movs	r1, #8
 8002b7e:	48b8      	ldr	r0, [pc, #736]	@ (8002e60 <main+0x388>)
 8002b80:	f004 f9c0 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002b84:	2100      	movs	r1, #0
 8002b86:	48b7      	ldr	r0, [pc, #732]	@ (8002e64 <main+0x38c>)
 8002b88:	f004 f9bc 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	48b5      	ldr	r0, [pc, #724]	@ (8002e64 <main+0x38c>)
 8002b90:	f004 f9b8 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8002b94:	2100      	movs	r1, #0
 8002b96:	48b4      	ldr	r0, [pc, #720]	@ (8002e68 <main+0x390>)
 8002b98:	f004 f9b4 	bl	8006f04 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_DMA(&huart5, Rx_data, 20);
 8002b9c:	2214      	movs	r2, #20
 8002b9e:	49b3      	ldr	r1, [pc, #716]	@ (8002e6c <main+0x394>)
 8002ba0:	48b3      	ldr	r0, [pc, #716]	@ (8002e70 <main+0x398>)
 8002ba2:	f005 f907 	bl	8007db4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	49b2      	ldr	r1, [pc, #712]	@ (8002e74 <main+0x39c>)
 8002baa:	48b3      	ldr	r0, [pc, #716]	@ (8002e78 <main+0x3a0>)
 8002bac:	f005 f902 	bl	8007db4 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, Ar_data, 29);
 8002bb0:	221d      	movs	r2, #29
 8002bb2:	49b2      	ldr	r1, [pc, #712]	@ (8002e7c <main+0x3a4>)
 8002bb4:	48b2      	ldr	r0, [pc, #712]	@ (8002e80 <main+0x3a8>)
 8002bb6:	f005 f8fd 	bl	8007db4 <HAL_UART_Receive_DMA>
//	bno055_setOperationModeNDOF();
//	if (hi2c1.State != HAL_I2C_STATE_READY) {
//		HAL_I2C_DeInit(&hi2c1);
//		HAL_I2C_Init(&hi2c1);
//	}
	HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	48b1      	ldr	r0, [pc, #708]	@ (8002e84 <main+0x3ac>)
 8002bc0:	f003 fb0c 	bl	80061dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bca:	48af      	ldr	r0, [pc, #700]	@ (8002e88 <main+0x3b0>)
 8002bcc:	f003 fb06 	bl	80061dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bd6:	48ad      	ldr	r0, [pc, #692]	@ (8002e8c <main+0x3b4>)
 8002bd8:	f003 fb00 	bl	80061dc <HAL_GPIO_WritePin>
	dalay(200);
 8002bdc:	20c8      	movs	r0, #200	@ 0xc8
 8002bde:	f7ff ff29 	bl	8002a34 <dalay>
	HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2102      	movs	r1, #2
 8002be6:	48a7      	ldr	r0, [pc, #668]	@ (8002e84 <main+0x3ac>)
 8002be8:	f003 faf8 	bl	80061dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bf2:	48a5      	ldr	r0, [pc, #660]	@ (8002e88 <main+0x3b0>)
 8002bf4:	f003 faf2 	bl	80061dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bfe:	48a3      	ldr	r0, [pc, #652]	@ (8002e8c <main+0x3b4>)
 8002c00:	f003 faec 	bl	80061dc <HAL_GPIO_WritePin>
//		if (HAL_GetTick() - prevviousmillisbno > 80) {
//
//			yaw = (int)v.x;
//			prevviousmillisbno = HAL_GetTick();
//		}
		temp_pot = analogRead_pa4();
 8002c04:	f7ff fdb8 	bl	8002778 <analogRead_pa4>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4ba0      	ldr	r3, [pc, #640]	@ (8002e90 <main+0x3b8>)
 8002c0e:	601a      	str	r2, [r3, #0]

//  		start

//		parseJS(&Rx_data);
//		parseJSAR(&Ar_data);
		Mpuvalueslo(&Mp_data);
 8002c10:	4898      	ldr	r0, [pc, #608]	@ (8002e74 <main+0x39c>)
 8002c12:	f7fe fd79 	bl	8001708 <Mpuvalueslo>
		Arvalueslo(&Ar_data);
 8002c16:	4899      	ldr	r0, [pc, #612]	@ (8002e7c <main+0x3a4>)
 8002c18:	f7fe fd48 	bl	80016ac <Arvalueslo>
		Rxvalueslo(&rx_data);
 8002c1c:	489d      	ldr	r0, [pc, #628]	@ (8002e94 <main+0x3bc>)
 8002c1e:	f7fe fc07 	bl	8001430 <Rxvalueslo>
		dribble();
 8002c22:	f7ff fdd9 	bl	80027d8 <dribble>
		rotors(Rotors_flag);
 8002c26:	4b9c      	ldr	r3, [pc, #624]	@ (8002e98 <main+0x3c0>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fae0 	bl	80011f0 <rotors>

		rpm_cal();
 8002c30:	f7fe fb22 	bl	8001278 <rpm_cal>
//		autolocomote();
		switch (loco) {
 8002c34:	4b99      	ldr	r3, [pc, #612]	@ (8002e9c <main+0x3c4>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3b41      	subs	r3, #65	@ 0x41
 8002c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c3c:	f200 81f7 	bhi.w	800302e <main+0x556>
 8002c40:	a201      	add	r2, pc, #4	@ (adr r2, 8002c48 <main+0x170>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002dbb 	.word	0x08002dbb
 8002c4c:	08002f8d 	.word	0x08002f8d
 8002c50:	0800302f 	.word	0x0800302f
 8002c54:	0800302f 	.word	0x0800302f
 8002c58:	0800302f 	.word	0x0800302f
 8002c5c:	0800302f 	.word	0x0800302f
 8002c60:	0800302f 	.word	0x0800302f
 8002c64:	0800302f 	.word	0x0800302f
 8002c68:	0800302f 	.word	0x0800302f
 8002c6c:	08002f07 	.word	0x08002f07
 8002c70:	08002d23 	.word	0x08002d23
 8002c74:	08003007 	.word	0x08003007
 8002c78:	0800302f 	.word	0x0800302f
 8002c7c:	0800302f 	.word	0x0800302f
 8002c80:	08002d5f 	.word	0x08002d5f
 8002c84:	0800302f 	.word	0x0800302f
 8002c88:	0800302f 	.word	0x0800302f
 8002c8c:	08003025 	.word	0x08003025
 8002c90:	08002fa7 	.word	0x08002fa7
 8002c94:	0800302f 	.word	0x0800302f
 8002c98:	0800302f 	.word	0x0800302f
 8002c9c:	0800302f 	.word	0x0800302f
 8002ca0:	0800302f 	.word	0x0800302f
 8002ca4:	08002f9f 	.word	0x08002f9f
 8002ca8:	08002d7d 	.word	0x08002d7d
 8002cac:	0800302f 	.word	0x0800302f
 8002cb0:	0800302f 	.word	0x0800302f
 8002cb4:	0800302f 	.word	0x0800302f
 8002cb8:	0800302f 	.word	0x0800302f
 8002cbc:	0800302f 	.word	0x0800302f
 8002cc0:	0800302f 	.word	0x0800302f
 8002cc4:	0800302f 	.word	0x0800302f
 8002cc8:	0800302f 	.word	0x0800302f
 8002ccc:	0800302f 	.word	0x0800302f
 8002cd0:	0800302f 	.word	0x0800302f
 8002cd4:	08002eb9 	.word	0x08002eb9
 8002cd8:	08002ee1 	.word	0x08002ee1
 8002cdc:	0800302f 	.word	0x0800302f
 8002ce0:	08002fbd 	.word	0x08002fbd
 8002ce4:	0800302f 	.word	0x0800302f
 8002ce8:	0800302f 	.word	0x0800302f
 8002cec:	0800302f 	.word	0x0800302f
 8002cf0:	08002d05 	.word	0x08002d05
 8002cf4:	0800302f 	.word	0x0800302f
 8002cf8:	0800302f 	.word	0x0800302f
 8002cfc:	0800302f 	.word	0x0800302f
 8002d00:	08002d41 	.word	0x08002d41
		case 'k':
			if (!alignn) {
 8002d04:	4b66      	ldr	r3, [pc, #408]	@ (8002ea0 <main+0x3c8>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	f083 0301 	eor.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <main+0x240>
				alignn = true;
 8002d12:	4b63      	ldr	r3, [pc, #396]	@ (8002ea0 <main+0x3c8>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8002d18:	f7fe ff38 	bl	8001b8c <locomotion>
			locomote();
 8002d1c:	f7ff f8fe 	bl	8001f1c <locomote>
			break;
 8002d20:	e192      	b.n	8003048 <main+0x570>

		case 'K':
			if (!alignn) {
 8002d22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea0 <main+0x3c8>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f083 0301 	eor.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <main+0x25e>
				alignn = true;
 8002d30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea0 <main+0x3c8>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8002d36:	f7fe ff29 	bl	8001b8c <locomotion>
			locomote();
 8002d3a:	f7ff f8ef 	bl	8001f1c <locomote>
			break;
 8002d3e:	e183      	b.n	8003048 <main+0x570>
//				HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 1);
//				dalay(1000);
//				HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 0);
//				break;
		case 'o':
			if (!alignn) {
 8002d40:	4b57      	ldr	r3, [pc, #348]	@ (8002ea0 <main+0x3c8>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <main+0x27c>
				alignn = true;
 8002d4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ea0 <main+0x3c8>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8002d54:	f7fe ff1a 	bl	8001b8c <locomotion>
			locomote();
 8002d58:	f7ff f8e0 	bl	8001f1c <locomote>
			break;
 8002d5c:	e174      	b.n	8003048 <main+0x570>
		case 'O':
			if (!alignn) {
 8002d5e:	4b50      	ldr	r3, [pc, #320]	@ (8002ea0 <main+0x3c8>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	f083 0301 	eor.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <main+0x29a>
				alignn = true;
 8002d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea0 <main+0x3c8>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
			}
//			if (autoloco) {
//				autoloco = false;
//			}
			locomotion();
 8002d72:	f7fe ff0b 	bl	8001b8c <locomotion>
			locomote();
 8002d76:	f7ff f8d1 	bl	8001f1c <locomote>
			break;
 8002d7a:	e165      	b.n	8003048 <main+0x570>
		case 'Y':
			if (!alignn) {
 8002d7c:	4b48      	ldr	r3, [pc, #288]	@ (8002ea0 <main+0x3c8>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	f083 0301 	eor.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <main+0x2b8>
				alignn = true;
 8002d8a:	4b45      	ldr	r3, [pc, #276]	@ (8002ea0 <main+0x3c8>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
			}

			if (flag_amkette) {
 8002d90:	4b44      	ldr	r3, [pc, #272]	@ (8002ea4 <main+0x3cc>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8152 	beq.w	800303e <main+0x566>
				if (autoloco) {
 8002d9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ea8 <main+0x3d0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <main+0x2d0>
					autoloco = false;
 8002da2:	4b41      	ldr	r3, [pc, #260]	@ (8002ea8 <main+0x3d0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
				}
				feed();
 8002da8:	f7fe fa3e 	bl	8001228 <feed>
				isthreepointer = 0;
 8002dac:	4b3f      	ldr	r3, [pc, #252]	@ (8002eac <main+0x3d4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
				flag_amkette = false;
 8002db2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea4 <main+0x3cc>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002db8:	e141      	b.n	800303e <main+0x566>
		case 'A':
			if (!alignn) {
 8002dba:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <main+0x3c8>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	f083 0301 	eor.w	r3, r3, #1
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <main+0x2f6>
				alignn = true;
 8002dc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ea0 <main+0x3c8>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
			}
			if (flag_amkette) {
 8002dce:	4b35      	ldr	r3, [pc, #212]	@ (8002ea4 <main+0x3cc>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8135 	beq.w	8003042 <main+0x56a>
				if (fOperation == 0) {
 8002dd8:	4b35      	ldr	r3, [pc, #212]	@ (8002eb0 <main+0x3d8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d12e      	bne.n	8002e3e <main+0x366>
					if (autoloco) {
 8002de0:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <main+0x3d0>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <main+0x316>
						autoloco = false;
 8002de8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea8 <main+0x3d0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
					}
					f_dribble = true;
 8002dee:	4b31      	ldr	r3, [pc, #196]	@ (8002eb4 <main+0x3dc>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 1);
 8002df4:	2201      	movs	r2, #1
 8002df6:	2108      	movs	r1, #8
 8002df8:	4822      	ldr	r0, [pc, #136]	@ (8002e84 <main+0x3ac>)
 8002dfa:	f003 f9ef 	bl	80061dc <HAL_GPIO_WritePin>
					dalay(600);
 8002dfe:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002e02:	f7ff fe17 	bl	8002a34 <dalay>
					HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2108      	movs	r1, #8
 8002e0a:	481e      	ldr	r0, [pc, #120]	@ (8002e84 <main+0x3ac>)
 8002e0c:	f003 f9e6 	bl	80061dc <HAL_GPIO_WritePin>
					dalay(600);
 8002e10:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8002e14:	f7ff fe0e 	bl	8002a34 <dalay>
					HAL_GPIO_WritePin(extendUpper_Port, extendUpper_Pin, 1);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e1e:	481b      	ldr	r0, [pc, #108]	@ (8002e8c <main+0x3b4>)
 8002e20:	f003 f9dc 	bl	80061dc <HAL_GPIO_WritePin>
					dalay(150);
 8002e24:	2096      	movs	r0, #150	@ 0x96
 8002e26:	f7ff fe05 	bl	8002a34 <dalay>
					HAL_GPIO_WritePin(extendUpper_Port, extendUpper_Pin, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e30:	4816      	ldr	r0, [pc, #88]	@ (8002e8c <main+0x3b4>)
 8002e32:	f003 f9d3 	bl	80061dc <HAL_GPIO_WritePin>
					dalay(500);
 8002e36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e3a:	f7ff fdfb 	bl	8002a34 <dalay>
				}
				flag_amkette = false;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <main+0x3cc>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e44:	e0fd      	b.n	8003042 <main+0x56a>
 8002e46:	bf00      	nop
 8002e48:	2000043c 	.word	0x2000043c
 8002e4c:	20000484 	.word	0x20000484
 8002e50:	200004cc 	.word	0x200004cc
 8002e54:	20000514 	.word	0x20000514
 8002e58:	2000055c 	.word	0x2000055c
 8002e5c:	20000648 	.word	0x20000648
 8002e60:	20000690 	.word	0x20000690
 8002e64:	20000720 	.word	0x20000720
 8002e68:	200006d8 	.word	0x200006d8
 8002e6c:	200002e4 	.word	0x200002e4
 8002e70:	200007b0 	.word	0x200007b0
 8002e74:	20000318 	.word	0x20000318
 8002e78:	20000768 	.word	0x20000768
 8002e7c:	200002f8 	.word	0x200002f8
 8002e80:	200007f8 	.word	0x200007f8
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	20000420 	.word	0x20000420
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000414 	.word	0x20000414
 8002e9c:	200000b8 	.word	0x200000b8
 8002ea0:	20000094 	.word	0x20000094
 8002ea4:	200000c4 	.word	0x200000c4
 8002ea8:	2000031b 	.word	0x2000031b
 8002eac:	200000cc 	.word	0x200000cc
 8002eb0:	20000418 	.word	0x20000418
 8002eb4:	2000041c 	.word	0x2000041c

		case 'd':
//			if (autoloco) {
//				autoloco = false;
//			}
			isthreepointer = 1;
 8002eb8:	4b64      	ldr	r3, [pc, #400]	@ (800304c <main+0x574>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
			Rotors_flag = 1;
 8002ebe:	4b64      	ldr	r3, [pc, #400]	@ (8003050 <main+0x578>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
			kdLower = 0.05;
 8002ec4:	4b63      	ldr	r3, [pc, #396]	@ (8003054 <main+0x57c>)
 8002ec6:	4a64      	ldr	r2, [pc, #400]	@ (8003058 <main+0x580>)
 8002ec8:	601a      	str	r2, [r3, #0]
			kdUpper = 0.033;
 8002eca:	4b64      	ldr	r3, [pc, #400]	@ (800305c <main+0x584>)
 8002ecc:	4a64      	ldr	r2, [pc, #400]	@ (8003060 <main+0x588>)
 8002ece:	601a      	str	r2, [r3, #0]
			kpLower = 0.25;
 8002ed0:	4b64      	ldr	r3, [pc, #400]	@ (8003064 <main+0x58c>)
 8002ed2:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8002ed6:	601a      	str	r2, [r3, #0]
			kpUpper = 0.2;
 8002ed8:	4b63      	ldr	r3, [pc, #396]	@ (8003068 <main+0x590>)
 8002eda:	4a64      	ldr	r2, [pc, #400]	@ (800306c <main+0x594>)
 8002edc:	601a      	str	r2, [r3, #0]
			break;
 8002ede:	e0b3      	b.n	8003048 <main+0x570>
		case 'e':
//			if (autoloco) {
//				autoloco = false;
//			}
			isthreepointer = 0;
 8002ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800304c <main+0x574>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
			Rotors_flag = 1;
 8002ee6:	4b5a      	ldr	r3, [pc, #360]	@ (8003050 <main+0x578>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
			kdLower = 0.05;
 8002eec:	4b59      	ldr	r3, [pc, #356]	@ (8003054 <main+0x57c>)
 8002eee:	4a5a      	ldr	r2, [pc, #360]	@ (8003058 <main+0x580>)
 8002ef0:	601a      	str	r2, [r3, #0]
			kdUpper = 0.033;
 8002ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800305c <main+0x584>)
 8002ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8003060 <main+0x588>)
 8002ef6:	601a      	str	r2, [r3, #0]
			kpLower = 0.55;
 8002ef8:	4b5a      	ldr	r3, [pc, #360]	@ (8003064 <main+0x58c>)
 8002efa:	4a5d      	ldr	r2, [pc, #372]	@ (8003070 <main+0x598>)
 8002efc:	601a      	str	r2, [r3, #0]
			kpUpper = 0.6;
 8002efe:	4b5a      	ldr	r3, [pc, #360]	@ (8003068 <main+0x590>)
 8002f00:	4a5c      	ldr	r2, [pc, #368]	@ (8003074 <main+0x59c>)
 8002f02:	601a      	str	r2, [r3, #0]
			break;
 8002f04:	e0a0      	b.n	8003048 <main+0x570>

		case 'J':
			if (!alignn) {
 8002f06:	4b5c      	ldr	r3, [pc, #368]	@ (8003078 <main+0x5a0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	f083 0301 	eor.w	r3, r3, #1
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <main+0x442>
				alignn = true;
 8002f14:	4b58      	ldr	r3, [pc, #352]	@ (8003078 <main+0x5a0>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
			}
			Rotors_flag = 0;
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003050 <main+0x578>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 8002f20:	2201      	movs	r2, #1
 8002f22:	2102      	movs	r1, #2
 8002f24:	4855      	ldr	r0, [pc, #340]	@ (800307c <main+0x5a4>)
 8002f26:	f003 f959 	bl	80061dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f30:	4853      	ldr	r0, [pc, #332]	@ (8003080 <main+0x5a8>)
 8002f32:	f003 f953 	bl	80061dc <HAL_GPIO_WritePin>
			dalay(150);
 8002f36:	2096      	movs	r0, #150	@ 0x96
 8002f38:	f7ff fd7c 	bl	8002a34 <dalay>
			HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2102      	movs	r1, #2
 8002f40:	484e      	ldr	r0, [pc, #312]	@ (800307c <main+0x5a4>)
 8002f42:	f003 f94b 	bl	80061dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f4c:	484c      	ldr	r0, [pc, #304]	@ (8003080 <main+0x5a8>)
 8002f4e:	f003 f945 	bl	80061dc <HAL_GPIO_WritePin>
			Rpm_set_lower = 0;
 8002f52:	4b4c      	ldr	r3, [pc, #304]	@ (8003084 <main+0x5ac>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
			Rpm_set_upper = 0;
 8002f58:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <main+0x5b0>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
			kdLower = 0;
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003054 <main+0x57c>)
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
			kdUpper = 0;
 8002f66:	4b3d      	ldr	r3, [pc, #244]	@ (800305c <main+0x584>)
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
			kpLower = 0.0;
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <main+0x58c>)
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
			kpUpper = 0.0;
 8002f76:	4b3c      	ldr	r3, [pc, #240]	@ (8003068 <main+0x590>)
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
			baseLower = 0;
 8002f7e:	4b43      	ldr	r3, [pc, #268]	@ (800308c <main+0x5b4>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
			baseUpper = 0;
 8002f84:	4b42      	ldr	r3, [pc, #264]	@ (8003090 <main+0x5b8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
			break;
 8002f8a:	e05d      	b.n	8003048 <main+0x570>
		case 'B':
			if (autoloco) {
 8002f8c:	4b41      	ldr	r3, [pc, #260]	@ (8003094 <main+0x5bc>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <main+0x4c2>
				autoloco = false;
 8002f94:	4b3f      	ldr	r3, [pc, #252]	@ (8003094 <main+0x5bc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
			}
			NVIC_SystemReset();
 8002f9a:	f7fe f841 	bl	8001020 <__NVIC_SystemReset>
			break;
		case 'X':
			autoloco = true;
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003094 <main+0x5bc>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
			break;
 8002fa4:	e050      	b.n	8003048 <main+0x570>
		case 'S':
			nexts = true;
 8002fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8003098 <main+0x5c0>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
			flag_amkette = true;
 8002fac:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <main+0x5c4>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
			locomotion();
 8002fb2:	f7fe fdeb 	bl	8001b8c <locomotion>
			locomote();
 8002fb6:	f7fe ffb1 	bl	8001f1c <locomote>

			break;
 8002fba:	e045      	b.n	8003048 <main+0x570>
		case 'g':
			if (nexts) {
 8002fbc:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <main+0x5c0>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d040      	beq.n	8003046 <main+0x56e>
				if (alpha == 0) {
 8002fc4:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <main+0x5c8>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d103      	bne.n	8002fdc <main+0x504>
					alignvalue = 180;
 8002fd4:	4b33      	ldr	r3, [pc, #204]	@ (80030a4 <main+0x5cc>)
 8002fd6:	4a34      	ldr	r2, [pc, #208]	@ (80030a8 <main+0x5d0>)
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e00d      	b.n	8002ff8 <main+0x520>
				} else {
					alignvalue = Z_Val + alpha;
 8002fdc:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <main+0x5d4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80030a0 <main+0x5c8>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80030a4 <main+0x5cc>)
 8002ff4:	edc3 7a00 	vstr	s15, [r3]
				}
				alignn = false;
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8003078 <main+0x5a0>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
				nexts = false;
 8002ffe:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <main+0x5c0>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003004:	e01f      	b.n	8003046 <main+0x56e>

		case 'L':
			if (!alignn) {
 8003006:	4b1c      	ldr	r3, [pc, #112]	@ (8003078 <main+0x5a0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f083 0301 	eor.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <main+0x542>
				alignn = true;
 8003014:	4b18      	ldr	r3, [pc, #96]	@ (8003078 <main+0x5a0>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
			}
			locomotion();
 800301a:	f7fe fdb7 	bl	8001b8c <locomotion>
			locomote();
 800301e:	f7fe ff7d 	bl	8001f1c <locomote>
			break;
 8003022:	e011      	b.n	8003048 <main+0x570>
		case 'R':

			locomotion();
 8003024:	f7fe fdb2 	bl	8001b8c <locomotion>
			locomote();
 8003028:	f7fe ff78 	bl	8001f1c <locomote>
			break;
 800302c:	e00c      	b.n	8003048 <main+0x570>
//			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
//			HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
			break;

		default:
			flag_amkette = true;
 800302e:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <main+0x5c4>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
			locomotion();
 8003034:	f7fe fdaa 	bl	8001b8c <locomotion>
			locomote();
 8003038:	f7fe ff70 	bl	8001f1c <locomote>

			break;
 800303c:	e004      	b.n	8003048 <main+0x570>
			break;
 800303e:	bf00      	nop
 8003040:	e5e0      	b.n	8002c04 <main+0x12c>
			break;
 8003042:	bf00      	nop
 8003044:	e5de      	b.n	8002c04 <main+0x12c>
			break;
 8003046:	bf00      	nop
		temp_pot = analogRead_pa4();
 8003048:	e5dc      	b.n	8002c04 <main+0x12c>
 800304a:	bf00      	nop
 800304c:	200000cc 	.word	0x200000cc
 8003050:	20000414 	.word	0x20000414
 8003054:	20000400 	.word	0x20000400
 8003058:	3d4ccccd 	.word	0x3d4ccccd
 800305c:	20000404 	.word	0x20000404
 8003060:	3d072b02 	.word	0x3d072b02
 8003064:	200000bc 	.word	0x200000bc
 8003068:	200000c0 	.word	0x200000c0
 800306c:	3e4ccccd 	.word	0x3e4ccccd
 8003070:	3f0ccccd 	.word	0x3f0ccccd
 8003074:	3f19999a 	.word	0x3f19999a
 8003078:	20000094 	.word	0x20000094
 800307c:	40020c00 	.word	0x40020c00
 8003080:	40020800 	.word	0x40020800
 8003084:	200003f8 	.word	0x200003f8
 8003088:	200003fc 	.word	0x200003fc
 800308c:	20000408 	.word	0x20000408
 8003090:	2000040c 	.word	0x2000040c
 8003094:	2000031b 	.word	0x2000031b
 8003098:	2000035c 	.word	0x2000035c
 800309c:	200000c4 	.word	0x200000c4
 80030a0:	20000320 	.word	0x20000320
 80030a4:	20000358 	.word	0x20000358
 80030a8:	43340000 	.word	0x43340000
 80030ac:	20000388 	.word	0x20000388

080030b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b094      	sub	sp, #80	@ 0x50
 80030b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b6:	f107 0320 	add.w	r3, r7, #32
 80030ba:	2230      	movs	r2, #48	@ 0x30
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f007 fa9a 	bl	800a5f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	4b28      	ldr	r3, [pc, #160]	@ (800317c <SystemClock_Config+0xcc>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	4a27      	ldr	r2, [pc, #156]	@ (800317c <SystemClock_Config+0xcc>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <SystemClock_Config+0xcc>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f0:	2300      	movs	r3, #0
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <SystemClock_Config+0xd0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a21      	ldr	r2, [pc, #132]	@ (8003180 <SystemClock_Config+0xd0>)
 80030fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <SystemClock_Config+0xd0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800310c:	2302      	movs	r3, #2
 800310e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003110:	2301      	movs	r3, #1
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003114:	2310      	movs	r3, #16
 8003116:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003118:	2302      	movs	r3, #2
 800311a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800311c:	2300      	movs	r3, #0
 800311e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003120:	2308      	movs	r3, #8
 8003122:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003124:	23a8      	movs	r3, #168	@ 0xa8
 8003126:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003128:	2302      	movs	r3, #2
 800312a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800312c:	2307      	movs	r3, #7
 800312e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003130:	f107 0320 	add.w	r3, r7, #32
 8003134:	4618      	mov	r0, r3
 8003136:	f003 f9af 	bl	8006498 <HAL_RCC_OscConfig>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003140:	f000 fd42 	bl	8003bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003144:	230f      	movs	r3, #15
 8003146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003148:	2302      	movs	r3, #2
 800314a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003150:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003156:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800315a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	2105      	movs	r1, #5
 8003162:	4618      	mov	r0, r3
 8003164:	f003 fc10 	bl	8006988 <HAL_RCC_ClockConfig>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800316e:	f000 fd2b 	bl	8003bc8 <Error_Handler>
  }
}
 8003172:	bf00      	nop
 8003174:	3750      	adds	r7, #80	@ 0x50
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	40007000 	.word	0x40007000

08003184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800318a:	463b      	mov	r3, r7
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003196:	4b21      	ldr	r3, [pc, #132]	@ (800321c <MX_ADC1_Init+0x98>)
 8003198:	4a21      	ldr	r2, [pc, #132]	@ (8003220 <MX_ADC1_Init+0x9c>)
 800319a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800319c:	4b1f      	ldr	r3, [pc, #124]	@ (800321c <MX_ADC1_Init+0x98>)
 800319e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <MX_ADC1_Init+0x98>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	@ (800321c <MX_ADC1_Init+0x98>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <MX_ADC1_Init+0x98>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031b6:	4b19      	ldr	r3, [pc, #100]	@ (800321c <MX_ADC1_Init+0x98>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031be:	4b17      	ldr	r3, [pc, #92]	@ (800321c <MX_ADC1_Init+0x98>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031c4:	4b15      	ldr	r3, [pc, #84]	@ (800321c <MX_ADC1_Init+0x98>)
 80031c6:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <MX_ADC1_Init+0xa0>)
 80031c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031ca:	4b14      	ldr	r3, [pc, #80]	@ (800321c <MX_ADC1_Init+0x98>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031d0:	4b12      	ldr	r3, [pc, #72]	@ (800321c <MX_ADC1_Init+0x98>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031d6:	4b11      	ldr	r3, [pc, #68]	@ (800321c <MX_ADC1_Init+0x98>)
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031de:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <MX_ADC1_Init+0x98>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031e4:	480d      	ldr	r0, [pc, #52]	@ (800321c <MX_ADC1_Init+0x98>)
 80031e6:	f001 fd49 	bl	8004c7c <HAL_ADC_Init>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031f0:	f000 fcea 	bl	8003bc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80031f4:	2304      	movs	r3, #4
 80031f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003200:	463b      	mov	r3, r7
 8003202:	4619      	mov	r1, r3
 8003204:	4805      	ldr	r0, [pc, #20]	@ (800321c <MX_ADC1_Init+0x98>)
 8003206:	f001 ff1b 	bl	8005040 <HAL_ADC_ConfigChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003210:	f000 fcda 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200005ac 	.word	0x200005ac
 8003220:	40012000 	.word	0x40012000
 8003224:	0f000001 	.word	0x0f000001

08003228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800322c:	4b12      	ldr	r3, [pc, #72]	@ (8003278 <MX_I2C1_Init+0x50>)
 800322e:	4a13      	ldr	r2, [pc, #76]	@ (800327c <MX_I2C1_Init+0x54>)
 8003230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003232:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <MX_I2C1_Init+0x50>)
 8003234:	4a12      	ldr	r2, [pc, #72]	@ (8003280 <MX_I2C1_Init+0x58>)
 8003236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003238:	4b0f      	ldr	r3, [pc, #60]	@ (8003278 <MX_I2C1_Init+0x50>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <MX_I2C1_Init+0x50>)
 8003240:	2200      	movs	r2, #0
 8003242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003244:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <MX_I2C1_Init+0x50>)
 8003246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800324a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800324c:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <MX_I2C1_Init+0x50>)
 800324e:	2200      	movs	r2, #0
 8003250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003252:	4b09      	ldr	r3, [pc, #36]	@ (8003278 <MX_I2C1_Init+0x50>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003258:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <MX_I2C1_Init+0x50>)
 800325a:	2200      	movs	r2, #0
 800325c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <MX_I2C1_Init+0x50>)
 8003260:	2200      	movs	r2, #0
 8003262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003264:	4804      	ldr	r0, [pc, #16]	@ (8003278 <MX_I2C1_Init+0x50>)
 8003266:	f002 ffd3 	bl	8006210 <HAL_I2C_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003270:	f000 fcaa 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200005f4 	.word	0x200005f4
 800327c:	40005400 	.word	0x40005400
 8003280:	000186a0 	.word	0x000186a0

08003284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	@ 0x30
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800328a:	f107 030c 	add.w	r3, r7, #12
 800328e:	2224      	movs	r2, #36	@ 0x24
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f007 f9b0 	bl	800a5f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032a0:	4b22      	ldr	r3, [pc, #136]	@ (800332c <MX_TIM1_Init+0xa8>)
 80032a2:	4a23      	ldr	r2, [pc, #140]	@ (8003330 <MX_TIM1_Init+0xac>)
 80032a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80032a6:	4b21      	ldr	r3, [pc, #132]	@ (800332c <MX_TIM1_Init+0xa8>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ac:	4b1f      	ldr	r3, [pc, #124]	@ (800332c <MX_TIM1_Init+0xa8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80032b2:	4b1e      	ldr	r3, [pc, #120]	@ (800332c <MX_TIM1_Init+0xa8>)
 80032b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ba:	4b1c      	ldr	r3, [pc, #112]	@ (800332c <MX_TIM1_Init+0xa8>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032c0:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <MX_TIM1_Init+0xa8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c6:	4b19      	ldr	r3, [pc, #100]	@ (800332c <MX_TIM1_Init+0xa8>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032cc:	2303      	movs	r3, #3
 80032ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80032d0:	2302      	movs	r3, #2
 80032d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80032dc:	230a      	movs	r3, #10
 80032de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80032e0:	2302      	movs	r3, #2
 80032e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032e4:	2301      	movs	r3, #1
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80032ec:	230a      	movs	r3, #10
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	4619      	mov	r1, r3
 80032f6:	480d      	ldr	r0, [pc, #52]	@ (800332c <MX_TIM1_Init+0xa8>)
 80032f8:	f003 fecc 	bl	8007094 <HAL_TIM_Encoder_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003302:	f000 fc61 	bl	8003bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4806      	ldr	r0, [pc, #24]	@ (800332c <MX_TIM1_Init+0xa8>)
 8003314:	f004 fc6e 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800331e:	f000 fc53 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003322:	bf00      	nop
 8003324:	3730      	adds	r7, #48	@ 0x30
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000043c 	.word	0x2000043c
 8003330:	40010000 	.word	0x40010000

08003334 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	@ 0x28
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800333a:	f107 0320 	add.w	r3, r7, #32
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	615a      	str	r2, [r3, #20]
 8003354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003356:	4b33      	ldr	r3, [pc, #204]	@ (8003424 <MX_TIM2_Init+0xf0>)
 8003358:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800335c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800335e:	4b31      	ldr	r3, [pc, #196]	@ (8003424 <MX_TIM2_Init+0xf0>)
 8003360:	2200      	movs	r2, #0
 8003362:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003364:	4b2f      	ldr	r3, [pc, #188]	@ (8003424 <MX_TIM2_Init+0xf0>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800336a:	4b2e      	ldr	r3, [pc, #184]	@ (8003424 <MX_TIM2_Init+0xf0>)
 800336c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003370:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003372:	4b2c      	ldr	r3, [pc, #176]	@ (8003424 <MX_TIM2_Init+0xf0>)
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003378:	4b2a      	ldr	r3, [pc, #168]	@ (8003424 <MX_TIM2_Init+0xf0>)
 800337a:	2200      	movs	r2, #0
 800337c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800337e:	4829      	ldr	r0, [pc, #164]	@ (8003424 <MX_TIM2_Init+0xf0>)
 8003380:	f003 fd71 	bl	8006e66 <HAL_TIM_PWM_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800338a:	f000 fc1d 	bl	8003bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003396:	f107 0320 	add.w	r3, r7, #32
 800339a:	4619      	mov	r1, r3
 800339c:	4821      	ldr	r0, [pc, #132]	@ (8003424 <MX_TIM2_Init+0xf0>)
 800339e:	f004 fc29 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80033a8:	f000 fc0e 	bl	8003bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ac:	2360      	movs	r3, #96	@ 0x60
 80033ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80033b8:	2304      	movs	r3, #4
 80033ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	2200      	movs	r2, #0
 80033c0:	4619      	mov	r1, r3
 80033c2:	4818      	ldr	r0, [pc, #96]	@ (8003424 <MX_TIM2_Init+0xf0>)
 80033c4:	f004 f8aa 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80033ce:	f000 fbfb 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	2204      	movs	r2, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4812      	ldr	r0, [pc, #72]	@ (8003424 <MX_TIM2_Init+0xf0>)
 80033da:	f004 f89f 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80033e4:	f000 fbf0 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	2208      	movs	r2, #8
 80033ec:	4619      	mov	r1, r3
 80033ee:	480d      	ldr	r0, [pc, #52]	@ (8003424 <MX_TIM2_Init+0xf0>)
 80033f0:	f004 f894 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80033fa:	f000 fbe5 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	220c      	movs	r2, #12
 8003402:	4619      	mov	r1, r3
 8003404:	4807      	ldr	r0, [pc, #28]	@ (8003424 <MX_TIM2_Init+0xf0>)
 8003406:	f004 f889 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8003410:	f000 fbda 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003414:	4803      	ldr	r0, [pc, #12]	@ (8003424 <MX_TIM2_Init+0xf0>)
 8003416:	f000 fea7 	bl	8004168 <HAL_TIM_MspPostInit>

}
 800341a:	bf00      	nop
 800341c:	3728      	adds	r7, #40	@ 0x28
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000648 	.word	0x20000648

08003428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	@ 0x30
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	2224      	movs	r2, #36	@ 0x24
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f007 f8de 	bl	800a5f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003444:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <MX_TIM3_Init+0xa0>)
 8003446:	4a21      	ldr	r2, [pc, #132]	@ (80034cc <MX_TIM3_Init+0xa4>)
 8003448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800344a:	4b1f      	ldr	r3, [pc, #124]	@ (80034c8 <MX_TIM3_Init+0xa0>)
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003450:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <MX_TIM3_Init+0xa0>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003456:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <MX_TIM3_Init+0xa0>)
 8003458:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800345c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800345e:	4b1a      	ldr	r3, [pc, #104]	@ (80034c8 <MX_TIM3_Init+0xa0>)
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003464:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <MX_TIM3_Init+0xa0>)
 8003466:	2200      	movs	r2, #0
 8003468:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800346a:	2303      	movs	r3, #3
 800346c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800346e:	2302      	movs	r3, #2
 8003470:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003472:	2301      	movs	r3, #1
 8003474:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800347e:	2302      	movs	r3, #2
 8003480:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003482:	2301      	movs	r3, #1
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003486:	2300      	movs	r3, #0
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	4619      	mov	r1, r3
 8003494:	480c      	ldr	r0, [pc, #48]	@ (80034c8 <MX_TIM3_Init+0xa0>)
 8003496:	f003 fdfd 	bl	8007094 <HAL_TIM_Encoder_Init>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80034a0:	f000 fb92 	bl	8003bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	4805      	ldr	r0, [pc, #20]	@ (80034c8 <MX_TIM3_Init+0xa0>)
 80034b2:	f004 fb9f 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80034bc:	f000 fb84 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80034c0:	bf00      	nop
 80034c2:	3730      	adds	r7, #48	@ 0x30
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000484 	.word	0x20000484
 80034cc:	40000400 	.word	0x40000400

080034d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08c      	sub	sp, #48	@ 0x30
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	2224      	movs	r2, #36	@ 0x24
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f007 f88a 	bl	800a5f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034ec:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <MX_TIM4_Init+0xa0>)
 80034ee:	4a21      	ldr	r2, [pc, #132]	@ (8003574 <MX_TIM4_Init+0xa4>)
 80034f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80034f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003570 <MX_TIM4_Init+0xa0>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <MX_TIM4_Init+0xa0>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003570 <MX_TIM4_Init+0xa0>)
 8003500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003504:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003506:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <MX_TIM4_Init+0xa0>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800350c:	4b18      	ldr	r3, [pc, #96]	@ (8003570 <MX_TIM4_Init+0xa0>)
 800350e:	2200      	movs	r2, #0
 8003510:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003512:	2303      	movs	r3, #3
 8003514:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003516:	2302      	movs	r3, #2
 8003518:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003522:	230a      	movs	r3, #10
 8003524:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003526:	2302      	movs	r3, #2
 8003528:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800352a:	2301      	movs	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800352e:	2300      	movs	r3, #0
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003532:	230a      	movs	r3, #10
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	4619      	mov	r1, r3
 800353c:	480c      	ldr	r0, [pc, #48]	@ (8003570 <MX_TIM4_Init+0xa0>)
 800353e:	f003 fda9 	bl	8007094 <HAL_TIM_Encoder_Init>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003548:	f000 fb3e 	bl	8003bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800354c:	2300      	movs	r3, #0
 800354e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	4619      	mov	r1, r3
 8003558:	4805      	ldr	r0, [pc, #20]	@ (8003570 <MX_TIM4_Init+0xa0>)
 800355a:	f004 fb4b 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003564:	f000 fb30 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003568:	bf00      	nop
 800356a:	3730      	adds	r7, #48	@ 0x30
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200004cc 	.word	0x200004cc
 8003574:	40000800 	.word	0x40000800

08003578 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	@ 0x30
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800357e:	f107 030c 	add.w	r3, r7, #12
 8003582:	2224      	movs	r2, #36	@ 0x24
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f007 f836 	bl	800a5f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003594:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <MX_TIM5_Init+0xa0>)
 8003596:	4a21      	ldr	r2, [pc, #132]	@ (800361c <MX_TIM5_Init+0xa4>)
 8003598:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800359a:	4b1f      	ldr	r3, [pc, #124]	@ (8003618 <MX_TIM5_Init+0xa0>)
 800359c:	2200      	movs	r2, #0
 800359e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <MX_TIM5_Init+0xa0>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80035a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003618 <MX_TIM5_Init+0xa0>)
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <MX_TIM5_Init+0xa0>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b4:	4b18      	ldr	r3, [pc, #96]	@ (8003618 <MX_TIM5_Init+0xa0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035ba:	2303      	movs	r3, #3
 80035bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80035be:	2302      	movs	r3, #2
 80035c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035c2:	2301      	movs	r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80035ca:	230a      	movs	r3, #10
 80035cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80035ce:	2302      	movs	r3, #2
 80035d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035d2:	2301      	movs	r3, #1
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80035da:	230a      	movs	r3, #10
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80035de:	f107 030c 	add.w	r3, r7, #12
 80035e2:	4619      	mov	r1, r3
 80035e4:	480c      	ldr	r0, [pc, #48]	@ (8003618 <MX_TIM5_Init+0xa0>)
 80035e6:	f003 fd55 	bl	8007094 <HAL_TIM_Encoder_Init>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80035f0:	f000 faea 	bl	8003bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	4805      	ldr	r0, [pc, #20]	@ (8003618 <MX_TIM5_Init+0xa0>)
 8003602:	f004 faf7 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800360c:	f000 fadc 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003610:	bf00      	nop
 8003612:	3730      	adds	r7, #48	@ 0x30
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000514 	.word	0x20000514
 800361c:	40000c00 	.word	0x40000c00

08003620 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	@ 0x30
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003626:	f107 030c 	add.w	r3, r7, #12
 800362a:	2224      	movs	r2, #36	@ 0x24
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f006 ffe2 	bl	800a5f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800363c:	4b22      	ldr	r3, [pc, #136]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 800363e:	4a23      	ldr	r2, [pc, #140]	@ (80036cc <MX_TIM8_Init+0xac>)
 8003640:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003642:	4b21      	ldr	r3, [pc, #132]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 8003644:	2200      	movs	r2, #0
 8003646:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003648:	4b1f      	ldr	r3, [pc, #124]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800364e:	4b1e      	ldr	r3, [pc, #120]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 8003650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003654:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003656:	4b1c      	ldr	r3, [pc, #112]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800365c:	4b1a      	ldr	r3, [pc, #104]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003662:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003668:	2303      	movs	r3, #3
 800366a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800366c:	2302      	movs	r3, #2
 800366e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003670:	2301      	movs	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003678:	230a      	movs	r3, #10
 800367a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800367c:	2302      	movs	r3, #2
 800367e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003680:	2301      	movs	r3, #1
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003684:	2300      	movs	r3, #0
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8003688:	230a      	movs	r3, #10
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	4619      	mov	r1, r3
 8003692:	480d      	ldr	r0, [pc, #52]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 8003694:	f003 fcfe 	bl	8007094 <HAL_TIM_Encoder_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800369e:	f000 fa93 	bl	8003bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4806      	ldr	r0, [pc, #24]	@ (80036c8 <MX_TIM8_Init+0xa8>)
 80036b0:	f004 faa0 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80036ba:	f000 fa85 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80036be:	bf00      	nop
 80036c0:	3730      	adds	r7, #48	@ 0x30
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	2000055c 	.word	0x2000055c
 80036cc:	40010400 	.word	0x40010400

080036d0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
 80036e4:	615a      	str	r2, [r3, #20]
 80036e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80036e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003768 <MX_TIM9_Init+0x98>)
 80036ea:	4a20      	ldr	r2, [pc, #128]	@ (800376c <MX_TIM9_Init+0x9c>)
 80036ec:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80036ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003768 <MX_TIM9_Init+0x98>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003768 <MX_TIM9_Init+0x98>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80036fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <MX_TIM9_Init+0x98>)
 80036fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003700:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003702:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <MX_TIM9_Init+0x98>)
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003708:	4b17      	ldr	r3, [pc, #92]	@ (8003768 <MX_TIM9_Init+0x98>)
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800370e:	4816      	ldr	r0, [pc, #88]	@ (8003768 <MX_TIM9_Init+0x98>)
 8003710:	f003 fba9 	bl	8006e66 <HAL_TIM_PWM_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800371a:	f000 fa55 	bl	8003bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800371e:	2360      	movs	r3, #96	@ 0x60
 8003720:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800372a:	2304      	movs	r3, #4
 800372c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	2200      	movs	r2, #0
 8003732:	4619      	mov	r1, r3
 8003734:	480c      	ldr	r0, [pc, #48]	@ (8003768 <MX_TIM9_Init+0x98>)
 8003736:	f003 fef1 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003740:	f000 fa42 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2204      	movs	r2, #4
 8003748:	4619      	mov	r1, r3
 800374a:	4807      	ldr	r0, [pc, #28]	@ (8003768 <MX_TIM9_Init+0x98>)
 800374c:	f003 fee6 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003756:	f000 fa37 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800375a:	4803      	ldr	r0, [pc, #12]	@ (8003768 <MX_TIM9_Init+0x98>)
 800375c:	f000 fd04 	bl	8004168 <HAL_TIM_MspPostInit>

}
 8003760:	bf00      	nop
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000690 	.word	0x20000690
 800376c:	40014000 	.word	0x40014000

08003770 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
 8003784:	615a      	str	r2, [r3, #20]
 8003786:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003788:	4b1e      	ldr	r3, [pc, #120]	@ (8003804 <MX_TIM10_Init+0x94>)
 800378a:	4a1f      	ldr	r2, [pc, #124]	@ (8003808 <MX_TIM10_Init+0x98>)
 800378c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800378e:	4b1d      	ldr	r3, [pc, #116]	@ (8003804 <MX_TIM10_Init+0x94>)
 8003790:	2200      	movs	r2, #0
 8003792:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003794:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <MX_TIM10_Init+0x94>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800379a:	4b1a      	ldr	r3, [pc, #104]	@ (8003804 <MX_TIM10_Init+0x94>)
 800379c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a2:	4b18      	ldr	r3, [pc, #96]	@ (8003804 <MX_TIM10_Init+0x94>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a8:	4b16      	ldr	r3, [pc, #88]	@ (8003804 <MX_TIM10_Init+0x94>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80037ae:	4815      	ldr	r0, [pc, #84]	@ (8003804 <MX_TIM10_Init+0x94>)
 80037b0:	f003 fb0a 	bl	8006dc8 <HAL_TIM_Base_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80037ba:	f000 fa05 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80037be:	4811      	ldr	r0, [pc, #68]	@ (8003804 <MX_TIM10_Init+0x94>)
 80037c0:	f003 fb51 	bl	8006e66 <HAL_TIM_PWM_Init>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80037ca:	f000 f9fd 	bl	8003bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ce:	2360      	movs	r3, #96	@ 0x60
 80037d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	2200      	movs	r2, #0
 80037e2:	4619      	mov	r1, r3
 80037e4:	4807      	ldr	r0, [pc, #28]	@ (8003804 <MX_TIM10_Init+0x94>)
 80037e6:	f003 fe99 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80037f0:	f000 f9ea 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80037f4:	4803      	ldr	r0, [pc, #12]	@ (8003804 <MX_TIM10_Init+0x94>)
 80037f6:	f000 fcb7 	bl	8004168 <HAL_TIM_MspPostInit>

}
 80037fa:	bf00      	nop
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200006d8 	.word	0x200006d8
 8003808:	40014400 	.word	0x40014400

0800380c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
 8003820:	615a      	str	r2, [r3, #20]
 8003822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003824:	4b1f      	ldr	r3, [pc, #124]	@ (80038a4 <MX_TIM12_Init+0x98>)
 8003826:	4a20      	ldr	r2, [pc, #128]	@ (80038a8 <MX_TIM12_Init+0x9c>)
 8003828:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800382a:	4b1e      	ldr	r3, [pc, #120]	@ (80038a4 <MX_TIM12_Init+0x98>)
 800382c:	2200      	movs	r2, #0
 800382e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003830:	4b1c      	ldr	r3, [pc, #112]	@ (80038a4 <MX_TIM12_Init+0x98>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8003836:	4b1b      	ldr	r3, [pc, #108]	@ (80038a4 <MX_TIM12_Init+0x98>)
 8003838:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800383c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800383e:	4b19      	ldr	r3, [pc, #100]	@ (80038a4 <MX_TIM12_Init+0x98>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003844:	4b17      	ldr	r3, [pc, #92]	@ (80038a4 <MX_TIM12_Init+0x98>)
 8003846:	2200      	movs	r2, #0
 8003848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800384a:	4816      	ldr	r0, [pc, #88]	@ (80038a4 <MX_TIM12_Init+0x98>)
 800384c:	f003 fb0b 	bl	8006e66 <HAL_TIM_PWM_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003856:	f000 f9b7 	bl	8003bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800385a:	2360      	movs	r3, #96	@ 0x60
 800385c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003866:	2304      	movs	r3, #4
 8003868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	2200      	movs	r2, #0
 800386e:	4619      	mov	r1, r3
 8003870:	480c      	ldr	r0, [pc, #48]	@ (80038a4 <MX_TIM12_Init+0x98>)
 8003872:	f003 fe53 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800387c:	f000 f9a4 	bl	8003bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	2204      	movs	r2, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4807      	ldr	r0, [pc, #28]	@ (80038a4 <MX_TIM12_Init+0x98>)
 8003888:	f003 fe48 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8003892:	f000 f999 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003896:	4803      	ldr	r0, [pc, #12]	@ (80038a4 <MX_TIM12_Init+0x98>)
 8003898:	f000 fc66 	bl	8004168 <HAL_TIM_MspPostInit>

}
 800389c:	bf00      	nop
 800389e:	3720      	adds	r7, #32
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000720 	.word	0x20000720
 80038a8:	40001800 	.word	0x40001800

080038ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80038b0:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038b2:	4a12      	ldr	r2, [pc, #72]	@ (80038fc <MX_UART4_Init+0x50>)
 80038b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80038b6:	4b10      	ldr	r3, [pc, #64]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038b8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80038bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80038be:	4b0e      	ldr	r3, [pc, #56]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80038ca:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038d2:	220c      	movs	r2, #12
 80038d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038d6:	4b08      	ldr	r3, [pc, #32]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80038dc:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80038e2:	4805      	ldr	r0, [pc, #20]	@ (80038f8 <MX_UART4_Init+0x4c>)
 80038e4:	f004 fa16 	bl	8007d14 <HAL_UART_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80038ee:	f000 f96b 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000768 	.word	0x20000768
 80038fc:	40004c00 	.word	0x40004c00

08003900 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003904:	4b11      	ldr	r3, [pc, #68]	@ (800394c <MX_UART5_Init+0x4c>)
 8003906:	4a12      	ldr	r2, [pc, #72]	@ (8003950 <MX_UART5_Init+0x50>)
 8003908:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <MX_UART5_Init+0x4c>)
 800390c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003910:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003912:	4b0e      	ldr	r3, [pc, #56]	@ (800394c <MX_UART5_Init+0x4c>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <MX_UART5_Init+0x4c>)
 800391a:	2200      	movs	r2, #0
 800391c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800391e:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <MX_UART5_Init+0x4c>)
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003924:	4b09      	ldr	r3, [pc, #36]	@ (800394c <MX_UART5_Init+0x4c>)
 8003926:	220c      	movs	r2, #12
 8003928:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800392a:	4b08      	ldr	r3, [pc, #32]	@ (800394c <MX_UART5_Init+0x4c>)
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <MX_UART5_Init+0x4c>)
 8003932:	2200      	movs	r2, #0
 8003934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003936:	4805      	ldr	r0, [pc, #20]	@ (800394c <MX_UART5_Init+0x4c>)
 8003938:	f004 f9ec 	bl	8007d14 <HAL_UART_Init>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003942:	f000 f941 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200007b0 	.word	0x200007b0
 8003950:	40005000 	.word	0x40005000

08003954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003958:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 800395a:	4a12      	ldr	r2, [pc, #72]	@ (80039a4 <MX_USART2_UART_Init+0x50>)
 800395c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800395e:	4b10      	ldr	r3, [pc, #64]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 8003960:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003966:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800396c:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 800396e:	2200      	movs	r2, #0
 8003970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003972:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003978:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 800397a:	220c      	movs	r2, #12
 800397c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800397e:	4b08      	ldr	r3, [pc, #32]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 8003986:	2200      	movs	r2, #0
 8003988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800398a:	4805      	ldr	r0, [pc, #20]	@ (80039a0 <MX_USART2_UART_Init+0x4c>)
 800398c:	f004 f9c2 	bl	8007d14 <HAL_UART_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003996:	f000 f917 	bl	8003bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200007f8 	.word	0x200007f8
 80039a4:	40004400 	.word	0x40004400

080039a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <MX_DMA_Init+0x8c>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a34 <MX_DMA_Init+0x8c>)
 80039b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039be:	4b1d      	ldr	r3, [pc, #116]	@ (8003a34 <MX_DMA_Init+0x8c>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2100      	movs	r1, #0
 80039ce:	200b      	movs	r0, #11
 80039d0:	f001 fe2f 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80039d4:	200b      	movs	r0, #11
 80039d6:	f001 fe48 	bl	800566a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2100      	movs	r1, #0
 80039de:	200d      	movs	r0, #13
 80039e0:	f001 fe27 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80039e4:	200d      	movs	r0, #13
 80039e6:	f001 fe40 	bl	800566a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2100      	movs	r1, #0
 80039ee:	200f      	movs	r0, #15
 80039f0:	f001 fe1f 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80039f4:	200f      	movs	r0, #15
 80039f6:	f001 fe38 	bl	800566a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2100      	movs	r1, #0
 80039fe:	2010      	movs	r0, #16
 8003a00:	f001 fe17 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003a04:	2010      	movs	r0, #16
 8003a06:	f001 fe30 	bl	800566a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2011      	movs	r0, #17
 8003a10:	f001 fe0f 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003a14:	2011      	movs	r0, #17
 8003a16:	f001 fe28 	bl	800566a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	202f      	movs	r0, #47	@ 0x2f
 8003a20:	f001 fe07 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003a24:	202f      	movs	r0, #47	@ 0x2f
 8003a26:	f001 fe20 	bl	800566a <HAL_NVIC_EnableIRQ>

}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a3e:	f107 0314 	add.w	r3, r7, #20
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	4b57      	ldr	r3, [pc, #348]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	4a56      	ldr	r2, [pc, #344]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a58:	f043 0310 	orr.w	r3, r3, #16
 8003a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a5e:	4b54      	ldr	r3, [pc, #336]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b50      	ldr	r3, [pc, #320]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	4b49      	ldr	r3, [pc, #292]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	4a48      	ldr	r2, [pc, #288]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a96:	4b46      	ldr	r3, [pc, #280]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	4b42      	ldr	r3, [pc, #264]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	4a41      	ldr	r2, [pc, #260]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	4a3a      	ldr	r2, [pc, #232]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ace:	4b38      	ldr	r3, [pc, #224]	@ (8003bb0 <MX_GPIO_Init+0x178>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2117      	movs	r1, #23
 8003ade:	4835      	ldr	r0, [pc, #212]	@ (8003bb4 <MX_GPIO_Init+0x17c>)
 8003ae0:	f002 fb7c 	bl	80061dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f243 0190 	movw	r1, #12432	@ 0x3090
 8003aea:	4833      	ldr	r0, [pc, #204]	@ (8003bb8 <MX_GPIO_Init+0x180>)
 8003aec:	f002 fb76 	bl	80061dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003af0:	2200      	movs	r2, #0
 8003af2:	f64c 018b 	movw	r1, #51339	@ 0xc88b
 8003af6:	4831      	ldr	r0, [pc, #196]	@ (8003bbc <MX_GPIO_Init+0x184>)
 8003af8:	f002 fb70 	bl	80061dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b02:	482f      	ldr	r0, [pc, #188]	@ (8003bc0 <MX_GPIO_Init+0x188>)
 8003b04:	f002 fb6a 	bl	80061dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8003b0e:	482d      	ldr	r0, [pc, #180]	@ (8003bc4 <MX_GPIO_Init+0x18c>)
 8003b10:	f002 fb64 	bl	80061dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1;
 8003b14:	2317      	movs	r3, #23
 8003b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b20:	2300      	movs	r3, #0
 8003b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4822      	ldr	r0, [pc, #136]	@ (8003bb4 <MX_GPIO_Init+0x17c>)
 8003b2c:	f002 f9ba 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_7;
 8003b30:	f243 0390 	movw	r3, #12432	@ 0x3090
 8003b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b36:	2301      	movs	r3, #1
 8003b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4619      	mov	r1, r3
 8003b48:	481b      	ldr	r0, [pc, #108]	@ (8003bb8 <MX_GPIO_Init+0x180>)
 8003b4a:	f002 f9ab 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD14 PD15 PD0
                           PD1 PD3 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003b4e:	f64c 038b 	movw	r3, #51339	@ 0xc88b
 8003b52:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4619      	mov	r1, r3
 8003b66:	4815      	ldr	r0, [pc, #84]	@ (8003bbc <MX_GPIO_Init+0x184>)
 8003b68:	f002 f99c 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7e:	f107 0314 	add.w	r3, r7, #20
 8003b82:	4619      	mov	r1, r3
 8003b84:	480e      	ldr	r0, [pc, #56]	@ (8003bc0 <MX_GPIO_Init+0x188>)
 8003b86:	f002 f98d 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8003b8a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8003b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b90:	2301      	movs	r3, #1
 8003b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4808      	ldr	r0, [pc, #32]	@ (8003bc4 <MX_GPIO_Init+0x18c>)
 8003ba4:	f002 f97e 	bl	8005ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003ba8:	bf00      	nop
 8003baa:	3728      	adds	r7, #40	@ 0x28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020c00 	.word	0x40020c00
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020000 	.word	0x40020000

08003bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bcc:	b672      	cpsid	i
}
 8003bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003bd0:	bf00      	nop
 8003bd2:	e7fd      	b.n	8003bd0 <Error_Handler+0x8>

08003bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	4a0f      	ldr	r2, [pc, #60]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	4a08      	ldr	r2, [pc, #32]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003c12:	2007      	movs	r0, #7
 8003c14:	f001 fd02 	bl	800561c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800

08003c24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	@ 0x28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a24      	ldr	r2, [pc, #144]	@ (8003cd4 <HAL_ADC_MspInit+0xb0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d141      	bne.n	8003cca <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	4b23      	ldr	r3, [pc, #140]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	4a22      	ldr	r2, [pc, #136]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c56:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c72:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	4a14      	ldr	r2, [pc, #80]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c8e:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <HAL_ADC_MspInit+0xb4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003c9a:	233f      	movs	r3, #63	@ 0x3f
 8003c9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca6:	f107 0314 	add.w	r3, r7, #20
 8003caa:	4619      	mov	r1, r3
 8003cac:	480b      	ldr	r0, [pc, #44]	@ (8003cdc <HAL_ADC_MspInit+0xb8>)
 8003cae:	f002 f8f9 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbe:	f107 0314 	add.w	r3, r7, #20
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4806      	ldr	r0, [pc, #24]	@ (8003ce0 <HAL_ADC_MspInit+0xbc>)
 8003cc6:	f002 f8ed 	bl	8005ea4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003cca:	bf00      	nop
 8003ccc:	3728      	adds	r7, #40	@ 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40012000 	.word	0x40012000
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40020800 	.word	0x40020800
 8003ce0:	40020000 	.word	0x40020000

08003ce4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	@ 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	@ (8003d68 <HAL_I2C_MspInit+0x84>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d12c      	bne.n	8003d60 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	4b18      	ldr	r3, [pc, #96]	@ (8003d6c <HAL_I2C_MspInit+0x88>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	4a17      	ldr	r2, [pc, #92]	@ (8003d6c <HAL_I2C_MspInit+0x88>)
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d16:	4b15      	ldr	r3, [pc, #84]	@ (8003d6c <HAL_I2C_MspInit+0x88>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003d22:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d28:	2312      	movs	r3, #18
 8003d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d30:	2303      	movs	r3, #3
 8003d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d34:	2304      	movs	r3, #4
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	480c      	ldr	r0, [pc, #48]	@ (8003d70 <HAL_I2C_MspInit+0x8c>)
 8003d40:	f002 f8b0 	bl	8005ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <HAL_I2C_MspInit+0x88>)
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	4a07      	ldr	r2, [pc, #28]	@ (8003d6c <HAL_I2C_MspInit+0x88>)
 8003d4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d54:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <HAL_I2C_MspInit+0x88>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003d60:	bf00      	nop
 8003d62:	3728      	adds	r7, #40	@ 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40005400 	.word	0x40005400
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40020400 	.word	0x40020400

08003d74 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b092      	sub	sp, #72	@ 0x48
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4aaa      	ldr	r2, [pc, #680]	@ (800403c <HAL_TIM_Encoder_MspInit+0x2c8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d14d      	bne.n	8003e32 <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d9a:	4ba9      	ldr	r3, [pc, #676]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	4aa8      	ldr	r2, [pc, #672]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003da6:	4ba6      	ldr	r3, [pc, #664]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8003db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db6:	4ba2      	ldr	r3, [pc, #648]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	4aa1      	ldr	r2, [pc, #644]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003dbc:	f043 0310 	orr.w	r3, r3, #16
 8003dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc2:	4b9f      	ldr	r3, [pc, #636]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003dce:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003de0:	2301      	movs	r3, #1
 8003de2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003de4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003de8:	4619      	mov	r1, r3
 8003dea:	4896      	ldr	r0, [pc, #600]	@ (8004044 <HAL_TIM_Encoder_MspInit+0x2d0>)
 8003dec:	f002 f85a 	bl	8005ea4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003df0:	2200      	movs	r2, #0
 8003df2:	2100      	movs	r1, #0
 8003df4:	2018      	movs	r0, #24
 8003df6:	f001 fc1c 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003dfa:	2018      	movs	r0, #24
 8003dfc:	f001 fc35 	bl	800566a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003e00:	2200      	movs	r2, #0
 8003e02:	2100      	movs	r1, #0
 8003e04:	2019      	movs	r0, #25
 8003e06:	f001 fc14 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003e0a:	2019      	movs	r0, #25
 8003e0c:	f001 fc2d 	bl	800566a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	201a      	movs	r0, #26
 8003e16:	f001 fc0c 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003e1a:	201a      	movs	r0, #26
 8003e1c:	f001 fc25 	bl	800566a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003e20:	2200      	movs	r2, #0
 8003e22:	2100      	movs	r1, #0
 8003e24:	201b      	movs	r0, #27
 8003e26:	f001 fc04 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003e2a:	201b      	movs	r0, #27
 8003e2c:	f001 fc1d 	bl	800566a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e30:	e0ff      	b.n	8004032 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM3)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a84      	ldr	r2, [pc, #528]	@ (8004048 <HAL_TIM_Encoder_MspInit+0x2d4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d134      	bne.n	8003ea6 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e40:	4b7f      	ldr	r3, [pc, #508]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	4a7e      	ldr	r2, [pc, #504]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003e46:	f043 0302 	orr.w	r3, r3, #2
 8003e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e5c:	4b78      	ldr	r3, [pc, #480]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	4a77      	ldr	r2, [pc, #476]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e68:	4b75      	ldr	r3, [pc, #468]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e74:	23c0      	movs	r3, #192	@ 0xc0
 8003e76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e84:	2302      	movs	r3, #2
 8003e86:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	486f      	ldr	r0, [pc, #444]	@ (800404c <HAL_TIM_Encoder_MspInit+0x2d8>)
 8003e90:	f002 f808 	bl	8005ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e94:	2200      	movs	r2, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	201d      	movs	r0, #29
 8003e9a:	f001 fbca 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e9e:	201d      	movs	r0, #29
 8003ea0:	f001 fbe3 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 8003ea4:	e0c5      	b.n	8004032 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM4)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a69      	ldr	r2, [pc, #420]	@ (8004050 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d135      	bne.n	8003f1c <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
 8003eb4:	4b62      	ldr	r3, [pc, #392]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	4a61      	ldr	r2, [pc, #388]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec0:	4b5f      	ldr	r3, [pc, #380]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	623b      	str	r3, [r7, #32]
 8003eca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	4b5b      	ldr	r3, [pc, #364]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed4:	4a5a      	ldr	r2, [pc, #360]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003ed6:	f043 0308 	orr.w	r3, r3, #8
 8003eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8003edc:	4b58      	ldr	r3, [pc, #352]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003ee8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003efa:	2302      	movs	r3, #2
 8003efc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003efe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f02:	4619      	mov	r1, r3
 8003f04:	4853      	ldr	r0, [pc, #332]	@ (8004054 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8003f06:	f001 ffcd 	bl	8005ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	201e      	movs	r0, #30
 8003f10:	f001 fb8f 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f14:	201e      	movs	r0, #30
 8003f16:	f001 fba8 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 8003f1a:	e08a      	b.n	8004032 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM5)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a4d      	ldr	r2, [pc, #308]	@ (8004058 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d134      	bne.n	8003f90 <HAL_TIM_Encoder_MspInit+0x21c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	4b45      	ldr	r3, [pc, #276]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	4a44      	ldr	r2, [pc, #272]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003f30:	f043 0308 	orr.w	r3, r3, #8
 8003f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f36:	4b42      	ldr	r3, [pc, #264]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	4b3e      	ldr	r3, [pc, #248]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f52:	4b3b      	ldr	r3, [pc, #236]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	2302      	movs	r3, #2
 8003f64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f76:	4619      	mov	r1, r3
 8003f78:	4834      	ldr	r0, [pc, #208]	@ (800404c <HAL_TIM_Encoder_MspInit+0x2d8>)
 8003f7a:	f001 ff93 	bl	8005ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	2032      	movs	r0, #50	@ 0x32
 8003f84:	f001 fb55 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003f88:	2032      	movs	r0, #50	@ 0x32
 8003f8a:	f001 fb6e 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 8003f8e:	e050      	b.n	8004032 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM8)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a31      	ldr	r2, [pc, #196]	@ (800405c <HAL_TIM_Encoder_MspInit+0x2e8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d14b      	bne.n	8004032 <HAL_TIM_Encoder_MspInit+0x2be>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	4a27      	ldr	r2, [pc, #156]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003faa:	4b25      	ldr	r3, [pc, #148]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	4b21      	ldr	r3, [pc, #132]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	4a20      	ldr	r2, [pc, #128]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004040 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fd2:	23c0      	movs	r3, #192	@ 0xc0
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fea:	4619      	mov	r1, r3
 8003fec:	481c      	ldr	r0, [pc, #112]	@ (8004060 <HAL_TIM_Encoder_MspInit+0x2ec>)
 8003fee:	f001 ff59 	bl	8005ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	202b      	movs	r0, #43	@ 0x2b
 8003ff8:	f001 fb1b 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003ffc:	202b      	movs	r0, #43	@ 0x2b
 8003ffe:	f001 fb34 	bl	800566a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004002:	2200      	movs	r2, #0
 8004004:	2100      	movs	r1, #0
 8004006:	202c      	movs	r0, #44	@ 0x2c
 8004008:	f001 fb13 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800400c:	202c      	movs	r0, #44	@ 0x2c
 800400e:	f001 fb2c 	bl	800566a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004012:	2200      	movs	r2, #0
 8004014:	2100      	movs	r1, #0
 8004016:	202d      	movs	r0, #45	@ 0x2d
 8004018:	f001 fb0b 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800401c:	202d      	movs	r0, #45	@ 0x2d
 800401e:	f001 fb24 	bl	800566a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8004022:	2200      	movs	r2, #0
 8004024:	2100      	movs	r1, #0
 8004026:	202e      	movs	r0, #46	@ 0x2e
 8004028:	f001 fb03 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800402c:	202e      	movs	r0, #46	@ 0x2e
 800402e:	f001 fb1c 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 8004032:	bf00      	nop
 8004034:	3748      	adds	r7, #72	@ 0x48
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40010000 	.word	0x40010000
 8004040:	40023800 	.word	0x40023800
 8004044:	40021000 	.word	0x40021000
 8004048:	40000400 	.word	0x40000400
 800404c:	40020000 	.word	0x40020000
 8004050:	40000800 	.word	0x40000800
 8004054:	40020c00 	.word	0x40020c00
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40010400 	.word	0x40010400
 8004060:	40020800 	.word	0x40020800

08004064 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	4b24      	ldr	r3, [pc, #144]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	4a23      	ldr	r2, [pc, #140]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6413      	str	r3, [r2, #64]	@ 0x40
 8004086:	4b21      	ldr	r3, [pc, #132]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004092:	e036      	b.n	8004102 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM9)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <HAL_TIM_PWM_MspInit+0xac>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d116      	bne.n	80040cc <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	4a19      	ldr	r2, [pc, #100]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ae:	4b17      	ldr	r3, [pc, #92]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2100      	movs	r1, #0
 80040be:	2018      	movs	r0, #24
 80040c0:	f001 fab7 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80040c4:	2018      	movs	r0, #24
 80040c6:	f001 fad0 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 80040ca:	e01a      	b.n	8004102 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM12)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a10      	ldr	r2, [pc, #64]	@ (8004114 <HAL_TIM_PWM_MspInit+0xb0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d115      	bne.n	8004102 <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	4a0b      	ldr	r2, [pc, #44]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 80040e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040e6:	4b09      	ldr	r3, [pc, #36]	@ (800410c <HAL_TIM_PWM_MspInit+0xa8>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	202b      	movs	r0, #43	@ 0x2b
 80040f8:	f001 fa9b 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80040fc:	202b      	movs	r0, #43	@ 0x2b
 80040fe:	f001 fab4 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800
 8004110:	40014000 	.word	0x40014000
 8004114:	40001800 	.word	0x40001800

08004118 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a0e      	ldr	r2, [pc, #56]	@ (8004160 <HAL_TIM_Base_MspInit+0x48>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d115      	bne.n	8004156 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <HAL_TIM_Base_MspInit+0x4c>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	4a0c      	ldr	r2, [pc, #48]	@ (8004164 <HAL_TIM_Base_MspInit+0x4c>)
 8004134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004138:	6453      	str	r3, [r2, #68]	@ 0x44
 800413a:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <HAL_TIM_Base_MspInit+0x4c>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	2019      	movs	r0, #25
 800414c:	f001 fa71 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004150:	2019      	movs	r0, #25
 8004152:	f001 fa8a 	bl	800566a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40014400 	.word	0x40014400
 8004164:	40023800 	.word	0x40023800

08004168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	@ 0x30
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	f107 031c 	add.w	r3, r7, #28
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004188:	d13d      	bne.n	8004206 <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	4b56      	ldr	r3, [pc, #344]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4a55      	ldr	r2, [pc, #340]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6313      	str	r3, [r2, #48]	@ 0x30
 800419a:	4b53      	ldr	r3, [pc, #332]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	4b4f      	ldr	r3, [pc, #316]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	4a4e      	ldr	r2, [pc, #312]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041b6:	4b4c      	ldr	r3, [pc, #304]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	697b      	ldr	r3, [r7, #20]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041c2:	2320      	movs	r3, #32
 80041c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c6:	2302      	movs	r3, #2
 80041c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ce:	2300      	movs	r3, #0
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041d2:	2301      	movs	r3, #1
 80041d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d6:	f107 031c 	add.w	r3, r7, #28
 80041da:	4619      	mov	r1, r3
 80041dc:	4843      	ldr	r0, [pc, #268]	@ (80042ec <HAL_TIM_MspPostInit+0x184>)
 80041de:	f001 fe61 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80041e2:	f640 4308 	movw	r3, #3080	@ 0xc08
 80041e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e8:	2302      	movs	r3, #2
 80041ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041f4:	2301      	movs	r3, #1
 80041f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f8:	f107 031c 	add.w	r3, r7, #28
 80041fc:	4619      	mov	r1, r3
 80041fe:	483c      	ldr	r0, [pc, #240]	@ (80042f0 <HAL_TIM_MspPostInit+0x188>)
 8004200:	f001 fe50 	bl	8005ea4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004204:	e06c      	b.n	80042e0 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM9)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a3a      	ldr	r2, [pc, #232]	@ (80042f4 <HAL_TIM_MspPostInit+0x18c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d11e      	bne.n	800424e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	4b34      	ldr	r3, [pc, #208]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	4a33      	ldr	r2, [pc, #204]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 800421a:	f043 0310 	orr.w	r3, r3, #16
 800421e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004220:	4b31      	ldr	r3, [pc, #196]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800422c:	2360      	movs	r3, #96	@ 0x60
 800422e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004230:	2302      	movs	r3, #2
 8004232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004238:	2300      	movs	r3, #0
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800423c:	2303      	movs	r3, #3
 800423e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004240:	f107 031c 	add.w	r3, r7, #28
 8004244:	4619      	mov	r1, r3
 8004246:	482c      	ldr	r0, [pc, #176]	@ (80042f8 <HAL_TIM_MspPostInit+0x190>)
 8004248:	f001 fe2c 	bl	8005ea4 <HAL_GPIO_Init>
}
 800424c:	e048      	b.n	80042e0 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM10)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2a      	ldr	r2, [pc, #168]	@ (80042fc <HAL_TIM_MspPostInit+0x194>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d11f      	bne.n	8004298 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004260:	4a21      	ldr	r2, [pc, #132]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 8004262:	f043 0302 	orr.w	r3, r3, #2
 8004266:	6313      	str	r3, [r2, #48]	@ 0x30
 8004268:	4b1f      	ldr	r3, [pc, #124]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427a:	2302      	movs	r3, #2
 800427c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	2300      	movs	r3, #0
 8004284:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004286:	2303      	movs	r3, #3
 8004288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428a:	f107 031c 	add.w	r3, r7, #28
 800428e:	4619      	mov	r1, r3
 8004290:	4817      	ldr	r0, [pc, #92]	@ (80042f0 <HAL_TIM_MspPostInit+0x188>)
 8004292:	f001 fe07 	bl	8005ea4 <HAL_GPIO_Init>
}
 8004296:	e023      	b.n	80042e0 <HAL_TIM_MspPostInit+0x178>
  else if(htim->Instance==TIM12)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a18      	ldr	r2, [pc, #96]	@ (8004300 <HAL_TIM_MspPostInit+0x198>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d11e      	bne.n	80042e0 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	4b10      	ldr	r3, [pc, #64]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	4a0f      	ldr	r2, [pc, #60]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <HAL_TIM_MspPostInit+0x180>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80042be:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80042c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042cc:	2300      	movs	r3, #0
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80042d0:	2309      	movs	r3, #9
 80042d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d4:	f107 031c 	add.w	r3, r7, #28
 80042d8:	4619      	mov	r1, r3
 80042da:	4805      	ldr	r0, [pc, #20]	@ (80042f0 <HAL_TIM_MspPostInit+0x188>)
 80042dc:	f001 fde2 	bl	8005ea4 <HAL_GPIO_Init>
}
 80042e0:	bf00      	nop
 80042e2:	3730      	adds	r7, #48	@ 0x30
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40020000 	.word	0x40020000
 80042f0:	40020400 	.word	0x40020400
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40001800 	.word	0x40001800

08004304 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08e      	sub	sp, #56	@ 0x38
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	605a      	str	r2, [r3, #4]
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a4a      	ldr	r2, [pc, #296]	@ (800444c <HAL_UART_MspInit+0x148>)
 8004322:	4293      	cmp	r3, r2
 8004324:	f040 80a0 	bne.w	8004468 <HAL_UART_MspInit+0x164>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004328:	2300      	movs	r3, #0
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	4b48      	ldr	r3, [pc, #288]	@ (8004450 <HAL_UART_MspInit+0x14c>)
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	4a47      	ldr	r2, [pc, #284]	@ (8004450 <HAL_UART_MspInit+0x14c>)
 8004332:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004336:	6413      	str	r3, [r2, #64]	@ 0x40
 8004338:	4b45      	ldr	r3, [pc, #276]	@ (8004450 <HAL_UART_MspInit+0x14c>)
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	4b41      	ldr	r3, [pc, #260]	@ (8004450 <HAL_UART_MspInit+0x14c>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434c:	4a40      	ldr	r2, [pc, #256]	@ (8004450 <HAL_UART_MspInit+0x14c>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6313      	str	r3, [r2, #48]	@ 0x30
 8004354:	4b3e      	ldr	r3, [pc, #248]	@ (8004450 <HAL_UART_MspInit+0x14c>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004360:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004366:	2302      	movs	r3, #2
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	2300      	movs	r3, #0
 800436c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436e:	2303      	movs	r3, #3
 8004370:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004372:	2308      	movs	r3, #8
 8004374:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800437a:	4619      	mov	r1, r3
 800437c:	4835      	ldr	r0, [pc, #212]	@ (8004454 <HAL_UART_MspInit+0x150>)
 800437e:	f001 fd91 	bl	8005ea4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004382:	4b35      	ldr	r3, [pc, #212]	@ (8004458 <HAL_UART_MspInit+0x154>)
 8004384:	4a35      	ldr	r2, [pc, #212]	@ (800445c <HAL_UART_MspInit+0x158>)
 8004386:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004388:	4b33      	ldr	r3, [pc, #204]	@ (8004458 <HAL_UART_MspInit+0x154>)
 800438a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800438e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004390:	4b31      	ldr	r3, [pc, #196]	@ (8004458 <HAL_UART_MspInit+0x154>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004396:	4b30      	ldr	r3, [pc, #192]	@ (8004458 <HAL_UART_MspInit+0x154>)
 8004398:	2200      	movs	r2, #0
 800439a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800439c:	4b2e      	ldr	r3, [pc, #184]	@ (8004458 <HAL_UART_MspInit+0x154>)
 800439e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004458 <HAL_UART_MspInit+0x154>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004458 <HAL_UART_MspInit+0x154>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80043b0:	4b29      	ldr	r3, [pc, #164]	@ (8004458 <HAL_UART_MspInit+0x154>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043b6:	4b28      	ldr	r3, [pc, #160]	@ (8004458 <HAL_UART_MspInit+0x154>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043bc:	4b26      	ldr	r3, [pc, #152]	@ (8004458 <HAL_UART_MspInit+0x154>)
 80043be:	2200      	movs	r2, #0
 80043c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80043c2:	4825      	ldr	r0, [pc, #148]	@ (8004458 <HAL_UART_MspInit+0x154>)
 80043c4:	f001 f96c 	bl	80056a0 <HAL_DMA_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80043ce:	f7ff fbfb 	bl	8003bc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a20      	ldr	r2, [pc, #128]	@ (8004458 <HAL_UART_MspInit+0x154>)
 80043d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <HAL_UART_MspInit+0x154>)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80043de:	4b20      	ldr	r3, [pc, #128]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 80043e0:	4a20      	ldr	r2, [pc, #128]	@ (8004464 <HAL_UART_MspInit+0x160>)
 80043e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80043e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 80043e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80043ea:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 80043ee:	2240      	movs	r2, #64	@ 0x40
 80043f0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043f8:	4b19      	ldr	r3, [pc, #100]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 80043fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043fe:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004400:	4b17      	ldr	r3, [pc, #92]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 8004402:	2200      	movs	r2, #0
 8004404:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004406:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 8004408:	2200      	movs	r2, #0
 800440a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800440c:	4b14      	ldr	r3, [pc, #80]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 800440e:	2200      	movs	r2, #0
 8004410:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004412:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 8004414:	2200      	movs	r2, #0
 8004416:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004418:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 800441a:	2200      	movs	r2, #0
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800441e:	4810      	ldr	r0, [pc, #64]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 8004420:	f001 f93e 	bl	80056a0 <HAL_DMA_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800442a:	f7ff fbcd 	bl	8003bc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a0b      	ldr	r2, [pc, #44]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 8004432:	639a      	str	r2, [r3, #56]	@ 0x38
 8004434:	4a0a      	ldr	r2, [pc, #40]	@ (8004460 <HAL_UART_MspInit+0x15c>)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800443a:	2200      	movs	r2, #0
 800443c:	2100      	movs	r1, #0
 800443e:	2034      	movs	r0, #52	@ 0x34
 8004440:	f001 f8f7 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004444:	2034      	movs	r0, #52	@ 0x34
 8004446:	f001 f910 	bl	800566a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800444a:	e169      	b.n	8004720 <HAL_UART_MspInit+0x41c>
 800444c:	40004c00 	.word	0x40004c00
 8004450:	40023800 	.word	0x40023800
 8004454:	40020800 	.word	0x40020800
 8004458:	20000840 	.word	0x20000840
 800445c:	40026040 	.word	0x40026040
 8004460:	200008a0 	.word	0x200008a0
 8004464:	40026070 	.word	0x40026070
  else if(huart->Instance==UART5)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a59      	ldr	r2, [pc, #356]	@ (80045d4 <HAL_UART_MspInit+0x2d0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	f040 80c0 	bne.w	80045f4 <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	4b57      	ldr	r3, [pc, #348]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	4a56      	ldr	r2, [pc, #344]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 800447e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004482:	6413      	str	r3, [r2, #64]	@ 0x40
 8004484:	4b54      	ldr	r3, [pc, #336]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	4b50      	ldr	r3, [pc, #320]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004498:	4a4f      	ldr	r2, [pc, #316]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6313      	str	r3, [r2, #48]	@ 0x30
 80044a0:	4b4d      	ldr	r3, [pc, #308]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	4b49      	ldr	r3, [pc, #292]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	4a48      	ldr	r2, [pc, #288]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 80044b6:	f043 0308 	orr.w	r3, r3, #8
 80044ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80044bc:	4b46      	ldr	r3, [pc, #280]	@ (80045d8 <HAL_UART_MspInit+0x2d4>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80044c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d6:	2303      	movs	r3, #3
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80044da:	2308      	movs	r3, #8
 80044dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044e2:	4619      	mov	r1, r3
 80044e4:	483d      	ldr	r0, [pc, #244]	@ (80045dc <HAL_UART_MspInit+0x2d8>)
 80044e6:	f001 fcdd 	bl	8005ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044ea:	2304      	movs	r3, #4
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f6:	2303      	movs	r3, #3
 80044f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80044fa:	2308      	movs	r3, #8
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004502:	4619      	mov	r1, r3
 8004504:	4836      	ldr	r0, [pc, #216]	@ (80045e0 <HAL_UART_MspInit+0x2dc>)
 8004506:	f001 fccd 	bl	8005ea4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800450a:	4b36      	ldr	r3, [pc, #216]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 800450c:	4a36      	ldr	r2, [pc, #216]	@ (80045e8 <HAL_UART_MspInit+0x2e4>)
 800450e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004510:	4b34      	ldr	r3, [pc, #208]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 8004512:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004516:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004518:	4b32      	ldr	r3, [pc, #200]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800451e:	4b31      	ldr	r3, [pc, #196]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 8004520:	2200      	movs	r2, #0
 8004522:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004524:	4b2f      	ldr	r3, [pc, #188]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 8004526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800452a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800452c:	4b2d      	ldr	r3, [pc, #180]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 800452e:	2200      	movs	r2, #0
 8004530:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004532:	4b2c      	ldr	r3, [pc, #176]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 8004534:	2200      	movs	r2, #0
 8004536:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004538:	4b2a      	ldr	r3, [pc, #168]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 800453a:	2200      	movs	r2, #0
 800453c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800453e:	4b29      	ldr	r3, [pc, #164]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 8004540:	2200      	movs	r2, #0
 8004542:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004544:	4b27      	ldr	r3, [pc, #156]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 8004546:	2200      	movs	r2, #0
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800454a:	4826      	ldr	r0, [pc, #152]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 800454c:	f001 f8a8 	bl	80056a0 <HAL_DMA_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_UART_MspInit+0x256>
      Error_Handler();
 8004556:	f7ff fb37 	bl	8003bc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a21      	ldr	r2, [pc, #132]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 800455e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004560:	4a20      	ldr	r2, [pc, #128]	@ (80045e4 <HAL_UART_MspInit+0x2e0>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8004566:	4b21      	ldr	r3, [pc, #132]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 8004568:	4a21      	ldr	r2, [pc, #132]	@ (80045f0 <HAL_UART_MspInit+0x2ec>)
 800456a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800456c:	4b1f      	ldr	r3, [pc, #124]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 800456e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004572:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004574:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 8004576:	2240      	movs	r2, #64	@ 0x40
 8004578:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800457a:	4b1c      	ldr	r3, [pc, #112]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 800457c:	2200      	movs	r2, #0
 800457e:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004580:	4b1a      	ldr	r3, [pc, #104]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 8004582:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004586:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004588:	4b18      	ldr	r3, [pc, #96]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 800458a:	2200      	movs	r2, #0
 800458c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800458e:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 8004590:	2200      	movs	r2, #0
 8004592:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004594:	4b15      	ldr	r3, [pc, #84]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800459a:	4b14      	ldr	r3, [pc, #80]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 800459c:	2200      	movs	r2, #0
 800459e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045a0:	4b12      	ldr	r3, [pc, #72]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80045a6:	4811      	ldr	r0, [pc, #68]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 80045a8:	f001 f87a 	bl	80056a0 <HAL_DMA_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 80045b2:	f7ff fb09 	bl	8003bc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a0c      	ldr	r2, [pc, #48]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 80045ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80045bc:	4a0b      	ldr	r2, [pc, #44]	@ (80045ec <HAL_UART_MspInit+0x2e8>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80045c2:	2200      	movs	r2, #0
 80045c4:	2100      	movs	r1, #0
 80045c6:	2035      	movs	r0, #53	@ 0x35
 80045c8:	f001 f833 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80045cc:	2035      	movs	r0, #53	@ 0x35
 80045ce:	f001 f84c 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 80045d2:	e0a5      	b.n	8004720 <HAL_UART_MspInit+0x41c>
 80045d4:	40005000 	.word	0x40005000
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40020800 	.word	0x40020800
 80045e0:	40020c00 	.word	0x40020c00
 80045e4:	20000900 	.word	0x20000900
 80045e8:	40026010 	.word	0x40026010
 80045ec:	20000960 	.word	0x20000960
 80045f0:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004728 <HAL_UART_MspInit+0x424>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	f040 8090 	bne.w	8004720 <HAL_UART_MspInit+0x41c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	4b49      	ldr	r3, [pc, #292]	@ (800472c <HAL_UART_MspInit+0x428>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	4a48      	ldr	r2, [pc, #288]	@ (800472c <HAL_UART_MspInit+0x428>)
 800460a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004610:	4b46      	ldr	r3, [pc, #280]	@ (800472c <HAL_UART_MspInit+0x428>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461c:	2300      	movs	r3, #0
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	4b42      	ldr	r3, [pc, #264]	@ (800472c <HAL_UART_MspInit+0x428>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	4a41      	ldr	r2, [pc, #260]	@ (800472c <HAL_UART_MspInit+0x428>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6313      	str	r3, [r2, #48]	@ 0x30
 800462c:	4b3f      	ldr	r3, [pc, #252]	@ (800472c <HAL_UART_MspInit+0x428>)
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004638:	230c      	movs	r3, #12
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463c:	2302      	movs	r3, #2
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004640:	2300      	movs	r3, #0
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004644:	2303      	movs	r3, #3
 8004646:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004648:	2307      	movs	r3, #7
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004650:	4619      	mov	r1, r3
 8004652:	4837      	ldr	r0, [pc, #220]	@ (8004730 <HAL_UART_MspInit+0x42c>)
 8004654:	f001 fc26 	bl	8005ea4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004658:	4b36      	ldr	r3, [pc, #216]	@ (8004734 <HAL_UART_MspInit+0x430>)
 800465a:	4a37      	ldr	r2, [pc, #220]	@ (8004738 <HAL_UART_MspInit+0x434>)
 800465c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800465e:	4b35      	ldr	r3, [pc, #212]	@ (8004734 <HAL_UART_MspInit+0x430>)
 8004660:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004664:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004666:	4b33      	ldr	r3, [pc, #204]	@ (8004734 <HAL_UART_MspInit+0x430>)
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800466c:	4b31      	ldr	r3, [pc, #196]	@ (8004734 <HAL_UART_MspInit+0x430>)
 800466e:	2200      	movs	r2, #0
 8004670:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004672:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <HAL_UART_MspInit+0x430>)
 8004674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004678:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800467a:	4b2e      	ldr	r3, [pc, #184]	@ (8004734 <HAL_UART_MspInit+0x430>)
 800467c:	2200      	movs	r2, #0
 800467e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004680:	4b2c      	ldr	r3, [pc, #176]	@ (8004734 <HAL_UART_MspInit+0x430>)
 8004682:	2200      	movs	r2, #0
 8004684:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004686:	4b2b      	ldr	r3, [pc, #172]	@ (8004734 <HAL_UART_MspInit+0x430>)
 8004688:	2200      	movs	r2, #0
 800468a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800468c:	4b29      	ldr	r3, [pc, #164]	@ (8004734 <HAL_UART_MspInit+0x430>)
 800468e:	2200      	movs	r2, #0
 8004690:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004692:	4b28      	ldr	r3, [pc, #160]	@ (8004734 <HAL_UART_MspInit+0x430>)
 8004694:	2200      	movs	r2, #0
 8004696:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004698:	4826      	ldr	r0, [pc, #152]	@ (8004734 <HAL_UART_MspInit+0x430>)
 800469a:	f001 f801 	bl	80056a0 <HAL_DMA_Init>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 80046a4:	f7ff fa90 	bl	8003bc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a22      	ldr	r2, [pc, #136]	@ (8004734 <HAL_UART_MspInit+0x430>)
 80046ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046ae:	4a21      	ldr	r2, [pc, #132]	@ (8004734 <HAL_UART_MspInit+0x430>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80046b4:	4b21      	ldr	r3, [pc, #132]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046b6:	4a22      	ldr	r2, [pc, #136]	@ (8004740 <HAL_UART_MspInit+0x43c>)
 80046b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80046ba:	4b20      	ldr	r3, [pc, #128]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80046c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046c4:	2240      	movs	r2, #64	@ 0x40
 80046c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046c8:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046d6:	4b19      	ldr	r3, [pc, #100]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046d8:	2200      	movs	r2, #0
 80046da:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046dc:	4b17      	ldr	r3, [pc, #92]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046de:	2200      	movs	r2, #0
 80046e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80046e2:	4b16      	ldr	r3, [pc, #88]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046e8:	4b14      	ldr	r3, [pc, #80]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046ee:	4b13      	ldr	r3, [pc, #76]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80046f4:	4811      	ldr	r0, [pc, #68]	@ (800473c <HAL_UART_MspInit+0x438>)
 80046f6:	f000 ffd3 	bl	80056a0 <HAL_DMA_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_UART_MspInit+0x400>
      Error_Handler();
 8004700:	f7ff fa62 	bl	8003bc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a0d      	ldr	r2, [pc, #52]	@ (800473c <HAL_UART_MspInit+0x438>)
 8004708:	639a      	str	r2, [r3, #56]	@ 0x38
 800470a:	4a0c      	ldr	r2, [pc, #48]	@ (800473c <HAL_UART_MspInit+0x438>)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004710:	2200      	movs	r2, #0
 8004712:	2100      	movs	r1, #0
 8004714:	2026      	movs	r0, #38	@ 0x26
 8004716:	f000 ff8c 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800471a:	2026      	movs	r0, #38	@ 0x26
 800471c:	f000 ffa5 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 8004720:	bf00      	nop
 8004722:	3738      	adds	r7, #56	@ 0x38
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40004400 	.word	0x40004400
 800472c:	40023800 	.word	0x40023800
 8004730:	40020000 	.word	0x40020000
 8004734:	200009c0 	.word	0x200009c0
 8004738:	40026088 	.word	0x40026088
 800473c:	20000a20 	.word	0x20000a20
 8004740:	400260a0 	.word	0x400260a0

08004744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <NMI_Handler+0x4>

0800474c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <HardFault_Handler+0x4>

08004754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <MemManage_Handler+0x4>

0800475c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <BusFault_Handler+0x4>

08004764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <UsageFault_Handler+0x4>

0800476c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800479a:	f000 fa2b 	bl	8004bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80047a8:	4802      	ldr	r0, [pc, #8]	@ (80047b4 <DMA1_Stream0_IRQHandler+0x10>)
 80047aa:	f001 f911 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000900 	.word	0x20000900

080047b8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80047bc:	4802      	ldr	r0, [pc, #8]	@ (80047c8 <DMA1_Stream2_IRQHandler+0x10>)
 80047be:	f001 f907 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80047c2:	bf00      	nop
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000840 	.word	0x20000840

080047cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80047d0:	4802      	ldr	r0, [pc, #8]	@ (80047dc <DMA1_Stream4_IRQHandler+0x10>)
 80047d2:	f001 f8fd 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	200008a0 	.word	0x200008a0

080047e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80047e4:	4802      	ldr	r0, [pc, #8]	@ (80047f0 <DMA1_Stream5_IRQHandler+0x10>)
 80047e6:	f001 f8f3 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200009c0 	.word	0x200009c0

080047f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80047f8:	4802      	ldr	r0, [pc, #8]	@ (8004804 <DMA1_Stream6_IRQHandler+0x10>)
 80047fa:	f001 f8e9 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000a20 	.word	0x20000a20

08004808 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800480c:	4803      	ldr	r0, [pc, #12]	@ (800481c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800480e:	f002 fd95 	bl	800733c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004812:	4803      	ldr	r0, [pc, #12]	@ (8004820 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004814:	f002 fd92 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004818:	bf00      	nop
 800481a:	bd80      	pop	{r7, pc}
 800481c:	2000043c 	.word	0x2000043c
 8004820:	20000690 	.word	0x20000690

08004824 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004828:	4803      	ldr	r0, [pc, #12]	@ (8004838 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800482a:	f002 fd87 	bl	800733c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800482e:	4803      	ldr	r0, [pc, #12]	@ (800483c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004830:	f002 fd84 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004834:	bf00      	nop
 8004836:	bd80      	pop	{r7, pc}
 8004838:	2000043c 	.word	0x2000043c
 800483c:	200006d8 	.word	0x200006d8

08004840 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004844:	4802      	ldr	r0, [pc, #8]	@ (8004850 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004846:	f002 fd79 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000043c 	.word	0x2000043c

08004854 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004858:	4802      	ldr	r0, [pc, #8]	@ (8004864 <TIM1_CC_IRQHandler+0x10>)
 800485a:	f002 fd6f 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	2000043c 	.word	0x2000043c

08004868 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800486c:	4802      	ldr	r0, [pc, #8]	@ (8004878 <TIM3_IRQHandler+0x10>)
 800486e:	f002 fd65 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000484 	.word	0x20000484

0800487c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004880:	4802      	ldr	r0, [pc, #8]	@ (800488c <TIM4_IRQHandler+0x10>)
 8004882:	f002 fd5b 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200004cc 	.word	0x200004cc

08004890 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004894:	4802      	ldr	r0, [pc, #8]	@ (80048a0 <USART2_IRQHandler+0x10>)
 8004896:	f003 fab3 	bl	8007e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200007f8 	.word	0x200007f8

080048a4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80048a8:	4803      	ldr	r0, [pc, #12]	@ (80048b8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80048aa:	f002 fd47 	bl	800733c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80048ae:	4803      	ldr	r0, [pc, #12]	@ (80048bc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80048b0:	f002 fd44 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80048b4:	bf00      	nop
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	2000055c 	.word	0x2000055c
 80048bc:	20000720 	.word	0x20000720

080048c0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80048c4:	4802      	ldr	r0, [pc, #8]	@ (80048d0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80048c6:	f002 fd39 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000055c 	.word	0x2000055c

080048d4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80048d8:	4802      	ldr	r0, [pc, #8]	@ (80048e4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80048da:	f002 fd2f 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000055c 	.word	0x2000055c

080048e8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80048ec:	4802      	ldr	r0, [pc, #8]	@ (80048f8 <TIM8_CC_IRQHandler+0x10>)
 80048ee:	f002 fd25 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80048f2:	bf00      	nop
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	2000055c 	.word	0x2000055c

080048fc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004900:	4802      	ldr	r0, [pc, #8]	@ (800490c <DMA1_Stream7_IRQHandler+0x10>)
 8004902:	f001 f865 	bl	80059d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000960 	.word	0x20000960

08004910 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004914:	4802      	ldr	r0, [pc, #8]	@ (8004920 <TIM5_IRQHandler+0x10>)
 8004916:	f002 fd11 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000514 	.word	0x20000514

08004924 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004928:	4802      	ldr	r0, [pc, #8]	@ (8004934 <UART4_IRQHandler+0x10>)
 800492a:	f003 fa69 	bl	8007e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000768 	.word	0x20000768

08004938 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800493c:	4802      	ldr	r0, [pc, #8]	@ (8004948 <UART5_IRQHandler+0x10>)
 800493e:	f003 fa5f 	bl	8007e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200007b0 	.word	0x200007b0

0800494c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return 1;
 8004950:	2301      	movs	r3, #1
}
 8004952:	4618      	mov	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <_kill>:

int _kill(int pid, int sig)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004966:	f005 fecb 	bl	800a700 <__errno>
 800496a:	4603      	mov	r3, r0
 800496c:	2216      	movs	r2, #22
 800496e:	601a      	str	r2, [r3, #0]
  return -1;
 8004970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_exit>:

void _exit (int status)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004984:	f04f 31ff 	mov.w	r1, #4294967295
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ffe7 	bl	800495c <_kill>
  while (1) {}    /* Make sure we hang here */
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <_exit+0x12>

08004992 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e00a      	b.n	80049ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049a4:	f3af 8000 	nop.w
 80049a8:	4601      	mov	r1, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	60ba      	str	r2, [r7, #8]
 80049b0:	b2ca      	uxtb	r2, r1
 80049b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3301      	adds	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	dbf0      	blt.n	80049a4 <_read+0x12>
  }

  return len;
 80049c2:	687b      	ldr	r3, [r7, #4]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e009      	b.n	80049f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	60ba      	str	r2, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	3301      	adds	r3, #1
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	dbf1      	blt.n	80049de <_write+0x12>
  }
  return len;
 80049fa:	687b      	ldr	r3, [r7, #4]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <_close>:

int _close(int file)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a2c:	605a      	str	r2, [r3, #4]
  return 0;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <_isatty>:

int _isatty(int file)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a44:	2301      	movs	r3, #1
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a74:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <_sbrk+0x5c>)
 8004a76:	4b15      	ldr	r3, [pc, #84]	@ (8004acc <_sbrk+0x60>)
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a80:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <_sbrk+0x64>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a88:	4b11      	ldr	r3, [pc, #68]	@ (8004ad0 <_sbrk+0x64>)
 8004a8a:	4a12      	ldr	r2, [pc, #72]	@ (8004ad4 <_sbrk+0x68>)
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ad0 <_sbrk+0x64>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d207      	bcs.n	8004aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a9c:	f005 fe30 	bl	800a700 <__errno>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	220c      	movs	r2, #12
 8004aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	e009      	b.n	8004ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aac:	4b08      	ldr	r3, [pc, #32]	@ (8004ad0 <_sbrk+0x64>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <_sbrk+0x64>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	4a05      	ldr	r2, [pc, #20]	@ (8004ad0 <_sbrk+0x64>)
 8004abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004abe:	68fb      	ldr	r3, [r7, #12]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20020000 	.word	0x20020000
 8004acc:	00000400 	.word	0x00000400
 8004ad0:	20000a80 	.word	0x20000a80
 8004ad4:	20000bd8 	.word	0x20000bd8

08004ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004adc:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <SystemInit+0x20>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae2:	4a05      	ldr	r2, [pc, #20]	@ (8004af8 <SystemInit+0x20>)
 8004ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b00:	480d      	ldr	r0, [pc, #52]	@ (8004b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b02:	490e      	ldr	r1, [pc, #56]	@ (8004b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b04:	4a0e      	ldr	r2, [pc, #56]	@ (8004b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b08:	e002      	b.n	8004b10 <LoopCopyDataInit>

08004b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b0e:	3304      	adds	r3, #4

08004b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b14:	d3f9      	bcc.n	8004b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b16:	4a0b      	ldr	r2, [pc, #44]	@ (8004b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b18:	4c0b      	ldr	r4, [pc, #44]	@ (8004b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b1c:	e001      	b.n	8004b22 <LoopFillZerobss>

08004b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b20:	3204      	adds	r2, #4

08004b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b24:	d3fb      	bcc.n	8004b1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b26:	f7ff ffd7 	bl	8004ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b2a:	f005 fdef 	bl	800a70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b2e:	f7fd ffd3 	bl	8002ad8 <main>
  bx  lr    
 8004b32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b3c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8004b40:	0800e540 	.word	0x0800e540
  ldr r2, =_sbss
 8004b44:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8004b48:	20000bd4 	.word	0x20000bd4

08004b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b4c:	e7fe      	b.n	8004b4c <ADC_IRQHandler>
	...

08004b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b54:	4b0e      	ldr	r3, [pc, #56]	@ (8004b90 <HAL_Init+0x40>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0d      	ldr	r2, [pc, #52]	@ (8004b90 <HAL_Init+0x40>)
 8004b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b60:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <HAL_Init+0x40>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a0a      	ldr	r2, [pc, #40]	@ (8004b90 <HAL_Init+0x40>)
 8004b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b6c:	4b08      	ldr	r3, [pc, #32]	@ (8004b90 <HAL_Init+0x40>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a07      	ldr	r2, [pc, #28]	@ (8004b90 <HAL_Init+0x40>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b78:	2003      	movs	r0, #3
 8004b7a:	f000 fd4f 	bl	800561c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f000 f808 	bl	8004b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b84:	f7ff f826 	bl	8003bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023c00 	.word	0x40023c00

08004b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b9c:	4b12      	ldr	r3, [pc, #72]	@ (8004be8 <HAL_InitTick+0x54>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b12      	ldr	r3, [pc, #72]	@ (8004bec <HAL_InitTick+0x58>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fd67 	bl	8005686 <HAL_SYSTICK_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00e      	b.n	8004be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d80a      	bhi.n	8004bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	f000 fd2f 	bl	8005632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bd4:	4a06      	ldr	r2, [pc, #24]	@ (8004bf0 <HAL_InitTick+0x5c>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e000      	b.n	8004be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	200000f0 	.word	0x200000f0
 8004bec:	200000f8 	.word	0x200000f8
 8004bf0:	200000f4 	.word	0x200000f4

08004bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <HAL_IncTick+0x20>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_IncTick+0x24>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	4a04      	ldr	r2, [pc, #16]	@ (8004c18 <HAL_IncTick+0x24>)
 8004c06:	6013      	str	r3, [r2, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	200000f8 	.word	0x200000f8
 8004c18:	20000a84 	.word	0x20000a84

08004c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c20:	4b03      	ldr	r3, [pc, #12]	@ (8004c30 <HAL_GetTick+0x14>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000a84 	.word	0x20000a84

08004c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7ff ffee 	bl	8004c1c <HAL_GetTick>
 8004c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d005      	beq.n	8004c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c78 <HAL_Delay+0x44>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c5a:	bf00      	nop
 8004c5c:	f7ff ffde 	bl	8004c1c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d8f7      	bhi.n	8004c5c <HAL_Delay+0x28>
  {
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200000f8 	.word	0x200000f8

08004c7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e033      	b.n	8004cfa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe ffc2 	bl	8003c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d118      	bne.n	8004cec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004cc2:	f023 0302 	bic.w	r3, r3, #2
 8004cc6:	f043 0202 	orr.w	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fad8 	bl	8005284 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	f043 0201 	orr.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cea:	e001      	b.n	8004cf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_ADC_Start+0x1a>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0b2      	b.n	8004e84 <HAL_ADC_Start+0x180>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d018      	beq.n	8004d66 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d44:	4b52      	ldr	r3, [pc, #328]	@ (8004e90 <HAL_ADC_Start+0x18c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a52      	ldr	r2, [pc, #328]	@ (8004e94 <HAL_ADC_Start+0x190>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	0c9a      	lsrs	r2, r3, #18
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004d58:	e002      	b.n	8004d60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f9      	bne.n	8004d5a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d17a      	bne.n	8004e6a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d9e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004db2:	d106      	bne.n	8004dc2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db8:	f023 0206 	bic.w	r2, r3, #6
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	645a      	str	r2, [r3, #68]	@ 0x44
 8004dc0:	e002      	b.n	8004dc8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dd0:	4b31      	ldr	r3, [pc, #196]	@ (8004e98 <HAL_ADC_Start+0x194>)
 8004dd2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004ddc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d12a      	bne.n	8004e40 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2b      	ldr	r2, [pc, #172]	@ (8004e9c <HAL_ADC_Start+0x198>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d015      	beq.n	8004e20 <HAL_ADC_Start+0x11c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a29      	ldr	r2, [pc, #164]	@ (8004ea0 <HAL_ADC_Start+0x19c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d105      	bne.n	8004e0a <HAL_ADC_Start+0x106>
 8004dfe:	4b26      	ldr	r3, [pc, #152]	@ (8004e98 <HAL_ADC_Start+0x194>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <HAL_ADC_Start+0x1a0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d136      	bne.n	8004e82 <HAL_ADC_Start+0x17e>
 8004e14:	4b20      	ldr	r3, [pc, #128]	@ (8004e98 <HAL_ADC_Start+0x194>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d130      	bne.n	8004e82 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d129      	bne.n	8004e82 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e3c:	609a      	str	r2, [r3, #8]
 8004e3e:	e020      	b.n	8004e82 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <HAL_ADC_Start+0x198>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d11b      	bne.n	8004e82 <HAL_ADC_Start+0x17e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d114      	bne.n	8004e82 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	e00b      	b.n	8004e82 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	f043 0210 	orr.w	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	200000f0 	.word	0x200000f0
 8004e94:	431bde83 	.word	0x431bde83
 8004e98:	40012300 	.word	0x40012300
 8004e9c:	40012000 	.word	0x40012000
 8004ea0:	40012100 	.word	0x40012100
 8004ea4:	40012200 	.word	0x40012200

08004ea8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADC_Stop+0x16>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e021      	b.n	8004f02 <HAL_ADC_Stop+0x5a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	f043 0201 	orr.w	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2a:	d113      	bne.n	8004f54 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3a:	d10b      	bne.n	8004f54 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e063      	b.n	800501c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f54:	f7ff fe62 	bl	8004c1c <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f5a:	e021      	b.n	8004fa0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d01d      	beq.n	8004fa0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <HAL_ADC_PollForConversion+0x6c>
 8004f6a:	f7ff fe57 	bl	8004c1c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d212      	bcs.n	8004fa0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d00b      	beq.n	8004fa0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e03d      	b.n	800501c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d1d6      	bne.n	8004f5c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f06f 0212 	mvn.w	r2, #18
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d123      	bne.n	800501a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d11f      	bne.n	800501a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d111      	bne.n	800501a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_ADC_ConfigChannel+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e105      	b.n	8005268 <HAL_ADC_ConfigChannel+0x228>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b09      	cmp	r3, #9
 800506a:	d925      	bls.n	80050b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68d9      	ldr	r1, [r3, #12]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	4613      	mov	r3, r2
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	4413      	add	r3, r2
 8005080:	3b1e      	subs	r3, #30
 8005082:	2207      	movs	r2, #7
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43da      	mvns	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	400a      	ands	r2, r1
 8005090:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68d9      	ldr	r1, [r3, #12]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	4618      	mov	r0, r3
 80050a4:	4603      	mov	r3, r0
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4403      	add	r3, r0
 80050aa:	3b1e      	subs	r3, #30
 80050ac:	409a      	lsls	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	e022      	b.n	80050fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6919      	ldr	r1, [r3, #16]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	4613      	mov	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4413      	add	r3, r2
 80050cc:	2207      	movs	r2, #7
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43da      	mvns	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	400a      	ands	r2, r1
 80050da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6919      	ldr	r1, [r3, #16]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4618      	mov	r0, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4403      	add	r3, r0
 80050f4:	409a      	lsls	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b06      	cmp	r3, #6
 8005104:	d824      	bhi.n	8005150 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	3b05      	subs	r3, #5
 8005118:	221f      	movs	r2, #31
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	400a      	ands	r2, r1
 8005126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	4618      	mov	r0, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	3b05      	subs	r3, #5
 8005142:	fa00 f203 	lsl.w	r2, r0, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34
 800514e:	e04c      	b.n	80051ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b0c      	cmp	r3, #12
 8005156:	d824      	bhi.n	80051a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	3b23      	subs	r3, #35	@ 0x23
 800516a:	221f      	movs	r2, #31
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43da      	mvns	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	400a      	ands	r2, r1
 8005178:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	4618      	mov	r0, r3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	3b23      	subs	r3, #35	@ 0x23
 8005194:	fa00 f203 	lsl.w	r2, r0, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30
 80051a0:	e023      	b.n	80051ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	3b41      	subs	r3, #65	@ 0x41
 80051b4:	221f      	movs	r2, #31
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	43da      	mvns	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	400a      	ands	r2, r1
 80051c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4618      	mov	r0, r3
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	3b41      	subs	r3, #65	@ 0x41
 80051de:	fa00 f203 	lsl.w	r2, r0, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051ea:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <HAL_ADC_ConfigChannel+0x234>)
 80051ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <HAL_ADC_ConfigChannel+0x238>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d109      	bne.n	800520c <HAL_ADC_ConfigChannel+0x1cc>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b12      	cmp	r3, #18
 80051fe:	d105      	bne.n	800520c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a19      	ldr	r2, [pc, #100]	@ (8005278 <HAL_ADC_ConfigChannel+0x238>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d123      	bne.n	800525e <HAL_ADC_ConfigChannel+0x21e>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b10      	cmp	r3, #16
 800521c:	d003      	beq.n	8005226 <HAL_ADC_ConfigChannel+0x1e6>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b11      	cmp	r3, #17
 8005224:	d11b      	bne.n	800525e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b10      	cmp	r3, #16
 8005238:	d111      	bne.n	800525e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800523a:	4b10      	ldr	r3, [pc, #64]	@ (800527c <HAL_ADC_ConfigChannel+0x23c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a10      	ldr	r2, [pc, #64]	@ (8005280 <HAL_ADC_ConfigChannel+0x240>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	0c9a      	lsrs	r2, r3, #18
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005250:	e002      	b.n	8005258 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	3b01      	subs	r3, #1
 8005256:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f9      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40012300 	.word	0x40012300
 8005278:	40012000 	.word	0x40012000
 800527c:	200000f0 	.word	0x200000f0
 8005280:	431bde83 	.word	0x431bde83

08005284 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800528c:	4b79      	ldr	r3, [pc, #484]	@ (8005474 <ADC_Init+0x1f0>)
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6859      	ldr	r1, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	021a      	lsls	r2, r3, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80052dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6859      	ldr	r1, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	4a58      	ldr	r2, [pc, #352]	@ (8005478 <ADC_Init+0x1f4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800532a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6899      	ldr	r1, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800534c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6899      	ldr	r1, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	609a      	str	r2, [r3, #8]
 8005360:	e00f      	b.n	8005382 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005380:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0202 	bic.w	r2, r2, #2
 8005390:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6899      	ldr	r1, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7e1b      	ldrb	r3, [r3, #24]
 800539c:	005a      	lsls	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01b      	beq.n	80053e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80053ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6859      	ldr	r1, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	3b01      	subs	r3, #1
 80053dc:	035a      	lsls	r2, r3, #13
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	e007      	b.n	80053f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	3b01      	subs	r3, #1
 8005414:	051a      	lsls	r2, r3, #20
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800542c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800543a:	025a      	lsls	r2, r3, #9
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6899      	ldr	r1, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	029a      	lsls	r2, r3, #10
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40012300 	.word	0x40012300
 8005478:	0f000001 	.word	0x0f000001

0800547c <__NVIC_SetPriorityGrouping>:
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800548c:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <__NVIC_SetPriorityGrouping+0x44>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ae:	4a04      	ldr	r2, [pc, #16]	@ (80054c0 <__NVIC_SetPriorityGrouping+0x44>)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	60d3      	str	r3, [r2, #12]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	e000ed00 	.word	0xe000ed00

080054c4 <__NVIC_GetPriorityGrouping>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054c8:	4b04      	ldr	r3, [pc, #16]	@ (80054dc <__NVIC_GetPriorityGrouping+0x18>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	f003 0307 	and.w	r3, r3, #7
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	e000ed00 	.word	0xe000ed00

080054e0 <__NVIC_EnableIRQ>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	db0b      	blt.n	800550a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	f003 021f 	and.w	r2, r3, #31
 80054f8:	4907      	ldr	r1, [pc, #28]	@ (8005518 <__NVIC_EnableIRQ+0x38>)
 80054fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2001      	movs	r0, #1
 8005502:	fa00 f202 	lsl.w	r2, r0, r2
 8005506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000e100 	.word	0xe000e100

0800551c <__NVIC_SetPriority>:
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	6039      	str	r1, [r7, #0]
 8005526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552c:	2b00      	cmp	r3, #0
 800552e:	db0a      	blt.n	8005546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	490c      	ldr	r1, [pc, #48]	@ (8005568 <__NVIC_SetPriority+0x4c>)
 8005536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553a:	0112      	lsls	r2, r2, #4
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	440b      	add	r3, r1
 8005540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005544:	e00a      	b.n	800555c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	4908      	ldr	r1, [pc, #32]	@ (800556c <__NVIC_SetPriority+0x50>)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	3b04      	subs	r3, #4
 8005554:	0112      	lsls	r2, r2, #4
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	440b      	add	r3, r1
 800555a:	761a      	strb	r2, [r3, #24]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	e000e100 	.word	0xe000e100
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <NVIC_EncodePriority>:
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	@ 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f1c3 0307 	rsb	r3, r3, #7
 800558a:	2b04      	cmp	r3, #4
 800558c:	bf28      	it	cs
 800558e:	2304      	movcs	r3, #4
 8005590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3304      	adds	r3, #4
 8005596:	2b06      	cmp	r3, #6
 8005598:	d902      	bls.n	80055a0 <NVIC_EncodePriority+0x30>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3b03      	subs	r3, #3
 800559e:	e000      	b.n	80055a2 <NVIC_EncodePriority+0x32>
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	401a      	ands	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055b8:	f04f 31ff 	mov.w	r1, #4294967295
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	43d9      	mvns	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c8:	4313      	orrs	r3, r2
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3724      	adds	r7, #36	@ 0x24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055e8:	d301      	bcc.n	80055ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ea:	2301      	movs	r3, #1
 80055ec:	e00f      	b.n	800560e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <SysTick_Config+0x40>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055f6:	210f      	movs	r1, #15
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295
 80055fc:	f7ff ff8e 	bl	800551c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <SysTick_Config+0x40>)
 8005602:	2200      	movs	r2, #0
 8005604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005606:	4b04      	ldr	r3, [pc, #16]	@ (8005618 <SysTick_Config+0x40>)
 8005608:	2207      	movs	r2, #7
 800560a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	e000e010 	.word	0xe000e010

0800561c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ff29 	bl	800547c <__NVIC_SetPriorityGrouping>
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	4603      	mov	r3, r0
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005644:	f7ff ff3e 	bl	80054c4 <__NVIC_GetPriorityGrouping>
 8005648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	6978      	ldr	r0, [r7, #20]
 8005650:	f7ff ff8e 	bl	8005570 <NVIC_EncodePriority>
 8005654:	4602      	mov	r2, r0
 8005656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800565a:	4611      	mov	r1, r2
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff ff5d 	bl	800551c <__NVIC_SetPriority>
}
 8005662:	bf00      	nop
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	4603      	mov	r3, r0
 8005672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff ff31 	bl	80054e0 <__NVIC_EnableIRQ>
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ffa2 	bl	80055d8 <SysTick_Config>
 8005694:	4603      	mov	r3, r0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056ac:	f7ff fab6 	bl	8004c1c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e099      	b.n	80057f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056dc:	e00f      	b.n	80056fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056de:	f7ff fa9d 	bl	8004c1c <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b05      	cmp	r3, #5
 80056ea:	d908      	bls.n	80056fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2203      	movs	r2, #3
 80056f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e078      	b.n	80057f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e8      	bne.n	80056de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4b38      	ldr	r3, [pc, #224]	@ (80057f8 <HAL_DMA_Init+0x158>)
 8005718:	4013      	ands	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800572a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005736:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005742:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005754:	2b04      	cmp	r3, #4
 8005756:	d107      	bne.n	8005768 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	4313      	orrs	r3, r2
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	2b04      	cmp	r3, #4
 8005790:	d117      	bne.n	80057c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00e      	beq.n	80057c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fb01 	bl	8005dac <DMA_CheckFifoParam>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2240      	movs	r2, #64	@ 0x40
 80057b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80057be:	2301      	movs	r3, #1
 80057c0:	e016      	b.n	80057f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fab8 	bl	8005d40 <DMA_CalcBaseAndBitshift>
 80057d0:	4603      	mov	r3, r0
 80057d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d8:	223f      	movs	r2, #63	@ 0x3f
 80057da:	409a      	lsls	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	f010803f 	.word	0xf010803f

080057fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005812:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_DMA_Start_IT+0x26>
 800581e:	2302      	movs	r3, #2
 8005820:	e040      	b.n	80058a4 <HAL_DMA_Start_IT+0xa8>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d12f      	bne.n	8005896 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fa4a 	bl	8005ce4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005854:	223f      	movs	r2, #63	@ 0x3f
 8005856:	409a      	lsls	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0216 	orr.w	r2, r2, #22
 800586a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0208 	orr.w	r2, r2, #8
 8005882:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e005      	b.n	80058a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800589e:	2302      	movs	r3, #2
 80058a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058ba:	f7ff f9af 	bl	8004c1c <HAL_GetTick>
 80058be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d008      	beq.n	80058de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2280      	movs	r2, #128	@ 0x80
 80058d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e052      	b.n	8005984 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0216 	bic.w	r2, r2, #22
 80058ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <HAL_DMA_Abort+0x62>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0208 	bic.w	r2, r2, #8
 800591c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800592e:	e013      	b.n	8005958 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005930:	f7ff f974 	bl	8004c1c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b05      	cmp	r3, #5
 800593c:	d90c      	bls.n	8005958 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2203      	movs	r2, #3
 8005948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e015      	b.n	8005984 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e4      	bne.n	8005930 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596a:	223f      	movs	r2, #63	@ 0x3f
 800596c:	409a      	lsls	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d004      	beq.n	80059aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2280      	movs	r2, #128	@ 0x80
 80059a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e00c      	b.n	80059c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2205      	movs	r2, #5
 80059ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005c18 <HAL_DMA_IRQHandler+0x248>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a8e      	ldr	r2, [pc, #568]	@ (8005c1c <HAL_DMA_IRQHandler+0x24c>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	0a9b      	lsrs	r3, r3, #10
 80059e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fa:	2208      	movs	r2, #8
 80059fc:	409a      	lsls	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01a      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d013      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0204 	bic.w	r2, r2, #4
 8005a22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a28:	2208      	movs	r2, #8
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a34:	f043 0201 	orr.w	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a40:	2201      	movs	r2, #1
 8005a42:	409a      	lsls	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d012      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00b      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5e:	2201      	movs	r2, #1
 8005a60:	409a      	lsls	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	f043 0202 	orr.w	r2, r3, #2
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	2204      	movs	r2, #4
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d012      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a94:	2204      	movs	r2, #4
 8005a96:	409a      	lsls	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa0:	f043 0204 	orr.w	r2, r3, #4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	2210      	movs	r2, #16
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d043      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d03c      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aca:	2210      	movs	r2, #16
 8005acc:	409a      	lsls	r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d018      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d108      	bne.n	8005b00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d024      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
 8005afe:	e01f      	b.n	8005b40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4798      	blx	r3
 8005b10:	e016      	b.n	8005b40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d107      	bne.n	8005b30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0208 	bic.w	r2, r2, #8
 8005b2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b44:	2220      	movs	r2, #32
 8005b46:	409a      	lsls	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 808f 	beq.w	8005c70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8087 	beq.w	8005c70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b66:	2220      	movs	r2, #32
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d136      	bne.n	8005be8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0216 	bic.w	r2, r2, #22
 8005b88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <HAL_DMA_IRQHandler+0x1da>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0208 	bic.w	r2, r2, #8
 8005bb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bbe:	223f      	movs	r2, #63	@ 0x3f
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d07e      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
        }
        return;
 8005be6:	e079      	b.n	8005cdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01d      	beq.n	8005c32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10d      	bne.n	8005c20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d031      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
 8005c14:	e02c      	b.n	8005c70 <HAL_DMA_IRQHandler+0x2a0>
 8005c16:	bf00      	nop
 8005c18:	200000f0 	.word	0x200000f0
 8005c1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d023      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
 8005c30:	e01e      	b.n	8005c70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10f      	bne.n	8005c60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0210 	bic.w	r2, r2, #16
 8005c4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d032      	beq.n	8005cde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d022      	beq.n	8005cca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2205      	movs	r2, #5
 8005c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d307      	bcc.n	8005cb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f2      	bne.n	8005c9c <HAL_DMA_IRQHandler+0x2cc>
 8005cb6:	e000      	b.n	8005cba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005cb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
 8005cda:	e000      	b.n	8005cde <HAL_DMA_IRQHandler+0x30e>
        return;
 8005cdc:	bf00      	nop
    }
  }
}
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005d00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b40      	cmp	r3, #64	@ 0x40
 8005d10:	d108      	bne.n	8005d24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d22:	e007      	b.n	8005d34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	3b10      	subs	r3, #16
 8005d50:	4a14      	ldr	r2, [pc, #80]	@ (8005da4 <DMA_CalcBaseAndBitshift+0x64>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d5a:	4a13      	ldr	r2, [pc, #76]	@ (8005da8 <DMA_CalcBaseAndBitshift+0x68>)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d909      	bls.n	8005d82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	1d1a      	adds	r2, r3, #4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d80:	e007      	b.n	8005d92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	aaaaaaab 	.word	0xaaaaaaab
 8005da8:	0800df74 	.word	0x0800df74

08005dac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11f      	bne.n	8005e06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d856      	bhi.n	8005e7a <DMA_CheckFifoParam+0xce>
 8005dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <DMA_CheckFifoParam+0x28>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005df7 	.word	0x08005df7
 8005ddc:	08005de5 	.word	0x08005de5
 8005de0:	08005e7b 	.word	0x08005e7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d046      	beq.n	8005e7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df4:	e043      	b.n	8005e7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dfe:	d140      	bne.n	8005e82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e04:	e03d      	b.n	8005e82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e0e:	d121      	bne.n	8005e54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d837      	bhi.n	8005e86 <DMA_CheckFifoParam+0xda>
 8005e16:	a201      	add	r2, pc, #4	@ (adr r2, 8005e1c <DMA_CheckFifoParam+0x70>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e2d 	.word	0x08005e2d
 8005e20:	08005e33 	.word	0x08005e33
 8005e24:	08005e2d 	.word	0x08005e2d
 8005e28:	08005e45 	.word	0x08005e45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e30:	e030      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d025      	beq.n	8005e8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e42:	e022      	b.n	8005e8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e4c:	d11f      	bne.n	8005e8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e52:	e01c      	b.n	8005e8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d903      	bls.n	8005e62 <DMA_CheckFifoParam+0xb6>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d003      	beq.n	8005e68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e60:	e018      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	73fb      	strb	r3, [r7, #15]
      break;
 8005e66:	e015      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	73fb      	strb	r3, [r7, #15]
      break;
 8005e78:	e00b      	b.n	8005e92 <DMA_CheckFifoParam+0xe6>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e00a      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
      break;
 8005e7e:	bf00      	nop
 8005e80:	e008      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
      break;
 8005e82:	bf00      	nop
 8005e84:	e006      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
      break;
 8005e86:	bf00      	nop
 8005e88:	e004      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
      break;
 8005e8a:	bf00      	nop
 8005e8c:	e002      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <DMA_CheckFifoParam+0xe8>
      break;
 8005e92:	bf00      	nop
    }
  } 
  
  return status; 
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop

08005ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	@ 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e16b      	b.n	8006198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	f040 815a 	bne.w	8006192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d005      	beq.n	8005ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d130      	bne.n	8005f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	2203      	movs	r2, #3
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43db      	mvns	r3, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	091b      	lsrs	r3, r3, #4
 8005f42:	f003 0201 	and.w	r2, r3, #1
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d017      	beq.n	8005f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	2203      	movs	r2, #3
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f003 0303 	and.w	r3, r3, #3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d123      	bne.n	8005fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	08da      	lsrs	r2, r3, #3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3208      	adds	r2, #8
 8005fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	220f      	movs	r2, #15
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	08da      	lsrs	r2, r3, #3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3208      	adds	r2, #8
 8005fe2:	69b9      	ldr	r1, [r7, #24]
 8005fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 0203 	and.w	r2, r3, #3
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	4313      	orrs	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80b4 	beq.w	8006192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	4b60      	ldr	r3, [pc, #384]	@ (80061b0 <HAL_GPIO_Init+0x30c>)
 8006030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006032:	4a5f      	ldr	r2, [pc, #380]	@ (80061b0 <HAL_GPIO_Init+0x30c>)
 8006034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006038:	6453      	str	r3, [r2, #68]	@ 0x44
 800603a:	4b5d      	ldr	r3, [pc, #372]	@ (80061b0 <HAL_GPIO_Init+0x30c>)
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006046:	4a5b      	ldr	r2, [pc, #364]	@ (80061b4 <HAL_GPIO_Init+0x310>)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	089b      	lsrs	r3, r3, #2
 800604c:	3302      	adds	r3, #2
 800604e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	220f      	movs	r2, #15
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43db      	mvns	r3, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4013      	ands	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a52      	ldr	r2, [pc, #328]	@ (80061b8 <HAL_GPIO_Init+0x314>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d02b      	beq.n	80060ca <HAL_GPIO_Init+0x226>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a51      	ldr	r2, [pc, #324]	@ (80061bc <HAL_GPIO_Init+0x318>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d025      	beq.n	80060c6 <HAL_GPIO_Init+0x222>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a50      	ldr	r2, [pc, #320]	@ (80061c0 <HAL_GPIO_Init+0x31c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01f      	beq.n	80060c2 <HAL_GPIO_Init+0x21e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a4f      	ldr	r2, [pc, #316]	@ (80061c4 <HAL_GPIO_Init+0x320>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d019      	beq.n	80060be <HAL_GPIO_Init+0x21a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a4e      	ldr	r2, [pc, #312]	@ (80061c8 <HAL_GPIO_Init+0x324>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d013      	beq.n	80060ba <HAL_GPIO_Init+0x216>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a4d      	ldr	r2, [pc, #308]	@ (80061cc <HAL_GPIO_Init+0x328>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00d      	beq.n	80060b6 <HAL_GPIO_Init+0x212>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a4c      	ldr	r2, [pc, #304]	@ (80061d0 <HAL_GPIO_Init+0x32c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d007      	beq.n	80060b2 <HAL_GPIO_Init+0x20e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a4b      	ldr	r2, [pc, #300]	@ (80061d4 <HAL_GPIO_Init+0x330>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <HAL_GPIO_Init+0x20a>
 80060aa:	2307      	movs	r3, #7
 80060ac:	e00e      	b.n	80060cc <HAL_GPIO_Init+0x228>
 80060ae:	2308      	movs	r3, #8
 80060b0:	e00c      	b.n	80060cc <HAL_GPIO_Init+0x228>
 80060b2:	2306      	movs	r3, #6
 80060b4:	e00a      	b.n	80060cc <HAL_GPIO_Init+0x228>
 80060b6:	2305      	movs	r3, #5
 80060b8:	e008      	b.n	80060cc <HAL_GPIO_Init+0x228>
 80060ba:	2304      	movs	r3, #4
 80060bc:	e006      	b.n	80060cc <HAL_GPIO_Init+0x228>
 80060be:	2303      	movs	r3, #3
 80060c0:	e004      	b.n	80060cc <HAL_GPIO_Init+0x228>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e002      	b.n	80060cc <HAL_GPIO_Init+0x228>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <HAL_GPIO_Init+0x228>
 80060ca:	2300      	movs	r3, #0
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	f002 0203 	and.w	r2, r2, #3
 80060d2:	0092      	lsls	r2, r2, #2
 80060d4:	4093      	lsls	r3, r2
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060dc:	4935      	ldr	r1, [pc, #212]	@ (80061b4 <HAL_GPIO_Init+0x310>)
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	089b      	lsrs	r3, r3, #2
 80060e2:	3302      	adds	r3, #2
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060ea:	4b3b      	ldr	r3, [pc, #236]	@ (80061d8 <HAL_GPIO_Init+0x334>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800610e:	4a32      	ldr	r2, [pc, #200]	@ (80061d8 <HAL_GPIO_Init+0x334>)
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006114:	4b30      	ldr	r3, [pc, #192]	@ (80061d8 <HAL_GPIO_Init+0x334>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	43db      	mvns	r3, r3
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4013      	ands	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006138:	4a27      	ldr	r2, [pc, #156]	@ (80061d8 <HAL_GPIO_Init+0x334>)
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800613e:	4b26      	ldr	r3, [pc, #152]	@ (80061d8 <HAL_GPIO_Init+0x334>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006162:	4a1d      	ldr	r2, [pc, #116]	@ (80061d8 <HAL_GPIO_Init+0x334>)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006168:	4b1b      	ldr	r3, [pc, #108]	@ (80061d8 <HAL_GPIO_Init+0x334>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	43db      	mvns	r3, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4013      	ands	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800618c:	4a12      	ldr	r2, [pc, #72]	@ (80061d8 <HAL_GPIO_Init+0x334>)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3301      	adds	r3, #1
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b0f      	cmp	r3, #15
 800619c:	f67f ae90 	bls.w	8005ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	3724      	adds	r7, #36	@ 0x24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40023800 	.word	0x40023800
 80061b4:	40013800 	.word	0x40013800
 80061b8:	40020000 	.word	0x40020000
 80061bc:	40020400 	.word	0x40020400
 80061c0:	40020800 	.word	0x40020800
 80061c4:	40020c00 	.word	0x40020c00
 80061c8:	40021000 	.word	0x40021000
 80061cc:	40021400 	.word	0x40021400
 80061d0:	40021800 	.word	0x40021800
 80061d4:	40021c00 	.word	0x40021c00
 80061d8:	40013c00 	.word	0x40013c00

080061dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	807b      	strh	r3, [r7, #2]
 80061e8:	4613      	mov	r3, r2
 80061ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061ec:	787b      	ldrb	r3, [r7, #1]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061f2:	887a      	ldrh	r2, [r7, #2]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061f8:	e003      	b.n	8006202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061fa:	887b      	ldrh	r3, [r7, #2]
 80061fc:	041a      	lsls	r2, r3, #16
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	619a      	str	r2, [r3, #24]
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
	...

08006210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e12b      	b.n	800647a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fd fd54 	bl	8003ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2224      	movs	r2, #36	@ 0x24
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006274:	f000 fd80 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 8006278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4a81      	ldr	r2, [pc, #516]	@ (8006484 <HAL_I2C_Init+0x274>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d807      	bhi.n	8006294 <HAL_I2C_Init+0x84>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a80      	ldr	r2, [pc, #512]	@ (8006488 <HAL_I2C_Init+0x278>)
 8006288:	4293      	cmp	r3, r2
 800628a:	bf94      	ite	ls
 800628c:	2301      	movls	r3, #1
 800628e:	2300      	movhi	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e006      	b.n	80062a2 <HAL_I2C_Init+0x92>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4a7d      	ldr	r2, [pc, #500]	@ (800648c <HAL_I2C_Init+0x27c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	bf94      	ite	ls
 800629c:	2301      	movls	r3, #1
 800629e:	2300      	movhi	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e0e7      	b.n	800647a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a78      	ldr	r2, [pc, #480]	@ (8006490 <HAL_I2C_Init+0x280>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	0c9b      	lsrs	r3, r3, #18
 80062b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a6a      	ldr	r2, [pc, #424]	@ (8006484 <HAL_I2C_Init+0x274>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d802      	bhi.n	80062e4 <HAL_I2C_Init+0xd4>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	3301      	adds	r3, #1
 80062e2:	e009      	b.n	80062f8 <HAL_I2C_Init+0xe8>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	4a69      	ldr	r2, [pc, #420]	@ (8006494 <HAL_I2C_Init+0x284>)
 80062f0:	fba2 2303 	umull	r2, r3, r2, r3
 80062f4:	099b      	lsrs	r3, r3, #6
 80062f6:	3301      	adds	r3, #1
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800630a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	495c      	ldr	r1, [pc, #368]	@ (8006484 <HAL_I2C_Init+0x274>)
 8006314:	428b      	cmp	r3, r1
 8006316:	d819      	bhi.n	800634c <HAL_I2C_Init+0x13c>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1e59      	subs	r1, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	fbb1 f3f3 	udiv	r3, r1, r3
 8006326:	1c59      	adds	r1, r3, #1
 8006328:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800632c:	400b      	ands	r3, r1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <HAL_I2C_Init+0x138>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1e59      	subs	r1, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006340:	3301      	adds	r3, #1
 8006342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006346:	e051      	b.n	80063ec <HAL_I2C_Init+0x1dc>
 8006348:	2304      	movs	r3, #4
 800634a:	e04f      	b.n	80063ec <HAL_I2C_Init+0x1dc>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d111      	bne.n	8006378 <HAL_I2C_Init+0x168>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1e58      	subs	r0, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6859      	ldr	r1, [r3, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	440b      	add	r3, r1
 8006362:	fbb0 f3f3 	udiv	r3, r0, r3
 8006366:	3301      	adds	r3, #1
 8006368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636c:	2b00      	cmp	r3, #0
 800636e:	bf0c      	ite	eq
 8006370:	2301      	moveq	r3, #1
 8006372:	2300      	movne	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e012      	b.n	800639e <HAL_I2C_Init+0x18e>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	1e58      	subs	r0, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	0099      	lsls	r1, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	fbb0 f3f3 	udiv	r3, r0, r3
 800638e:	3301      	adds	r3, #1
 8006390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf0c      	ite	eq
 8006398:	2301      	moveq	r3, #1
 800639a:	2300      	movne	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_I2C_Init+0x196>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e022      	b.n	80063ec <HAL_I2C_Init+0x1dc>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10e      	bne.n	80063cc <HAL_I2C_Init+0x1bc>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1e58      	subs	r0, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6859      	ldr	r1, [r3, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	440b      	add	r3, r1
 80063bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80063c0:	3301      	adds	r3, #1
 80063c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ca:	e00f      	b.n	80063ec <HAL_I2C_Init+0x1dc>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1e58      	subs	r0, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	0099      	lsls	r1, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	fbb0 f3f3 	udiv	r3, r0, r3
 80063e2:	3301      	adds	r3, #1
 80063e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	6809      	ldr	r1, [r1, #0]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69da      	ldr	r2, [r3, #28]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800641a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6911      	ldr	r1, [r2, #16]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68d2      	ldr	r2, [r2, #12]
 8006426:	4311      	orrs	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	430b      	orrs	r3, r1
 800642e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	000186a0 	.word	0x000186a0
 8006488:	001e847f 	.word	0x001e847f
 800648c:	003d08ff 	.word	0x003d08ff
 8006490:	431bde83 	.word	0x431bde83
 8006494:	10624dd3 	.word	0x10624dd3

08006498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e267      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d075      	beq.n	80065a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80064b6:	4b88      	ldr	r3, [pc, #544]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d00c      	beq.n	80064dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064c2:	4b85      	ldr	r3, [pc, #532]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d112      	bne.n	80064f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064ce:	4b82      	ldr	r3, [pc, #520]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064da:	d10b      	bne.n	80064f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064dc:	4b7e      	ldr	r3, [pc, #504]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d05b      	beq.n	80065a0 <HAL_RCC_OscConfig+0x108>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d157      	bne.n	80065a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e242      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064fc:	d106      	bne.n	800650c <HAL_RCC_OscConfig+0x74>
 80064fe:	4b76      	ldr	r3, [pc, #472]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a75      	ldr	r2, [pc, #468]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e01d      	b.n	8006548 <HAL_RCC_OscConfig+0xb0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006514:	d10c      	bne.n	8006530 <HAL_RCC_OscConfig+0x98>
 8006516:	4b70      	ldr	r3, [pc, #448]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a6f      	ldr	r2, [pc, #444]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 800651c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	4b6d      	ldr	r3, [pc, #436]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a6c      	ldr	r2, [pc, #432]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	e00b      	b.n	8006548 <HAL_RCC_OscConfig+0xb0>
 8006530:	4b69      	ldr	r3, [pc, #420]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a68      	ldr	r2, [pc, #416]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	4b66      	ldr	r3, [pc, #408]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a65      	ldr	r2, [pc, #404]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d013      	beq.n	8006578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006550:	f7fe fb64 	bl	8004c1c <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006558:	f7fe fb60 	bl	8004c1c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b64      	cmp	r3, #100	@ 0x64
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e207      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656a:	4b5b      	ldr	r3, [pc, #364]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0xc0>
 8006576:	e014      	b.n	80065a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006578:	f7fe fb50 	bl	8004c1c <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006580:	f7fe fb4c 	bl	8004c1c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b64      	cmp	r3, #100	@ 0x64
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e1f3      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006592:	4b51      	ldr	r3, [pc, #324]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0xe8>
 800659e:	e000      	b.n	80065a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d063      	beq.n	8006676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80065ae:	4b4a      	ldr	r3, [pc, #296]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 030c 	and.w	r3, r3, #12
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00b      	beq.n	80065d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ba:	4b47      	ldr	r3, [pc, #284]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d11c      	bne.n	8006600 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065c6:	4b44      	ldr	r3, [pc, #272]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d116      	bne.n	8006600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065d2:	4b41      	ldr	r3, [pc, #260]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_RCC_OscConfig+0x152>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d001      	beq.n	80065ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e1c7      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ea:	4b3b      	ldr	r3, [pc, #236]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4937      	ldr	r1, [pc, #220]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065fe:	e03a      	b.n	8006676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d020      	beq.n	800664a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006608:	4b34      	ldr	r3, [pc, #208]	@ (80066dc <HAL_RCC_OscConfig+0x244>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660e:	f7fe fb05 	bl	8004c1c <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006616:	f7fe fb01 	bl	8004c1c <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e1a8      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006628:	4b2b      	ldr	r3, [pc, #172]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006634:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	4925      	ldr	r1, [pc, #148]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]
 8006648:	e015      	b.n	8006676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800664a:	4b24      	ldr	r3, [pc, #144]	@ (80066dc <HAL_RCC_OscConfig+0x244>)
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fe fae4 	bl	8004c1c <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006658:	f7fe fae0 	bl	8004c1c <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e187      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666a:	4b1b      	ldr	r3, [pc, #108]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d036      	beq.n	80066f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800668a:	4b15      	ldr	r3, [pc, #84]	@ (80066e0 <HAL_RCC_OscConfig+0x248>)
 800668c:	2201      	movs	r2, #1
 800668e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006690:	f7fe fac4 	bl	8004c1c <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006698:	f7fe fac0 	bl	8004c1c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e167      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066aa:	4b0b      	ldr	r3, [pc, #44]	@ (80066d8 <HAL_RCC_OscConfig+0x240>)
 80066ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0x200>
 80066b6:	e01b      	b.n	80066f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b8:	4b09      	ldr	r3, [pc, #36]	@ (80066e0 <HAL_RCC_OscConfig+0x248>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066be:	f7fe faad 	bl	8004c1c <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c4:	e00e      	b.n	80066e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c6:	f7fe faa9 	bl	8004c1c <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d907      	bls.n	80066e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e150      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
 80066d8:	40023800 	.word	0x40023800
 80066dc:	42470000 	.word	0x42470000
 80066e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e4:	4b88      	ldr	r3, [pc, #544]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 80066e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1ea      	bne.n	80066c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8097 	beq.w	800682c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006702:	4b81      	ldr	r3, [pc, #516]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10f      	bne.n	800672e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	4b7d      	ldr	r3, [pc, #500]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006716:	4a7c      	ldr	r2, [pc, #496]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800671c:	6413      	str	r3, [r2, #64]	@ 0x40
 800671e:	4b7a      	ldr	r3, [pc, #488]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800672a:	2301      	movs	r3, #1
 800672c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672e:	4b77      	ldr	r3, [pc, #476]	@ (800690c <HAL_RCC_OscConfig+0x474>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d118      	bne.n	800676c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800673a:	4b74      	ldr	r3, [pc, #464]	@ (800690c <HAL_RCC_OscConfig+0x474>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a73      	ldr	r2, [pc, #460]	@ (800690c <HAL_RCC_OscConfig+0x474>)
 8006740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006746:	f7fe fa69 	bl	8004c1c <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	e008      	b.n	8006760 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800674e:	f7fe fa65 	bl	8004c1c <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d901      	bls.n	8006760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e10c      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006760:	4b6a      	ldr	r3, [pc, #424]	@ (800690c <HAL_RCC_OscConfig+0x474>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f0      	beq.n	800674e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d106      	bne.n	8006782 <HAL_RCC_OscConfig+0x2ea>
 8006774:	4b64      	ldr	r3, [pc, #400]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006778:	4a63      	ldr	r2, [pc, #396]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006780:	e01c      	b.n	80067bc <HAL_RCC_OscConfig+0x324>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	2b05      	cmp	r3, #5
 8006788:	d10c      	bne.n	80067a4 <HAL_RCC_OscConfig+0x30c>
 800678a:	4b5f      	ldr	r3, [pc, #380]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 800678c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678e:	4a5e      	ldr	r2, [pc, #376]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006790:	f043 0304 	orr.w	r3, r3, #4
 8006794:	6713      	str	r3, [r2, #112]	@ 0x70
 8006796:	4b5c      	ldr	r3, [pc, #368]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679a:	4a5b      	ldr	r2, [pc, #364]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067a2:	e00b      	b.n	80067bc <HAL_RCC_OscConfig+0x324>
 80067a4:	4b58      	ldr	r3, [pc, #352]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 80067a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a8:	4a57      	ldr	r2, [pc, #348]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b0:	4b55      	ldr	r3, [pc, #340]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 80067b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b4:	4a54      	ldr	r2, [pc, #336]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 80067b6:	f023 0304 	bic.w	r3, r3, #4
 80067ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d015      	beq.n	80067f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c4:	f7fe fa2a 	bl	8004c1c <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fe fa26 	bl	8004c1c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e0cb      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e2:	4b49      	ldr	r3, [pc, #292]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0ee      	beq.n	80067cc <HAL_RCC_OscConfig+0x334>
 80067ee:	e014      	b.n	800681a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f0:	f7fe fa14 	bl	8004c1c <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f6:	e00a      	b.n	800680e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f8:	f7fe fa10 	bl	8004c1c <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e0b5      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800680e:	4b3e      	ldr	r3, [pc, #248]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1ee      	bne.n	80067f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d105      	bne.n	800682c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006820:	4b39      	ldr	r3, [pc, #228]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006824:	4a38      	ldr	r2, [pc, #224]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800682a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80a1 	beq.w	8006978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006836:	4b34      	ldr	r3, [pc, #208]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b08      	cmp	r3, #8
 8006840:	d05c      	beq.n	80068fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d141      	bne.n	80068ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800684a:	4b31      	ldr	r3, [pc, #196]	@ (8006910 <HAL_RCC_OscConfig+0x478>)
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006850:	f7fe f9e4 	bl	8004c1c <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006858:	f7fe f9e0 	bl	8004c1c <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e087      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800686a:	4b27      	ldr	r3, [pc, #156]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f0      	bne.n	8006858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69da      	ldr	r2, [r3, #28]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	019b      	lsls	r3, r3, #6
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	085b      	lsrs	r3, r3, #1
 800688e:	3b01      	subs	r3, #1
 8006890:	041b      	lsls	r3, r3, #16
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	061b      	lsls	r3, r3, #24
 800689a:	491b      	ldr	r1, [pc, #108]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006910 <HAL_RCC_OscConfig+0x478>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a6:	f7fe f9b9 	bl	8004c1c <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ac:	e008      	b.n	80068c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ae:	f7fe f9b5 	bl	8004c1c <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e05c      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c0:	4b11      	ldr	r3, [pc, #68]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0f0      	beq.n	80068ae <HAL_RCC_OscConfig+0x416>
 80068cc:	e054      	b.n	8006978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ce:	4b10      	ldr	r3, [pc, #64]	@ (8006910 <HAL_RCC_OscConfig+0x478>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d4:	f7fe f9a2 	bl	8004c1c <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068dc:	f7fe f99e 	bl	8004c1c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e045      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ee:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <HAL_RCC_OscConfig+0x470>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x444>
 80068fa:	e03d      	b.n	8006978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d107      	bne.n	8006914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e038      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
 8006908:	40023800 	.word	0x40023800
 800690c:	40007000 	.word	0x40007000
 8006910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <HAL_RCC_OscConfig+0x4ec>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d028      	beq.n	8006974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800692c:	429a      	cmp	r2, r3
 800692e:	d121      	bne.n	8006974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800693a:	429a      	cmp	r2, r3
 800693c:	d11a      	bne.n	8006974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006944:	4013      	ands	r3, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800694a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800694c:	4293      	cmp	r3, r2
 800694e:	d111      	bne.n	8006974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	3b01      	subs	r3, #1
 800695e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006960:	429a      	cmp	r2, r3
 8006962:	d107      	bne.n	8006974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006970:	429a      	cmp	r2, r3
 8006972:	d001      	beq.n	8006978 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40023800 	.word	0x40023800

08006988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0cc      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800699c:	4b68      	ldr	r3, [pc, #416]	@ (8006b40 <HAL_RCC_ClockConfig+0x1b8>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d90c      	bls.n	80069c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069aa:	4b65      	ldr	r3, [pc, #404]	@ (8006b40 <HAL_RCC_ClockConfig+0x1b8>)
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b2:	4b63      	ldr	r3, [pc, #396]	@ (8006b40 <HAL_RCC_ClockConfig+0x1b8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d001      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0b8      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d020      	beq.n	8006a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069dc:	4b59      	ldr	r3, [pc, #356]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4a58      	ldr	r2, [pc, #352]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069f4:	4b53      	ldr	r3, [pc, #332]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4a52      	ldr	r2, [pc, #328]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80069fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a00:	4b50      	ldr	r3, [pc, #320]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	494d      	ldr	r1, [pc, #308]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d044      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d107      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a26:	4b47      	ldr	r3, [pc, #284]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d119      	bne.n	8006a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e07f      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d003      	beq.n	8006a46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d107      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a46:	4b3f      	ldr	r3, [pc, #252]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e06f      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a56:	4b3b      	ldr	r3, [pc, #236]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e067      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a66:	4b37      	ldr	r3, [pc, #220]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f023 0203 	bic.w	r2, r3, #3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	4934      	ldr	r1, [pc, #208]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a78:	f7fe f8d0 	bl	8004c1c <HAL_GetTick>
 8006a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a7e:	e00a      	b.n	8006a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a80:	f7fe f8cc 	bl	8004c1c <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e04f      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a96:	4b2b      	ldr	r3, [pc, #172]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 020c 	and.w	r2, r3, #12
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d1eb      	bne.n	8006a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aa8:	4b25      	ldr	r3, [pc, #148]	@ (8006b40 <HAL_RCC_ClockConfig+0x1b8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d20c      	bcs.n	8006ad0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab6:	4b22      	ldr	r3, [pc, #136]	@ (8006b40 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abe:	4b20      	ldr	r3, [pc, #128]	@ (8006b40 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d001      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e032      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006adc:	4b19      	ldr	r3, [pc, #100]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4916      	ldr	r1, [pc, #88]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006afa:	4b12      	ldr	r3, [pc, #72]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	490e      	ldr	r1, [pc, #56]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b0e:	f000 f821 	bl	8006b54 <HAL_RCC_GetSysClockFreq>
 8006b12:	4602      	mov	r2, r0
 8006b14:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	091b      	lsrs	r3, r3, #4
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	490a      	ldr	r1, [pc, #40]	@ (8006b48 <HAL_RCC_ClockConfig+0x1c0>)
 8006b20:	5ccb      	ldrb	r3, [r1, r3]
 8006b22:	fa22 f303 	lsr.w	r3, r2, r3
 8006b26:	4a09      	ldr	r2, [pc, #36]	@ (8006b4c <HAL_RCC_ClockConfig+0x1c4>)
 8006b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006b2a:	4b09      	ldr	r3, [pc, #36]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe f830 	bl	8004b94 <HAL_InitTick>

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40023c00 	.word	0x40023c00
 8006b44:	40023800 	.word	0x40023800
 8006b48:	0800df5c 	.word	0x0800df5c
 8006b4c:	200000f0 	.word	0x200000f0
 8006b50:	200000f4 	.word	0x200000f4

08006b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b58:	b094      	sub	sp, #80	@ 0x50
 8006b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b6c:	4b79      	ldr	r3, [pc, #484]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 030c 	and.w	r3, r3, #12
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d00d      	beq.n	8006b94 <HAL_RCC_GetSysClockFreq+0x40>
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	f200 80e1 	bhi.w	8006d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <HAL_RCC_GetSysClockFreq+0x34>
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d003      	beq.n	8006b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8006b86:	e0db      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b88:	4b73      	ldr	r3, [pc, #460]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b8c:	e0db      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b8e:	4b73      	ldr	r3, [pc, #460]	@ (8006d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8006b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b92:	e0d8      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b94:	4b6f      	ldr	r3, [pc, #444]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d063      	beq.n	8006c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006baa:	4b6a      	ldr	r3, [pc, #424]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	099b      	lsrs	r3, r3, #6
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	462b      	mov	r3, r5
 8006bca:	f04f 0000 	mov.w	r0, #0
 8006bce:	f04f 0100 	mov.w	r1, #0
 8006bd2:	0159      	lsls	r1, r3, #5
 8006bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bd8:	0150      	lsls	r0, r2, #5
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4621      	mov	r1, r4
 8006be0:	1a51      	subs	r1, r2, r1
 8006be2:	6139      	str	r1, [r7, #16]
 8006be4:	4629      	mov	r1, r5
 8006be6:	eb63 0301 	sbc.w	r3, r3, r1
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	018b      	lsls	r3, r1, #6
 8006bfc:	4651      	mov	r1, sl
 8006bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c02:	4651      	mov	r1, sl
 8006c04:	018a      	lsls	r2, r1, #6
 8006c06:	4651      	mov	r1, sl
 8006c08:	ebb2 0801 	subs.w	r8, r2, r1
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	f04f 0300 	mov.w	r3, #0
 8006c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c26:	4690      	mov	r8, r2
 8006c28:	4699      	mov	r9, r3
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	eb18 0303 	adds.w	r3, r8, r3
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	462b      	mov	r3, r5
 8006c34:	eb49 0303 	adc.w	r3, r9, r3
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	f04f 0200 	mov.w	r2, #0
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c46:	4629      	mov	r1, r5
 8006c48:	024b      	lsls	r3, r1, #9
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c50:	4621      	mov	r1, r4
 8006c52:	024a      	lsls	r2, r1, #9
 8006c54:	4610      	mov	r0, r2
 8006c56:	4619      	mov	r1, r3
 8006c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c64:	f7fa f810 	bl	8000c88 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c70:	e058      	b.n	8006d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c72:	4b38      	ldr	r3, [pc, #224]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	099b      	lsrs	r3, r3, #6
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c82:	623b      	str	r3, [r7, #32]
 8006c84:	2300      	movs	r3, #0
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	464b      	mov	r3, r9
 8006c90:	f04f 0000 	mov.w	r0, #0
 8006c94:	f04f 0100 	mov.w	r1, #0
 8006c98:	0159      	lsls	r1, r3, #5
 8006c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c9e:	0150      	lsls	r0, r2, #5
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006caa:	4649      	mov	r1, r9
 8006cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8006cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	00eb      	lsls	r3, r5, #3
 8006cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cda:	00e2      	lsls	r2, r4, #3
 8006cdc:	4614      	mov	r4, r2
 8006cde:	461d      	mov	r5, r3
 8006ce0:	4643      	mov	r3, r8
 8006ce2:	18e3      	adds	r3, r4, r3
 8006ce4:	603b      	str	r3, [r7, #0]
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	eb45 0303 	adc.w	r3, r5, r3
 8006cec:	607b      	str	r3, [r7, #4]
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	f04f 0300 	mov.w	r3, #0
 8006cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	028b      	lsls	r3, r1, #10
 8006cfe:	4621      	mov	r1, r4
 8006d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d04:	4621      	mov	r1, r4
 8006d06:	028a      	lsls	r2, r1, #10
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d0e:	2200      	movs	r2, #0
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	61fa      	str	r2, [r7, #28]
 8006d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d18:	f7f9 ffb6 	bl	8000c88 <__aeabi_uldivmod>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4613      	mov	r3, r2
 8006d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d24:	4b0b      	ldr	r3, [pc, #44]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	0c1b      	lsrs	r3, r3, #16
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	3301      	adds	r3, #1
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d3e:	e002      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3750      	adds	r7, #80	@ 0x50
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	40023800 	.word	0x40023800
 8006d58:	00f42400 	.word	0x00f42400
 8006d5c:	007a1200 	.word	0x007a1200

08006d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d64:	4b03      	ldr	r3, [pc, #12]	@ (8006d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	200000f0 	.word	0x200000f0

08006d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d7c:	f7ff fff0 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 8006d80:	4602      	mov	r2, r0
 8006d82:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	0a9b      	lsrs	r3, r3, #10
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	4903      	ldr	r1, [pc, #12]	@ (8006d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d8e:	5ccb      	ldrb	r3, [r1, r3]
 8006d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	0800df6c 	.word	0x0800df6c

08006da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006da4:	f7ff ffdc 	bl	8006d60 <HAL_RCC_GetHCLKFreq>
 8006da8:	4602      	mov	r2, r0
 8006daa:	4b05      	ldr	r3, [pc, #20]	@ (8006dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	0b5b      	lsrs	r3, r3, #13
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	4903      	ldr	r1, [pc, #12]	@ (8006dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006db6:	5ccb      	ldrb	r3, [r1, r3]
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	0800df6c 	.word	0x0800df6c

08006dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e041      	b.n	8006e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fd f992 	bl	8004118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f000 fc72 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e041      	b.n	8006efc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d106      	bne.n	8006e92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fd f8e9 	bl	8004064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f000 fc23 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d109      	bne.n	8006f28 <HAL_TIM_PWM_Start+0x24>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	bf14      	ite	ne
 8006f20:	2301      	movne	r3, #1
 8006f22:	2300      	moveq	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	e022      	b.n	8006f6e <HAL_TIM_PWM_Start+0x6a>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d109      	bne.n	8006f42 <HAL_TIM_PWM_Start+0x3e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	bf14      	ite	ne
 8006f3a:	2301      	movne	r3, #1
 8006f3c:	2300      	moveq	r3, #0
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	e015      	b.n	8006f6e <HAL_TIM_PWM_Start+0x6a>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d109      	bne.n	8006f5c <HAL_TIM_PWM_Start+0x58>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	bf14      	ite	ne
 8006f54:	2301      	movne	r3, #1
 8006f56:	2300      	moveq	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	e008      	b.n	8006f6e <HAL_TIM_PWM_Start+0x6a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	bf14      	ite	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2300      	moveq	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e07c      	b.n	8007070 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_PWM_Start+0x82>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f84:	e013      	b.n	8006fae <HAL_TIM_PWM_Start+0xaa>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_PWM_Start+0x92>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f94:	e00b      	b.n	8006fae <HAL_TIM_PWM_Start+0xaa>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d104      	bne.n	8006fa6 <HAL_TIM_PWM_Start+0xa2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fa4:	e003      	b.n	8006fae <HAL_TIM_PWM_Start+0xaa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fdf6 	bl	8007ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007078 <HAL_TIM_PWM_Start+0x174>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_PWM_Start+0xcc>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a2c      	ldr	r2, [pc, #176]	@ (800707c <HAL_TIM_PWM_Start+0x178>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIM_PWM_Start+0xd0>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <HAL_TIM_PWM_Start+0xd2>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d007      	beq.n	8006fea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a22      	ldr	r2, [pc, #136]	@ (8007078 <HAL_TIM_PWM_Start+0x174>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d022      	beq.n	800703a <HAL_TIM_PWM_Start+0x136>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffc:	d01d      	beq.n	800703a <HAL_TIM_PWM_Start+0x136>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1f      	ldr	r2, [pc, #124]	@ (8007080 <HAL_TIM_PWM_Start+0x17c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d018      	beq.n	800703a <HAL_TIM_PWM_Start+0x136>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1d      	ldr	r2, [pc, #116]	@ (8007084 <HAL_TIM_PWM_Start+0x180>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d013      	beq.n	800703a <HAL_TIM_PWM_Start+0x136>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a1c      	ldr	r2, [pc, #112]	@ (8007088 <HAL_TIM_PWM_Start+0x184>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <HAL_TIM_PWM_Start+0x136>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a16      	ldr	r2, [pc, #88]	@ (800707c <HAL_TIM_PWM_Start+0x178>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d009      	beq.n	800703a <HAL_TIM_PWM_Start+0x136>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a18      	ldr	r2, [pc, #96]	@ (800708c <HAL_TIM_PWM_Start+0x188>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <HAL_TIM_PWM_Start+0x136>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a16      	ldr	r2, [pc, #88]	@ (8007090 <HAL_TIM_PWM_Start+0x18c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d111      	bne.n	800705e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b06      	cmp	r3, #6
 800704a:	d010      	beq.n	800706e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705c:	e007      	b.n	800706e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0201 	orr.w	r2, r2, #1
 800706c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40010000 	.word	0x40010000
 800707c:	40010400 	.word	0x40010400
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40014000 	.word	0x40014000
 8007090:	40001800 	.word	0x40001800

08007094 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e097      	b.n	80071d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7fc fe59 	bl	8003d74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070d8:	f023 0307 	bic.w	r3, r3, #7
 80070dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4619      	mov	r1, r3
 80070e8:	4610      	mov	r0, r2
 80070ea:	f000 fb01 	bl	80076f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	4313      	orrs	r3, r2
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007134:	f023 030c 	bic.w	r3, r3, #12
 8007138:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007140:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	4313      	orrs	r3, r2
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	011a      	lsls	r2, r3, #4
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	031b      	lsls	r3, r3, #12
 8007164:	4313      	orrs	r3, r2
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007172:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	4313      	orrs	r3, r2
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007200:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007208:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d110      	bne.n	8007232 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d102      	bne.n	800721c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007216:	7b7b      	ldrb	r3, [r7, #13]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d001      	beq.n	8007220 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e089      	b.n	8007334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007230:	e031      	b.n	8007296 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b04      	cmp	r3, #4
 8007236:	d110      	bne.n	800725a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d102      	bne.n	8007244 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800723e:	7b3b      	ldrb	r3, [r7, #12]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d001      	beq.n	8007248 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e075      	b.n	8007334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007258:	e01d      	b.n	8007296 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d108      	bne.n	8007272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d105      	bne.n	8007272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007266:	7b7b      	ldrb	r3, [r7, #13]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d102      	bne.n	8007272 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800726c:	7b3b      	ldrb	r3, [r7, #12]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d001      	beq.n	8007276 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e05e      	b.n	8007334 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2202      	movs	r2, #2
 800727a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <HAL_TIM_Encoder_Start_IT+0xc4>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d010      	beq.n	80072c4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80072a2:	e01f      	b.n	80072e4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2201      	movs	r2, #1
 80072aa:	2100      	movs	r1, #0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fc7b 	bl	8007ba8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0202 	orr.w	r2, r2, #2
 80072c0:	60da      	str	r2, [r3, #12]
      break;
 80072c2:	e02e      	b.n	8007322 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2201      	movs	r2, #1
 80072ca:	2104      	movs	r1, #4
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fc6b 	bl	8007ba8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0204 	orr.w	r2, r2, #4
 80072e0:	60da      	str	r2, [r3, #12]
      break;
 80072e2:	e01e      	b.n	8007322 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2201      	movs	r2, #1
 80072ea:	2100      	movs	r1, #0
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fc5b 	bl	8007ba8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2201      	movs	r2, #1
 80072f8:	2104      	movs	r1, #4
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fc54 	bl	8007ba8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0202 	orr.w	r2, r2, #2
 800730e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0204 	orr.w	r2, r2, #4
 800731e:	60da      	str	r2, [r3, #12]
      break;
 8007320:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0201 	orr.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d020      	beq.n	80073a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01b      	beq.n	80073a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0202 	mvn.w	r2, #2
 8007370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7fb fb69 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 800738c:	e005      	b.n	800739a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f990 	bl	80076b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f997 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d020      	beq.n	80073ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01b      	beq.n	80073ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0204 	mvn.w	r2, #4
 80073bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fb fb43 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 80073d8:	e005      	b.n	80073e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f96a 	bl	80076b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f971 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 0308 	and.w	r3, r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d020      	beq.n	8007438 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01b      	beq.n	8007438 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0208 	mvn.w	r2, #8
 8007408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2204      	movs	r2, #4
 800740e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fb fb1d 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 8007424:	e005      	b.n	8007432 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f944 	bl	80076b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f94b 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b00      	cmp	r3, #0
 8007440:	d020      	beq.n	8007484 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01b      	beq.n	8007484 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0210 	mvn.w	r2, #16
 8007454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2208      	movs	r2, #8
 800745a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fb faf7 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 8007470:	e005      	b.n	800747e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f91e 	bl	80076b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f925 	bl	80076c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0201 	mvn.w	r2, #1
 80074a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f8fc 	bl	80076a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d007      	beq.n	80074cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80074c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fc1a 	bl	8007d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00c      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f8f6 	bl	80076dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00c      	beq.n	8007514 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0220 	mvn.w	r2, #32
 800750c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fbec 	bl	8007cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007536:	2302      	movs	r3, #2
 8007538:	e0ae      	b.n	8007698 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b0c      	cmp	r3, #12
 8007546:	f200 809f 	bhi.w	8007688 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800754a:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007585 	.word	0x08007585
 8007554:	08007689 	.word	0x08007689
 8007558:	08007689 	.word	0x08007689
 800755c:	08007689 	.word	0x08007689
 8007560:	080075c5 	.word	0x080075c5
 8007564:	08007689 	.word	0x08007689
 8007568:	08007689 	.word	0x08007689
 800756c:	08007689 	.word	0x08007689
 8007570:	08007607 	.word	0x08007607
 8007574:	08007689 	.word	0x08007689
 8007578:	08007689 	.word	0x08007689
 800757c:	08007689 	.word	0x08007689
 8007580:	08007647 	.word	0x08007647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	4618      	mov	r0, r3
 800758c:	f000 f95c 	bl	8007848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0208 	orr.w	r2, r2, #8
 800759e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0204 	bic.w	r2, r2, #4
 80075ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6999      	ldr	r1, [r3, #24]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	619a      	str	r2, [r3, #24]
      break;
 80075c2:	e064      	b.n	800768e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f9ac 	bl	8007928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6999      	ldr	r1, [r3, #24]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	021a      	lsls	r2, r3, #8
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	619a      	str	r2, [r3, #24]
      break;
 8007604:	e043      	b.n	800768e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fa01 	bl	8007a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0208 	orr.w	r2, r2, #8
 8007620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69da      	ldr	r2, [r3, #28]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0204 	bic.w	r2, r2, #4
 8007630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69d9      	ldr	r1, [r3, #28]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	61da      	str	r2, [r3, #28]
      break;
 8007644:	e023      	b.n	800768e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fa55 	bl	8007afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69da      	ldr	r2, [r3, #28]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69d9      	ldr	r1, [r3, #28]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	021a      	lsls	r2, r3, #8
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	61da      	str	r2, [r3, #28]
      break;
 8007686:	e002      	b.n	800768e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	75fb      	strb	r3, [r7, #23]
      break;
 800768c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a46      	ldr	r2, [pc, #280]	@ (800781c <TIM_Base_SetConfig+0x12c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	d00f      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a43      	ldr	r2, [pc, #268]	@ (8007820 <TIM_Base_SetConfig+0x130>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a42      	ldr	r2, [pc, #264]	@ (8007824 <TIM_Base_SetConfig+0x134>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d007      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a41      	ldr	r2, [pc, #260]	@ (8007828 <TIM_Base_SetConfig+0x138>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a40      	ldr	r2, [pc, #256]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d108      	bne.n	8007742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a35      	ldr	r2, [pc, #212]	@ (800781c <TIM_Base_SetConfig+0x12c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d02b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007750:	d027      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a32      	ldr	r2, [pc, #200]	@ (8007820 <TIM_Base_SetConfig+0x130>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d023      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a31      	ldr	r2, [pc, #196]	@ (8007824 <TIM_Base_SetConfig+0x134>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d01f      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a30      	ldr	r2, [pc, #192]	@ (8007828 <TIM_Base_SetConfig+0x138>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2f      	ldr	r2, [pc, #188]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d017      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2e      	ldr	r2, [pc, #184]	@ (8007830 <TIM_Base_SetConfig+0x140>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a2d      	ldr	r2, [pc, #180]	@ (8007834 <TIM_Base_SetConfig+0x144>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00f      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a2c      	ldr	r2, [pc, #176]	@ (8007838 <TIM_Base_SetConfig+0x148>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a2b      	ldr	r2, [pc, #172]	@ (800783c <TIM_Base_SetConfig+0x14c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a2a      	ldr	r2, [pc, #168]	@ (8007840 <TIM_Base_SetConfig+0x150>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a29      	ldr	r2, [pc, #164]	@ (8007844 <TIM_Base_SetConfig+0x154>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a10      	ldr	r2, [pc, #64]	@ (800781c <TIM_Base_SetConfig+0x12c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0xf8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a12      	ldr	r2, [pc, #72]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d103      	bne.n	80077f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d105      	bne.n	800780e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f023 0201 	bic.w	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	611a      	str	r2, [r3, #16]
  }
}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40010000 	.word	0x40010000
 8007820:	40000400 	.word	0x40000400
 8007824:	40000800 	.word	0x40000800
 8007828:	40000c00 	.word	0x40000c00
 800782c:	40010400 	.word	0x40010400
 8007830:	40014000 	.word	0x40014000
 8007834:	40014400 	.word	0x40014400
 8007838:	40014800 	.word	0x40014800
 800783c:	40001800 	.word	0x40001800
 8007840:	40001c00 	.word	0x40001c00
 8007844:	40002000 	.word	0x40002000

08007848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f023 0201 	bic.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f023 0302 	bic.w	r3, r3, #2
 8007890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a20      	ldr	r2, [pc, #128]	@ (8007920 <TIM_OC1_SetConfig+0xd8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d003      	beq.n	80078ac <TIM_OC1_SetConfig+0x64>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007924 <TIM_OC1_SetConfig+0xdc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d10c      	bne.n	80078c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f023 0308 	bic.w	r3, r3, #8
 80078b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f023 0304 	bic.w	r3, r3, #4
 80078c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a15      	ldr	r2, [pc, #84]	@ (8007920 <TIM_OC1_SetConfig+0xd8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_OC1_SetConfig+0x8e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a14      	ldr	r2, [pc, #80]	@ (8007924 <TIM_OC1_SetConfig+0xdc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d111      	bne.n	80078fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	621a      	str	r2, [r3, #32]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400

08007928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	f023 0210 	bic.w	r2, r3, #16
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800795e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f023 0320 	bic.w	r3, r3, #32
 8007972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a22      	ldr	r2, [pc, #136]	@ (8007a0c <TIM_OC2_SetConfig+0xe4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_OC2_SetConfig+0x68>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a21      	ldr	r2, [pc, #132]	@ (8007a10 <TIM_OC2_SetConfig+0xe8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10d      	bne.n	80079ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a17      	ldr	r2, [pc, #92]	@ (8007a0c <TIM_OC2_SetConfig+0xe4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_OC2_SetConfig+0x94>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a16      	ldr	r2, [pc, #88]	@ (8007a10 <TIM_OC2_SetConfig+0xe8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d113      	bne.n	80079e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40010400 	.word	0x40010400

08007a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0303 	bic.w	r3, r3, #3
 8007a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a21      	ldr	r2, [pc, #132]	@ (8007af4 <TIM_OC3_SetConfig+0xe0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d003      	beq.n	8007a7a <TIM_OC3_SetConfig+0x66>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a20      	ldr	r2, [pc, #128]	@ (8007af8 <TIM_OC3_SetConfig+0xe4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d10d      	bne.n	8007a96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a16      	ldr	r2, [pc, #88]	@ (8007af4 <TIM_OC3_SetConfig+0xe0>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d003      	beq.n	8007aa6 <TIM_OC3_SetConfig+0x92>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a15      	ldr	r2, [pc, #84]	@ (8007af8 <TIM_OC3_SetConfig+0xe4>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d113      	bne.n	8007ace <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	011b      	lsls	r3, r3, #4
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	621a      	str	r2, [r3, #32]
}
 8007ae8:	bf00      	nop
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	40010000 	.word	0x40010000
 8007af8:	40010400 	.word	0x40010400

08007afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	031b      	lsls	r3, r3, #12
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a12      	ldr	r2, [pc, #72]	@ (8007ba0 <TIM_OC4_SetConfig+0xa4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_OC4_SetConfig+0x68>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a11      	ldr	r2, [pc, #68]	@ (8007ba4 <TIM_OC4_SetConfig+0xa8>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d109      	bne.n	8007b78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	019b      	lsls	r3, r3, #6
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	621a      	str	r2, [r3, #32]
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40010000 	.word	0x40010000
 8007ba4:	40010400 	.word	0x40010400

08007ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	2201      	movs	r2, #1
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1a      	ldr	r2, [r3, #32]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	401a      	ands	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a1a      	ldr	r2, [r3, #32]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8007be0:	431a      	orrs	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e05a      	b.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a21      	ldr	r2, [pc, #132]	@ (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d022      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c58:	d01d      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d018      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d013      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a1a      	ldr	r2, [pc, #104]	@ (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00e      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a18      	ldr	r2, [pc, #96]	@ (8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d009      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a17      	ldr	r2, [pc, #92]	@ (8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a15      	ldr	r2, [pc, #84]	@ (8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10c      	bne.n	8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40010000 	.word	0x40010000
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800
 8007cdc:	40000c00 	.word	0x40000c00
 8007ce0:	40010400 	.word	0x40010400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40001800 	.word	0x40001800

08007cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e042      	b.n	8007dac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fc fae2 	bl	8004304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2224      	movs	r2, #36	@ 0x24
 8007d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fe6b 	bl	8008a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695a      	ldr	r2, [r3, #20]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d112      	bne.n	8007df4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <HAL_UART_Receive_DMA+0x26>
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e00b      	b.n	8007df6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007de4:	88fb      	ldrh	r3, [r7, #6]
 8007de6:	461a      	mov	r2, r3
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 fbc2 	bl	8008574 <UART_Start_Receive_DMA>
 8007df0:	4603      	mov	r3, r0
 8007df2:	e000      	b.n	8007df6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b0ba      	sub	sp, #232	@ 0xe8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10f      	bne.n	8007e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <HAL_UART_IRQHandler+0x66>
 8007e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fd29 	bl	80088b6 <UART_Receive_IT>
      return;
 8007e64:	e25b      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 80de 	beq.w	800802c <HAL_UART_IRQHandler+0x22c>
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80d1 	beq.w	800802c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <HAL_UART_IRQHandler+0xae>
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea6:	f043 0201 	orr.w	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <HAL_UART_IRQHandler+0xd2>
 8007eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eca:	f043 0202 	orr.w	r2, r3, #2
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00b      	beq.n	8007ef6 <HAL_UART_IRQHandler+0xf6>
 8007ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eee:	f043 0204 	orr.w	r2, r3, #4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d011      	beq.n	8007f26 <HAL_UART_IRQHandler+0x126>
 8007f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d105      	bne.n	8007f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d005      	beq.n	8007f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1e:	f043 0208 	orr.w	r2, r3, #8
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 81f2 	beq.w	8008314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d008      	beq.n	8007f4e <HAL_UART_IRQHandler+0x14e>
 8007f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fcb4 	bl	80088b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f58:	2b40      	cmp	r3, #64	@ 0x40
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2301      	moveq	r3, #1
 8007f5e:	2300      	movne	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d103      	bne.n	8007f7a <HAL_UART_IRQHandler+0x17a>
 8007f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d04f      	beq.n	800801a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fbbc 	bl	80086f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f8a:	2b40      	cmp	r3, #64	@ 0x40
 8007f8c:	d141      	bne.n	8008012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3314      	adds	r3, #20
 8007f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3314      	adds	r3, #20
 8007fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1d9      	bne.n	8007f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d013      	beq.n	800800a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80081e0 <HAL_UART_IRQHandler+0x3e0>)
 8007fe8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fd fccc 	bl	800598c <HAL_DMA_Abort_IT>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d016      	beq.n	8008028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008008:	e00e      	b.n	8008028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f99e 	bl	800834c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	e00a      	b.n	8008028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f99a 	bl	800834c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	e006      	b.n	8008028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f996 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008026:	e175      	b.n	8008314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	bf00      	nop
    return;
 800802a:	e173      	b.n	8008314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008030:	2b01      	cmp	r3, #1
 8008032:	f040 814f 	bne.w	80082d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8148 	beq.w	80082d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8141 	beq.w	80082d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008052:	2300      	movs	r3, #0
 8008054:	60bb      	str	r3, [r7, #8]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	60bb      	str	r3, [r7, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	60bb      	str	r3, [r7, #8]
 8008066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008072:	2b40      	cmp	r3, #64	@ 0x40
 8008074:	f040 80b6 	bne.w	80081e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8145 	beq.w	8008318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008096:	429a      	cmp	r2, r3
 8008098:	f080 813e 	bcs.w	8008318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ae:	f000 8088 	beq.w	80081c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	330c      	adds	r3, #12
 80080b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	330c      	adds	r3, #12
 80080da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80080de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1d9      	bne.n	80080b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3314      	adds	r3, #20
 8008104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800810e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3314      	adds	r3, #20
 800811e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800812a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e1      	bne.n	80080fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3314      	adds	r3, #20
 8008140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800814a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800814c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3314      	adds	r3, #20
 800815a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800815e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800816c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e3      	bne.n	800813a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	330c      	adds	r3, #12
 8008186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008192:	f023 0310 	bic.w	r3, r3, #16
 8008196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	330c      	adds	r3, #12
 80081a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80081a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80081a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e3      	bne.n	8008180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fd fb75 	bl	80058ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f8c1 	bl	8008360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081de:	e09b      	b.n	8008318 <HAL_UART_IRQHandler+0x518>
 80081e0:	080087bf 	.word	0x080087bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 808e 	beq.w	800831c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8089 	beq.w	800831c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800821a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800822e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800823c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e3      	bne.n	800820a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3314      	adds	r3, #20
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	623b      	str	r3, [r7, #32]
   return(result);
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3314      	adds	r3, #20
 8008262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008266:	633a      	str	r2, [r7, #48]	@ 0x30
 8008268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800826c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e3      	bne.n	8008242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	60fb      	str	r3, [r7, #12]
   return(result);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	330c      	adds	r3, #12
 80082a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80082ac:	61fa      	str	r2, [r7, #28]
 80082ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	69b9      	ldr	r1, [r7, #24]
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	617b      	str	r3, [r7, #20]
   return(result);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e3      	bne.n	8008288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f847 	bl	8008360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082d2:	e023      	b.n	800831c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d009      	beq.n	80082f4 <HAL_UART_IRQHandler+0x4f4>
 80082e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fa7a 	bl	80087e6 <UART_Transmit_IT>
    return;
 80082f2:	e014      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00e      	beq.n	800831e <HAL_UART_IRQHandler+0x51e>
 8008300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 faba 	bl	8008886 <UART_EndTransmit_IT>
    return;
 8008312:	e004      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
    return;
 8008314:	bf00      	nop
 8008316:	e002      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
      return;
 8008318:	bf00      	nop
 800831a:	e000      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
      return;
 800831c:	bf00      	nop
  }
}
 800831e:	37e8      	adds	r7, #232	@ 0xe8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b09c      	sub	sp, #112	@ 0x70
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008384:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008390:	2b00      	cmp	r3, #0
 8008392:	d172      	bne.n	800847a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008396:	2200      	movs	r2, #0
 8008398:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800839a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	330c      	adds	r3, #12
 80083a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	330c      	adds	r3, #12
 80083b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80083ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80083bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e5      	bne.n	800839a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3314      	adds	r3, #20
 80083d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80083e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3314      	adds	r3, #20
 80083ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80083ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80083f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e5      	bne.n	80083ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3314      	adds	r3, #20
 8008408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	623b      	str	r3, [r7, #32]
   return(result);
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008418:	663b      	str	r3, [r7, #96]	@ 0x60
 800841a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3314      	adds	r3, #20
 8008420:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008422:	633a      	str	r2, [r7, #48]	@ 0x30
 8008424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e5      	bne.n	8008402 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008438:	2220      	movs	r2, #32
 800843a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800843e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008442:	2b01      	cmp	r3, #1
 8008444:	d119      	bne.n	800847a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60fb      	str	r3, [r7, #12]
   return(result);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800845e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008466:	61fa      	str	r2, [r7, #28]
 8008468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	69b9      	ldr	r1, [r7, #24]
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	617b      	str	r3, [r7, #20]
   return(result);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e5      	bne.n	8008446 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800847a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800847c:	2200      	movs	r2, #0
 800847e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008484:	2b01      	cmp	r3, #1
 8008486:	d106      	bne.n	8008496 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800848a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800848c:	4619      	mov	r1, r3
 800848e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008490:	f7ff ff66 	bl	8008360 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008494:	e002      	b.n	800849c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008496:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008498:	f7fa faec 	bl	8002a74 <HAL_UART_RxCpltCallback>
}
 800849c:	bf00      	nop
 800849e:	3770      	adds	r7, #112	@ 0x70
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d108      	bne.n	80084d2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084c4:	085b      	lsrs	r3, r3, #1
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	4619      	mov	r1, r3
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff ff48 	bl	8008360 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084d0:	e002      	b.n	80084d8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7ff ff30 	bl	8008338 <HAL_UART_RxHalfCpltCallback>
}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084fc:	2b80      	cmp	r3, #128	@ 0x80
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b21      	cmp	r3, #33	@ 0x21
 8008512:	d108      	bne.n	8008526 <UART_DMAError+0x46>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2200      	movs	r2, #0
 800851e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008520:	68b8      	ldr	r0, [r7, #8]
 8008522:	f000 f8c1 	bl	80086a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008530:	2b40      	cmp	r3, #64	@ 0x40
 8008532:	bf0c      	ite	eq
 8008534:	2301      	moveq	r3, #1
 8008536:	2300      	movne	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b22      	cmp	r3, #34	@ 0x22
 8008546:	d108      	bne.n	800855a <UART_DMAError+0x7a>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2200      	movs	r2, #0
 8008552:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008554:	68b8      	ldr	r0, [r7, #8]
 8008556:	f000 f8cf 	bl	80086f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855e:	f043 0210 	orr.w	r2, r3, #16
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008566:	68b8      	ldr	r0, [r7, #8]
 8008568:	f7ff fef0 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b098      	sub	sp, #96	@ 0x60
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	88fa      	ldrh	r2, [r7, #6]
 800858c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2222      	movs	r2, #34	@ 0x22
 8008598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a0:	4a3e      	ldr	r2, [pc, #248]	@ (800869c <UART_Start_Receive_DMA+0x128>)
 80085a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a8:	4a3d      	ldr	r2, [pc, #244]	@ (80086a0 <UART_Start_Receive_DMA+0x12c>)
 80085aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b0:	4a3c      	ldr	r2, [pc, #240]	@ (80086a4 <UART_Start_Receive_DMA+0x130>)
 80085b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b8:	2200      	movs	r2, #0
 80085ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80085bc:	f107 0308 	add.w	r3, r7, #8
 80085c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	f7fd f912 	bl	80057fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	613b      	str	r3, [r7, #16]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d019      	beq.n	800862a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	330c      	adds	r3, #12
 80085fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800860c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	330c      	adds	r3, #12
 8008614:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008616:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008618:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800861c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e5      	bne.n	80085f6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3314      	adds	r3, #20
 8008630:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800863a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863c:	f043 0301 	orr.w	r3, r3, #1
 8008640:	657b      	str	r3, [r7, #84]	@ 0x54
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3314      	adds	r3, #20
 8008648:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800864a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800864c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008650:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e5      	bne.n	800862a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3314      	adds	r3, #20
 8008664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	617b      	str	r3, [r7, #20]
   return(result);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008674:	653b      	str	r3, [r7, #80]	@ 0x50
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3314      	adds	r3, #20
 800867c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800867e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6a39      	ldr	r1, [r7, #32]
 8008684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	61fb      	str	r3, [r7, #28]
   return(result);
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e5      	bne.n	800865e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3760      	adds	r7, #96	@ 0x60
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	08008379 	.word	0x08008379
 80086a0:	080084a5 	.word	0x080084a5
 80086a4:	080084e1 	.word	0x080084e1

080086a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b089      	sub	sp, #36	@ 0x24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	60bb      	str	r3, [r7, #8]
   return(result);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	61ba      	str	r2, [r7, #24]
 80086d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6979      	ldr	r1, [r7, #20]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	e841 2300 	strex	r3, r2, [r1]
 80086dc:	613b      	str	r3, [r7, #16]
   return(result);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e5      	bne.n	80086b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80086ec:	bf00      	nop
 80086ee:	3724      	adds	r7, #36	@ 0x24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b095      	sub	sp, #84	@ 0x54
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	330c      	adds	r3, #12
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	330c      	adds	r3, #12
 800871e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008720:	643a      	str	r2, [r7, #64]	@ 0x40
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008726:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800872e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e5      	bne.n	8008700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3314      	adds	r3, #20
 800873a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	61fb      	str	r3, [r7, #28]
   return(result);
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f023 0301 	bic.w	r3, r3, #1
 800874a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3314      	adds	r3, #20
 8008752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008754:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008756:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800875a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e5      	bne.n	8008734 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876c:	2b01      	cmp	r3, #1
 800876e:	d119      	bne.n	80087a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	330c      	adds	r3, #12
 8008776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f023 0310 	bic.w	r3, r3, #16
 8008786:	647b      	str	r3, [r7, #68]	@ 0x44
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	330c      	adds	r3, #12
 800878e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008790:	61ba      	str	r2, [r7, #24]
 8008792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6979      	ldr	r1, [r7, #20]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	613b      	str	r3, [r7, #16]
   return(result);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e5      	bne.n	8008770 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80087b2:	bf00      	nop
 80087b4:	3754      	adds	r7, #84	@ 0x54
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f7ff fdb7 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b085      	sub	sp, #20
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b21      	cmp	r3, #33	@ 0x21
 80087f8:	d13e      	bne.n	8008878 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008802:	d114      	bne.n	800882e <UART_Transmit_IT+0x48>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d110      	bne.n	800882e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008820:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	1c9a      	adds	r2, r3, #2
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	621a      	str	r2, [r3, #32]
 800882c:	e008      	b.n	8008840 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	1c59      	adds	r1, r3, #1
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6211      	str	r1, [r2, #32]
 8008838:	781a      	ldrb	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b29b      	uxth	r3, r3
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4619      	mov	r1, r3
 800884e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10f      	bne.n	8008874 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008862:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68da      	ldr	r2, [r3, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008872:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	e000      	b.n	800887a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008878:	2302      	movs	r3, #2
  }
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800889c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff fd3c 	bl	8008324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b08c      	sub	sp, #48	@ 0x30
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b22      	cmp	r3, #34	@ 0x22
 80088c8:	f040 80ae 	bne.w	8008a28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d4:	d117      	bne.n	8008906 <UART_Receive_IT+0x50>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d113      	bne.n	8008906 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fe:	1c9a      	adds	r2, r3, #2
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	629a      	str	r2, [r3, #40]	@ 0x28
 8008904:	e026      	b.n	8008954 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008918:	d007      	beq.n	800892a <UART_Receive_IT+0x74>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <UART_Receive_IT+0x82>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	b2da      	uxtb	r2, r3
 8008932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	e008      	b.n	800894a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	b2db      	uxtb	r3, r3
 8008940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008944:	b2da      	uxtb	r2, r3
 8008946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008948:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008958:	b29b      	uxth	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	b29b      	uxth	r3, r3
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	4619      	mov	r1, r3
 8008962:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008964:	2b00      	cmp	r3, #0
 8008966:	d15d      	bne.n	8008a24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0220 	bic.w	r2, r2, #32
 8008976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0201 	bic.w	r2, r2, #1
 8008996:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2220      	movs	r2, #32
 800899c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d135      	bne.n	8008a1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	330c      	adds	r3, #12
 80089ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	613b      	str	r3, [r7, #16]
   return(result);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f023 0310 	bic.w	r3, r3, #16
 80089ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	330c      	adds	r3, #12
 80089d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089d4:	623a      	str	r2, [r7, #32]
 80089d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	69f9      	ldr	r1, [r7, #28]
 80089da:	6a3a      	ldr	r2, [r7, #32]
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e5      	bne.n	80089b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0310 	and.w	r3, r3, #16
 80089f2:	2b10      	cmp	r3, #16
 80089f4:	d10a      	bne.n	8008a0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089f6:	2300      	movs	r3, #0
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff fca4 	bl	8008360 <HAL_UARTEx_RxEventCallback>
 8008a18:	e002      	b.n	8008a20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fa f82a 	bl	8002a74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e002      	b.n	8008a2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e000      	b.n	8008a2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008a28:	2302      	movs	r3, #2
  }
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3730      	adds	r7, #48	@ 0x30
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a38:	b0c0      	sub	sp, #256	@ 0x100
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a50:	68d9      	ldr	r1, [r3, #12]
 8008a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	ea40 0301 	orr.w	r3, r0, r1
 8008a5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008a8c:	f021 010c 	bic.w	r1, r1, #12
 8008a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aae:	6999      	ldr	r1, [r3, #24]
 8008ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	ea40 0301 	orr.w	r3, r0, r1
 8008aba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	4b8f      	ldr	r3, [pc, #572]	@ (8008d00 <UART_SetConfig+0x2cc>)
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d005      	beq.n	8008ad4 <UART_SetConfig+0xa0>
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	4b8d      	ldr	r3, [pc, #564]	@ (8008d04 <UART_SetConfig+0x2d0>)
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d104      	bne.n	8008ade <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ad4:	f7fe f964 	bl	8006da0 <HAL_RCC_GetPCLK2Freq>
 8008ad8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008adc:	e003      	b.n	8008ae6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ade:	f7fe f94b 	bl	8006d78 <HAL_RCC_GetPCLK1Freq>
 8008ae2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008af0:	f040 810c 	bne.w	8008d0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008afe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b06:	4622      	mov	r2, r4
 8008b08:	462b      	mov	r3, r5
 8008b0a:	1891      	adds	r1, r2, r2
 8008b0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b0e:	415b      	adcs	r3, r3
 8008b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b16:	4621      	mov	r1, r4
 8008b18:	eb12 0801 	adds.w	r8, r2, r1
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	eb43 0901 	adc.w	r9, r3, r1
 8008b22:	f04f 0200 	mov.w	r2, #0
 8008b26:	f04f 0300 	mov.w	r3, #0
 8008b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b36:	4690      	mov	r8, r2
 8008b38:	4699      	mov	r9, r3
 8008b3a:	4623      	mov	r3, r4
 8008b3c:	eb18 0303 	adds.w	r3, r8, r3
 8008b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b44:	462b      	mov	r3, r5
 8008b46:	eb49 0303 	adc.w	r3, r9, r3
 8008b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008b5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b62:	460b      	mov	r3, r1
 8008b64:	18db      	adds	r3, r3, r3
 8008b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b68:	4613      	mov	r3, r2
 8008b6a:	eb42 0303 	adc.w	r3, r2, r3
 8008b6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008b74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008b78:	f7f8 f886 	bl	8000c88 <__aeabi_uldivmod>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4b61      	ldr	r3, [pc, #388]	@ (8008d08 <UART_SetConfig+0x2d4>)
 8008b82:	fba3 2302 	umull	r2, r3, r3, r2
 8008b86:	095b      	lsrs	r3, r3, #5
 8008b88:	011c      	lsls	r4, r3, #4
 8008b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008b98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008b9c:	4642      	mov	r2, r8
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	1891      	adds	r1, r2, r2
 8008ba2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008ba4:	415b      	adcs	r3, r3
 8008ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ba8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008bac:	4641      	mov	r1, r8
 8008bae:	eb12 0a01 	adds.w	sl, r2, r1
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	eb43 0b01 	adc.w	fp, r3, r1
 8008bb8:	f04f 0200 	mov.w	r2, #0
 8008bbc:	f04f 0300 	mov.w	r3, #0
 8008bc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bcc:	4692      	mov	sl, r2
 8008bce:	469b      	mov	fp, r3
 8008bd0:	4643      	mov	r3, r8
 8008bd2:	eb1a 0303 	adds.w	r3, sl, r3
 8008bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bda:	464b      	mov	r3, r9
 8008bdc:	eb4b 0303 	adc.w	r3, fp, r3
 8008be0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008bf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	18db      	adds	r3, r3, r3
 8008bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bfe:	4613      	mov	r3, r2
 8008c00:	eb42 0303 	adc.w	r3, r2, r3
 8008c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c0e:	f7f8 f83b 	bl	8000c88 <__aeabi_uldivmod>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4611      	mov	r1, r2
 8008c18:	4b3b      	ldr	r3, [pc, #236]	@ (8008d08 <UART_SetConfig+0x2d4>)
 8008c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8008c1e:	095b      	lsrs	r3, r3, #5
 8008c20:	2264      	movs	r2, #100	@ 0x64
 8008c22:	fb02 f303 	mul.w	r3, r2, r3
 8008c26:	1acb      	subs	r3, r1, r3
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c2e:	4b36      	ldr	r3, [pc, #216]	@ (8008d08 <UART_SetConfig+0x2d4>)
 8008c30:	fba3 2302 	umull	r2, r3, r3, r2
 8008c34:	095b      	lsrs	r3, r3, #5
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008c3c:	441c      	add	r4, r3
 8008c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008c4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	1891      	adds	r1, r2, r2
 8008c56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008c58:	415b      	adcs	r3, r3
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c60:	4641      	mov	r1, r8
 8008c62:	1851      	adds	r1, r2, r1
 8008c64:	6339      	str	r1, [r7, #48]	@ 0x30
 8008c66:	4649      	mov	r1, r9
 8008c68:	414b      	adcs	r3, r1
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6c:	f04f 0200 	mov.w	r2, #0
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008c78:	4659      	mov	r1, fp
 8008c7a:	00cb      	lsls	r3, r1, #3
 8008c7c:	4651      	mov	r1, sl
 8008c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c82:	4651      	mov	r1, sl
 8008c84:	00ca      	lsls	r2, r1, #3
 8008c86:	4610      	mov	r0, r2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	189b      	adds	r3, r3, r2
 8008c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c94:	464b      	mov	r3, r9
 8008c96:	460a      	mov	r2, r1
 8008c98:	eb42 0303 	adc.w	r3, r2, r3
 8008c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008cac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008cb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	18db      	adds	r3, r3, r3
 8008cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cba:	4613      	mov	r3, r2
 8008cbc:	eb42 0303 	adc.w	r3, r2, r3
 8008cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008cc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008cca:	f7f7 ffdd 	bl	8000c88 <__aeabi_uldivmod>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d08 <UART_SetConfig+0x2d4>)
 8008cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8008cd8:	095b      	lsrs	r3, r3, #5
 8008cda:	2164      	movs	r1, #100	@ 0x64
 8008cdc:	fb01 f303 	mul.w	r3, r1, r3
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	3332      	adds	r3, #50	@ 0x32
 8008ce6:	4a08      	ldr	r2, [pc, #32]	@ (8008d08 <UART_SetConfig+0x2d4>)
 8008ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	f003 0207 	and.w	r2, r3, #7
 8008cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4422      	add	r2, r4
 8008cfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cfc:	e106      	b.n	8008f0c <UART_SetConfig+0x4d8>
 8008cfe:	bf00      	nop
 8008d00:	40011000 	.word	0x40011000
 8008d04:	40011400 	.word	0x40011400
 8008d08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d1e:	4642      	mov	r2, r8
 8008d20:	464b      	mov	r3, r9
 8008d22:	1891      	adds	r1, r2, r2
 8008d24:	6239      	str	r1, [r7, #32]
 8008d26:	415b      	adcs	r3, r3
 8008d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d2e:	4641      	mov	r1, r8
 8008d30:	1854      	adds	r4, r2, r1
 8008d32:	4649      	mov	r1, r9
 8008d34:	eb43 0501 	adc.w	r5, r3, r1
 8008d38:	f04f 0200 	mov.w	r2, #0
 8008d3c:	f04f 0300 	mov.w	r3, #0
 8008d40:	00eb      	lsls	r3, r5, #3
 8008d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d46:	00e2      	lsls	r2, r4, #3
 8008d48:	4614      	mov	r4, r2
 8008d4a:	461d      	mov	r5, r3
 8008d4c:	4643      	mov	r3, r8
 8008d4e:	18e3      	adds	r3, r4, r3
 8008d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d54:	464b      	mov	r3, r9
 8008d56:	eb45 0303 	adc.w	r3, r5, r3
 8008d5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d6e:	f04f 0200 	mov.w	r2, #0
 8008d72:	f04f 0300 	mov.w	r3, #0
 8008d76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	008b      	lsls	r3, r1, #2
 8008d7e:	4621      	mov	r1, r4
 8008d80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d84:	4621      	mov	r1, r4
 8008d86:	008a      	lsls	r2, r1, #2
 8008d88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008d8c:	f7f7 ff7c 	bl	8000c88 <__aeabi_uldivmod>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4b60      	ldr	r3, [pc, #384]	@ (8008f18 <UART_SetConfig+0x4e4>)
 8008d96:	fba3 2302 	umull	r2, r3, r3, r2
 8008d9a:	095b      	lsrs	r3, r3, #5
 8008d9c:	011c      	lsls	r4, r3, #4
 8008d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008da8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008dac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008db0:	4642      	mov	r2, r8
 8008db2:	464b      	mov	r3, r9
 8008db4:	1891      	adds	r1, r2, r2
 8008db6:	61b9      	str	r1, [r7, #24]
 8008db8:	415b      	adcs	r3, r3
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	1851      	adds	r1, r2, r1
 8008dc4:	6139      	str	r1, [r7, #16]
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	414b      	adcs	r3, r1
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dd8:	4659      	mov	r1, fp
 8008dda:	00cb      	lsls	r3, r1, #3
 8008ddc:	4651      	mov	r1, sl
 8008dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008de2:	4651      	mov	r1, sl
 8008de4:	00ca      	lsls	r2, r1, #3
 8008de6:	4610      	mov	r0, r2
 8008de8:	4619      	mov	r1, r3
 8008dea:	4603      	mov	r3, r0
 8008dec:	4642      	mov	r2, r8
 8008dee:	189b      	adds	r3, r3, r2
 8008df0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008df4:	464b      	mov	r3, r9
 8008df6:	460a      	mov	r2, r1
 8008df8:	eb42 0303 	adc.w	r3, r2, r3
 8008dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e18:	4649      	mov	r1, r9
 8008e1a:	008b      	lsls	r3, r1, #2
 8008e1c:	4641      	mov	r1, r8
 8008e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e22:	4641      	mov	r1, r8
 8008e24:	008a      	lsls	r2, r1, #2
 8008e26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e2a:	f7f7 ff2d 	bl	8000c88 <__aeabi_uldivmod>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4611      	mov	r1, r2
 8008e34:	4b38      	ldr	r3, [pc, #224]	@ (8008f18 <UART_SetConfig+0x4e4>)
 8008e36:	fba3 2301 	umull	r2, r3, r3, r1
 8008e3a:	095b      	lsrs	r3, r3, #5
 8008e3c:	2264      	movs	r2, #100	@ 0x64
 8008e3e:	fb02 f303 	mul.w	r3, r2, r3
 8008e42:	1acb      	subs	r3, r1, r3
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	3332      	adds	r3, #50	@ 0x32
 8008e48:	4a33      	ldr	r2, [pc, #204]	@ (8008f18 <UART_SetConfig+0x4e4>)
 8008e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4e:	095b      	lsrs	r3, r3, #5
 8008e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e54:	441c      	add	r4, r3
 8008e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008e60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008e64:	4642      	mov	r2, r8
 8008e66:	464b      	mov	r3, r9
 8008e68:	1891      	adds	r1, r2, r2
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	415b      	adcs	r3, r3
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e74:	4641      	mov	r1, r8
 8008e76:	1851      	adds	r1, r2, r1
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	414b      	adcs	r3, r1
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	f04f 0200 	mov.w	r2, #0
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e8c:	4659      	mov	r1, fp
 8008e8e:	00cb      	lsls	r3, r1, #3
 8008e90:	4651      	mov	r1, sl
 8008e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e96:	4651      	mov	r1, sl
 8008e98:	00ca      	lsls	r2, r1, #3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	189b      	adds	r3, r3, r2
 8008ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	460a      	mov	r2, r1
 8008eaa:	eb42 0303 	adc.w	r3, r2, r3
 8008eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eba:	667a      	str	r2, [r7, #100]	@ 0x64
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008ec8:	4649      	mov	r1, r9
 8008eca:	008b      	lsls	r3, r1, #2
 8008ecc:	4641      	mov	r1, r8
 8008ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ed2:	4641      	mov	r1, r8
 8008ed4:	008a      	lsls	r2, r1, #2
 8008ed6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008eda:	f7f7 fed5 	bl	8000c88 <__aeabi_uldivmod>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <UART_SetConfig+0x4e4>)
 8008ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	2164      	movs	r1, #100	@ 0x64
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	011b      	lsls	r3, r3, #4
 8008ef4:	3332      	adds	r3, #50	@ 0x32
 8008ef6:	4a08      	ldr	r2, [pc, #32]	@ (8008f18 <UART_SetConfig+0x4e4>)
 8008ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	f003 020f 	and.w	r2, r3, #15
 8008f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4422      	add	r2, r4
 8008f0a:	609a      	str	r2, [r3, #8]
}
 8008f0c:	bf00      	nop
 8008f0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f12:	46bd      	mov	sp, r7
 8008f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f18:	51eb851f 	.word	0x51eb851f

08008f1c <atoi>:
 8008f1c:	220a      	movs	r2, #10
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f000 bf68 	b.w	8009df4 <strtol>

08008f24 <malloc>:
 8008f24:	4b02      	ldr	r3, [pc, #8]	@ (8008f30 <malloc+0xc>)
 8008f26:	4601      	mov	r1, r0
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f000 b825 	b.w	8008f78 <_malloc_r>
 8008f2e:	bf00      	nop
 8008f30:	20000274 	.word	0x20000274

08008f34 <sbrk_aligned>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	4e0f      	ldr	r6, [pc, #60]	@ (8008f74 <sbrk_aligned+0x40>)
 8008f38:	460c      	mov	r4, r1
 8008f3a:	6831      	ldr	r1, [r6, #0]
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	b911      	cbnz	r1, 8008f46 <sbrk_aligned+0x12>
 8008f40:	f001 fbbc 	bl	800a6bc <_sbrk_r>
 8008f44:	6030      	str	r0, [r6, #0]
 8008f46:	4621      	mov	r1, r4
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f001 fbb7 	bl	800a6bc <_sbrk_r>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	d103      	bne.n	8008f5a <sbrk_aligned+0x26>
 8008f52:	f04f 34ff 	mov.w	r4, #4294967295
 8008f56:	4620      	mov	r0, r4
 8008f58:	bd70      	pop	{r4, r5, r6, pc}
 8008f5a:	1cc4      	adds	r4, r0, #3
 8008f5c:	f024 0403 	bic.w	r4, r4, #3
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d0f8      	beq.n	8008f56 <sbrk_aligned+0x22>
 8008f64:	1a21      	subs	r1, r4, r0
 8008f66:	4628      	mov	r0, r5
 8008f68:	f001 fba8 	bl	800a6bc <_sbrk_r>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d1f2      	bne.n	8008f56 <sbrk_aligned+0x22>
 8008f70:	e7ef      	b.n	8008f52 <sbrk_aligned+0x1e>
 8008f72:	bf00      	nop
 8008f74:	20000a88 	.word	0x20000a88

08008f78 <_malloc_r>:
 8008f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	1ccd      	adds	r5, r1, #3
 8008f7e:	f025 0503 	bic.w	r5, r5, #3
 8008f82:	3508      	adds	r5, #8
 8008f84:	2d0c      	cmp	r5, #12
 8008f86:	bf38      	it	cc
 8008f88:	250c      	movcc	r5, #12
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	db01      	blt.n	8008f94 <_malloc_r+0x1c>
 8008f90:	42a9      	cmp	r1, r5
 8008f92:	d904      	bls.n	8008f9e <_malloc_r+0x26>
 8008f94:	230c      	movs	r3, #12
 8008f96:	6033      	str	r3, [r6, #0]
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009074 <_malloc_r+0xfc>
 8008fa2:	f000 f869 	bl	8009078 <__malloc_lock>
 8008fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8008faa:	461c      	mov	r4, r3
 8008fac:	bb44      	cbnz	r4, 8009000 <_malloc_r+0x88>
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7ff ffbf 	bl	8008f34 <sbrk_aligned>
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	4604      	mov	r4, r0
 8008fba:	d158      	bne.n	800906e <_malloc_r+0xf6>
 8008fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8008fc0:	4627      	mov	r7, r4
 8008fc2:	2f00      	cmp	r7, #0
 8008fc4:	d143      	bne.n	800904e <_malloc_r+0xd6>
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	d04b      	beq.n	8009062 <_malloc_r+0xea>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	4639      	mov	r1, r7
 8008fce:	4630      	mov	r0, r6
 8008fd0:	eb04 0903 	add.w	r9, r4, r3
 8008fd4:	f001 fb72 	bl	800a6bc <_sbrk_r>
 8008fd8:	4581      	cmp	r9, r0
 8008fda:	d142      	bne.n	8009062 <_malloc_r+0xea>
 8008fdc:	6821      	ldr	r1, [r4, #0]
 8008fde:	1a6d      	subs	r5, r5, r1
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7ff ffa6 	bl	8008f34 <sbrk_aligned>
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d03a      	beq.n	8009062 <_malloc_r+0xea>
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	442b      	add	r3, r5
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	bb62      	cbnz	r2, 8009054 <_malloc_r+0xdc>
 8008ffa:	f8c8 7000 	str.w	r7, [r8]
 8008ffe:	e00f      	b.n	8009020 <_malloc_r+0xa8>
 8009000:	6822      	ldr	r2, [r4, #0]
 8009002:	1b52      	subs	r2, r2, r5
 8009004:	d420      	bmi.n	8009048 <_malloc_r+0xd0>
 8009006:	2a0b      	cmp	r2, #11
 8009008:	d917      	bls.n	800903a <_malloc_r+0xc2>
 800900a:	1961      	adds	r1, r4, r5
 800900c:	42a3      	cmp	r3, r4
 800900e:	6025      	str	r5, [r4, #0]
 8009010:	bf18      	it	ne
 8009012:	6059      	strne	r1, [r3, #4]
 8009014:	6863      	ldr	r3, [r4, #4]
 8009016:	bf08      	it	eq
 8009018:	f8c8 1000 	streq.w	r1, [r8]
 800901c:	5162      	str	r2, [r4, r5]
 800901e:	604b      	str	r3, [r1, #4]
 8009020:	4630      	mov	r0, r6
 8009022:	f000 f82f 	bl	8009084 <__malloc_unlock>
 8009026:	f104 000b 	add.w	r0, r4, #11
 800902a:	1d23      	adds	r3, r4, #4
 800902c:	f020 0007 	bic.w	r0, r0, #7
 8009030:	1ac2      	subs	r2, r0, r3
 8009032:	bf1c      	itt	ne
 8009034:	1a1b      	subne	r3, r3, r0
 8009036:	50a3      	strne	r3, [r4, r2]
 8009038:	e7af      	b.n	8008f9a <_malloc_r+0x22>
 800903a:	6862      	ldr	r2, [r4, #4]
 800903c:	42a3      	cmp	r3, r4
 800903e:	bf0c      	ite	eq
 8009040:	f8c8 2000 	streq.w	r2, [r8]
 8009044:	605a      	strne	r2, [r3, #4]
 8009046:	e7eb      	b.n	8009020 <_malloc_r+0xa8>
 8009048:	4623      	mov	r3, r4
 800904a:	6864      	ldr	r4, [r4, #4]
 800904c:	e7ae      	b.n	8008fac <_malloc_r+0x34>
 800904e:	463c      	mov	r4, r7
 8009050:	687f      	ldr	r7, [r7, #4]
 8009052:	e7b6      	b.n	8008fc2 <_malloc_r+0x4a>
 8009054:	461a      	mov	r2, r3
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	42a3      	cmp	r3, r4
 800905a:	d1fb      	bne.n	8009054 <_malloc_r+0xdc>
 800905c:	2300      	movs	r3, #0
 800905e:	6053      	str	r3, [r2, #4]
 8009060:	e7de      	b.n	8009020 <_malloc_r+0xa8>
 8009062:	230c      	movs	r3, #12
 8009064:	6033      	str	r3, [r6, #0]
 8009066:	4630      	mov	r0, r6
 8009068:	f000 f80c 	bl	8009084 <__malloc_unlock>
 800906c:	e794      	b.n	8008f98 <_malloc_r+0x20>
 800906e:	6005      	str	r5, [r0, #0]
 8009070:	e7d6      	b.n	8009020 <_malloc_r+0xa8>
 8009072:	bf00      	nop
 8009074:	20000a8c 	.word	0x20000a8c

08009078 <__malloc_lock>:
 8009078:	4801      	ldr	r0, [pc, #4]	@ (8009080 <__malloc_lock+0x8>)
 800907a:	f001 bb6c 	b.w	800a756 <__retarget_lock_acquire_recursive>
 800907e:	bf00      	nop
 8009080:	20000bd0 	.word	0x20000bd0

08009084 <__malloc_unlock>:
 8009084:	4801      	ldr	r0, [pc, #4]	@ (800908c <__malloc_unlock+0x8>)
 8009086:	f001 bb67 	b.w	800a758 <__retarget_lock_release_recursive>
 800908a:	bf00      	nop
 800908c:	20000bd0 	.word	0x20000bd0

08009090 <_realloc_r>:
 8009090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009094:	4607      	mov	r7, r0
 8009096:	4614      	mov	r4, r2
 8009098:	460d      	mov	r5, r1
 800909a:	b921      	cbnz	r1, 80090a6 <_realloc_r+0x16>
 800909c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	4611      	mov	r1, r2
 80090a2:	f7ff bf69 	b.w	8008f78 <_malloc_r>
 80090a6:	b92a      	cbnz	r2, 80090b4 <_realloc_r+0x24>
 80090a8:	f001 fb74 	bl	800a794 <_free_r>
 80090ac:	4625      	mov	r5, r4
 80090ae:	4628      	mov	r0, r5
 80090b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b4:	f002 fbae 	bl	800b814 <_malloc_usable_size_r>
 80090b8:	4284      	cmp	r4, r0
 80090ba:	4606      	mov	r6, r0
 80090bc:	d802      	bhi.n	80090c4 <_realloc_r+0x34>
 80090be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090c2:	d8f4      	bhi.n	80090ae <_realloc_r+0x1e>
 80090c4:	4621      	mov	r1, r4
 80090c6:	4638      	mov	r0, r7
 80090c8:	f7ff ff56 	bl	8008f78 <_malloc_r>
 80090cc:	4680      	mov	r8, r0
 80090ce:	b908      	cbnz	r0, 80090d4 <_realloc_r+0x44>
 80090d0:	4645      	mov	r5, r8
 80090d2:	e7ec      	b.n	80090ae <_realloc_r+0x1e>
 80090d4:	42b4      	cmp	r4, r6
 80090d6:	4622      	mov	r2, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	bf28      	it	cs
 80090dc:	4632      	movcs	r2, r6
 80090de:	f001 fb3c 	bl	800a75a <memcpy>
 80090e2:	4629      	mov	r1, r5
 80090e4:	4638      	mov	r0, r7
 80090e6:	f001 fb55 	bl	800a794 <_free_r>
 80090ea:	e7f1      	b.n	80090d0 <_realloc_r+0x40>

080090ec <sulp>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	4604      	mov	r4, r0
 80090f0:	460d      	mov	r5, r1
 80090f2:	ec45 4b10 	vmov	d0, r4, r5
 80090f6:	4616      	mov	r6, r2
 80090f8:	f002 fa4e 	bl	800b598 <__ulp>
 80090fc:	ec51 0b10 	vmov	r0, r1, d0
 8009100:	b17e      	cbz	r6, 8009122 <sulp+0x36>
 8009102:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009106:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd09      	ble.n	8009122 <sulp+0x36>
 800910e:	051b      	lsls	r3, r3, #20
 8009110:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009114:	2400      	movs	r4, #0
 8009116:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800911a:	4622      	mov	r2, r4
 800911c:	462b      	mov	r3, r5
 800911e:	f7f7 fa6b 	bl	80005f8 <__aeabi_dmul>
 8009122:	ec41 0b10 	vmov	d0, r0, r1
 8009126:	bd70      	pop	{r4, r5, r6, pc}

08009128 <_strtod_l>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	b09f      	sub	sp, #124	@ 0x7c
 800912e:	460c      	mov	r4, r1
 8009130:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009132:	2200      	movs	r2, #0
 8009134:	921a      	str	r2, [sp, #104]	@ 0x68
 8009136:	9005      	str	r0, [sp, #20]
 8009138:	f04f 0a00 	mov.w	sl, #0
 800913c:	f04f 0b00 	mov.w	fp, #0
 8009140:	460a      	mov	r2, r1
 8009142:	9219      	str	r2, [sp, #100]	@ 0x64
 8009144:	7811      	ldrb	r1, [r2, #0]
 8009146:	292b      	cmp	r1, #43	@ 0x2b
 8009148:	d04a      	beq.n	80091e0 <_strtod_l+0xb8>
 800914a:	d838      	bhi.n	80091be <_strtod_l+0x96>
 800914c:	290d      	cmp	r1, #13
 800914e:	d832      	bhi.n	80091b6 <_strtod_l+0x8e>
 8009150:	2908      	cmp	r1, #8
 8009152:	d832      	bhi.n	80091ba <_strtod_l+0x92>
 8009154:	2900      	cmp	r1, #0
 8009156:	d03b      	beq.n	80091d0 <_strtod_l+0xa8>
 8009158:	2200      	movs	r2, #0
 800915a:	920e      	str	r2, [sp, #56]	@ 0x38
 800915c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800915e:	782a      	ldrb	r2, [r5, #0]
 8009160:	2a30      	cmp	r2, #48	@ 0x30
 8009162:	f040 80b2 	bne.w	80092ca <_strtod_l+0x1a2>
 8009166:	786a      	ldrb	r2, [r5, #1]
 8009168:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800916c:	2a58      	cmp	r2, #88	@ 0x58
 800916e:	d16e      	bne.n	800924e <_strtod_l+0x126>
 8009170:	9302      	str	r3, [sp, #8]
 8009172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	ab1a      	add	r3, sp, #104	@ 0x68
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4a8f      	ldr	r2, [pc, #572]	@ (80093b8 <_strtod_l+0x290>)
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009180:	a919      	add	r1, sp, #100	@ 0x64
 8009182:	f001 fbb9 	bl	800a8f8 <__gethex>
 8009186:	f010 060f 	ands.w	r6, r0, #15
 800918a:	4604      	mov	r4, r0
 800918c:	d005      	beq.n	800919a <_strtod_l+0x72>
 800918e:	2e06      	cmp	r6, #6
 8009190:	d128      	bne.n	80091e4 <_strtod_l+0xbc>
 8009192:	3501      	adds	r5, #1
 8009194:	2300      	movs	r3, #0
 8009196:	9519      	str	r5, [sp, #100]	@ 0x64
 8009198:	930e      	str	r3, [sp, #56]	@ 0x38
 800919a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f040 858e 	bne.w	8009cbe <_strtod_l+0xb96>
 80091a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091a4:	b1cb      	cbz	r3, 80091da <_strtod_l+0xb2>
 80091a6:	4652      	mov	r2, sl
 80091a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80091ac:	ec43 2b10 	vmov	d0, r2, r3
 80091b0:	b01f      	add	sp, #124	@ 0x7c
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	2920      	cmp	r1, #32
 80091b8:	d1ce      	bne.n	8009158 <_strtod_l+0x30>
 80091ba:	3201      	adds	r2, #1
 80091bc:	e7c1      	b.n	8009142 <_strtod_l+0x1a>
 80091be:	292d      	cmp	r1, #45	@ 0x2d
 80091c0:	d1ca      	bne.n	8009158 <_strtod_l+0x30>
 80091c2:	2101      	movs	r1, #1
 80091c4:	910e      	str	r1, [sp, #56]	@ 0x38
 80091c6:	1c51      	adds	r1, r2, #1
 80091c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80091ca:	7852      	ldrb	r2, [r2, #1]
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	d1c5      	bne.n	800915c <_strtod_l+0x34>
 80091d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 8570 	bne.w	8009cba <_strtod_l+0xb92>
 80091da:	4652      	mov	r2, sl
 80091dc:	465b      	mov	r3, fp
 80091de:	e7e5      	b.n	80091ac <_strtod_l+0x84>
 80091e0:	2100      	movs	r1, #0
 80091e2:	e7ef      	b.n	80091c4 <_strtod_l+0x9c>
 80091e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091e6:	b13a      	cbz	r2, 80091f8 <_strtod_l+0xd0>
 80091e8:	2135      	movs	r1, #53	@ 0x35
 80091ea:	a81c      	add	r0, sp, #112	@ 0x70
 80091ec:	f002 face 	bl	800b78c <__copybits>
 80091f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091f2:	9805      	ldr	r0, [sp, #20]
 80091f4:	f001 fea4 	bl	800af40 <_Bfree>
 80091f8:	3e01      	subs	r6, #1
 80091fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80091fc:	2e04      	cmp	r6, #4
 80091fe:	d806      	bhi.n	800920e <_strtod_l+0xe6>
 8009200:	e8df f006 	tbb	[pc, r6]
 8009204:	201d0314 	.word	0x201d0314
 8009208:	14          	.byte	0x14
 8009209:	00          	.byte	0x00
 800920a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800920e:	05e1      	lsls	r1, r4, #23
 8009210:	bf48      	it	mi
 8009212:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009216:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800921a:	0d1b      	lsrs	r3, r3, #20
 800921c:	051b      	lsls	r3, r3, #20
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1bb      	bne.n	800919a <_strtod_l+0x72>
 8009222:	f001 fa6d 	bl	800a700 <__errno>
 8009226:	2322      	movs	r3, #34	@ 0x22
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	e7b6      	b.n	800919a <_strtod_l+0x72>
 800922c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009230:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009234:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009238:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800923c:	e7e7      	b.n	800920e <_strtod_l+0xe6>
 800923e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80093c0 <_strtod_l+0x298>
 8009242:	e7e4      	b.n	800920e <_strtod_l+0xe6>
 8009244:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009248:	f04f 3aff 	mov.w	sl, #4294967295
 800924c:	e7df      	b.n	800920e <_strtod_l+0xe6>
 800924e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	9219      	str	r2, [sp, #100]	@ 0x64
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b30      	cmp	r3, #48	@ 0x30
 8009258:	d0f9      	beq.n	800924e <_strtod_l+0x126>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d09d      	beq.n	800919a <_strtod_l+0x72>
 800925e:	2301      	movs	r3, #1
 8009260:	2700      	movs	r7, #0
 8009262:	9308      	str	r3, [sp, #32]
 8009264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009266:	930c      	str	r3, [sp, #48]	@ 0x30
 8009268:	970b      	str	r7, [sp, #44]	@ 0x2c
 800926a:	46b9      	mov	r9, r7
 800926c:	220a      	movs	r2, #10
 800926e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009270:	7805      	ldrb	r5, [r0, #0]
 8009272:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009276:	b2d9      	uxtb	r1, r3
 8009278:	2909      	cmp	r1, #9
 800927a:	d928      	bls.n	80092ce <_strtod_l+0x1a6>
 800927c:	494f      	ldr	r1, [pc, #316]	@ (80093bc <_strtod_l+0x294>)
 800927e:	2201      	movs	r2, #1
 8009280:	f001 f9c2 	bl	800a608 <strncmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	d032      	beq.n	80092ee <_strtod_l+0x1c6>
 8009288:	2000      	movs	r0, #0
 800928a:	462a      	mov	r2, r5
 800928c:	900a      	str	r0, [sp, #40]	@ 0x28
 800928e:	464d      	mov	r5, r9
 8009290:	4603      	mov	r3, r0
 8009292:	2a65      	cmp	r2, #101	@ 0x65
 8009294:	d001      	beq.n	800929a <_strtod_l+0x172>
 8009296:	2a45      	cmp	r2, #69	@ 0x45
 8009298:	d114      	bne.n	80092c4 <_strtod_l+0x19c>
 800929a:	b91d      	cbnz	r5, 80092a4 <_strtod_l+0x17c>
 800929c:	9a08      	ldr	r2, [sp, #32]
 800929e:	4302      	orrs	r2, r0
 80092a0:	d096      	beq.n	80091d0 <_strtod_l+0xa8>
 80092a2:	2500      	movs	r5, #0
 80092a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092a6:	1c62      	adds	r2, r4, #1
 80092a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80092aa:	7862      	ldrb	r2, [r4, #1]
 80092ac:	2a2b      	cmp	r2, #43	@ 0x2b
 80092ae:	d07a      	beq.n	80093a6 <_strtod_l+0x27e>
 80092b0:	2a2d      	cmp	r2, #45	@ 0x2d
 80092b2:	d07e      	beq.n	80093b2 <_strtod_l+0x28a>
 80092b4:	f04f 0c00 	mov.w	ip, #0
 80092b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092bc:	2909      	cmp	r1, #9
 80092be:	f240 8085 	bls.w	80093cc <_strtod_l+0x2a4>
 80092c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80092c4:	f04f 0800 	mov.w	r8, #0
 80092c8:	e0a5      	b.n	8009416 <_strtod_l+0x2ee>
 80092ca:	2300      	movs	r3, #0
 80092cc:	e7c8      	b.n	8009260 <_strtod_l+0x138>
 80092ce:	f1b9 0f08 	cmp.w	r9, #8
 80092d2:	bfd8      	it	le
 80092d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80092d6:	f100 0001 	add.w	r0, r0, #1
 80092da:	bfda      	itte	le
 80092dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80092e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80092e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80092e6:	f109 0901 	add.w	r9, r9, #1
 80092ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80092ec:	e7bf      	b.n	800926e <_strtod_l+0x146>
 80092ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80092f4:	785a      	ldrb	r2, [r3, #1]
 80092f6:	f1b9 0f00 	cmp.w	r9, #0
 80092fa:	d03b      	beq.n	8009374 <_strtod_l+0x24c>
 80092fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80092fe:	464d      	mov	r5, r9
 8009300:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009304:	2b09      	cmp	r3, #9
 8009306:	d912      	bls.n	800932e <_strtod_l+0x206>
 8009308:	2301      	movs	r3, #1
 800930a:	e7c2      	b.n	8009292 <_strtod_l+0x16a>
 800930c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	9219      	str	r2, [sp, #100]	@ 0x64
 8009312:	785a      	ldrb	r2, [r3, #1]
 8009314:	3001      	adds	r0, #1
 8009316:	2a30      	cmp	r2, #48	@ 0x30
 8009318:	d0f8      	beq.n	800930c <_strtod_l+0x1e4>
 800931a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800931e:	2b08      	cmp	r3, #8
 8009320:	f200 84d2 	bhi.w	8009cc8 <_strtod_l+0xba0>
 8009324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009326:	900a      	str	r0, [sp, #40]	@ 0x28
 8009328:	2000      	movs	r0, #0
 800932a:	930c      	str	r3, [sp, #48]	@ 0x30
 800932c:	4605      	mov	r5, r0
 800932e:	3a30      	subs	r2, #48	@ 0x30
 8009330:	f100 0301 	add.w	r3, r0, #1
 8009334:	d018      	beq.n	8009368 <_strtod_l+0x240>
 8009336:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009338:	4419      	add	r1, r3
 800933a:	910a      	str	r1, [sp, #40]	@ 0x28
 800933c:	462e      	mov	r6, r5
 800933e:	f04f 0e0a 	mov.w	lr, #10
 8009342:	1c71      	adds	r1, r6, #1
 8009344:	eba1 0c05 	sub.w	ip, r1, r5
 8009348:	4563      	cmp	r3, ip
 800934a:	dc15      	bgt.n	8009378 <_strtod_l+0x250>
 800934c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009350:	182b      	adds	r3, r5, r0
 8009352:	2b08      	cmp	r3, #8
 8009354:	f105 0501 	add.w	r5, r5, #1
 8009358:	4405      	add	r5, r0
 800935a:	dc1a      	bgt.n	8009392 <_strtod_l+0x26a>
 800935c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800935e:	230a      	movs	r3, #10
 8009360:	fb03 2301 	mla	r3, r3, r1, r2
 8009364:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009366:	2300      	movs	r3, #0
 8009368:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800936a:	1c51      	adds	r1, r2, #1
 800936c:	9119      	str	r1, [sp, #100]	@ 0x64
 800936e:	7852      	ldrb	r2, [r2, #1]
 8009370:	4618      	mov	r0, r3
 8009372:	e7c5      	b.n	8009300 <_strtod_l+0x1d8>
 8009374:	4648      	mov	r0, r9
 8009376:	e7ce      	b.n	8009316 <_strtod_l+0x1ee>
 8009378:	2e08      	cmp	r6, #8
 800937a:	dc05      	bgt.n	8009388 <_strtod_l+0x260>
 800937c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800937e:	fb0e f606 	mul.w	r6, lr, r6
 8009382:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009384:	460e      	mov	r6, r1
 8009386:	e7dc      	b.n	8009342 <_strtod_l+0x21a>
 8009388:	2910      	cmp	r1, #16
 800938a:	bfd8      	it	le
 800938c:	fb0e f707 	mulle.w	r7, lr, r7
 8009390:	e7f8      	b.n	8009384 <_strtod_l+0x25c>
 8009392:	2b0f      	cmp	r3, #15
 8009394:	bfdc      	itt	le
 8009396:	230a      	movle	r3, #10
 8009398:	fb03 2707 	mlale	r7, r3, r7, r2
 800939c:	e7e3      	b.n	8009366 <_strtod_l+0x23e>
 800939e:	2300      	movs	r3, #0
 80093a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80093a2:	2301      	movs	r3, #1
 80093a4:	e77a      	b.n	800929c <_strtod_l+0x174>
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	1ca2      	adds	r2, r4, #2
 80093ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80093ae:	78a2      	ldrb	r2, [r4, #2]
 80093b0:	e782      	b.n	80092b8 <_strtod_l+0x190>
 80093b2:	f04f 0c01 	mov.w	ip, #1
 80093b6:	e7f8      	b.n	80093aa <_strtod_l+0x282>
 80093b8:	0800e118 	.word	0x0800e118
 80093bc:	0800df7c 	.word	0x0800df7c
 80093c0:	7ff00000 	.word	0x7ff00000
 80093c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093c6:	1c51      	adds	r1, r2, #1
 80093c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80093ca:	7852      	ldrb	r2, [r2, #1]
 80093cc:	2a30      	cmp	r2, #48	@ 0x30
 80093ce:	d0f9      	beq.n	80093c4 <_strtod_l+0x29c>
 80093d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80093d4:	2908      	cmp	r1, #8
 80093d6:	f63f af75 	bhi.w	80092c4 <_strtod_l+0x19c>
 80093da:	3a30      	subs	r2, #48	@ 0x30
 80093dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80093de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093e2:	f04f 080a 	mov.w	r8, #10
 80093e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e8:	1c56      	adds	r6, r2, #1
 80093ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80093ec:	7852      	ldrb	r2, [r2, #1]
 80093ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093f2:	f1be 0f09 	cmp.w	lr, #9
 80093f6:	d939      	bls.n	800946c <_strtod_l+0x344>
 80093f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093fa:	1a76      	subs	r6, r6, r1
 80093fc:	2e08      	cmp	r6, #8
 80093fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009402:	dc03      	bgt.n	800940c <_strtod_l+0x2e4>
 8009404:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009406:	4588      	cmp	r8, r1
 8009408:	bfa8      	it	ge
 800940a:	4688      	movge	r8, r1
 800940c:	f1bc 0f00 	cmp.w	ip, #0
 8009410:	d001      	beq.n	8009416 <_strtod_l+0x2ee>
 8009412:	f1c8 0800 	rsb	r8, r8, #0
 8009416:	2d00      	cmp	r5, #0
 8009418:	d14e      	bne.n	80094b8 <_strtod_l+0x390>
 800941a:	9908      	ldr	r1, [sp, #32]
 800941c:	4308      	orrs	r0, r1
 800941e:	f47f aebc 	bne.w	800919a <_strtod_l+0x72>
 8009422:	2b00      	cmp	r3, #0
 8009424:	f47f aed4 	bne.w	80091d0 <_strtod_l+0xa8>
 8009428:	2a69      	cmp	r2, #105	@ 0x69
 800942a:	d028      	beq.n	800947e <_strtod_l+0x356>
 800942c:	dc25      	bgt.n	800947a <_strtod_l+0x352>
 800942e:	2a49      	cmp	r2, #73	@ 0x49
 8009430:	d025      	beq.n	800947e <_strtod_l+0x356>
 8009432:	2a4e      	cmp	r2, #78	@ 0x4e
 8009434:	f47f aecc 	bne.w	80091d0 <_strtod_l+0xa8>
 8009438:	499a      	ldr	r1, [pc, #616]	@ (80096a4 <_strtod_l+0x57c>)
 800943a:	a819      	add	r0, sp, #100	@ 0x64
 800943c:	f001 fc7e 	bl	800ad3c <__match>
 8009440:	2800      	cmp	r0, #0
 8009442:	f43f aec5 	beq.w	80091d0 <_strtod_l+0xa8>
 8009446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b28      	cmp	r3, #40	@ 0x28
 800944c:	d12e      	bne.n	80094ac <_strtod_l+0x384>
 800944e:	4996      	ldr	r1, [pc, #600]	@ (80096a8 <_strtod_l+0x580>)
 8009450:	aa1c      	add	r2, sp, #112	@ 0x70
 8009452:	a819      	add	r0, sp, #100	@ 0x64
 8009454:	f001 fc86 	bl	800ad64 <__hexnan>
 8009458:	2805      	cmp	r0, #5
 800945a:	d127      	bne.n	80094ac <_strtod_l+0x384>
 800945c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800945e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009462:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009466:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800946a:	e696      	b.n	800919a <_strtod_l+0x72>
 800946c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800946e:	fb08 2101 	mla	r1, r8, r1, r2
 8009472:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009476:	9209      	str	r2, [sp, #36]	@ 0x24
 8009478:	e7b5      	b.n	80093e6 <_strtod_l+0x2be>
 800947a:	2a6e      	cmp	r2, #110	@ 0x6e
 800947c:	e7da      	b.n	8009434 <_strtod_l+0x30c>
 800947e:	498b      	ldr	r1, [pc, #556]	@ (80096ac <_strtod_l+0x584>)
 8009480:	a819      	add	r0, sp, #100	@ 0x64
 8009482:	f001 fc5b 	bl	800ad3c <__match>
 8009486:	2800      	cmp	r0, #0
 8009488:	f43f aea2 	beq.w	80091d0 <_strtod_l+0xa8>
 800948c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800948e:	4988      	ldr	r1, [pc, #544]	@ (80096b0 <_strtod_l+0x588>)
 8009490:	3b01      	subs	r3, #1
 8009492:	a819      	add	r0, sp, #100	@ 0x64
 8009494:	9319      	str	r3, [sp, #100]	@ 0x64
 8009496:	f001 fc51 	bl	800ad3c <__match>
 800949a:	b910      	cbnz	r0, 80094a2 <_strtod_l+0x37a>
 800949c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800949e:	3301      	adds	r3, #1
 80094a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80094a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80096c0 <_strtod_l+0x598>
 80094a6:	f04f 0a00 	mov.w	sl, #0
 80094aa:	e676      	b.n	800919a <_strtod_l+0x72>
 80094ac:	4881      	ldr	r0, [pc, #516]	@ (80096b4 <_strtod_l+0x58c>)
 80094ae:	f001 f963 	bl	800a778 <nan>
 80094b2:	ec5b ab10 	vmov	sl, fp, d0
 80094b6:	e670      	b.n	800919a <_strtod_l+0x72>
 80094b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80094bc:	eba8 0303 	sub.w	r3, r8, r3
 80094c0:	f1b9 0f00 	cmp.w	r9, #0
 80094c4:	bf08      	it	eq
 80094c6:	46a9      	moveq	r9, r5
 80094c8:	2d10      	cmp	r5, #16
 80094ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80094cc:	462c      	mov	r4, r5
 80094ce:	bfa8      	it	ge
 80094d0:	2410      	movge	r4, #16
 80094d2:	f7f7 f817 	bl	8000504 <__aeabi_ui2d>
 80094d6:	2d09      	cmp	r5, #9
 80094d8:	4682      	mov	sl, r0
 80094da:	468b      	mov	fp, r1
 80094dc:	dc13      	bgt.n	8009506 <_strtod_l+0x3de>
 80094de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f43f ae5a 	beq.w	800919a <_strtod_l+0x72>
 80094e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e8:	dd78      	ble.n	80095dc <_strtod_l+0x4b4>
 80094ea:	2b16      	cmp	r3, #22
 80094ec:	dc5f      	bgt.n	80095ae <_strtod_l+0x486>
 80094ee:	4972      	ldr	r1, [pc, #456]	@ (80096b8 <_strtod_l+0x590>)
 80094f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f8:	4652      	mov	r2, sl
 80094fa:	465b      	mov	r3, fp
 80094fc:	f7f7 f87c 	bl	80005f8 <__aeabi_dmul>
 8009500:	4682      	mov	sl, r0
 8009502:	468b      	mov	fp, r1
 8009504:	e649      	b.n	800919a <_strtod_l+0x72>
 8009506:	4b6c      	ldr	r3, [pc, #432]	@ (80096b8 <_strtod_l+0x590>)
 8009508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800950c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009510:	f7f7 f872 	bl	80005f8 <__aeabi_dmul>
 8009514:	4682      	mov	sl, r0
 8009516:	4638      	mov	r0, r7
 8009518:	468b      	mov	fp, r1
 800951a:	f7f6 fff3 	bl	8000504 <__aeabi_ui2d>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4650      	mov	r0, sl
 8009524:	4659      	mov	r1, fp
 8009526:	f7f6 feb1 	bl	800028c <__adddf3>
 800952a:	2d0f      	cmp	r5, #15
 800952c:	4682      	mov	sl, r0
 800952e:	468b      	mov	fp, r1
 8009530:	ddd5      	ble.n	80094de <_strtod_l+0x3b6>
 8009532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009534:	1b2c      	subs	r4, r5, r4
 8009536:	441c      	add	r4, r3
 8009538:	2c00      	cmp	r4, #0
 800953a:	f340 8093 	ble.w	8009664 <_strtod_l+0x53c>
 800953e:	f014 030f 	ands.w	r3, r4, #15
 8009542:	d00a      	beq.n	800955a <_strtod_l+0x432>
 8009544:	495c      	ldr	r1, [pc, #368]	@ (80096b8 <_strtod_l+0x590>)
 8009546:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800954a:	4652      	mov	r2, sl
 800954c:	465b      	mov	r3, fp
 800954e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009552:	f7f7 f851 	bl	80005f8 <__aeabi_dmul>
 8009556:	4682      	mov	sl, r0
 8009558:	468b      	mov	fp, r1
 800955a:	f034 040f 	bics.w	r4, r4, #15
 800955e:	d073      	beq.n	8009648 <_strtod_l+0x520>
 8009560:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009564:	dd49      	ble.n	80095fa <_strtod_l+0x4d2>
 8009566:	2400      	movs	r4, #0
 8009568:	46a0      	mov	r8, r4
 800956a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800956c:	46a1      	mov	r9, r4
 800956e:	9a05      	ldr	r2, [sp, #20]
 8009570:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80096c0 <_strtod_l+0x598>
 8009574:	2322      	movs	r3, #34	@ 0x22
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	f04f 0a00 	mov.w	sl, #0
 800957c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800957e:	2b00      	cmp	r3, #0
 8009580:	f43f ae0b 	beq.w	800919a <_strtod_l+0x72>
 8009584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f001 fcda 	bl	800af40 <_Bfree>
 800958c:	9805      	ldr	r0, [sp, #20]
 800958e:	4649      	mov	r1, r9
 8009590:	f001 fcd6 	bl	800af40 <_Bfree>
 8009594:	9805      	ldr	r0, [sp, #20]
 8009596:	4641      	mov	r1, r8
 8009598:	f001 fcd2 	bl	800af40 <_Bfree>
 800959c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	f001 fcce 	bl	800af40 <_Bfree>
 80095a4:	9805      	ldr	r0, [sp, #20]
 80095a6:	4621      	mov	r1, r4
 80095a8:	f001 fcca 	bl	800af40 <_Bfree>
 80095ac:	e5f5      	b.n	800919a <_strtod_l+0x72>
 80095ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80095b4:	4293      	cmp	r3, r2
 80095b6:	dbbc      	blt.n	8009532 <_strtod_l+0x40a>
 80095b8:	4c3f      	ldr	r4, [pc, #252]	@ (80096b8 <_strtod_l+0x590>)
 80095ba:	f1c5 050f 	rsb	r5, r5, #15
 80095be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095c2:	4652      	mov	r2, sl
 80095c4:	465b      	mov	r3, fp
 80095c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d0:	1b5d      	subs	r5, r3, r5
 80095d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095da:	e78f      	b.n	80094fc <_strtod_l+0x3d4>
 80095dc:	3316      	adds	r3, #22
 80095de:	dba8      	blt.n	8009532 <_strtod_l+0x40a>
 80095e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e2:	eba3 0808 	sub.w	r8, r3, r8
 80095e6:	4b34      	ldr	r3, [pc, #208]	@ (80096b8 <_strtod_l+0x590>)
 80095e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095f0:	4650      	mov	r0, sl
 80095f2:	4659      	mov	r1, fp
 80095f4:	f7f7 f92a 	bl	800084c <__aeabi_ddiv>
 80095f8:	e782      	b.n	8009500 <_strtod_l+0x3d8>
 80095fa:	2300      	movs	r3, #0
 80095fc:	4f2f      	ldr	r7, [pc, #188]	@ (80096bc <_strtod_l+0x594>)
 80095fe:	1124      	asrs	r4, r4, #4
 8009600:	4650      	mov	r0, sl
 8009602:	4659      	mov	r1, fp
 8009604:	461e      	mov	r6, r3
 8009606:	2c01      	cmp	r4, #1
 8009608:	dc21      	bgt.n	800964e <_strtod_l+0x526>
 800960a:	b10b      	cbz	r3, 8009610 <_strtod_l+0x4e8>
 800960c:	4682      	mov	sl, r0
 800960e:	468b      	mov	fp, r1
 8009610:	492a      	ldr	r1, [pc, #168]	@ (80096bc <_strtod_l+0x594>)
 8009612:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009616:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800961a:	4652      	mov	r2, sl
 800961c:	465b      	mov	r3, fp
 800961e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	4b26      	ldr	r3, [pc, #152]	@ (80096c0 <_strtod_l+0x598>)
 8009628:	460a      	mov	r2, r1
 800962a:	400b      	ands	r3, r1
 800962c:	4925      	ldr	r1, [pc, #148]	@ (80096c4 <_strtod_l+0x59c>)
 800962e:	428b      	cmp	r3, r1
 8009630:	4682      	mov	sl, r0
 8009632:	d898      	bhi.n	8009566 <_strtod_l+0x43e>
 8009634:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009638:	428b      	cmp	r3, r1
 800963a:	bf86      	itte	hi
 800963c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80096c8 <_strtod_l+0x5a0>
 8009640:	f04f 3aff 	movhi.w	sl, #4294967295
 8009644:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009648:	2300      	movs	r3, #0
 800964a:	9308      	str	r3, [sp, #32]
 800964c:	e076      	b.n	800973c <_strtod_l+0x614>
 800964e:	07e2      	lsls	r2, r4, #31
 8009650:	d504      	bpl.n	800965c <_strtod_l+0x534>
 8009652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	2301      	movs	r3, #1
 800965c:	3601      	adds	r6, #1
 800965e:	1064      	asrs	r4, r4, #1
 8009660:	3708      	adds	r7, #8
 8009662:	e7d0      	b.n	8009606 <_strtod_l+0x4de>
 8009664:	d0f0      	beq.n	8009648 <_strtod_l+0x520>
 8009666:	4264      	negs	r4, r4
 8009668:	f014 020f 	ands.w	r2, r4, #15
 800966c:	d00a      	beq.n	8009684 <_strtod_l+0x55c>
 800966e:	4b12      	ldr	r3, [pc, #72]	@ (80096b8 <_strtod_l+0x590>)
 8009670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009674:	4650      	mov	r0, sl
 8009676:	4659      	mov	r1, fp
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f7 f8e6 	bl	800084c <__aeabi_ddiv>
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	1124      	asrs	r4, r4, #4
 8009686:	d0df      	beq.n	8009648 <_strtod_l+0x520>
 8009688:	2c1f      	cmp	r4, #31
 800968a:	dd1f      	ble.n	80096cc <_strtod_l+0x5a4>
 800968c:	2400      	movs	r4, #0
 800968e:	46a0      	mov	r8, r4
 8009690:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009692:	46a1      	mov	r9, r4
 8009694:	9a05      	ldr	r2, [sp, #20]
 8009696:	2322      	movs	r3, #34	@ 0x22
 8009698:	f04f 0a00 	mov.w	sl, #0
 800969c:	f04f 0b00 	mov.w	fp, #0
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	e76b      	b.n	800957c <_strtod_l+0x454>
 80096a4:	0800df87 	.word	0x0800df87
 80096a8:	0800e104 	.word	0x0800e104
 80096ac:	0800df7e 	.word	0x0800df7e
 80096b0:	0800df81 	.word	0x0800df81
 80096b4:	0800e101 	.word	0x0800e101
 80096b8:	0800e290 	.word	0x0800e290
 80096bc:	0800e268 	.word	0x0800e268
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	7ca00000 	.word	0x7ca00000
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	f014 0310 	ands.w	r3, r4, #16
 80096d0:	bf18      	it	ne
 80096d2:	236a      	movne	r3, #106	@ 0x6a
 80096d4:	4ea9      	ldr	r6, [pc, #676]	@ (800997c <_strtod_l+0x854>)
 80096d6:	9308      	str	r3, [sp, #32]
 80096d8:	4650      	mov	r0, sl
 80096da:	4659      	mov	r1, fp
 80096dc:	2300      	movs	r3, #0
 80096de:	07e7      	lsls	r7, r4, #31
 80096e0:	d504      	bpl.n	80096ec <_strtod_l+0x5c4>
 80096e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	2301      	movs	r3, #1
 80096ec:	1064      	asrs	r4, r4, #1
 80096ee:	f106 0608 	add.w	r6, r6, #8
 80096f2:	d1f4      	bne.n	80096de <_strtod_l+0x5b6>
 80096f4:	b10b      	cbz	r3, 80096fa <_strtod_l+0x5d2>
 80096f6:	4682      	mov	sl, r0
 80096f8:	468b      	mov	fp, r1
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	b1b3      	cbz	r3, 800972c <_strtod_l+0x604>
 80096fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009702:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009706:	2b00      	cmp	r3, #0
 8009708:	4659      	mov	r1, fp
 800970a:	dd0f      	ble.n	800972c <_strtod_l+0x604>
 800970c:	2b1f      	cmp	r3, #31
 800970e:	dd56      	ble.n	80097be <_strtod_l+0x696>
 8009710:	2b34      	cmp	r3, #52	@ 0x34
 8009712:	bfde      	ittt	le
 8009714:	f04f 33ff 	movle.w	r3, #4294967295
 8009718:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800971c:	4093      	lslle	r3, r2
 800971e:	f04f 0a00 	mov.w	sl, #0
 8009722:	bfcc      	ite	gt
 8009724:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009728:	ea03 0b01 	andle.w	fp, r3, r1
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	4650      	mov	r0, sl
 8009732:	4659      	mov	r1, fp
 8009734:	f7f7 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009738:	2800      	cmp	r0, #0
 800973a:	d1a7      	bne.n	800968c <_strtod_l+0x564>
 800973c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009742:	9805      	ldr	r0, [sp, #20]
 8009744:	462b      	mov	r3, r5
 8009746:	464a      	mov	r2, r9
 8009748:	f001 fc62 	bl	800b010 <__s2b>
 800974c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800974e:	2800      	cmp	r0, #0
 8009750:	f43f af09 	beq.w	8009566 <_strtod_l+0x43e>
 8009754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009758:	2a00      	cmp	r2, #0
 800975a:	eba3 0308 	sub.w	r3, r3, r8
 800975e:	bfa8      	it	ge
 8009760:	2300      	movge	r3, #0
 8009762:	9312      	str	r3, [sp, #72]	@ 0x48
 8009764:	2400      	movs	r4, #0
 8009766:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800976a:	9316      	str	r3, [sp, #88]	@ 0x58
 800976c:	46a0      	mov	r8, r4
 800976e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009770:	9805      	ldr	r0, [sp, #20]
 8009772:	6859      	ldr	r1, [r3, #4]
 8009774:	f001 fba4 	bl	800aec0 <_Balloc>
 8009778:	4681      	mov	r9, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	f43f aef7 	beq.w	800956e <_strtod_l+0x446>
 8009780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	3202      	adds	r2, #2
 8009786:	f103 010c 	add.w	r1, r3, #12
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	300c      	adds	r0, #12
 800978e:	f000 ffe4 	bl	800a75a <memcpy>
 8009792:	ec4b ab10 	vmov	d0, sl, fp
 8009796:	9805      	ldr	r0, [sp, #20]
 8009798:	aa1c      	add	r2, sp, #112	@ 0x70
 800979a:	a91b      	add	r1, sp, #108	@ 0x6c
 800979c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097a0:	f001 ff6a 	bl	800b678 <__d2b>
 80097a4:	901a      	str	r0, [sp, #104]	@ 0x68
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f aee1 	beq.w	800956e <_strtod_l+0x446>
 80097ac:	9805      	ldr	r0, [sp, #20]
 80097ae:	2101      	movs	r1, #1
 80097b0:	f001 fcc4 	bl	800b13c <__i2b>
 80097b4:	4680      	mov	r8, r0
 80097b6:	b948      	cbnz	r0, 80097cc <_strtod_l+0x6a4>
 80097b8:	f04f 0800 	mov.w	r8, #0
 80097bc:	e6d7      	b.n	800956e <_strtod_l+0x446>
 80097be:	f04f 32ff 	mov.w	r2, #4294967295
 80097c2:	fa02 f303 	lsl.w	r3, r2, r3
 80097c6:	ea03 0a0a 	and.w	sl, r3, sl
 80097ca:	e7af      	b.n	800972c <_strtod_l+0x604>
 80097cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80097ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	bfab      	itete	ge
 80097d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80097dc:	bfac      	ite	ge
 80097de:	18ef      	addge	r7, r5, r3
 80097e0:	1b5e      	sublt	r6, r3, r5
 80097e2:	9b08      	ldr	r3, [sp, #32]
 80097e4:	1aed      	subs	r5, r5, r3
 80097e6:	4415      	add	r5, r2
 80097e8:	4b65      	ldr	r3, [pc, #404]	@ (8009980 <_strtod_l+0x858>)
 80097ea:	3d01      	subs	r5, #1
 80097ec:	429d      	cmp	r5, r3
 80097ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097f2:	da50      	bge.n	8009896 <_strtod_l+0x76e>
 80097f4:	1b5b      	subs	r3, r3, r5
 80097f6:	2b1f      	cmp	r3, #31
 80097f8:	eba2 0203 	sub.w	r2, r2, r3
 80097fc:	f04f 0101 	mov.w	r1, #1
 8009800:	dc3d      	bgt.n	800987e <_strtod_l+0x756>
 8009802:	fa01 f303 	lsl.w	r3, r1, r3
 8009806:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009808:	2300      	movs	r3, #0
 800980a:	9310      	str	r3, [sp, #64]	@ 0x40
 800980c:	18bd      	adds	r5, r7, r2
 800980e:	9b08      	ldr	r3, [sp, #32]
 8009810:	42af      	cmp	r7, r5
 8009812:	4416      	add	r6, r2
 8009814:	441e      	add	r6, r3
 8009816:	463b      	mov	r3, r7
 8009818:	bfa8      	it	ge
 800981a:	462b      	movge	r3, r5
 800981c:	42b3      	cmp	r3, r6
 800981e:	bfa8      	it	ge
 8009820:	4633      	movge	r3, r6
 8009822:	2b00      	cmp	r3, #0
 8009824:	bfc2      	ittt	gt
 8009826:	1aed      	subgt	r5, r5, r3
 8009828:	1af6      	subgt	r6, r6, r3
 800982a:	1aff      	subgt	r7, r7, r3
 800982c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800982e:	2b00      	cmp	r3, #0
 8009830:	dd16      	ble.n	8009860 <_strtod_l+0x738>
 8009832:	4641      	mov	r1, r8
 8009834:	9805      	ldr	r0, [sp, #20]
 8009836:	461a      	mov	r2, r3
 8009838:	f001 fd38 	bl	800b2ac <__pow5mult>
 800983c:	4680      	mov	r8, r0
 800983e:	2800      	cmp	r0, #0
 8009840:	d0ba      	beq.n	80097b8 <_strtod_l+0x690>
 8009842:	4601      	mov	r1, r0
 8009844:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	f001 fc8e 	bl	800b168 <__multiply>
 800984c:	900a      	str	r0, [sp, #40]	@ 0x28
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f ae8d 	beq.w	800956e <_strtod_l+0x446>
 8009854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009856:	9805      	ldr	r0, [sp, #20]
 8009858:	f001 fb72 	bl	800af40 <_Bfree>
 800985c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800985e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009860:	2d00      	cmp	r5, #0
 8009862:	dc1d      	bgt.n	80098a0 <_strtod_l+0x778>
 8009864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	dd23      	ble.n	80098b2 <_strtod_l+0x78a>
 800986a:	4649      	mov	r1, r9
 800986c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800986e:	9805      	ldr	r0, [sp, #20]
 8009870:	f001 fd1c 	bl	800b2ac <__pow5mult>
 8009874:	4681      	mov	r9, r0
 8009876:	b9e0      	cbnz	r0, 80098b2 <_strtod_l+0x78a>
 8009878:	f04f 0900 	mov.w	r9, #0
 800987c:	e677      	b.n	800956e <_strtod_l+0x446>
 800987e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009882:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009886:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800988a:	35e2      	adds	r5, #226	@ 0xe2
 800988c:	fa01 f305 	lsl.w	r3, r1, r5
 8009890:	9310      	str	r3, [sp, #64]	@ 0x40
 8009892:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009894:	e7ba      	b.n	800980c <_strtod_l+0x6e4>
 8009896:	2300      	movs	r3, #0
 8009898:	9310      	str	r3, [sp, #64]	@ 0x40
 800989a:	2301      	movs	r3, #1
 800989c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800989e:	e7b5      	b.n	800980c <_strtod_l+0x6e4>
 80098a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098a2:	9805      	ldr	r0, [sp, #20]
 80098a4:	462a      	mov	r2, r5
 80098a6:	f001 fd5b 	bl	800b360 <__lshift>
 80098aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d1d9      	bne.n	8009864 <_strtod_l+0x73c>
 80098b0:	e65d      	b.n	800956e <_strtod_l+0x446>
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	dd07      	ble.n	80098c6 <_strtod_l+0x79e>
 80098b6:	4649      	mov	r1, r9
 80098b8:	9805      	ldr	r0, [sp, #20]
 80098ba:	4632      	mov	r2, r6
 80098bc:	f001 fd50 	bl	800b360 <__lshift>
 80098c0:	4681      	mov	r9, r0
 80098c2:	2800      	cmp	r0, #0
 80098c4:	d0d8      	beq.n	8009878 <_strtod_l+0x750>
 80098c6:	2f00      	cmp	r7, #0
 80098c8:	dd08      	ble.n	80098dc <_strtod_l+0x7b4>
 80098ca:	4641      	mov	r1, r8
 80098cc:	9805      	ldr	r0, [sp, #20]
 80098ce:	463a      	mov	r2, r7
 80098d0:	f001 fd46 	bl	800b360 <__lshift>
 80098d4:	4680      	mov	r8, r0
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f43f ae49 	beq.w	800956e <_strtod_l+0x446>
 80098dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098de:	9805      	ldr	r0, [sp, #20]
 80098e0:	464a      	mov	r2, r9
 80098e2:	f001 fdc5 	bl	800b470 <__mdiff>
 80098e6:	4604      	mov	r4, r0
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f43f ae40 	beq.w	800956e <_strtod_l+0x446>
 80098ee:	68c3      	ldr	r3, [r0, #12]
 80098f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098f2:	2300      	movs	r3, #0
 80098f4:	60c3      	str	r3, [r0, #12]
 80098f6:	4641      	mov	r1, r8
 80098f8:	f001 fd9e 	bl	800b438 <__mcmp>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	da45      	bge.n	800998c <_strtod_l+0x864>
 8009900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009902:	ea53 030a 	orrs.w	r3, r3, sl
 8009906:	d16b      	bne.n	80099e0 <_strtod_l+0x8b8>
 8009908:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800990c:	2b00      	cmp	r3, #0
 800990e:	d167      	bne.n	80099e0 <_strtod_l+0x8b8>
 8009910:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009914:	0d1b      	lsrs	r3, r3, #20
 8009916:	051b      	lsls	r3, r3, #20
 8009918:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800991c:	d960      	bls.n	80099e0 <_strtod_l+0x8b8>
 800991e:	6963      	ldr	r3, [r4, #20]
 8009920:	b913      	cbnz	r3, 8009928 <_strtod_l+0x800>
 8009922:	6923      	ldr	r3, [r4, #16]
 8009924:	2b01      	cmp	r3, #1
 8009926:	dd5b      	ble.n	80099e0 <_strtod_l+0x8b8>
 8009928:	4621      	mov	r1, r4
 800992a:	2201      	movs	r2, #1
 800992c:	9805      	ldr	r0, [sp, #20]
 800992e:	f001 fd17 	bl	800b360 <__lshift>
 8009932:	4641      	mov	r1, r8
 8009934:	4604      	mov	r4, r0
 8009936:	f001 fd7f 	bl	800b438 <__mcmp>
 800993a:	2800      	cmp	r0, #0
 800993c:	dd50      	ble.n	80099e0 <_strtod_l+0x8b8>
 800993e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009942:	9a08      	ldr	r2, [sp, #32]
 8009944:	0d1b      	lsrs	r3, r3, #20
 8009946:	051b      	lsls	r3, r3, #20
 8009948:	2a00      	cmp	r2, #0
 800994a:	d06a      	beq.n	8009a22 <_strtod_l+0x8fa>
 800994c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009950:	d867      	bhi.n	8009a22 <_strtod_l+0x8fa>
 8009952:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009956:	f67f ae9d 	bls.w	8009694 <_strtod_l+0x56c>
 800995a:	4b0a      	ldr	r3, [pc, #40]	@ (8009984 <_strtod_l+0x85c>)
 800995c:	4650      	mov	r0, sl
 800995e:	4659      	mov	r1, fp
 8009960:	2200      	movs	r2, #0
 8009962:	f7f6 fe49 	bl	80005f8 <__aeabi_dmul>
 8009966:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <_strtod_l+0x860>)
 8009968:	400b      	ands	r3, r1
 800996a:	4682      	mov	sl, r0
 800996c:	468b      	mov	fp, r1
 800996e:	2b00      	cmp	r3, #0
 8009970:	f47f ae08 	bne.w	8009584 <_strtod_l+0x45c>
 8009974:	9a05      	ldr	r2, [sp, #20]
 8009976:	2322      	movs	r3, #34	@ 0x22
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	e603      	b.n	8009584 <_strtod_l+0x45c>
 800997c:	0800e130 	.word	0x0800e130
 8009980:	fffffc02 	.word	0xfffffc02
 8009984:	39500000 	.word	0x39500000
 8009988:	7ff00000 	.word	0x7ff00000
 800998c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009990:	d165      	bne.n	8009a5e <_strtod_l+0x936>
 8009992:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009998:	b35a      	cbz	r2, 80099f2 <_strtod_l+0x8ca>
 800999a:	4a9f      	ldr	r2, [pc, #636]	@ (8009c18 <_strtod_l+0xaf0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d12b      	bne.n	80099f8 <_strtod_l+0x8d0>
 80099a0:	9b08      	ldr	r3, [sp, #32]
 80099a2:	4651      	mov	r1, sl
 80099a4:	b303      	cbz	r3, 80099e8 <_strtod_l+0x8c0>
 80099a6:	4b9d      	ldr	r3, [pc, #628]	@ (8009c1c <_strtod_l+0xaf4>)
 80099a8:	465a      	mov	r2, fp
 80099aa:	4013      	ands	r3, r2
 80099ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099b0:	f04f 32ff 	mov.w	r2, #4294967295
 80099b4:	d81b      	bhi.n	80099ee <_strtod_l+0x8c6>
 80099b6:	0d1b      	lsrs	r3, r3, #20
 80099b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	4299      	cmp	r1, r3
 80099c2:	d119      	bne.n	80099f8 <_strtod_l+0x8d0>
 80099c4:	4b96      	ldr	r3, [pc, #600]	@ (8009c20 <_strtod_l+0xaf8>)
 80099c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d102      	bne.n	80099d2 <_strtod_l+0x8aa>
 80099cc:	3101      	adds	r1, #1
 80099ce:	f43f adce 	beq.w	800956e <_strtod_l+0x446>
 80099d2:	4b92      	ldr	r3, [pc, #584]	@ (8009c1c <_strtod_l+0xaf4>)
 80099d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099d6:	401a      	ands	r2, r3
 80099d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099dc:	f04f 0a00 	mov.w	sl, #0
 80099e0:	9b08      	ldr	r3, [sp, #32]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1b9      	bne.n	800995a <_strtod_l+0x832>
 80099e6:	e5cd      	b.n	8009584 <_strtod_l+0x45c>
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	e7e8      	b.n	80099c0 <_strtod_l+0x898>
 80099ee:	4613      	mov	r3, r2
 80099f0:	e7e6      	b.n	80099c0 <_strtod_l+0x898>
 80099f2:	ea53 030a 	orrs.w	r3, r3, sl
 80099f6:	d0a2      	beq.n	800993e <_strtod_l+0x816>
 80099f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099fa:	b1db      	cbz	r3, 8009a34 <_strtod_l+0x90c>
 80099fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099fe:	4213      	tst	r3, r2
 8009a00:	d0ee      	beq.n	80099e0 <_strtod_l+0x8b8>
 8009a02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a04:	9a08      	ldr	r2, [sp, #32]
 8009a06:	4650      	mov	r0, sl
 8009a08:	4659      	mov	r1, fp
 8009a0a:	b1bb      	cbz	r3, 8009a3c <_strtod_l+0x914>
 8009a0c:	f7ff fb6e 	bl	80090ec <sulp>
 8009a10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a14:	ec53 2b10 	vmov	r2, r3, d0
 8009a18:	f7f6 fc38 	bl	800028c <__adddf3>
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	468b      	mov	fp, r1
 8009a20:	e7de      	b.n	80099e0 <_strtod_l+0x8b8>
 8009a22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a2e:	f04f 3aff 	mov.w	sl, #4294967295
 8009a32:	e7d5      	b.n	80099e0 <_strtod_l+0x8b8>
 8009a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a36:	ea13 0f0a 	tst.w	r3, sl
 8009a3a:	e7e1      	b.n	8009a00 <_strtod_l+0x8d8>
 8009a3c:	f7ff fb56 	bl	80090ec <sulp>
 8009a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a44:	ec53 2b10 	vmov	r2, r3, d0
 8009a48:	f7f6 fc1e 	bl	8000288 <__aeabi_dsub>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4682      	mov	sl, r0
 8009a52:	468b      	mov	fp, r1
 8009a54:	f7f7 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d0c1      	beq.n	80099e0 <_strtod_l+0x8b8>
 8009a5c:	e61a      	b.n	8009694 <_strtod_l+0x56c>
 8009a5e:	4641      	mov	r1, r8
 8009a60:	4620      	mov	r0, r4
 8009a62:	f001 fe61 	bl	800b728 <__ratio>
 8009a66:	ec57 6b10 	vmov	r6, r7, d0
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f7 f83c 	bl	8000af0 <__aeabi_dcmple>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d06f      	beq.n	8009b5c <_strtod_l+0xa34>
 8009a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d17a      	bne.n	8009b78 <_strtod_l+0xa50>
 8009a82:	f1ba 0f00 	cmp.w	sl, #0
 8009a86:	d158      	bne.n	8009b3a <_strtod_l+0xa12>
 8009a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d15a      	bne.n	8009b48 <_strtod_l+0xa20>
 8009a92:	4b64      	ldr	r3, [pc, #400]	@ (8009c24 <_strtod_l+0xafc>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f7 f81f 	bl	8000adc <__aeabi_dcmplt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d159      	bne.n	8009b56 <_strtod_l+0xa2e>
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	4b60      	ldr	r3, [pc, #384]	@ (8009c28 <_strtod_l+0xb00>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f7f6 fda5 	bl	80005f8 <__aeabi_dmul>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ab6:	9606      	str	r6, [sp, #24]
 8009ab8:	9307      	str	r3, [sp, #28]
 8009aba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009abe:	4d57      	ldr	r5, [pc, #348]	@ (8009c1c <_strtod_l+0xaf4>)
 8009ac0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac6:	401d      	ands	r5, r3
 8009ac8:	4b58      	ldr	r3, [pc, #352]	@ (8009c2c <_strtod_l+0xb04>)
 8009aca:	429d      	cmp	r5, r3
 8009acc:	f040 80b2 	bne.w	8009c34 <_strtod_l+0xb0c>
 8009ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ad2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009ad6:	ec4b ab10 	vmov	d0, sl, fp
 8009ada:	f001 fd5d 	bl	800b598 <__ulp>
 8009ade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ae2:	ec51 0b10 	vmov	r0, r1, d0
 8009ae6:	f7f6 fd87 	bl	80005f8 <__aeabi_dmul>
 8009aea:	4652      	mov	r2, sl
 8009aec:	465b      	mov	r3, fp
 8009aee:	f7f6 fbcd 	bl	800028c <__adddf3>
 8009af2:	460b      	mov	r3, r1
 8009af4:	4949      	ldr	r1, [pc, #292]	@ (8009c1c <_strtod_l+0xaf4>)
 8009af6:	4a4e      	ldr	r2, [pc, #312]	@ (8009c30 <_strtod_l+0xb08>)
 8009af8:	4019      	ands	r1, r3
 8009afa:	4291      	cmp	r1, r2
 8009afc:	4682      	mov	sl, r0
 8009afe:	d942      	bls.n	8009b86 <_strtod_l+0xa5e>
 8009b00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b02:	4b47      	ldr	r3, [pc, #284]	@ (8009c20 <_strtod_l+0xaf8>)
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d103      	bne.n	8009b10 <_strtod_l+0x9e8>
 8009b08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f43f ad2f 	beq.w	800956e <_strtod_l+0x446>
 8009b10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009c20 <_strtod_l+0xaf8>
 8009b14:	f04f 3aff 	mov.w	sl, #4294967295
 8009b18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	f001 fa10 	bl	800af40 <_Bfree>
 8009b20:	9805      	ldr	r0, [sp, #20]
 8009b22:	4649      	mov	r1, r9
 8009b24:	f001 fa0c 	bl	800af40 <_Bfree>
 8009b28:	9805      	ldr	r0, [sp, #20]
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	f001 fa08 	bl	800af40 <_Bfree>
 8009b30:	9805      	ldr	r0, [sp, #20]
 8009b32:	4621      	mov	r1, r4
 8009b34:	f001 fa04 	bl	800af40 <_Bfree>
 8009b38:	e619      	b.n	800976e <_strtod_l+0x646>
 8009b3a:	f1ba 0f01 	cmp.w	sl, #1
 8009b3e:	d103      	bne.n	8009b48 <_strtod_l+0xa20>
 8009b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f43f ada6 	beq.w	8009694 <_strtod_l+0x56c>
 8009b48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009bf8 <_strtod_l+0xad0>
 8009b4c:	4f35      	ldr	r7, [pc, #212]	@ (8009c24 <_strtod_l+0xafc>)
 8009b4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b52:	2600      	movs	r6, #0
 8009b54:	e7b1      	b.n	8009aba <_strtod_l+0x992>
 8009b56:	4f34      	ldr	r7, [pc, #208]	@ (8009c28 <_strtod_l+0xb00>)
 8009b58:	2600      	movs	r6, #0
 8009b5a:	e7aa      	b.n	8009ab2 <_strtod_l+0x98a>
 8009b5c:	4b32      	ldr	r3, [pc, #200]	@ (8009c28 <_strtod_l+0xb00>)
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	2200      	movs	r2, #0
 8009b64:	f7f6 fd48 	bl	80005f8 <__aeabi_dmul>
 8009b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d09f      	beq.n	8009ab2 <_strtod_l+0x98a>
 8009b72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b76:	e7a0      	b.n	8009aba <_strtod_l+0x992>
 8009b78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c00 <_strtod_l+0xad8>
 8009b7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b80:	ec57 6b17 	vmov	r6, r7, d7
 8009b84:	e799      	b.n	8009aba <_strtod_l+0x992>
 8009b86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b8a:	9b08      	ldr	r3, [sp, #32]
 8009b8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1c1      	bne.n	8009b18 <_strtod_l+0x9f0>
 8009b94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b98:	0d1b      	lsrs	r3, r3, #20
 8009b9a:	051b      	lsls	r3, r3, #20
 8009b9c:	429d      	cmp	r5, r3
 8009b9e:	d1bb      	bne.n	8009b18 <_strtod_l+0x9f0>
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f7 f888 	bl	8000cb8 <__aeabi_d2lz>
 8009ba8:	f7f6 fcf8 	bl	800059c <__aeabi_l2d>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fb68 	bl	8000288 <__aeabi_dsub>
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4602      	mov	r2, r0
 8009bbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bc6:	ea46 060a 	orr.w	r6, r6, sl
 8009bca:	431e      	orrs	r6, r3
 8009bcc:	d06f      	beq.n	8009cae <_strtod_l+0xb86>
 8009bce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c08 <_strtod_l+0xae0>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 ff82 	bl	8000adc <__aeabi_dcmplt>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f47f acd3 	bne.w	8009584 <_strtod_l+0x45c>
 8009bde:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c10 <_strtod_l+0xae8>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009be8:	f7f6 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d093      	beq.n	8009b18 <_strtod_l+0x9f0>
 8009bf0:	e4c8      	b.n	8009584 <_strtod_l+0x45c>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	00000000 	.word	0x00000000
 8009bfc:	bff00000 	.word	0xbff00000
 8009c00:	00000000 	.word	0x00000000
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	94a03595 	.word	0x94a03595
 8009c0c:	3fdfffff 	.word	0x3fdfffff
 8009c10:	35afe535 	.word	0x35afe535
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	000fffff 	.word	0x000fffff
 8009c1c:	7ff00000 	.word	0x7ff00000
 8009c20:	7fefffff 	.word	0x7fefffff
 8009c24:	3ff00000 	.word	0x3ff00000
 8009c28:	3fe00000 	.word	0x3fe00000
 8009c2c:	7fe00000 	.word	0x7fe00000
 8009c30:	7c9fffff 	.word	0x7c9fffff
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	b323      	cbz	r3, 8009c82 <_strtod_l+0xb5a>
 8009c38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c3c:	d821      	bhi.n	8009c82 <_strtod_l+0xb5a>
 8009c3e:	a328      	add	r3, pc, #160	@ (adr r3, 8009ce0 <_strtod_l+0xbb8>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 ff52 	bl	8000af0 <__aeabi_dcmple>
 8009c4c:	b1a0      	cbz	r0, 8009c78 <_strtod_l+0xb50>
 8009c4e:	4639      	mov	r1, r7
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7f6 ffa9 	bl	8000ba8 <__aeabi_d2uiz>
 8009c56:	2801      	cmp	r0, #1
 8009c58:	bf38      	it	cc
 8009c5a:	2001      	movcc	r0, #1
 8009c5c:	f7f6 fc52 	bl	8000504 <__aeabi_ui2d>
 8009c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	b9fb      	cbnz	r3, 8009ca8 <_strtod_l+0xb80>
 8009c68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c7e:	1b5b      	subs	r3, r3, r5
 8009c80:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c8a:	f001 fc85 	bl	800b598 <__ulp>
 8009c8e:	4650      	mov	r0, sl
 8009c90:	ec53 2b10 	vmov	r2, r3, d0
 8009c94:	4659      	mov	r1, fp
 8009c96:	f7f6 fcaf 	bl	80005f8 <__aeabi_dmul>
 8009c9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c9e:	f7f6 faf5 	bl	800028c <__adddf3>
 8009ca2:	4682      	mov	sl, r0
 8009ca4:	468b      	mov	fp, r1
 8009ca6:	e770      	b.n	8009b8a <_strtod_l+0xa62>
 8009ca8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009cac:	e7e0      	b.n	8009c70 <_strtod_l+0xb48>
 8009cae:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ce8 <_strtod_l+0xbc0>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f7f6 ff12 	bl	8000adc <__aeabi_dcmplt>
 8009cb8:	e798      	b.n	8009bec <_strtod_l+0xac4>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009cc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	f7ff ba6d 	b.w	80091a2 <_strtod_l+0x7a>
 8009cc8:	2a65      	cmp	r2, #101	@ 0x65
 8009cca:	f43f ab68 	beq.w	800939e <_strtod_l+0x276>
 8009cce:	2a45      	cmp	r2, #69	@ 0x45
 8009cd0:	f43f ab65 	beq.w	800939e <_strtod_l+0x276>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f7ff bba0 	b.w	800941a <_strtod_l+0x2f2>
 8009cda:	bf00      	nop
 8009cdc:	f3af 8000 	nop.w
 8009ce0:	ffc00000 	.word	0xffc00000
 8009ce4:	41dfffff 	.word	0x41dfffff
 8009ce8:	94a03595 	.word	0x94a03595
 8009cec:	3fcfffff 	.word	0x3fcfffff

08009cf0 <_strtod_r>:
 8009cf0:	4b01      	ldr	r3, [pc, #4]	@ (8009cf8 <_strtod_r+0x8>)
 8009cf2:	f7ff ba19 	b.w	8009128 <_strtod_l>
 8009cf6:	bf00      	nop
 8009cf8:	20000108 	.word	0x20000108

08009cfc <_strtol_l.isra.0>:
 8009cfc:	2b24      	cmp	r3, #36	@ 0x24
 8009cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d02:	4686      	mov	lr, r0
 8009d04:	4690      	mov	r8, r2
 8009d06:	d801      	bhi.n	8009d0c <_strtol_l.isra.0+0x10>
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d106      	bne.n	8009d1a <_strtol_l.isra.0+0x1e>
 8009d0c:	f000 fcf8 	bl	800a700 <__errno>
 8009d10:	2316      	movs	r3, #22
 8009d12:	6003      	str	r3, [r0, #0]
 8009d14:	2000      	movs	r0, #0
 8009d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1a:	4834      	ldr	r0, [pc, #208]	@ (8009dec <_strtol_l.isra.0+0xf0>)
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	462a      	mov	r2, r5
 8009d20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d24:	5d06      	ldrb	r6, [r0, r4]
 8009d26:	f016 0608 	ands.w	r6, r6, #8
 8009d2a:	d1f8      	bne.n	8009d1e <_strtol_l.isra.0+0x22>
 8009d2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d2e:	d110      	bne.n	8009d52 <_strtol_l.isra.0+0x56>
 8009d30:	782c      	ldrb	r4, [r5, #0]
 8009d32:	2601      	movs	r6, #1
 8009d34:	1c95      	adds	r5, r2, #2
 8009d36:	f033 0210 	bics.w	r2, r3, #16
 8009d3a:	d115      	bne.n	8009d68 <_strtol_l.isra.0+0x6c>
 8009d3c:	2c30      	cmp	r4, #48	@ 0x30
 8009d3e:	d10d      	bne.n	8009d5c <_strtol_l.isra.0+0x60>
 8009d40:	782a      	ldrb	r2, [r5, #0]
 8009d42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d46:	2a58      	cmp	r2, #88	@ 0x58
 8009d48:	d108      	bne.n	8009d5c <_strtol_l.isra.0+0x60>
 8009d4a:	786c      	ldrb	r4, [r5, #1]
 8009d4c:	3502      	adds	r5, #2
 8009d4e:	2310      	movs	r3, #16
 8009d50:	e00a      	b.n	8009d68 <_strtol_l.isra.0+0x6c>
 8009d52:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d54:	bf04      	itt	eq
 8009d56:	782c      	ldrbeq	r4, [r5, #0]
 8009d58:	1c95      	addeq	r5, r2, #2
 8009d5a:	e7ec      	b.n	8009d36 <_strtol_l.isra.0+0x3a>
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1f6      	bne.n	8009d4e <_strtol_l.isra.0+0x52>
 8009d60:	2c30      	cmp	r4, #48	@ 0x30
 8009d62:	bf14      	ite	ne
 8009d64:	230a      	movne	r3, #10
 8009d66:	2308      	moveq	r3, #8
 8009d68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d70:	2200      	movs	r2, #0
 8009d72:	fbbc f9f3 	udiv	r9, ip, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d80:	2f09      	cmp	r7, #9
 8009d82:	d80f      	bhi.n	8009da4 <_strtol_l.isra.0+0xa8>
 8009d84:	463c      	mov	r4, r7
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	dd1b      	ble.n	8009dc2 <_strtol_l.isra.0+0xc6>
 8009d8a:	1c57      	adds	r7, r2, #1
 8009d8c:	d007      	beq.n	8009d9e <_strtol_l.isra.0+0xa2>
 8009d8e:	4581      	cmp	r9, r0
 8009d90:	d314      	bcc.n	8009dbc <_strtol_l.isra.0+0xc0>
 8009d92:	d101      	bne.n	8009d98 <_strtol_l.isra.0+0x9c>
 8009d94:	45a2      	cmp	sl, r4
 8009d96:	db11      	blt.n	8009dbc <_strtol_l.isra.0+0xc0>
 8009d98:	fb00 4003 	mla	r0, r0, r3, r4
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009da2:	e7eb      	b.n	8009d7c <_strtol_l.isra.0+0x80>
 8009da4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009da8:	2f19      	cmp	r7, #25
 8009daa:	d801      	bhi.n	8009db0 <_strtol_l.isra.0+0xb4>
 8009dac:	3c37      	subs	r4, #55	@ 0x37
 8009dae:	e7ea      	b.n	8009d86 <_strtol_l.isra.0+0x8a>
 8009db0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009db4:	2f19      	cmp	r7, #25
 8009db6:	d804      	bhi.n	8009dc2 <_strtol_l.isra.0+0xc6>
 8009db8:	3c57      	subs	r4, #87	@ 0x57
 8009dba:	e7e4      	b.n	8009d86 <_strtol_l.isra.0+0x8a>
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	e7ed      	b.n	8009d9e <_strtol_l.isra.0+0xa2>
 8009dc2:	1c53      	adds	r3, r2, #1
 8009dc4:	d108      	bne.n	8009dd8 <_strtol_l.isra.0+0xdc>
 8009dc6:	2322      	movs	r3, #34	@ 0x22
 8009dc8:	f8ce 3000 	str.w	r3, [lr]
 8009dcc:	4660      	mov	r0, ip
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	d0a0      	beq.n	8009d16 <_strtol_l.isra.0+0x1a>
 8009dd4:	1e69      	subs	r1, r5, #1
 8009dd6:	e006      	b.n	8009de6 <_strtol_l.isra.0+0xea>
 8009dd8:	b106      	cbz	r6, 8009ddc <_strtol_l.isra.0+0xe0>
 8009dda:	4240      	negs	r0, r0
 8009ddc:	f1b8 0f00 	cmp.w	r8, #0
 8009de0:	d099      	beq.n	8009d16 <_strtol_l.isra.0+0x1a>
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	d1f6      	bne.n	8009dd4 <_strtol_l.isra.0+0xd8>
 8009de6:	f8c8 1000 	str.w	r1, [r8]
 8009dea:	e794      	b.n	8009d16 <_strtol_l.isra.0+0x1a>
 8009dec:	0800e159 	.word	0x0800e159

08009df0 <_strtol_r>:
 8009df0:	f7ff bf84 	b.w	8009cfc <_strtol_l.isra.0>

08009df4 <strtol>:
 8009df4:	4613      	mov	r3, r2
 8009df6:	460a      	mov	r2, r1
 8009df8:	4601      	mov	r1, r0
 8009dfa:	4802      	ldr	r0, [pc, #8]	@ (8009e04 <strtol+0x10>)
 8009dfc:	6800      	ldr	r0, [r0, #0]
 8009dfe:	f7ff bf7d 	b.w	8009cfc <_strtol_l.isra.0>
 8009e02:	bf00      	nop
 8009e04:	20000274 	.word	0x20000274

08009e08 <_scanf_float>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	b087      	sub	sp, #28
 8009e0e:	4691      	mov	r9, r2
 8009e10:	9303      	str	r3, [sp, #12]
 8009e12:	688b      	ldr	r3, [r1, #8]
 8009e14:	1e5a      	subs	r2, r3, #1
 8009e16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e1a:	bf81      	itttt	hi
 8009e1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e20:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e28:	608b      	strhi	r3, [r1, #8]
 8009e2a:	680b      	ldr	r3, [r1, #0]
 8009e2c:	460a      	mov	r2, r1
 8009e2e:	f04f 0500 	mov.w	r5, #0
 8009e32:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009e36:	f842 3b1c 	str.w	r3, [r2], #28
 8009e3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e3e:	4680      	mov	r8, r0
 8009e40:	460c      	mov	r4, r1
 8009e42:	bf98      	it	ls
 8009e44:	f04f 0b00 	movls.w	fp, #0
 8009e48:	9201      	str	r2, [sp, #4]
 8009e4a:	4616      	mov	r6, r2
 8009e4c:	46aa      	mov	sl, r5
 8009e4e:	462f      	mov	r7, r5
 8009e50:	9502      	str	r5, [sp, #8]
 8009e52:	68a2      	ldr	r2, [r4, #8]
 8009e54:	b15a      	cbz	r2, 8009e6e <_scanf_float+0x66>
 8009e56:	f8d9 3000 	ldr.w	r3, [r9]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b4e      	cmp	r3, #78	@ 0x4e
 8009e5e:	d863      	bhi.n	8009f28 <_scanf_float+0x120>
 8009e60:	2b40      	cmp	r3, #64	@ 0x40
 8009e62:	d83b      	bhi.n	8009edc <_scanf_float+0xd4>
 8009e64:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009e68:	b2c8      	uxtb	r0, r1
 8009e6a:	280e      	cmp	r0, #14
 8009e6c:	d939      	bls.n	8009ee2 <_scanf_float+0xda>
 8009e6e:	b11f      	cbz	r7, 8009e78 <_scanf_float+0x70>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e7c:	f1ba 0f01 	cmp.w	sl, #1
 8009e80:	f200 8114 	bhi.w	800a0ac <_scanf_float+0x2a4>
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	429e      	cmp	r6, r3
 8009e88:	f200 8105 	bhi.w	800a096 <_scanf_float+0x28e>
 8009e8c:	2001      	movs	r0, #1
 8009e8e:	b007      	add	sp, #28
 8009e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e94:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009e98:	2a0d      	cmp	r2, #13
 8009e9a:	d8e8      	bhi.n	8009e6e <_scanf_float+0x66>
 8009e9c:	a101      	add	r1, pc, #4	@ (adr r1, 8009ea4 <_scanf_float+0x9c>)
 8009e9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009fed 	.word	0x08009fed
 8009ea8:	08009e6f 	.word	0x08009e6f
 8009eac:	08009e6f 	.word	0x08009e6f
 8009eb0:	08009e6f 	.word	0x08009e6f
 8009eb4:	0800a049 	.word	0x0800a049
 8009eb8:	0800a023 	.word	0x0800a023
 8009ebc:	08009e6f 	.word	0x08009e6f
 8009ec0:	08009e6f 	.word	0x08009e6f
 8009ec4:	08009ffb 	.word	0x08009ffb
 8009ec8:	08009e6f 	.word	0x08009e6f
 8009ecc:	08009e6f 	.word	0x08009e6f
 8009ed0:	08009e6f 	.word	0x08009e6f
 8009ed4:	08009e6f 	.word	0x08009e6f
 8009ed8:	08009fb7 	.word	0x08009fb7
 8009edc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009ee0:	e7da      	b.n	8009e98 <_scanf_float+0x90>
 8009ee2:	290e      	cmp	r1, #14
 8009ee4:	d8c3      	bhi.n	8009e6e <_scanf_float+0x66>
 8009ee6:	a001      	add	r0, pc, #4	@ (adr r0, 8009eec <_scanf_float+0xe4>)
 8009ee8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009eec:	08009fa7 	.word	0x08009fa7
 8009ef0:	08009e6f 	.word	0x08009e6f
 8009ef4:	08009fa7 	.word	0x08009fa7
 8009ef8:	0800a037 	.word	0x0800a037
 8009efc:	08009e6f 	.word	0x08009e6f
 8009f00:	08009f49 	.word	0x08009f49
 8009f04:	08009f8d 	.word	0x08009f8d
 8009f08:	08009f8d 	.word	0x08009f8d
 8009f0c:	08009f8d 	.word	0x08009f8d
 8009f10:	08009f8d 	.word	0x08009f8d
 8009f14:	08009f8d 	.word	0x08009f8d
 8009f18:	08009f8d 	.word	0x08009f8d
 8009f1c:	08009f8d 	.word	0x08009f8d
 8009f20:	08009f8d 	.word	0x08009f8d
 8009f24:	08009f8d 	.word	0x08009f8d
 8009f28:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f2a:	d809      	bhi.n	8009f40 <_scanf_float+0x138>
 8009f2c:	2b60      	cmp	r3, #96	@ 0x60
 8009f2e:	d8b1      	bhi.n	8009e94 <_scanf_float+0x8c>
 8009f30:	2b54      	cmp	r3, #84	@ 0x54
 8009f32:	d07b      	beq.n	800a02c <_scanf_float+0x224>
 8009f34:	2b59      	cmp	r3, #89	@ 0x59
 8009f36:	d19a      	bne.n	8009e6e <_scanf_float+0x66>
 8009f38:	2d07      	cmp	r5, #7
 8009f3a:	d198      	bne.n	8009e6e <_scanf_float+0x66>
 8009f3c:	2508      	movs	r5, #8
 8009f3e:	e02f      	b.n	8009fa0 <_scanf_float+0x198>
 8009f40:	2b74      	cmp	r3, #116	@ 0x74
 8009f42:	d073      	beq.n	800a02c <_scanf_float+0x224>
 8009f44:	2b79      	cmp	r3, #121	@ 0x79
 8009f46:	e7f6      	b.n	8009f36 <_scanf_float+0x12e>
 8009f48:	6821      	ldr	r1, [r4, #0]
 8009f4a:	05c8      	lsls	r0, r1, #23
 8009f4c:	d51e      	bpl.n	8009f8c <_scanf_float+0x184>
 8009f4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009f52:	6021      	str	r1, [r4, #0]
 8009f54:	3701      	adds	r7, #1
 8009f56:	f1bb 0f00 	cmp.w	fp, #0
 8009f5a:	d003      	beq.n	8009f64 <_scanf_float+0x15c>
 8009f5c:	3201      	adds	r2, #1
 8009f5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f62:	60a2      	str	r2, [r4, #8]
 8009f64:	68a3      	ldr	r3, [r4, #8]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	60a3      	str	r3, [r4, #8]
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	6123      	str	r3, [r4, #16]
 8009f70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f8c9 3004 	str.w	r3, [r9, #4]
 8009f7c:	f340 8082 	ble.w	800a084 <_scanf_float+0x27c>
 8009f80:	f8d9 3000 	ldr.w	r3, [r9]
 8009f84:	3301      	adds	r3, #1
 8009f86:	f8c9 3000 	str.w	r3, [r9]
 8009f8a:	e762      	b.n	8009e52 <_scanf_float+0x4a>
 8009f8c:	eb1a 0105 	adds.w	r1, sl, r5
 8009f90:	f47f af6d 	bne.w	8009e6e <_scanf_float+0x66>
 8009f94:	6822      	ldr	r2, [r4, #0]
 8009f96:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009f9a:	6022      	str	r2, [r4, #0]
 8009f9c:	460d      	mov	r5, r1
 8009f9e:	468a      	mov	sl, r1
 8009fa0:	f806 3b01 	strb.w	r3, [r6], #1
 8009fa4:	e7de      	b.n	8009f64 <_scanf_float+0x15c>
 8009fa6:	6822      	ldr	r2, [r4, #0]
 8009fa8:	0610      	lsls	r0, r2, #24
 8009faa:	f57f af60 	bpl.w	8009e6e <_scanf_float+0x66>
 8009fae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fb2:	6022      	str	r2, [r4, #0]
 8009fb4:	e7f4      	b.n	8009fa0 <_scanf_float+0x198>
 8009fb6:	f1ba 0f00 	cmp.w	sl, #0
 8009fba:	d10c      	bne.n	8009fd6 <_scanf_float+0x1ce>
 8009fbc:	b977      	cbnz	r7, 8009fdc <_scanf_float+0x1d4>
 8009fbe:	6822      	ldr	r2, [r4, #0]
 8009fc0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009fc4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009fc8:	d108      	bne.n	8009fdc <_scanf_float+0x1d4>
 8009fca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fce:	6022      	str	r2, [r4, #0]
 8009fd0:	f04f 0a01 	mov.w	sl, #1
 8009fd4:	e7e4      	b.n	8009fa0 <_scanf_float+0x198>
 8009fd6:	f1ba 0f02 	cmp.w	sl, #2
 8009fda:	d050      	beq.n	800a07e <_scanf_float+0x276>
 8009fdc:	2d01      	cmp	r5, #1
 8009fde:	d002      	beq.n	8009fe6 <_scanf_float+0x1de>
 8009fe0:	2d04      	cmp	r5, #4
 8009fe2:	f47f af44 	bne.w	8009e6e <_scanf_float+0x66>
 8009fe6:	3501      	adds	r5, #1
 8009fe8:	b2ed      	uxtb	r5, r5
 8009fea:	e7d9      	b.n	8009fa0 <_scanf_float+0x198>
 8009fec:	f1ba 0f01 	cmp.w	sl, #1
 8009ff0:	f47f af3d 	bne.w	8009e6e <_scanf_float+0x66>
 8009ff4:	f04f 0a02 	mov.w	sl, #2
 8009ff8:	e7d2      	b.n	8009fa0 <_scanf_float+0x198>
 8009ffa:	b975      	cbnz	r5, 800a01a <_scanf_float+0x212>
 8009ffc:	2f00      	cmp	r7, #0
 8009ffe:	f47f af37 	bne.w	8009e70 <_scanf_float+0x68>
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a008:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a00c:	f040 8103 	bne.w	800a216 <_scanf_float+0x40e>
 800a010:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a014:	6022      	str	r2, [r4, #0]
 800a016:	2501      	movs	r5, #1
 800a018:	e7c2      	b.n	8009fa0 <_scanf_float+0x198>
 800a01a:	2d03      	cmp	r5, #3
 800a01c:	d0e3      	beq.n	8009fe6 <_scanf_float+0x1de>
 800a01e:	2d05      	cmp	r5, #5
 800a020:	e7df      	b.n	8009fe2 <_scanf_float+0x1da>
 800a022:	2d02      	cmp	r5, #2
 800a024:	f47f af23 	bne.w	8009e6e <_scanf_float+0x66>
 800a028:	2503      	movs	r5, #3
 800a02a:	e7b9      	b.n	8009fa0 <_scanf_float+0x198>
 800a02c:	2d06      	cmp	r5, #6
 800a02e:	f47f af1e 	bne.w	8009e6e <_scanf_float+0x66>
 800a032:	2507      	movs	r5, #7
 800a034:	e7b4      	b.n	8009fa0 <_scanf_float+0x198>
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	0591      	lsls	r1, r2, #22
 800a03a:	f57f af18 	bpl.w	8009e6e <_scanf_float+0x66>
 800a03e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a042:	6022      	str	r2, [r4, #0]
 800a044:	9702      	str	r7, [sp, #8]
 800a046:	e7ab      	b.n	8009fa0 <_scanf_float+0x198>
 800a048:	6822      	ldr	r2, [r4, #0]
 800a04a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a04e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a052:	d005      	beq.n	800a060 <_scanf_float+0x258>
 800a054:	0550      	lsls	r0, r2, #21
 800a056:	f57f af0a 	bpl.w	8009e6e <_scanf_float+0x66>
 800a05a:	2f00      	cmp	r7, #0
 800a05c:	f000 80db 	beq.w	800a216 <_scanf_float+0x40e>
 800a060:	0591      	lsls	r1, r2, #22
 800a062:	bf58      	it	pl
 800a064:	9902      	ldrpl	r1, [sp, #8]
 800a066:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a06a:	bf58      	it	pl
 800a06c:	1a79      	subpl	r1, r7, r1
 800a06e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a072:	bf58      	it	pl
 800a074:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a078:	6022      	str	r2, [r4, #0]
 800a07a:	2700      	movs	r7, #0
 800a07c:	e790      	b.n	8009fa0 <_scanf_float+0x198>
 800a07e:	f04f 0a03 	mov.w	sl, #3
 800a082:	e78d      	b.n	8009fa0 <_scanf_float+0x198>
 800a084:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a088:	4649      	mov	r1, r9
 800a08a:	4640      	mov	r0, r8
 800a08c:	4798      	blx	r3
 800a08e:	2800      	cmp	r0, #0
 800a090:	f43f aedf 	beq.w	8009e52 <_scanf_float+0x4a>
 800a094:	e6eb      	b.n	8009e6e <_scanf_float+0x66>
 800a096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a09a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a09e:	464a      	mov	r2, r9
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	4798      	blx	r3
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	6123      	str	r3, [r4, #16]
 800a0aa:	e6eb      	b.n	8009e84 <_scanf_float+0x7c>
 800a0ac:	1e6b      	subs	r3, r5, #1
 800a0ae:	2b06      	cmp	r3, #6
 800a0b0:	d824      	bhi.n	800a0fc <_scanf_float+0x2f4>
 800a0b2:	2d02      	cmp	r5, #2
 800a0b4:	d836      	bhi.n	800a124 <_scanf_float+0x31c>
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	429e      	cmp	r6, r3
 800a0ba:	f67f aee7 	bls.w	8009e8c <_scanf_float+0x84>
 800a0be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0c6:	464a      	mov	r2, r9
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	4798      	blx	r3
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	6123      	str	r3, [r4, #16]
 800a0d2:	e7f0      	b.n	800a0b6 <_scanf_float+0x2ae>
 800a0d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a0dc:	464a      	mov	r2, r9
 800a0de:	4640      	mov	r0, r8
 800a0e0:	4798      	blx	r3
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	6123      	str	r3, [r4, #16]
 800a0e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ec:	fa5f fa8a 	uxtb.w	sl, sl
 800a0f0:	f1ba 0f02 	cmp.w	sl, #2
 800a0f4:	d1ee      	bne.n	800a0d4 <_scanf_float+0x2cc>
 800a0f6:	3d03      	subs	r5, #3
 800a0f8:	b2ed      	uxtb	r5, r5
 800a0fa:	1b76      	subs	r6, r6, r5
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	05da      	lsls	r2, r3, #23
 800a100:	d530      	bpl.n	800a164 <_scanf_float+0x35c>
 800a102:	055b      	lsls	r3, r3, #21
 800a104:	d511      	bpl.n	800a12a <_scanf_float+0x322>
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	429e      	cmp	r6, r3
 800a10a:	f67f aebf 	bls.w	8009e8c <_scanf_float+0x84>
 800a10e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a112:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a116:	464a      	mov	r2, r9
 800a118:	4640      	mov	r0, r8
 800a11a:	4798      	blx	r3
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	3b01      	subs	r3, #1
 800a120:	6123      	str	r3, [r4, #16]
 800a122:	e7f0      	b.n	800a106 <_scanf_float+0x2fe>
 800a124:	46aa      	mov	sl, r5
 800a126:	46b3      	mov	fp, r6
 800a128:	e7de      	b.n	800a0e8 <_scanf_float+0x2e0>
 800a12a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a12e:	6923      	ldr	r3, [r4, #16]
 800a130:	2965      	cmp	r1, #101	@ 0x65
 800a132:	f103 33ff 	add.w	r3, r3, #4294967295
 800a136:	f106 35ff 	add.w	r5, r6, #4294967295
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	d00c      	beq.n	800a158 <_scanf_float+0x350>
 800a13e:	2945      	cmp	r1, #69	@ 0x45
 800a140:	d00a      	beq.n	800a158 <_scanf_float+0x350>
 800a142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a146:	464a      	mov	r2, r9
 800a148:	4640      	mov	r0, r8
 800a14a:	4798      	blx	r3
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a152:	3b01      	subs	r3, #1
 800a154:	1eb5      	subs	r5, r6, #2
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a15c:	464a      	mov	r2, r9
 800a15e:	4640      	mov	r0, r8
 800a160:	4798      	blx	r3
 800a162:	462e      	mov	r6, r5
 800a164:	6822      	ldr	r2, [r4, #0]
 800a166:	f012 0210 	ands.w	r2, r2, #16
 800a16a:	d001      	beq.n	800a170 <_scanf_float+0x368>
 800a16c:	2000      	movs	r0, #0
 800a16e:	e68e      	b.n	8009e8e <_scanf_float+0x86>
 800a170:	7032      	strb	r2, [r6, #0]
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a17c:	d125      	bne.n	800a1ca <_scanf_float+0x3c2>
 800a17e:	9b02      	ldr	r3, [sp, #8]
 800a180:	429f      	cmp	r7, r3
 800a182:	d00a      	beq.n	800a19a <_scanf_float+0x392>
 800a184:	1bda      	subs	r2, r3, r7
 800a186:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a18a:	429e      	cmp	r6, r3
 800a18c:	bf28      	it	cs
 800a18e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a192:	4922      	ldr	r1, [pc, #136]	@ (800a21c <_scanf_float+0x414>)
 800a194:	4630      	mov	r0, r6
 800a196:	f000 f907 	bl	800a3a8 <siprintf>
 800a19a:	9901      	ldr	r1, [sp, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	4640      	mov	r0, r8
 800a1a0:	f7ff fda6 	bl	8009cf0 <_strtod_r>
 800a1a4:	9b03      	ldr	r3, [sp, #12]
 800a1a6:	6821      	ldr	r1, [r4, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f011 0f02 	tst.w	r1, #2
 800a1ae:	ec57 6b10 	vmov	r6, r7, d0
 800a1b2:	f103 0204 	add.w	r2, r3, #4
 800a1b6:	d015      	beq.n	800a1e4 <_scanf_float+0x3dc>
 800a1b8:	9903      	ldr	r1, [sp, #12]
 800a1ba:	600a      	str	r2, [r1, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	e9c3 6700 	strd	r6, r7, [r3]
 800a1c2:	68e3      	ldr	r3, [r4, #12]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	60e3      	str	r3, [r4, #12]
 800a1c8:	e7d0      	b.n	800a16c <_scanf_float+0x364>
 800a1ca:	9b04      	ldr	r3, [sp, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d0e4      	beq.n	800a19a <_scanf_float+0x392>
 800a1d0:	9905      	ldr	r1, [sp, #20]
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	3101      	adds	r1, #1
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f7ff fe0a 	bl	8009df0 <_strtol_r>
 800a1dc:	9b04      	ldr	r3, [sp, #16]
 800a1de:	9e05      	ldr	r6, [sp, #20]
 800a1e0:	1ac2      	subs	r2, r0, r3
 800a1e2:	e7d0      	b.n	800a186 <_scanf_float+0x37e>
 800a1e4:	f011 0f04 	tst.w	r1, #4
 800a1e8:	9903      	ldr	r1, [sp, #12]
 800a1ea:	600a      	str	r2, [r1, #0]
 800a1ec:	d1e6      	bne.n	800a1bc <_scanf_float+0x3b4>
 800a1ee:	681d      	ldr	r5, [r3, #0]
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	f7f6 fc98 	bl	8000b2c <__aeabi_dcmpun>
 800a1fc:	b128      	cbz	r0, 800a20a <_scanf_float+0x402>
 800a1fe:	4808      	ldr	r0, [pc, #32]	@ (800a220 <_scanf_float+0x418>)
 800a200:	f000 fac2 	bl	800a788 <nanf>
 800a204:	ed85 0a00 	vstr	s0, [r5]
 800a208:	e7db      	b.n	800a1c2 <_scanf_float+0x3ba>
 800a20a:	4630      	mov	r0, r6
 800a20c:	4639      	mov	r1, r7
 800a20e:	f7f6 fceb 	bl	8000be8 <__aeabi_d2f>
 800a212:	6028      	str	r0, [r5, #0]
 800a214:	e7d5      	b.n	800a1c2 <_scanf_float+0x3ba>
 800a216:	2700      	movs	r7, #0
 800a218:	e62e      	b.n	8009e78 <_scanf_float+0x70>
 800a21a:	bf00      	nop
 800a21c:	0800df8a 	.word	0x0800df8a
 800a220:	0800e101 	.word	0x0800e101

0800a224 <std>:
 800a224:	2300      	movs	r3, #0
 800a226:	b510      	push	{r4, lr}
 800a228:	4604      	mov	r4, r0
 800a22a:	e9c0 3300 	strd	r3, r3, [r0]
 800a22e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a232:	6083      	str	r3, [r0, #8]
 800a234:	8181      	strh	r1, [r0, #12]
 800a236:	6643      	str	r3, [r0, #100]	@ 0x64
 800a238:	81c2      	strh	r2, [r0, #14]
 800a23a:	6183      	str	r3, [r0, #24]
 800a23c:	4619      	mov	r1, r3
 800a23e:	2208      	movs	r2, #8
 800a240:	305c      	adds	r0, #92	@ 0x5c
 800a242:	f000 f9d9 	bl	800a5f8 <memset>
 800a246:	4b0d      	ldr	r3, [pc, #52]	@ (800a27c <std+0x58>)
 800a248:	6263      	str	r3, [r4, #36]	@ 0x24
 800a24a:	4b0d      	ldr	r3, [pc, #52]	@ (800a280 <std+0x5c>)
 800a24c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a24e:	4b0d      	ldr	r3, [pc, #52]	@ (800a284 <std+0x60>)
 800a250:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a252:	4b0d      	ldr	r3, [pc, #52]	@ (800a288 <std+0x64>)
 800a254:	6323      	str	r3, [r4, #48]	@ 0x30
 800a256:	4b0d      	ldr	r3, [pc, #52]	@ (800a28c <std+0x68>)
 800a258:	6224      	str	r4, [r4, #32]
 800a25a:	429c      	cmp	r4, r3
 800a25c:	d006      	beq.n	800a26c <std+0x48>
 800a25e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a262:	4294      	cmp	r4, r2
 800a264:	d002      	beq.n	800a26c <std+0x48>
 800a266:	33d0      	adds	r3, #208	@ 0xd0
 800a268:	429c      	cmp	r4, r3
 800a26a:	d105      	bne.n	800a278 <std+0x54>
 800a26c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a274:	f000 ba6e 	b.w	800a754 <__retarget_lock_init_recursive>
 800a278:	bd10      	pop	{r4, pc}
 800a27a:	bf00      	nop
 800a27c:	0800a445 	.word	0x0800a445
 800a280:	0800a46b 	.word	0x0800a46b
 800a284:	0800a4a3 	.word	0x0800a4a3
 800a288:	0800a4c7 	.word	0x0800a4c7
 800a28c:	20000a90 	.word	0x20000a90

0800a290 <stdio_exit_handler>:
 800a290:	4a02      	ldr	r2, [pc, #8]	@ (800a29c <stdio_exit_handler+0xc>)
 800a292:	4903      	ldr	r1, [pc, #12]	@ (800a2a0 <stdio_exit_handler+0x10>)
 800a294:	4803      	ldr	r0, [pc, #12]	@ (800a2a4 <stdio_exit_handler+0x14>)
 800a296:	f000 b869 	b.w	800a36c <_fwalk_sglue>
 800a29a:	bf00      	nop
 800a29c:	200000fc 	.word	0x200000fc
 800a2a0:	0800c7cd 	.word	0x0800c7cd
 800a2a4:	20000278 	.word	0x20000278

0800a2a8 <cleanup_stdio>:
 800a2a8:	6841      	ldr	r1, [r0, #4]
 800a2aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a2dc <cleanup_stdio+0x34>)
 800a2ac:	4299      	cmp	r1, r3
 800a2ae:	b510      	push	{r4, lr}
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	d001      	beq.n	800a2b8 <cleanup_stdio+0x10>
 800a2b4:	f002 fa8a 	bl	800c7cc <_fflush_r>
 800a2b8:	68a1      	ldr	r1, [r4, #8]
 800a2ba:	4b09      	ldr	r3, [pc, #36]	@ (800a2e0 <cleanup_stdio+0x38>)
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	d002      	beq.n	800a2c6 <cleanup_stdio+0x1e>
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f002 fa83 	bl	800c7cc <_fflush_r>
 800a2c6:	68e1      	ldr	r1, [r4, #12]
 800a2c8:	4b06      	ldr	r3, [pc, #24]	@ (800a2e4 <cleanup_stdio+0x3c>)
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d004      	beq.n	800a2d8 <cleanup_stdio+0x30>
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d4:	f002 ba7a 	b.w	800c7cc <_fflush_r>
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000a90 	.word	0x20000a90
 800a2e0:	20000af8 	.word	0x20000af8
 800a2e4:	20000b60 	.word	0x20000b60

0800a2e8 <global_stdio_init.part.0>:
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a318 <global_stdio_init.part.0+0x30>)
 800a2ec:	4c0b      	ldr	r4, [pc, #44]	@ (800a31c <global_stdio_init.part.0+0x34>)
 800a2ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a320 <global_stdio_init.part.0+0x38>)
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2104      	movs	r1, #4
 800a2f8:	f7ff ff94 	bl	800a224 <std>
 800a2fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a300:	2201      	movs	r2, #1
 800a302:	2109      	movs	r1, #9
 800a304:	f7ff ff8e 	bl	800a224 <std>
 800a308:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a30c:	2202      	movs	r2, #2
 800a30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a312:	2112      	movs	r1, #18
 800a314:	f7ff bf86 	b.w	800a224 <std>
 800a318:	20000bc8 	.word	0x20000bc8
 800a31c:	20000a90 	.word	0x20000a90
 800a320:	0800a291 	.word	0x0800a291

0800a324 <__sfp_lock_acquire>:
 800a324:	4801      	ldr	r0, [pc, #4]	@ (800a32c <__sfp_lock_acquire+0x8>)
 800a326:	f000 ba16 	b.w	800a756 <__retarget_lock_acquire_recursive>
 800a32a:	bf00      	nop
 800a32c:	20000bd1 	.word	0x20000bd1

0800a330 <__sfp_lock_release>:
 800a330:	4801      	ldr	r0, [pc, #4]	@ (800a338 <__sfp_lock_release+0x8>)
 800a332:	f000 ba11 	b.w	800a758 <__retarget_lock_release_recursive>
 800a336:	bf00      	nop
 800a338:	20000bd1 	.word	0x20000bd1

0800a33c <__sinit>:
 800a33c:	b510      	push	{r4, lr}
 800a33e:	4604      	mov	r4, r0
 800a340:	f7ff fff0 	bl	800a324 <__sfp_lock_acquire>
 800a344:	6a23      	ldr	r3, [r4, #32]
 800a346:	b11b      	cbz	r3, 800a350 <__sinit+0x14>
 800a348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a34c:	f7ff bff0 	b.w	800a330 <__sfp_lock_release>
 800a350:	4b04      	ldr	r3, [pc, #16]	@ (800a364 <__sinit+0x28>)
 800a352:	6223      	str	r3, [r4, #32]
 800a354:	4b04      	ldr	r3, [pc, #16]	@ (800a368 <__sinit+0x2c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f5      	bne.n	800a348 <__sinit+0xc>
 800a35c:	f7ff ffc4 	bl	800a2e8 <global_stdio_init.part.0>
 800a360:	e7f2      	b.n	800a348 <__sinit+0xc>
 800a362:	bf00      	nop
 800a364:	0800a2a9 	.word	0x0800a2a9
 800a368:	20000bc8 	.word	0x20000bc8

0800a36c <_fwalk_sglue>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	4607      	mov	r7, r0
 800a372:	4688      	mov	r8, r1
 800a374:	4614      	mov	r4, r2
 800a376:	2600      	movs	r6, #0
 800a378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a37c:	f1b9 0901 	subs.w	r9, r9, #1
 800a380:	d505      	bpl.n	800a38e <_fwalk_sglue+0x22>
 800a382:	6824      	ldr	r4, [r4, #0]
 800a384:	2c00      	cmp	r4, #0
 800a386:	d1f7      	bne.n	800a378 <_fwalk_sglue+0xc>
 800a388:	4630      	mov	r0, r6
 800a38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d907      	bls.n	800a3a4 <_fwalk_sglue+0x38>
 800a394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a398:	3301      	adds	r3, #1
 800a39a:	d003      	beq.n	800a3a4 <_fwalk_sglue+0x38>
 800a39c:	4629      	mov	r1, r5
 800a39e:	4638      	mov	r0, r7
 800a3a0:	47c0      	blx	r8
 800a3a2:	4306      	orrs	r6, r0
 800a3a4:	3568      	adds	r5, #104	@ 0x68
 800a3a6:	e7e9      	b.n	800a37c <_fwalk_sglue+0x10>

0800a3a8 <siprintf>:
 800a3a8:	b40e      	push	{r1, r2, r3}
 800a3aa:	b510      	push	{r4, lr}
 800a3ac:	b09d      	sub	sp, #116	@ 0x74
 800a3ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a3b0:	9002      	str	r0, [sp, #8]
 800a3b2:	9006      	str	r0, [sp, #24]
 800a3b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3b8:	480a      	ldr	r0, [pc, #40]	@ (800a3e4 <siprintf+0x3c>)
 800a3ba:	9107      	str	r1, [sp, #28]
 800a3bc:	9104      	str	r1, [sp, #16]
 800a3be:	490a      	ldr	r1, [pc, #40]	@ (800a3e8 <siprintf+0x40>)
 800a3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c4:	9105      	str	r1, [sp, #20]
 800a3c6:	2400      	movs	r4, #0
 800a3c8:	a902      	add	r1, sp, #8
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a3d0:	f001 fa90 	bl	800b8f4 <_svfiprintf_r>
 800a3d4:	9b02      	ldr	r3, [sp, #8]
 800a3d6:	701c      	strb	r4, [r3, #0]
 800a3d8:	b01d      	add	sp, #116	@ 0x74
 800a3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3de:	b003      	add	sp, #12
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20000274 	.word	0x20000274
 800a3e8:	ffff0208 	.word	0xffff0208

0800a3ec <siscanf>:
 800a3ec:	b40e      	push	{r1, r2, r3}
 800a3ee:	b570      	push	{r4, r5, r6, lr}
 800a3f0:	b09d      	sub	sp, #116	@ 0x74
 800a3f2:	ac21      	add	r4, sp, #132	@ 0x84
 800a3f4:	2500      	movs	r5, #0
 800a3f6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a3fa:	f854 6b04 	ldr.w	r6, [r4], #4
 800a3fe:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a402:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a404:	9002      	str	r0, [sp, #8]
 800a406:	9006      	str	r0, [sp, #24]
 800a408:	f7f5 fee2 	bl	80001d0 <strlen>
 800a40c:	4b0b      	ldr	r3, [pc, #44]	@ (800a43c <siscanf+0x50>)
 800a40e:	9003      	str	r0, [sp, #12]
 800a410:	9007      	str	r0, [sp, #28]
 800a412:	480b      	ldr	r0, [pc, #44]	@ (800a440 <siscanf+0x54>)
 800a414:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a416:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a41a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a41e:	4632      	mov	r2, r6
 800a420:	4623      	mov	r3, r4
 800a422:	a902      	add	r1, sp, #8
 800a424:	6800      	ldr	r0, [r0, #0]
 800a426:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a428:	9514      	str	r5, [sp, #80]	@ 0x50
 800a42a:	9401      	str	r4, [sp, #4]
 800a42c:	f001 fbb8 	bl	800bba0 <__ssvfiscanf_r>
 800a430:	b01d      	add	sp, #116	@ 0x74
 800a432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a436:	b003      	add	sp, #12
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	0800a467 	.word	0x0800a467
 800a440:	20000274 	.word	0x20000274

0800a444 <__sread>:
 800a444:	b510      	push	{r4, lr}
 800a446:	460c      	mov	r4, r1
 800a448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44c:	f000 f924 	bl	800a698 <_read_r>
 800a450:	2800      	cmp	r0, #0
 800a452:	bfab      	itete	ge
 800a454:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a456:	89a3      	ldrhlt	r3, [r4, #12]
 800a458:	181b      	addge	r3, r3, r0
 800a45a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a45e:	bfac      	ite	ge
 800a460:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a462:	81a3      	strhlt	r3, [r4, #12]
 800a464:	bd10      	pop	{r4, pc}

0800a466 <__seofread>:
 800a466:	2000      	movs	r0, #0
 800a468:	4770      	bx	lr

0800a46a <__swrite>:
 800a46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46e:	461f      	mov	r7, r3
 800a470:	898b      	ldrh	r3, [r1, #12]
 800a472:	05db      	lsls	r3, r3, #23
 800a474:	4605      	mov	r5, r0
 800a476:	460c      	mov	r4, r1
 800a478:	4616      	mov	r6, r2
 800a47a:	d505      	bpl.n	800a488 <__swrite+0x1e>
 800a47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a480:	2302      	movs	r3, #2
 800a482:	2200      	movs	r2, #0
 800a484:	f000 f8f6 	bl	800a674 <_lseek_r>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a48e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a492:	81a3      	strh	r3, [r4, #12]
 800a494:	4632      	mov	r2, r6
 800a496:	463b      	mov	r3, r7
 800a498:	4628      	mov	r0, r5
 800a49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a49e:	f000 b91d 	b.w	800a6dc <_write_r>

0800a4a2 <__sseek>:
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4aa:	f000 f8e3 	bl	800a674 <_lseek_r>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	bf15      	itete	ne
 800a4b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4be:	81a3      	strheq	r3, [r4, #12]
 800a4c0:	bf18      	it	ne
 800a4c2:	81a3      	strhne	r3, [r4, #12]
 800a4c4:	bd10      	pop	{r4, pc}

0800a4c6 <__sclose>:
 800a4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ca:	f000 b8c3 	b.w	800a654 <_close_r>

0800a4ce <__swbuf_r>:
 800a4ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d0:	460e      	mov	r6, r1
 800a4d2:	4614      	mov	r4, r2
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	b118      	cbz	r0, 800a4e0 <__swbuf_r+0x12>
 800a4d8:	6a03      	ldr	r3, [r0, #32]
 800a4da:	b90b      	cbnz	r3, 800a4e0 <__swbuf_r+0x12>
 800a4dc:	f7ff ff2e 	bl	800a33c <__sinit>
 800a4e0:	69a3      	ldr	r3, [r4, #24]
 800a4e2:	60a3      	str	r3, [r4, #8]
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	071a      	lsls	r2, r3, #28
 800a4e8:	d501      	bpl.n	800a4ee <__swbuf_r+0x20>
 800a4ea:	6923      	ldr	r3, [r4, #16]
 800a4ec:	b943      	cbnz	r3, 800a500 <__swbuf_r+0x32>
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f000 f82b 	bl	800a54c <__swsetup_r>
 800a4f6:	b118      	cbz	r0, 800a500 <__swbuf_r+0x32>
 800a4f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	6922      	ldr	r2, [r4, #16]
 800a504:	1a98      	subs	r0, r3, r2
 800a506:	6963      	ldr	r3, [r4, #20]
 800a508:	b2f6      	uxtb	r6, r6
 800a50a:	4283      	cmp	r3, r0
 800a50c:	4637      	mov	r7, r6
 800a50e:	dc05      	bgt.n	800a51c <__swbuf_r+0x4e>
 800a510:	4621      	mov	r1, r4
 800a512:	4628      	mov	r0, r5
 800a514:	f002 f95a 	bl	800c7cc <_fflush_r>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d1ed      	bne.n	800a4f8 <__swbuf_r+0x2a>
 800a51c:	68a3      	ldr	r3, [r4, #8]
 800a51e:	3b01      	subs	r3, #1
 800a520:	60a3      	str	r3, [r4, #8]
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	6022      	str	r2, [r4, #0]
 800a528:	701e      	strb	r6, [r3, #0]
 800a52a:	6962      	ldr	r2, [r4, #20]
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	429a      	cmp	r2, r3
 800a530:	d004      	beq.n	800a53c <__swbuf_r+0x6e>
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	07db      	lsls	r3, r3, #31
 800a536:	d5e1      	bpl.n	800a4fc <__swbuf_r+0x2e>
 800a538:	2e0a      	cmp	r6, #10
 800a53a:	d1df      	bne.n	800a4fc <__swbuf_r+0x2e>
 800a53c:	4621      	mov	r1, r4
 800a53e:	4628      	mov	r0, r5
 800a540:	f002 f944 	bl	800c7cc <_fflush_r>
 800a544:	2800      	cmp	r0, #0
 800a546:	d0d9      	beq.n	800a4fc <__swbuf_r+0x2e>
 800a548:	e7d6      	b.n	800a4f8 <__swbuf_r+0x2a>
	...

0800a54c <__swsetup_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4b29      	ldr	r3, [pc, #164]	@ (800a5f4 <__swsetup_r+0xa8>)
 800a550:	4605      	mov	r5, r0
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	460c      	mov	r4, r1
 800a556:	b118      	cbz	r0, 800a560 <__swsetup_r+0x14>
 800a558:	6a03      	ldr	r3, [r0, #32]
 800a55a:	b90b      	cbnz	r3, 800a560 <__swsetup_r+0x14>
 800a55c:	f7ff feee 	bl	800a33c <__sinit>
 800a560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a564:	0719      	lsls	r1, r3, #28
 800a566:	d422      	bmi.n	800a5ae <__swsetup_r+0x62>
 800a568:	06da      	lsls	r2, r3, #27
 800a56a:	d407      	bmi.n	800a57c <__swsetup_r+0x30>
 800a56c:	2209      	movs	r2, #9
 800a56e:	602a      	str	r2, [r5, #0]
 800a570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a574:	81a3      	strh	r3, [r4, #12]
 800a576:	f04f 30ff 	mov.w	r0, #4294967295
 800a57a:	e033      	b.n	800a5e4 <__swsetup_r+0x98>
 800a57c:	0758      	lsls	r0, r3, #29
 800a57e:	d512      	bpl.n	800a5a6 <__swsetup_r+0x5a>
 800a580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a582:	b141      	cbz	r1, 800a596 <__swsetup_r+0x4a>
 800a584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a588:	4299      	cmp	r1, r3
 800a58a:	d002      	beq.n	800a592 <__swsetup_r+0x46>
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 f901 	bl	800a794 <_free_r>
 800a592:	2300      	movs	r3, #0
 800a594:	6363      	str	r3, [r4, #52]	@ 0x34
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	6063      	str	r3, [r4, #4]
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	f043 0308 	orr.w	r3, r3, #8
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	b94b      	cbnz	r3, 800a5c6 <__swsetup_r+0x7a>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a5b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5bc:	d003      	beq.n	800a5c6 <__swsetup_r+0x7a>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	f002 f951 	bl	800c868 <__smakebuf_r>
 800a5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ca:	f013 0201 	ands.w	r2, r3, #1
 800a5ce:	d00a      	beq.n	800a5e6 <__swsetup_r+0x9a>
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	60a2      	str	r2, [r4, #8]
 800a5d4:	6962      	ldr	r2, [r4, #20]
 800a5d6:	4252      	negs	r2, r2
 800a5d8:	61a2      	str	r2, [r4, #24]
 800a5da:	6922      	ldr	r2, [r4, #16]
 800a5dc:	b942      	cbnz	r2, 800a5f0 <__swsetup_r+0xa4>
 800a5de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5e2:	d1c5      	bne.n	800a570 <__swsetup_r+0x24>
 800a5e4:	bd38      	pop	{r3, r4, r5, pc}
 800a5e6:	0799      	lsls	r1, r3, #30
 800a5e8:	bf58      	it	pl
 800a5ea:	6962      	ldrpl	r2, [r4, #20]
 800a5ec:	60a2      	str	r2, [r4, #8]
 800a5ee:	e7f4      	b.n	800a5da <__swsetup_r+0x8e>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	e7f7      	b.n	800a5e4 <__swsetup_r+0x98>
 800a5f4:	20000274 	.word	0x20000274

0800a5f8 <memset>:
 800a5f8:	4402      	add	r2, r0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d100      	bne.n	800a602 <memset+0xa>
 800a600:	4770      	bx	lr
 800a602:	f803 1b01 	strb.w	r1, [r3], #1
 800a606:	e7f9      	b.n	800a5fc <memset+0x4>

0800a608 <strncmp>:
 800a608:	b510      	push	{r4, lr}
 800a60a:	b16a      	cbz	r2, 800a628 <strncmp+0x20>
 800a60c:	3901      	subs	r1, #1
 800a60e:	1884      	adds	r4, r0, r2
 800a610:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a614:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a618:	429a      	cmp	r2, r3
 800a61a:	d103      	bne.n	800a624 <strncmp+0x1c>
 800a61c:	42a0      	cmp	r0, r4
 800a61e:	d001      	beq.n	800a624 <strncmp+0x1c>
 800a620:	2a00      	cmp	r2, #0
 800a622:	d1f5      	bne.n	800a610 <strncmp+0x8>
 800a624:	1ad0      	subs	r0, r2, r3
 800a626:	bd10      	pop	{r4, pc}
 800a628:	4610      	mov	r0, r2
 800a62a:	e7fc      	b.n	800a626 <strncmp+0x1e>

0800a62c <strncpy>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	3901      	subs	r1, #1
 800a630:	4603      	mov	r3, r0
 800a632:	b132      	cbz	r2, 800a642 <strncpy+0x16>
 800a634:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a638:	f803 4b01 	strb.w	r4, [r3], #1
 800a63c:	3a01      	subs	r2, #1
 800a63e:	2c00      	cmp	r4, #0
 800a640:	d1f7      	bne.n	800a632 <strncpy+0x6>
 800a642:	441a      	add	r2, r3
 800a644:	2100      	movs	r1, #0
 800a646:	4293      	cmp	r3, r2
 800a648:	d100      	bne.n	800a64c <strncpy+0x20>
 800a64a:	bd10      	pop	{r4, pc}
 800a64c:	f803 1b01 	strb.w	r1, [r3], #1
 800a650:	e7f9      	b.n	800a646 <strncpy+0x1a>
	...

0800a654 <_close_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d06      	ldr	r5, [pc, #24]	@ (800a670 <_close_r+0x1c>)
 800a658:	2300      	movs	r3, #0
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	602b      	str	r3, [r5, #0]
 800a660:	f7fa f9d0 	bl	8004a04 <_close>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_close_r+0x1a>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_close_r+0x1a>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20000bcc 	.word	0x20000bcc

0800a674 <_lseek_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	@ (800a694 <_lseek_r+0x20>)
 800a678:	4604      	mov	r4, r0
 800a67a:	4608      	mov	r0, r1
 800a67c:	4611      	mov	r1, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	602a      	str	r2, [r5, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	f7fa f9e5 	bl	8004a52 <_lseek>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_lseek_r+0x1e>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_lseek_r+0x1e>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	20000bcc 	.word	0x20000bcc

0800a698 <_read_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d07      	ldr	r5, [pc, #28]	@ (800a6b8 <_read_r+0x20>)
 800a69c:	4604      	mov	r4, r0
 800a69e:	4608      	mov	r0, r1
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	602a      	str	r2, [r5, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f7fa f973 	bl	8004992 <_read>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_read_r+0x1e>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_read_r+0x1e>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	20000bcc 	.word	0x20000bcc

0800a6bc <_sbrk_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d06      	ldr	r5, [pc, #24]	@ (800a6d8 <_sbrk_r+0x1c>)
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	602b      	str	r3, [r5, #0]
 800a6c8:	f7fa f9d0 	bl	8004a6c <_sbrk>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_sbrk_r+0x1a>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_sbrk_r+0x1a>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20000bcc 	.word	0x20000bcc

0800a6dc <_write_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4d07      	ldr	r5, [pc, #28]	@ (800a6fc <_write_r+0x20>)
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	602a      	str	r2, [r5, #0]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f7fa f96e 	bl	80049cc <_write>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_write_r+0x1e>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_write_r+0x1e>
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	20000bcc 	.word	0x20000bcc

0800a700 <__errno>:
 800a700:	4b01      	ldr	r3, [pc, #4]	@ (800a708 <__errno+0x8>)
 800a702:	6818      	ldr	r0, [r3, #0]
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	20000274 	.word	0x20000274

0800a70c <__libc_init_array>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	4d0d      	ldr	r5, [pc, #52]	@ (800a744 <__libc_init_array+0x38>)
 800a710:	4c0d      	ldr	r4, [pc, #52]	@ (800a748 <__libc_init_array+0x3c>)
 800a712:	1b64      	subs	r4, r4, r5
 800a714:	10a4      	asrs	r4, r4, #2
 800a716:	2600      	movs	r6, #0
 800a718:	42a6      	cmp	r6, r4
 800a71a:	d109      	bne.n	800a730 <__libc_init_array+0x24>
 800a71c:	4d0b      	ldr	r5, [pc, #44]	@ (800a74c <__libc_init_array+0x40>)
 800a71e:	4c0c      	ldr	r4, [pc, #48]	@ (800a750 <__libc_init_array+0x44>)
 800a720:	f003 fb06 	bl	800dd30 <_init>
 800a724:	1b64      	subs	r4, r4, r5
 800a726:	10a4      	asrs	r4, r4, #2
 800a728:	2600      	movs	r6, #0
 800a72a:	42a6      	cmp	r6, r4
 800a72c:	d105      	bne.n	800a73a <__libc_init_array+0x2e>
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
 800a730:	f855 3b04 	ldr.w	r3, [r5], #4
 800a734:	4798      	blx	r3
 800a736:	3601      	adds	r6, #1
 800a738:	e7ee      	b.n	800a718 <__libc_init_array+0xc>
 800a73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a73e:	4798      	blx	r3
 800a740:	3601      	adds	r6, #1
 800a742:	e7f2      	b.n	800a72a <__libc_init_array+0x1e>
 800a744:	0800e538 	.word	0x0800e538
 800a748:	0800e538 	.word	0x0800e538
 800a74c:	0800e538 	.word	0x0800e538
 800a750:	0800e53c 	.word	0x0800e53c

0800a754 <__retarget_lock_init_recursive>:
 800a754:	4770      	bx	lr

0800a756 <__retarget_lock_acquire_recursive>:
 800a756:	4770      	bx	lr

0800a758 <__retarget_lock_release_recursive>:
 800a758:	4770      	bx	lr

0800a75a <memcpy>:
 800a75a:	440a      	add	r2, r1
 800a75c:	4291      	cmp	r1, r2
 800a75e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a762:	d100      	bne.n	800a766 <memcpy+0xc>
 800a764:	4770      	bx	lr
 800a766:	b510      	push	{r4, lr}
 800a768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a76c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a770:	4291      	cmp	r1, r2
 800a772:	d1f9      	bne.n	800a768 <memcpy+0xe>
 800a774:	bd10      	pop	{r4, pc}
	...

0800a778 <nan>:
 800a778:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a780 <nan+0x8>
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	00000000 	.word	0x00000000
 800a784:	7ff80000 	.word	0x7ff80000

0800a788 <nanf>:
 800a788:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a790 <nanf+0x8>
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	7fc00000 	.word	0x7fc00000

0800a794 <_free_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4605      	mov	r5, r0
 800a798:	2900      	cmp	r1, #0
 800a79a:	d041      	beq.n	800a820 <_free_r+0x8c>
 800a79c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a0:	1f0c      	subs	r4, r1, #4
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	bfb8      	it	lt
 800a7a6:	18e4      	addlt	r4, r4, r3
 800a7a8:	f7fe fc66 	bl	8009078 <__malloc_lock>
 800a7ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a824 <_free_r+0x90>)
 800a7ae:	6813      	ldr	r3, [r2, #0]
 800a7b0:	b933      	cbnz	r3, 800a7c0 <_free_r+0x2c>
 800a7b2:	6063      	str	r3, [r4, #4]
 800a7b4:	6014      	str	r4, [r2, #0]
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7bc:	f7fe bc62 	b.w	8009084 <__malloc_unlock>
 800a7c0:	42a3      	cmp	r3, r4
 800a7c2:	d908      	bls.n	800a7d6 <_free_r+0x42>
 800a7c4:	6820      	ldr	r0, [r4, #0]
 800a7c6:	1821      	adds	r1, r4, r0
 800a7c8:	428b      	cmp	r3, r1
 800a7ca:	bf01      	itttt	eq
 800a7cc:	6819      	ldreq	r1, [r3, #0]
 800a7ce:	685b      	ldreq	r3, [r3, #4]
 800a7d0:	1809      	addeq	r1, r1, r0
 800a7d2:	6021      	streq	r1, [r4, #0]
 800a7d4:	e7ed      	b.n	800a7b2 <_free_r+0x1e>
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	b10b      	cbz	r3, 800a7e0 <_free_r+0x4c>
 800a7dc:	42a3      	cmp	r3, r4
 800a7de:	d9fa      	bls.n	800a7d6 <_free_r+0x42>
 800a7e0:	6811      	ldr	r1, [r2, #0]
 800a7e2:	1850      	adds	r0, r2, r1
 800a7e4:	42a0      	cmp	r0, r4
 800a7e6:	d10b      	bne.n	800a800 <_free_r+0x6c>
 800a7e8:	6820      	ldr	r0, [r4, #0]
 800a7ea:	4401      	add	r1, r0
 800a7ec:	1850      	adds	r0, r2, r1
 800a7ee:	4283      	cmp	r3, r0
 800a7f0:	6011      	str	r1, [r2, #0]
 800a7f2:	d1e0      	bne.n	800a7b6 <_free_r+0x22>
 800a7f4:	6818      	ldr	r0, [r3, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	6053      	str	r3, [r2, #4]
 800a7fa:	4408      	add	r0, r1
 800a7fc:	6010      	str	r0, [r2, #0]
 800a7fe:	e7da      	b.n	800a7b6 <_free_r+0x22>
 800a800:	d902      	bls.n	800a808 <_free_r+0x74>
 800a802:	230c      	movs	r3, #12
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	e7d6      	b.n	800a7b6 <_free_r+0x22>
 800a808:	6820      	ldr	r0, [r4, #0]
 800a80a:	1821      	adds	r1, r4, r0
 800a80c:	428b      	cmp	r3, r1
 800a80e:	bf04      	itt	eq
 800a810:	6819      	ldreq	r1, [r3, #0]
 800a812:	685b      	ldreq	r3, [r3, #4]
 800a814:	6063      	str	r3, [r4, #4]
 800a816:	bf04      	itt	eq
 800a818:	1809      	addeq	r1, r1, r0
 800a81a:	6021      	streq	r1, [r4, #0]
 800a81c:	6054      	str	r4, [r2, #4]
 800a81e:	e7ca      	b.n	800a7b6 <_free_r+0x22>
 800a820:	bd38      	pop	{r3, r4, r5, pc}
 800a822:	bf00      	nop
 800a824:	20000a8c 	.word	0x20000a8c

0800a828 <rshift>:
 800a828:	6903      	ldr	r3, [r0, #16]
 800a82a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a82e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a832:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a836:	f100 0414 	add.w	r4, r0, #20
 800a83a:	dd45      	ble.n	800a8c8 <rshift+0xa0>
 800a83c:	f011 011f 	ands.w	r1, r1, #31
 800a840:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a844:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a848:	d10c      	bne.n	800a864 <rshift+0x3c>
 800a84a:	f100 0710 	add.w	r7, r0, #16
 800a84e:	4629      	mov	r1, r5
 800a850:	42b1      	cmp	r1, r6
 800a852:	d334      	bcc.n	800a8be <rshift+0x96>
 800a854:	1a9b      	subs	r3, r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	1eea      	subs	r2, r5, #3
 800a85a:	4296      	cmp	r6, r2
 800a85c:	bf38      	it	cc
 800a85e:	2300      	movcc	r3, #0
 800a860:	4423      	add	r3, r4
 800a862:	e015      	b.n	800a890 <rshift+0x68>
 800a864:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a868:	f1c1 0820 	rsb	r8, r1, #32
 800a86c:	40cf      	lsrs	r7, r1
 800a86e:	f105 0e04 	add.w	lr, r5, #4
 800a872:	46a1      	mov	r9, r4
 800a874:	4576      	cmp	r6, lr
 800a876:	46f4      	mov	ip, lr
 800a878:	d815      	bhi.n	800a8a6 <rshift+0x7e>
 800a87a:	1a9a      	subs	r2, r3, r2
 800a87c:	0092      	lsls	r2, r2, #2
 800a87e:	3a04      	subs	r2, #4
 800a880:	3501      	adds	r5, #1
 800a882:	42ae      	cmp	r6, r5
 800a884:	bf38      	it	cc
 800a886:	2200      	movcc	r2, #0
 800a888:	18a3      	adds	r3, r4, r2
 800a88a:	50a7      	str	r7, [r4, r2]
 800a88c:	b107      	cbz	r7, 800a890 <rshift+0x68>
 800a88e:	3304      	adds	r3, #4
 800a890:	1b1a      	subs	r2, r3, r4
 800a892:	42a3      	cmp	r3, r4
 800a894:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a898:	bf08      	it	eq
 800a89a:	2300      	moveq	r3, #0
 800a89c:	6102      	str	r2, [r0, #16]
 800a89e:	bf08      	it	eq
 800a8a0:	6143      	streq	r3, [r0, #20]
 800a8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8a6:	f8dc c000 	ldr.w	ip, [ip]
 800a8aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8ae:	ea4c 0707 	orr.w	r7, ip, r7
 800a8b2:	f849 7b04 	str.w	r7, [r9], #4
 800a8b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8ba:	40cf      	lsrs	r7, r1
 800a8bc:	e7da      	b.n	800a874 <rshift+0x4c>
 800a8be:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8c6:	e7c3      	b.n	800a850 <rshift+0x28>
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	e7e1      	b.n	800a890 <rshift+0x68>

0800a8cc <__hexdig_fun>:
 800a8cc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a8d0:	2b09      	cmp	r3, #9
 800a8d2:	d802      	bhi.n	800a8da <__hexdig_fun+0xe>
 800a8d4:	3820      	subs	r0, #32
 800a8d6:	b2c0      	uxtb	r0, r0
 800a8d8:	4770      	bx	lr
 800a8da:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a8de:	2b05      	cmp	r3, #5
 800a8e0:	d801      	bhi.n	800a8e6 <__hexdig_fun+0x1a>
 800a8e2:	3847      	subs	r0, #71	@ 0x47
 800a8e4:	e7f7      	b.n	800a8d6 <__hexdig_fun+0xa>
 800a8e6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	d801      	bhi.n	800a8f2 <__hexdig_fun+0x26>
 800a8ee:	3827      	subs	r0, #39	@ 0x27
 800a8f0:	e7f1      	b.n	800a8d6 <__hexdig_fun+0xa>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	4770      	bx	lr
	...

0800a8f8 <__gethex>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	468a      	mov	sl, r1
 800a900:	9302      	str	r3, [sp, #8]
 800a902:	680b      	ldr	r3, [r1, #0]
 800a904:	9001      	str	r0, [sp, #4]
 800a906:	4690      	mov	r8, r2
 800a908:	1c9c      	adds	r4, r3, #2
 800a90a:	46a1      	mov	r9, r4
 800a90c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a910:	2830      	cmp	r0, #48	@ 0x30
 800a912:	d0fa      	beq.n	800a90a <__gethex+0x12>
 800a914:	eba9 0303 	sub.w	r3, r9, r3
 800a918:	f1a3 0b02 	sub.w	fp, r3, #2
 800a91c:	f7ff ffd6 	bl	800a8cc <__hexdig_fun>
 800a920:	4605      	mov	r5, r0
 800a922:	2800      	cmp	r0, #0
 800a924:	d168      	bne.n	800a9f8 <__gethex+0x100>
 800a926:	49a0      	ldr	r1, [pc, #640]	@ (800aba8 <__gethex+0x2b0>)
 800a928:	2201      	movs	r2, #1
 800a92a:	4648      	mov	r0, r9
 800a92c:	f7ff fe6c 	bl	800a608 <strncmp>
 800a930:	4607      	mov	r7, r0
 800a932:	2800      	cmp	r0, #0
 800a934:	d167      	bne.n	800aa06 <__gethex+0x10e>
 800a936:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a93a:	4626      	mov	r6, r4
 800a93c:	f7ff ffc6 	bl	800a8cc <__hexdig_fun>
 800a940:	2800      	cmp	r0, #0
 800a942:	d062      	beq.n	800aa0a <__gethex+0x112>
 800a944:	4623      	mov	r3, r4
 800a946:	7818      	ldrb	r0, [r3, #0]
 800a948:	2830      	cmp	r0, #48	@ 0x30
 800a94a:	4699      	mov	r9, r3
 800a94c:	f103 0301 	add.w	r3, r3, #1
 800a950:	d0f9      	beq.n	800a946 <__gethex+0x4e>
 800a952:	f7ff ffbb 	bl	800a8cc <__hexdig_fun>
 800a956:	fab0 f580 	clz	r5, r0
 800a95a:	096d      	lsrs	r5, r5, #5
 800a95c:	f04f 0b01 	mov.w	fp, #1
 800a960:	464a      	mov	r2, r9
 800a962:	4616      	mov	r6, r2
 800a964:	3201      	adds	r2, #1
 800a966:	7830      	ldrb	r0, [r6, #0]
 800a968:	f7ff ffb0 	bl	800a8cc <__hexdig_fun>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d1f8      	bne.n	800a962 <__gethex+0x6a>
 800a970:	498d      	ldr	r1, [pc, #564]	@ (800aba8 <__gethex+0x2b0>)
 800a972:	2201      	movs	r2, #1
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff fe47 	bl	800a608 <strncmp>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d13f      	bne.n	800a9fe <__gethex+0x106>
 800a97e:	b944      	cbnz	r4, 800a992 <__gethex+0x9a>
 800a980:	1c74      	adds	r4, r6, #1
 800a982:	4622      	mov	r2, r4
 800a984:	4616      	mov	r6, r2
 800a986:	3201      	adds	r2, #1
 800a988:	7830      	ldrb	r0, [r6, #0]
 800a98a:	f7ff ff9f 	bl	800a8cc <__hexdig_fun>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d1f8      	bne.n	800a984 <__gethex+0x8c>
 800a992:	1ba4      	subs	r4, r4, r6
 800a994:	00a7      	lsls	r7, r4, #2
 800a996:	7833      	ldrb	r3, [r6, #0]
 800a998:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a99c:	2b50      	cmp	r3, #80	@ 0x50
 800a99e:	d13e      	bne.n	800aa1e <__gethex+0x126>
 800a9a0:	7873      	ldrb	r3, [r6, #1]
 800a9a2:	2b2b      	cmp	r3, #43	@ 0x2b
 800a9a4:	d033      	beq.n	800aa0e <__gethex+0x116>
 800a9a6:	2b2d      	cmp	r3, #45	@ 0x2d
 800a9a8:	d034      	beq.n	800aa14 <__gethex+0x11c>
 800a9aa:	1c71      	adds	r1, r6, #1
 800a9ac:	2400      	movs	r4, #0
 800a9ae:	7808      	ldrb	r0, [r1, #0]
 800a9b0:	f7ff ff8c 	bl	800a8cc <__hexdig_fun>
 800a9b4:	1e43      	subs	r3, r0, #1
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b18      	cmp	r3, #24
 800a9ba:	d830      	bhi.n	800aa1e <__gethex+0x126>
 800a9bc:	f1a0 0210 	sub.w	r2, r0, #16
 800a9c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9c4:	f7ff ff82 	bl	800a8cc <__hexdig_fun>
 800a9c8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a9cc:	fa5f fc8c 	uxtb.w	ip, ip
 800a9d0:	f1bc 0f18 	cmp.w	ip, #24
 800a9d4:	f04f 030a 	mov.w	r3, #10
 800a9d8:	d91e      	bls.n	800aa18 <__gethex+0x120>
 800a9da:	b104      	cbz	r4, 800a9de <__gethex+0xe6>
 800a9dc:	4252      	negs	r2, r2
 800a9de:	4417      	add	r7, r2
 800a9e0:	f8ca 1000 	str.w	r1, [sl]
 800a9e4:	b1ed      	cbz	r5, 800aa22 <__gethex+0x12a>
 800a9e6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ea:	bf0c      	ite	eq
 800a9ec:	2506      	moveq	r5, #6
 800a9ee:	2500      	movne	r5, #0
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	b005      	add	sp, #20
 800a9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f8:	2500      	movs	r5, #0
 800a9fa:	462c      	mov	r4, r5
 800a9fc:	e7b0      	b.n	800a960 <__gethex+0x68>
 800a9fe:	2c00      	cmp	r4, #0
 800aa00:	d1c7      	bne.n	800a992 <__gethex+0x9a>
 800aa02:	4627      	mov	r7, r4
 800aa04:	e7c7      	b.n	800a996 <__gethex+0x9e>
 800aa06:	464e      	mov	r6, r9
 800aa08:	462f      	mov	r7, r5
 800aa0a:	2501      	movs	r5, #1
 800aa0c:	e7c3      	b.n	800a996 <__gethex+0x9e>
 800aa0e:	2400      	movs	r4, #0
 800aa10:	1cb1      	adds	r1, r6, #2
 800aa12:	e7cc      	b.n	800a9ae <__gethex+0xb6>
 800aa14:	2401      	movs	r4, #1
 800aa16:	e7fb      	b.n	800aa10 <__gethex+0x118>
 800aa18:	fb03 0002 	mla	r0, r3, r2, r0
 800aa1c:	e7ce      	b.n	800a9bc <__gethex+0xc4>
 800aa1e:	4631      	mov	r1, r6
 800aa20:	e7de      	b.n	800a9e0 <__gethex+0xe8>
 800aa22:	eba6 0309 	sub.w	r3, r6, r9
 800aa26:	3b01      	subs	r3, #1
 800aa28:	4629      	mov	r1, r5
 800aa2a:	2b07      	cmp	r3, #7
 800aa2c:	dc0a      	bgt.n	800aa44 <__gethex+0x14c>
 800aa2e:	9801      	ldr	r0, [sp, #4]
 800aa30:	f000 fa46 	bl	800aec0 <_Balloc>
 800aa34:	4604      	mov	r4, r0
 800aa36:	b940      	cbnz	r0, 800aa4a <__gethex+0x152>
 800aa38:	4b5c      	ldr	r3, [pc, #368]	@ (800abac <__gethex+0x2b4>)
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	21e4      	movs	r1, #228	@ 0xe4
 800aa3e:	485c      	ldr	r0, [pc, #368]	@ (800abb0 <__gethex+0x2b8>)
 800aa40:	f001 fffe 	bl	800ca40 <__assert_func>
 800aa44:	3101      	adds	r1, #1
 800aa46:	105b      	asrs	r3, r3, #1
 800aa48:	e7ef      	b.n	800aa2a <__gethex+0x132>
 800aa4a:	f100 0a14 	add.w	sl, r0, #20
 800aa4e:	2300      	movs	r3, #0
 800aa50:	4655      	mov	r5, sl
 800aa52:	469b      	mov	fp, r3
 800aa54:	45b1      	cmp	r9, r6
 800aa56:	d337      	bcc.n	800aac8 <__gethex+0x1d0>
 800aa58:	f845 bb04 	str.w	fp, [r5], #4
 800aa5c:	eba5 050a 	sub.w	r5, r5, sl
 800aa60:	10ad      	asrs	r5, r5, #2
 800aa62:	6125      	str	r5, [r4, #16]
 800aa64:	4658      	mov	r0, fp
 800aa66:	f000 fb1d 	bl	800b0a4 <__hi0bits>
 800aa6a:	016d      	lsls	r5, r5, #5
 800aa6c:	f8d8 6000 	ldr.w	r6, [r8]
 800aa70:	1a2d      	subs	r5, r5, r0
 800aa72:	42b5      	cmp	r5, r6
 800aa74:	dd54      	ble.n	800ab20 <__gethex+0x228>
 800aa76:	1bad      	subs	r5, r5, r6
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fea9 	bl	800b7d2 <__any_on>
 800aa80:	4681      	mov	r9, r0
 800aa82:	b178      	cbz	r0, 800aaa4 <__gethex+0x1ac>
 800aa84:	1e6b      	subs	r3, r5, #1
 800aa86:	1159      	asrs	r1, r3, #5
 800aa88:	f003 021f 	and.w	r2, r3, #31
 800aa8c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa90:	f04f 0901 	mov.w	r9, #1
 800aa94:	fa09 f202 	lsl.w	r2, r9, r2
 800aa98:	420a      	tst	r2, r1
 800aa9a:	d003      	beq.n	800aaa4 <__gethex+0x1ac>
 800aa9c:	454b      	cmp	r3, r9
 800aa9e:	dc36      	bgt.n	800ab0e <__gethex+0x216>
 800aaa0:	f04f 0902 	mov.w	r9, #2
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f7ff febe 	bl	800a828 <rshift>
 800aaac:	442f      	add	r7, r5
 800aaae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aab2:	42bb      	cmp	r3, r7
 800aab4:	da42      	bge.n	800ab3c <__gethex+0x244>
 800aab6:	9801      	ldr	r0, [sp, #4]
 800aab8:	4621      	mov	r1, r4
 800aaba:	f000 fa41 	bl	800af40 <_Bfree>
 800aabe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aac0:	2300      	movs	r3, #0
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	25a3      	movs	r5, #163	@ 0xa3
 800aac6:	e793      	b.n	800a9f0 <__gethex+0xf8>
 800aac8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aacc:	2a2e      	cmp	r2, #46	@ 0x2e
 800aace:	d012      	beq.n	800aaf6 <__gethex+0x1fe>
 800aad0:	2b20      	cmp	r3, #32
 800aad2:	d104      	bne.n	800aade <__gethex+0x1e6>
 800aad4:	f845 bb04 	str.w	fp, [r5], #4
 800aad8:	f04f 0b00 	mov.w	fp, #0
 800aadc:	465b      	mov	r3, fp
 800aade:	7830      	ldrb	r0, [r6, #0]
 800aae0:	9303      	str	r3, [sp, #12]
 800aae2:	f7ff fef3 	bl	800a8cc <__hexdig_fun>
 800aae6:	9b03      	ldr	r3, [sp, #12]
 800aae8:	f000 000f 	and.w	r0, r0, #15
 800aaec:	4098      	lsls	r0, r3
 800aaee:	ea4b 0b00 	orr.w	fp, fp, r0
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	e7ae      	b.n	800aa54 <__gethex+0x15c>
 800aaf6:	45b1      	cmp	r9, r6
 800aaf8:	d8ea      	bhi.n	800aad0 <__gethex+0x1d8>
 800aafa:	492b      	ldr	r1, [pc, #172]	@ (800aba8 <__gethex+0x2b0>)
 800aafc:	9303      	str	r3, [sp, #12]
 800aafe:	2201      	movs	r2, #1
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff fd81 	bl	800a608 <strncmp>
 800ab06:	9b03      	ldr	r3, [sp, #12]
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d1e1      	bne.n	800aad0 <__gethex+0x1d8>
 800ab0c:	e7a2      	b.n	800aa54 <__gethex+0x15c>
 800ab0e:	1ea9      	subs	r1, r5, #2
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 fe5e 	bl	800b7d2 <__any_on>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d0c2      	beq.n	800aaa0 <__gethex+0x1a8>
 800ab1a:	f04f 0903 	mov.w	r9, #3
 800ab1e:	e7c1      	b.n	800aaa4 <__gethex+0x1ac>
 800ab20:	da09      	bge.n	800ab36 <__gethex+0x23e>
 800ab22:	1b75      	subs	r5, r6, r5
 800ab24:	4621      	mov	r1, r4
 800ab26:	9801      	ldr	r0, [sp, #4]
 800ab28:	462a      	mov	r2, r5
 800ab2a:	f000 fc19 	bl	800b360 <__lshift>
 800ab2e:	1b7f      	subs	r7, r7, r5
 800ab30:	4604      	mov	r4, r0
 800ab32:	f100 0a14 	add.w	sl, r0, #20
 800ab36:	f04f 0900 	mov.w	r9, #0
 800ab3a:	e7b8      	b.n	800aaae <__gethex+0x1b6>
 800ab3c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab40:	42bd      	cmp	r5, r7
 800ab42:	dd6f      	ble.n	800ac24 <__gethex+0x32c>
 800ab44:	1bed      	subs	r5, r5, r7
 800ab46:	42ae      	cmp	r6, r5
 800ab48:	dc34      	bgt.n	800abb4 <__gethex+0x2bc>
 800ab4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d022      	beq.n	800ab98 <__gethex+0x2a0>
 800ab52:	2b03      	cmp	r3, #3
 800ab54:	d024      	beq.n	800aba0 <__gethex+0x2a8>
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d115      	bne.n	800ab86 <__gethex+0x28e>
 800ab5a:	42ae      	cmp	r6, r5
 800ab5c:	d113      	bne.n	800ab86 <__gethex+0x28e>
 800ab5e:	2e01      	cmp	r6, #1
 800ab60:	d10b      	bne.n	800ab7a <__gethex+0x282>
 800ab62:	9a02      	ldr	r2, [sp, #8]
 800ab64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	6123      	str	r3, [r4, #16]
 800ab6e:	f8ca 3000 	str.w	r3, [sl]
 800ab72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab74:	2562      	movs	r5, #98	@ 0x62
 800ab76:	601c      	str	r4, [r3, #0]
 800ab78:	e73a      	b.n	800a9f0 <__gethex+0xf8>
 800ab7a:	1e71      	subs	r1, r6, #1
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fe28 	bl	800b7d2 <__any_on>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d1ed      	bne.n	800ab62 <__gethex+0x26a>
 800ab86:	9801      	ldr	r0, [sp, #4]
 800ab88:	4621      	mov	r1, r4
 800ab8a:	f000 f9d9 	bl	800af40 <_Bfree>
 800ab8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab90:	2300      	movs	r3, #0
 800ab92:	6013      	str	r3, [r2, #0]
 800ab94:	2550      	movs	r5, #80	@ 0x50
 800ab96:	e72b      	b.n	800a9f0 <__gethex+0xf8>
 800ab98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1f3      	bne.n	800ab86 <__gethex+0x28e>
 800ab9e:	e7e0      	b.n	800ab62 <__gethex+0x26a>
 800aba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1dd      	bne.n	800ab62 <__gethex+0x26a>
 800aba6:	e7ee      	b.n	800ab86 <__gethex+0x28e>
 800aba8:	0800df7c 	.word	0x0800df7c
 800abac:	0800df97 	.word	0x0800df97
 800abb0:	0800dfa8 	.word	0x0800dfa8
 800abb4:	1e6f      	subs	r7, r5, #1
 800abb6:	f1b9 0f00 	cmp.w	r9, #0
 800abba:	d130      	bne.n	800ac1e <__gethex+0x326>
 800abbc:	b127      	cbz	r7, 800abc8 <__gethex+0x2d0>
 800abbe:	4639      	mov	r1, r7
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 fe06 	bl	800b7d2 <__any_on>
 800abc6:	4681      	mov	r9, r0
 800abc8:	117a      	asrs	r2, r7, #5
 800abca:	2301      	movs	r3, #1
 800abcc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800abd0:	f007 071f 	and.w	r7, r7, #31
 800abd4:	40bb      	lsls	r3, r7
 800abd6:	4213      	tst	r3, r2
 800abd8:	4629      	mov	r1, r5
 800abda:	4620      	mov	r0, r4
 800abdc:	bf18      	it	ne
 800abde:	f049 0902 	orrne.w	r9, r9, #2
 800abe2:	f7ff fe21 	bl	800a828 <rshift>
 800abe6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800abea:	1b76      	subs	r6, r6, r5
 800abec:	2502      	movs	r5, #2
 800abee:	f1b9 0f00 	cmp.w	r9, #0
 800abf2:	d047      	beq.n	800ac84 <__gethex+0x38c>
 800abf4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d015      	beq.n	800ac28 <__gethex+0x330>
 800abfc:	2b03      	cmp	r3, #3
 800abfe:	d017      	beq.n	800ac30 <__gethex+0x338>
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d109      	bne.n	800ac18 <__gethex+0x320>
 800ac04:	f019 0f02 	tst.w	r9, #2
 800ac08:	d006      	beq.n	800ac18 <__gethex+0x320>
 800ac0a:	f8da 3000 	ldr.w	r3, [sl]
 800ac0e:	ea49 0903 	orr.w	r9, r9, r3
 800ac12:	f019 0f01 	tst.w	r9, #1
 800ac16:	d10e      	bne.n	800ac36 <__gethex+0x33e>
 800ac18:	f045 0510 	orr.w	r5, r5, #16
 800ac1c:	e032      	b.n	800ac84 <__gethex+0x38c>
 800ac1e:	f04f 0901 	mov.w	r9, #1
 800ac22:	e7d1      	b.n	800abc8 <__gethex+0x2d0>
 800ac24:	2501      	movs	r5, #1
 800ac26:	e7e2      	b.n	800abee <__gethex+0x2f6>
 800ac28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac2a:	f1c3 0301 	rsb	r3, r3, #1
 800ac2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0f0      	beq.n	800ac18 <__gethex+0x320>
 800ac36:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac3a:	f104 0314 	add.w	r3, r4, #20
 800ac3e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac42:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac46:	f04f 0c00 	mov.w	ip, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac50:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac54:	d01b      	beq.n	800ac8e <__gethex+0x396>
 800ac56:	3201      	adds	r2, #1
 800ac58:	6002      	str	r2, [r0, #0]
 800ac5a:	2d02      	cmp	r5, #2
 800ac5c:	f104 0314 	add.w	r3, r4, #20
 800ac60:	d13c      	bne.n	800acdc <__gethex+0x3e4>
 800ac62:	f8d8 2000 	ldr.w	r2, [r8]
 800ac66:	3a01      	subs	r2, #1
 800ac68:	42b2      	cmp	r2, r6
 800ac6a:	d109      	bne.n	800ac80 <__gethex+0x388>
 800ac6c:	1171      	asrs	r1, r6, #5
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac74:	f006 061f 	and.w	r6, r6, #31
 800ac78:	fa02 f606 	lsl.w	r6, r2, r6
 800ac7c:	421e      	tst	r6, r3
 800ac7e:	d13a      	bne.n	800acf6 <__gethex+0x3fe>
 800ac80:	f045 0520 	orr.w	r5, r5, #32
 800ac84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac86:	601c      	str	r4, [r3, #0]
 800ac88:	9b02      	ldr	r3, [sp, #8]
 800ac8a:	601f      	str	r7, [r3, #0]
 800ac8c:	e6b0      	b.n	800a9f0 <__gethex+0xf8>
 800ac8e:	4299      	cmp	r1, r3
 800ac90:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac94:	d8d9      	bhi.n	800ac4a <__gethex+0x352>
 800ac96:	68a3      	ldr	r3, [r4, #8]
 800ac98:	459b      	cmp	fp, r3
 800ac9a:	db17      	blt.n	800accc <__gethex+0x3d4>
 800ac9c:	6861      	ldr	r1, [r4, #4]
 800ac9e:	9801      	ldr	r0, [sp, #4]
 800aca0:	3101      	adds	r1, #1
 800aca2:	f000 f90d 	bl	800aec0 <_Balloc>
 800aca6:	4681      	mov	r9, r0
 800aca8:	b918      	cbnz	r0, 800acb2 <__gethex+0x3ba>
 800acaa:	4b1a      	ldr	r3, [pc, #104]	@ (800ad14 <__gethex+0x41c>)
 800acac:	4602      	mov	r2, r0
 800acae:	2184      	movs	r1, #132	@ 0x84
 800acb0:	e6c5      	b.n	800aa3e <__gethex+0x146>
 800acb2:	6922      	ldr	r2, [r4, #16]
 800acb4:	3202      	adds	r2, #2
 800acb6:	f104 010c 	add.w	r1, r4, #12
 800acba:	0092      	lsls	r2, r2, #2
 800acbc:	300c      	adds	r0, #12
 800acbe:	f7ff fd4c 	bl	800a75a <memcpy>
 800acc2:	4621      	mov	r1, r4
 800acc4:	9801      	ldr	r0, [sp, #4]
 800acc6:	f000 f93b 	bl	800af40 <_Bfree>
 800acca:	464c      	mov	r4, r9
 800accc:	6923      	ldr	r3, [r4, #16]
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acd4:	6122      	str	r2, [r4, #16]
 800acd6:	2201      	movs	r2, #1
 800acd8:	615a      	str	r2, [r3, #20]
 800acda:	e7be      	b.n	800ac5a <__gethex+0x362>
 800acdc:	6922      	ldr	r2, [r4, #16]
 800acde:	455a      	cmp	r2, fp
 800ace0:	dd0b      	ble.n	800acfa <__gethex+0x402>
 800ace2:	2101      	movs	r1, #1
 800ace4:	4620      	mov	r0, r4
 800ace6:	f7ff fd9f 	bl	800a828 <rshift>
 800acea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acee:	3701      	adds	r7, #1
 800acf0:	42bb      	cmp	r3, r7
 800acf2:	f6ff aee0 	blt.w	800aab6 <__gethex+0x1be>
 800acf6:	2501      	movs	r5, #1
 800acf8:	e7c2      	b.n	800ac80 <__gethex+0x388>
 800acfa:	f016 061f 	ands.w	r6, r6, #31
 800acfe:	d0fa      	beq.n	800acf6 <__gethex+0x3fe>
 800ad00:	4453      	add	r3, sl
 800ad02:	f1c6 0620 	rsb	r6, r6, #32
 800ad06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad0a:	f000 f9cb 	bl	800b0a4 <__hi0bits>
 800ad0e:	42b0      	cmp	r0, r6
 800ad10:	dbe7      	blt.n	800ace2 <__gethex+0x3ea>
 800ad12:	e7f0      	b.n	800acf6 <__gethex+0x3fe>
 800ad14:	0800df97 	.word	0x0800df97

0800ad18 <L_shift>:
 800ad18:	f1c2 0208 	rsb	r2, r2, #8
 800ad1c:	0092      	lsls	r2, r2, #2
 800ad1e:	b570      	push	{r4, r5, r6, lr}
 800ad20:	f1c2 0620 	rsb	r6, r2, #32
 800ad24:	6843      	ldr	r3, [r0, #4]
 800ad26:	6804      	ldr	r4, [r0, #0]
 800ad28:	fa03 f506 	lsl.w	r5, r3, r6
 800ad2c:	432c      	orrs	r4, r5
 800ad2e:	40d3      	lsrs	r3, r2
 800ad30:	6004      	str	r4, [r0, #0]
 800ad32:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad36:	4288      	cmp	r0, r1
 800ad38:	d3f4      	bcc.n	800ad24 <L_shift+0xc>
 800ad3a:	bd70      	pop	{r4, r5, r6, pc}

0800ad3c <__match>:
 800ad3c:	b530      	push	{r4, r5, lr}
 800ad3e:	6803      	ldr	r3, [r0, #0]
 800ad40:	3301      	adds	r3, #1
 800ad42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad46:	b914      	cbnz	r4, 800ad4e <__match+0x12>
 800ad48:	6003      	str	r3, [r0, #0]
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	bd30      	pop	{r4, r5, pc}
 800ad4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad52:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ad56:	2d19      	cmp	r5, #25
 800ad58:	bf98      	it	ls
 800ad5a:	3220      	addls	r2, #32
 800ad5c:	42a2      	cmp	r2, r4
 800ad5e:	d0f0      	beq.n	800ad42 <__match+0x6>
 800ad60:	2000      	movs	r0, #0
 800ad62:	e7f3      	b.n	800ad4c <__match+0x10>

0800ad64 <__hexnan>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	680b      	ldr	r3, [r1, #0]
 800ad6a:	6801      	ldr	r1, [r0, #0]
 800ad6c:	115e      	asrs	r6, r3, #5
 800ad6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad72:	f013 031f 	ands.w	r3, r3, #31
 800ad76:	b087      	sub	sp, #28
 800ad78:	bf18      	it	ne
 800ad7a:	3604      	addne	r6, #4
 800ad7c:	2500      	movs	r5, #0
 800ad7e:	1f37      	subs	r7, r6, #4
 800ad80:	4682      	mov	sl, r0
 800ad82:	4690      	mov	r8, r2
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad8a:	46b9      	mov	r9, r7
 800ad8c:	463c      	mov	r4, r7
 800ad8e:	9502      	str	r5, [sp, #8]
 800ad90:	46ab      	mov	fp, r5
 800ad92:	784a      	ldrb	r2, [r1, #1]
 800ad94:	1c4b      	adds	r3, r1, #1
 800ad96:	9303      	str	r3, [sp, #12]
 800ad98:	b342      	cbz	r2, 800adec <__hexnan+0x88>
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	9105      	str	r1, [sp, #20]
 800ad9e:	9204      	str	r2, [sp, #16]
 800ada0:	f7ff fd94 	bl	800a8cc <__hexdig_fun>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d151      	bne.n	800ae4c <__hexnan+0xe8>
 800ada8:	9a04      	ldr	r2, [sp, #16]
 800adaa:	9905      	ldr	r1, [sp, #20]
 800adac:	2a20      	cmp	r2, #32
 800adae:	d818      	bhi.n	800ade2 <__hexnan+0x7e>
 800adb0:	9b02      	ldr	r3, [sp, #8]
 800adb2:	459b      	cmp	fp, r3
 800adb4:	dd13      	ble.n	800adde <__hexnan+0x7a>
 800adb6:	454c      	cmp	r4, r9
 800adb8:	d206      	bcs.n	800adc8 <__hexnan+0x64>
 800adba:	2d07      	cmp	r5, #7
 800adbc:	dc04      	bgt.n	800adc8 <__hexnan+0x64>
 800adbe:	462a      	mov	r2, r5
 800adc0:	4649      	mov	r1, r9
 800adc2:	4620      	mov	r0, r4
 800adc4:	f7ff ffa8 	bl	800ad18 <L_shift>
 800adc8:	4544      	cmp	r4, r8
 800adca:	d952      	bls.n	800ae72 <__hexnan+0x10e>
 800adcc:	2300      	movs	r3, #0
 800adce:	f1a4 0904 	sub.w	r9, r4, #4
 800add2:	f844 3c04 	str.w	r3, [r4, #-4]
 800add6:	f8cd b008 	str.w	fp, [sp, #8]
 800adda:	464c      	mov	r4, r9
 800addc:	461d      	mov	r5, r3
 800adde:	9903      	ldr	r1, [sp, #12]
 800ade0:	e7d7      	b.n	800ad92 <__hexnan+0x2e>
 800ade2:	2a29      	cmp	r2, #41	@ 0x29
 800ade4:	d157      	bne.n	800ae96 <__hexnan+0x132>
 800ade6:	3102      	adds	r1, #2
 800ade8:	f8ca 1000 	str.w	r1, [sl]
 800adec:	f1bb 0f00 	cmp.w	fp, #0
 800adf0:	d051      	beq.n	800ae96 <__hexnan+0x132>
 800adf2:	454c      	cmp	r4, r9
 800adf4:	d206      	bcs.n	800ae04 <__hexnan+0xa0>
 800adf6:	2d07      	cmp	r5, #7
 800adf8:	dc04      	bgt.n	800ae04 <__hexnan+0xa0>
 800adfa:	462a      	mov	r2, r5
 800adfc:	4649      	mov	r1, r9
 800adfe:	4620      	mov	r0, r4
 800ae00:	f7ff ff8a 	bl	800ad18 <L_shift>
 800ae04:	4544      	cmp	r4, r8
 800ae06:	d936      	bls.n	800ae76 <__hexnan+0x112>
 800ae08:	f1a8 0204 	sub.w	r2, r8, #4
 800ae0c:	4623      	mov	r3, r4
 800ae0e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae12:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae16:	429f      	cmp	r7, r3
 800ae18:	d2f9      	bcs.n	800ae0e <__hexnan+0xaa>
 800ae1a:	1b3b      	subs	r3, r7, r4
 800ae1c:	f023 0303 	bic.w	r3, r3, #3
 800ae20:	3304      	adds	r3, #4
 800ae22:	3401      	adds	r4, #1
 800ae24:	3e03      	subs	r6, #3
 800ae26:	42b4      	cmp	r4, r6
 800ae28:	bf88      	it	hi
 800ae2a:	2304      	movhi	r3, #4
 800ae2c:	4443      	add	r3, r8
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f843 2b04 	str.w	r2, [r3], #4
 800ae34:	429f      	cmp	r7, r3
 800ae36:	d2fb      	bcs.n	800ae30 <__hexnan+0xcc>
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	b91b      	cbnz	r3, 800ae44 <__hexnan+0xe0>
 800ae3c:	4547      	cmp	r7, r8
 800ae3e:	d128      	bne.n	800ae92 <__hexnan+0x12e>
 800ae40:	2301      	movs	r3, #1
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	2005      	movs	r0, #5
 800ae46:	b007      	add	sp, #28
 800ae48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	2d08      	cmp	r5, #8
 800ae50:	f10b 0b01 	add.w	fp, fp, #1
 800ae54:	dd06      	ble.n	800ae64 <__hexnan+0x100>
 800ae56:	4544      	cmp	r4, r8
 800ae58:	d9c1      	bls.n	800adde <__hexnan+0x7a>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae60:	2501      	movs	r5, #1
 800ae62:	3c04      	subs	r4, #4
 800ae64:	6822      	ldr	r2, [r4, #0]
 800ae66:	f000 000f 	and.w	r0, r0, #15
 800ae6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae6e:	6020      	str	r0, [r4, #0]
 800ae70:	e7b5      	b.n	800adde <__hexnan+0x7a>
 800ae72:	2508      	movs	r5, #8
 800ae74:	e7b3      	b.n	800adde <__hexnan+0x7a>
 800ae76:	9b01      	ldr	r3, [sp, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0dd      	beq.n	800ae38 <__hexnan+0xd4>
 800ae7c:	f1c3 0320 	rsb	r3, r3, #32
 800ae80:	f04f 32ff 	mov.w	r2, #4294967295
 800ae84:	40da      	lsrs	r2, r3
 800ae86:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae90:	e7d2      	b.n	800ae38 <__hexnan+0xd4>
 800ae92:	3f04      	subs	r7, #4
 800ae94:	e7d0      	b.n	800ae38 <__hexnan+0xd4>
 800ae96:	2004      	movs	r0, #4
 800ae98:	e7d5      	b.n	800ae46 <__hexnan+0xe2>

0800ae9a <__ascii_mbtowc>:
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	b901      	cbnz	r1, 800aea0 <__ascii_mbtowc+0x6>
 800ae9e:	a901      	add	r1, sp, #4
 800aea0:	b142      	cbz	r2, 800aeb4 <__ascii_mbtowc+0x1a>
 800aea2:	b14b      	cbz	r3, 800aeb8 <__ascii_mbtowc+0x1e>
 800aea4:	7813      	ldrb	r3, [r2, #0]
 800aea6:	600b      	str	r3, [r1, #0]
 800aea8:	7812      	ldrb	r2, [r2, #0]
 800aeaa:	1e10      	subs	r0, r2, #0
 800aeac:	bf18      	it	ne
 800aeae:	2001      	movne	r0, #1
 800aeb0:	b002      	add	sp, #8
 800aeb2:	4770      	bx	lr
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	e7fb      	b.n	800aeb0 <__ascii_mbtowc+0x16>
 800aeb8:	f06f 0001 	mvn.w	r0, #1
 800aebc:	e7f8      	b.n	800aeb0 <__ascii_mbtowc+0x16>
	...

0800aec0 <_Balloc>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	69c6      	ldr	r6, [r0, #28]
 800aec4:	4604      	mov	r4, r0
 800aec6:	460d      	mov	r5, r1
 800aec8:	b976      	cbnz	r6, 800aee8 <_Balloc+0x28>
 800aeca:	2010      	movs	r0, #16
 800aecc:	f7fe f82a 	bl	8008f24 <malloc>
 800aed0:	4602      	mov	r2, r0
 800aed2:	61e0      	str	r0, [r4, #28]
 800aed4:	b920      	cbnz	r0, 800aee0 <_Balloc+0x20>
 800aed6:	4b18      	ldr	r3, [pc, #96]	@ (800af38 <_Balloc+0x78>)
 800aed8:	4818      	ldr	r0, [pc, #96]	@ (800af3c <_Balloc+0x7c>)
 800aeda:	216b      	movs	r1, #107	@ 0x6b
 800aedc:	f001 fdb0 	bl	800ca40 <__assert_func>
 800aee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aee4:	6006      	str	r6, [r0, #0]
 800aee6:	60c6      	str	r6, [r0, #12]
 800aee8:	69e6      	ldr	r6, [r4, #28]
 800aeea:	68f3      	ldr	r3, [r6, #12]
 800aeec:	b183      	cbz	r3, 800af10 <_Balloc+0x50>
 800aeee:	69e3      	ldr	r3, [r4, #28]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aef6:	b9b8      	cbnz	r0, 800af28 <_Balloc+0x68>
 800aef8:	2101      	movs	r1, #1
 800aefa:	fa01 f605 	lsl.w	r6, r1, r5
 800aefe:	1d72      	adds	r2, r6, #5
 800af00:	0092      	lsls	r2, r2, #2
 800af02:	4620      	mov	r0, r4
 800af04:	f001 fdba 	bl	800ca7c <_calloc_r>
 800af08:	b160      	cbz	r0, 800af24 <_Balloc+0x64>
 800af0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af0e:	e00e      	b.n	800af2e <_Balloc+0x6e>
 800af10:	2221      	movs	r2, #33	@ 0x21
 800af12:	2104      	movs	r1, #4
 800af14:	4620      	mov	r0, r4
 800af16:	f001 fdb1 	bl	800ca7c <_calloc_r>
 800af1a:	69e3      	ldr	r3, [r4, #28]
 800af1c:	60f0      	str	r0, [r6, #12]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1e4      	bne.n	800aeee <_Balloc+0x2e>
 800af24:	2000      	movs	r0, #0
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	6802      	ldr	r2, [r0, #0]
 800af2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af2e:	2300      	movs	r3, #0
 800af30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af34:	e7f7      	b.n	800af26 <_Balloc+0x66>
 800af36:	bf00      	nop
 800af38:	0800e008 	.word	0x0800e008
 800af3c:	0800e01f 	.word	0x0800e01f

0800af40 <_Bfree>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	69c6      	ldr	r6, [r0, #28]
 800af44:	4605      	mov	r5, r0
 800af46:	460c      	mov	r4, r1
 800af48:	b976      	cbnz	r6, 800af68 <_Bfree+0x28>
 800af4a:	2010      	movs	r0, #16
 800af4c:	f7fd ffea 	bl	8008f24 <malloc>
 800af50:	4602      	mov	r2, r0
 800af52:	61e8      	str	r0, [r5, #28]
 800af54:	b920      	cbnz	r0, 800af60 <_Bfree+0x20>
 800af56:	4b09      	ldr	r3, [pc, #36]	@ (800af7c <_Bfree+0x3c>)
 800af58:	4809      	ldr	r0, [pc, #36]	@ (800af80 <_Bfree+0x40>)
 800af5a:	218f      	movs	r1, #143	@ 0x8f
 800af5c:	f001 fd70 	bl	800ca40 <__assert_func>
 800af60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af64:	6006      	str	r6, [r0, #0]
 800af66:	60c6      	str	r6, [r0, #12]
 800af68:	b13c      	cbz	r4, 800af7a <_Bfree+0x3a>
 800af6a:	69eb      	ldr	r3, [r5, #28]
 800af6c:	6862      	ldr	r2, [r4, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af74:	6021      	str	r1, [r4, #0]
 800af76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	0800e008 	.word	0x0800e008
 800af80:	0800e01f 	.word	0x0800e01f

0800af84 <__multadd>:
 800af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af88:	690d      	ldr	r5, [r1, #16]
 800af8a:	4607      	mov	r7, r0
 800af8c:	460c      	mov	r4, r1
 800af8e:	461e      	mov	r6, r3
 800af90:	f101 0c14 	add.w	ip, r1, #20
 800af94:	2000      	movs	r0, #0
 800af96:	f8dc 3000 	ldr.w	r3, [ip]
 800af9a:	b299      	uxth	r1, r3
 800af9c:	fb02 6101 	mla	r1, r2, r1, r6
 800afa0:	0c1e      	lsrs	r6, r3, #16
 800afa2:	0c0b      	lsrs	r3, r1, #16
 800afa4:	fb02 3306 	mla	r3, r2, r6, r3
 800afa8:	b289      	uxth	r1, r1
 800afaa:	3001      	adds	r0, #1
 800afac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afb0:	4285      	cmp	r5, r0
 800afb2:	f84c 1b04 	str.w	r1, [ip], #4
 800afb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afba:	dcec      	bgt.n	800af96 <__multadd+0x12>
 800afbc:	b30e      	cbz	r6, 800b002 <__multadd+0x7e>
 800afbe:	68a3      	ldr	r3, [r4, #8]
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	dc19      	bgt.n	800aff8 <__multadd+0x74>
 800afc4:	6861      	ldr	r1, [r4, #4]
 800afc6:	4638      	mov	r0, r7
 800afc8:	3101      	adds	r1, #1
 800afca:	f7ff ff79 	bl	800aec0 <_Balloc>
 800afce:	4680      	mov	r8, r0
 800afd0:	b928      	cbnz	r0, 800afde <__multadd+0x5a>
 800afd2:	4602      	mov	r2, r0
 800afd4:	4b0c      	ldr	r3, [pc, #48]	@ (800b008 <__multadd+0x84>)
 800afd6:	480d      	ldr	r0, [pc, #52]	@ (800b00c <__multadd+0x88>)
 800afd8:	21ba      	movs	r1, #186	@ 0xba
 800afda:	f001 fd31 	bl	800ca40 <__assert_func>
 800afde:	6922      	ldr	r2, [r4, #16]
 800afe0:	3202      	adds	r2, #2
 800afe2:	f104 010c 	add.w	r1, r4, #12
 800afe6:	0092      	lsls	r2, r2, #2
 800afe8:	300c      	adds	r0, #12
 800afea:	f7ff fbb6 	bl	800a75a <memcpy>
 800afee:	4621      	mov	r1, r4
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7ff ffa5 	bl	800af40 <_Bfree>
 800aff6:	4644      	mov	r4, r8
 800aff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800affc:	3501      	adds	r5, #1
 800affe:	615e      	str	r6, [r3, #20]
 800b000:	6125      	str	r5, [r4, #16]
 800b002:	4620      	mov	r0, r4
 800b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b008:	0800df97 	.word	0x0800df97
 800b00c:	0800e01f 	.word	0x0800e01f

0800b010 <__s2b>:
 800b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b014:	460c      	mov	r4, r1
 800b016:	4615      	mov	r5, r2
 800b018:	461f      	mov	r7, r3
 800b01a:	2209      	movs	r2, #9
 800b01c:	3308      	adds	r3, #8
 800b01e:	4606      	mov	r6, r0
 800b020:	fb93 f3f2 	sdiv	r3, r3, r2
 800b024:	2100      	movs	r1, #0
 800b026:	2201      	movs	r2, #1
 800b028:	429a      	cmp	r2, r3
 800b02a:	db09      	blt.n	800b040 <__s2b+0x30>
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7ff ff47 	bl	800aec0 <_Balloc>
 800b032:	b940      	cbnz	r0, 800b046 <__s2b+0x36>
 800b034:	4602      	mov	r2, r0
 800b036:	4b19      	ldr	r3, [pc, #100]	@ (800b09c <__s2b+0x8c>)
 800b038:	4819      	ldr	r0, [pc, #100]	@ (800b0a0 <__s2b+0x90>)
 800b03a:	21d3      	movs	r1, #211	@ 0xd3
 800b03c:	f001 fd00 	bl	800ca40 <__assert_func>
 800b040:	0052      	lsls	r2, r2, #1
 800b042:	3101      	adds	r1, #1
 800b044:	e7f0      	b.n	800b028 <__s2b+0x18>
 800b046:	9b08      	ldr	r3, [sp, #32]
 800b048:	6143      	str	r3, [r0, #20]
 800b04a:	2d09      	cmp	r5, #9
 800b04c:	f04f 0301 	mov.w	r3, #1
 800b050:	6103      	str	r3, [r0, #16]
 800b052:	dd16      	ble.n	800b082 <__s2b+0x72>
 800b054:	f104 0909 	add.w	r9, r4, #9
 800b058:	46c8      	mov	r8, r9
 800b05a:	442c      	add	r4, r5
 800b05c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b060:	4601      	mov	r1, r0
 800b062:	3b30      	subs	r3, #48	@ 0x30
 800b064:	220a      	movs	r2, #10
 800b066:	4630      	mov	r0, r6
 800b068:	f7ff ff8c 	bl	800af84 <__multadd>
 800b06c:	45a0      	cmp	r8, r4
 800b06e:	d1f5      	bne.n	800b05c <__s2b+0x4c>
 800b070:	f1a5 0408 	sub.w	r4, r5, #8
 800b074:	444c      	add	r4, r9
 800b076:	1b2d      	subs	r5, r5, r4
 800b078:	1963      	adds	r3, r4, r5
 800b07a:	42bb      	cmp	r3, r7
 800b07c:	db04      	blt.n	800b088 <__s2b+0x78>
 800b07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b082:	340a      	adds	r4, #10
 800b084:	2509      	movs	r5, #9
 800b086:	e7f6      	b.n	800b076 <__s2b+0x66>
 800b088:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b08c:	4601      	mov	r1, r0
 800b08e:	3b30      	subs	r3, #48	@ 0x30
 800b090:	220a      	movs	r2, #10
 800b092:	4630      	mov	r0, r6
 800b094:	f7ff ff76 	bl	800af84 <__multadd>
 800b098:	e7ee      	b.n	800b078 <__s2b+0x68>
 800b09a:	bf00      	nop
 800b09c:	0800df97 	.word	0x0800df97
 800b0a0:	0800e01f 	.word	0x0800e01f

0800b0a4 <__hi0bits>:
 800b0a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	bf36      	itet	cc
 800b0ac:	0403      	lslcc	r3, r0, #16
 800b0ae:	2000      	movcs	r0, #0
 800b0b0:	2010      	movcc	r0, #16
 800b0b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0b6:	bf3c      	itt	cc
 800b0b8:	021b      	lslcc	r3, r3, #8
 800b0ba:	3008      	addcc	r0, #8
 800b0bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0c0:	bf3c      	itt	cc
 800b0c2:	011b      	lslcc	r3, r3, #4
 800b0c4:	3004      	addcc	r0, #4
 800b0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ca:	bf3c      	itt	cc
 800b0cc:	009b      	lslcc	r3, r3, #2
 800b0ce:	3002      	addcc	r0, #2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	db05      	blt.n	800b0e0 <__hi0bits+0x3c>
 800b0d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b0d8:	f100 0001 	add.w	r0, r0, #1
 800b0dc:	bf08      	it	eq
 800b0de:	2020      	moveq	r0, #32
 800b0e0:	4770      	bx	lr

0800b0e2 <__lo0bits>:
 800b0e2:	6803      	ldr	r3, [r0, #0]
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	f013 0007 	ands.w	r0, r3, #7
 800b0ea:	d00b      	beq.n	800b104 <__lo0bits+0x22>
 800b0ec:	07d9      	lsls	r1, r3, #31
 800b0ee:	d421      	bmi.n	800b134 <__lo0bits+0x52>
 800b0f0:	0798      	lsls	r0, r3, #30
 800b0f2:	bf49      	itett	mi
 800b0f4:	085b      	lsrmi	r3, r3, #1
 800b0f6:	089b      	lsrpl	r3, r3, #2
 800b0f8:	2001      	movmi	r0, #1
 800b0fa:	6013      	strmi	r3, [r2, #0]
 800b0fc:	bf5c      	itt	pl
 800b0fe:	6013      	strpl	r3, [r2, #0]
 800b100:	2002      	movpl	r0, #2
 800b102:	4770      	bx	lr
 800b104:	b299      	uxth	r1, r3
 800b106:	b909      	cbnz	r1, 800b10c <__lo0bits+0x2a>
 800b108:	0c1b      	lsrs	r3, r3, #16
 800b10a:	2010      	movs	r0, #16
 800b10c:	b2d9      	uxtb	r1, r3
 800b10e:	b909      	cbnz	r1, 800b114 <__lo0bits+0x32>
 800b110:	3008      	adds	r0, #8
 800b112:	0a1b      	lsrs	r3, r3, #8
 800b114:	0719      	lsls	r1, r3, #28
 800b116:	bf04      	itt	eq
 800b118:	091b      	lsreq	r3, r3, #4
 800b11a:	3004      	addeq	r0, #4
 800b11c:	0799      	lsls	r1, r3, #30
 800b11e:	bf04      	itt	eq
 800b120:	089b      	lsreq	r3, r3, #2
 800b122:	3002      	addeq	r0, #2
 800b124:	07d9      	lsls	r1, r3, #31
 800b126:	d403      	bmi.n	800b130 <__lo0bits+0x4e>
 800b128:	085b      	lsrs	r3, r3, #1
 800b12a:	f100 0001 	add.w	r0, r0, #1
 800b12e:	d003      	beq.n	800b138 <__lo0bits+0x56>
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	4770      	bx	lr
 800b134:	2000      	movs	r0, #0
 800b136:	4770      	bx	lr
 800b138:	2020      	movs	r0, #32
 800b13a:	4770      	bx	lr

0800b13c <__i2b>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	460c      	mov	r4, r1
 800b140:	2101      	movs	r1, #1
 800b142:	f7ff febd 	bl	800aec0 <_Balloc>
 800b146:	4602      	mov	r2, r0
 800b148:	b928      	cbnz	r0, 800b156 <__i2b+0x1a>
 800b14a:	4b05      	ldr	r3, [pc, #20]	@ (800b160 <__i2b+0x24>)
 800b14c:	4805      	ldr	r0, [pc, #20]	@ (800b164 <__i2b+0x28>)
 800b14e:	f240 1145 	movw	r1, #325	@ 0x145
 800b152:	f001 fc75 	bl	800ca40 <__assert_func>
 800b156:	2301      	movs	r3, #1
 800b158:	6144      	str	r4, [r0, #20]
 800b15a:	6103      	str	r3, [r0, #16]
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	bf00      	nop
 800b160:	0800df97 	.word	0x0800df97
 800b164:	0800e01f 	.word	0x0800e01f

0800b168 <__multiply>:
 800b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	4617      	mov	r7, r2
 800b16e:	690a      	ldr	r2, [r1, #16]
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	429a      	cmp	r2, r3
 800b174:	bfa8      	it	ge
 800b176:	463b      	movge	r3, r7
 800b178:	4689      	mov	r9, r1
 800b17a:	bfa4      	itt	ge
 800b17c:	460f      	movge	r7, r1
 800b17e:	4699      	movge	r9, r3
 800b180:	693d      	ldr	r5, [r7, #16]
 800b182:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	6879      	ldr	r1, [r7, #4]
 800b18a:	eb05 060a 	add.w	r6, r5, sl
 800b18e:	42b3      	cmp	r3, r6
 800b190:	b085      	sub	sp, #20
 800b192:	bfb8      	it	lt
 800b194:	3101      	addlt	r1, #1
 800b196:	f7ff fe93 	bl	800aec0 <_Balloc>
 800b19a:	b930      	cbnz	r0, 800b1aa <__multiply+0x42>
 800b19c:	4602      	mov	r2, r0
 800b19e:	4b41      	ldr	r3, [pc, #260]	@ (800b2a4 <__multiply+0x13c>)
 800b1a0:	4841      	ldr	r0, [pc, #260]	@ (800b2a8 <__multiply+0x140>)
 800b1a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b1a6:	f001 fc4b 	bl	800ca40 <__assert_func>
 800b1aa:	f100 0414 	add.w	r4, r0, #20
 800b1ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b1b2:	4623      	mov	r3, r4
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	4573      	cmp	r3, lr
 800b1b8:	d320      	bcc.n	800b1fc <__multiply+0x94>
 800b1ba:	f107 0814 	add.w	r8, r7, #20
 800b1be:	f109 0114 	add.w	r1, r9, #20
 800b1c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b1c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b1ca:	9302      	str	r3, [sp, #8]
 800b1cc:	1beb      	subs	r3, r5, r7
 800b1ce:	3b15      	subs	r3, #21
 800b1d0:	f023 0303 	bic.w	r3, r3, #3
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	3715      	adds	r7, #21
 800b1d8:	42bd      	cmp	r5, r7
 800b1da:	bf38      	it	cc
 800b1dc:	2304      	movcc	r3, #4
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	9b02      	ldr	r3, [sp, #8]
 800b1e2:	9103      	str	r1, [sp, #12]
 800b1e4:	428b      	cmp	r3, r1
 800b1e6:	d80c      	bhi.n	800b202 <__multiply+0x9a>
 800b1e8:	2e00      	cmp	r6, #0
 800b1ea:	dd03      	ble.n	800b1f4 <__multiply+0x8c>
 800b1ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d055      	beq.n	800b2a0 <__multiply+0x138>
 800b1f4:	6106      	str	r6, [r0, #16]
 800b1f6:	b005      	add	sp, #20
 800b1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fc:	f843 2b04 	str.w	r2, [r3], #4
 800b200:	e7d9      	b.n	800b1b6 <__multiply+0x4e>
 800b202:	f8b1 a000 	ldrh.w	sl, [r1]
 800b206:	f1ba 0f00 	cmp.w	sl, #0
 800b20a:	d01f      	beq.n	800b24c <__multiply+0xe4>
 800b20c:	46c4      	mov	ip, r8
 800b20e:	46a1      	mov	r9, r4
 800b210:	2700      	movs	r7, #0
 800b212:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b216:	f8d9 3000 	ldr.w	r3, [r9]
 800b21a:	fa1f fb82 	uxth.w	fp, r2
 800b21e:	b29b      	uxth	r3, r3
 800b220:	fb0a 330b 	mla	r3, sl, fp, r3
 800b224:	443b      	add	r3, r7
 800b226:	f8d9 7000 	ldr.w	r7, [r9]
 800b22a:	0c12      	lsrs	r2, r2, #16
 800b22c:	0c3f      	lsrs	r7, r7, #16
 800b22e:	fb0a 7202 	mla	r2, sl, r2, r7
 800b232:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b236:	b29b      	uxth	r3, r3
 800b238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b23c:	4565      	cmp	r5, ip
 800b23e:	f849 3b04 	str.w	r3, [r9], #4
 800b242:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b246:	d8e4      	bhi.n	800b212 <__multiply+0xaa>
 800b248:	9b01      	ldr	r3, [sp, #4]
 800b24a:	50e7      	str	r7, [r4, r3]
 800b24c:	9b03      	ldr	r3, [sp, #12]
 800b24e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b252:	3104      	adds	r1, #4
 800b254:	f1b9 0f00 	cmp.w	r9, #0
 800b258:	d020      	beq.n	800b29c <__multiply+0x134>
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	4647      	mov	r7, r8
 800b25e:	46a4      	mov	ip, r4
 800b260:	f04f 0a00 	mov.w	sl, #0
 800b264:	f8b7 b000 	ldrh.w	fp, [r7]
 800b268:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b26c:	fb09 220b 	mla	r2, r9, fp, r2
 800b270:	4452      	add	r2, sl
 800b272:	b29b      	uxth	r3, r3
 800b274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b278:	f84c 3b04 	str.w	r3, [ip], #4
 800b27c:	f857 3b04 	ldr.w	r3, [r7], #4
 800b280:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b284:	f8bc 3000 	ldrh.w	r3, [ip]
 800b288:	fb09 330a 	mla	r3, r9, sl, r3
 800b28c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b290:	42bd      	cmp	r5, r7
 800b292:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b296:	d8e5      	bhi.n	800b264 <__multiply+0xfc>
 800b298:	9a01      	ldr	r2, [sp, #4]
 800b29a:	50a3      	str	r3, [r4, r2]
 800b29c:	3404      	adds	r4, #4
 800b29e:	e79f      	b.n	800b1e0 <__multiply+0x78>
 800b2a0:	3e01      	subs	r6, #1
 800b2a2:	e7a1      	b.n	800b1e8 <__multiply+0x80>
 800b2a4:	0800df97 	.word	0x0800df97
 800b2a8:	0800e01f 	.word	0x0800e01f

0800b2ac <__pow5mult>:
 800b2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b0:	4615      	mov	r5, r2
 800b2b2:	f012 0203 	ands.w	r2, r2, #3
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	460e      	mov	r6, r1
 800b2ba:	d007      	beq.n	800b2cc <__pow5mult+0x20>
 800b2bc:	4c25      	ldr	r4, [pc, #148]	@ (800b354 <__pow5mult+0xa8>)
 800b2be:	3a01      	subs	r2, #1
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2c6:	f7ff fe5d 	bl	800af84 <__multadd>
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	10ad      	asrs	r5, r5, #2
 800b2ce:	d03d      	beq.n	800b34c <__pow5mult+0xa0>
 800b2d0:	69fc      	ldr	r4, [r7, #28]
 800b2d2:	b97c      	cbnz	r4, 800b2f4 <__pow5mult+0x48>
 800b2d4:	2010      	movs	r0, #16
 800b2d6:	f7fd fe25 	bl	8008f24 <malloc>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	61f8      	str	r0, [r7, #28]
 800b2de:	b928      	cbnz	r0, 800b2ec <__pow5mult+0x40>
 800b2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b358 <__pow5mult+0xac>)
 800b2e2:	481e      	ldr	r0, [pc, #120]	@ (800b35c <__pow5mult+0xb0>)
 800b2e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2e8:	f001 fbaa 	bl	800ca40 <__assert_func>
 800b2ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2f0:	6004      	str	r4, [r0, #0]
 800b2f2:	60c4      	str	r4, [r0, #12]
 800b2f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2fc:	b94c      	cbnz	r4, 800b312 <__pow5mult+0x66>
 800b2fe:	f240 2171 	movw	r1, #625	@ 0x271
 800b302:	4638      	mov	r0, r7
 800b304:	f7ff ff1a 	bl	800b13c <__i2b>
 800b308:	2300      	movs	r3, #0
 800b30a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b30e:	4604      	mov	r4, r0
 800b310:	6003      	str	r3, [r0, #0]
 800b312:	f04f 0900 	mov.w	r9, #0
 800b316:	07eb      	lsls	r3, r5, #31
 800b318:	d50a      	bpl.n	800b330 <__pow5mult+0x84>
 800b31a:	4631      	mov	r1, r6
 800b31c:	4622      	mov	r2, r4
 800b31e:	4638      	mov	r0, r7
 800b320:	f7ff ff22 	bl	800b168 <__multiply>
 800b324:	4631      	mov	r1, r6
 800b326:	4680      	mov	r8, r0
 800b328:	4638      	mov	r0, r7
 800b32a:	f7ff fe09 	bl	800af40 <_Bfree>
 800b32e:	4646      	mov	r6, r8
 800b330:	106d      	asrs	r5, r5, #1
 800b332:	d00b      	beq.n	800b34c <__pow5mult+0xa0>
 800b334:	6820      	ldr	r0, [r4, #0]
 800b336:	b938      	cbnz	r0, 800b348 <__pow5mult+0x9c>
 800b338:	4622      	mov	r2, r4
 800b33a:	4621      	mov	r1, r4
 800b33c:	4638      	mov	r0, r7
 800b33e:	f7ff ff13 	bl	800b168 <__multiply>
 800b342:	6020      	str	r0, [r4, #0]
 800b344:	f8c0 9000 	str.w	r9, [r0]
 800b348:	4604      	mov	r4, r0
 800b34a:	e7e4      	b.n	800b316 <__pow5mult+0x6a>
 800b34c:	4630      	mov	r0, r6
 800b34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b352:	bf00      	nop
 800b354:	0800e25c 	.word	0x0800e25c
 800b358:	0800e008 	.word	0x0800e008
 800b35c:	0800e01f 	.word	0x0800e01f

0800b360 <__lshift>:
 800b360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b364:	460c      	mov	r4, r1
 800b366:	6849      	ldr	r1, [r1, #4]
 800b368:	6923      	ldr	r3, [r4, #16]
 800b36a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b36e:	68a3      	ldr	r3, [r4, #8]
 800b370:	4607      	mov	r7, r0
 800b372:	4691      	mov	r9, r2
 800b374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b378:	f108 0601 	add.w	r6, r8, #1
 800b37c:	42b3      	cmp	r3, r6
 800b37e:	db0b      	blt.n	800b398 <__lshift+0x38>
 800b380:	4638      	mov	r0, r7
 800b382:	f7ff fd9d 	bl	800aec0 <_Balloc>
 800b386:	4605      	mov	r5, r0
 800b388:	b948      	cbnz	r0, 800b39e <__lshift+0x3e>
 800b38a:	4602      	mov	r2, r0
 800b38c:	4b28      	ldr	r3, [pc, #160]	@ (800b430 <__lshift+0xd0>)
 800b38e:	4829      	ldr	r0, [pc, #164]	@ (800b434 <__lshift+0xd4>)
 800b390:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b394:	f001 fb54 	bl	800ca40 <__assert_func>
 800b398:	3101      	adds	r1, #1
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	e7ee      	b.n	800b37c <__lshift+0x1c>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f100 0114 	add.w	r1, r0, #20
 800b3a4:	f100 0210 	add.w	r2, r0, #16
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	4553      	cmp	r3, sl
 800b3ac:	db33      	blt.n	800b416 <__lshift+0xb6>
 800b3ae:	6920      	ldr	r0, [r4, #16]
 800b3b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3b4:	f104 0314 	add.w	r3, r4, #20
 800b3b8:	f019 091f 	ands.w	r9, r9, #31
 800b3bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3c4:	d02b      	beq.n	800b41e <__lshift+0xbe>
 800b3c6:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ca:	468a      	mov	sl, r1
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	fa00 f009 	lsl.w	r0, r0, r9
 800b3d4:	4310      	orrs	r0, r2
 800b3d6:	f84a 0b04 	str.w	r0, [sl], #4
 800b3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3de:	459c      	cmp	ip, r3
 800b3e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3e4:	d8f3      	bhi.n	800b3ce <__lshift+0x6e>
 800b3e6:	ebac 0304 	sub.w	r3, ip, r4
 800b3ea:	3b15      	subs	r3, #21
 800b3ec:	f023 0303 	bic.w	r3, r3, #3
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	f104 0015 	add.w	r0, r4, #21
 800b3f6:	4560      	cmp	r0, ip
 800b3f8:	bf88      	it	hi
 800b3fa:	2304      	movhi	r3, #4
 800b3fc:	50ca      	str	r2, [r1, r3]
 800b3fe:	b10a      	cbz	r2, 800b404 <__lshift+0xa4>
 800b400:	f108 0602 	add.w	r6, r8, #2
 800b404:	3e01      	subs	r6, #1
 800b406:	4638      	mov	r0, r7
 800b408:	612e      	str	r6, [r5, #16]
 800b40a:	4621      	mov	r1, r4
 800b40c:	f7ff fd98 	bl	800af40 <_Bfree>
 800b410:	4628      	mov	r0, r5
 800b412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b416:	f842 0f04 	str.w	r0, [r2, #4]!
 800b41a:	3301      	adds	r3, #1
 800b41c:	e7c5      	b.n	800b3aa <__lshift+0x4a>
 800b41e:	3904      	subs	r1, #4
 800b420:	f853 2b04 	ldr.w	r2, [r3], #4
 800b424:	f841 2f04 	str.w	r2, [r1, #4]!
 800b428:	459c      	cmp	ip, r3
 800b42a:	d8f9      	bhi.n	800b420 <__lshift+0xc0>
 800b42c:	e7ea      	b.n	800b404 <__lshift+0xa4>
 800b42e:	bf00      	nop
 800b430:	0800df97 	.word	0x0800df97
 800b434:	0800e01f 	.word	0x0800e01f

0800b438 <__mcmp>:
 800b438:	690a      	ldr	r2, [r1, #16]
 800b43a:	4603      	mov	r3, r0
 800b43c:	6900      	ldr	r0, [r0, #16]
 800b43e:	1a80      	subs	r0, r0, r2
 800b440:	b530      	push	{r4, r5, lr}
 800b442:	d10e      	bne.n	800b462 <__mcmp+0x2a>
 800b444:	3314      	adds	r3, #20
 800b446:	3114      	adds	r1, #20
 800b448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b44c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b458:	4295      	cmp	r5, r2
 800b45a:	d003      	beq.n	800b464 <__mcmp+0x2c>
 800b45c:	d205      	bcs.n	800b46a <__mcmp+0x32>
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295
 800b462:	bd30      	pop	{r4, r5, pc}
 800b464:	42a3      	cmp	r3, r4
 800b466:	d3f3      	bcc.n	800b450 <__mcmp+0x18>
 800b468:	e7fb      	b.n	800b462 <__mcmp+0x2a>
 800b46a:	2001      	movs	r0, #1
 800b46c:	e7f9      	b.n	800b462 <__mcmp+0x2a>
	...

0800b470 <__mdiff>:
 800b470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	4689      	mov	r9, r1
 800b476:	4606      	mov	r6, r0
 800b478:	4611      	mov	r1, r2
 800b47a:	4648      	mov	r0, r9
 800b47c:	4614      	mov	r4, r2
 800b47e:	f7ff ffdb 	bl	800b438 <__mcmp>
 800b482:	1e05      	subs	r5, r0, #0
 800b484:	d112      	bne.n	800b4ac <__mdiff+0x3c>
 800b486:	4629      	mov	r1, r5
 800b488:	4630      	mov	r0, r6
 800b48a:	f7ff fd19 	bl	800aec0 <_Balloc>
 800b48e:	4602      	mov	r2, r0
 800b490:	b928      	cbnz	r0, 800b49e <__mdiff+0x2e>
 800b492:	4b3f      	ldr	r3, [pc, #252]	@ (800b590 <__mdiff+0x120>)
 800b494:	f240 2137 	movw	r1, #567	@ 0x237
 800b498:	483e      	ldr	r0, [pc, #248]	@ (800b594 <__mdiff+0x124>)
 800b49a:	f001 fad1 	bl	800ca40 <__assert_func>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	b003      	add	sp, #12
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ac:	bfbc      	itt	lt
 800b4ae:	464b      	movlt	r3, r9
 800b4b0:	46a1      	movlt	r9, r4
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b4b8:	bfba      	itte	lt
 800b4ba:	461c      	movlt	r4, r3
 800b4bc:	2501      	movlt	r5, #1
 800b4be:	2500      	movge	r5, #0
 800b4c0:	f7ff fcfe 	bl	800aec0 <_Balloc>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	b918      	cbnz	r0, 800b4d0 <__mdiff+0x60>
 800b4c8:	4b31      	ldr	r3, [pc, #196]	@ (800b590 <__mdiff+0x120>)
 800b4ca:	f240 2145 	movw	r1, #581	@ 0x245
 800b4ce:	e7e3      	b.n	800b498 <__mdiff+0x28>
 800b4d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4d4:	6926      	ldr	r6, [r4, #16]
 800b4d6:	60c5      	str	r5, [r0, #12]
 800b4d8:	f109 0310 	add.w	r3, r9, #16
 800b4dc:	f109 0514 	add.w	r5, r9, #20
 800b4e0:	f104 0e14 	add.w	lr, r4, #20
 800b4e4:	f100 0b14 	add.w	fp, r0, #20
 800b4e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	46d9      	mov	r9, fp
 800b4f4:	f04f 0c00 	mov.w	ip, #0
 800b4f8:	9b01      	ldr	r3, [sp, #4]
 800b4fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b502:	9301      	str	r3, [sp, #4]
 800b504:	fa1f f38a 	uxth.w	r3, sl
 800b508:	4619      	mov	r1, r3
 800b50a:	b283      	uxth	r3, r0
 800b50c:	1acb      	subs	r3, r1, r3
 800b50e:	0c00      	lsrs	r0, r0, #16
 800b510:	4463      	add	r3, ip
 800b512:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b516:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b520:	4576      	cmp	r6, lr
 800b522:	f849 3b04 	str.w	r3, [r9], #4
 800b526:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b52a:	d8e5      	bhi.n	800b4f8 <__mdiff+0x88>
 800b52c:	1b33      	subs	r3, r6, r4
 800b52e:	3b15      	subs	r3, #21
 800b530:	f023 0303 	bic.w	r3, r3, #3
 800b534:	3415      	adds	r4, #21
 800b536:	3304      	adds	r3, #4
 800b538:	42a6      	cmp	r6, r4
 800b53a:	bf38      	it	cc
 800b53c:	2304      	movcc	r3, #4
 800b53e:	441d      	add	r5, r3
 800b540:	445b      	add	r3, fp
 800b542:	461e      	mov	r6, r3
 800b544:	462c      	mov	r4, r5
 800b546:	4544      	cmp	r4, r8
 800b548:	d30e      	bcc.n	800b568 <__mdiff+0xf8>
 800b54a:	f108 0103 	add.w	r1, r8, #3
 800b54e:	1b49      	subs	r1, r1, r5
 800b550:	f021 0103 	bic.w	r1, r1, #3
 800b554:	3d03      	subs	r5, #3
 800b556:	45a8      	cmp	r8, r5
 800b558:	bf38      	it	cc
 800b55a:	2100      	movcc	r1, #0
 800b55c:	440b      	add	r3, r1
 800b55e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b562:	b191      	cbz	r1, 800b58a <__mdiff+0x11a>
 800b564:	6117      	str	r7, [r2, #16]
 800b566:	e79d      	b.n	800b4a4 <__mdiff+0x34>
 800b568:	f854 1b04 	ldr.w	r1, [r4], #4
 800b56c:	46e6      	mov	lr, ip
 800b56e:	0c08      	lsrs	r0, r1, #16
 800b570:	fa1c fc81 	uxtah	ip, ip, r1
 800b574:	4471      	add	r1, lr
 800b576:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b57a:	b289      	uxth	r1, r1
 800b57c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b580:	f846 1b04 	str.w	r1, [r6], #4
 800b584:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b588:	e7dd      	b.n	800b546 <__mdiff+0xd6>
 800b58a:	3f01      	subs	r7, #1
 800b58c:	e7e7      	b.n	800b55e <__mdiff+0xee>
 800b58e:	bf00      	nop
 800b590:	0800df97 	.word	0x0800df97
 800b594:	0800e01f 	.word	0x0800e01f

0800b598 <__ulp>:
 800b598:	b082      	sub	sp, #8
 800b59a:	ed8d 0b00 	vstr	d0, [sp]
 800b59e:	9a01      	ldr	r2, [sp, #4]
 800b5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e0 <__ulp+0x48>)
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	dc08      	bgt.n	800b5be <__ulp+0x26>
 800b5ac:	425b      	negs	r3, r3
 800b5ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b5b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5b6:	da04      	bge.n	800b5c2 <__ulp+0x2a>
 800b5b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b5bc:	4113      	asrs	r3, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	e008      	b.n	800b5d4 <__ulp+0x3c>
 800b5c2:	f1a2 0314 	sub.w	r3, r2, #20
 800b5c6:	2b1e      	cmp	r3, #30
 800b5c8:	bfda      	itte	le
 800b5ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b5ce:	40da      	lsrle	r2, r3
 800b5d0:	2201      	movgt	r2, #1
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	ec41 0b10 	vmov	d0, r0, r1
 800b5dc:	b002      	add	sp, #8
 800b5de:	4770      	bx	lr
 800b5e0:	7ff00000 	.word	0x7ff00000

0800b5e4 <__b2d>:
 800b5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	6906      	ldr	r6, [r0, #16]
 800b5ea:	f100 0814 	add.w	r8, r0, #20
 800b5ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b5f2:	1f37      	subs	r7, r6, #4
 800b5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f7ff fd53 	bl	800b0a4 <__hi0bits>
 800b5fe:	f1c0 0320 	rsb	r3, r0, #32
 800b602:	280a      	cmp	r0, #10
 800b604:	600b      	str	r3, [r1, #0]
 800b606:	491b      	ldr	r1, [pc, #108]	@ (800b674 <__b2d+0x90>)
 800b608:	dc15      	bgt.n	800b636 <__b2d+0x52>
 800b60a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b60e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b612:	45b8      	cmp	r8, r7
 800b614:	ea43 0501 	orr.w	r5, r3, r1
 800b618:	bf34      	ite	cc
 800b61a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b61e:	2300      	movcs	r3, #0
 800b620:	3015      	adds	r0, #21
 800b622:	fa02 f000 	lsl.w	r0, r2, r0
 800b626:	fa23 f30c 	lsr.w	r3, r3, ip
 800b62a:	4303      	orrs	r3, r0
 800b62c:	461c      	mov	r4, r3
 800b62e:	ec45 4b10 	vmov	d0, r4, r5
 800b632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b636:	45b8      	cmp	r8, r7
 800b638:	bf3a      	itte	cc
 800b63a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b63e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b642:	2300      	movcs	r3, #0
 800b644:	380b      	subs	r0, #11
 800b646:	d012      	beq.n	800b66e <__b2d+0x8a>
 800b648:	f1c0 0120 	rsb	r1, r0, #32
 800b64c:	fa23 f401 	lsr.w	r4, r3, r1
 800b650:	4082      	lsls	r2, r0
 800b652:	4322      	orrs	r2, r4
 800b654:	4547      	cmp	r7, r8
 800b656:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b65a:	bf8c      	ite	hi
 800b65c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b660:	2200      	movls	r2, #0
 800b662:	4083      	lsls	r3, r0
 800b664:	40ca      	lsrs	r2, r1
 800b666:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b66a:	4313      	orrs	r3, r2
 800b66c:	e7de      	b.n	800b62c <__b2d+0x48>
 800b66e:	ea42 0501 	orr.w	r5, r2, r1
 800b672:	e7db      	b.n	800b62c <__b2d+0x48>
 800b674:	3ff00000 	.word	0x3ff00000

0800b678 <__d2b>:
 800b678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b67c:	460f      	mov	r7, r1
 800b67e:	2101      	movs	r1, #1
 800b680:	ec59 8b10 	vmov	r8, r9, d0
 800b684:	4616      	mov	r6, r2
 800b686:	f7ff fc1b 	bl	800aec0 <_Balloc>
 800b68a:	4604      	mov	r4, r0
 800b68c:	b930      	cbnz	r0, 800b69c <__d2b+0x24>
 800b68e:	4602      	mov	r2, r0
 800b690:	4b23      	ldr	r3, [pc, #140]	@ (800b720 <__d2b+0xa8>)
 800b692:	4824      	ldr	r0, [pc, #144]	@ (800b724 <__d2b+0xac>)
 800b694:	f240 310f 	movw	r1, #783	@ 0x30f
 800b698:	f001 f9d2 	bl	800ca40 <__assert_func>
 800b69c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6a4:	b10d      	cbz	r5, 800b6aa <__d2b+0x32>
 800b6a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6aa:	9301      	str	r3, [sp, #4]
 800b6ac:	f1b8 0300 	subs.w	r3, r8, #0
 800b6b0:	d023      	beq.n	800b6fa <__d2b+0x82>
 800b6b2:	4668      	mov	r0, sp
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	f7ff fd14 	bl	800b0e2 <__lo0bits>
 800b6ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6be:	b1d0      	cbz	r0, 800b6f6 <__d2b+0x7e>
 800b6c0:	f1c0 0320 	rsb	r3, r0, #32
 800b6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c8:	430b      	orrs	r3, r1
 800b6ca:	40c2      	lsrs	r2, r0
 800b6cc:	6163      	str	r3, [r4, #20]
 800b6ce:	9201      	str	r2, [sp, #4]
 800b6d0:	9b01      	ldr	r3, [sp, #4]
 800b6d2:	61a3      	str	r3, [r4, #24]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	bf0c      	ite	eq
 800b6d8:	2201      	moveq	r2, #1
 800b6da:	2202      	movne	r2, #2
 800b6dc:	6122      	str	r2, [r4, #16]
 800b6de:	b1a5      	cbz	r5, 800b70a <__d2b+0x92>
 800b6e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6e4:	4405      	add	r5, r0
 800b6e6:	603d      	str	r5, [r7, #0]
 800b6e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6ec:	6030      	str	r0, [r6, #0]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	b003      	add	sp, #12
 800b6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6f6:	6161      	str	r1, [r4, #20]
 800b6f8:	e7ea      	b.n	800b6d0 <__d2b+0x58>
 800b6fa:	a801      	add	r0, sp, #4
 800b6fc:	f7ff fcf1 	bl	800b0e2 <__lo0bits>
 800b700:	9b01      	ldr	r3, [sp, #4]
 800b702:	6163      	str	r3, [r4, #20]
 800b704:	3020      	adds	r0, #32
 800b706:	2201      	movs	r2, #1
 800b708:	e7e8      	b.n	800b6dc <__d2b+0x64>
 800b70a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b70e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b712:	6038      	str	r0, [r7, #0]
 800b714:	6918      	ldr	r0, [r3, #16]
 800b716:	f7ff fcc5 	bl	800b0a4 <__hi0bits>
 800b71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b71e:	e7e5      	b.n	800b6ec <__d2b+0x74>
 800b720:	0800df97 	.word	0x0800df97
 800b724:	0800e01f 	.word	0x0800e01f

0800b728 <__ratio>:
 800b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	b085      	sub	sp, #20
 800b72e:	e9cd 1000 	strd	r1, r0, [sp]
 800b732:	a902      	add	r1, sp, #8
 800b734:	f7ff ff56 	bl	800b5e4 <__b2d>
 800b738:	9800      	ldr	r0, [sp, #0]
 800b73a:	a903      	add	r1, sp, #12
 800b73c:	ec55 4b10 	vmov	r4, r5, d0
 800b740:	f7ff ff50 	bl	800b5e4 <__b2d>
 800b744:	9b01      	ldr	r3, [sp, #4]
 800b746:	6919      	ldr	r1, [r3, #16]
 800b748:	9b00      	ldr	r3, [sp, #0]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	1ac9      	subs	r1, r1, r3
 800b74e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b752:	1a9b      	subs	r3, r3, r2
 800b754:	ec5b ab10 	vmov	sl, fp, d0
 800b758:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	bfce      	itee	gt
 800b760:	462a      	movgt	r2, r5
 800b762:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b766:	465a      	movle	r2, fp
 800b768:	462f      	mov	r7, r5
 800b76a:	46d9      	mov	r9, fp
 800b76c:	bfcc      	ite	gt
 800b76e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b772:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b776:	464b      	mov	r3, r9
 800b778:	4652      	mov	r2, sl
 800b77a:	4620      	mov	r0, r4
 800b77c:	4639      	mov	r1, r7
 800b77e:	f7f5 f865 	bl	800084c <__aeabi_ddiv>
 800b782:	ec41 0b10 	vmov	d0, r0, r1
 800b786:	b005      	add	sp, #20
 800b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b78c <__copybits>:
 800b78c:	3901      	subs	r1, #1
 800b78e:	b570      	push	{r4, r5, r6, lr}
 800b790:	1149      	asrs	r1, r1, #5
 800b792:	6914      	ldr	r4, [r2, #16]
 800b794:	3101      	adds	r1, #1
 800b796:	f102 0314 	add.w	r3, r2, #20
 800b79a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b79e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7a2:	1f05      	subs	r5, r0, #4
 800b7a4:	42a3      	cmp	r3, r4
 800b7a6:	d30c      	bcc.n	800b7c2 <__copybits+0x36>
 800b7a8:	1aa3      	subs	r3, r4, r2
 800b7aa:	3b11      	subs	r3, #17
 800b7ac:	f023 0303 	bic.w	r3, r3, #3
 800b7b0:	3211      	adds	r2, #17
 800b7b2:	42a2      	cmp	r2, r4
 800b7b4:	bf88      	it	hi
 800b7b6:	2300      	movhi	r3, #0
 800b7b8:	4418      	add	r0, r3
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4288      	cmp	r0, r1
 800b7be:	d305      	bcc.n	800b7cc <__copybits+0x40>
 800b7c0:	bd70      	pop	{r4, r5, r6, pc}
 800b7c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7ca:	e7eb      	b.n	800b7a4 <__copybits+0x18>
 800b7cc:	f840 3b04 	str.w	r3, [r0], #4
 800b7d0:	e7f4      	b.n	800b7bc <__copybits+0x30>

0800b7d2 <__any_on>:
 800b7d2:	f100 0214 	add.w	r2, r0, #20
 800b7d6:	6900      	ldr	r0, [r0, #16]
 800b7d8:	114b      	asrs	r3, r1, #5
 800b7da:	4298      	cmp	r0, r3
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	db11      	blt.n	800b804 <__any_on+0x32>
 800b7e0:	dd0a      	ble.n	800b7f8 <__any_on+0x26>
 800b7e2:	f011 011f 	ands.w	r1, r1, #31
 800b7e6:	d007      	beq.n	800b7f8 <__any_on+0x26>
 800b7e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7ec:	fa24 f001 	lsr.w	r0, r4, r1
 800b7f0:	fa00 f101 	lsl.w	r1, r0, r1
 800b7f4:	428c      	cmp	r4, r1
 800b7f6:	d10b      	bne.n	800b810 <__any_on+0x3e>
 800b7f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d803      	bhi.n	800b808 <__any_on+0x36>
 800b800:	2000      	movs	r0, #0
 800b802:	bd10      	pop	{r4, pc}
 800b804:	4603      	mov	r3, r0
 800b806:	e7f7      	b.n	800b7f8 <__any_on+0x26>
 800b808:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b80c:	2900      	cmp	r1, #0
 800b80e:	d0f5      	beq.n	800b7fc <__any_on+0x2a>
 800b810:	2001      	movs	r0, #1
 800b812:	e7f6      	b.n	800b802 <__any_on+0x30>

0800b814 <_malloc_usable_size_r>:
 800b814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b818:	1f18      	subs	r0, r3, #4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	bfbc      	itt	lt
 800b81e:	580b      	ldrlt	r3, [r1, r0]
 800b820:	18c0      	addlt	r0, r0, r3
 800b822:	4770      	bx	lr

0800b824 <__ascii_wctomb>:
 800b824:	4603      	mov	r3, r0
 800b826:	4608      	mov	r0, r1
 800b828:	b141      	cbz	r1, 800b83c <__ascii_wctomb+0x18>
 800b82a:	2aff      	cmp	r2, #255	@ 0xff
 800b82c:	d904      	bls.n	800b838 <__ascii_wctomb+0x14>
 800b82e:	228a      	movs	r2, #138	@ 0x8a
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	f04f 30ff 	mov.w	r0, #4294967295
 800b836:	4770      	bx	lr
 800b838:	700a      	strb	r2, [r1, #0]
 800b83a:	2001      	movs	r0, #1
 800b83c:	4770      	bx	lr

0800b83e <__ssputs_r>:
 800b83e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b842:	688e      	ldr	r6, [r1, #8]
 800b844:	461f      	mov	r7, r3
 800b846:	42be      	cmp	r6, r7
 800b848:	680b      	ldr	r3, [r1, #0]
 800b84a:	4682      	mov	sl, r0
 800b84c:	460c      	mov	r4, r1
 800b84e:	4690      	mov	r8, r2
 800b850:	d82d      	bhi.n	800b8ae <__ssputs_r+0x70>
 800b852:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b856:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b85a:	d026      	beq.n	800b8aa <__ssputs_r+0x6c>
 800b85c:	6965      	ldr	r5, [r4, #20]
 800b85e:	6909      	ldr	r1, [r1, #16]
 800b860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b864:	eba3 0901 	sub.w	r9, r3, r1
 800b868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b86c:	1c7b      	adds	r3, r7, #1
 800b86e:	444b      	add	r3, r9
 800b870:	106d      	asrs	r5, r5, #1
 800b872:	429d      	cmp	r5, r3
 800b874:	bf38      	it	cc
 800b876:	461d      	movcc	r5, r3
 800b878:	0553      	lsls	r3, r2, #21
 800b87a:	d527      	bpl.n	800b8cc <__ssputs_r+0x8e>
 800b87c:	4629      	mov	r1, r5
 800b87e:	f7fd fb7b 	bl	8008f78 <_malloc_r>
 800b882:	4606      	mov	r6, r0
 800b884:	b360      	cbz	r0, 800b8e0 <__ssputs_r+0xa2>
 800b886:	6921      	ldr	r1, [r4, #16]
 800b888:	464a      	mov	r2, r9
 800b88a:	f7fe ff66 	bl	800a75a <memcpy>
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b898:	81a3      	strh	r3, [r4, #12]
 800b89a:	6126      	str	r6, [r4, #16]
 800b89c:	6165      	str	r5, [r4, #20]
 800b89e:	444e      	add	r6, r9
 800b8a0:	eba5 0509 	sub.w	r5, r5, r9
 800b8a4:	6026      	str	r6, [r4, #0]
 800b8a6:	60a5      	str	r5, [r4, #8]
 800b8a8:	463e      	mov	r6, r7
 800b8aa:	42be      	cmp	r6, r7
 800b8ac:	d900      	bls.n	800b8b0 <__ssputs_r+0x72>
 800b8ae:	463e      	mov	r6, r7
 800b8b0:	6820      	ldr	r0, [r4, #0]
 800b8b2:	4632      	mov	r2, r6
 800b8b4:	4641      	mov	r1, r8
 800b8b6:	f001 f886 	bl	800c9c6 <memmove>
 800b8ba:	68a3      	ldr	r3, [r4, #8]
 800b8bc:	1b9b      	subs	r3, r3, r6
 800b8be:	60a3      	str	r3, [r4, #8]
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	4433      	add	r3, r6
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	f7fd fbdf 	bl	8009090 <_realloc_r>
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d1e0      	bne.n	800b89a <__ssputs_r+0x5c>
 800b8d8:	6921      	ldr	r1, [r4, #16]
 800b8da:	4650      	mov	r0, sl
 800b8dc:	f7fe ff5a 	bl	800a794 <_free_r>
 800b8e0:	230c      	movs	r3, #12
 800b8e2:	f8ca 3000 	str.w	r3, [sl]
 800b8e6:	89a3      	ldrh	r3, [r4, #12]
 800b8e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ec:	81a3      	strh	r3, [r4, #12]
 800b8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f2:	e7e9      	b.n	800b8c8 <__ssputs_r+0x8a>

0800b8f4 <_svfiprintf_r>:
 800b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	4698      	mov	r8, r3
 800b8fa:	898b      	ldrh	r3, [r1, #12]
 800b8fc:	061b      	lsls	r3, r3, #24
 800b8fe:	b09d      	sub	sp, #116	@ 0x74
 800b900:	4607      	mov	r7, r0
 800b902:	460d      	mov	r5, r1
 800b904:	4614      	mov	r4, r2
 800b906:	d510      	bpl.n	800b92a <_svfiprintf_r+0x36>
 800b908:	690b      	ldr	r3, [r1, #16]
 800b90a:	b973      	cbnz	r3, 800b92a <_svfiprintf_r+0x36>
 800b90c:	2140      	movs	r1, #64	@ 0x40
 800b90e:	f7fd fb33 	bl	8008f78 <_malloc_r>
 800b912:	6028      	str	r0, [r5, #0]
 800b914:	6128      	str	r0, [r5, #16]
 800b916:	b930      	cbnz	r0, 800b926 <_svfiprintf_r+0x32>
 800b918:	230c      	movs	r3, #12
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	b01d      	add	sp, #116	@ 0x74
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	2340      	movs	r3, #64	@ 0x40
 800b928:	616b      	str	r3, [r5, #20]
 800b92a:	2300      	movs	r3, #0
 800b92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b92e:	2320      	movs	r3, #32
 800b930:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b934:	f8cd 800c 	str.w	r8, [sp, #12]
 800b938:	2330      	movs	r3, #48	@ 0x30
 800b93a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bad8 <_svfiprintf_r+0x1e4>
 800b93e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b942:	f04f 0901 	mov.w	r9, #1
 800b946:	4623      	mov	r3, r4
 800b948:	469a      	mov	sl, r3
 800b94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b94e:	b10a      	cbz	r2, 800b954 <_svfiprintf_r+0x60>
 800b950:	2a25      	cmp	r2, #37	@ 0x25
 800b952:	d1f9      	bne.n	800b948 <_svfiprintf_r+0x54>
 800b954:	ebba 0b04 	subs.w	fp, sl, r4
 800b958:	d00b      	beq.n	800b972 <_svfiprintf_r+0x7e>
 800b95a:	465b      	mov	r3, fp
 800b95c:	4622      	mov	r2, r4
 800b95e:	4629      	mov	r1, r5
 800b960:	4638      	mov	r0, r7
 800b962:	f7ff ff6c 	bl	800b83e <__ssputs_r>
 800b966:	3001      	adds	r0, #1
 800b968:	f000 80a7 	beq.w	800baba <_svfiprintf_r+0x1c6>
 800b96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b96e:	445a      	add	r2, fp
 800b970:	9209      	str	r2, [sp, #36]	@ 0x24
 800b972:	f89a 3000 	ldrb.w	r3, [sl]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 809f 	beq.w	800baba <_svfiprintf_r+0x1c6>
 800b97c:	2300      	movs	r3, #0
 800b97e:	f04f 32ff 	mov.w	r2, #4294967295
 800b982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b986:	f10a 0a01 	add.w	sl, sl, #1
 800b98a:	9304      	str	r3, [sp, #16]
 800b98c:	9307      	str	r3, [sp, #28]
 800b98e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b992:	931a      	str	r3, [sp, #104]	@ 0x68
 800b994:	4654      	mov	r4, sl
 800b996:	2205      	movs	r2, #5
 800b998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99c:	484e      	ldr	r0, [pc, #312]	@ (800bad8 <_svfiprintf_r+0x1e4>)
 800b99e:	f7f4 fc1f 	bl	80001e0 <memchr>
 800b9a2:	9a04      	ldr	r2, [sp, #16]
 800b9a4:	b9d8      	cbnz	r0, 800b9de <_svfiprintf_r+0xea>
 800b9a6:	06d0      	lsls	r0, r2, #27
 800b9a8:	bf44      	itt	mi
 800b9aa:	2320      	movmi	r3, #32
 800b9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9b0:	0711      	lsls	r1, r2, #28
 800b9b2:	bf44      	itt	mi
 800b9b4:	232b      	movmi	r3, #43	@ 0x2b
 800b9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b9be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9c0:	d015      	beq.n	800b9ee <_svfiprintf_r+0xfa>
 800b9c2:	9a07      	ldr	r2, [sp, #28]
 800b9c4:	4654      	mov	r4, sl
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	f04f 0c0a 	mov.w	ip, #10
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9d2:	3b30      	subs	r3, #48	@ 0x30
 800b9d4:	2b09      	cmp	r3, #9
 800b9d6:	d94b      	bls.n	800ba70 <_svfiprintf_r+0x17c>
 800b9d8:	b1b0      	cbz	r0, 800ba08 <_svfiprintf_r+0x114>
 800b9da:	9207      	str	r2, [sp, #28]
 800b9dc:	e014      	b.n	800ba08 <_svfiprintf_r+0x114>
 800b9de:	eba0 0308 	sub.w	r3, r0, r8
 800b9e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	9304      	str	r3, [sp, #16]
 800b9ea:	46a2      	mov	sl, r4
 800b9ec:	e7d2      	b.n	800b994 <_svfiprintf_r+0xa0>
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	1d19      	adds	r1, r3, #4
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	9103      	str	r1, [sp, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	bfbb      	ittet	lt
 800b9fa:	425b      	neglt	r3, r3
 800b9fc:	f042 0202 	orrlt.w	r2, r2, #2
 800ba00:	9307      	strge	r3, [sp, #28]
 800ba02:	9307      	strlt	r3, [sp, #28]
 800ba04:	bfb8      	it	lt
 800ba06:	9204      	strlt	r2, [sp, #16]
 800ba08:	7823      	ldrb	r3, [r4, #0]
 800ba0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba0c:	d10a      	bne.n	800ba24 <_svfiprintf_r+0x130>
 800ba0e:	7863      	ldrb	r3, [r4, #1]
 800ba10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba12:	d132      	bne.n	800ba7a <_svfiprintf_r+0x186>
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	1d1a      	adds	r2, r3, #4
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	9203      	str	r2, [sp, #12]
 800ba1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba20:	3402      	adds	r4, #2
 800ba22:	9305      	str	r3, [sp, #20]
 800ba24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bae8 <_svfiprintf_r+0x1f4>
 800ba28:	7821      	ldrb	r1, [r4, #0]
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	4650      	mov	r0, sl
 800ba2e:	f7f4 fbd7 	bl	80001e0 <memchr>
 800ba32:	b138      	cbz	r0, 800ba44 <_svfiprintf_r+0x150>
 800ba34:	9b04      	ldr	r3, [sp, #16]
 800ba36:	eba0 000a 	sub.w	r0, r0, sl
 800ba3a:	2240      	movs	r2, #64	@ 0x40
 800ba3c:	4082      	lsls	r2, r0
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	3401      	adds	r4, #1
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba48:	4824      	ldr	r0, [pc, #144]	@ (800badc <_svfiprintf_r+0x1e8>)
 800ba4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba4e:	2206      	movs	r2, #6
 800ba50:	f7f4 fbc6 	bl	80001e0 <memchr>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d036      	beq.n	800bac6 <_svfiprintf_r+0x1d2>
 800ba58:	4b21      	ldr	r3, [pc, #132]	@ (800bae0 <_svfiprintf_r+0x1ec>)
 800ba5a:	bb1b      	cbnz	r3, 800baa4 <_svfiprintf_r+0x1b0>
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	3307      	adds	r3, #7
 800ba60:	f023 0307 	bic.w	r3, r3, #7
 800ba64:	3308      	adds	r3, #8
 800ba66:	9303      	str	r3, [sp, #12]
 800ba68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba6a:	4433      	add	r3, r6
 800ba6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba6e:	e76a      	b.n	800b946 <_svfiprintf_r+0x52>
 800ba70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba74:	460c      	mov	r4, r1
 800ba76:	2001      	movs	r0, #1
 800ba78:	e7a8      	b.n	800b9cc <_svfiprintf_r+0xd8>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	3401      	adds	r4, #1
 800ba7e:	9305      	str	r3, [sp, #20]
 800ba80:	4619      	mov	r1, r3
 800ba82:	f04f 0c0a 	mov.w	ip, #10
 800ba86:	4620      	mov	r0, r4
 800ba88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba8c:	3a30      	subs	r2, #48	@ 0x30
 800ba8e:	2a09      	cmp	r2, #9
 800ba90:	d903      	bls.n	800ba9a <_svfiprintf_r+0x1a6>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0c6      	beq.n	800ba24 <_svfiprintf_r+0x130>
 800ba96:	9105      	str	r1, [sp, #20]
 800ba98:	e7c4      	b.n	800ba24 <_svfiprintf_r+0x130>
 800ba9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba9e:	4604      	mov	r4, r0
 800baa0:	2301      	movs	r3, #1
 800baa2:	e7f0      	b.n	800ba86 <_svfiprintf_r+0x192>
 800baa4:	ab03      	add	r3, sp, #12
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	462a      	mov	r2, r5
 800baaa:	4b0e      	ldr	r3, [pc, #56]	@ (800bae4 <_svfiprintf_r+0x1f0>)
 800baac:	a904      	add	r1, sp, #16
 800baae:	4638      	mov	r0, r7
 800bab0:	f3af 8000 	nop.w
 800bab4:	1c42      	adds	r2, r0, #1
 800bab6:	4606      	mov	r6, r0
 800bab8:	d1d6      	bne.n	800ba68 <_svfiprintf_r+0x174>
 800baba:	89ab      	ldrh	r3, [r5, #12]
 800babc:	065b      	lsls	r3, r3, #25
 800babe:	f53f af2d 	bmi.w	800b91c <_svfiprintf_r+0x28>
 800bac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bac4:	e72c      	b.n	800b920 <_svfiprintf_r+0x2c>
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	462a      	mov	r2, r5
 800bacc:	4b05      	ldr	r3, [pc, #20]	@ (800bae4 <_svfiprintf_r+0x1f0>)
 800bace:	a904      	add	r1, sp, #16
 800bad0:	4638      	mov	r0, r7
 800bad2:	f000 fb8b 	bl	800c1ec <_printf_i>
 800bad6:	e7ed      	b.n	800bab4 <_svfiprintf_r+0x1c0>
 800bad8:	0800e078 	.word	0x0800e078
 800badc:	0800e082 	.word	0x0800e082
 800bae0:	00000000 	.word	0x00000000
 800bae4:	0800b83f 	.word	0x0800b83f
 800bae8:	0800e07e 	.word	0x0800e07e

0800baec <_sungetc_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	1c4b      	adds	r3, r1, #1
 800baf0:	4614      	mov	r4, r2
 800baf2:	d103      	bne.n	800bafc <_sungetc_r+0x10>
 800baf4:	f04f 35ff 	mov.w	r5, #4294967295
 800baf8:	4628      	mov	r0, r5
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	8993      	ldrh	r3, [r2, #12]
 800bafe:	f023 0320 	bic.w	r3, r3, #32
 800bb02:	8193      	strh	r3, [r2, #12]
 800bb04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb06:	6852      	ldr	r2, [r2, #4]
 800bb08:	b2cd      	uxtb	r5, r1
 800bb0a:	b18b      	cbz	r3, 800bb30 <_sungetc_r+0x44>
 800bb0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	dd08      	ble.n	800bb24 <_sungetc_r+0x38>
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	1e5a      	subs	r2, r3, #1
 800bb16:	6022      	str	r2, [r4, #0]
 800bb18:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bb1c:	6863      	ldr	r3, [r4, #4]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	6063      	str	r3, [r4, #4]
 800bb22:	e7e9      	b.n	800baf8 <_sungetc_r+0xc>
 800bb24:	4621      	mov	r1, r4
 800bb26:	f000 ff14 	bl	800c952 <__submore>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d0f1      	beq.n	800bb12 <_sungetc_r+0x26>
 800bb2e:	e7e1      	b.n	800baf4 <_sungetc_r+0x8>
 800bb30:	6921      	ldr	r1, [r4, #16]
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	b151      	cbz	r1, 800bb4c <_sungetc_r+0x60>
 800bb36:	4299      	cmp	r1, r3
 800bb38:	d208      	bcs.n	800bb4c <_sungetc_r+0x60>
 800bb3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bb3e:	42a9      	cmp	r1, r5
 800bb40:	d104      	bne.n	800bb4c <_sungetc_r+0x60>
 800bb42:	3b01      	subs	r3, #1
 800bb44:	3201      	adds	r2, #1
 800bb46:	6023      	str	r3, [r4, #0]
 800bb48:	6062      	str	r2, [r4, #4]
 800bb4a:	e7d5      	b.n	800baf8 <_sungetc_r+0xc>
 800bb4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800bb50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb54:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb56:	2303      	movs	r3, #3
 800bb58:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bb5a:	4623      	mov	r3, r4
 800bb5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	2301      	movs	r3, #1
 800bb64:	e7dc      	b.n	800bb20 <_sungetc_r+0x34>

0800bb66 <__ssrefill_r>:
 800bb66:	b510      	push	{r4, lr}
 800bb68:	460c      	mov	r4, r1
 800bb6a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bb6c:	b169      	cbz	r1, 800bb8a <__ssrefill_r+0x24>
 800bb6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb72:	4299      	cmp	r1, r3
 800bb74:	d001      	beq.n	800bb7a <__ssrefill_r+0x14>
 800bb76:	f7fe fe0d 	bl	800a794 <_free_r>
 800bb7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb7c:	6063      	str	r3, [r4, #4]
 800bb7e:	2000      	movs	r0, #0
 800bb80:	6360      	str	r0, [r4, #52]	@ 0x34
 800bb82:	b113      	cbz	r3, 800bb8a <__ssrefill_r+0x24>
 800bb84:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bb86:	6023      	str	r3, [r4, #0]
 800bb88:	bd10      	pop	{r4, pc}
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	6063      	str	r3, [r4, #4]
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	f043 0320 	orr.w	r3, r3, #32
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9e:	e7f3      	b.n	800bb88 <__ssrefill_r+0x22>

0800bba0 <__ssvfiscanf_r>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	460c      	mov	r4, r1
 800bba6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800bbaa:	2100      	movs	r1, #0
 800bbac:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bbb0:	49a6      	ldr	r1, [pc, #664]	@ (800be4c <__ssvfiscanf_r+0x2ac>)
 800bbb2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bbb4:	f10d 0804 	add.w	r8, sp, #4
 800bbb8:	49a5      	ldr	r1, [pc, #660]	@ (800be50 <__ssvfiscanf_r+0x2b0>)
 800bbba:	4fa6      	ldr	r7, [pc, #664]	@ (800be54 <__ssvfiscanf_r+0x2b4>)
 800bbbc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	f892 9000 	ldrb.w	r9, [r2]
 800bbca:	f1b9 0f00 	cmp.w	r9, #0
 800bbce:	f000 8158 	beq.w	800be82 <__ssvfiscanf_r+0x2e2>
 800bbd2:	f817 3009 	ldrb.w	r3, [r7, r9]
 800bbd6:	f013 0308 	ands.w	r3, r3, #8
 800bbda:	f102 0501 	add.w	r5, r2, #1
 800bbde:	d019      	beq.n	800bc14 <__ssvfiscanf_r+0x74>
 800bbe0:	6863      	ldr	r3, [r4, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	dd0f      	ble.n	800bc06 <__ssvfiscanf_r+0x66>
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	781a      	ldrb	r2, [r3, #0]
 800bbea:	5cba      	ldrb	r2, [r7, r2]
 800bbec:	0712      	lsls	r2, r2, #28
 800bbee:	d401      	bmi.n	800bbf4 <__ssvfiscanf_r+0x54>
 800bbf0:	462a      	mov	r2, r5
 800bbf2:	e7e8      	b.n	800bbc6 <__ssvfiscanf_r+0x26>
 800bbf4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bbf6:	3201      	adds	r2, #1
 800bbf8:	9245      	str	r2, [sp, #276]	@ 0x114
 800bbfa:	6862      	ldr	r2, [r4, #4]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	3a01      	subs	r2, #1
 800bc00:	6062      	str	r2, [r4, #4]
 800bc02:	6023      	str	r3, [r4, #0]
 800bc04:	e7ec      	b.n	800bbe0 <__ssvfiscanf_r+0x40>
 800bc06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bc08:	4621      	mov	r1, r4
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	4798      	blx	r3
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d0e9      	beq.n	800bbe6 <__ssvfiscanf_r+0x46>
 800bc12:	e7ed      	b.n	800bbf0 <__ssvfiscanf_r+0x50>
 800bc14:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800bc18:	f040 8085 	bne.w	800bd26 <__ssvfiscanf_r+0x186>
 800bc1c:	9341      	str	r3, [sp, #260]	@ 0x104
 800bc1e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bc20:	7853      	ldrb	r3, [r2, #1]
 800bc22:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc24:	bf02      	ittt	eq
 800bc26:	2310      	moveq	r3, #16
 800bc28:	1c95      	addeq	r5, r2, #2
 800bc2a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800bc2c:	220a      	movs	r2, #10
 800bc2e:	46aa      	mov	sl, r5
 800bc30:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bc34:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800bc38:	2b09      	cmp	r3, #9
 800bc3a:	d91e      	bls.n	800bc7a <__ssvfiscanf_r+0xda>
 800bc3c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800be58 <__ssvfiscanf_r+0x2b8>
 800bc40:	2203      	movs	r2, #3
 800bc42:	4658      	mov	r0, fp
 800bc44:	f7f4 facc 	bl	80001e0 <memchr>
 800bc48:	b138      	cbz	r0, 800bc5a <__ssvfiscanf_r+0xba>
 800bc4a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bc4c:	eba0 000b 	sub.w	r0, r0, fp
 800bc50:	2301      	movs	r3, #1
 800bc52:	4083      	lsls	r3, r0
 800bc54:	4313      	orrs	r3, r2
 800bc56:	9341      	str	r3, [sp, #260]	@ 0x104
 800bc58:	4655      	mov	r5, sl
 800bc5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc5e:	2b78      	cmp	r3, #120	@ 0x78
 800bc60:	d806      	bhi.n	800bc70 <__ssvfiscanf_r+0xd0>
 800bc62:	2b57      	cmp	r3, #87	@ 0x57
 800bc64:	d810      	bhi.n	800bc88 <__ssvfiscanf_r+0xe8>
 800bc66:	2b25      	cmp	r3, #37	@ 0x25
 800bc68:	d05d      	beq.n	800bd26 <__ssvfiscanf_r+0x186>
 800bc6a:	d857      	bhi.n	800bd1c <__ssvfiscanf_r+0x17c>
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d075      	beq.n	800bd5c <__ssvfiscanf_r+0x1bc>
 800bc70:	2303      	movs	r3, #3
 800bc72:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bc74:	230a      	movs	r3, #10
 800bc76:	9342      	str	r3, [sp, #264]	@ 0x108
 800bc78:	e088      	b.n	800bd8c <__ssvfiscanf_r+0x1ec>
 800bc7a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bc7c:	fb02 1103 	mla	r1, r2, r3, r1
 800bc80:	3930      	subs	r1, #48	@ 0x30
 800bc82:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bc84:	4655      	mov	r5, sl
 800bc86:	e7d2      	b.n	800bc2e <__ssvfiscanf_r+0x8e>
 800bc88:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bc8c:	2a20      	cmp	r2, #32
 800bc8e:	d8ef      	bhi.n	800bc70 <__ssvfiscanf_r+0xd0>
 800bc90:	a101      	add	r1, pc, #4	@ (adr r1, 800bc98 <__ssvfiscanf_r+0xf8>)
 800bc92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bc96:	bf00      	nop
 800bc98:	0800bd6b 	.word	0x0800bd6b
 800bc9c:	0800bc71 	.word	0x0800bc71
 800bca0:	0800bc71 	.word	0x0800bc71
 800bca4:	0800bdc5 	.word	0x0800bdc5
 800bca8:	0800bc71 	.word	0x0800bc71
 800bcac:	0800bc71 	.word	0x0800bc71
 800bcb0:	0800bc71 	.word	0x0800bc71
 800bcb4:	0800bc71 	.word	0x0800bc71
 800bcb8:	0800bc71 	.word	0x0800bc71
 800bcbc:	0800bc71 	.word	0x0800bc71
 800bcc0:	0800bc71 	.word	0x0800bc71
 800bcc4:	0800bddb 	.word	0x0800bddb
 800bcc8:	0800bdc1 	.word	0x0800bdc1
 800bccc:	0800bd23 	.word	0x0800bd23
 800bcd0:	0800bd23 	.word	0x0800bd23
 800bcd4:	0800bd23 	.word	0x0800bd23
 800bcd8:	0800bc71 	.word	0x0800bc71
 800bcdc:	0800bd7d 	.word	0x0800bd7d
 800bce0:	0800bc71 	.word	0x0800bc71
 800bce4:	0800bc71 	.word	0x0800bc71
 800bce8:	0800bc71 	.word	0x0800bc71
 800bcec:	0800bc71 	.word	0x0800bc71
 800bcf0:	0800bdeb 	.word	0x0800bdeb
 800bcf4:	0800bd85 	.word	0x0800bd85
 800bcf8:	0800bd63 	.word	0x0800bd63
 800bcfc:	0800bc71 	.word	0x0800bc71
 800bd00:	0800bc71 	.word	0x0800bc71
 800bd04:	0800bde7 	.word	0x0800bde7
 800bd08:	0800bc71 	.word	0x0800bc71
 800bd0c:	0800bdc1 	.word	0x0800bdc1
 800bd10:	0800bc71 	.word	0x0800bc71
 800bd14:	0800bc71 	.word	0x0800bc71
 800bd18:	0800bd6b 	.word	0x0800bd6b
 800bd1c:	3b45      	subs	r3, #69	@ 0x45
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d8a6      	bhi.n	800bc70 <__ssvfiscanf_r+0xd0>
 800bd22:	2305      	movs	r3, #5
 800bd24:	e031      	b.n	800bd8a <__ssvfiscanf_r+0x1ea>
 800bd26:	6863      	ldr	r3, [r4, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	dd0d      	ble.n	800bd48 <__ssvfiscanf_r+0x1a8>
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	781a      	ldrb	r2, [r3, #0]
 800bd30:	454a      	cmp	r2, r9
 800bd32:	f040 80a6 	bne.w	800be82 <__ssvfiscanf_r+0x2e2>
 800bd36:	3301      	adds	r3, #1
 800bd38:	6862      	ldr	r2, [r4, #4]
 800bd3a:	6023      	str	r3, [r4, #0]
 800bd3c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bd3e:	3a01      	subs	r2, #1
 800bd40:	3301      	adds	r3, #1
 800bd42:	6062      	str	r2, [r4, #4]
 800bd44:	9345      	str	r3, [sp, #276]	@ 0x114
 800bd46:	e753      	b.n	800bbf0 <__ssvfiscanf_r+0x50>
 800bd48:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	4798      	blx	r3
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d0eb      	beq.n	800bd2c <__ssvfiscanf_r+0x18c>
 800bd54:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bd56:	2800      	cmp	r0, #0
 800bd58:	f040 808b 	bne.w	800be72 <__ssvfiscanf_r+0x2d2>
 800bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd60:	e08b      	b.n	800be7a <__ssvfiscanf_r+0x2da>
 800bd62:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bd64:	f042 0220 	orr.w	r2, r2, #32
 800bd68:	9241      	str	r2, [sp, #260]	@ 0x104
 800bd6a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bd6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd70:	9241      	str	r2, [sp, #260]	@ 0x104
 800bd72:	2210      	movs	r2, #16
 800bd74:	2b6e      	cmp	r3, #110	@ 0x6e
 800bd76:	9242      	str	r2, [sp, #264]	@ 0x108
 800bd78:	d902      	bls.n	800bd80 <__ssvfiscanf_r+0x1e0>
 800bd7a:	e005      	b.n	800bd88 <__ssvfiscanf_r+0x1e8>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9342      	str	r3, [sp, #264]	@ 0x108
 800bd80:	2303      	movs	r3, #3
 800bd82:	e002      	b.n	800bd8a <__ssvfiscanf_r+0x1ea>
 800bd84:	2308      	movs	r3, #8
 800bd86:	9342      	str	r3, [sp, #264]	@ 0x108
 800bd88:	2304      	movs	r3, #4
 800bd8a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bd8c:	6863      	ldr	r3, [r4, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dd39      	ble.n	800be06 <__ssvfiscanf_r+0x266>
 800bd92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bd94:	0659      	lsls	r1, r3, #25
 800bd96:	d404      	bmi.n	800bda2 <__ssvfiscanf_r+0x202>
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	781a      	ldrb	r2, [r3, #0]
 800bd9c:	5cba      	ldrb	r2, [r7, r2]
 800bd9e:	0712      	lsls	r2, r2, #28
 800bda0:	d438      	bmi.n	800be14 <__ssvfiscanf_r+0x274>
 800bda2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	dc47      	bgt.n	800be38 <__ssvfiscanf_r+0x298>
 800bda8:	466b      	mov	r3, sp
 800bdaa:	4622      	mov	r2, r4
 800bdac:	a941      	add	r1, sp, #260	@ 0x104
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f000 fb3a 	bl	800c428 <_scanf_chars>
 800bdb4:	2801      	cmp	r0, #1
 800bdb6:	d064      	beq.n	800be82 <__ssvfiscanf_r+0x2e2>
 800bdb8:	2802      	cmp	r0, #2
 800bdba:	f47f af19 	bne.w	800bbf0 <__ssvfiscanf_r+0x50>
 800bdbe:	e7c9      	b.n	800bd54 <__ssvfiscanf_r+0x1b4>
 800bdc0:	220a      	movs	r2, #10
 800bdc2:	e7d7      	b.n	800bd74 <__ssvfiscanf_r+0x1d4>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	f000 fd8a 	bl	800c8e0 <__sccl>
 800bdcc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bdce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdd2:	9341      	str	r3, [sp, #260]	@ 0x104
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e7d7      	b.n	800bd8a <__ssvfiscanf_r+0x1ea>
 800bdda:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bde0:	9341      	str	r3, [sp, #260]	@ 0x104
 800bde2:	2300      	movs	r3, #0
 800bde4:	e7d1      	b.n	800bd8a <__ssvfiscanf_r+0x1ea>
 800bde6:	2302      	movs	r3, #2
 800bde8:	e7cf      	b.n	800bd8a <__ssvfiscanf_r+0x1ea>
 800bdea:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800bdec:	06c3      	lsls	r3, r0, #27
 800bdee:	f53f aeff 	bmi.w	800bbf0 <__ssvfiscanf_r+0x50>
 800bdf2:	9b00      	ldr	r3, [sp, #0]
 800bdf4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bdf6:	1d19      	adds	r1, r3, #4
 800bdf8:	9100      	str	r1, [sp, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	07c0      	lsls	r0, r0, #31
 800bdfe:	bf4c      	ite	mi
 800be00:	801a      	strhmi	r2, [r3, #0]
 800be02:	601a      	strpl	r2, [r3, #0]
 800be04:	e6f4      	b.n	800bbf0 <__ssvfiscanf_r+0x50>
 800be06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be08:	4621      	mov	r1, r4
 800be0a:	4630      	mov	r0, r6
 800be0c:	4798      	blx	r3
 800be0e:	2800      	cmp	r0, #0
 800be10:	d0bf      	beq.n	800bd92 <__ssvfiscanf_r+0x1f2>
 800be12:	e79f      	b.n	800bd54 <__ssvfiscanf_r+0x1b4>
 800be14:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be16:	3201      	adds	r2, #1
 800be18:	9245      	str	r2, [sp, #276]	@ 0x114
 800be1a:	6862      	ldr	r2, [r4, #4]
 800be1c:	3a01      	subs	r2, #1
 800be1e:	2a00      	cmp	r2, #0
 800be20:	6062      	str	r2, [r4, #4]
 800be22:	dd02      	ble.n	800be2a <__ssvfiscanf_r+0x28a>
 800be24:	3301      	adds	r3, #1
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	e7b6      	b.n	800bd98 <__ssvfiscanf_r+0x1f8>
 800be2a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be2c:	4621      	mov	r1, r4
 800be2e:	4630      	mov	r0, r6
 800be30:	4798      	blx	r3
 800be32:	2800      	cmp	r0, #0
 800be34:	d0b0      	beq.n	800bd98 <__ssvfiscanf_r+0x1f8>
 800be36:	e78d      	b.n	800bd54 <__ssvfiscanf_r+0x1b4>
 800be38:	2b04      	cmp	r3, #4
 800be3a:	dc0f      	bgt.n	800be5c <__ssvfiscanf_r+0x2bc>
 800be3c:	466b      	mov	r3, sp
 800be3e:	4622      	mov	r2, r4
 800be40:	a941      	add	r1, sp, #260	@ 0x104
 800be42:	4630      	mov	r0, r6
 800be44:	f000 fb4a 	bl	800c4dc <_scanf_i>
 800be48:	e7b4      	b.n	800bdb4 <__ssvfiscanf_r+0x214>
 800be4a:	bf00      	nop
 800be4c:	0800baed 	.word	0x0800baed
 800be50:	0800bb67 	.word	0x0800bb67
 800be54:	0800e159 	.word	0x0800e159
 800be58:	0800e07e 	.word	0x0800e07e
 800be5c:	4b0a      	ldr	r3, [pc, #40]	@ (800be88 <__ssvfiscanf_r+0x2e8>)
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f43f aec6 	beq.w	800bbf0 <__ssvfiscanf_r+0x50>
 800be64:	466b      	mov	r3, sp
 800be66:	4622      	mov	r2, r4
 800be68:	a941      	add	r1, sp, #260	@ 0x104
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7fd ffcc 	bl	8009e08 <_scanf_float>
 800be70:	e7a0      	b.n	800bdb4 <__ssvfiscanf_r+0x214>
 800be72:	89a3      	ldrh	r3, [r4, #12]
 800be74:	065b      	lsls	r3, r3, #25
 800be76:	f53f af71 	bmi.w	800bd5c <__ssvfiscanf_r+0x1bc>
 800be7a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800be7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be82:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800be84:	e7f9      	b.n	800be7a <__ssvfiscanf_r+0x2da>
 800be86:	bf00      	nop
 800be88:	08009e09 	.word	0x08009e09

0800be8c <__sfputc_r>:
 800be8c:	6893      	ldr	r3, [r2, #8]
 800be8e:	3b01      	subs	r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	b410      	push	{r4}
 800be94:	6093      	str	r3, [r2, #8]
 800be96:	da08      	bge.n	800beaa <__sfputc_r+0x1e>
 800be98:	6994      	ldr	r4, [r2, #24]
 800be9a:	42a3      	cmp	r3, r4
 800be9c:	db01      	blt.n	800bea2 <__sfputc_r+0x16>
 800be9e:	290a      	cmp	r1, #10
 800bea0:	d103      	bne.n	800beaa <__sfputc_r+0x1e>
 800bea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bea6:	f7fe bb12 	b.w	800a4ce <__swbuf_r>
 800beaa:	6813      	ldr	r3, [r2, #0]
 800beac:	1c58      	adds	r0, r3, #1
 800beae:	6010      	str	r0, [r2, #0]
 800beb0:	7019      	strb	r1, [r3, #0]
 800beb2:	4608      	mov	r0, r1
 800beb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <__sfputs_r>:
 800beba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebc:	4606      	mov	r6, r0
 800bebe:	460f      	mov	r7, r1
 800bec0:	4614      	mov	r4, r2
 800bec2:	18d5      	adds	r5, r2, r3
 800bec4:	42ac      	cmp	r4, r5
 800bec6:	d101      	bne.n	800becc <__sfputs_r+0x12>
 800bec8:	2000      	movs	r0, #0
 800beca:	e007      	b.n	800bedc <__sfputs_r+0x22>
 800becc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed0:	463a      	mov	r2, r7
 800bed2:	4630      	mov	r0, r6
 800bed4:	f7ff ffda 	bl	800be8c <__sfputc_r>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d1f3      	bne.n	800bec4 <__sfputs_r+0xa>
 800bedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bee0 <_vfiprintf_r>:
 800bee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee4:	460d      	mov	r5, r1
 800bee6:	b09d      	sub	sp, #116	@ 0x74
 800bee8:	4614      	mov	r4, r2
 800beea:	4698      	mov	r8, r3
 800beec:	4606      	mov	r6, r0
 800beee:	b118      	cbz	r0, 800bef8 <_vfiprintf_r+0x18>
 800bef0:	6a03      	ldr	r3, [r0, #32]
 800bef2:	b90b      	cbnz	r3, 800bef8 <_vfiprintf_r+0x18>
 800bef4:	f7fe fa22 	bl	800a33c <__sinit>
 800bef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800befa:	07d9      	lsls	r1, r3, #31
 800befc:	d405      	bmi.n	800bf0a <_vfiprintf_r+0x2a>
 800befe:	89ab      	ldrh	r3, [r5, #12]
 800bf00:	059a      	lsls	r2, r3, #22
 800bf02:	d402      	bmi.n	800bf0a <_vfiprintf_r+0x2a>
 800bf04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf06:	f7fe fc26 	bl	800a756 <__retarget_lock_acquire_recursive>
 800bf0a:	89ab      	ldrh	r3, [r5, #12]
 800bf0c:	071b      	lsls	r3, r3, #28
 800bf0e:	d501      	bpl.n	800bf14 <_vfiprintf_r+0x34>
 800bf10:	692b      	ldr	r3, [r5, #16]
 800bf12:	b99b      	cbnz	r3, 800bf3c <_vfiprintf_r+0x5c>
 800bf14:	4629      	mov	r1, r5
 800bf16:	4630      	mov	r0, r6
 800bf18:	f7fe fb18 	bl	800a54c <__swsetup_r>
 800bf1c:	b170      	cbz	r0, 800bf3c <_vfiprintf_r+0x5c>
 800bf1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf20:	07dc      	lsls	r4, r3, #31
 800bf22:	d504      	bpl.n	800bf2e <_vfiprintf_r+0x4e>
 800bf24:	f04f 30ff 	mov.w	r0, #4294967295
 800bf28:	b01d      	add	sp, #116	@ 0x74
 800bf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2e:	89ab      	ldrh	r3, [r5, #12]
 800bf30:	0598      	lsls	r0, r3, #22
 800bf32:	d4f7      	bmi.n	800bf24 <_vfiprintf_r+0x44>
 800bf34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf36:	f7fe fc0f 	bl	800a758 <__retarget_lock_release_recursive>
 800bf3a:	e7f3      	b.n	800bf24 <_vfiprintf_r+0x44>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf40:	2320      	movs	r3, #32
 800bf42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf46:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf4a:	2330      	movs	r3, #48	@ 0x30
 800bf4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c0fc <_vfiprintf_r+0x21c>
 800bf50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf54:	f04f 0901 	mov.w	r9, #1
 800bf58:	4623      	mov	r3, r4
 800bf5a:	469a      	mov	sl, r3
 800bf5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf60:	b10a      	cbz	r2, 800bf66 <_vfiprintf_r+0x86>
 800bf62:	2a25      	cmp	r2, #37	@ 0x25
 800bf64:	d1f9      	bne.n	800bf5a <_vfiprintf_r+0x7a>
 800bf66:	ebba 0b04 	subs.w	fp, sl, r4
 800bf6a:	d00b      	beq.n	800bf84 <_vfiprintf_r+0xa4>
 800bf6c:	465b      	mov	r3, fp
 800bf6e:	4622      	mov	r2, r4
 800bf70:	4629      	mov	r1, r5
 800bf72:	4630      	mov	r0, r6
 800bf74:	f7ff ffa1 	bl	800beba <__sfputs_r>
 800bf78:	3001      	adds	r0, #1
 800bf7a:	f000 80a7 	beq.w	800c0cc <_vfiprintf_r+0x1ec>
 800bf7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf80:	445a      	add	r2, fp
 800bf82:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf84:	f89a 3000 	ldrb.w	r3, [sl]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 809f 	beq.w	800c0cc <_vfiprintf_r+0x1ec>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f04f 32ff 	mov.w	r2, #4294967295
 800bf94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf98:	f10a 0a01 	add.w	sl, sl, #1
 800bf9c:	9304      	str	r3, [sp, #16]
 800bf9e:	9307      	str	r3, [sp, #28]
 800bfa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfa4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfa6:	4654      	mov	r4, sl
 800bfa8:	2205      	movs	r2, #5
 800bfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfae:	4853      	ldr	r0, [pc, #332]	@ (800c0fc <_vfiprintf_r+0x21c>)
 800bfb0:	f7f4 f916 	bl	80001e0 <memchr>
 800bfb4:	9a04      	ldr	r2, [sp, #16]
 800bfb6:	b9d8      	cbnz	r0, 800bff0 <_vfiprintf_r+0x110>
 800bfb8:	06d1      	lsls	r1, r2, #27
 800bfba:	bf44      	itt	mi
 800bfbc:	2320      	movmi	r3, #32
 800bfbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfc2:	0713      	lsls	r3, r2, #28
 800bfc4:	bf44      	itt	mi
 800bfc6:	232b      	movmi	r3, #43	@ 0x2b
 800bfc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfcc:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfd2:	d015      	beq.n	800c000 <_vfiprintf_r+0x120>
 800bfd4:	9a07      	ldr	r2, [sp, #28]
 800bfd6:	4654      	mov	r4, sl
 800bfd8:	2000      	movs	r0, #0
 800bfda:	f04f 0c0a 	mov.w	ip, #10
 800bfde:	4621      	mov	r1, r4
 800bfe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfe4:	3b30      	subs	r3, #48	@ 0x30
 800bfe6:	2b09      	cmp	r3, #9
 800bfe8:	d94b      	bls.n	800c082 <_vfiprintf_r+0x1a2>
 800bfea:	b1b0      	cbz	r0, 800c01a <_vfiprintf_r+0x13a>
 800bfec:	9207      	str	r2, [sp, #28]
 800bfee:	e014      	b.n	800c01a <_vfiprintf_r+0x13a>
 800bff0:	eba0 0308 	sub.w	r3, r0, r8
 800bff4:	fa09 f303 	lsl.w	r3, r9, r3
 800bff8:	4313      	orrs	r3, r2
 800bffa:	9304      	str	r3, [sp, #16]
 800bffc:	46a2      	mov	sl, r4
 800bffe:	e7d2      	b.n	800bfa6 <_vfiprintf_r+0xc6>
 800c000:	9b03      	ldr	r3, [sp, #12]
 800c002:	1d19      	adds	r1, r3, #4
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	9103      	str	r1, [sp, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	bfbb      	ittet	lt
 800c00c:	425b      	neglt	r3, r3
 800c00e:	f042 0202 	orrlt.w	r2, r2, #2
 800c012:	9307      	strge	r3, [sp, #28]
 800c014:	9307      	strlt	r3, [sp, #28]
 800c016:	bfb8      	it	lt
 800c018:	9204      	strlt	r2, [sp, #16]
 800c01a:	7823      	ldrb	r3, [r4, #0]
 800c01c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c01e:	d10a      	bne.n	800c036 <_vfiprintf_r+0x156>
 800c020:	7863      	ldrb	r3, [r4, #1]
 800c022:	2b2a      	cmp	r3, #42	@ 0x2a
 800c024:	d132      	bne.n	800c08c <_vfiprintf_r+0x1ac>
 800c026:	9b03      	ldr	r3, [sp, #12]
 800c028:	1d1a      	adds	r2, r3, #4
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	9203      	str	r2, [sp, #12]
 800c02e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c032:	3402      	adds	r4, #2
 800c034:	9305      	str	r3, [sp, #20]
 800c036:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c10c <_vfiprintf_r+0x22c>
 800c03a:	7821      	ldrb	r1, [r4, #0]
 800c03c:	2203      	movs	r2, #3
 800c03e:	4650      	mov	r0, sl
 800c040:	f7f4 f8ce 	bl	80001e0 <memchr>
 800c044:	b138      	cbz	r0, 800c056 <_vfiprintf_r+0x176>
 800c046:	9b04      	ldr	r3, [sp, #16]
 800c048:	eba0 000a 	sub.w	r0, r0, sl
 800c04c:	2240      	movs	r2, #64	@ 0x40
 800c04e:	4082      	lsls	r2, r0
 800c050:	4313      	orrs	r3, r2
 800c052:	3401      	adds	r4, #1
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c05a:	4829      	ldr	r0, [pc, #164]	@ (800c100 <_vfiprintf_r+0x220>)
 800c05c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c060:	2206      	movs	r2, #6
 800c062:	f7f4 f8bd 	bl	80001e0 <memchr>
 800c066:	2800      	cmp	r0, #0
 800c068:	d03f      	beq.n	800c0ea <_vfiprintf_r+0x20a>
 800c06a:	4b26      	ldr	r3, [pc, #152]	@ (800c104 <_vfiprintf_r+0x224>)
 800c06c:	bb1b      	cbnz	r3, 800c0b6 <_vfiprintf_r+0x1d6>
 800c06e:	9b03      	ldr	r3, [sp, #12]
 800c070:	3307      	adds	r3, #7
 800c072:	f023 0307 	bic.w	r3, r3, #7
 800c076:	3308      	adds	r3, #8
 800c078:	9303      	str	r3, [sp, #12]
 800c07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c07c:	443b      	add	r3, r7
 800c07e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c080:	e76a      	b.n	800bf58 <_vfiprintf_r+0x78>
 800c082:	fb0c 3202 	mla	r2, ip, r2, r3
 800c086:	460c      	mov	r4, r1
 800c088:	2001      	movs	r0, #1
 800c08a:	e7a8      	b.n	800bfde <_vfiprintf_r+0xfe>
 800c08c:	2300      	movs	r3, #0
 800c08e:	3401      	adds	r4, #1
 800c090:	9305      	str	r3, [sp, #20]
 800c092:	4619      	mov	r1, r3
 800c094:	f04f 0c0a 	mov.w	ip, #10
 800c098:	4620      	mov	r0, r4
 800c09a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c09e:	3a30      	subs	r2, #48	@ 0x30
 800c0a0:	2a09      	cmp	r2, #9
 800c0a2:	d903      	bls.n	800c0ac <_vfiprintf_r+0x1cc>
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d0c6      	beq.n	800c036 <_vfiprintf_r+0x156>
 800c0a8:	9105      	str	r1, [sp, #20]
 800c0aa:	e7c4      	b.n	800c036 <_vfiprintf_r+0x156>
 800c0ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e7f0      	b.n	800c098 <_vfiprintf_r+0x1b8>
 800c0b6:	ab03      	add	r3, sp, #12
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	462a      	mov	r2, r5
 800c0bc:	4b12      	ldr	r3, [pc, #72]	@ (800c108 <_vfiprintf_r+0x228>)
 800c0be:	a904      	add	r1, sp, #16
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f3af 8000 	nop.w
 800c0c6:	4607      	mov	r7, r0
 800c0c8:	1c78      	adds	r0, r7, #1
 800c0ca:	d1d6      	bne.n	800c07a <_vfiprintf_r+0x19a>
 800c0cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0ce:	07d9      	lsls	r1, r3, #31
 800c0d0:	d405      	bmi.n	800c0de <_vfiprintf_r+0x1fe>
 800c0d2:	89ab      	ldrh	r3, [r5, #12]
 800c0d4:	059a      	lsls	r2, r3, #22
 800c0d6:	d402      	bmi.n	800c0de <_vfiprintf_r+0x1fe>
 800c0d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0da:	f7fe fb3d 	bl	800a758 <__retarget_lock_release_recursive>
 800c0de:	89ab      	ldrh	r3, [r5, #12]
 800c0e0:	065b      	lsls	r3, r3, #25
 800c0e2:	f53f af1f 	bmi.w	800bf24 <_vfiprintf_r+0x44>
 800c0e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0e8:	e71e      	b.n	800bf28 <_vfiprintf_r+0x48>
 800c0ea:	ab03      	add	r3, sp, #12
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	462a      	mov	r2, r5
 800c0f0:	4b05      	ldr	r3, [pc, #20]	@ (800c108 <_vfiprintf_r+0x228>)
 800c0f2:	a904      	add	r1, sp, #16
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f000 f879 	bl	800c1ec <_printf_i>
 800c0fa:	e7e4      	b.n	800c0c6 <_vfiprintf_r+0x1e6>
 800c0fc:	0800e078 	.word	0x0800e078
 800c100:	0800e082 	.word	0x0800e082
 800c104:	00000000 	.word	0x00000000
 800c108:	0800bebb 	.word	0x0800bebb
 800c10c:	0800e07e 	.word	0x0800e07e

0800c110 <_printf_common>:
 800c110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	4616      	mov	r6, r2
 800c116:	4698      	mov	r8, r3
 800c118:	688a      	ldr	r2, [r1, #8]
 800c11a:	690b      	ldr	r3, [r1, #16]
 800c11c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c120:	4293      	cmp	r3, r2
 800c122:	bfb8      	it	lt
 800c124:	4613      	movlt	r3, r2
 800c126:	6033      	str	r3, [r6, #0]
 800c128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c12c:	4607      	mov	r7, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	b10a      	cbz	r2, 800c136 <_printf_common+0x26>
 800c132:	3301      	adds	r3, #1
 800c134:	6033      	str	r3, [r6, #0]
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	0699      	lsls	r1, r3, #26
 800c13a:	bf42      	ittt	mi
 800c13c:	6833      	ldrmi	r3, [r6, #0]
 800c13e:	3302      	addmi	r3, #2
 800c140:	6033      	strmi	r3, [r6, #0]
 800c142:	6825      	ldr	r5, [r4, #0]
 800c144:	f015 0506 	ands.w	r5, r5, #6
 800c148:	d106      	bne.n	800c158 <_printf_common+0x48>
 800c14a:	f104 0a19 	add.w	sl, r4, #25
 800c14e:	68e3      	ldr	r3, [r4, #12]
 800c150:	6832      	ldr	r2, [r6, #0]
 800c152:	1a9b      	subs	r3, r3, r2
 800c154:	42ab      	cmp	r3, r5
 800c156:	dc26      	bgt.n	800c1a6 <_printf_common+0x96>
 800c158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c15c:	6822      	ldr	r2, [r4, #0]
 800c15e:	3b00      	subs	r3, #0
 800c160:	bf18      	it	ne
 800c162:	2301      	movne	r3, #1
 800c164:	0692      	lsls	r2, r2, #26
 800c166:	d42b      	bmi.n	800c1c0 <_printf_common+0xb0>
 800c168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c16c:	4641      	mov	r1, r8
 800c16e:	4638      	mov	r0, r7
 800c170:	47c8      	blx	r9
 800c172:	3001      	adds	r0, #1
 800c174:	d01e      	beq.n	800c1b4 <_printf_common+0xa4>
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	6922      	ldr	r2, [r4, #16]
 800c17a:	f003 0306 	and.w	r3, r3, #6
 800c17e:	2b04      	cmp	r3, #4
 800c180:	bf02      	ittt	eq
 800c182:	68e5      	ldreq	r5, [r4, #12]
 800c184:	6833      	ldreq	r3, [r6, #0]
 800c186:	1aed      	subeq	r5, r5, r3
 800c188:	68a3      	ldr	r3, [r4, #8]
 800c18a:	bf0c      	ite	eq
 800c18c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c190:	2500      	movne	r5, #0
 800c192:	4293      	cmp	r3, r2
 800c194:	bfc4      	itt	gt
 800c196:	1a9b      	subgt	r3, r3, r2
 800c198:	18ed      	addgt	r5, r5, r3
 800c19a:	2600      	movs	r6, #0
 800c19c:	341a      	adds	r4, #26
 800c19e:	42b5      	cmp	r5, r6
 800c1a0:	d11a      	bne.n	800c1d8 <_printf_common+0xc8>
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	e008      	b.n	800c1b8 <_printf_common+0xa8>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	4652      	mov	r2, sl
 800c1aa:	4641      	mov	r1, r8
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	47c8      	blx	r9
 800c1b0:	3001      	adds	r0, #1
 800c1b2:	d103      	bne.n	800c1bc <_printf_common+0xac>
 800c1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1bc:	3501      	adds	r5, #1
 800c1be:	e7c6      	b.n	800c14e <_printf_common+0x3e>
 800c1c0:	18e1      	adds	r1, r4, r3
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	2030      	movs	r0, #48	@ 0x30
 800c1c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1ca:	4422      	add	r2, r4
 800c1cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c1d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c1d4:	3302      	adds	r3, #2
 800c1d6:	e7c7      	b.n	800c168 <_printf_common+0x58>
 800c1d8:	2301      	movs	r3, #1
 800c1da:	4622      	mov	r2, r4
 800c1dc:	4641      	mov	r1, r8
 800c1de:	4638      	mov	r0, r7
 800c1e0:	47c8      	blx	r9
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d0e6      	beq.n	800c1b4 <_printf_common+0xa4>
 800c1e6:	3601      	adds	r6, #1
 800c1e8:	e7d9      	b.n	800c19e <_printf_common+0x8e>
	...

0800c1ec <_printf_i>:
 800c1ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f0:	7e0f      	ldrb	r7, [r1, #24]
 800c1f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1f4:	2f78      	cmp	r7, #120	@ 0x78
 800c1f6:	4691      	mov	r9, r2
 800c1f8:	4680      	mov	r8, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	469a      	mov	sl, r3
 800c1fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c202:	d807      	bhi.n	800c214 <_printf_i+0x28>
 800c204:	2f62      	cmp	r7, #98	@ 0x62
 800c206:	d80a      	bhi.n	800c21e <_printf_i+0x32>
 800c208:	2f00      	cmp	r7, #0
 800c20a:	f000 80d1 	beq.w	800c3b0 <_printf_i+0x1c4>
 800c20e:	2f58      	cmp	r7, #88	@ 0x58
 800c210:	f000 80b8 	beq.w	800c384 <_printf_i+0x198>
 800c214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c218:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c21c:	e03a      	b.n	800c294 <_printf_i+0xa8>
 800c21e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c222:	2b15      	cmp	r3, #21
 800c224:	d8f6      	bhi.n	800c214 <_printf_i+0x28>
 800c226:	a101      	add	r1, pc, #4	@ (adr r1, 800c22c <_printf_i+0x40>)
 800c228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c22c:	0800c285 	.word	0x0800c285
 800c230:	0800c299 	.word	0x0800c299
 800c234:	0800c215 	.word	0x0800c215
 800c238:	0800c215 	.word	0x0800c215
 800c23c:	0800c215 	.word	0x0800c215
 800c240:	0800c215 	.word	0x0800c215
 800c244:	0800c299 	.word	0x0800c299
 800c248:	0800c215 	.word	0x0800c215
 800c24c:	0800c215 	.word	0x0800c215
 800c250:	0800c215 	.word	0x0800c215
 800c254:	0800c215 	.word	0x0800c215
 800c258:	0800c397 	.word	0x0800c397
 800c25c:	0800c2c3 	.word	0x0800c2c3
 800c260:	0800c351 	.word	0x0800c351
 800c264:	0800c215 	.word	0x0800c215
 800c268:	0800c215 	.word	0x0800c215
 800c26c:	0800c3b9 	.word	0x0800c3b9
 800c270:	0800c215 	.word	0x0800c215
 800c274:	0800c2c3 	.word	0x0800c2c3
 800c278:	0800c215 	.word	0x0800c215
 800c27c:	0800c215 	.word	0x0800c215
 800c280:	0800c359 	.word	0x0800c359
 800c284:	6833      	ldr	r3, [r6, #0]
 800c286:	1d1a      	adds	r2, r3, #4
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6032      	str	r2, [r6, #0]
 800c28c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c294:	2301      	movs	r3, #1
 800c296:	e09c      	b.n	800c3d2 <_printf_i+0x1e6>
 800c298:	6833      	ldr	r3, [r6, #0]
 800c29a:	6820      	ldr	r0, [r4, #0]
 800c29c:	1d19      	adds	r1, r3, #4
 800c29e:	6031      	str	r1, [r6, #0]
 800c2a0:	0606      	lsls	r6, r0, #24
 800c2a2:	d501      	bpl.n	800c2a8 <_printf_i+0xbc>
 800c2a4:	681d      	ldr	r5, [r3, #0]
 800c2a6:	e003      	b.n	800c2b0 <_printf_i+0xc4>
 800c2a8:	0645      	lsls	r5, r0, #25
 800c2aa:	d5fb      	bpl.n	800c2a4 <_printf_i+0xb8>
 800c2ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c2b0:	2d00      	cmp	r5, #0
 800c2b2:	da03      	bge.n	800c2bc <_printf_i+0xd0>
 800c2b4:	232d      	movs	r3, #45	@ 0x2d
 800c2b6:	426d      	negs	r5, r5
 800c2b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2bc:	4858      	ldr	r0, [pc, #352]	@ (800c420 <_printf_i+0x234>)
 800c2be:	230a      	movs	r3, #10
 800c2c0:	e011      	b.n	800c2e6 <_printf_i+0xfa>
 800c2c2:	6821      	ldr	r1, [r4, #0]
 800c2c4:	6833      	ldr	r3, [r6, #0]
 800c2c6:	0608      	lsls	r0, r1, #24
 800c2c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2cc:	d402      	bmi.n	800c2d4 <_printf_i+0xe8>
 800c2ce:	0649      	lsls	r1, r1, #25
 800c2d0:	bf48      	it	mi
 800c2d2:	b2ad      	uxthmi	r5, r5
 800c2d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c2d6:	4852      	ldr	r0, [pc, #328]	@ (800c420 <_printf_i+0x234>)
 800c2d8:	6033      	str	r3, [r6, #0]
 800c2da:	bf14      	ite	ne
 800c2dc:	230a      	movne	r3, #10
 800c2de:	2308      	moveq	r3, #8
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c2e6:	6866      	ldr	r6, [r4, #4]
 800c2e8:	60a6      	str	r6, [r4, #8]
 800c2ea:	2e00      	cmp	r6, #0
 800c2ec:	db05      	blt.n	800c2fa <_printf_i+0x10e>
 800c2ee:	6821      	ldr	r1, [r4, #0]
 800c2f0:	432e      	orrs	r6, r5
 800c2f2:	f021 0104 	bic.w	r1, r1, #4
 800c2f6:	6021      	str	r1, [r4, #0]
 800c2f8:	d04b      	beq.n	800c392 <_printf_i+0x1a6>
 800c2fa:	4616      	mov	r6, r2
 800c2fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c300:	fb03 5711 	mls	r7, r3, r1, r5
 800c304:	5dc7      	ldrb	r7, [r0, r7]
 800c306:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c30a:	462f      	mov	r7, r5
 800c30c:	42bb      	cmp	r3, r7
 800c30e:	460d      	mov	r5, r1
 800c310:	d9f4      	bls.n	800c2fc <_printf_i+0x110>
 800c312:	2b08      	cmp	r3, #8
 800c314:	d10b      	bne.n	800c32e <_printf_i+0x142>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	07df      	lsls	r7, r3, #31
 800c31a:	d508      	bpl.n	800c32e <_printf_i+0x142>
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	6861      	ldr	r1, [r4, #4]
 800c320:	4299      	cmp	r1, r3
 800c322:	bfde      	ittt	le
 800c324:	2330      	movle	r3, #48	@ 0x30
 800c326:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c32a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c32e:	1b92      	subs	r2, r2, r6
 800c330:	6122      	str	r2, [r4, #16]
 800c332:	f8cd a000 	str.w	sl, [sp]
 800c336:	464b      	mov	r3, r9
 800c338:	aa03      	add	r2, sp, #12
 800c33a:	4621      	mov	r1, r4
 800c33c:	4640      	mov	r0, r8
 800c33e:	f7ff fee7 	bl	800c110 <_printf_common>
 800c342:	3001      	adds	r0, #1
 800c344:	d14a      	bne.n	800c3dc <_printf_i+0x1f0>
 800c346:	f04f 30ff 	mov.w	r0, #4294967295
 800c34a:	b004      	add	sp, #16
 800c34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	f043 0320 	orr.w	r3, r3, #32
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	4832      	ldr	r0, [pc, #200]	@ (800c424 <_printf_i+0x238>)
 800c35a:	2778      	movs	r7, #120	@ 0x78
 800c35c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c360:	6823      	ldr	r3, [r4, #0]
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	061f      	lsls	r7, r3, #24
 800c366:	f851 5b04 	ldr.w	r5, [r1], #4
 800c36a:	d402      	bmi.n	800c372 <_printf_i+0x186>
 800c36c:	065f      	lsls	r7, r3, #25
 800c36e:	bf48      	it	mi
 800c370:	b2ad      	uxthmi	r5, r5
 800c372:	6031      	str	r1, [r6, #0]
 800c374:	07d9      	lsls	r1, r3, #31
 800c376:	bf44      	itt	mi
 800c378:	f043 0320 	orrmi.w	r3, r3, #32
 800c37c:	6023      	strmi	r3, [r4, #0]
 800c37e:	b11d      	cbz	r5, 800c388 <_printf_i+0x19c>
 800c380:	2310      	movs	r3, #16
 800c382:	e7ad      	b.n	800c2e0 <_printf_i+0xf4>
 800c384:	4826      	ldr	r0, [pc, #152]	@ (800c420 <_printf_i+0x234>)
 800c386:	e7e9      	b.n	800c35c <_printf_i+0x170>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	f023 0320 	bic.w	r3, r3, #32
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	e7f6      	b.n	800c380 <_printf_i+0x194>
 800c392:	4616      	mov	r6, r2
 800c394:	e7bd      	b.n	800c312 <_printf_i+0x126>
 800c396:	6833      	ldr	r3, [r6, #0]
 800c398:	6825      	ldr	r5, [r4, #0]
 800c39a:	6961      	ldr	r1, [r4, #20]
 800c39c:	1d18      	adds	r0, r3, #4
 800c39e:	6030      	str	r0, [r6, #0]
 800c3a0:	062e      	lsls	r6, r5, #24
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	d501      	bpl.n	800c3aa <_printf_i+0x1be>
 800c3a6:	6019      	str	r1, [r3, #0]
 800c3a8:	e002      	b.n	800c3b0 <_printf_i+0x1c4>
 800c3aa:	0668      	lsls	r0, r5, #25
 800c3ac:	d5fb      	bpl.n	800c3a6 <_printf_i+0x1ba>
 800c3ae:	8019      	strh	r1, [r3, #0]
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	6123      	str	r3, [r4, #16]
 800c3b4:	4616      	mov	r6, r2
 800c3b6:	e7bc      	b.n	800c332 <_printf_i+0x146>
 800c3b8:	6833      	ldr	r3, [r6, #0]
 800c3ba:	1d1a      	adds	r2, r3, #4
 800c3bc:	6032      	str	r2, [r6, #0]
 800c3be:	681e      	ldr	r6, [r3, #0]
 800c3c0:	6862      	ldr	r2, [r4, #4]
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f7f3 ff0b 	bl	80001e0 <memchr>
 800c3ca:	b108      	cbz	r0, 800c3d0 <_printf_i+0x1e4>
 800c3cc:	1b80      	subs	r0, r0, r6
 800c3ce:	6060      	str	r0, [r4, #4]
 800c3d0:	6863      	ldr	r3, [r4, #4]
 800c3d2:	6123      	str	r3, [r4, #16]
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3da:	e7aa      	b.n	800c332 <_printf_i+0x146>
 800c3dc:	6923      	ldr	r3, [r4, #16]
 800c3de:	4632      	mov	r2, r6
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	47d0      	blx	sl
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	d0ad      	beq.n	800c346 <_printf_i+0x15a>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	079b      	lsls	r3, r3, #30
 800c3ee:	d413      	bmi.n	800c418 <_printf_i+0x22c>
 800c3f0:	68e0      	ldr	r0, [r4, #12]
 800c3f2:	9b03      	ldr	r3, [sp, #12]
 800c3f4:	4298      	cmp	r0, r3
 800c3f6:	bfb8      	it	lt
 800c3f8:	4618      	movlt	r0, r3
 800c3fa:	e7a6      	b.n	800c34a <_printf_i+0x15e>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	4632      	mov	r2, r6
 800c400:	4649      	mov	r1, r9
 800c402:	4640      	mov	r0, r8
 800c404:	47d0      	blx	sl
 800c406:	3001      	adds	r0, #1
 800c408:	d09d      	beq.n	800c346 <_printf_i+0x15a>
 800c40a:	3501      	adds	r5, #1
 800c40c:	68e3      	ldr	r3, [r4, #12]
 800c40e:	9903      	ldr	r1, [sp, #12]
 800c410:	1a5b      	subs	r3, r3, r1
 800c412:	42ab      	cmp	r3, r5
 800c414:	dcf2      	bgt.n	800c3fc <_printf_i+0x210>
 800c416:	e7eb      	b.n	800c3f0 <_printf_i+0x204>
 800c418:	2500      	movs	r5, #0
 800c41a:	f104 0619 	add.w	r6, r4, #25
 800c41e:	e7f5      	b.n	800c40c <_printf_i+0x220>
 800c420:	0800e089 	.word	0x0800e089
 800c424:	0800e09a 	.word	0x0800e09a

0800c428 <_scanf_chars>:
 800c428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c42c:	4615      	mov	r5, r2
 800c42e:	688a      	ldr	r2, [r1, #8]
 800c430:	4680      	mov	r8, r0
 800c432:	460c      	mov	r4, r1
 800c434:	b932      	cbnz	r2, 800c444 <_scanf_chars+0x1c>
 800c436:	698a      	ldr	r2, [r1, #24]
 800c438:	2a00      	cmp	r2, #0
 800c43a:	bf14      	ite	ne
 800c43c:	f04f 32ff 	movne.w	r2, #4294967295
 800c440:	2201      	moveq	r2, #1
 800c442:	608a      	str	r2, [r1, #8]
 800c444:	6822      	ldr	r2, [r4, #0]
 800c446:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c4d8 <_scanf_chars+0xb0>
 800c44a:	06d1      	lsls	r1, r2, #27
 800c44c:	bf5f      	itttt	pl
 800c44e:	681a      	ldrpl	r2, [r3, #0]
 800c450:	1d11      	addpl	r1, r2, #4
 800c452:	6019      	strpl	r1, [r3, #0]
 800c454:	6816      	ldrpl	r6, [r2, #0]
 800c456:	2700      	movs	r7, #0
 800c458:	69a0      	ldr	r0, [r4, #24]
 800c45a:	b188      	cbz	r0, 800c480 <_scanf_chars+0x58>
 800c45c:	2801      	cmp	r0, #1
 800c45e:	d107      	bne.n	800c470 <_scanf_chars+0x48>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	781a      	ldrb	r2, [r3, #0]
 800c464:	6963      	ldr	r3, [r4, #20]
 800c466:	5c9b      	ldrb	r3, [r3, r2]
 800c468:	b953      	cbnz	r3, 800c480 <_scanf_chars+0x58>
 800c46a:	2f00      	cmp	r7, #0
 800c46c:	d031      	beq.n	800c4d2 <_scanf_chars+0xaa>
 800c46e:	e022      	b.n	800c4b6 <_scanf_chars+0x8e>
 800c470:	2802      	cmp	r0, #2
 800c472:	d120      	bne.n	800c4b6 <_scanf_chars+0x8e>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c47c:	071b      	lsls	r3, r3, #28
 800c47e:	d41a      	bmi.n	800c4b6 <_scanf_chars+0x8e>
 800c480:	6823      	ldr	r3, [r4, #0]
 800c482:	06da      	lsls	r2, r3, #27
 800c484:	bf5e      	ittt	pl
 800c486:	682b      	ldrpl	r3, [r5, #0]
 800c488:	781b      	ldrbpl	r3, [r3, #0]
 800c48a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c48e:	682a      	ldr	r2, [r5, #0]
 800c490:	686b      	ldr	r3, [r5, #4]
 800c492:	3201      	adds	r2, #1
 800c494:	602a      	str	r2, [r5, #0]
 800c496:	68a2      	ldr	r2, [r4, #8]
 800c498:	3b01      	subs	r3, #1
 800c49a:	3a01      	subs	r2, #1
 800c49c:	606b      	str	r3, [r5, #4]
 800c49e:	3701      	adds	r7, #1
 800c4a0:	60a2      	str	r2, [r4, #8]
 800c4a2:	b142      	cbz	r2, 800c4b6 <_scanf_chars+0x8e>
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	dcd7      	bgt.n	800c458 <_scanf_chars+0x30>
 800c4a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	4798      	blx	r3
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d0d0      	beq.n	800c458 <_scanf_chars+0x30>
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	f013 0310 	ands.w	r3, r3, #16
 800c4bc:	d105      	bne.n	800c4ca <_scanf_chars+0xa2>
 800c4be:	68e2      	ldr	r2, [r4, #12]
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	60e2      	str	r2, [r4, #12]
 800c4c4:	69a2      	ldr	r2, [r4, #24]
 800c4c6:	b102      	cbz	r2, 800c4ca <_scanf_chars+0xa2>
 800c4c8:	7033      	strb	r3, [r6, #0]
 800c4ca:	6923      	ldr	r3, [r4, #16]
 800c4cc:	443b      	add	r3, r7
 800c4ce:	6123      	str	r3, [r4, #16]
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d6:	bf00      	nop
 800c4d8:	0800e159 	.word	0x0800e159

0800c4dc <_scanf_i>:
 800c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e0:	4698      	mov	r8, r3
 800c4e2:	4b74      	ldr	r3, [pc, #464]	@ (800c6b4 <_scanf_i+0x1d8>)
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	4682      	mov	sl, r0
 800c4e8:	4616      	mov	r6, r2
 800c4ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4ee:	b087      	sub	sp, #28
 800c4f0:	ab03      	add	r3, sp, #12
 800c4f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c4f6:	4b70      	ldr	r3, [pc, #448]	@ (800c6b8 <_scanf_i+0x1dc>)
 800c4f8:	69a1      	ldr	r1, [r4, #24]
 800c4fa:	4a70      	ldr	r2, [pc, #448]	@ (800c6bc <_scanf_i+0x1e0>)
 800c4fc:	2903      	cmp	r1, #3
 800c4fe:	bf08      	it	eq
 800c500:	461a      	moveq	r2, r3
 800c502:	68a3      	ldr	r3, [r4, #8]
 800c504:	9201      	str	r2, [sp, #4]
 800c506:	1e5a      	subs	r2, r3, #1
 800c508:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c50c:	bf88      	it	hi
 800c50e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c512:	4627      	mov	r7, r4
 800c514:	bf82      	ittt	hi
 800c516:	eb03 0905 	addhi.w	r9, r3, r5
 800c51a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c51e:	60a3      	strhi	r3, [r4, #8]
 800c520:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c524:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c528:	bf98      	it	ls
 800c52a:	f04f 0900 	movls.w	r9, #0
 800c52e:	6023      	str	r3, [r4, #0]
 800c530:	463d      	mov	r5, r7
 800c532:	f04f 0b00 	mov.w	fp, #0
 800c536:	6831      	ldr	r1, [r6, #0]
 800c538:	ab03      	add	r3, sp, #12
 800c53a:	7809      	ldrb	r1, [r1, #0]
 800c53c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c540:	2202      	movs	r2, #2
 800c542:	f7f3 fe4d 	bl	80001e0 <memchr>
 800c546:	b328      	cbz	r0, 800c594 <_scanf_i+0xb8>
 800c548:	f1bb 0f01 	cmp.w	fp, #1
 800c54c:	d159      	bne.n	800c602 <_scanf_i+0x126>
 800c54e:	6862      	ldr	r2, [r4, #4]
 800c550:	b92a      	cbnz	r2, 800c55e <_scanf_i+0x82>
 800c552:	6822      	ldr	r2, [r4, #0]
 800c554:	2108      	movs	r1, #8
 800c556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c55a:	6061      	str	r1, [r4, #4]
 800c55c:	6022      	str	r2, [r4, #0]
 800c55e:	6822      	ldr	r2, [r4, #0]
 800c560:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c564:	6022      	str	r2, [r4, #0]
 800c566:	68a2      	ldr	r2, [r4, #8]
 800c568:	1e51      	subs	r1, r2, #1
 800c56a:	60a1      	str	r1, [r4, #8]
 800c56c:	b192      	cbz	r2, 800c594 <_scanf_i+0xb8>
 800c56e:	6832      	ldr	r2, [r6, #0]
 800c570:	1c51      	adds	r1, r2, #1
 800c572:	6031      	str	r1, [r6, #0]
 800c574:	7812      	ldrb	r2, [r2, #0]
 800c576:	f805 2b01 	strb.w	r2, [r5], #1
 800c57a:	6872      	ldr	r2, [r6, #4]
 800c57c:	3a01      	subs	r2, #1
 800c57e:	2a00      	cmp	r2, #0
 800c580:	6072      	str	r2, [r6, #4]
 800c582:	dc07      	bgt.n	800c594 <_scanf_i+0xb8>
 800c584:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c588:	4631      	mov	r1, r6
 800c58a:	4650      	mov	r0, sl
 800c58c:	4790      	blx	r2
 800c58e:	2800      	cmp	r0, #0
 800c590:	f040 8085 	bne.w	800c69e <_scanf_i+0x1c2>
 800c594:	f10b 0b01 	add.w	fp, fp, #1
 800c598:	f1bb 0f03 	cmp.w	fp, #3
 800c59c:	d1cb      	bne.n	800c536 <_scanf_i+0x5a>
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	b90b      	cbnz	r3, 800c5a6 <_scanf_i+0xca>
 800c5a2:	230a      	movs	r3, #10
 800c5a4:	6063      	str	r3, [r4, #4]
 800c5a6:	6863      	ldr	r3, [r4, #4]
 800c5a8:	4945      	ldr	r1, [pc, #276]	@ (800c6c0 <_scanf_i+0x1e4>)
 800c5aa:	6960      	ldr	r0, [r4, #20]
 800c5ac:	1ac9      	subs	r1, r1, r3
 800c5ae:	f000 f997 	bl	800c8e0 <__sccl>
 800c5b2:	f04f 0b00 	mov.w	fp, #0
 800c5b6:	68a3      	ldr	r3, [r4, #8]
 800c5b8:	6822      	ldr	r2, [r4, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d03d      	beq.n	800c63a <_scanf_i+0x15e>
 800c5be:	6831      	ldr	r1, [r6, #0]
 800c5c0:	6960      	ldr	r0, [r4, #20]
 800c5c2:	f891 c000 	ldrb.w	ip, [r1]
 800c5c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d035      	beq.n	800c63a <_scanf_i+0x15e>
 800c5ce:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c5d2:	d124      	bne.n	800c61e <_scanf_i+0x142>
 800c5d4:	0510      	lsls	r0, r2, #20
 800c5d6:	d522      	bpl.n	800c61e <_scanf_i+0x142>
 800c5d8:	f10b 0b01 	add.w	fp, fp, #1
 800c5dc:	f1b9 0f00 	cmp.w	r9, #0
 800c5e0:	d003      	beq.n	800c5ea <_scanf_i+0x10e>
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5e8:	60a3      	str	r3, [r4, #8]
 800c5ea:	6873      	ldr	r3, [r6, #4]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	6073      	str	r3, [r6, #4]
 800c5f2:	dd1b      	ble.n	800c62c <_scanf_i+0x150>
 800c5f4:	6833      	ldr	r3, [r6, #0]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	6033      	str	r3, [r6, #0]
 800c5fa:	68a3      	ldr	r3, [r4, #8]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	60a3      	str	r3, [r4, #8]
 800c600:	e7d9      	b.n	800c5b6 <_scanf_i+0xda>
 800c602:	f1bb 0f02 	cmp.w	fp, #2
 800c606:	d1ae      	bne.n	800c566 <_scanf_i+0x8a>
 800c608:	6822      	ldr	r2, [r4, #0]
 800c60a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c60e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c612:	d1c4      	bne.n	800c59e <_scanf_i+0xc2>
 800c614:	2110      	movs	r1, #16
 800c616:	6061      	str	r1, [r4, #4]
 800c618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c61c:	e7a2      	b.n	800c564 <_scanf_i+0x88>
 800c61e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c622:	6022      	str	r2, [r4, #0]
 800c624:	780b      	ldrb	r3, [r1, #0]
 800c626:	f805 3b01 	strb.w	r3, [r5], #1
 800c62a:	e7de      	b.n	800c5ea <_scanf_i+0x10e>
 800c62c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c630:	4631      	mov	r1, r6
 800c632:	4650      	mov	r0, sl
 800c634:	4798      	blx	r3
 800c636:	2800      	cmp	r0, #0
 800c638:	d0df      	beq.n	800c5fa <_scanf_i+0x11e>
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	05d9      	lsls	r1, r3, #23
 800c63e:	d50d      	bpl.n	800c65c <_scanf_i+0x180>
 800c640:	42bd      	cmp	r5, r7
 800c642:	d909      	bls.n	800c658 <_scanf_i+0x17c>
 800c644:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c648:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c64c:	4632      	mov	r2, r6
 800c64e:	4650      	mov	r0, sl
 800c650:	4798      	blx	r3
 800c652:	f105 39ff 	add.w	r9, r5, #4294967295
 800c656:	464d      	mov	r5, r9
 800c658:	42bd      	cmp	r5, r7
 800c65a:	d028      	beq.n	800c6ae <_scanf_i+0x1d2>
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	f012 0210 	ands.w	r2, r2, #16
 800c662:	d113      	bne.n	800c68c <_scanf_i+0x1b0>
 800c664:	702a      	strb	r2, [r5, #0]
 800c666:	6863      	ldr	r3, [r4, #4]
 800c668:	9e01      	ldr	r6, [sp, #4]
 800c66a:	4639      	mov	r1, r7
 800c66c:	4650      	mov	r0, sl
 800c66e:	47b0      	blx	r6
 800c670:	f8d8 3000 	ldr.w	r3, [r8]
 800c674:	6821      	ldr	r1, [r4, #0]
 800c676:	1d1a      	adds	r2, r3, #4
 800c678:	f8c8 2000 	str.w	r2, [r8]
 800c67c:	f011 0f20 	tst.w	r1, #32
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	d00f      	beq.n	800c6a4 <_scanf_i+0x1c8>
 800c684:	6018      	str	r0, [r3, #0]
 800c686:	68e3      	ldr	r3, [r4, #12]
 800c688:	3301      	adds	r3, #1
 800c68a:	60e3      	str	r3, [r4, #12]
 800c68c:	6923      	ldr	r3, [r4, #16]
 800c68e:	1bed      	subs	r5, r5, r7
 800c690:	445d      	add	r5, fp
 800c692:	442b      	add	r3, r5
 800c694:	6123      	str	r3, [r4, #16]
 800c696:	2000      	movs	r0, #0
 800c698:	b007      	add	sp, #28
 800c69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69e:	f04f 0b00 	mov.w	fp, #0
 800c6a2:	e7ca      	b.n	800c63a <_scanf_i+0x15e>
 800c6a4:	07ca      	lsls	r2, r1, #31
 800c6a6:	bf4c      	ite	mi
 800c6a8:	8018      	strhmi	r0, [r3, #0]
 800c6aa:	6018      	strpl	r0, [r3, #0]
 800c6ac:	e7eb      	b.n	800c686 <_scanf_i+0x1aa>
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	e7f2      	b.n	800c698 <_scanf_i+0x1bc>
 800c6b2:	bf00      	nop
 800c6b4:	0800df50 	.word	0x0800df50
 800c6b8:	08009df1 	.word	0x08009df1
 800c6bc:	0800cb81 	.word	0x0800cb81
 800c6c0:	0800e0bb 	.word	0x0800e0bb

0800c6c4 <__sflush_r>:
 800c6c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6cc:	0716      	lsls	r6, r2, #28
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	d454      	bmi.n	800c77e <__sflush_r+0xba>
 800c6d4:	684b      	ldr	r3, [r1, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	dc02      	bgt.n	800c6e0 <__sflush_r+0x1c>
 800c6da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dd48      	ble.n	800c772 <__sflush_r+0xae>
 800c6e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6e2:	2e00      	cmp	r6, #0
 800c6e4:	d045      	beq.n	800c772 <__sflush_r+0xae>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6ec:	682f      	ldr	r7, [r5, #0]
 800c6ee:	6a21      	ldr	r1, [r4, #32]
 800c6f0:	602b      	str	r3, [r5, #0]
 800c6f2:	d030      	beq.n	800c756 <__sflush_r+0x92>
 800c6f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	0759      	lsls	r1, r3, #29
 800c6fa:	d505      	bpl.n	800c708 <__sflush_r+0x44>
 800c6fc:	6863      	ldr	r3, [r4, #4]
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c702:	b10b      	cbz	r3, 800c708 <__sflush_r+0x44>
 800c704:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c706:	1ad2      	subs	r2, r2, r3
 800c708:	2300      	movs	r3, #0
 800c70a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c70c:	6a21      	ldr	r1, [r4, #32]
 800c70e:	4628      	mov	r0, r5
 800c710:	47b0      	blx	r6
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	d106      	bne.n	800c726 <__sflush_r+0x62>
 800c718:	6829      	ldr	r1, [r5, #0]
 800c71a:	291d      	cmp	r1, #29
 800c71c:	d82b      	bhi.n	800c776 <__sflush_r+0xb2>
 800c71e:	4a2a      	ldr	r2, [pc, #168]	@ (800c7c8 <__sflush_r+0x104>)
 800c720:	40ca      	lsrs	r2, r1
 800c722:	07d6      	lsls	r6, r2, #31
 800c724:	d527      	bpl.n	800c776 <__sflush_r+0xb2>
 800c726:	2200      	movs	r2, #0
 800c728:	6062      	str	r2, [r4, #4]
 800c72a:	04d9      	lsls	r1, r3, #19
 800c72c:	6922      	ldr	r2, [r4, #16]
 800c72e:	6022      	str	r2, [r4, #0]
 800c730:	d504      	bpl.n	800c73c <__sflush_r+0x78>
 800c732:	1c42      	adds	r2, r0, #1
 800c734:	d101      	bne.n	800c73a <__sflush_r+0x76>
 800c736:	682b      	ldr	r3, [r5, #0]
 800c738:	b903      	cbnz	r3, 800c73c <__sflush_r+0x78>
 800c73a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c73c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c73e:	602f      	str	r7, [r5, #0]
 800c740:	b1b9      	cbz	r1, 800c772 <__sflush_r+0xae>
 800c742:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c746:	4299      	cmp	r1, r3
 800c748:	d002      	beq.n	800c750 <__sflush_r+0x8c>
 800c74a:	4628      	mov	r0, r5
 800c74c:	f7fe f822 	bl	800a794 <_free_r>
 800c750:	2300      	movs	r3, #0
 800c752:	6363      	str	r3, [r4, #52]	@ 0x34
 800c754:	e00d      	b.n	800c772 <__sflush_r+0xae>
 800c756:	2301      	movs	r3, #1
 800c758:	4628      	mov	r0, r5
 800c75a:	47b0      	blx	r6
 800c75c:	4602      	mov	r2, r0
 800c75e:	1c50      	adds	r0, r2, #1
 800c760:	d1c9      	bne.n	800c6f6 <__sflush_r+0x32>
 800c762:	682b      	ldr	r3, [r5, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d0c6      	beq.n	800c6f6 <__sflush_r+0x32>
 800c768:	2b1d      	cmp	r3, #29
 800c76a:	d001      	beq.n	800c770 <__sflush_r+0xac>
 800c76c:	2b16      	cmp	r3, #22
 800c76e:	d11e      	bne.n	800c7ae <__sflush_r+0xea>
 800c770:	602f      	str	r7, [r5, #0]
 800c772:	2000      	movs	r0, #0
 800c774:	e022      	b.n	800c7bc <__sflush_r+0xf8>
 800c776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c77a:	b21b      	sxth	r3, r3
 800c77c:	e01b      	b.n	800c7b6 <__sflush_r+0xf2>
 800c77e:	690f      	ldr	r7, [r1, #16]
 800c780:	2f00      	cmp	r7, #0
 800c782:	d0f6      	beq.n	800c772 <__sflush_r+0xae>
 800c784:	0793      	lsls	r3, r2, #30
 800c786:	680e      	ldr	r6, [r1, #0]
 800c788:	bf08      	it	eq
 800c78a:	694b      	ldreq	r3, [r1, #20]
 800c78c:	600f      	str	r7, [r1, #0]
 800c78e:	bf18      	it	ne
 800c790:	2300      	movne	r3, #0
 800c792:	eba6 0807 	sub.w	r8, r6, r7
 800c796:	608b      	str	r3, [r1, #8]
 800c798:	f1b8 0f00 	cmp.w	r8, #0
 800c79c:	dde9      	ble.n	800c772 <__sflush_r+0xae>
 800c79e:	6a21      	ldr	r1, [r4, #32]
 800c7a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7a2:	4643      	mov	r3, r8
 800c7a4:	463a      	mov	r2, r7
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	47b0      	blx	r6
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	dc08      	bgt.n	800c7c0 <__sflush_r+0xfc>
 800c7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7b6:	81a3      	strh	r3, [r4, #12]
 800c7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c0:	4407      	add	r7, r0
 800c7c2:	eba8 0800 	sub.w	r8, r8, r0
 800c7c6:	e7e7      	b.n	800c798 <__sflush_r+0xd4>
 800c7c8:	20400001 	.word	0x20400001

0800c7cc <_fflush_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	690b      	ldr	r3, [r1, #16]
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	b913      	cbnz	r3, 800c7dc <_fflush_r+0x10>
 800c7d6:	2500      	movs	r5, #0
 800c7d8:	4628      	mov	r0, r5
 800c7da:	bd38      	pop	{r3, r4, r5, pc}
 800c7dc:	b118      	cbz	r0, 800c7e6 <_fflush_r+0x1a>
 800c7de:	6a03      	ldr	r3, [r0, #32]
 800c7e0:	b90b      	cbnz	r3, 800c7e6 <_fflush_r+0x1a>
 800c7e2:	f7fd fdab 	bl	800a33c <__sinit>
 800c7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d0f3      	beq.n	800c7d6 <_fflush_r+0xa>
 800c7ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7f0:	07d0      	lsls	r0, r2, #31
 800c7f2:	d404      	bmi.n	800c7fe <_fflush_r+0x32>
 800c7f4:	0599      	lsls	r1, r3, #22
 800c7f6:	d402      	bmi.n	800c7fe <_fflush_r+0x32>
 800c7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7fa:	f7fd ffac 	bl	800a756 <__retarget_lock_acquire_recursive>
 800c7fe:	4628      	mov	r0, r5
 800c800:	4621      	mov	r1, r4
 800c802:	f7ff ff5f 	bl	800c6c4 <__sflush_r>
 800c806:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c808:	07da      	lsls	r2, r3, #31
 800c80a:	4605      	mov	r5, r0
 800c80c:	d4e4      	bmi.n	800c7d8 <_fflush_r+0xc>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	059b      	lsls	r3, r3, #22
 800c812:	d4e1      	bmi.n	800c7d8 <_fflush_r+0xc>
 800c814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c816:	f7fd ff9f 	bl	800a758 <__retarget_lock_release_recursive>
 800c81a:	e7dd      	b.n	800c7d8 <_fflush_r+0xc>

0800c81c <__swhatbuf_r>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	460c      	mov	r4, r1
 800c820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c824:	2900      	cmp	r1, #0
 800c826:	b096      	sub	sp, #88	@ 0x58
 800c828:	4615      	mov	r5, r2
 800c82a:	461e      	mov	r6, r3
 800c82c:	da0d      	bge.n	800c84a <__swhatbuf_r+0x2e>
 800c82e:	89a3      	ldrh	r3, [r4, #12]
 800c830:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c834:	f04f 0100 	mov.w	r1, #0
 800c838:	bf14      	ite	ne
 800c83a:	2340      	movne	r3, #64	@ 0x40
 800c83c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c840:	2000      	movs	r0, #0
 800c842:	6031      	str	r1, [r6, #0]
 800c844:	602b      	str	r3, [r5, #0]
 800c846:	b016      	add	sp, #88	@ 0x58
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	466a      	mov	r2, sp
 800c84c:	f000 f8d6 	bl	800c9fc <_fstat_r>
 800c850:	2800      	cmp	r0, #0
 800c852:	dbec      	blt.n	800c82e <__swhatbuf_r+0x12>
 800c854:	9901      	ldr	r1, [sp, #4]
 800c856:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c85a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c85e:	4259      	negs	r1, r3
 800c860:	4159      	adcs	r1, r3
 800c862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c866:	e7eb      	b.n	800c840 <__swhatbuf_r+0x24>

0800c868 <__smakebuf_r>:
 800c868:	898b      	ldrh	r3, [r1, #12]
 800c86a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c86c:	079d      	lsls	r5, r3, #30
 800c86e:	4606      	mov	r6, r0
 800c870:	460c      	mov	r4, r1
 800c872:	d507      	bpl.n	800c884 <__smakebuf_r+0x1c>
 800c874:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	6123      	str	r3, [r4, #16]
 800c87c:	2301      	movs	r3, #1
 800c87e:	6163      	str	r3, [r4, #20]
 800c880:	b003      	add	sp, #12
 800c882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c884:	ab01      	add	r3, sp, #4
 800c886:	466a      	mov	r2, sp
 800c888:	f7ff ffc8 	bl	800c81c <__swhatbuf_r>
 800c88c:	9f00      	ldr	r7, [sp, #0]
 800c88e:	4605      	mov	r5, r0
 800c890:	4639      	mov	r1, r7
 800c892:	4630      	mov	r0, r6
 800c894:	f7fc fb70 	bl	8008f78 <_malloc_r>
 800c898:	b948      	cbnz	r0, 800c8ae <__smakebuf_r+0x46>
 800c89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c89e:	059a      	lsls	r2, r3, #22
 800c8a0:	d4ee      	bmi.n	800c880 <__smakebuf_r+0x18>
 800c8a2:	f023 0303 	bic.w	r3, r3, #3
 800c8a6:	f043 0302 	orr.w	r3, r3, #2
 800c8aa:	81a3      	strh	r3, [r4, #12]
 800c8ac:	e7e2      	b.n	800c874 <__smakebuf_r+0xc>
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	6020      	str	r0, [r4, #0]
 800c8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8b6:	81a3      	strh	r3, [r4, #12]
 800c8b8:	9b01      	ldr	r3, [sp, #4]
 800c8ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8be:	b15b      	cbz	r3, 800c8d8 <__smakebuf_r+0x70>
 800c8c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f000 f8ab 	bl	800ca20 <_isatty_r>
 800c8ca:	b128      	cbz	r0, 800c8d8 <__smakebuf_r+0x70>
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	f023 0303 	bic.w	r3, r3, #3
 800c8d2:	f043 0301 	orr.w	r3, r3, #1
 800c8d6:	81a3      	strh	r3, [r4, #12]
 800c8d8:	89a3      	ldrh	r3, [r4, #12]
 800c8da:	431d      	orrs	r5, r3
 800c8dc:	81a5      	strh	r5, [r4, #12]
 800c8de:	e7cf      	b.n	800c880 <__smakebuf_r+0x18>

0800c8e0 <__sccl>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	780b      	ldrb	r3, [r1, #0]
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	2b5e      	cmp	r3, #94	@ 0x5e
 800c8e8:	bf0b      	itete	eq
 800c8ea:	784b      	ldrbeq	r3, [r1, #1]
 800c8ec:	1c4a      	addne	r2, r1, #1
 800c8ee:	1c8a      	addeq	r2, r1, #2
 800c8f0:	2100      	movne	r1, #0
 800c8f2:	bf08      	it	eq
 800c8f4:	2101      	moveq	r1, #1
 800c8f6:	3801      	subs	r0, #1
 800c8f8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c8fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c900:	42a8      	cmp	r0, r5
 800c902:	d1fb      	bne.n	800c8fc <__sccl+0x1c>
 800c904:	b90b      	cbnz	r3, 800c90a <__sccl+0x2a>
 800c906:	1e50      	subs	r0, r2, #1
 800c908:	bd70      	pop	{r4, r5, r6, pc}
 800c90a:	f081 0101 	eor.w	r1, r1, #1
 800c90e:	54e1      	strb	r1, [r4, r3]
 800c910:	4610      	mov	r0, r2
 800c912:	4602      	mov	r2, r0
 800c914:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c918:	2d2d      	cmp	r5, #45	@ 0x2d
 800c91a:	d005      	beq.n	800c928 <__sccl+0x48>
 800c91c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c91e:	d016      	beq.n	800c94e <__sccl+0x6e>
 800c920:	2d00      	cmp	r5, #0
 800c922:	d0f1      	beq.n	800c908 <__sccl+0x28>
 800c924:	462b      	mov	r3, r5
 800c926:	e7f2      	b.n	800c90e <__sccl+0x2e>
 800c928:	7846      	ldrb	r6, [r0, #1]
 800c92a:	2e5d      	cmp	r6, #93	@ 0x5d
 800c92c:	d0fa      	beq.n	800c924 <__sccl+0x44>
 800c92e:	42b3      	cmp	r3, r6
 800c930:	dcf8      	bgt.n	800c924 <__sccl+0x44>
 800c932:	3002      	adds	r0, #2
 800c934:	461a      	mov	r2, r3
 800c936:	3201      	adds	r2, #1
 800c938:	4296      	cmp	r6, r2
 800c93a:	54a1      	strb	r1, [r4, r2]
 800c93c:	dcfb      	bgt.n	800c936 <__sccl+0x56>
 800c93e:	1af2      	subs	r2, r6, r3
 800c940:	3a01      	subs	r2, #1
 800c942:	1c5d      	adds	r5, r3, #1
 800c944:	42b3      	cmp	r3, r6
 800c946:	bfa8      	it	ge
 800c948:	2200      	movge	r2, #0
 800c94a:	18ab      	adds	r3, r5, r2
 800c94c:	e7e1      	b.n	800c912 <__sccl+0x32>
 800c94e:	4610      	mov	r0, r2
 800c950:	e7da      	b.n	800c908 <__sccl+0x28>

0800c952 <__submore>:
 800c952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c956:	460c      	mov	r4, r1
 800c958:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c95a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c95e:	4299      	cmp	r1, r3
 800c960:	d11d      	bne.n	800c99e <__submore+0x4c>
 800c962:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c966:	f7fc fb07 	bl	8008f78 <_malloc_r>
 800c96a:	b918      	cbnz	r0, 800c974 <__submore+0x22>
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295
 800c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c978:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c97a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c97e:	6360      	str	r0, [r4, #52]	@ 0x34
 800c980:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c984:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c988:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c98c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c990:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c994:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c998:	6020      	str	r0, [r4, #0]
 800c99a:	2000      	movs	r0, #0
 800c99c:	e7e8      	b.n	800c970 <__submore+0x1e>
 800c99e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c9a0:	0077      	lsls	r7, r6, #1
 800c9a2:	463a      	mov	r2, r7
 800c9a4:	f7fc fb74 	bl	8009090 <_realloc_r>
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d0de      	beq.n	800c96c <__submore+0x1a>
 800c9ae:	eb00 0806 	add.w	r8, r0, r6
 800c9b2:	4601      	mov	r1, r0
 800c9b4:	4632      	mov	r2, r6
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	f7fd fecf 	bl	800a75a <memcpy>
 800c9bc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c9c0:	f8c4 8000 	str.w	r8, [r4]
 800c9c4:	e7e9      	b.n	800c99a <__submore+0x48>

0800c9c6 <memmove>:
 800c9c6:	4288      	cmp	r0, r1
 800c9c8:	b510      	push	{r4, lr}
 800c9ca:	eb01 0402 	add.w	r4, r1, r2
 800c9ce:	d902      	bls.n	800c9d6 <memmove+0x10>
 800c9d0:	4284      	cmp	r4, r0
 800c9d2:	4623      	mov	r3, r4
 800c9d4:	d807      	bhi.n	800c9e6 <memmove+0x20>
 800c9d6:	1e43      	subs	r3, r0, #1
 800c9d8:	42a1      	cmp	r1, r4
 800c9da:	d008      	beq.n	800c9ee <memmove+0x28>
 800c9dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9e4:	e7f8      	b.n	800c9d8 <memmove+0x12>
 800c9e6:	4402      	add	r2, r0
 800c9e8:	4601      	mov	r1, r0
 800c9ea:	428a      	cmp	r2, r1
 800c9ec:	d100      	bne.n	800c9f0 <memmove+0x2a>
 800c9ee:	bd10      	pop	{r4, pc}
 800c9f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9f8:	e7f7      	b.n	800c9ea <memmove+0x24>
	...

0800c9fc <_fstat_r>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	4d07      	ldr	r5, [pc, #28]	@ (800ca1c <_fstat_r+0x20>)
 800ca00:	2300      	movs	r3, #0
 800ca02:	4604      	mov	r4, r0
 800ca04:	4608      	mov	r0, r1
 800ca06:	4611      	mov	r1, r2
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	f7f8 f807 	bl	8004a1c <_fstat>
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	d102      	bne.n	800ca18 <_fstat_r+0x1c>
 800ca12:	682b      	ldr	r3, [r5, #0]
 800ca14:	b103      	cbz	r3, 800ca18 <_fstat_r+0x1c>
 800ca16:	6023      	str	r3, [r4, #0]
 800ca18:	bd38      	pop	{r3, r4, r5, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20000bcc 	.word	0x20000bcc

0800ca20 <_isatty_r>:
 800ca20:	b538      	push	{r3, r4, r5, lr}
 800ca22:	4d06      	ldr	r5, [pc, #24]	@ (800ca3c <_isatty_r+0x1c>)
 800ca24:	2300      	movs	r3, #0
 800ca26:	4604      	mov	r4, r0
 800ca28:	4608      	mov	r0, r1
 800ca2a:	602b      	str	r3, [r5, #0]
 800ca2c:	f7f8 f806 	bl	8004a3c <_isatty>
 800ca30:	1c43      	adds	r3, r0, #1
 800ca32:	d102      	bne.n	800ca3a <_isatty_r+0x1a>
 800ca34:	682b      	ldr	r3, [r5, #0]
 800ca36:	b103      	cbz	r3, 800ca3a <_isatty_r+0x1a>
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}
 800ca3c:	20000bcc 	.word	0x20000bcc

0800ca40 <__assert_func>:
 800ca40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca42:	4614      	mov	r4, r2
 800ca44:	461a      	mov	r2, r3
 800ca46:	4b09      	ldr	r3, [pc, #36]	@ (800ca6c <__assert_func+0x2c>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	68d8      	ldr	r0, [r3, #12]
 800ca4e:	b14c      	cbz	r4, 800ca64 <__assert_func+0x24>
 800ca50:	4b07      	ldr	r3, [pc, #28]	@ (800ca70 <__assert_func+0x30>)
 800ca52:	9100      	str	r1, [sp, #0]
 800ca54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca58:	4906      	ldr	r1, [pc, #24]	@ (800ca74 <__assert_func+0x34>)
 800ca5a:	462b      	mov	r3, r5
 800ca5c:	f000 f892 	bl	800cb84 <fiprintf>
 800ca60:	f000 f8a2 	bl	800cba8 <abort>
 800ca64:	4b04      	ldr	r3, [pc, #16]	@ (800ca78 <__assert_func+0x38>)
 800ca66:	461c      	mov	r4, r3
 800ca68:	e7f3      	b.n	800ca52 <__assert_func+0x12>
 800ca6a:	bf00      	nop
 800ca6c:	20000274 	.word	0x20000274
 800ca70:	0800e0c6 	.word	0x0800e0c6
 800ca74:	0800e0d3 	.word	0x0800e0d3
 800ca78:	0800e101 	.word	0x0800e101

0800ca7c <_calloc_r>:
 800ca7c:	b570      	push	{r4, r5, r6, lr}
 800ca7e:	fba1 5402 	umull	r5, r4, r1, r2
 800ca82:	b934      	cbnz	r4, 800ca92 <_calloc_r+0x16>
 800ca84:	4629      	mov	r1, r5
 800ca86:	f7fc fa77 	bl	8008f78 <_malloc_r>
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	b928      	cbnz	r0, 800ca9a <_calloc_r+0x1e>
 800ca8e:	4630      	mov	r0, r6
 800ca90:	bd70      	pop	{r4, r5, r6, pc}
 800ca92:	220c      	movs	r2, #12
 800ca94:	6002      	str	r2, [r0, #0]
 800ca96:	2600      	movs	r6, #0
 800ca98:	e7f9      	b.n	800ca8e <_calloc_r+0x12>
 800ca9a:	462a      	mov	r2, r5
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	f7fd fdab 	bl	800a5f8 <memset>
 800caa2:	e7f4      	b.n	800ca8e <_calloc_r+0x12>

0800caa4 <_strtoul_l.isra.0>:
 800caa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800caa8:	4e34      	ldr	r6, [pc, #208]	@ (800cb7c <_strtoul_l.isra.0+0xd8>)
 800caaa:	4686      	mov	lr, r0
 800caac:	460d      	mov	r5, r1
 800caae:	4628      	mov	r0, r5
 800cab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cab4:	5d37      	ldrb	r7, [r6, r4]
 800cab6:	f017 0708 	ands.w	r7, r7, #8
 800caba:	d1f8      	bne.n	800caae <_strtoul_l.isra.0+0xa>
 800cabc:	2c2d      	cmp	r4, #45	@ 0x2d
 800cabe:	d110      	bne.n	800cae2 <_strtoul_l.isra.0+0x3e>
 800cac0:	782c      	ldrb	r4, [r5, #0]
 800cac2:	2701      	movs	r7, #1
 800cac4:	1c85      	adds	r5, r0, #2
 800cac6:	f033 0010 	bics.w	r0, r3, #16
 800caca:	d115      	bne.n	800caf8 <_strtoul_l.isra.0+0x54>
 800cacc:	2c30      	cmp	r4, #48	@ 0x30
 800cace:	d10d      	bne.n	800caec <_strtoul_l.isra.0+0x48>
 800cad0:	7828      	ldrb	r0, [r5, #0]
 800cad2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cad6:	2858      	cmp	r0, #88	@ 0x58
 800cad8:	d108      	bne.n	800caec <_strtoul_l.isra.0+0x48>
 800cada:	786c      	ldrb	r4, [r5, #1]
 800cadc:	3502      	adds	r5, #2
 800cade:	2310      	movs	r3, #16
 800cae0:	e00a      	b.n	800caf8 <_strtoul_l.isra.0+0x54>
 800cae2:	2c2b      	cmp	r4, #43	@ 0x2b
 800cae4:	bf04      	itt	eq
 800cae6:	782c      	ldrbeq	r4, [r5, #0]
 800cae8:	1c85      	addeq	r5, r0, #2
 800caea:	e7ec      	b.n	800cac6 <_strtoul_l.isra.0+0x22>
 800caec:	2b00      	cmp	r3, #0
 800caee:	d1f6      	bne.n	800cade <_strtoul_l.isra.0+0x3a>
 800caf0:	2c30      	cmp	r4, #48	@ 0x30
 800caf2:	bf14      	ite	ne
 800caf4:	230a      	movne	r3, #10
 800caf6:	2308      	moveq	r3, #8
 800caf8:	f04f 38ff 	mov.w	r8, #4294967295
 800cafc:	2600      	movs	r6, #0
 800cafe:	fbb8 f8f3 	udiv	r8, r8, r3
 800cb02:	fb03 f908 	mul.w	r9, r3, r8
 800cb06:	ea6f 0909 	mvn.w	r9, r9
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cb10:	f1bc 0f09 	cmp.w	ip, #9
 800cb14:	d810      	bhi.n	800cb38 <_strtoul_l.isra.0+0x94>
 800cb16:	4664      	mov	r4, ip
 800cb18:	42a3      	cmp	r3, r4
 800cb1a:	dd1e      	ble.n	800cb5a <_strtoul_l.isra.0+0xb6>
 800cb1c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cb20:	d007      	beq.n	800cb32 <_strtoul_l.isra.0+0x8e>
 800cb22:	4580      	cmp	r8, r0
 800cb24:	d316      	bcc.n	800cb54 <_strtoul_l.isra.0+0xb0>
 800cb26:	d101      	bne.n	800cb2c <_strtoul_l.isra.0+0x88>
 800cb28:	45a1      	cmp	r9, r4
 800cb2a:	db13      	blt.n	800cb54 <_strtoul_l.isra.0+0xb0>
 800cb2c:	fb00 4003 	mla	r0, r0, r3, r4
 800cb30:	2601      	movs	r6, #1
 800cb32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb36:	e7e9      	b.n	800cb0c <_strtoul_l.isra.0+0x68>
 800cb38:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cb3c:	f1bc 0f19 	cmp.w	ip, #25
 800cb40:	d801      	bhi.n	800cb46 <_strtoul_l.isra.0+0xa2>
 800cb42:	3c37      	subs	r4, #55	@ 0x37
 800cb44:	e7e8      	b.n	800cb18 <_strtoul_l.isra.0+0x74>
 800cb46:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cb4a:	f1bc 0f19 	cmp.w	ip, #25
 800cb4e:	d804      	bhi.n	800cb5a <_strtoul_l.isra.0+0xb6>
 800cb50:	3c57      	subs	r4, #87	@ 0x57
 800cb52:	e7e1      	b.n	800cb18 <_strtoul_l.isra.0+0x74>
 800cb54:	f04f 36ff 	mov.w	r6, #4294967295
 800cb58:	e7eb      	b.n	800cb32 <_strtoul_l.isra.0+0x8e>
 800cb5a:	1c73      	adds	r3, r6, #1
 800cb5c:	d106      	bne.n	800cb6c <_strtoul_l.isra.0+0xc8>
 800cb5e:	2322      	movs	r3, #34	@ 0x22
 800cb60:	f8ce 3000 	str.w	r3, [lr]
 800cb64:	4630      	mov	r0, r6
 800cb66:	b932      	cbnz	r2, 800cb76 <_strtoul_l.isra.0+0xd2>
 800cb68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb6c:	b107      	cbz	r7, 800cb70 <_strtoul_l.isra.0+0xcc>
 800cb6e:	4240      	negs	r0, r0
 800cb70:	2a00      	cmp	r2, #0
 800cb72:	d0f9      	beq.n	800cb68 <_strtoul_l.isra.0+0xc4>
 800cb74:	b106      	cbz	r6, 800cb78 <_strtoul_l.isra.0+0xd4>
 800cb76:	1e69      	subs	r1, r5, #1
 800cb78:	6011      	str	r1, [r2, #0]
 800cb7a:	e7f5      	b.n	800cb68 <_strtoul_l.isra.0+0xc4>
 800cb7c:	0800e159 	.word	0x0800e159

0800cb80 <_strtoul_r>:
 800cb80:	f7ff bf90 	b.w	800caa4 <_strtoul_l.isra.0>

0800cb84 <fiprintf>:
 800cb84:	b40e      	push	{r1, r2, r3}
 800cb86:	b503      	push	{r0, r1, lr}
 800cb88:	4601      	mov	r1, r0
 800cb8a:	ab03      	add	r3, sp, #12
 800cb8c:	4805      	ldr	r0, [pc, #20]	@ (800cba4 <fiprintf+0x20>)
 800cb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb92:	6800      	ldr	r0, [r0, #0]
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	f7ff f9a3 	bl	800bee0 <_vfiprintf_r>
 800cb9a:	b002      	add	sp, #8
 800cb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cba0:	b003      	add	sp, #12
 800cba2:	4770      	bx	lr
 800cba4:	20000274 	.word	0x20000274

0800cba8 <abort>:
 800cba8:	b508      	push	{r3, lr}
 800cbaa:	2006      	movs	r0, #6
 800cbac:	f000 f82c 	bl	800cc08 <raise>
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	f7f7 fee3 	bl	800497c <_exit>

0800cbb6 <_raise_r>:
 800cbb6:	291f      	cmp	r1, #31
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4605      	mov	r5, r0
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	d904      	bls.n	800cbca <_raise_r+0x14>
 800cbc0:	2316      	movs	r3, #22
 800cbc2:	6003      	str	r3, [r0, #0]
 800cbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc8:	bd38      	pop	{r3, r4, r5, pc}
 800cbca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cbcc:	b112      	cbz	r2, 800cbd4 <_raise_r+0x1e>
 800cbce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbd2:	b94b      	cbnz	r3, 800cbe8 <_raise_r+0x32>
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	f000 f831 	bl	800cc3c <_getpid_r>
 800cbda:	4622      	mov	r2, r4
 800cbdc:	4601      	mov	r1, r0
 800cbde:	4628      	mov	r0, r5
 800cbe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbe4:	f000 b818 	b.w	800cc18 <_kill_r>
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d00a      	beq.n	800cc02 <_raise_r+0x4c>
 800cbec:	1c59      	adds	r1, r3, #1
 800cbee:	d103      	bne.n	800cbf8 <_raise_r+0x42>
 800cbf0:	2316      	movs	r3, #22
 800cbf2:	6003      	str	r3, [r0, #0]
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	e7e7      	b.n	800cbc8 <_raise_r+0x12>
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cbfe:	4620      	mov	r0, r4
 800cc00:	4798      	blx	r3
 800cc02:	2000      	movs	r0, #0
 800cc04:	e7e0      	b.n	800cbc8 <_raise_r+0x12>
	...

0800cc08 <raise>:
 800cc08:	4b02      	ldr	r3, [pc, #8]	@ (800cc14 <raise+0xc>)
 800cc0a:	4601      	mov	r1, r0
 800cc0c:	6818      	ldr	r0, [r3, #0]
 800cc0e:	f7ff bfd2 	b.w	800cbb6 <_raise_r>
 800cc12:	bf00      	nop
 800cc14:	20000274 	.word	0x20000274

0800cc18 <_kill_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4d07      	ldr	r5, [pc, #28]	@ (800cc38 <_kill_r+0x20>)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4604      	mov	r4, r0
 800cc20:	4608      	mov	r0, r1
 800cc22:	4611      	mov	r1, r2
 800cc24:	602b      	str	r3, [r5, #0]
 800cc26:	f7f7 fe99 	bl	800495c <_kill>
 800cc2a:	1c43      	adds	r3, r0, #1
 800cc2c:	d102      	bne.n	800cc34 <_kill_r+0x1c>
 800cc2e:	682b      	ldr	r3, [r5, #0]
 800cc30:	b103      	cbz	r3, 800cc34 <_kill_r+0x1c>
 800cc32:	6023      	str	r3, [r4, #0]
 800cc34:	bd38      	pop	{r3, r4, r5, pc}
 800cc36:	bf00      	nop
 800cc38:	20000bcc 	.word	0x20000bcc

0800cc3c <_getpid_r>:
 800cc3c:	f7f7 be86 	b.w	800494c <_getpid>

0800cc40 <cos>:
 800cc40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc42:	ec53 2b10 	vmov	r2, r3, d0
 800cc46:	4826      	ldr	r0, [pc, #152]	@ (800cce0 <cos+0xa0>)
 800cc48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cc4c:	4281      	cmp	r1, r0
 800cc4e:	d806      	bhi.n	800cc5e <cos+0x1e>
 800cc50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ccd8 <cos+0x98>
 800cc54:	b005      	add	sp, #20
 800cc56:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc5a:	f000 b899 	b.w	800cd90 <__kernel_cos>
 800cc5e:	4821      	ldr	r0, [pc, #132]	@ (800cce4 <cos+0xa4>)
 800cc60:	4281      	cmp	r1, r0
 800cc62:	d908      	bls.n	800cc76 <cos+0x36>
 800cc64:	4610      	mov	r0, r2
 800cc66:	4619      	mov	r1, r3
 800cc68:	f7f3 fb0e 	bl	8000288 <__aeabi_dsub>
 800cc6c:	ec41 0b10 	vmov	d0, r0, r1
 800cc70:	b005      	add	sp, #20
 800cc72:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc76:	4668      	mov	r0, sp
 800cc78:	f000 fa0e 	bl	800d098 <__ieee754_rem_pio2>
 800cc7c:	f000 0003 	and.w	r0, r0, #3
 800cc80:	2801      	cmp	r0, #1
 800cc82:	d00b      	beq.n	800cc9c <cos+0x5c>
 800cc84:	2802      	cmp	r0, #2
 800cc86:	d015      	beq.n	800ccb4 <cos+0x74>
 800cc88:	b9d8      	cbnz	r0, 800ccc2 <cos+0x82>
 800cc8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc8e:	ed9d 0b00 	vldr	d0, [sp]
 800cc92:	f000 f87d 	bl	800cd90 <__kernel_cos>
 800cc96:	ec51 0b10 	vmov	r0, r1, d0
 800cc9a:	e7e7      	b.n	800cc6c <cos+0x2c>
 800cc9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cca0:	ed9d 0b00 	vldr	d0, [sp]
 800cca4:	f000 f93c 	bl	800cf20 <__kernel_sin>
 800cca8:	ec53 2b10 	vmov	r2, r3, d0
 800ccac:	4610      	mov	r0, r2
 800ccae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ccb2:	e7db      	b.n	800cc6c <cos+0x2c>
 800ccb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ccb8:	ed9d 0b00 	vldr	d0, [sp]
 800ccbc:	f000 f868 	bl	800cd90 <__kernel_cos>
 800ccc0:	e7f2      	b.n	800cca8 <cos+0x68>
 800ccc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ccc6:	ed9d 0b00 	vldr	d0, [sp]
 800ccca:	2001      	movs	r0, #1
 800cccc:	f000 f928 	bl	800cf20 <__kernel_sin>
 800ccd0:	e7e1      	b.n	800cc96 <cos+0x56>
 800ccd2:	bf00      	nop
 800ccd4:	f3af 8000 	nop.w
	...
 800cce0:	3fe921fb 	.word	0x3fe921fb
 800cce4:	7fefffff 	.word	0x7fefffff

0800cce8 <sin>:
 800cce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccea:	ec53 2b10 	vmov	r2, r3, d0
 800ccee:	4826      	ldr	r0, [pc, #152]	@ (800cd88 <sin+0xa0>)
 800ccf0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ccf4:	4281      	cmp	r1, r0
 800ccf6:	d807      	bhi.n	800cd08 <sin+0x20>
 800ccf8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cd80 <sin+0x98>
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	b005      	add	sp, #20
 800cd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd04:	f000 b90c 	b.w	800cf20 <__kernel_sin>
 800cd08:	4820      	ldr	r0, [pc, #128]	@ (800cd8c <sin+0xa4>)
 800cd0a:	4281      	cmp	r1, r0
 800cd0c:	d908      	bls.n	800cd20 <sin+0x38>
 800cd0e:	4610      	mov	r0, r2
 800cd10:	4619      	mov	r1, r3
 800cd12:	f7f3 fab9 	bl	8000288 <__aeabi_dsub>
 800cd16:	ec41 0b10 	vmov	d0, r0, r1
 800cd1a:	b005      	add	sp, #20
 800cd1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd20:	4668      	mov	r0, sp
 800cd22:	f000 f9b9 	bl	800d098 <__ieee754_rem_pio2>
 800cd26:	f000 0003 	and.w	r0, r0, #3
 800cd2a:	2801      	cmp	r0, #1
 800cd2c:	d00c      	beq.n	800cd48 <sin+0x60>
 800cd2e:	2802      	cmp	r0, #2
 800cd30:	d011      	beq.n	800cd56 <sin+0x6e>
 800cd32:	b9e8      	cbnz	r0, 800cd70 <sin+0x88>
 800cd34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd38:	ed9d 0b00 	vldr	d0, [sp]
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	f000 f8ef 	bl	800cf20 <__kernel_sin>
 800cd42:	ec51 0b10 	vmov	r0, r1, d0
 800cd46:	e7e6      	b.n	800cd16 <sin+0x2e>
 800cd48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd4c:	ed9d 0b00 	vldr	d0, [sp]
 800cd50:	f000 f81e 	bl	800cd90 <__kernel_cos>
 800cd54:	e7f5      	b.n	800cd42 <sin+0x5a>
 800cd56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd5a:	ed9d 0b00 	vldr	d0, [sp]
 800cd5e:	2001      	movs	r0, #1
 800cd60:	f000 f8de 	bl	800cf20 <__kernel_sin>
 800cd64:	ec53 2b10 	vmov	r2, r3, d0
 800cd68:	4610      	mov	r0, r2
 800cd6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cd6e:	e7d2      	b.n	800cd16 <sin+0x2e>
 800cd70:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd74:	ed9d 0b00 	vldr	d0, [sp]
 800cd78:	f000 f80a 	bl	800cd90 <__kernel_cos>
 800cd7c:	e7f2      	b.n	800cd64 <sin+0x7c>
 800cd7e:	bf00      	nop
	...
 800cd88:	3fe921fb 	.word	0x3fe921fb
 800cd8c:	7fefffff 	.word	0x7fefffff

0800cd90 <__kernel_cos>:
 800cd90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	ec57 6b10 	vmov	r6, r7, d0
 800cd98:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cd9c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800cda0:	ed8d 1b00 	vstr	d1, [sp]
 800cda4:	d206      	bcs.n	800cdb4 <__kernel_cos+0x24>
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7f3 fed5 	bl	8000b58 <__aeabi_d2iz>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f000 8088 	beq.w	800cec4 <__kernel_cos+0x134>
 800cdb4:	4632      	mov	r2, r6
 800cdb6:	463b      	mov	r3, r7
 800cdb8:	4630      	mov	r0, r6
 800cdba:	4639      	mov	r1, r7
 800cdbc:	f7f3 fc1c 	bl	80005f8 <__aeabi_dmul>
 800cdc0:	4b51      	ldr	r3, [pc, #324]	@ (800cf08 <__kernel_cos+0x178>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	460d      	mov	r5, r1
 800cdc8:	f7f3 fc16 	bl	80005f8 <__aeabi_dmul>
 800cdcc:	a340      	add	r3, pc, #256	@ (adr r3, 800ced0 <__kernel_cos+0x140>)
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	4682      	mov	sl, r0
 800cdd4:	468b      	mov	fp, r1
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	4629      	mov	r1, r5
 800cdda:	f7f3 fc0d 	bl	80005f8 <__aeabi_dmul>
 800cdde:	a33e      	add	r3, pc, #248	@ (adr r3, 800ced8 <__kernel_cos+0x148>)
 800cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde4:	f7f3 fa52 	bl	800028c <__adddf3>
 800cde8:	4622      	mov	r2, r4
 800cdea:	462b      	mov	r3, r5
 800cdec:	f7f3 fc04 	bl	80005f8 <__aeabi_dmul>
 800cdf0:	a33b      	add	r3, pc, #236	@ (adr r3, 800cee0 <__kernel_cos+0x150>)
 800cdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf6:	f7f3 fa47 	bl	8000288 <__aeabi_dsub>
 800cdfa:	4622      	mov	r2, r4
 800cdfc:	462b      	mov	r3, r5
 800cdfe:	f7f3 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ce02:	a339      	add	r3, pc, #228	@ (adr r3, 800cee8 <__kernel_cos+0x158>)
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	f7f3 fa40 	bl	800028c <__adddf3>
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	462b      	mov	r3, r5
 800ce10:	f7f3 fbf2 	bl	80005f8 <__aeabi_dmul>
 800ce14:	a336      	add	r3, pc, #216	@ (adr r3, 800cef0 <__kernel_cos+0x160>)
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	f7f3 fa35 	bl	8000288 <__aeabi_dsub>
 800ce1e:	4622      	mov	r2, r4
 800ce20:	462b      	mov	r3, r5
 800ce22:	f7f3 fbe9 	bl	80005f8 <__aeabi_dmul>
 800ce26:	a334      	add	r3, pc, #208	@ (adr r3, 800cef8 <__kernel_cos+0x168>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	f7f3 fa2e 	bl	800028c <__adddf3>
 800ce30:	4622      	mov	r2, r4
 800ce32:	462b      	mov	r3, r5
 800ce34:	f7f3 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ce38:	4622      	mov	r2, r4
 800ce3a:	462b      	mov	r3, r5
 800ce3c:	f7f3 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ce40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce44:	4604      	mov	r4, r0
 800ce46:	460d      	mov	r5, r1
 800ce48:	4630      	mov	r0, r6
 800ce4a:	4639      	mov	r1, r7
 800ce4c:	f7f3 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ce50:	460b      	mov	r3, r1
 800ce52:	4602      	mov	r2, r0
 800ce54:	4629      	mov	r1, r5
 800ce56:	4620      	mov	r0, r4
 800ce58:	f7f3 fa16 	bl	8000288 <__aeabi_dsub>
 800ce5c:	4b2b      	ldr	r3, [pc, #172]	@ (800cf0c <__kernel_cos+0x17c>)
 800ce5e:	4598      	cmp	r8, r3
 800ce60:	4606      	mov	r6, r0
 800ce62:	460f      	mov	r7, r1
 800ce64:	d810      	bhi.n	800ce88 <__kernel_cos+0xf8>
 800ce66:	4602      	mov	r2, r0
 800ce68:	460b      	mov	r3, r1
 800ce6a:	4650      	mov	r0, sl
 800ce6c:	4659      	mov	r1, fp
 800ce6e:	f7f3 fa0b 	bl	8000288 <__aeabi_dsub>
 800ce72:	460b      	mov	r3, r1
 800ce74:	4926      	ldr	r1, [pc, #152]	@ (800cf10 <__kernel_cos+0x180>)
 800ce76:	4602      	mov	r2, r0
 800ce78:	2000      	movs	r0, #0
 800ce7a:	f7f3 fa05 	bl	8000288 <__aeabi_dsub>
 800ce7e:	ec41 0b10 	vmov	d0, r0, r1
 800ce82:	b003      	add	sp, #12
 800ce84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce88:	4b22      	ldr	r3, [pc, #136]	@ (800cf14 <__kernel_cos+0x184>)
 800ce8a:	4921      	ldr	r1, [pc, #132]	@ (800cf10 <__kernel_cos+0x180>)
 800ce8c:	4598      	cmp	r8, r3
 800ce8e:	bf8c      	ite	hi
 800ce90:	4d21      	ldrhi	r5, [pc, #132]	@ (800cf18 <__kernel_cos+0x188>)
 800ce92:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800ce96:	2400      	movs	r4, #0
 800ce98:	4622      	mov	r2, r4
 800ce9a:	462b      	mov	r3, r5
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	f7f3 f9f3 	bl	8000288 <__aeabi_dsub>
 800cea2:	4622      	mov	r2, r4
 800cea4:	4680      	mov	r8, r0
 800cea6:	4689      	mov	r9, r1
 800cea8:	462b      	mov	r3, r5
 800ceaa:	4650      	mov	r0, sl
 800ceac:	4659      	mov	r1, fp
 800ceae:	f7f3 f9eb 	bl	8000288 <__aeabi_dsub>
 800ceb2:	4632      	mov	r2, r6
 800ceb4:	463b      	mov	r3, r7
 800ceb6:	f7f3 f9e7 	bl	8000288 <__aeabi_dsub>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	4640      	mov	r0, r8
 800cec0:	4649      	mov	r1, r9
 800cec2:	e7da      	b.n	800ce7a <__kernel_cos+0xea>
 800cec4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800cf00 <__kernel_cos+0x170>
 800cec8:	e7db      	b.n	800ce82 <__kernel_cos+0xf2>
 800ceca:	bf00      	nop
 800cecc:	f3af 8000 	nop.w
 800ced0:	be8838d4 	.word	0xbe8838d4
 800ced4:	bda8fae9 	.word	0xbda8fae9
 800ced8:	bdb4b1c4 	.word	0xbdb4b1c4
 800cedc:	3e21ee9e 	.word	0x3e21ee9e
 800cee0:	809c52ad 	.word	0x809c52ad
 800cee4:	3e927e4f 	.word	0x3e927e4f
 800cee8:	19cb1590 	.word	0x19cb1590
 800ceec:	3efa01a0 	.word	0x3efa01a0
 800cef0:	16c15177 	.word	0x16c15177
 800cef4:	3f56c16c 	.word	0x3f56c16c
 800cef8:	5555554c 	.word	0x5555554c
 800cefc:	3fa55555 	.word	0x3fa55555
 800cf00:	00000000 	.word	0x00000000
 800cf04:	3ff00000 	.word	0x3ff00000
 800cf08:	3fe00000 	.word	0x3fe00000
 800cf0c:	3fd33332 	.word	0x3fd33332
 800cf10:	3ff00000 	.word	0x3ff00000
 800cf14:	3fe90000 	.word	0x3fe90000
 800cf18:	3fd20000 	.word	0x3fd20000
 800cf1c:	00000000 	.word	0x00000000

0800cf20 <__kernel_sin>:
 800cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf24:	ec55 4b10 	vmov	r4, r5, d0
 800cf28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cf2c:	b085      	sub	sp, #20
 800cf2e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800cf32:	ed8d 1b02 	vstr	d1, [sp, #8]
 800cf36:	4680      	mov	r8, r0
 800cf38:	d205      	bcs.n	800cf46 <__kernel_sin+0x26>
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	f7f3 fe0b 	bl	8000b58 <__aeabi_d2iz>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d052      	beq.n	800cfec <__kernel_sin+0xcc>
 800cf46:	4622      	mov	r2, r4
 800cf48:	462b      	mov	r3, r5
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	f7f3 fb53 	bl	80005f8 <__aeabi_dmul>
 800cf52:	4682      	mov	sl, r0
 800cf54:	468b      	mov	fp, r1
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	f7f3 fb4b 	bl	80005f8 <__aeabi_dmul>
 800cf62:	a342      	add	r3, pc, #264	@ (adr r3, 800d06c <__kernel_sin+0x14c>)
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	e9cd 0100 	strd	r0, r1, [sp]
 800cf6c:	4650      	mov	r0, sl
 800cf6e:	4659      	mov	r1, fp
 800cf70:	f7f3 fb42 	bl	80005f8 <__aeabi_dmul>
 800cf74:	a33f      	add	r3, pc, #252	@ (adr r3, 800d074 <__kernel_sin+0x154>)
 800cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7a:	f7f3 f985 	bl	8000288 <__aeabi_dsub>
 800cf7e:	4652      	mov	r2, sl
 800cf80:	465b      	mov	r3, fp
 800cf82:	f7f3 fb39 	bl	80005f8 <__aeabi_dmul>
 800cf86:	a33d      	add	r3, pc, #244	@ (adr r3, 800d07c <__kernel_sin+0x15c>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f7f3 f97e 	bl	800028c <__adddf3>
 800cf90:	4652      	mov	r2, sl
 800cf92:	465b      	mov	r3, fp
 800cf94:	f7f3 fb30 	bl	80005f8 <__aeabi_dmul>
 800cf98:	a33a      	add	r3, pc, #232	@ (adr r3, 800d084 <__kernel_sin+0x164>)
 800cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9e:	f7f3 f973 	bl	8000288 <__aeabi_dsub>
 800cfa2:	4652      	mov	r2, sl
 800cfa4:	465b      	mov	r3, fp
 800cfa6:	f7f3 fb27 	bl	80005f8 <__aeabi_dmul>
 800cfaa:	a338      	add	r3, pc, #224	@ (adr r3, 800d08c <__kernel_sin+0x16c>)
 800cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb0:	f7f3 f96c 	bl	800028c <__adddf3>
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	460f      	mov	r7, r1
 800cfb8:	f1b8 0f00 	cmp.w	r8, #0
 800cfbc:	d11b      	bne.n	800cff6 <__kernel_sin+0xd6>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	4650      	mov	r0, sl
 800cfc4:	4659      	mov	r1, fp
 800cfc6:	f7f3 fb17 	bl	80005f8 <__aeabi_dmul>
 800cfca:	a325      	add	r3, pc, #148	@ (adr r3, 800d060 <__kernel_sin+0x140>)
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f7f3 f95a 	bl	8000288 <__aeabi_dsub>
 800cfd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfd8:	f7f3 fb0e 	bl	80005f8 <__aeabi_dmul>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	f7f3 f952 	bl	800028c <__adddf3>
 800cfe8:	4604      	mov	r4, r0
 800cfea:	460d      	mov	r5, r1
 800cfec:	ec45 4b10 	vmov	d0, r4, r5
 800cff0:	b005      	add	sp, #20
 800cff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cffa:	4b1b      	ldr	r3, [pc, #108]	@ (800d068 <__kernel_sin+0x148>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	f7f3 fafb 	bl	80005f8 <__aeabi_dmul>
 800d002:	4632      	mov	r2, r6
 800d004:	4680      	mov	r8, r0
 800d006:	4689      	mov	r9, r1
 800d008:	463b      	mov	r3, r7
 800d00a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d00e:	f7f3 faf3 	bl	80005f8 <__aeabi_dmul>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	4640      	mov	r0, r8
 800d018:	4649      	mov	r1, r9
 800d01a:	f7f3 f935 	bl	8000288 <__aeabi_dsub>
 800d01e:	4652      	mov	r2, sl
 800d020:	465b      	mov	r3, fp
 800d022:	f7f3 fae9 	bl	80005f8 <__aeabi_dmul>
 800d026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d02a:	f7f3 f92d 	bl	8000288 <__aeabi_dsub>
 800d02e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d060 <__kernel_sin+0x140>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	4606      	mov	r6, r0
 800d036:	460f      	mov	r7, r1
 800d038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d03c:	f7f3 fadc 	bl	80005f8 <__aeabi_dmul>
 800d040:	4602      	mov	r2, r0
 800d042:	460b      	mov	r3, r1
 800d044:	4630      	mov	r0, r6
 800d046:	4639      	mov	r1, r7
 800d048:	f7f3 f920 	bl	800028c <__adddf3>
 800d04c:	4602      	mov	r2, r0
 800d04e:	460b      	mov	r3, r1
 800d050:	4620      	mov	r0, r4
 800d052:	4629      	mov	r1, r5
 800d054:	f7f3 f918 	bl	8000288 <__aeabi_dsub>
 800d058:	e7c6      	b.n	800cfe8 <__kernel_sin+0xc8>
 800d05a:	bf00      	nop
 800d05c:	f3af 8000 	nop.w
 800d060:	55555549 	.word	0x55555549
 800d064:	3fc55555 	.word	0x3fc55555
 800d068:	3fe00000 	.word	0x3fe00000
 800d06c:	5acfd57c 	.word	0x5acfd57c
 800d070:	3de5d93a 	.word	0x3de5d93a
 800d074:	8a2b9ceb 	.word	0x8a2b9ceb
 800d078:	3e5ae5e6 	.word	0x3e5ae5e6
 800d07c:	57b1fe7d 	.word	0x57b1fe7d
 800d080:	3ec71de3 	.word	0x3ec71de3
 800d084:	19c161d5 	.word	0x19c161d5
 800d088:	3f2a01a0 	.word	0x3f2a01a0
 800d08c:	1110f8a6 	.word	0x1110f8a6
 800d090:	3f811111 	.word	0x3f811111
 800d094:	00000000 	.word	0x00000000

0800d098 <__ieee754_rem_pio2>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	ec57 6b10 	vmov	r6, r7, d0
 800d0a0:	4bc5      	ldr	r3, [pc, #788]	@ (800d3b8 <__ieee754_rem_pio2+0x320>)
 800d0a2:	b08d      	sub	sp, #52	@ 0x34
 800d0a4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d0a8:	4598      	cmp	r8, r3
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	9704      	str	r7, [sp, #16]
 800d0ae:	d807      	bhi.n	800d0c0 <__ieee754_rem_pio2+0x28>
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	ed80 0b00 	vstr	d0, [r0]
 800d0b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d0bc:	2500      	movs	r5, #0
 800d0be:	e028      	b.n	800d112 <__ieee754_rem_pio2+0x7a>
 800d0c0:	4bbe      	ldr	r3, [pc, #760]	@ (800d3bc <__ieee754_rem_pio2+0x324>)
 800d0c2:	4598      	cmp	r8, r3
 800d0c4:	d878      	bhi.n	800d1b8 <__ieee754_rem_pio2+0x120>
 800d0c6:	9b04      	ldr	r3, [sp, #16]
 800d0c8:	4dbd      	ldr	r5, [pc, #756]	@ (800d3c0 <__ieee754_rem_pio2+0x328>)
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d380 <__ieee754_rem_pio2+0x2e8>)
 800d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d4:	4639      	mov	r1, r7
 800d0d6:	dd38      	ble.n	800d14a <__ieee754_rem_pio2+0xb2>
 800d0d8:	f7f3 f8d6 	bl	8000288 <__aeabi_dsub>
 800d0dc:	45a8      	cmp	r8, r5
 800d0de:	4606      	mov	r6, r0
 800d0e0:	460f      	mov	r7, r1
 800d0e2:	d01a      	beq.n	800d11a <__ieee754_rem_pio2+0x82>
 800d0e4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d388 <__ieee754_rem_pio2+0x2f0>)
 800d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ea:	f7f3 f8cd 	bl	8000288 <__aeabi_dsub>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	4689      	mov	r9, r1
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	4639      	mov	r1, r7
 800d0fa:	f7f3 f8c5 	bl	8000288 <__aeabi_dsub>
 800d0fe:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d388 <__ieee754_rem_pio2+0x2f0>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7f3 f8c0 	bl	8000288 <__aeabi_dsub>
 800d108:	e9c4 8900 	strd	r8, r9, [r4]
 800d10c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d110:	2501      	movs	r5, #1
 800d112:	4628      	mov	r0, r5
 800d114:	b00d      	add	sp, #52	@ 0x34
 800d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11a:	a39d      	add	r3, pc, #628	@ (adr r3, 800d390 <__ieee754_rem_pio2+0x2f8>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	f7f3 f8b2 	bl	8000288 <__aeabi_dsub>
 800d124:	a39c      	add	r3, pc, #624	@ (adr r3, 800d398 <__ieee754_rem_pio2+0x300>)
 800d126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12a:	4606      	mov	r6, r0
 800d12c:	460f      	mov	r7, r1
 800d12e:	f7f3 f8ab 	bl	8000288 <__aeabi_dsub>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	4680      	mov	r8, r0
 800d138:	4689      	mov	r9, r1
 800d13a:	4630      	mov	r0, r6
 800d13c:	4639      	mov	r1, r7
 800d13e:	f7f3 f8a3 	bl	8000288 <__aeabi_dsub>
 800d142:	a395      	add	r3, pc, #596	@ (adr r3, 800d398 <__ieee754_rem_pio2+0x300>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	e7dc      	b.n	800d104 <__ieee754_rem_pio2+0x6c>
 800d14a:	f7f3 f89f 	bl	800028c <__adddf3>
 800d14e:	45a8      	cmp	r8, r5
 800d150:	4606      	mov	r6, r0
 800d152:	460f      	mov	r7, r1
 800d154:	d018      	beq.n	800d188 <__ieee754_rem_pio2+0xf0>
 800d156:	a38c      	add	r3, pc, #560	@ (adr r3, 800d388 <__ieee754_rem_pio2+0x2f0>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	f7f3 f896 	bl	800028c <__adddf3>
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	4680      	mov	r8, r0
 800d166:	4689      	mov	r9, r1
 800d168:	4630      	mov	r0, r6
 800d16a:	4639      	mov	r1, r7
 800d16c:	f7f3 f88c 	bl	8000288 <__aeabi_dsub>
 800d170:	a385      	add	r3, pc, #532	@ (adr r3, 800d388 <__ieee754_rem_pio2+0x2f0>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	f7f3 f889 	bl	800028c <__adddf3>
 800d17a:	f04f 35ff 	mov.w	r5, #4294967295
 800d17e:	e9c4 8900 	strd	r8, r9, [r4]
 800d182:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d186:	e7c4      	b.n	800d112 <__ieee754_rem_pio2+0x7a>
 800d188:	a381      	add	r3, pc, #516	@ (adr r3, 800d390 <__ieee754_rem_pio2+0x2f8>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	f7f3 f87d 	bl	800028c <__adddf3>
 800d192:	a381      	add	r3, pc, #516	@ (adr r3, 800d398 <__ieee754_rem_pio2+0x300>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	4606      	mov	r6, r0
 800d19a:	460f      	mov	r7, r1
 800d19c:	f7f3 f876 	bl	800028c <__adddf3>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4680      	mov	r8, r0
 800d1a6:	4689      	mov	r9, r1
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	f7f3 f86c 	bl	8000288 <__aeabi_dsub>
 800d1b0:	a379      	add	r3, pc, #484	@ (adr r3, 800d398 <__ieee754_rem_pio2+0x300>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	e7de      	b.n	800d176 <__ieee754_rem_pio2+0xde>
 800d1b8:	4b82      	ldr	r3, [pc, #520]	@ (800d3c4 <__ieee754_rem_pio2+0x32c>)
 800d1ba:	4598      	cmp	r8, r3
 800d1bc:	f200 80d1 	bhi.w	800d362 <__ieee754_rem_pio2+0x2ca>
 800d1c0:	f000 f966 	bl	800d490 <fabs>
 800d1c4:	ec57 6b10 	vmov	r6, r7, d0
 800d1c8:	a375      	add	r3, pc, #468	@ (adr r3, 800d3a0 <__ieee754_rem_pio2+0x308>)
 800d1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	f7f3 fa11 	bl	80005f8 <__aeabi_dmul>
 800d1d6:	4b7c      	ldr	r3, [pc, #496]	@ (800d3c8 <__ieee754_rem_pio2+0x330>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f7f3 f857 	bl	800028c <__adddf3>
 800d1de:	f7f3 fcbb 	bl	8000b58 <__aeabi_d2iz>
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	f7f3 f99e 	bl	8000524 <__aeabi_i2d>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1f0:	a363      	add	r3, pc, #396	@ (adr r3, 800d380 <__ieee754_rem_pio2+0x2e8>)
 800d1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f6:	f7f3 f9ff 	bl	80005f8 <__aeabi_dmul>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4630      	mov	r0, r6
 800d200:	4639      	mov	r1, r7
 800d202:	f7f3 f841 	bl	8000288 <__aeabi_dsub>
 800d206:	a360      	add	r3, pc, #384	@ (adr r3, 800d388 <__ieee754_rem_pio2+0x2f0>)
 800d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20c:	4682      	mov	sl, r0
 800d20e:	468b      	mov	fp, r1
 800d210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d214:	f7f3 f9f0 	bl	80005f8 <__aeabi_dmul>
 800d218:	2d1f      	cmp	r5, #31
 800d21a:	4606      	mov	r6, r0
 800d21c:	460f      	mov	r7, r1
 800d21e:	dc0c      	bgt.n	800d23a <__ieee754_rem_pio2+0x1a2>
 800d220:	4b6a      	ldr	r3, [pc, #424]	@ (800d3cc <__ieee754_rem_pio2+0x334>)
 800d222:	1e6a      	subs	r2, r5, #1
 800d224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d228:	4543      	cmp	r3, r8
 800d22a:	d006      	beq.n	800d23a <__ieee754_rem_pio2+0x1a2>
 800d22c:	4632      	mov	r2, r6
 800d22e:	463b      	mov	r3, r7
 800d230:	4650      	mov	r0, sl
 800d232:	4659      	mov	r1, fp
 800d234:	f7f3 f828 	bl	8000288 <__aeabi_dsub>
 800d238:	e00e      	b.n	800d258 <__ieee754_rem_pio2+0x1c0>
 800d23a:	463b      	mov	r3, r7
 800d23c:	4632      	mov	r2, r6
 800d23e:	4650      	mov	r0, sl
 800d240:	4659      	mov	r1, fp
 800d242:	f7f3 f821 	bl	8000288 <__aeabi_dsub>
 800d246:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d24a:	9305      	str	r3, [sp, #20]
 800d24c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d250:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d254:	2b10      	cmp	r3, #16
 800d256:	dc02      	bgt.n	800d25e <__ieee754_rem_pio2+0x1c6>
 800d258:	e9c4 0100 	strd	r0, r1, [r4]
 800d25c:	e039      	b.n	800d2d2 <__ieee754_rem_pio2+0x23a>
 800d25e:	a34c      	add	r3, pc, #304	@ (adr r3, 800d390 <__ieee754_rem_pio2+0x2f8>)
 800d260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d268:	f7f3 f9c6 	bl	80005f8 <__aeabi_dmul>
 800d26c:	4606      	mov	r6, r0
 800d26e:	460f      	mov	r7, r1
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	4650      	mov	r0, sl
 800d276:	4659      	mov	r1, fp
 800d278:	f7f3 f806 	bl	8000288 <__aeabi_dsub>
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	4680      	mov	r8, r0
 800d282:	4689      	mov	r9, r1
 800d284:	4650      	mov	r0, sl
 800d286:	4659      	mov	r1, fp
 800d288:	f7f2 fffe 	bl	8000288 <__aeabi_dsub>
 800d28c:	4632      	mov	r2, r6
 800d28e:	463b      	mov	r3, r7
 800d290:	f7f2 fffa 	bl	8000288 <__aeabi_dsub>
 800d294:	a340      	add	r3, pc, #256	@ (adr r3, 800d398 <__ieee754_rem_pio2+0x300>)
 800d296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29a:	4606      	mov	r6, r0
 800d29c:	460f      	mov	r7, r1
 800d29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2a2:	f7f3 f9a9 	bl	80005f8 <__aeabi_dmul>
 800d2a6:	4632      	mov	r2, r6
 800d2a8:	463b      	mov	r3, r7
 800d2aa:	f7f2 ffed 	bl	8000288 <__aeabi_dsub>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	4649      	mov	r1, r9
 800d2ba:	f7f2 ffe5 	bl	8000288 <__aeabi_dsub>
 800d2be:	9a05      	ldr	r2, [sp, #20]
 800d2c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	2b31      	cmp	r3, #49	@ 0x31
 800d2c8:	dc20      	bgt.n	800d30c <__ieee754_rem_pio2+0x274>
 800d2ca:	e9c4 0100 	strd	r0, r1, [r4]
 800d2ce:	46c2      	mov	sl, r8
 800d2d0:	46cb      	mov	fp, r9
 800d2d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d2d6:	4650      	mov	r0, sl
 800d2d8:	4642      	mov	r2, r8
 800d2da:	464b      	mov	r3, r9
 800d2dc:	4659      	mov	r1, fp
 800d2de:	f7f2 ffd3 	bl	8000288 <__aeabi_dsub>
 800d2e2:	463b      	mov	r3, r7
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	f7f2 ffcf 	bl	8000288 <__aeabi_dsub>
 800d2ea:	9b04      	ldr	r3, [sp, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d2f2:	f6bf af0e 	bge.w	800d112 <__ieee754_rem_pio2+0x7a>
 800d2f6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d2fa:	6063      	str	r3, [r4, #4]
 800d2fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d300:	f8c4 8000 	str.w	r8, [r4]
 800d304:	60a0      	str	r0, [r4, #8]
 800d306:	60e3      	str	r3, [r4, #12]
 800d308:	426d      	negs	r5, r5
 800d30a:	e702      	b.n	800d112 <__ieee754_rem_pio2+0x7a>
 800d30c:	a326      	add	r3, pc, #152	@ (adr r3, 800d3a8 <__ieee754_rem_pio2+0x310>)
 800d30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d316:	f7f3 f96f 	bl	80005f8 <__aeabi_dmul>
 800d31a:	4606      	mov	r6, r0
 800d31c:	460f      	mov	r7, r1
 800d31e:	4602      	mov	r2, r0
 800d320:	460b      	mov	r3, r1
 800d322:	4640      	mov	r0, r8
 800d324:	4649      	mov	r1, r9
 800d326:	f7f2 ffaf 	bl	8000288 <__aeabi_dsub>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4682      	mov	sl, r0
 800d330:	468b      	mov	fp, r1
 800d332:	4640      	mov	r0, r8
 800d334:	4649      	mov	r1, r9
 800d336:	f7f2 ffa7 	bl	8000288 <__aeabi_dsub>
 800d33a:	4632      	mov	r2, r6
 800d33c:	463b      	mov	r3, r7
 800d33e:	f7f2 ffa3 	bl	8000288 <__aeabi_dsub>
 800d342:	a31b      	add	r3, pc, #108	@ (adr r3, 800d3b0 <__ieee754_rem_pio2+0x318>)
 800d344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d348:	4606      	mov	r6, r0
 800d34a:	460f      	mov	r7, r1
 800d34c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d350:	f7f3 f952 	bl	80005f8 <__aeabi_dmul>
 800d354:	4632      	mov	r2, r6
 800d356:	463b      	mov	r3, r7
 800d358:	f7f2 ff96 	bl	8000288 <__aeabi_dsub>
 800d35c:	4606      	mov	r6, r0
 800d35e:	460f      	mov	r7, r1
 800d360:	e764      	b.n	800d22c <__ieee754_rem_pio2+0x194>
 800d362:	4b1b      	ldr	r3, [pc, #108]	@ (800d3d0 <__ieee754_rem_pio2+0x338>)
 800d364:	4598      	cmp	r8, r3
 800d366:	d935      	bls.n	800d3d4 <__ieee754_rem_pio2+0x33c>
 800d368:	4632      	mov	r2, r6
 800d36a:	463b      	mov	r3, r7
 800d36c:	4630      	mov	r0, r6
 800d36e:	4639      	mov	r1, r7
 800d370:	f7f2 ff8a 	bl	8000288 <__aeabi_dsub>
 800d374:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d378:	e9c4 0100 	strd	r0, r1, [r4]
 800d37c:	e69e      	b.n	800d0bc <__ieee754_rem_pio2+0x24>
 800d37e:	bf00      	nop
 800d380:	54400000 	.word	0x54400000
 800d384:	3ff921fb 	.word	0x3ff921fb
 800d388:	1a626331 	.word	0x1a626331
 800d38c:	3dd0b461 	.word	0x3dd0b461
 800d390:	1a600000 	.word	0x1a600000
 800d394:	3dd0b461 	.word	0x3dd0b461
 800d398:	2e037073 	.word	0x2e037073
 800d39c:	3ba3198a 	.word	0x3ba3198a
 800d3a0:	6dc9c883 	.word	0x6dc9c883
 800d3a4:	3fe45f30 	.word	0x3fe45f30
 800d3a8:	2e000000 	.word	0x2e000000
 800d3ac:	3ba3198a 	.word	0x3ba3198a
 800d3b0:	252049c1 	.word	0x252049c1
 800d3b4:	397b839a 	.word	0x397b839a
 800d3b8:	3fe921fb 	.word	0x3fe921fb
 800d3bc:	4002d97b 	.word	0x4002d97b
 800d3c0:	3ff921fb 	.word	0x3ff921fb
 800d3c4:	413921fb 	.word	0x413921fb
 800d3c8:	3fe00000 	.word	0x3fe00000
 800d3cc:	0800e358 	.word	0x0800e358
 800d3d0:	7fefffff 	.word	0x7fefffff
 800d3d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d3d8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d3dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	460f      	mov	r7, r1
 800d3e4:	f7f3 fbb8 	bl	8000b58 <__aeabi_d2iz>
 800d3e8:	f7f3 f89c 	bl	8000524 <__aeabi_i2d>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	4639      	mov	r1, r7
 800d3f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3f8:	f7f2 ff46 	bl	8000288 <__aeabi_dsub>
 800d3fc:	4b22      	ldr	r3, [pc, #136]	@ (800d488 <__ieee754_rem_pio2+0x3f0>)
 800d3fe:	2200      	movs	r2, #0
 800d400:	f7f3 f8fa 	bl	80005f8 <__aeabi_dmul>
 800d404:	460f      	mov	r7, r1
 800d406:	4606      	mov	r6, r0
 800d408:	f7f3 fba6 	bl	8000b58 <__aeabi_d2iz>
 800d40c:	f7f3 f88a 	bl	8000524 <__aeabi_i2d>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4630      	mov	r0, r6
 800d416:	4639      	mov	r1, r7
 800d418:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d41c:	f7f2 ff34 	bl	8000288 <__aeabi_dsub>
 800d420:	4b19      	ldr	r3, [pc, #100]	@ (800d488 <__ieee754_rem_pio2+0x3f0>)
 800d422:	2200      	movs	r2, #0
 800d424:	f7f3 f8e8 	bl	80005f8 <__aeabi_dmul>
 800d428:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d42c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d430:	f04f 0803 	mov.w	r8, #3
 800d434:	2600      	movs	r6, #0
 800d436:	2700      	movs	r7, #0
 800d438:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d43c:	4632      	mov	r2, r6
 800d43e:	463b      	mov	r3, r7
 800d440:	46c2      	mov	sl, r8
 800d442:	f108 38ff 	add.w	r8, r8, #4294967295
 800d446:	f7f3 fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d1f4      	bne.n	800d438 <__ieee754_rem_pio2+0x3a0>
 800d44e:	4b0f      	ldr	r3, [pc, #60]	@ (800d48c <__ieee754_rem_pio2+0x3f4>)
 800d450:	9301      	str	r3, [sp, #4]
 800d452:	2302      	movs	r3, #2
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	462a      	mov	r2, r5
 800d458:	4653      	mov	r3, sl
 800d45a:	4621      	mov	r1, r4
 800d45c:	a806      	add	r0, sp, #24
 800d45e:	f000 f81f 	bl	800d4a0 <__kernel_rem_pio2>
 800d462:	9b04      	ldr	r3, [sp, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	4605      	mov	r5, r0
 800d468:	f6bf ae53 	bge.w	800d112 <__ieee754_rem_pio2+0x7a>
 800d46c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d470:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d474:	e9c4 2300 	strd	r2, r3, [r4]
 800d478:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d47c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d480:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d484:	e740      	b.n	800d308 <__ieee754_rem_pio2+0x270>
 800d486:	bf00      	nop
 800d488:	41700000 	.word	0x41700000
 800d48c:	0800e3d8 	.word	0x0800e3d8

0800d490 <fabs>:
 800d490:	ec51 0b10 	vmov	r0, r1, d0
 800d494:	4602      	mov	r2, r0
 800d496:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d49a:	ec43 2b10 	vmov	d0, r2, r3
 800d49e:	4770      	bx	lr

0800d4a0 <__kernel_rem_pio2>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	ed2d 8b02 	vpush	{d8}
 800d4a8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d4ac:	f112 0f14 	cmn.w	r2, #20
 800d4b0:	9306      	str	r3, [sp, #24]
 800d4b2:	9104      	str	r1, [sp, #16]
 800d4b4:	4bc2      	ldr	r3, [pc, #776]	@ (800d7c0 <__kernel_rem_pio2+0x320>)
 800d4b6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d4b8:	9008      	str	r0, [sp, #32]
 800d4ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	9b06      	ldr	r3, [sp, #24]
 800d4c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d4c6:	bfa8      	it	ge
 800d4c8:	1ed4      	subge	r4, r2, #3
 800d4ca:	9305      	str	r3, [sp, #20]
 800d4cc:	bfb2      	itee	lt
 800d4ce:	2400      	movlt	r4, #0
 800d4d0:	2318      	movge	r3, #24
 800d4d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d4d6:	f06f 0317 	mvn.w	r3, #23
 800d4da:	fb04 3303 	mla	r3, r4, r3, r3
 800d4de:	eb03 0b02 	add.w	fp, r3, r2
 800d4e2:	9b00      	ldr	r3, [sp, #0]
 800d4e4:	9a05      	ldr	r2, [sp, #20]
 800d4e6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800d7b0 <__kernel_rem_pio2+0x310>
 800d4ea:	eb03 0802 	add.w	r8, r3, r2
 800d4ee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d4f0:	1aa7      	subs	r7, r4, r2
 800d4f2:	ae20      	add	r6, sp, #128	@ 0x80
 800d4f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d4f8:	2500      	movs	r5, #0
 800d4fa:	4545      	cmp	r5, r8
 800d4fc:	dd12      	ble.n	800d524 <__kernel_rem_pio2+0x84>
 800d4fe:	9b06      	ldr	r3, [sp, #24]
 800d500:	aa20      	add	r2, sp, #128	@ 0x80
 800d502:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d506:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d50a:	2700      	movs	r7, #0
 800d50c:	9b00      	ldr	r3, [sp, #0]
 800d50e:	429f      	cmp	r7, r3
 800d510:	dc2e      	bgt.n	800d570 <__kernel_rem_pio2+0xd0>
 800d512:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800d7b0 <__kernel_rem_pio2+0x310>
 800d516:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d51a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d51e:	46a8      	mov	r8, r5
 800d520:	2600      	movs	r6, #0
 800d522:	e01b      	b.n	800d55c <__kernel_rem_pio2+0xbc>
 800d524:	42ef      	cmn	r7, r5
 800d526:	d407      	bmi.n	800d538 <__kernel_rem_pio2+0x98>
 800d528:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d52c:	f7f2 fffa 	bl	8000524 <__aeabi_i2d>
 800d530:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d534:	3501      	adds	r5, #1
 800d536:	e7e0      	b.n	800d4fa <__kernel_rem_pio2+0x5a>
 800d538:	ec51 0b18 	vmov	r0, r1, d8
 800d53c:	e7f8      	b.n	800d530 <__kernel_rem_pio2+0x90>
 800d53e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800d542:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d546:	f7f3 f857 	bl	80005f8 <__aeabi_dmul>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d552:	f7f2 fe9b 	bl	800028c <__adddf3>
 800d556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d55a:	3601      	adds	r6, #1
 800d55c:	9b05      	ldr	r3, [sp, #20]
 800d55e:	429e      	cmp	r6, r3
 800d560:	dded      	ble.n	800d53e <__kernel_rem_pio2+0x9e>
 800d562:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d566:	3701      	adds	r7, #1
 800d568:	ecaa 7b02 	vstmia	sl!, {d7}
 800d56c:	3508      	adds	r5, #8
 800d56e:	e7cd      	b.n	800d50c <__kernel_rem_pio2+0x6c>
 800d570:	9b00      	ldr	r3, [sp, #0]
 800d572:	f8dd 8000 	ldr.w	r8, [sp]
 800d576:	aa0c      	add	r2, sp, #48	@ 0x30
 800d578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d57c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d57e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d580:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d584:	9309      	str	r3, [sp, #36]	@ 0x24
 800d586:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d58a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d58c:	ab98      	add	r3, sp, #608	@ 0x260
 800d58e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d592:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d596:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d59a:	ac0c      	add	r4, sp, #48	@ 0x30
 800d59c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d59e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d5a2:	46a1      	mov	r9, r4
 800d5a4:	46c2      	mov	sl, r8
 800d5a6:	f1ba 0f00 	cmp.w	sl, #0
 800d5aa:	dc77      	bgt.n	800d69c <__kernel_rem_pio2+0x1fc>
 800d5ac:	4658      	mov	r0, fp
 800d5ae:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d5b2:	f000 fac5 	bl	800db40 <scalbn>
 800d5b6:	ec57 6b10 	vmov	r6, r7, d0
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	4639      	mov	r1, r7
 800d5c4:	f7f3 f818 	bl	80005f8 <__aeabi_dmul>
 800d5c8:	ec41 0b10 	vmov	d0, r0, r1
 800d5cc:	f000 fb34 	bl	800dc38 <floor>
 800d5d0:	4b7c      	ldr	r3, [pc, #496]	@ (800d7c4 <__kernel_rem_pio2+0x324>)
 800d5d2:	ec51 0b10 	vmov	r0, r1, d0
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f7f3 f80e 	bl	80005f8 <__aeabi_dmul>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	4639      	mov	r1, r7
 800d5e4:	f7f2 fe50 	bl	8000288 <__aeabi_dsub>
 800d5e8:	460f      	mov	r7, r1
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	f7f3 fab4 	bl	8000b58 <__aeabi_d2iz>
 800d5f0:	9002      	str	r0, [sp, #8]
 800d5f2:	f7f2 ff97 	bl	8000524 <__aeabi_i2d>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	f7f2 fe43 	bl	8000288 <__aeabi_dsub>
 800d602:	f1bb 0f00 	cmp.w	fp, #0
 800d606:	4606      	mov	r6, r0
 800d608:	460f      	mov	r7, r1
 800d60a:	dd6c      	ble.n	800d6e6 <__kernel_rem_pio2+0x246>
 800d60c:	f108 31ff 	add.w	r1, r8, #4294967295
 800d610:	ab0c      	add	r3, sp, #48	@ 0x30
 800d612:	9d02      	ldr	r5, [sp, #8]
 800d614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d618:	f1cb 0018 	rsb	r0, fp, #24
 800d61c:	fa43 f200 	asr.w	r2, r3, r0
 800d620:	4415      	add	r5, r2
 800d622:	4082      	lsls	r2, r0
 800d624:	1a9b      	subs	r3, r3, r2
 800d626:	aa0c      	add	r2, sp, #48	@ 0x30
 800d628:	9502      	str	r5, [sp, #8]
 800d62a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d62e:	f1cb 0217 	rsb	r2, fp, #23
 800d632:	fa43 f902 	asr.w	r9, r3, r2
 800d636:	f1b9 0f00 	cmp.w	r9, #0
 800d63a:	dd64      	ble.n	800d706 <__kernel_rem_pio2+0x266>
 800d63c:	9b02      	ldr	r3, [sp, #8]
 800d63e:	2200      	movs	r2, #0
 800d640:	3301      	adds	r3, #1
 800d642:	9302      	str	r3, [sp, #8]
 800d644:	4615      	mov	r5, r2
 800d646:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d64a:	4590      	cmp	r8, r2
 800d64c:	f300 80a1 	bgt.w	800d792 <__kernel_rem_pio2+0x2f2>
 800d650:	f1bb 0f00 	cmp.w	fp, #0
 800d654:	dd07      	ble.n	800d666 <__kernel_rem_pio2+0x1c6>
 800d656:	f1bb 0f01 	cmp.w	fp, #1
 800d65a:	f000 80c1 	beq.w	800d7e0 <__kernel_rem_pio2+0x340>
 800d65e:	f1bb 0f02 	cmp.w	fp, #2
 800d662:	f000 80c8 	beq.w	800d7f6 <__kernel_rem_pio2+0x356>
 800d666:	f1b9 0f02 	cmp.w	r9, #2
 800d66a:	d14c      	bne.n	800d706 <__kernel_rem_pio2+0x266>
 800d66c:	4632      	mov	r2, r6
 800d66e:	463b      	mov	r3, r7
 800d670:	4955      	ldr	r1, [pc, #340]	@ (800d7c8 <__kernel_rem_pio2+0x328>)
 800d672:	2000      	movs	r0, #0
 800d674:	f7f2 fe08 	bl	8000288 <__aeabi_dsub>
 800d678:	4606      	mov	r6, r0
 800d67a:	460f      	mov	r7, r1
 800d67c:	2d00      	cmp	r5, #0
 800d67e:	d042      	beq.n	800d706 <__kernel_rem_pio2+0x266>
 800d680:	4658      	mov	r0, fp
 800d682:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800d7b8 <__kernel_rem_pio2+0x318>
 800d686:	f000 fa5b 	bl	800db40 <scalbn>
 800d68a:	4630      	mov	r0, r6
 800d68c:	4639      	mov	r1, r7
 800d68e:	ec53 2b10 	vmov	r2, r3, d0
 800d692:	f7f2 fdf9 	bl	8000288 <__aeabi_dsub>
 800d696:	4606      	mov	r6, r0
 800d698:	460f      	mov	r7, r1
 800d69a:	e034      	b.n	800d706 <__kernel_rem_pio2+0x266>
 800d69c:	4b4b      	ldr	r3, [pc, #300]	@ (800d7cc <__kernel_rem_pio2+0x32c>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6a4:	f7f2 ffa8 	bl	80005f8 <__aeabi_dmul>
 800d6a8:	f7f3 fa56 	bl	8000b58 <__aeabi_d2iz>
 800d6ac:	f7f2 ff3a 	bl	8000524 <__aeabi_i2d>
 800d6b0:	4b47      	ldr	r3, [pc, #284]	@ (800d7d0 <__kernel_rem_pio2+0x330>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	4606      	mov	r6, r0
 800d6b6:	460f      	mov	r7, r1
 800d6b8:	f7f2 ff9e 	bl	80005f8 <__aeabi_dmul>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6c4:	f7f2 fde0 	bl	8000288 <__aeabi_dsub>
 800d6c8:	f7f3 fa46 	bl	8000b58 <__aeabi_d2iz>
 800d6cc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d6d0:	f849 0b04 	str.w	r0, [r9], #4
 800d6d4:	4639      	mov	r1, r7
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f7f2 fdd8 	bl	800028c <__adddf3>
 800d6dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6e4:	e75f      	b.n	800d5a6 <__kernel_rem_pio2+0x106>
 800d6e6:	d107      	bne.n	800d6f8 <__kernel_rem_pio2+0x258>
 800d6e8:	f108 33ff 	add.w	r3, r8, #4294967295
 800d6ec:	aa0c      	add	r2, sp, #48	@ 0x30
 800d6ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6f2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800d6f6:	e79e      	b.n	800d636 <__kernel_rem_pio2+0x196>
 800d6f8:	4b36      	ldr	r3, [pc, #216]	@ (800d7d4 <__kernel_rem_pio2+0x334>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f7f3 fa02 	bl	8000b04 <__aeabi_dcmpge>
 800d700:	2800      	cmp	r0, #0
 800d702:	d143      	bne.n	800d78c <__kernel_rem_pio2+0x2ec>
 800d704:	4681      	mov	r9, r0
 800d706:	2200      	movs	r2, #0
 800d708:	2300      	movs	r3, #0
 800d70a:	4630      	mov	r0, r6
 800d70c:	4639      	mov	r1, r7
 800d70e:	f7f3 f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 800d712:	2800      	cmp	r0, #0
 800d714:	f000 80c1 	beq.w	800d89a <__kernel_rem_pio2+0x3fa>
 800d718:	f108 33ff 	add.w	r3, r8, #4294967295
 800d71c:	2200      	movs	r2, #0
 800d71e:	9900      	ldr	r1, [sp, #0]
 800d720:	428b      	cmp	r3, r1
 800d722:	da70      	bge.n	800d806 <__kernel_rem_pio2+0x366>
 800d724:	2a00      	cmp	r2, #0
 800d726:	f000 808b 	beq.w	800d840 <__kernel_rem_pio2+0x3a0>
 800d72a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d72e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d730:	f1ab 0b18 	sub.w	fp, fp, #24
 800d734:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d0f6      	beq.n	800d72a <__kernel_rem_pio2+0x28a>
 800d73c:	4658      	mov	r0, fp
 800d73e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800d7b8 <__kernel_rem_pio2+0x318>
 800d742:	f000 f9fd 	bl	800db40 <scalbn>
 800d746:	f108 0301 	add.w	r3, r8, #1
 800d74a:	00da      	lsls	r2, r3, #3
 800d74c:	9205      	str	r2, [sp, #20]
 800d74e:	ec55 4b10 	vmov	r4, r5, d0
 800d752:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d754:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800d7cc <__kernel_rem_pio2+0x32c>
 800d758:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d75c:	4646      	mov	r6, r8
 800d75e:	f04f 0a00 	mov.w	sl, #0
 800d762:	2e00      	cmp	r6, #0
 800d764:	f280 80d1 	bge.w	800d90a <__kernel_rem_pio2+0x46a>
 800d768:	4644      	mov	r4, r8
 800d76a:	2c00      	cmp	r4, #0
 800d76c:	f2c0 80ff 	blt.w	800d96e <__kernel_rem_pio2+0x4ce>
 800d770:	4b19      	ldr	r3, [pc, #100]	@ (800d7d8 <__kernel_rem_pio2+0x338>)
 800d772:	461f      	mov	r7, r3
 800d774:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d776:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d77a:	9306      	str	r3, [sp, #24]
 800d77c:	f04f 0a00 	mov.w	sl, #0
 800d780:	f04f 0b00 	mov.w	fp, #0
 800d784:	2600      	movs	r6, #0
 800d786:	eba8 0504 	sub.w	r5, r8, r4
 800d78a:	e0e4      	b.n	800d956 <__kernel_rem_pio2+0x4b6>
 800d78c:	f04f 0902 	mov.w	r9, #2
 800d790:	e754      	b.n	800d63c <__kernel_rem_pio2+0x19c>
 800d792:	f854 3b04 	ldr.w	r3, [r4], #4
 800d796:	bb0d      	cbnz	r5, 800d7dc <__kernel_rem_pio2+0x33c>
 800d798:	b123      	cbz	r3, 800d7a4 <__kernel_rem_pio2+0x304>
 800d79a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d79e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	3201      	adds	r2, #1
 800d7a6:	461d      	mov	r5, r3
 800d7a8:	e74f      	b.n	800d64a <__kernel_rem_pio2+0x1aa>
 800d7aa:	bf00      	nop
 800d7ac:	f3af 8000 	nop.w
	...
 800d7bc:	3ff00000 	.word	0x3ff00000
 800d7c0:	0800e520 	.word	0x0800e520
 800d7c4:	40200000 	.word	0x40200000
 800d7c8:	3ff00000 	.word	0x3ff00000
 800d7cc:	3e700000 	.word	0x3e700000
 800d7d0:	41700000 	.word	0x41700000
 800d7d4:	3fe00000 	.word	0x3fe00000
 800d7d8:	0800e4e0 	.word	0x0800e4e0
 800d7dc:	1acb      	subs	r3, r1, r3
 800d7de:	e7de      	b.n	800d79e <__kernel_rem_pio2+0x2fe>
 800d7e0:	f108 32ff 	add.w	r2, r8, #4294967295
 800d7e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d7ee:	a90c      	add	r1, sp, #48	@ 0x30
 800d7f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d7f4:	e737      	b.n	800d666 <__kernel_rem_pio2+0x1c6>
 800d7f6:	f108 32ff 	add.w	r2, r8, #4294967295
 800d7fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800d7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d800:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d804:	e7f3      	b.n	800d7ee <__kernel_rem_pio2+0x34e>
 800d806:	a90c      	add	r1, sp, #48	@ 0x30
 800d808:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d80c:	3b01      	subs	r3, #1
 800d80e:	430a      	orrs	r2, r1
 800d810:	e785      	b.n	800d71e <__kernel_rem_pio2+0x27e>
 800d812:	3401      	adds	r4, #1
 800d814:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d818:	2a00      	cmp	r2, #0
 800d81a:	d0fa      	beq.n	800d812 <__kernel_rem_pio2+0x372>
 800d81c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d81e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d822:	eb0d 0503 	add.w	r5, sp, r3
 800d826:	9b06      	ldr	r3, [sp, #24]
 800d828:	aa20      	add	r2, sp, #128	@ 0x80
 800d82a:	4443      	add	r3, r8
 800d82c:	f108 0701 	add.w	r7, r8, #1
 800d830:	3d98      	subs	r5, #152	@ 0x98
 800d832:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d836:	4444      	add	r4, r8
 800d838:	42bc      	cmp	r4, r7
 800d83a:	da04      	bge.n	800d846 <__kernel_rem_pio2+0x3a6>
 800d83c:	46a0      	mov	r8, r4
 800d83e:	e6a2      	b.n	800d586 <__kernel_rem_pio2+0xe6>
 800d840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d842:	2401      	movs	r4, #1
 800d844:	e7e6      	b.n	800d814 <__kernel_rem_pio2+0x374>
 800d846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d848:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d84c:	f7f2 fe6a 	bl	8000524 <__aeabi_i2d>
 800d850:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800db10 <__kernel_rem_pio2+0x670>
 800d854:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d858:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d85c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d860:	46b2      	mov	sl, r6
 800d862:	f04f 0800 	mov.w	r8, #0
 800d866:	9b05      	ldr	r3, [sp, #20]
 800d868:	4598      	cmp	r8, r3
 800d86a:	dd05      	ble.n	800d878 <__kernel_rem_pio2+0x3d8>
 800d86c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d870:	3701      	adds	r7, #1
 800d872:	eca5 7b02 	vstmia	r5!, {d7}
 800d876:	e7df      	b.n	800d838 <__kernel_rem_pio2+0x398>
 800d878:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d87c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d880:	f7f2 feba 	bl	80005f8 <__aeabi_dmul>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d88c:	f7f2 fcfe 	bl	800028c <__adddf3>
 800d890:	f108 0801 	add.w	r8, r8, #1
 800d894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d898:	e7e5      	b.n	800d866 <__kernel_rem_pio2+0x3c6>
 800d89a:	f1cb 0000 	rsb	r0, fp, #0
 800d89e:	ec47 6b10 	vmov	d0, r6, r7
 800d8a2:	f000 f94d 	bl	800db40 <scalbn>
 800d8a6:	ec55 4b10 	vmov	r4, r5, d0
 800d8aa:	4b9b      	ldr	r3, [pc, #620]	@ (800db18 <__kernel_rem_pio2+0x678>)
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	f7f3 f927 	bl	8000b04 <__aeabi_dcmpge>
 800d8b6:	b300      	cbz	r0, 800d8fa <__kernel_rem_pio2+0x45a>
 800d8b8:	4b98      	ldr	r3, [pc, #608]	@ (800db1c <__kernel_rem_pio2+0x67c>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	4620      	mov	r0, r4
 800d8be:	4629      	mov	r1, r5
 800d8c0:	f7f2 fe9a 	bl	80005f8 <__aeabi_dmul>
 800d8c4:	f7f3 f948 	bl	8000b58 <__aeabi_d2iz>
 800d8c8:	4606      	mov	r6, r0
 800d8ca:	f7f2 fe2b 	bl	8000524 <__aeabi_i2d>
 800d8ce:	4b92      	ldr	r3, [pc, #584]	@ (800db18 <__kernel_rem_pio2+0x678>)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f7f2 fe91 	bl	80005f8 <__aeabi_dmul>
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	4602      	mov	r2, r0
 800d8da:	4629      	mov	r1, r5
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f7f2 fcd3 	bl	8000288 <__aeabi_dsub>
 800d8e2:	f7f3 f939 	bl	8000b58 <__aeabi_d2iz>
 800d8e6:	ab0c      	add	r3, sp, #48	@ 0x30
 800d8e8:	f10b 0b18 	add.w	fp, fp, #24
 800d8ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d8f0:	f108 0801 	add.w	r8, r8, #1
 800d8f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d8f8:	e720      	b.n	800d73c <__kernel_rem_pio2+0x29c>
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7f3 f92b 	bl	8000b58 <__aeabi_d2iz>
 800d902:	ab0c      	add	r3, sp, #48	@ 0x30
 800d904:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d908:	e718      	b.n	800d73c <__kernel_rem_pio2+0x29c>
 800d90a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d90c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d910:	f7f2 fe08 	bl	8000524 <__aeabi_i2d>
 800d914:	4622      	mov	r2, r4
 800d916:	462b      	mov	r3, r5
 800d918:	f7f2 fe6e 	bl	80005f8 <__aeabi_dmul>
 800d91c:	4652      	mov	r2, sl
 800d91e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d922:	465b      	mov	r3, fp
 800d924:	4620      	mov	r0, r4
 800d926:	4629      	mov	r1, r5
 800d928:	f7f2 fe66 	bl	80005f8 <__aeabi_dmul>
 800d92c:	3e01      	subs	r6, #1
 800d92e:	4604      	mov	r4, r0
 800d930:	460d      	mov	r5, r1
 800d932:	e716      	b.n	800d762 <__kernel_rem_pio2+0x2c2>
 800d934:	9906      	ldr	r1, [sp, #24]
 800d936:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d93a:	9106      	str	r1, [sp, #24]
 800d93c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d940:	f7f2 fe5a 	bl	80005f8 <__aeabi_dmul>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4650      	mov	r0, sl
 800d94a:	4659      	mov	r1, fp
 800d94c:	f7f2 fc9e 	bl	800028c <__adddf3>
 800d950:	3601      	adds	r6, #1
 800d952:	4682      	mov	sl, r0
 800d954:	468b      	mov	fp, r1
 800d956:	9b00      	ldr	r3, [sp, #0]
 800d958:	429e      	cmp	r6, r3
 800d95a:	dc01      	bgt.n	800d960 <__kernel_rem_pio2+0x4c0>
 800d95c:	42ae      	cmp	r6, r5
 800d95e:	dde9      	ble.n	800d934 <__kernel_rem_pio2+0x494>
 800d960:	ab48      	add	r3, sp, #288	@ 0x120
 800d962:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d966:	e9c5 ab00 	strd	sl, fp, [r5]
 800d96a:	3c01      	subs	r4, #1
 800d96c:	e6fd      	b.n	800d76a <__kernel_rem_pio2+0x2ca>
 800d96e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d970:	2b02      	cmp	r3, #2
 800d972:	dc0b      	bgt.n	800d98c <__kernel_rem_pio2+0x4ec>
 800d974:	2b00      	cmp	r3, #0
 800d976:	dc35      	bgt.n	800d9e4 <__kernel_rem_pio2+0x544>
 800d978:	d059      	beq.n	800da2e <__kernel_rem_pio2+0x58e>
 800d97a:	9b02      	ldr	r3, [sp, #8]
 800d97c:	f003 0007 	and.w	r0, r3, #7
 800d980:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d984:	ecbd 8b02 	vpop	{d8}
 800d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d1f3      	bne.n	800d97a <__kernel_rem_pio2+0x4da>
 800d992:	9b05      	ldr	r3, [sp, #20]
 800d994:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d998:	eb0d 0403 	add.w	r4, sp, r3
 800d99c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d9a0:	4625      	mov	r5, r4
 800d9a2:	46c2      	mov	sl, r8
 800d9a4:	f1ba 0f00 	cmp.w	sl, #0
 800d9a8:	dc69      	bgt.n	800da7e <__kernel_rem_pio2+0x5de>
 800d9aa:	4645      	mov	r5, r8
 800d9ac:	2d01      	cmp	r5, #1
 800d9ae:	f300 8087 	bgt.w	800dac0 <__kernel_rem_pio2+0x620>
 800d9b2:	9c05      	ldr	r4, [sp, #20]
 800d9b4:	ab48      	add	r3, sp, #288	@ 0x120
 800d9b6:	441c      	add	r4, r3
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	f1b8 0f01 	cmp.w	r8, #1
 800d9c0:	f300 809c 	bgt.w	800dafc <__kernel_rem_pio2+0x65c>
 800d9c4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800d9c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800d9cc:	f1b9 0f00 	cmp.w	r9, #0
 800d9d0:	f040 80a6 	bne.w	800db20 <__kernel_rem_pio2+0x680>
 800d9d4:	9b04      	ldr	r3, [sp, #16]
 800d9d6:	e9c3 5600 	strd	r5, r6, [r3]
 800d9da:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d9de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d9e2:	e7ca      	b.n	800d97a <__kernel_rem_pio2+0x4da>
 800d9e4:	9d05      	ldr	r5, [sp, #20]
 800d9e6:	ab48      	add	r3, sp, #288	@ 0x120
 800d9e8:	441d      	add	r5, r3
 800d9ea:	4644      	mov	r4, r8
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	2c00      	cmp	r4, #0
 800d9f2:	da35      	bge.n	800da60 <__kernel_rem_pio2+0x5c0>
 800d9f4:	f1b9 0f00 	cmp.w	r9, #0
 800d9f8:	d038      	beq.n	800da6c <__kernel_rem_pio2+0x5cc>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da00:	9c04      	ldr	r4, [sp, #16]
 800da02:	e9c4 2300 	strd	r2, r3, [r4]
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800da0e:	f7f2 fc3b 	bl	8000288 <__aeabi_dsub>
 800da12:	ad4a      	add	r5, sp, #296	@ 0x128
 800da14:	2401      	movs	r4, #1
 800da16:	45a0      	cmp	r8, r4
 800da18:	da2b      	bge.n	800da72 <__kernel_rem_pio2+0x5d2>
 800da1a:	f1b9 0f00 	cmp.w	r9, #0
 800da1e:	d002      	beq.n	800da26 <__kernel_rem_pio2+0x586>
 800da20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da24:	4619      	mov	r1, r3
 800da26:	9b04      	ldr	r3, [sp, #16]
 800da28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800da2c:	e7a5      	b.n	800d97a <__kernel_rem_pio2+0x4da>
 800da2e:	9c05      	ldr	r4, [sp, #20]
 800da30:	ab48      	add	r3, sp, #288	@ 0x120
 800da32:	441c      	add	r4, r3
 800da34:	2000      	movs	r0, #0
 800da36:	2100      	movs	r1, #0
 800da38:	f1b8 0f00 	cmp.w	r8, #0
 800da3c:	da09      	bge.n	800da52 <__kernel_rem_pio2+0x5b2>
 800da3e:	f1b9 0f00 	cmp.w	r9, #0
 800da42:	d002      	beq.n	800da4a <__kernel_rem_pio2+0x5aa>
 800da44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da48:	4619      	mov	r1, r3
 800da4a:	9b04      	ldr	r3, [sp, #16]
 800da4c:	e9c3 0100 	strd	r0, r1, [r3]
 800da50:	e793      	b.n	800d97a <__kernel_rem_pio2+0x4da>
 800da52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800da56:	f7f2 fc19 	bl	800028c <__adddf3>
 800da5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800da5e:	e7eb      	b.n	800da38 <__kernel_rem_pio2+0x598>
 800da60:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800da64:	f7f2 fc12 	bl	800028c <__adddf3>
 800da68:	3c01      	subs	r4, #1
 800da6a:	e7c1      	b.n	800d9f0 <__kernel_rem_pio2+0x550>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	e7c6      	b.n	800da00 <__kernel_rem_pio2+0x560>
 800da72:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800da76:	f7f2 fc09 	bl	800028c <__adddf3>
 800da7a:	3401      	adds	r4, #1
 800da7c:	e7cb      	b.n	800da16 <__kernel_rem_pio2+0x576>
 800da7e:	ed35 7b02 	vldmdb	r5!, {d7}
 800da82:	ed8d 7b00 	vstr	d7, [sp]
 800da86:	ed95 7b02 	vldr	d7, [r5, #8]
 800da8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da8e:	ec53 2b17 	vmov	r2, r3, d7
 800da92:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da96:	f7f2 fbf9 	bl	800028c <__adddf3>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	4606      	mov	r6, r0
 800daa0:	460f      	mov	r7, r1
 800daa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daa6:	f7f2 fbef 	bl	8000288 <__aeabi_dsub>
 800daaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800daae:	f7f2 fbed 	bl	800028c <__adddf3>
 800dab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dab6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800daba:	e9c5 6700 	strd	r6, r7, [r5]
 800dabe:	e771      	b.n	800d9a4 <__kernel_rem_pio2+0x504>
 800dac0:	ed34 7b02 	vldmdb	r4!, {d7}
 800dac4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800dac8:	ec51 0b17 	vmov	r0, r1, d7
 800dacc:	4652      	mov	r2, sl
 800dace:	465b      	mov	r3, fp
 800dad0:	ed8d 7b00 	vstr	d7, [sp]
 800dad4:	f7f2 fbda 	bl	800028c <__adddf3>
 800dad8:	4602      	mov	r2, r0
 800dada:	460b      	mov	r3, r1
 800dadc:	4606      	mov	r6, r0
 800dade:	460f      	mov	r7, r1
 800dae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dae4:	f7f2 fbd0 	bl	8000288 <__aeabi_dsub>
 800dae8:	4652      	mov	r2, sl
 800daea:	465b      	mov	r3, fp
 800daec:	f7f2 fbce 	bl	800028c <__adddf3>
 800daf0:	3d01      	subs	r5, #1
 800daf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800daf6:	e9c4 6700 	strd	r6, r7, [r4]
 800dafa:	e757      	b.n	800d9ac <__kernel_rem_pio2+0x50c>
 800dafc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800db00:	f7f2 fbc4 	bl	800028c <__adddf3>
 800db04:	f108 38ff 	add.w	r8, r8, #4294967295
 800db08:	e758      	b.n	800d9bc <__kernel_rem_pio2+0x51c>
 800db0a:	bf00      	nop
 800db0c:	f3af 8000 	nop.w
	...
 800db18:	41700000 	.word	0x41700000
 800db1c:	3e700000 	.word	0x3e700000
 800db20:	9b04      	ldr	r3, [sp, #16]
 800db22:	9a04      	ldr	r2, [sp, #16]
 800db24:	601d      	str	r5, [r3, #0]
 800db26:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800db2a:	605c      	str	r4, [r3, #4]
 800db2c:	609f      	str	r7, [r3, #8]
 800db2e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800db32:	60d3      	str	r3, [r2, #12]
 800db34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db38:	6110      	str	r0, [r2, #16]
 800db3a:	6153      	str	r3, [r2, #20]
 800db3c:	e71d      	b.n	800d97a <__kernel_rem_pio2+0x4da>
 800db3e:	bf00      	nop

0800db40 <scalbn>:
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	ec55 4b10 	vmov	r4, r5, d0
 800db46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800db4a:	4606      	mov	r6, r0
 800db4c:	462b      	mov	r3, r5
 800db4e:	b991      	cbnz	r1, 800db76 <scalbn+0x36>
 800db50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800db54:	4323      	orrs	r3, r4
 800db56:	d03b      	beq.n	800dbd0 <scalbn+0x90>
 800db58:	4b33      	ldr	r3, [pc, #204]	@ (800dc28 <scalbn+0xe8>)
 800db5a:	4620      	mov	r0, r4
 800db5c:	4629      	mov	r1, r5
 800db5e:	2200      	movs	r2, #0
 800db60:	f7f2 fd4a 	bl	80005f8 <__aeabi_dmul>
 800db64:	4b31      	ldr	r3, [pc, #196]	@ (800dc2c <scalbn+0xec>)
 800db66:	429e      	cmp	r6, r3
 800db68:	4604      	mov	r4, r0
 800db6a:	460d      	mov	r5, r1
 800db6c:	da0f      	bge.n	800db8e <scalbn+0x4e>
 800db6e:	a326      	add	r3, pc, #152	@ (adr r3, 800dc08 <scalbn+0xc8>)
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	e01e      	b.n	800dbb4 <scalbn+0x74>
 800db76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800db7a:	4291      	cmp	r1, r2
 800db7c:	d10b      	bne.n	800db96 <scalbn+0x56>
 800db7e:	4622      	mov	r2, r4
 800db80:	4620      	mov	r0, r4
 800db82:	4629      	mov	r1, r5
 800db84:	f7f2 fb82 	bl	800028c <__adddf3>
 800db88:	4604      	mov	r4, r0
 800db8a:	460d      	mov	r5, r1
 800db8c:	e020      	b.n	800dbd0 <scalbn+0x90>
 800db8e:	460b      	mov	r3, r1
 800db90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800db94:	3936      	subs	r1, #54	@ 0x36
 800db96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800db9a:	4296      	cmp	r6, r2
 800db9c:	dd0d      	ble.n	800dbba <scalbn+0x7a>
 800db9e:	2d00      	cmp	r5, #0
 800dba0:	a11b      	add	r1, pc, #108	@ (adr r1, 800dc10 <scalbn+0xd0>)
 800dba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dba6:	da02      	bge.n	800dbae <scalbn+0x6e>
 800dba8:	a11b      	add	r1, pc, #108	@ (adr r1, 800dc18 <scalbn+0xd8>)
 800dbaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbae:	a318      	add	r3, pc, #96	@ (adr r3, 800dc10 <scalbn+0xd0>)
 800dbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb4:	f7f2 fd20 	bl	80005f8 <__aeabi_dmul>
 800dbb8:	e7e6      	b.n	800db88 <scalbn+0x48>
 800dbba:	1872      	adds	r2, r6, r1
 800dbbc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800dbc0:	428a      	cmp	r2, r1
 800dbc2:	dcec      	bgt.n	800db9e <scalbn+0x5e>
 800dbc4:	2a00      	cmp	r2, #0
 800dbc6:	dd06      	ble.n	800dbd6 <scalbn+0x96>
 800dbc8:	f36f 531e 	bfc	r3, #20, #11
 800dbcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dbd0:	ec45 4b10 	vmov	d0, r4, r5
 800dbd4:	bd70      	pop	{r4, r5, r6, pc}
 800dbd6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800dbda:	da08      	bge.n	800dbee <scalbn+0xae>
 800dbdc:	2d00      	cmp	r5, #0
 800dbde:	a10a      	add	r1, pc, #40	@ (adr r1, 800dc08 <scalbn+0xc8>)
 800dbe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbe4:	dac3      	bge.n	800db6e <scalbn+0x2e>
 800dbe6:	a10e      	add	r1, pc, #56	@ (adr r1, 800dc20 <scalbn+0xe0>)
 800dbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbec:	e7bf      	b.n	800db6e <scalbn+0x2e>
 800dbee:	3236      	adds	r2, #54	@ 0x36
 800dbf0:	f36f 531e 	bfc	r3, #20, #11
 800dbf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	4b0d      	ldr	r3, [pc, #52]	@ (800dc30 <scalbn+0xf0>)
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	2200      	movs	r2, #0
 800dc00:	e7d8      	b.n	800dbb4 <scalbn+0x74>
 800dc02:	bf00      	nop
 800dc04:	f3af 8000 	nop.w
 800dc08:	c2f8f359 	.word	0xc2f8f359
 800dc0c:	01a56e1f 	.word	0x01a56e1f
 800dc10:	8800759c 	.word	0x8800759c
 800dc14:	7e37e43c 	.word	0x7e37e43c
 800dc18:	8800759c 	.word	0x8800759c
 800dc1c:	fe37e43c 	.word	0xfe37e43c
 800dc20:	c2f8f359 	.word	0xc2f8f359
 800dc24:	81a56e1f 	.word	0x81a56e1f
 800dc28:	43500000 	.word	0x43500000
 800dc2c:	ffff3cb0 	.word	0xffff3cb0
 800dc30:	3c900000 	.word	0x3c900000
 800dc34:	00000000 	.word	0x00000000

0800dc38 <floor>:
 800dc38:	ec51 0b10 	vmov	r0, r1, d0
 800dc3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc44:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800dc48:	2e13      	cmp	r6, #19
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	4680      	mov	r8, r0
 800dc50:	dc34      	bgt.n	800dcbc <floor+0x84>
 800dc52:	2e00      	cmp	r6, #0
 800dc54:	da17      	bge.n	800dc86 <floor+0x4e>
 800dc56:	a332      	add	r3, pc, #200	@ (adr r3, 800dd20 <floor+0xe8>)
 800dc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5c:	f7f2 fb16 	bl	800028c <__adddf3>
 800dc60:	2200      	movs	r2, #0
 800dc62:	2300      	movs	r3, #0
 800dc64:	f7f2 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 800dc68:	b150      	cbz	r0, 800dc80 <floor+0x48>
 800dc6a:	2c00      	cmp	r4, #0
 800dc6c:	da55      	bge.n	800dd1a <floor+0xe2>
 800dc6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dc72:	432c      	orrs	r4, r5
 800dc74:	2500      	movs	r5, #0
 800dc76:	42ac      	cmp	r4, r5
 800dc78:	4c2b      	ldr	r4, [pc, #172]	@ (800dd28 <floor+0xf0>)
 800dc7a:	bf08      	it	eq
 800dc7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800dc80:	4621      	mov	r1, r4
 800dc82:	4628      	mov	r0, r5
 800dc84:	e023      	b.n	800dcce <floor+0x96>
 800dc86:	4f29      	ldr	r7, [pc, #164]	@ (800dd2c <floor+0xf4>)
 800dc88:	4137      	asrs	r7, r6
 800dc8a:	ea01 0307 	and.w	r3, r1, r7
 800dc8e:	4303      	orrs	r3, r0
 800dc90:	d01d      	beq.n	800dcce <floor+0x96>
 800dc92:	a323      	add	r3, pc, #140	@ (adr r3, 800dd20 <floor+0xe8>)
 800dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc98:	f7f2 faf8 	bl	800028c <__adddf3>
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f7f2 ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	d0eb      	beq.n	800dc80 <floor+0x48>
 800dca8:	2c00      	cmp	r4, #0
 800dcaa:	bfbe      	ittt	lt
 800dcac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800dcb0:	4133      	asrlt	r3, r6
 800dcb2:	18e4      	addlt	r4, r4, r3
 800dcb4:	ea24 0407 	bic.w	r4, r4, r7
 800dcb8:	2500      	movs	r5, #0
 800dcba:	e7e1      	b.n	800dc80 <floor+0x48>
 800dcbc:	2e33      	cmp	r6, #51	@ 0x33
 800dcbe:	dd0a      	ble.n	800dcd6 <floor+0x9e>
 800dcc0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800dcc4:	d103      	bne.n	800dcce <floor+0x96>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	460b      	mov	r3, r1
 800dcca:	f7f2 fadf 	bl	800028c <__adddf3>
 800dcce:	ec41 0b10 	vmov	d0, r0, r1
 800dcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800dcda:	f04f 37ff 	mov.w	r7, #4294967295
 800dcde:	40df      	lsrs	r7, r3
 800dce0:	4207      	tst	r7, r0
 800dce2:	d0f4      	beq.n	800dcce <floor+0x96>
 800dce4:	a30e      	add	r3, pc, #56	@ (adr r3, 800dd20 <floor+0xe8>)
 800dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcea:	f7f2 facf 	bl	800028c <__adddf3>
 800dcee:	2200      	movs	r2, #0
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	f7f2 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d0c2      	beq.n	800dc80 <floor+0x48>
 800dcfa:	2c00      	cmp	r4, #0
 800dcfc:	da0a      	bge.n	800dd14 <floor+0xdc>
 800dcfe:	2e14      	cmp	r6, #20
 800dd00:	d101      	bne.n	800dd06 <floor+0xce>
 800dd02:	3401      	adds	r4, #1
 800dd04:	e006      	b.n	800dd14 <floor+0xdc>
 800dd06:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	40b3      	lsls	r3, r6
 800dd0e:	441d      	add	r5, r3
 800dd10:	4545      	cmp	r5, r8
 800dd12:	d3f6      	bcc.n	800dd02 <floor+0xca>
 800dd14:	ea25 0507 	bic.w	r5, r5, r7
 800dd18:	e7b2      	b.n	800dc80 <floor+0x48>
 800dd1a:	2500      	movs	r5, #0
 800dd1c:	462c      	mov	r4, r5
 800dd1e:	e7af      	b.n	800dc80 <floor+0x48>
 800dd20:	8800759c 	.word	0x8800759c
 800dd24:	7e37e43c 	.word	0x7e37e43c
 800dd28:	bff00000 	.word	0xbff00000
 800dd2c:	000fffff 	.word	0x000fffff

0800dd30 <_init>:
 800dd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd32:	bf00      	nop
 800dd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd36:	bc08      	pop	{r3}
 800dd38:	469e      	mov	lr, r3
 800dd3a:	4770      	bx	lr

0800dd3c <_fini>:
 800dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3e:	bf00      	nop
 800dd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd42:	bc08      	pop	{r3}
 800dd44:	469e      	mov	lr, r3
 800dd46:	4770      	bx	lr
