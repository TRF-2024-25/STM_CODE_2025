
all_pins_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f848  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800f9d8  0800f9d8  000109d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101f8  080101f8  00012258  2**0
                  CONTENTS
  4 .ARM          00000008  080101f8  080101f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010200  08010200  00012258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010200  08010200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010204  08010204  00011204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08010208  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012258  2**0
                  CONTENTS
 10 .bss          00000934  20000258  20000258  00012258  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000b8c  20000b8c  00012258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012258  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013caa  00000000  00000000  00012288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000275b  00000000  00000000  00025f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00028690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f53  00000000  00000000  000299f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cf4  00000000  00000000  0002a943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001618f  00000000  00000000  0004e637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deb92  00000000  00000000  000647c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143358  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c48  00000000  00000000  0014339c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00149fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f9c0 	.word	0x0800f9c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800f9c0 	.word	0x0800f9c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4619      	mov	r1, r3
 800102e:	2007      	movs	r0, #7
 8001030:	f000 f890 	bl	8001154 <bno055_writeData>
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4619      	mov	r1, r3
 800104a:	203d      	movs	r0, #61	@ 0x3d
 800104c:	f000 f882 	bl	8001154 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d103      	bne.n	800105e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001056:	2013      	movs	r0, #19
 8001058:	f000 f870 	bl	800113c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800105c:	e002      	b.n	8001064 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800105e:	2007      	movs	r0, #7
 8001060:	f000 f86c 	bl	800113c <bno055_delay>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ffe3 	bl	800103c <bno055_setOperationMode>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}

0800107a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800107e:	200c      	movs	r0, #12
 8001080:	f7ff ffdc 	bl	800103c <bno055_setOperationMode>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800108c:	2120      	movs	r1, #32
 800108e:	203f      	movs	r0, #63	@ 0x3f
 8001090:	f000 f860 	bl	8001154 <bno055_writeData>
  bno055_delay(700);
 8001094:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001098:	f000 f850 	bl	800113c <bno055_delay>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  bno055_reset();
 80010a6:	f7ff ffef 	bl	8001088 <bno055_reset>

  uint8_t id = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 f939 	bl	800132c <bno055_readData>
  if (id != BNO055_ID) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80010be:	d004      	beq.n	80010ca <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4809      	ldr	r0, [pc, #36]	@ (80010ec <bno055_setup+0x4c>)
 80010c6:	f00a ff47 	bl	800bf58 <iprintf>
  }
  bno055_setPage(0);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ffa8 	bl	8001020 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80010d0:	2100      	movs	r1, #0
 80010d2:	203f      	movs	r0, #63	@ 0x3f
 80010d4:	f000 f83e 	bl	8001154 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80010d8:	f7ff ffc8 	bl	800106c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f000 f82d 	bl	800113c <bno055_delay>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0800f9d8 	.word	0x0800f9d8

080010f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010f4:	f3bf 8f4f 	dsb	sy
}
 80010f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <__NVIC_SystemReset+0x24>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001102:	4904      	ldr	r1, [pc, #16]	@ (8001114 <__NVIC_SystemReset+0x24>)
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_SystemReset+0x28>)
 8001106:	4313      	orrs	r3, r2
 8001108:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800110a:	f3bf 8f4f 	dsb	sy
}
 800110e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <__NVIC_SystemReset+0x20>
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	05fa0004 	.word	0x05fa0004

0800111c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <bno055_assignI2C+0x1c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000274 	.word	0x20000274

0800113c <bno055_delay>:

void bno055_delay(int time) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	f004 faa8 	bl	800569c <HAL_Delay>
#endif
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af02      	add	r7, sp, #8
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	733b      	strb	r3, [r7, #12]
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800116c:	4b5a      	ldr	r3, [pc, #360]	@ (80012d8 <bno055_writeData+0x184>)
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	f107 020c 	add.w	r2, r7, #12
 8001174:	230a      	movs	r3, #10
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2302      	movs	r3, #2
 800117a:	2150      	movs	r1, #80	@ 0x50
 800117c:	f005 ffec 	bl	8007158 <HAL_I2C_Master_Transmit>
 8001180:	4603      	mov	r3, r0
 8001182:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a0 	beq.w	80012cc <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d103      	bne.n	800119a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001192:	4852      	ldr	r0, [pc, #328]	@ (80012dc <bno055_writeData+0x188>)
 8001194:	f00a ff48 	bl	800c028 <puts>
 8001198:	e012      	b.n	80011c0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d103      	bne.n	80011a8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80011a0:	484f      	ldr	r0, [pc, #316]	@ (80012e0 <bno055_writeData+0x18c>)
 80011a2:	f00a ff41 	bl	800c028 <puts>
 80011a6:	e00b      	b.n	80011c0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d103      	bne.n	80011b6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80011ae:	484d      	ldr	r0, [pc, #308]	@ (80012e4 <bno055_writeData+0x190>)
 80011b0:	f00a ff3a 	bl	800c028 <puts>
 80011b4:	e004      	b.n	80011c0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4619      	mov	r1, r3
 80011ba:	484b      	ldr	r0, [pc, #300]	@ (80012e8 <bno055_writeData+0x194>)
 80011bc:	f00a fecc 	bl	800bf58 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80011c0:	4b45      	ldr	r3, [pc, #276]	@ (80012d8 <bno055_writeData+0x184>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 fb05 	bl	80077d4 <HAL_I2C_GetError>
 80011ca:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d07e      	beq.n	80012d0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d103      	bne.n	80011e0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80011d8:	4844      	ldr	r0, [pc, #272]	@ (80012ec <bno055_writeData+0x198>)
 80011da:	f00a ff25 	bl	800c028 <puts>
 80011de:	e021      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d103      	bne.n	80011ee <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80011e6:	4842      	ldr	r0, [pc, #264]	@ (80012f0 <bno055_writeData+0x19c>)
 80011e8:	f00a ff1e 	bl	800c028 <puts>
 80011ec:	e01a      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d103      	bne.n	80011fc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80011f4:	483f      	ldr	r0, [pc, #252]	@ (80012f4 <bno055_writeData+0x1a0>)
 80011f6:	f00a ff17 	bl	800c028 <puts>
 80011fa:	e013      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d103      	bne.n	800120a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001202:	483d      	ldr	r0, [pc, #244]	@ (80012f8 <bno055_writeData+0x1a4>)
 8001204:	f00a ff10 	bl	800c028 <puts>
 8001208:	e00c      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2b10      	cmp	r3, #16
 800120e:	d103      	bne.n	8001218 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001210:	483a      	ldr	r0, [pc, #232]	@ (80012fc <bno055_writeData+0x1a8>)
 8001212:	f00a ff09 	bl	800c028 <puts>
 8001216:	e005      	b.n	8001224 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b20      	cmp	r3, #32
 800121c:	d102      	bne.n	8001224 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800121e:	4838      	ldr	r0, [pc, #224]	@ (8001300 <bno055_writeData+0x1ac>)
 8001220:	f00a ff02 	bl	800c028 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001224:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <bno055_writeData+0x184>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fac5 	bl	80077b8 <HAL_I2C_GetState>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d103      	bne.n	8001240 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001238:	4832      	ldr	r0, [pc, #200]	@ (8001304 <bno055_writeData+0x1b0>)
 800123a:	f00a fef5 	bl	800c028 <puts>
 800123e:	e048      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b20      	cmp	r3, #32
 8001244:	d103      	bne.n	800124e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001246:	482f      	ldr	r0, [pc, #188]	@ (8001304 <bno055_writeData+0x1b0>)
 8001248:	f00a feee 	bl	800c028 <puts>
 800124c:	e041      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b24      	cmp	r3, #36	@ 0x24
 8001252:	d103      	bne.n	800125c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001254:	482c      	ldr	r0, [pc, #176]	@ (8001308 <bno055_writeData+0x1b4>)
 8001256:	f00a fee7 	bl	800c028 <puts>
 800125a:	e03a      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b21      	cmp	r3, #33	@ 0x21
 8001260:	d103      	bne.n	800126a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001262:	482a      	ldr	r0, [pc, #168]	@ (800130c <bno055_writeData+0x1b8>)
 8001264:	f00a fee0 	bl	800c028 <puts>
 8001268:	e033      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b22      	cmp	r3, #34	@ 0x22
 800126e:	d103      	bne.n	8001278 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001270:	4827      	ldr	r0, [pc, #156]	@ (8001310 <bno055_writeData+0x1bc>)
 8001272:	f00a fed9 	bl	800c028 <puts>
 8001276:	e02c      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b28      	cmp	r3, #40	@ 0x28
 800127c:	d103      	bne.n	8001286 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800127e:	4825      	ldr	r0, [pc, #148]	@ (8001314 <bno055_writeData+0x1c0>)
 8001280:	f00a fed2 	bl	800c028 <puts>
 8001284:	e025      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b29      	cmp	r3, #41	@ 0x29
 800128a:	d103      	bne.n	8001294 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 800128c:	4822      	ldr	r0, [pc, #136]	@ (8001318 <bno055_writeData+0x1c4>)
 800128e:	f00a fecb 	bl	800c028 <puts>
 8001292:	e01e      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b2a      	cmp	r3, #42	@ 0x2a
 8001298:	d103      	bne.n	80012a2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800129a:	4820      	ldr	r0, [pc, #128]	@ (800131c <bno055_writeData+0x1c8>)
 800129c:	f00a fec4 	bl	800c028 <puts>
 80012a0:	e017      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b60      	cmp	r3, #96	@ 0x60
 80012a6:	d103      	bne.n	80012b0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80012a8:	481d      	ldr	r0, [pc, #116]	@ (8001320 <bno055_writeData+0x1cc>)
 80012aa:	f00a febd 	bl	800c028 <puts>
 80012ae:	e010      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80012b4:	d103      	bne.n	80012be <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80012b6:	481b      	ldr	r0, [pc, #108]	@ (8001324 <bno055_writeData+0x1d0>)
 80012b8:	f00a feb6 	bl	800c028 <puts>
 80012bc:	e009      	b.n	80012d2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2be0      	cmp	r3, #224	@ 0xe0
 80012c2:	d106      	bne.n	80012d2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80012c4:	4818      	ldr	r0, [pc, #96]	@ (8001328 <bno055_writeData+0x1d4>)
 80012c6:	f00a feaf 	bl	800c028 <puts>
 80012ca:	e002      	b.n	80012d2 <bno055_writeData+0x17e>
    return;
 80012cc:	bf00      	nop
 80012ce:	e000      	b.n	80012d2 <bno055_writeData+0x17e>
    return;
 80012d0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000274 	.word	0x20000274
 80012dc:	0800fa14 	.word	0x0800fa14
 80012e0:	0800fa38 	.word	0x0800fa38
 80012e4:	0800fa60 	.word	0x0800fa60
 80012e8:	0800fa84 	.word	0x0800fa84
 80012ec:	0800fa9c 	.word	0x0800fa9c
 80012f0:	0800fab0 	.word	0x0800fab0
 80012f4:	0800fac4 	.word	0x0800fac4
 80012f8:	0800fad8 	.word	0x0800fad8
 80012fc:	0800faec 	.word	0x0800faec
 8001300:	0800fb00 	.word	0x0800fb00
 8001304:	0800fb18 	.word	0x0800fb18
 8001308:	0800fb30 	.word	0x0800fb30
 800130c:	0800fb44 	.word	0x0800fb44
 8001310:	0800fb5c 	.word	0x0800fb5c
 8001314:	0800fb74 	.word	0x0800fb74
 8001318:	0800fb8c 	.word	0x0800fb8c
 800131c:	0800fbac 	.word	0x0800fbac
 8001320:	0800fbcc 	.word	0x0800fbcc
 8001324:	0800fbe4 	.word	0x0800fbe4
 8001328:	0800fbfc 	.word	0x0800fbfc

0800132c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af02      	add	r7, sp, #8
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <bno055_readData+0x40>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	1dfa      	adds	r2, r7, #7
 8001342:	2364      	movs	r3, #100	@ 0x64
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	2150      	movs	r1, #80	@ 0x50
 800134a:	f005 ff05 	bl	8007158 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <bno055_readData+0x40>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	b29b      	uxth	r3, r3
 8001356:	2264      	movs	r2, #100	@ 0x64
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	2150      	movs	r1, #80	@ 0x50
 800135e:	f005 fff9 	bl	8007354 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000274 	.word	0x20000274

08001370 <constrain>:
volatile int lower_base = 40000;

int prev = 0;
int prev_loco = 0;

int constrain(int value, int min, int max) {
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
	if (value < min)
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	429a      	cmp	r2, r3
 8001382:	da01      	bge.n	8001388 <constrain+0x18>
		return min;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	e006      	b.n	8001396 <constrain+0x26>
	else if (value > max)
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dd01      	ble.n	8001394 <constrain+0x24>
		return max;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	e000      	b.n	8001396 <constrain+0x26>
	else
		return value;
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <constrain_float>:

float constrain_float(float value,float min,float max){
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	ed87 0a03 	vstr	s0, [r7, #12]
 80013ac:	edc7 0a02 	vstr	s1, [r7, #8]
 80013b0:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value<min){
 80013b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	d501      	bpl.n	80013ca <constrain_float+0x28>
		return min;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	e00b      	b.n	80013e2 <constrain_float+0x40>
	}
	else if(value> max){
 80013ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	dd01      	ble.n	80013e0 <constrain_float+0x3e>
		return max;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	e000      	b.n	80013e2 <constrain_float+0x40>
	}
	else{
		return value;
 80013e0:	68fb      	ldr	r3, [r7, #12]
	}
}
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	0000      	movs	r0, r0
	...

080013f8 <dis_cal>:
		*value = (~*value) + 1;
	}
//	return value;
}

void dis_cal() {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	af00      	add	r7, sp, #0

	// if (ARdistance > 0.0) {
//	ARdistance = 5;
	RPM_set_lower =(isthreepointer) ?(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 200)<0? (~(int)(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 200) +1):(24.073 * ARdistance * ARdistance- 292.51 * ARdistance + 3998.4 - 200) :2900;
 80013fc:	4b7a      	ldr	r3, [pc, #488]	@ (80015e8 <dis_cal+0x1f0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80f7 	beq.w	80015f4 <dis_cal+0x1fc>
 8001406:	4b79      	ldr	r3, [pc, #484]	@ (80015ec <dis_cal+0x1f4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f89c 	bl	8000548 <__aeabi_f2d>
 8001410:	a36f      	add	r3, pc, #444	@ (adr r3, 80015d0 <dis_cal+0x1d8>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f8ef 	bl	80005f8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4614      	mov	r4, r2
 8001420:	461d      	mov	r5, r3
 8001422:	4b72      	ldr	r3, [pc, #456]	@ (80015ec <dis_cal+0x1f4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f88e 	bl	8000548 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4620      	mov	r0, r4
 8001432:	4629      	mov	r1, r5
 8001434:	f7ff f8e0 	bl	80005f8 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	4b6a      	ldr	r3, [pc, #424]	@ (80015ec <dis_cal+0x1f4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f87f 	bl	8000548 <__aeabi_f2d>
 800144a:	a363      	add	r3, pc, #396	@ (adr r3, 80015d8 <dis_cal+0x1e0>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f8d2 	bl	80005f8 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe ff14 	bl	8000288 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a35d      	add	r3, pc, #372	@ (adr r3, 80015e0 <dis_cal+0x1e8>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7fe ff0d 	bl	800028c <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b5c      	ldr	r3, [pc, #368]	@ (80015f0 <dis_cal+0x1f8>)
 8001480:	f7fe ff02 	bl	8000288 <__aeabi_dsub>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	f7ff fb22 	bl	8000adc <__aeabi_dcmplt>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d051      	beq.n	8001542 <dis_cal+0x14a>
 800149e:	4b53      	ldr	r3, [pc, #332]	@ (80015ec <dis_cal+0x1f4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f850 	bl	8000548 <__aeabi_f2d>
 80014a8:	a349      	add	r3, pc, #292	@ (adr r3, 80015d0 <dis_cal+0x1d8>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f8a3 	bl	80005f8 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4614      	mov	r4, r2
 80014b8:	461d      	mov	r5, r3
 80014ba:	4b4c      	ldr	r3, [pc, #304]	@ (80015ec <dis_cal+0x1f4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f842 	bl	8000548 <__aeabi_f2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7ff f894 	bl	80005f8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4614      	mov	r4, r2
 80014d6:	461d      	mov	r5, r3
 80014d8:	4b44      	ldr	r3, [pc, #272]	@ (80015ec <dis_cal+0x1f4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	a33d      	add	r3, pc, #244	@ (adr r3, 80015d8 <dis_cal+0x1e0>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f886 	bl	80005f8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fec8 	bl	8000288 <__aeabi_dsub>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	a337      	add	r3, pc, #220	@ (adr r3, 80015e0 <dis_cal+0x1e8>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fec1 	bl	800028c <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <dis_cal+0x1f8>)
 8001518:	f7fe feb6 	bl	8000288 <__aeabi_dsub>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb18 	bl	8000b58 <__aeabi_d2iz>
 8001528:	4603      	mov	r3, r0
 800152a:	425b      	negs	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fff9 	bl	8000524 <__aeabi_i2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb0d 	bl	8000b58 <__aeabi_d2iz>
 800153e:	4603      	mov	r3, r0
 8001540:	e05a      	b.n	80015f8 <dis_cal+0x200>
 8001542:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <dis_cal+0x1f4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fffe 	bl	8000548 <__aeabi_f2d>
 800154c:	a320      	add	r3, pc, #128	@ (adr r3, 80015d0 <dis_cal+0x1d8>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f851 	bl	80005f8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4614      	mov	r4, r2
 800155c:	461d      	mov	r5, r3
 800155e:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <dis_cal+0x1f4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fff0 	bl	8000548 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7ff f842 	bl	80005f8 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4614      	mov	r4, r2
 800157a:	461d      	mov	r5, r3
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <dis_cal+0x1f4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffe1 	bl	8000548 <__aeabi_f2d>
 8001586:	a314      	add	r3, pc, #80	@ (adr r3, 80015d8 <dis_cal+0x1e0>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f834 	bl	80005f8 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4620      	mov	r0, r4
 8001596:	4629      	mov	r1, r5
 8001598:	f7fe fe76 	bl	8000288 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80015e0 <dis_cal+0x1e8>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe fe6f 	bl	800028c <__adddf3>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <dis_cal+0x1f8>)
 80015bc:	f7fe fe64 	bl	8000288 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fac6 	bl	8000b58 <__aeabi_d2iz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	e013      	b.n	80015f8 <dis_cal+0x200>
 80015d0:	20c49ba6 	.word	0x20c49ba6
 80015d4:	403812b0 	.word	0x403812b0
 80015d8:	f5c28f5c 	.word	0xf5c28f5c
 80015dc:	40724828 	.word	0x40724828
 80015e0:	cccccccd 	.word	0xcccccccd
 80015e4:	40af3ccc 	.word	0x40af3ccc
 80015e8:	2000005c 	.word	0x2000005c
 80015ec:	20000058 	.word	0x20000058
 80015f0:	40690000 	.word	0x40690000
 80015f4:	f640 3354 	movw	r3, #2900	@ 0xb54
 80015f8:	4ab7      	ldr	r2, [pc, #732]	@ (80018d8 <dis_cal+0x4e0>)
 80015fa:	6013      	str	r3, [r2, #0]
	RPM_set_lower = constrain(RPM_set_lower, 0, 3200);
 80015fc:	4bb6      	ldr	r3, [pc, #728]	@ (80018d8 <dis_cal+0x4e0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff feb2 	bl	8001370 <constrain>
 800160c:	4603      	mov	r3, r0
 800160e:	4ab2      	ldr	r2, [pc, #712]	@ (80018d8 <dis_cal+0x4e0>)
 8001610:	6013      	str	r3, [r2, #0]
	RPM_set_upper =(isthreepointer) ?(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 220)<0? (~(int)(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 220) +1):(-104.35 * ARdistance * ARdistance+ 1431.2 * ARdistance - 2596.8 - 220) :900;
 8001612:	4bb2      	ldr	r3, [pc, #712]	@ (80018dc <dis_cal+0x4e4>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80e5 	beq.w	80017e6 <dis_cal+0x3ee>
 800161c:	4bb0      	ldr	r3, [pc, #704]	@ (80018e0 <dis_cal+0x4e8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	a39e      	add	r3, pc, #632	@ (adr r3, 80018a0 <dis_cal+0x4a8>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe ffe4 	bl	80005f8 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4614      	mov	r4, r2
 8001636:	461d      	mov	r5, r3
 8001638:	4ba9      	ldr	r3, [pc, #676]	@ (80018e0 <dis_cal+0x4e8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff83 	bl	8000548 <__aeabi_f2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe ffd5 	bl	80005f8 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4614      	mov	r4, r2
 8001654:	461d      	mov	r5, r3
 8001656:	4ba2      	ldr	r3, [pc, #648]	@ (80018e0 <dis_cal+0x4e8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	a391      	add	r3, pc, #580	@ (adr r3, 80018a8 <dis_cal+0x4b0>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffc7 	bl	80005f8 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe0b 	bl	800028c <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a38c      	add	r3, pc, #560	@ (adr r3, 80018b0 <dis_cal+0x4b8>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fe00 	bl	8000288 <__aeabi_dsub>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b93      	ldr	r3, [pc, #588]	@ (80018e4 <dis_cal+0x4ec>)
 8001696:	f7fe fdf7 	bl	8000288 <__aeabi_dsub>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f7ff fa17 	bl	8000adc <__aeabi_dcmplt>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d051      	beq.n	8001758 <dis_cal+0x360>
 80016b4:	4b8a      	ldr	r3, [pc, #552]	@ (80018e0 <dis_cal+0x4e8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff45 	bl	8000548 <__aeabi_f2d>
 80016be:	a378      	add	r3, pc, #480	@ (adr r3, 80018a0 <dis_cal+0x4a8>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff98 	bl	80005f8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	4b83      	ldr	r3, [pc, #524]	@ (80018e0 <dis_cal+0x4e8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff37 	bl	8000548 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4614      	mov	r4, r2
 80016ec:	461d      	mov	r5, r3
 80016ee:	4b7c      	ldr	r3, [pc, #496]	@ (80018e0 <dis_cal+0x4e8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff28 	bl	8000548 <__aeabi_f2d>
 80016f8:	a36b      	add	r3, pc, #428	@ (adr r3, 80018a8 <dis_cal+0x4b0>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe ff7b 	bl	80005f8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe fdbf 	bl	800028c <__adddf3>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	a366      	add	r3, pc, #408	@ (adr r3, 80018b0 <dis_cal+0x4b8>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe fdb4 	bl	8000288 <__aeabi_dsub>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b6d      	ldr	r3, [pc, #436]	@ (80018e4 <dis_cal+0x4ec>)
 800172e:	f7fe fdab 	bl	8000288 <__aeabi_dsub>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa0d 	bl	8000b58 <__aeabi_d2iz>
 800173e:	4603      	mov	r3, r0
 8001740:	425b      	negs	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feee 	bl	8000524 <__aeabi_i2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff fa02 	bl	8000b58 <__aeabi_d2iz>
 8001754:	4603      	mov	r3, r0
 8001756:	e048      	b.n	80017ea <dis_cal+0x3f2>
 8001758:	4b61      	ldr	r3, [pc, #388]	@ (80018e0 <dis_cal+0x4e8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fef3 	bl	8000548 <__aeabi_f2d>
 8001762:	a34f      	add	r3, pc, #316	@ (adr r3, 80018a0 <dis_cal+0x4a8>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe ff46 	bl	80005f8 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4614      	mov	r4, r2
 8001772:	461d      	mov	r5, r3
 8001774:	4b5a      	ldr	r3, [pc, #360]	@ (80018e0 <dis_cal+0x4e8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff37 	bl	80005f8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <dis_cal+0x4e8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fed6 	bl	8000548 <__aeabi_f2d>
 800179c:	a342      	add	r3, pc, #264	@ (adr r3, 80018a8 <dis_cal+0x4b0>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe ff29 	bl	80005f8 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7fe fd6d 	bl	800028c <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	a33d      	add	r3, pc, #244	@ (adr r3, 80018b0 <dis_cal+0x4b8>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe fd62 	bl	8000288 <__aeabi_dsub>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <dis_cal+0x4ec>)
 80017d2:	f7fe fd59 	bl	8000288 <__aeabi_dsub>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f9bb 	bl	8000b58 <__aeabi_d2iz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	e001      	b.n	80017ea <dis_cal+0x3f2>
 80017e6:	f44f 7361 	mov.w	r3, #900	@ 0x384
 80017ea:	4a3f      	ldr	r2, [pc, #252]	@ (80018e8 <dis_cal+0x4f0>)
 80017ec:	6013      	str	r3, [r2, #0]
	RPM_set_upper = constrain(RPM_set_upper, 0, 3200);
 80017ee:	4b3e      	ldr	r3, [pc, #248]	@ (80018e8 <dis_cal+0x4f0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fdb9 	bl	8001370 <constrain>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a39      	ldr	r2, [pc, #228]	@ (80018e8 <dis_cal+0x4f0>)
 8001802:	6013      	str	r3, [r2, #0]
	lower_base = 17.2*RPM_set_lower + 4088.9+1400;
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <dis_cal+0x4e0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe8b 	bl	8000524 <__aeabi_i2d>
 800180e:	a32a      	add	r3, pc, #168	@ (adr r3, 80018b8 <dis_cal+0x4c0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fef0 	bl	80005f8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	a327      	add	r3, pc, #156	@ (adr r3, 80018c0 <dis_cal+0x4c8>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fd31 	bl	800028c <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <dis_cal+0x4f4>)
 8001838:	f7fe fd28 	bl	800028c <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f988 	bl	8000b58 <__aeabi_d2iz>
 8001848:	4603      	mov	r3, r0
 800184a:	4a29      	ldr	r2, [pc, #164]	@ (80018f0 <dis_cal+0x4f8>)
 800184c:	6013      	str	r3, [r2, #0]
	upper_base = 16.877*RPM_set_upper + 5313.2+1000;
 800184e:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <dis_cal+0x4f0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe66 	bl	8000524 <__aeabi_i2d>
 8001858:	a31b      	add	r3, pc, #108	@ (adr r3, 80018c8 <dis_cal+0x4d0>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fecb 	bl	80005f8 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a319      	add	r3, pc, #100	@ (adr r3, 80018d0 <dis_cal+0x4d8>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fd0c 	bl	800028c <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <dis_cal+0x4fc>)
 8001882:	f7fe fd03 	bl	800028c <__adddf3>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f963 	bl	8000b58 <__aeabi_d2iz>
 8001892:	4603      	mov	r3, r0
 8001894:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <dis_cal+0x500>)
 8001896:	6013      	str	r3, [r2, #0]
	// }
}
 8001898:	bf00      	nop
 800189a:	bdb0      	pop	{r4, r5, r7, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	66666666 	.word	0x66666666
 80018a4:	c05a1666 	.word	0xc05a1666
 80018a8:	cccccccd 	.word	0xcccccccd
 80018ac:	40965ccc 	.word	0x40965ccc
 80018b0:	9999999a 	.word	0x9999999a
 80018b4:	40a44999 	.word	0x40a44999
 80018b8:	33333333 	.word	0x33333333
 80018bc:	40313333 	.word	0x40313333
 80018c0:	cccccccd 	.word	0xcccccccd
 80018c4:	40aff1cc 	.word	0x40aff1cc
 80018c8:	126e978d 	.word	0x126e978d
 80018cc:	4030e083 	.word	0x4030e083
 80018d0:	33333333 	.word	0x33333333
 80018d4:	40b4c133 	.word	0x40b4c133
 80018d8:	20000074 	.word	0x20000074
 80018dc:	2000005c 	.word	0x2000005c
 80018e0:	20000058 	.word	0x20000058
 80018e4:	406b8000 	.word	0x406b8000
 80018e8:	20000078 	.word	0x20000078
 80018ec:	4095e000 	.word	0x4095e000
 80018f0:	20000080 	.word	0x20000080
 80018f4:	408f4000 	.word	0x408f4000
 80018f8:	2000007c 	.word	0x2000007c

080018fc <rotors>:

void rotors(bool flag) {
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
	// upper pwm  PE5 tim9 channel 1
	// lower pwm  PE6 tim9 channel 2

	// upper direction PE1
	// lower direction PE3
	if (!flag) {
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f083 0301 	eor.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <rotors+0x24>
		TIM9->CCR1 = 0;
 8001912:	4b7a      	ldr	r3, [pc, #488]	@ (8001afc <rotors+0x200>)
 8001914:	2200      	movs	r2, #0
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM9->CCR2 = 0;
 8001918:	4b78      	ldr	r3, [pc, #480]	@ (8001afc <rotors+0x200>)
 800191a:	2200      	movs	r2, #0
 800191c:	639a      	str	r2, [r3, #56]	@ 0x38
		return;
 800191e:	e0ea      	b.n	8001af6 <rotors+0x1fa>
	} else
		dis_cal();
 8001920:	f7ff fd6a 	bl	80013f8 <dis_cal>
	if (HAL_GetTick() - prev >= 80)
 8001924:	f003 feae 	bl	8005684 <HAL_GetTick>
 8001928:	4603      	mov	r3, r0
 800192a:	4a75      	ldr	r2, [pc, #468]	@ (8001b00 <rotors+0x204>)
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	2b4f      	cmp	r3, #79	@ 0x4f
 8001932:	f240 80e0 	bls.w	8001af6 <rotors+0x1fa>

	{
		counter_upper = TIM4->CNT;
 8001936:	4b73      	ldr	r3, [pc, #460]	@ (8001b04 <rotors+0x208>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	b21a      	sxth	r2, r3
 800193c:	4b72      	ldr	r3, [pc, #456]	@ (8001b08 <rotors+0x20c>)
 800193e:	801a      	strh	r2, [r3, #0]
		counter_lower = TIM8->CNT;
 8001940:	4b72      	ldr	r3, [pc, #456]	@ (8001b0c <rotors+0x210>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	b21a      	sxth	r2, r3
 8001946:	4b72      	ldr	r3, [pc, #456]	@ (8001b10 <rotors+0x214>)
 8001948:	801a      	strh	r2, [r3, #0]
		counter_upper = counter_upper / 4;
 800194a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b08 <rotors+0x20c>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	2b00      	cmp	r3, #0
 8001952:	da00      	bge.n	8001956 <rotors+0x5a>
 8001954:	3303      	adds	r3, #3
 8001956:	109b      	asrs	r3, r3, #2
 8001958:	b21a      	sxth	r2, r3
 800195a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b08 <rotors+0x20c>)
 800195c:	801a      	strh	r2, [r3, #0]
		rpm_upper = (counter_upper * 60000)/(360*((int32_t)HAL_GetTick() - prev));
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <rotors+0x20c>)
 8001960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001964:	461a      	mov	r2, r3
 8001966:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800196a:	fb03 f402 	mul.w	r4, r3, r2
 800196e:	f003 fe89 	bl	8005684 <HAL_GetTick>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b62      	ldr	r3, [pc, #392]	@ (8001b00 <rotors+0x204>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	fb94 f3f3 	sdiv	r3, r4, r3
 8001988:	4a62      	ldr	r2, [pc, #392]	@ (8001b14 <rotors+0x218>)
 800198a:	6013      	str	r3, [r2, #0]

		counter_lower = counter_lower / 4;
 800198c:	4b60      	ldr	r3, [pc, #384]	@ (8001b10 <rotors+0x214>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	2b00      	cmp	r3, #0
 8001994:	da00      	bge.n	8001998 <rotors+0x9c>
 8001996:	3303      	adds	r3, #3
 8001998:	109b      	asrs	r3, r3, #2
 800199a:	b21a      	sxth	r2, r3
 800199c:	4b5c      	ldr	r3, [pc, #368]	@ (8001b10 <rotors+0x214>)
 800199e:	801a      	strh	r2, [r3, #0]
		rpm_lower =(counter_lower * 60000)/(360*((int32_t)HAL_GetTick() - prev));
 80019a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001b10 <rotors+0x214>)
 80019a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a6:	461a      	mov	r2, r3
 80019a8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80019ac:	fb03 f402 	mul.w	r4, r3, r2
 80019b0:	f003 fe68 	bl	8005684 <HAL_GetTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b51      	ldr	r3, [pc, #324]	@ (8001b00 <rotors+0x204>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	fb94 f3f3 	sdiv	r3, r4, r3
 80019ca:	4a53      	ldr	r2, [pc, #332]	@ (8001b18 <rotors+0x21c>)
 80019cc:	6013      	str	r3, [r2, #0]
		rpm_upper = (rpm_upper)<0?(~rpm_upper +1):rpm_upper;
 80019ce:	4b51      	ldr	r3, [pc, #324]	@ (8001b14 <rotors+0x218>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da03      	bge.n	80019de <rotors+0xe2>
 80019d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b14 <rotors+0x218>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	425b      	negs	r3, r3
 80019dc:	e001      	b.n	80019e2 <rotors+0xe6>
 80019de:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <rotors+0x218>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001b14 <rotors+0x218>)
 80019e4:	6013      	str	r3, [r2, #0]
		rpm_lower = (rpm_lower)<0?(~rpm_lower +1):rpm_lower;
 80019e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001b18 <rotors+0x21c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da03      	bge.n	80019f6 <rotors+0xfa>
 80019ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <rotors+0x21c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	425b      	negs	r3, r3
 80019f4:	e001      	b.n	80019fa <rotors+0xfe>
 80019f6:	4b48      	ldr	r3, [pc, #288]	@ (8001b18 <rotors+0x21c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a47      	ldr	r2, [pc, #284]	@ (8001b18 <rotors+0x21c>)
 80019fc:	6013      	str	r3, [r2, #0]
		error_upper = RPM_set_upper - rpm_upper;
 80019fe:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <rotors+0x220>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b44      	ldr	r3, [pc, #272]	@ (8001b14 <rotors+0x218>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a45      	ldr	r2, [pc, #276]	@ (8001b20 <rotors+0x224>)
 8001a0a:	6013      	str	r3, [r2, #0]
		error_lower = RPM_set_lower - rpm_lower;
 8001a0c:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <rotors+0x228>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <rotors+0x21c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	4a44      	ldr	r2, [pc, #272]	@ (8001b28 <rotors+0x22c>)
 8001a18:	6013      	str	r3, [r2, #0]

		pwm_upper = upper_base +(kpUpper * error_upper);
 8001a1a:	4b44      	ldr	r3, [pc, #272]	@ (8001b2c <rotors+0x230>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a26:	4b3e      	ldr	r3, [pc, #248]	@ (8001b20 <rotors+0x224>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a32:	4b3f      	ldr	r3, [pc, #252]	@ (8001b30 <rotors+0x234>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a44:	ee17 2a90 	vmov	r2, s15
 8001a48:	4b3a      	ldr	r3, [pc, #232]	@ (8001b34 <rotors+0x238>)
 8001a4a:	601a      	str	r2, [r3, #0]
		pwm_lower = lower_base +(kpLower * error_lower);
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <rotors+0x23c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a58:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <rotors+0x22c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a64:	4b35      	ldr	r3, [pc, #212]	@ (8001b3c <rotors+0x240>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a76:	ee17 2a90 	vmov	r2, s15
 8001a7a:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <rotors+0x244>)
 8001a7c:	601a      	str	r2, [r3, #0]

		pwm_upper = constrain(pwm_upper, 0, 65500);
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b34 <rotors+0x238>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fc71 	bl	8001370 <constrain>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <rotors+0x238>)
 8001a92:	6013      	str	r3, [r2, #0]
		pwm_lower = constrain(pwm_lower, 0, 65500);
 8001a94:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <rotors+0x244>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fc66 	bl	8001370 <constrain>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a26      	ldr	r2, [pc, #152]	@ (8001b40 <rotors+0x244>)
 8001aa8:	6013      	str	r3, [r2, #0]



		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2102      	movs	r1, #2
 8001aae:	4825      	ldr	r0, [pc, #148]	@ (8001b44 <rotors+0x248>)
 8001ab0:	f005 f9c4 	bl	8006e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	4822      	ldr	r0, [pc, #136]	@ (8001b44 <rotors+0x248>)
 8001aba:	f005 f9bf 	bl	8006e3c <HAL_GPIO_WritePin>

		TIM9->CCR1 =pwm_upper;  //UPPER
 8001abe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <rotors+0x238>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <rotors+0x200>)
 8001ac4:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM9->CCR2 =pwm_lower;  //LOWER
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <rotors+0x244>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <rotors+0x200>)
 8001acc:	639a      	str	r2, [r3, #56]	@ 0x38
		prev = HAL_GetTick();
 8001ace:	f003 fdd9 	bl	8005684 <HAL_GetTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <rotors+0x204>)
 8001ad8:	601a      	str	r2, [r3, #0]
		counter_upper=0;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <rotors+0x20c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	801a      	strh	r2, [r3, #0]
		counter_lower = 0;
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <rotors+0x214>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <rotors+0x24c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim8, 0);
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <rotors+0x250>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24

	}

}
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	40014000 	.word	0x40014000
 8001b00:	20000558 	.word	0x20000558
 8001b04:	40000800 	.word	0x40000800
 8001b08:	20000528 	.word	0x20000528
 8001b0c:	40010400 	.word	0x40010400
 8001b10:	2000052a 	.word	0x2000052a
 8001b14:	20000534 	.word	0x20000534
 8001b18:	20000538 	.word	0x20000538
 8001b1c:	20000078 	.word	0x20000078
 8001b20:	20000548 	.word	0x20000548
 8001b24:	20000074 	.word	0x20000074
 8001b28:	2000054c 	.word	0x2000054c
 8001b2c:	2000007c 	.word	0x2000007c
 8001b30:	20000050 	.word	0x20000050
 8001b34:	20000550 	.word	0x20000550
 8001b38:	20000080 	.word	0x20000080
 8001b3c:	2000004c 	.word	0x2000004c
 8001b40:	20000554 	.word	0x20000554
 8001b44:	40021000 	.word	0x40021000
 8001b48:	20000450 	.word	0x20000450
 8001b4c:	200004e0 	.word	0x200004e0

08001b50 <feed>:

void feed() {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pistonUp_Port, pistonUp_Pin, 1);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	480e      	ldr	r0, [pc, #56]	@ (8001b94 <feed+0x44>)
 8001b5a:	f005 f96f 	bl	8006e3c <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001b5e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001b62:	f003 fd9b 	bl	800569c <HAL_Delay>
	HAL_GPIO_WritePin(pistonUp_Port, pistonUp_Pin, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	480a      	ldr	r0, [pc, #40]	@ (8001b94 <feed+0x44>)
 8001b6c:	f005 f966 	bl	8006e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 8001b70:	2201      	movs	r2, #1
 8001b72:	2110      	movs	r1, #16
 8001b74:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <feed+0x48>)
 8001b76:	f005 f961 	bl	8006e3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b7a:	20c8      	movs	r0, #200	@ 0xc8
 8001b7c:	f003 fd8e 	bl	800569c <HAL_Delay>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2110      	movs	r1, #16
 8001b84:	4804      	ldr	r0, [pc, #16]	@ (8001b98 <feed+0x48>)
 8001b86:	f005 f959 	bl	8006e3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b8a:	20c8      	movs	r0, #200	@ 0xc8
 8001b8c:	f003 fd86 	bl	800569c <HAL_Delay>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40020400 	.word	0x40020400

08001b9c <rpm_cal>:

void rpm_cal() {
 8001b9c:	b598      	push	{r3, r4, r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

	if (HAL_GetTick() - prev_loco >= 80) {
 8001ba0:	f003 fd70 	bl	8005684 <HAL_GetTick>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a59      	ldr	r2, [pc, #356]	@ (8001d0c <rpm_cal+0x170>)
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	2b4f      	cmp	r3, #79	@ 0x4f
 8001bae:	f240 80ab 	bls.w	8001d08 <rpm_cal+0x16c>

		counter_4 = TIM1->CNT;
 8001bb2:	4b57      	ldr	r3, [pc, #348]	@ (8001d10 <rpm_cal+0x174>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	4b56      	ldr	r3, [pc, #344]	@ (8001d14 <rpm_cal+0x178>)
 8001bba:	801a      	strh	r2, [r3, #0]
		counter_5 = TIM3->CNT;
 8001bbc:	4b56      	ldr	r3, [pc, #344]	@ (8001d18 <rpm_cal+0x17c>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	4b56      	ldr	r3, [pc, #344]	@ (8001d1c <rpm_cal+0x180>)
 8001bc4:	801a      	strh	r2, [r3, #0]
		counter_8 = TIM5->CNT;
 8001bc6:	4b56      	ldr	r3, [pc, #344]	@ (8001d20 <rpm_cal+0x184>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	4b55      	ldr	r3, [pc, #340]	@ (8001d24 <rpm_cal+0x188>)
 8001bce:	801a      	strh	r2, [r3, #0]
//		rpm1 = (counter_8 *60000)/(360*((int32_t)HAL_GetTick()-prev_loco));
//
//		counter_5 = counter_5 / 4;
//		rpm2 = (counter_5 *60000)/(600*((int32_t)HAL_GetTick()-prev_loco));

		counter_8 = counter_8 / 4;
 8001bd0:	4b54      	ldr	r3, [pc, #336]	@ (8001d24 <rpm_cal+0x188>)
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da00      	bge.n	8001bdc <rpm_cal+0x40>
 8001bda:	3303      	adds	r3, #3
 8001bdc:	109b      	asrs	r3, r3, #2
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	4b50      	ldr	r3, [pc, #320]	@ (8001d24 <rpm_cal+0x188>)
 8001be2:	801a      	strh	r2, [r3, #0]
		rpm1 = (counter_8 *60000)/(600*((int32_t)HAL_GetTick()-prev_loco));
 8001be4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d24 <rpm_cal+0x188>)
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001bf0:	fb03 f402 	mul.w	r4, r3, r2
 8001bf4:	f003 fd46 	bl	8005684 <HAL_GetTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b43      	ldr	r3, [pc, #268]	@ (8001d0c <rpm_cal+0x170>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	fb94 f3f3 	sdiv	r3, r4, r3
 8001c0e:	4a46      	ldr	r2, [pc, #280]	@ (8001d28 <rpm_cal+0x18c>)
 8001c10:	6013      	str	r3, [r2, #0]

		counter_5 = counter_5 / 4;
 8001c12:	4b42      	ldr	r3, [pc, #264]	@ (8001d1c <rpm_cal+0x180>)
 8001c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	da00      	bge.n	8001c1e <rpm_cal+0x82>
 8001c1c:	3303      	adds	r3, #3
 8001c1e:	109b      	asrs	r3, r3, #2
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	4b3e      	ldr	r3, [pc, #248]	@ (8001d1c <rpm_cal+0x180>)
 8001c24:	801a      	strh	r2, [r3, #0]
		rpm2 = (counter_5 *60000)/(360*((int32_t)HAL_GetTick()-prev_loco));
 8001c26:	4b3d      	ldr	r3, [pc, #244]	@ (8001d1c <rpm_cal+0x180>)
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001c32:	fb03 f402 	mul.w	r4, r3, r2
 8001c36:	f003 fd25 	bl	8005684 <HAL_GetTick>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b33      	ldr	r3, [pc, #204]	@ (8001d0c <rpm_cal+0x170>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001c48:	fb02 f303 	mul.w	r3, r2, r3
 8001c4c:	fb94 f3f3 	sdiv	r3, r4, r3
 8001c50:	4a36      	ldr	r2, [pc, #216]	@ (8001d2c <rpm_cal+0x190>)
 8001c52:	6013      	str	r3, [r2, #0]

		counter_4 = counter_4 / 4;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <rpm_cal+0x178>)
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da00      	bge.n	8001c60 <rpm_cal+0xc4>
 8001c5e:	3303      	adds	r3, #3
 8001c60:	109b      	asrs	r3, r3, #2
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	4b2b      	ldr	r3, [pc, #172]	@ (8001d14 <rpm_cal+0x178>)
 8001c66:	801a      	strh	r2, [r3, #0]
		rpm3 =(counter_4 *60000)/(360*((int32_t)HAL_GetTick() -prev_loco));
 8001c68:	4b2a      	ldr	r3, [pc, #168]	@ (8001d14 <rpm_cal+0x178>)
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001c74:	fb03 f402 	mul.w	r4, r3, r2
 8001c78:	f003 fd04 	bl	8005684 <HAL_GetTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <rpm_cal+0x170>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	fb94 f3f3 	sdiv	r3, r4, r3
 8001c92:	4a27      	ldr	r2, [pc, #156]	@ (8001d30 <rpm_cal+0x194>)
 8001c94:	6013      	str	r3, [r2, #0]

		rpm1 = (rpm1<0)?(~rpm1) +1 : rpm1;
 8001c96:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <rpm_cal+0x18c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	da03      	bge.n	8001ca6 <rpm_cal+0x10a>
 8001c9e:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <rpm_cal+0x18c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	e001      	b.n	8001caa <rpm_cal+0x10e>
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <rpm_cal+0x18c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1f      	ldr	r2, [pc, #124]	@ (8001d28 <rpm_cal+0x18c>)
 8001cac:	6013      	str	r3, [r2, #0]
		rpm2 = (rpm2<0)?(~rpm2) +1: rpm2;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <rpm_cal+0x190>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da03      	bge.n	8001cbe <rpm_cal+0x122>
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <rpm_cal+0x190>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	425b      	negs	r3, r3
 8001cbc:	e001      	b.n	8001cc2 <rpm_cal+0x126>
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <rpm_cal+0x190>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d2c <rpm_cal+0x190>)
 8001cc4:	6013      	str	r3, [r2, #0]
		rpm3 = (rpm3<0)?(~rpm3)+1:rpm3;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <rpm_cal+0x194>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da03      	bge.n	8001cd6 <rpm_cal+0x13a>
 8001cce:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <rpm_cal+0x194>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	425b      	negs	r3, r3
 8001cd4:	e001      	b.n	8001cda <rpm_cal+0x13e>
 8001cd6:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <rpm_cal+0x194>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <rpm_cal+0x194>)
 8001cdc:	6013      	str	r3, [r2, #0]
//			  rotors();

		prev_loco = HAL_GetTick();
 8001cde:	f003 fcd1 	bl	8005684 <HAL_GetTick>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <rpm_cal+0x170>)
 8001ce8:	601a      	str	r2, [r3, #0]
		counter_4, counter_5, counter_8 = 0;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <rpm_cal+0x188>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001cf0:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <rpm_cal+0x198>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <rpm_cal+0x19c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <rpm_cal+0x1a0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	@ 0x24

	}
}
 8001d08:	bf00      	nop
 8001d0a:	bd98      	pop	{r3, r4, r7, pc}
 8001d0c:	2000055c 	.word	0x2000055c
 8001d10:	40010000 	.word	0x40010000
 8001d14:	2000052c 	.word	0x2000052c
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	2000052e 	.word	0x2000052e
 8001d20:	40000c00 	.word	0x40000c00
 8001d24:	20000530 	.word	0x20000530
 8001d28:	2000053c 	.word	0x2000053c
 8001d2c:	20000540 	.word	0x20000540
 8001d30:	20000544 	.word	0x20000544
 8001d34:	200003c0 	.word	0x200003c0
 8001d38:	20000408 	.word	0x20000408
 8001d3c:	20000498 	.word	0x20000498

08001d40 <Rxvalueslo>:
#ifndef SRC_COMMUNICATION_H_
#define SRC_COMMUNICATION_H_

#include "variables.h"
#include "cJSON.h"
int Rxvalueslo(char *Rx_data){
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	if(Rx_data!=NULL && Rx_data[0] =='{'){
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80b3 	beq.w	8001eb6 <Rxvalueslo+0x176>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b7b      	cmp	r3, #123	@ 0x7b
 8001d56:	f040 80ae 	bne.w	8001eb6 <Rxvalueslo+0x176>
		loco = Rx_data[8];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7a1a      	ldrb	r2, [r3, #8]
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed0 <Rxvalueslo+0x190>)
 8001d60:	701a      	strb	r2, [r3, #0]
		char Rotate[4];
		strncpy(Rotate, Rx_data +9, 3);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f103 0109 	add.w	r1, r3, #9
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f00a faa4 	bl	800c2bc <strncpy>
		rotationstrength = atoi(Rotate);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f008 fea5 	bl	800aac8 <atoi>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a54      	ldr	r2, [pc, #336]	@ (8001ed4 <Rxvalueslo+0x194>)
 8001d82:	6013      	str	r3, [r2, #0]
		char Angle[4];
		strncpy(Angle, Rx_data +12, 3);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f103 010c 	add.w	r1, r3, #12
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	2203      	movs	r2, #3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00a fa93 	bl	800c2bc <strncpy>
		angle = atoi(Angle);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f008 fe94 	bl	800aac8 <atoi>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <Rxvalueslo+0x198>)
 8001da4:	6013      	str	r3, [r2, #0]
//		angle = (angle == 400) ? 400 : (angle + 180) % 360;

		char Strength[4];
		strncpy(Strength, Rx_data +15, 3);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f103 010f 	add.w	r1, r3, #15
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2203      	movs	r2, #3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f00a fa82 	bl	800c2bc <strncpy>
		strengthX = atoi(Strength);
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f008 fe83 	bl	800aac8 <atoi>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a45      	ldr	r2, [pc, #276]	@ (8001edc <Rxvalueslo+0x19c>)
 8001dc6:	6013      	str	r3, [r2, #0]
		 if ((int32_t)HAL_GetTick() - strengthsampling > 30) {
 8001dc8:	f003 fc5c 	bl	8005684 <HAL_GetTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b43      	ldr	r3, [pc, #268]	@ (8001ee0 <Rxvalueslo+0x1a0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b1e      	cmp	r3, #30
 8001dd8:	dd63      	ble.n	8001ea2 <Rxvalueslo+0x162>
			if (strengthX - strengthc >30) {
 8001dda:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <Rxvalueslo+0x19c>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <Rxvalueslo+0x1a4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b1e      	cmp	r3, #30
 8001de6:	dd23      	ble.n	8001e30 <Rxvalueslo+0xf0>
				strengthX -= (strengthX - strengthc) * 0.89;
 8001de8:	4b3c      	ldr	r3, [pc, #240]	@ (8001edc <Rxvalueslo+0x19c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb99 	bl	8000524 <__aeabi_i2d>
 8001df2:	4604      	mov	r4, r0
 8001df4:	460d      	mov	r5, r1
 8001df6:	4b39      	ldr	r3, [pc, #228]	@ (8001edc <Rxvalueslo+0x19c>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee4 <Rxvalueslo+0x1a4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb8f 	bl	8000524 <__aeabi_i2d>
 8001e06:	a32e      	add	r3, pc, #184	@ (adr r3, 8001ec0 <Rxvalueslo+0x180>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fbf4 	bl	80005f8 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fa36 	bl	8000288 <__aeabi_dsub>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fe98 	bl	8000b58 <__aeabi_d2iz>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001edc <Rxvalueslo+0x19c>)
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e02a      	b.n	8001e86 <Rxvalueslo+0x146>
			 } else if (strengthX - strengthc < -30) {
 8001e30:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <Rxvalueslo+0x19c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <Rxvalueslo+0x1a4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f113 0f1e 	cmn.w	r3, #30
 8001e3e:	da22      	bge.n	8001e86 <Rxvalueslo+0x146>
					   strengthX -= (strengthX - strengthc) * 0.90;
 8001e40:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <Rxvalueslo+0x19c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb6d 	bl	8000524 <__aeabi_i2d>
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	460d      	mov	r5, r1
 8001e4e:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <Rxvalueslo+0x19c>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <Rxvalueslo+0x1a4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb63 	bl	8000524 <__aeabi_i2d>
 8001e5e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001ec8 <Rxvalueslo+0x188>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fbc8 	bl	80005f8 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe fa0a 	bl	8000288 <__aeabi_dsub>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fe6c 	bl	8000b58 <__aeabi_d2iz>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a16      	ldr	r2, [pc, #88]	@ (8001edc <Rxvalueslo+0x19c>)
 8001e84:	6013      	str	r3, [r2, #0]
			 }
			 strengthc = strengthX;
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <Rxvalueslo+0x19c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <Rxvalueslo+0x1a4>)
 8001e8c:	6013      	str	r3, [r2, #0]
					strength = strengthX;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <Rxvalueslo+0x19c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a15      	ldr	r2, [pc, #84]	@ (8001ee8 <Rxvalueslo+0x1a8>)
 8001e94:	6013      	str	r3, [r2, #0]
					   strengthsampling = HAL_GetTick();
 8001e96:	f003 fbf5 	bl	8005684 <HAL_GetTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <Rxvalueslo+0x1a0>)
 8001ea0:	601a      	str	r2, [r3, #0]
					 }
					 strength  = constrain(strength,0,85);
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <Rxvalueslo+0x1a8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2255      	movs	r2, #85	@ 0x55
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fa60 	bl	8001370 <constrain>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <Rxvalueslo+0x1a8>)
 8001eb4:	6013      	str	r3, [r2, #0]


	}
}
 8001eb6:	bf00      	nop
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	47ae147b 	.word	0x47ae147b
 8001ec4:	3fec7ae1 	.word	0x3fec7ae1
 8001ec8:	cccccccd 	.word	0xcccccccd
 8001ecc:	3feccccc 	.word	0x3feccccc
 8001ed0:	20000048 	.word	0x20000048
 8001ed4:	2000032c 	.word	0x2000032c
 8001ed8:	20000340 	.word	0x20000340
 8001edc:	20000338 	.word	0x20000338
 8001ee0:	2000033c 	.word	0x2000033c
 8001ee4:	20000334 	.word	0x20000334
 8001ee8:	20000330 	.word	0x20000330

08001eec <Arvalueslo>:
int Arvalueslo(char *Ar_data){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
   if(Ar_data!= NULL){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d017      	beq.n	8001f2a <Arvalueslo+0x3e>
	   strncpy(disString,Ar_data +6,7);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3306      	adds	r3, #6
 8001efe:	2207      	movs	r2, #7
 8001f00:	4619      	mov	r1, r3
 8001f02:	480c      	ldr	r0, [pc, #48]	@ (8001f34 <Arvalueslo+0x48>)
 8001f04:	f00a f9da 	bl	800c2bc <strncpy>
	   strncpy(angleString,Ar_data + 20,7);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3314      	adds	r3, #20
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4809      	ldr	r0, [pc, #36]	@ (8001f38 <Arvalueslo+0x4c>)
 8001f12:	f00a f9d3 	bl	800c2bc <strncpy>
	   sscanf(disString,"%f",&ARdistance);
 8001f16:	4a09      	ldr	r2, [pc, #36]	@ (8001f3c <Arvalueslo+0x50>)
 8001f18:	4909      	ldr	r1, [pc, #36]	@ (8001f40 <Arvalueslo+0x54>)
 8001f1a:	4806      	ldr	r0, [pc, #24]	@ (8001f34 <Arvalueslo+0x48>)
 8001f1c:	f00a f8ae 	bl	800c07c <siscanf>
	   sscanf(angleString,"%f",&alpha);
 8001f20:	4a08      	ldr	r2, [pc, #32]	@ (8001f44 <Arvalueslo+0x58>)
 8001f22:	4907      	ldr	r1, [pc, #28]	@ (8001f40 <Arvalueslo+0x54>)
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <Arvalueslo+0x4c>)
 8001f26:	f00a f8a9 	bl	800c07c <siscanf>
   }
}
 8001f2a:	bf00      	nop
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200002e8 	.word	0x200002e8
 8001f38:	200002f0 	.word	0x200002f0
 8001f3c:	20000058 	.word	0x20000058
 8001f40:	0800fc14 	.word	0x0800fc14
 8001f44:	200002b8 	.word	0x200002b8

08001f48 <Mpuvalueslo>:
int Mpuvalueslo(char *Mp_data){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	sscanf(Mp_data,"%f",&Z_Val);
 8001f50:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <Mpuvalueslo+0x1c>)
 8001f52:	4905      	ldr	r1, [pc, #20]	@ (8001f68 <Mpuvalueslo+0x20>)
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f00a f891 	bl	800c07c <siscanf>
}
 8001f5a:	bf00      	nop
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000328 	.word	0x20000328
 8001f68:	0800fc14 	.word	0x0800fc14
 8001f6c:	00000000 	.word	0x00000000

08001f70 <align>:
 */

#ifndef SRC_ALIGNMENT_H_
#define SRC_ALIGNMENT_H_

bool align(float target) {
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	ed87 0a01 	vstr	s0, [r7, #4]

  float delta = target - Z_Val;
 8001f7a:	4bb9      	ldr	r3, [pc, #740]	@ (8002260 <align+0x2f0>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f88:	edc7 7a03 	vstr	s15, [r7, #12]
  if (delta > 180) {
 8001f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f90:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8002264 <align+0x2f4>
 8001f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	dd07      	ble.n	8001fae <align+0x3e>
    delta = delta - 360;
 8001f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002268 <align+0x2f8>
 8001fa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001faa:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  if (delta < -180) {
 8001fae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fb2:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 800226c <align+0x2fc>
 8001fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbe:	d507      	bpl.n	8001fd0 <align+0x60>
    delta = delta + 360;
 8001fc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc4:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8002268 <align+0x2f8>
 8001fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fcc:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  if (initialdelta == 0) {
 8001fd0:	4ba7      	ldr	r3, [pc, #668]	@ (8002270 <align+0x300>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d102      	bne.n	8001fe6 <align+0x76>
    initialdelta = delta;
 8001fe0:	4aa3      	ldr	r2, [pc, #652]	@ (8002270 <align+0x300>)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6013      	str	r3, [r2, #0]
  }


  s = delta;
 8001fe6:	4aa3      	ldr	r2, [pc, #652]	@ (8002274 <align+0x304>)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6013      	str	r3, [r2, #0]
  if (initialdelta < 0) {
 8001fec:	4ba0      	ldr	r3, [pc, #640]	@ (8002270 <align+0x300>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	d52f      	bpl.n	800205c <align+0xec>
    if (delta > -1.6 + initialdelta*0.05 && delta < 1.6) {
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7fe faa3 	bl	8000548 <__aeabi_f2d>
 8002002:	4604      	mov	r4, r0
 8002004:	460d      	mov	r5, r1
 8002006:	4b9a      	ldr	r3, [pc, #616]	@ (8002270 <align+0x300>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa9c 	bl	8000548 <__aeabi_f2d>
 8002010:	a38b      	add	r3, pc, #556	@ (adr r3, 8002240 <align+0x2d0>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe faef 	bl	80005f8 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	a389      	add	r3, pc, #548	@ (adr r3, 8002248 <align+0x2d8>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe f92e 	bl	8000288 <__aeabi_dsub>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe fd70 	bl	8000b18 <__aeabi_dcmpgt>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03d      	beq.n	80020ba <align+0x14a>
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7fe fa82 	bl	8000548 <__aeabi_f2d>
 8002044:	a380      	add	r3, pc, #512	@ (adr r3, 8002248 <align+0x2d8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fd47 	bl	8000adc <__aeabi_dcmplt>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d032      	beq.n	80020ba <align+0x14a>
      donealign = true;
 8002054:	4b88      	ldr	r3, [pc, #544]	@ (8002278 <align+0x308>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e02e      	b.n	80020ba <align+0x14a>
    }
  } else {
    if (delta > -1.6 && delta < 1.6 + initialdelta*0.05) {
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7fe fa73 	bl	8000548 <__aeabi_f2d>
 8002062:	a37b      	add	r3, pc, #492	@ (adr r3, 8002250 <align+0x2e0>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f7fe fd56 	bl	8000b18 <__aeabi_dcmpgt>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d023      	beq.n	80020ba <align+0x14a>
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7fe fa68 	bl	8000548 <__aeabi_f2d>
 8002078:	4604      	mov	r4, r0
 800207a:	460d      	mov	r5, r1
 800207c:	4b7c      	ldr	r3, [pc, #496]	@ (8002270 <align+0x300>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fa61 	bl	8000548 <__aeabi_f2d>
 8002086:	a36e      	add	r3, pc, #440	@ (adr r3, 8002240 <align+0x2d0>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe fab4 	bl	80005f8 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	a36b      	add	r3, pc, #428	@ (adr r3, 8002248 <align+0x2d8>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe f8f5 	bl	800028c <__adddf3>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe fd17 	bl	8000adc <__aeabi_dcmplt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <align+0x14a>
      donealign = true;
 80020b4:	4b70      	ldr	r3, [pc, #448]	@ (8002278 <align+0x308>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
    }
  }
  // if (abs(delta) < 1) {
  if (donealign) {
 80020ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002278 <align+0x308>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d02b      	beq.n	800211a <align+0x1aa>
	if(delta < 2 && delta >-2){
 80020c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80020ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	d51c      	bpl.n	800210e <align+0x19e>
 80020d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020d8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80020dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	dd13      	ble.n	800210e <align+0x19e>
    w = 0;
 80020e6:	4b65      	ldr	r3, [pc, #404]	@ (800227c <align+0x30c>)
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
    alignn = true;
 80020ee:	4b64      	ldr	r3, [pc, #400]	@ (8002280 <align+0x310>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
    integralalign = 0;
 80020f4:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <align+0x314>)
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    donealign = false;
 80020fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002278 <align+0x308>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    initialdelta = 0;
 8002102:	4b5b      	ldr	r3, [pc, #364]	@ (8002270 <align+0x300>)
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
    return true;}
 800210a:	2301      	movs	r3, #1
 800210c:	e137      	b.n	800237e <align+0x40e>
	else{
		initialdelta =0;
 800210e:	4b58      	ldr	r3, [pc, #352]	@ (8002270 <align+0x300>)
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
		return false;
 8002116:	2300      	movs	r3, #0
 8002118:	e131      	b.n	800237e <align+0x40e>
	}
  }
  if (HAL_GetTick() - previousalignsampling > 20) {
 800211a:	f003 fab3 	bl	8005684 <HAL_GetTick>
 800211e:	4603      	mov	r3, r0
 8002120:	4a59      	ldr	r2, [pc, #356]	@ (8002288 <align+0x318>)
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	2b14      	cmp	r3, #20
 8002128:	f240 8128 	bls.w	800237c <align+0x40c>

    if (s< 120.0 && s > -120.0) {
 800212c:	4b51      	ldr	r3, [pc, #324]	@ (8002274 <align+0x304>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800228c <align+0x31c>
 8002136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	f140 80fc 	bpl.w	800233a <align+0x3ca>
 8002142:	4b4c      	ldr	r3, [pc, #304]	@ (8002274 <align+0x304>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002290 <align+0x320>
 800214c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	f340 80f1 	ble.w	800233a <align+0x3ca>
      if (s < 10.0 && s > -10.0) {
 8002158:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <align+0x304>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	d522      	bpl.n	80021b2 <align+0x242>
 800216c:	4b41      	ldr	r3, [pc, #260]	@ (8002274 <align+0x304>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	dd18      	ble.n	80021b2 <align+0x242>
        integralalign += s;
 8002180:	4b40      	ldr	r3, [pc, #256]	@ (8002284 <align+0x314>)
 8002182:	ed93 7a00 	vldr	s14, [r3]
 8002186:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <align+0x304>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002190:	4b3c      	ldr	r3, [pc, #240]	@ (8002284 <align+0x314>)
 8002192:	edc3 7a00 	vstr	s15, [r3]
        if (integralalign > 100) {
 8002196:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <align+0x314>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002294 <align+0x324>
 80021a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	dd07      	ble.n	80021ba <align+0x24a>
          integralalign = 100.0;
 80021aa:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <align+0x314>)
 80021ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002298 <align+0x328>)
 80021ae:	601a      	str	r2, [r3, #0]
        if (integralalign > 100) {
 80021b0:	e003      	b.n	80021ba <align+0x24a>
        }
      }
      else{
         integralalign = 0;
 80021b2:	4b34      	ldr	r3, [pc, #208]	@ (8002284 <align+0x314>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
      }

      // w = (s < 0) ? s * 0.02 + (s - previousS) * 0.089 + 0.0000018*integralalign  : (s * 0.02  + (s - previousS) * 0.089 + 0.0000018*integralalign );
      errordiff_align = s - previousS;
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <align+0x304>)
 80021bc:	ed93 7a00 	vldr	s14, [r3]
 80021c0:	4b36      	ldr	r3, [pc, #216]	@ (800229c <align+0x32c>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ca:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <align+0x330>)
 80021cc:	edc3 7a00 	vstr	s15, [r3]
      if (s < 0) {
 80021d0:	4b28      	ldr	r3, [pc, #160]	@ (8002274 <align+0x304>)
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021de:	d569      	bpl.n	80022b4 <align+0x344>
        w_align = kp_align * s + kd_align * errordiff_align + ki_align * integralalign - 0.2;
 80021e0:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <align+0x334>)
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <align+0x304>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f0:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <align+0x338>)
 80021f2:	edd3 6a00 	vldr	s13, [r3]
 80021f6:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <align+0x330>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002204:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <align+0x33c>)
 8002206:	edd3 6a00 	vldr	s13, [r3]
 800220a:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <align+0x314>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	ee17 0a90 	vmov	r0, s15
 800221c:	f7fe f994 	bl	8000548 <__aeabi_f2d>
 8002220:	a30d      	add	r3, pc, #52	@ (adr r3, 8002258 <align+0x2e8>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	f7fe f82f 	bl	8000288 <__aeabi_dsub>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fcd9 	bl	8000be8 <__aeabi_d2f>
 8002236:	4603      	mov	r3, r0
 8002238:	4a1d      	ldr	r2, [pc, #116]	@ (80022b0 <align+0x340>)
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e068      	b.n	8002310 <align+0x3a0>
 800223e:	bf00      	nop
 8002240:	9999999a 	.word	0x9999999a
 8002244:	3fa99999 	.word	0x3fa99999
 8002248:	9999999a 	.word	0x9999999a
 800224c:	3ff99999 	.word	0x3ff99999
 8002250:	9999999a 	.word	0x9999999a
 8002254:	bff99999 	.word	0xbff99999
 8002258:	9999999a 	.word	0x9999999a
 800225c:	3fc99999 	.word	0x3fc99999
 8002260:	20000328 	.word	0x20000328
 8002264:	43340000 	.word	0x43340000
 8002268:	43b40000 	.word	0x43b40000
 800226c:	c3340000 	.word	0xc3340000
 8002270:	20000300 	.word	0x20000300
 8002274:	20000304 	.word	0x20000304
 8002278:	20000308 	.word	0x20000308
 800227c:	20000358 	.word	0x20000358
 8002280:	20000024 	.word	0x20000024
 8002284:	2000030c 	.word	0x2000030c
 8002288:	20000314 	.word	0x20000314
 800228c:	42f00000 	.word	0x42f00000
 8002290:	c2f00000 	.word	0xc2f00000
 8002294:	42c80000 	.word	0x42c80000
 8002298:	42c80000 	.word	0x42c80000
 800229c:	20000318 	.word	0x20000318
 80022a0:	2000031c 	.word	0x2000031c
 80022a4:	2000002c 	.word	0x2000002c
 80022a8:	20000030 	.word	0x20000030
 80022ac:	20000034 	.word	0x20000034
 80022b0:	20000310 	.word	0x20000310
      } else {
        w_align = kp_align * s + kd_align * errordiff_align + ki_align * integralalign + 0.2;
 80022b4:	4b36      	ldr	r3, [pc, #216]	@ (8002390 <align+0x420>)
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	4b36      	ldr	r3, [pc, #216]	@ (8002394 <align+0x424>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c4:	4b34      	ldr	r3, [pc, #208]	@ (8002398 <align+0x428>)
 80022c6:	edd3 6a00 	vldr	s13, [r3]
 80022ca:	4b34      	ldr	r3, [pc, #208]	@ (800239c <align+0x42c>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d8:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <align+0x430>)
 80022da:	edd3 6a00 	vldr	s13, [r3]
 80022de:	4b31      	ldr	r3, [pc, #196]	@ (80023a4 <align+0x434>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ec:	ee17 0a90 	vmov	r0, s15
 80022f0:	f7fe f92a 	bl	8000548 <__aeabi_f2d>
 80022f4:	a324      	add	r3, pc, #144	@ (adr r3, 8002388 <align+0x418>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fd ffc7 	bl	800028c <__adddf3>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fc6f 	bl	8000be8 <__aeabi_d2f>
 800230a:	4603      	mov	r3, r0
 800230c:	4a26      	ldr	r2, [pc, #152]	@ (80023a8 <align+0x438>)
 800230e:	6013      	str	r3, [r2, #0]
      }

      w_align = constrain_float(w_align, -2, 2);
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <align+0x438>)
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 800231a:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 800231e:	eeb0 0a67 	vmov.f32	s0, s15
 8002322:	f7ff f83e 	bl	80013a2 <constrain_float>
 8002326:	eef0 7a40 	vmov.f32	s15, s0
 800232a:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <align+0x438>)
 800232c:	edc3 7a00 	vstr	s15, [r3]
      w = w_align;
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <align+0x438>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <align+0x43c>)
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e00e      	b.n	8002358 <align+0x3e8>
    } else {
      w = (s < 0) ? -2 : 2;
 800233a:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <align+0x424>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002348:	d502      	bpl.n	8002350 <align+0x3e0>
 800234a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800234e:	e001      	b.n	8002354 <align+0x3e4>
 8002350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002354:	4a15      	ldr	r2, [pc, #84]	@ (80023ac <align+0x43c>)
 8002356:	6013      	str	r3, [r2, #0]
    }
    w = -w;
 8002358:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <align+0x43c>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	eef1 7a67 	vneg.f32	s15, s15
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <align+0x43c>)
 8002364:	edc3 7a00 	vstr	s15, [r3]
    previousalignsampling = HAL_GetTick();
 8002368:	f003 f98c 	bl	8005684 <HAL_GetTick>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <align+0x440>)
 8002372:	601a      	str	r2, [r3, #0]
    previousS = s;
 8002374:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <align+0x424>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0e      	ldr	r2, [pc, #56]	@ (80023b4 <align+0x444>)
 800237a:	6013      	str	r3, [r2, #0]
  }
  // Serial.print("::");
  // Serial.print(w);
//   digitalWrite(A14,0);
  return false;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bdb0      	pop	{r4, r5, r7, pc}
 8002386:	bf00      	nop
 8002388:	9999999a 	.word	0x9999999a
 800238c:	3fc99999 	.word	0x3fc99999
 8002390:	2000002c 	.word	0x2000002c
 8002394:	20000304 	.word	0x20000304
 8002398:	20000030 	.word	0x20000030
 800239c:	2000031c 	.word	0x2000031c
 80023a0:	20000034 	.word	0x20000034
 80023a4:	2000030c 	.word	0x2000030c
 80023a8:	20000310 	.word	0x20000310
 80023ac:	20000358 	.word	0x20000358
 80023b0:	20000314 	.word	0x20000314
 80023b4:	20000318 	.word	0x20000318

080023b8 <toradian>:
#define SRC_LOCOMOTION_H_
#include "variables.h"
#include "alignment.h"
void calc();
void locomote();
double toradian(double x) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	ed87 0b00 	vstr	d0, [r7]
  return x * pi / 180;
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <toradian+0x40>)
 80023c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023cc:	f7fe f914 	bl	80005f8 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <toradian+0x44>)
 80023de:	f7fe fa35 	bl	800084c <__aeabi_ddiv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80023ea:	eeb0 0a47 	vmov.f32	s0, s14
 80023ee:	eef0 0a67 	vmov.f32	s1, s15
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000040 	.word	0x20000040
 80023fc:	40668000 	.word	0x40668000

08002400 <locomotion>:


void locomotion() {
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	af00      	add	r7, sp, #0
  // alignn = false;
  if (!alignn) {
 8002404:	4b93      	ldr	r3, [pc, #588]	@ (8002654 <locomotion+0x254>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <locomotion+0x28>
    alignn = align(alignvalue);
 8002412:	4b91      	ldr	r3, [pc, #580]	@ (8002658 <locomotion+0x258>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	eeb0 0a67 	vmov.f32	s0, s15
 800241c:	f7ff fda8 	bl	8001f70 <align>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	4b8b      	ldr	r3, [pc, #556]	@ (8002654 <locomotion+0x254>)
 8002426:	701a      	strb	r2, [r3, #0]
  }
  if(!autoloco){
 8002428:	4b8c      	ldr	r3, [pc, #560]	@ (800265c <locomotion+0x25c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 810b 	beq.w	800264e <locomotion+0x24e>
  // Serial.print(s);
  // Serial.print("  ");
  // Serial.print(alpha);
  // Serial.print("  ");
  // Serial.println(Z_Val);
  switch (loco) {
 8002438:	4b89      	ldr	r3, [pc, #548]	@ (8002660 <locomotion+0x260>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	3b4b      	subs	r3, #75	@ 0x4b
 800243e:	2b24      	cmp	r3, #36	@ 0x24
 8002440:	f200 80f9 	bhi.w	8002636 <locomotion+0x236>
 8002444:	a201      	add	r2, pc, #4	@ (adr r2, 800244c <locomotion+0x4c>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	08002613 	.word	0x08002613
 8002450:	08002535 	.word	0x08002535
 8002454:	08002637 	.word	0x08002637
 8002458:	08002637 	.word	0x08002637
 800245c:	0800262b 	.word	0x0800262b
 8002460:	08002637 	.word	0x08002637
 8002464:	08002637 	.word	0x08002637
 8002468:	0800259b 	.word	0x0800259b
 800246c:	080024e1 	.word	0x080024e1
 8002470:	08002637 	.word	0x08002637
 8002474:	08002637 	.word	0x08002637
 8002478:	08002637 	.word	0x08002637
 800247c:	08002637 	.word	0x08002637
 8002480:	08002637 	.word	0x08002637
 8002484:	08002637 	.word	0x08002637
 8002488:	08002637 	.word	0x08002637
 800248c:	08002637 	.word	0x08002637
 8002490:	08002637 	.word	0x08002637
 8002494:	08002637 	.word	0x08002637
 8002498:	08002637 	.word	0x08002637
 800249c:	08002637 	.word	0x08002637
 80024a0:	08002637 	.word	0x08002637
 80024a4:	08002637 	.word	0x08002637
 80024a8:	08002637 	.word	0x08002637
 80024ac:	08002637 	.word	0x08002637
 80024b0:	08002637 	.word	0x08002637
 80024b4:	08002637 	.word	0x08002637
 80024b8:	08002637 	.word	0x08002637
 80024bc:	08002637 	.word	0x08002637
 80024c0:	08002637 	.word	0x08002637
 80024c4:	08002637 	.word	0x08002637
 80024c8:	08002637 	.word	0x08002637
 80024cc:	08002607 	.word	0x08002607
 80024d0:	08002637 	.word	0x08002637
 80024d4:	08002637 	.word	0x08002637
 80024d8:	08002637 	.word	0x08002637
 80024dc:	0800261f 	.word	0x0800261f

    case 'S':
      if (angle == 400) {
 80024e0:	4b60      	ldr	r3, [pc, #384]	@ (8002664 <locomotion+0x264>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80024e8:	d10e      	bne.n	8002508 <locomotion+0x108>
        angle = prevangle;
 80024ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002668 <locomotion+0x268>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002664 <locomotion+0x264>)
 80024f0:	6013      	str	r3, [r2, #0]
        calc();
 80024f2:	f000 f8cf 	bl	8002694 <calc>
        if (alignn) {
 80024f6:	4b57      	ldr	r3, [pc, #348]	@ (8002654 <locomotion+0x254>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <locomotion+0x114>
          w = 0;
 80024fe:	4b5b      	ldr	r3, [pc, #364]	@ (800266c <locomotion+0x26c>)
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e005      	b.n	8002514 <locomotion+0x114>
        }
      } else {
    	prevangle = angle;
 8002508:	4b56      	ldr	r3, [pc, #344]	@ (8002664 <locomotion+0x264>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <locomotion+0x268>)
 800250e:	6013      	str	r3, [r2, #0]
        calc();
 8002510:	f000 f8c0 	bl	8002694 <calc>
      }
      if (angle != 400) {
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <locomotion+0x264>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800251c:	f000 8096 	beq.w	800264c <locomotion+0x24c>
        if (alignn) {
 8002520:	4b4c      	ldr	r3, [pc, #304]	@ (8002654 <locomotion+0x254>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8091 	beq.w	800264c <locomotion+0x24c>
          w = 0;
 800252a:	4b50      	ldr	r3, [pc, #320]	@ (800266c <locomotion+0x26c>)
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
        }
      }
      break;
 8002532:	e08b      	b.n	800264c <locomotion+0x24c>
    case 'L':
      w = (1.2 * rotationstrength) / 100;
 8002534:	4b4e      	ldr	r3, [pc, #312]	@ (8002670 <locomotion+0x270>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd fff3 	bl	8000524 <__aeabi_i2d>
 800253e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002542:	4b4c      	ldr	r3, [pc, #304]	@ (8002674 <locomotion+0x274>)
 8002544:	f7fe f858 	bl	80005f8 <__aeabi_dmul>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	4b48      	ldr	r3, [pc, #288]	@ (8002678 <locomotion+0x278>)
 8002556:	f7fe f979 	bl	800084c <__aeabi_ddiv>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe fb41 	bl	8000be8 <__aeabi_d2f>
 8002566:	4603      	mov	r3, r0
 8002568:	4a40      	ldr	r2, [pc, #256]	@ (800266c <locomotion+0x26c>)
 800256a:	6013      	str	r3, [r2, #0]
      if (angle == 400) {
 800256c:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <locomotion+0x264>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002574:	d10e      	bne.n	8002594 <locomotion+0x194>
        vx = 0;
 8002576:	4941      	ldr	r1, [pc, #260]	@ (800267c <locomotion+0x27c>)
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9c1 2300 	strd	r2, r3, [r1]
        vy = 0;
 8002584:	493e      	ldr	r1, [pc, #248]	@ (8002680 <locomotion+0x280>)
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8002592:	e05c      	b.n	800264e <locomotion+0x24e>
      } else {
        calc();
 8002594:	f000 f87e 	bl	8002694 <calc>
        break;
 8002598:	e059      	b.n	800264e <locomotion+0x24e>
      }
      break;
    case 'R':
      w = -(1.2 * rotationstrength) / 100;
 800259a:	4b35      	ldr	r3, [pc, #212]	@ (8002670 <locomotion+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffc0 	bl	8000524 <__aeabi_i2d>
 80025a4:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80025a8:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <locomotion+0x274>)
 80025aa:	f7fe f825 	bl	80005f8 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4614      	mov	r4, r2
 80025b4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002678 <locomotion+0x278>)
 80025be:	4620      	mov	r0, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	f7fe f943 	bl	800084c <__aeabi_ddiv>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fb0b 	bl	8000be8 <__aeabi_d2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a25      	ldr	r2, [pc, #148]	@ (800266c <locomotion+0x26c>)
 80025d6:	6013      	str	r3, [r2, #0]
      if (angle == 400) {
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <locomotion+0x264>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80025e0:	d10e      	bne.n	8002600 <locomotion+0x200>
        vx = 0;
 80025e2:	4926      	ldr	r1, [pc, #152]	@ (800267c <locomotion+0x27c>)
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c1 2300 	strd	r2, r3, [r1]
        vy = 0;
 80025f0:	4923      	ldr	r1, [pc, #140]	@ (8002680 <locomotion+0x280>)
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 80025fe:	e026      	b.n	800264e <locomotion+0x24e>
      } else {
        calc();
 8002600:	f000 f848 	bl	8002694 <calc>
        break;
 8002604:	e023      	b.n	800264e <locomotion+0x24e>
      // case 'f':
      // angle = 270;
      // strength = (rotationstrength>)

    case 'k':
      w = -1.1;
 8002606:	4b19      	ldr	r3, [pc, #100]	@ (800266c <locomotion+0x26c>)
 8002608:	4a1e      	ldr	r2, [pc, #120]	@ (8002684 <locomotion+0x284>)
 800260a:	601a      	str	r2, [r3, #0]
      calc();
 800260c:	f000 f842 	bl	8002694 <calc>

      break;
 8002610:	e01d      	b.n	800264e <locomotion+0x24e>
    case 'K':
      w = 1.1;
 8002612:	4b16      	ldr	r3, [pc, #88]	@ (800266c <locomotion+0x26c>)
 8002614:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <locomotion+0x288>)
 8002616:	601a      	str	r2, [r3, #0]

      calc();
 8002618:	f000 f83c 	bl	8002694 <calc>

      break;
 800261c:	e017      	b.n	800264e <locomotion+0x24e>
    case 'o':
      w = 0.9;
 800261e:	4b13      	ldr	r3, [pc, #76]	@ (800266c <locomotion+0x26c>)
 8002620:	4a1a      	ldr	r2, [pc, #104]	@ (800268c <locomotion+0x28c>)
 8002622:	601a      	str	r2, [r3, #0]

      calc();
 8002624:	f000 f836 	bl	8002694 <calc>

      break;
 8002628:	e011      	b.n	800264e <locomotion+0x24e>
    case 'O':
      w = -0.9;
 800262a:	4b10      	ldr	r3, [pc, #64]	@ (800266c <locomotion+0x26c>)
 800262c:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <locomotion+0x290>)
 800262e:	601a      	str	r2, [r3, #0]

      calc();
 8002630:	f000 f830 	bl	8002694 <calc>

      break;
 8002634:	e00b      	b.n	800264e <locomotion+0x24e>

    default:
      if (alignn) {
 8002636:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <locomotion+0x254>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <locomotion+0x246>
        w = 0;
 800263e:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <locomotion+0x26c>)
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
      }
      calc();
 8002646:	f000 f825 	bl	8002694 <calc>
  }
  }
}
 800264a:	e000      	b.n	800264e <locomotion+0x24e>
      break;
 800264c:	bf00      	nop
}
 800264e:	bf00      	nop
 8002650:	bdb0      	pop	{r4, r5, r7, pc}
 8002652:	bf00      	nop
 8002654:	20000024 	.word	0x20000024
 8002658:	200002f8 	.word	0x200002f8
 800265c:	200002af 	.word	0x200002af
 8002660:	20000048 	.word	0x20000048
 8002664:	20000340 	.word	0x20000340
 8002668:	20000344 	.word	0x20000344
 800266c:	20000358 	.word	0x20000358
 8002670:	2000032c 	.word	0x2000032c
 8002674:	3ff33333 	.word	0x3ff33333
 8002678:	40590000 	.word	0x40590000
 800267c:	20000348 	.word	0x20000348
 8002680:	20000350 	.word	0x20000350
 8002684:	bf8ccccd 	.word	0xbf8ccccd
 8002688:	3f8ccccd 	.word	0x3f8ccccd
 800268c:	3f666666 	.word	0x3f666666
 8002690:	bf666666 	.word	0xbf666666

08002694 <calc>:

void calc() {
 8002694:	b5b0      	push	{r4, r5, r7, lr}
 8002696:	af00      	add	r7, sp, #0
  // Serial.println("Strength: " + String(strength));
  radiann = toradian(angle);
 8002698:	4b3f      	ldr	r3, [pc, #252]	@ (8002798 <calc+0x104>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ff41 	bl	8000524 <__aeabi_i2d>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	ec43 2b10 	vmov	d0, r2, r3
 80026aa:	f7ff fe85 	bl	80023b8 <toradian>
 80026ae:	ec53 2b10 	vmov	r2, r3, d0
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fa97 	bl	8000be8 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a37      	ldr	r2, [pc, #220]	@ (800279c <calc+0x108>)
 80026be:	6013      	str	r3, [r2, #0]
  vx = cos(radiann) * strength / 100 * multi;
 80026c0:	4b36      	ldr	r3, [pc, #216]	@ (800279c <calc+0x108>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd ff3f 	bl	8000548 <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec43 2b10 	vmov	d0, r2, r3
 80026d2:	f00c f8fd 	bl	800e8d0 <cos>
 80026d6:	ec55 4b10 	vmov	r4, r5, d0
 80026da:	4b31      	ldr	r3, [pc, #196]	@ (80027a0 <calc+0x10c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd ff20 	bl	8000524 <__aeabi_i2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4620      	mov	r0, r4
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7fd ff84 	bl	80005f8 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	4b29      	ldr	r3, [pc, #164]	@ (80027a4 <calc+0x110>)
 80026fe:	f7fe f8a5 	bl	800084c <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4614      	mov	r4, r2
 8002708:	461d      	mov	r5, r3
 800270a:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <calc+0x114>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff08 	bl	8000524 <__aeabi_i2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f7fd ff6c 	bl	80005f8 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4921      	ldr	r1, [pc, #132]	@ (80027ac <calc+0x118>)
 8002726:	e9c1 2300 	strd	r2, r3, [r1]
  vy = sin(radiann) * strength / 100 * multi;
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <calc+0x108>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff0a 	bl	8000548 <__aeabi_f2d>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	ec43 2b10 	vmov	d0, r2, r3
 800273c:	f00c f91c 	bl	800e978 <sin>
 8002740:	ec55 4b10 	vmov	r4, r5, d0
 8002744:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <calc+0x10c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd feeb 	bl	8000524 <__aeabi_i2d>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f7fd ff4f 	bl	80005f8 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <calc+0x110>)
 8002768:	f7fe f870 	bl	800084c <__aeabi_ddiv>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <calc+0x114>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fed3 	bl	8000524 <__aeabi_i2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fd ff37 	bl	80005f8 <__aeabi_dmul>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <calc+0x11c>)
 8002790:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002794:	bf00      	nop
 8002796:	bdb0      	pop	{r4, r5, r7, pc}
 8002798:	20000340 	.word	0x20000340
 800279c:	200003bc 	.word	0x200003bc
 80027a0:	20000330 	.word	0x20000330
 80027a4:	40590000 	.word	0x40590000
 80027a8:	20000000 	.word	0x20000000
 80027ac:	20000348 	.word	0x20000348
 80027b0:	20000350 	.word	0x20000350
 80027b4:	00000000 	.word	0x00000000

080027b8 <locomote>:
void locomote() {
 80027b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027bc:	b08e      	sub	sp, #56	@ 0x38
 80027be:	af00      	add	r7, sp, #0
//  w = -w;
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80027c0:	4bd1      	ldr	r3, [pc, #836]	@ (8002b08 <locomote+0x350>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8002b0c <locomote+0x354>
 80027ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027ce:	ee17 0a90 	vmov	r0, s15
 80027d2:	f7fd feb9 	bl	8000548 <__aeabi_f2d>
 80027d6:	4bce      	ldr	r3, [pc, #824]	@ (8002b10 <locomote+0x358>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f7fd ff0c 	bl	80005f8 <__aeabi_dmul>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	4bc9      	ldr	r3, [pc, #804]	@ (8002b14 <locomote+0x35c>)
 80027ee:	f7fe f82d 	bl	800084c <__aeabi_ddiv>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	ec43 2b17 	vmov	d7, r2, r3
 80027fa:	eeb0 0a47 	vmov.f32	s0, s14
 80027fe:	eef0 0a67 	vmov.f32	s1, s15
 8002802:	f00c f865 	bl	800e8d0 <cos>
 8002806:	ec53 2b10 	vmov	r2, r3, d0
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	f7fe f9eb 	bl	8000be8 <__aeabi_d2f>
 8002812:	4603      	mov	r3, r0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	4bbc      	ldr	r3, [pc, #752]	@ (8002b08 <locomote+0x350>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8002b0c <locomote+0x354>
 8002820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002824:	ee17 0a90 	vmov	r0, s15
 8002828:	f7fd fe8e 	bl	8000548 <__aeabi_f2d>
 800282c:	4bb8      	ldr	r3, [pc, #736]	@ (8002b10 <locomote+0x358>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd fee1 	bl	80005f8 <__aeabi_dmul>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	4bb4      	ldr	r3, [pc, #720]	@ (8002b14 <locomote+0x35c>)
 8002844:	f7fe f802 	bl	800084c <__aeabi_ddiv>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	ec43 2b17 	vmov	d7, r2, r3
 8002850:	eeb0 0a47 	vmov.f32	s0, s14
 8002854:	eef0 0a67 	vmov.f32	s1, s15
 8002858:	f00c f88e 	bl	800e978 <sin>
 800285c:	ec53 2b10 	vmov	r2, r3, d0
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	f7fe f9c0 	bl	8000be8 <__aeabi_d2f>
 8002868:	4603      	mov	r3, r0
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	4baa      	ldr	r3, [pc, #680]	@ (8002b18 <locomote+0x360>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61fb      	str	r3, [r7, #28]
                         { cos((120 + Z_Val) * pi / 180), sin((120 + Z_Val) * pi / 180), d },
 8002872:	4ba5      	ldr	r3, [pc, #660]	@ (8002b08 <locomote+0x350>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8002b1c <locomote+0x364>
 800287c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002880:	ee17 0a90 	vmov	r0, s15
 8002884:	f7fd fe60 	bl	8000548 <__aeabi_f2d>
 8002888:	4ba1      	ldr	r3, [pc, #644]	@ (8002b10 <locomote+0x358>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd feb3 	bl	80005f8 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	4b9d      	ldr	r3, [pc, #628]	@ (8002b14 <locomote+0x35c>)
 80028a0:	f7fd ffd4 	bl	800084c <__aeabi_ddiv>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	ec43 2b17 	vmov	d7, r2, r3
 80028ac:	eeb0 0a47 	vmov.f32	s0, s14
 80028b0:	eef0 0a67 	vmov.f32	s1, s15
 80028b4:	f00c f80c 	bl	800e8d0 <cos>
 80028b8:	ec53 2b10 	vmov	r2, r3, d0
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f992 	bl	8000be8 <__aeabi_d2f>
 80028c4:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80028c6:	623b      	str	r3, [r7, #32]
                         { cos((120 + Z_Val) * pi / 180), sin((120 + Z_Val) * pi / 180), d },
 80028c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b08 <locomote+0x350>)
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8002b1c <locomote+0x364>
 80028d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028d6:	ee17 0a90 	vmov	r0, s15
 80028da:	f7fd fe35 	bl	8000548 <__aeabi_f2d>
 80028de:	4b8c      	ldr	r3, [pc, #560]	@ (8002b10 <locomote+0x358>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fe88 	bl	80005f8 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	4b87      	ldr	r3, [pc, #540]	@ (8002b14 <locomote+0x35c>)
 80028f6:	f7fd ffa9 	bl	800084c <__aeabi_ddiv>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	ec43 2b17 	vmov	d7, r2, r3
 8002902:	eeb0 0a47 	vmov.f32	s0, s14
 8002906:	eef0 0a67 	vmov.f32	s1, s15
 800290a:	f00c f835 	bl	800e978 <sin>
 800290e:	ec53 2b10 	vmov	r2, r3, d0
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f967 	bl	8000be8 <__aeabi_d2f>
 800291a:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
 800291e:	4b7e      	ldr	r3, [pc, #504]	@ (8002b18 <locomote+0x360>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
                         { cos((240 + Z_Val) * pi / 180), sin((240 + Z_Val) * pi / 180), d } };
 8002924:	4b78      	ldr	r3, [pc, #480]	@ (8002b08 <locomote+0x350>)
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002b20 <locomote+0x368>
 800292e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002932:	ee17 0a90 	vmov	r0, s15
 8002936:	f7fd fe07 	bl	8000548 <__aeabi_f2d>
 800293a:	4b75      	ldr	r3, [pc, #468]	@ (8002b10 <locomote+0x358>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f7fd fe5a 	bl	80005f8 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	4b70      	ldr	r3, [pc, #448]	@ (8002b14 <locomote+0x35c>)
 8002952:	f7fd ff7b 	bl	800084c <__aeabi_ddiv>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	ec43 2b17 	vmov	d7, r2, r3
 800295e:	eeb0 0a47 	vmov.f32	s0, s14
 8002962:	eef0 0a67 	vmov.f32	s1, s15
 8002966:	f00b ffb3 	bl	800e8d0 <cos>
 800296a:	ec53 2b10 	vmov	r2, r3, d0
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe f939 	bl	8000be8 <__aeabi_d2f>
 8002976:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
                         { cos((240 + Z_Val) * pi / 180), sin((240 + Z_Val) * pi / 180), d } };
 800297a:	4b63      	ldr	r3, [pc, #396]	@ (8002b08 <locomote+0x350>)
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8002b20 <locomote+0x368>
 8002984:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002988:	ee17 0a90 	vmov	r0, s15
 800298c:	f7fd fddc 	bl	8000548 <__aeabi_f2d>
 8002990:	4b5f      	ldr	r3, [pc, #380]	@ (8002b10 <locomote+0x358>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fe2f 	bl	80005f8 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b14 <locomote+0x35c>)
 80029a8:	f7fd ff50 	bl	800084c <__aeabi_ddiv>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	ec43 2b17 	vmov	d7, r2, r3
 80029b4:	eeb0 0a47 	vmov.f32	s0, s14
 80029b8:	eef0 0a67 	vmov.f32	s1, s15
 80029bc:	f00b ffdc 	bl	800e978 <sin>
 80029c0:	ec53 2b10 	vmov	r2, r3, d0
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe f90e 	bl	8000be8 <__aeabi_d2f>
 80029cc:	4603      	mov	r3, r0
  float matrix[3][3] = { { cos((0 + Z_Val) * pi / 180), sin((0 + Z_Val) * pi / 180), d },
 80029ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80029d0:	4b51      	ldr	r3, [pc, #324]	@ (8002b18 <locomote+0x360>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	637b      	str	r3, [r7, #52]	@ 0x34
  base[0] = (matrix[0][0] * vx + matrix[0][1] * vy + w * matrix[0][2]) / r;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdb5 	bl	8000548 <__aeabi_f2d>
 80029de:	4b51      	ldr	r3, [pc, #324]	@ (8002b24 <locomote+0x36c>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe08 	bl	80005f8 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4614      	mov	r4, r2
 80029ee:	461d      	mov	r5, r3
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fda8 	bl	8000548 <__aeabi_f2d>
 80029f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b28 <locomote+0x370>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f7fd fdfb 	bl	80005f8 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7fd fc3f 	bl	800028c <__adddf3>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4614      	mov	r4, r2
 8002a14:	461d      	mov	r5, r3
 8002a16:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a1a:	4b44      	ldr	r3, [pc, #272]	@ (8002b2c <locomote+0x374>)
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a24:	ee17 0a90 	vmov	r0, s15
 8002a28:	f7fd fd8e 	bl	8000548 <__aeabi_f2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd fc2a 	bl	800028c <__adddf3>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	461d      	mov	r5, r3
 8002a40:	4b3b      	ldr	r3, [pc, #236]	@ (8002b30 <locomote+0x378>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fd7f 	bl	8000548 <__aeabi_f2d>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7fd fefb 	bl	800084c <__aeabi_ddiv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7fe f87b 	bl	8000b58 <__aeabi_d2iz>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4a33      	ldr	r2, [pc, #204]	@ (8002b34 <locomote+0x37c>)
 8002a66:	6013      	str	r3, [r2, #0]
  base[1] = (matrix[1][0] * vx + matrix[1][1] * vy + w * matrix[1][2]) / r;
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd6c 	bl	8000548 <__aeabi_f2d>
 8002a70:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <locomote+0x36c>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fdbf 	bl	80005f8 <__aeabi_dmul>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4614      	mov	r4, r2
 8002a80:	461d      	mov	r5, r3
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd5f 	bl	8000548 <__aeabi_f2d>
 8002a8a:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <locomote+0x370>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fdb2 	bl	80005f8 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	f7fd fbf6 	bl	800028c <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4614      	mov	r4, r2
 8002aa6:	461d      	mov	r5, r3
 8002aa8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002aac:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <locomote+0x374>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	ee17 0a90 	vmov	r0, s15
 8002aba:	f7fd fd45 	bl	8000548 <__aeabi_f2d>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	f7fd fbe1 	bl	800028c <__adddf3>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4614      	mov	r4, r2
 8002ad0:	461d      	mov	r5, r3
 8002ad2:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <locomote+0x378>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fd36 	bl	8000548 <__aeabi_f2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f7fd feb2 	bl	800084c <__aeabi_ddiv>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fe f832 	bl	8000b58 <__aeabi_d2iz>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b34 <locomote+0x37c>)
 8002af8:	6053      	str	r3, [r2, #4]
  base[2] = (matrix[2][0] * vx + matrix[2][1] * vy + w * matrix[2][2]) / r;
 8002afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd23 	bl	8000548 <__aeabi_f2d>
 8002b02:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <locomote+0x36c>)
 8002b04:	e018      	b.n	8002b38 <locomote+0x380>
 8002b06:	bf00      	nop
 8002b08:	20000328 	.word	0x20000328
 8002b0c:	00000000 	.word	0x00000000
 8002b10:	20000040 	.word	0x20000040
 8002b14:	40668000 	.word	0x40668000
 8002b18:	20000038 	.word	0x20000038
 8002b1c:	42f00000 	.word	0x42f00000
 8002b20:	43700000 	.word	0x43700000
 8002b24:	20000348 	.word	0x20000348
 8002b28:	20000350 	.word	0x20000350
 8002b2c:	20000358 	.word	0x20000358
 8002b30:	20000004 	.word	0x20000004
 8002b34:	200002d4 	.word	0x200002d4
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f7fd fd5c 	bl	80005f8 <__aeabi_dmul>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4614      	mov	r4, r2
 8002b46:	461d      	mov	r5, r3
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fcfc 	bl	8000548 <__aeabi_f2d>
 8002b50:	4bbb      	ldr	r3, [pc, #748]	@ (8002e40 <locomote+0x688>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fd4f 	bl	80005f8 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4620      	mov	r0, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	f7fd fb93 	bl	800028c <__adddf3>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4614      	mov	r4, r2
 8002b6c:	461d      	mov	r5, r3
 8002b6e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002b72:	4bb4      	ldr	r3, [pc, #720]	@ (8002e44 <locomote+0x68c>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7c:	ee17 0a90 	vmov	r0, s15
 8002b80:	f7fd fce2 	bl	8000548 <__aeabi_f2d>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4620      	mov	r0, r4
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	f7fd fb7e 	bl	800028c <__adddf3>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4614      	mov	r4, r2
 8002b96:	461d      	mov	r5, r3
 8002b98:	4bab      	ldr	r3, [pc, #684]	@ (8002e48 <locomote+0x690>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fcd3 	bl	8000548 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f7fd fe4f 	bl	800084c <__aeabi_ddiv>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fd ffcf 	bl	8000b58 <__aeabi_d2iz>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4aa3      	ldr	r2, [pc, #652]	@ (8002e4c <locomote+0x694>)
 8002bbe:	6093      	str	r3, [r2, #8]

  if ((base[0] != 0) || (base[1] != 0) || base[2] != 0) {
 8002bc0:	4ba2      	ldr	r3, [pc, #648]	@ (8002e4c <locomote+0x694>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <locomote+0x420>
 8002bc8:	4ba0      	ldr	r3, [pc, #640]	@ (8002e4c <locomote+0x694>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d103      	bne.n	8002bd8 <locomote+0x420>
 8002bd0:	4b9e      	ldr	r3, [pc, #632]	@ (8002e4c <locomote+0x694>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <locomote+0x448>
    dir[0] = (base[0] < 0) ? 0 : 1;
 8002bd8:	4b9c      	ldr	r3, [pc, #624]	@ (8002e4c <locomote+0x694>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	0fdb      	lsrs	r3, r3, #31
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b9a      	ldr	r3, [pc, #616]	@ (8002e50 <locomote+0x698>)
 8002be6:	601a      	str	r2, [r3, #0]
    dir[1] = (base[1] < 0) ? 1 : 0;
 8002be8:	4b98      	ldr	r3, [pc, #608]	@ (8002e4c <locomote+0x694>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0fdb      	lsrs	r3, r3, #31
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b97      	ldr	r3, [pc, #604]	@ (8002e50 <locomote+0x698>)
 8002bf2:	605a      	str	r2, [r3, #4]
    dir[2] = (base[2] < 0) ? 1 : 0;
 8002bf4:	4b95      	ldr	r3, [pc, #596]	@ (8002e4c <locomote+0x694>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	0fdb      	lsrs	r3, r3, #31
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b94      	ldr	r3, [pc, #592]	@ (8002e50 <locomote+0x698>)
 8002bfe:	609a      	str	r2, [r3, #8]
  }
//  setpoint1 = absolute((int)base[0] * 9.549);
//  setpoint2 = absolute((int)base[1] * 9.549);
//  setpoint3 = absolute((int)base[2] * 9.549);
  setpoint1 = base[0] * 9.549;
 8002c00:	4b92      	ldr	r3, [pc, #584]	@ (8002e4c <locomote+0x694>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fc8d 	bl	8000524 <__aeabi_i2d>
 8002c0a:	a389      	add	r3, pc, #548	@ (adr r3, 8002e30 <locomote+0x678>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f7fd fcf2 	bl	80005f8 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ff9c 	bl	8000b58 <__aeabi_d2iz>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	4b8b      	ldr	r3, [pc, #556]	@ (8002e54 <locomote+0x69c>)
 8002c26:	801a      	strh	r2, [r3, #0]
  setpoint2 = base[1] * 9.549;
 8002c28:	4b88      	ldr	r3, [pc, #544]	@ (8002e4c <locomote+0x694>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc79 	bl	8000524 <__aeabi_i2d>
 8002c32:	a37f      	add	r3, pc, #508	@ (adr r3, 8002e30 <locomote+0x678>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fcde 	bl	80005f8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fd ff88 	bl	8000b58 <__aeabi_d2iz>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	b21a      	sxth	r2, r3
 8002c4c:	4b82      	ldr	r3, [pc, #520]	@ (8002e58 <locomote+0x6a0>)
 8002c4e:	801a      	strh	r2, [r3, #0]
  setpoint3 = base[2] * 9.549;
 8002c50:	4b7e      	ldr	r3, [pc, #504]	@ (8002e4c <locomote+0x694>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd fc65 	bl	8000524 <__aeabi_i2d>
 8002c5a:	a375      	add	r3, pc, #468	@ (adr r3, 8002e30 <locomote+0x678>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f7fd fcca 	bl	80005f8 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f7fd ff74 	bl	8000b58 <__aeabi_d2iz>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	4b79      	ldr	r3, [pc, #484]	@ (8002e5c <locomote+0x6a4>)
 8002c76:	801a      	strh	r2, [r3, #0]
  setpoint1 = (setpoint1 < 0)?(~setpoint1)+ 1: setpoint1;
 8002c78:	4b76      	ldr	r3, [pc, #472]	@ (8002e54 <locomote+0x69c>)
 8002c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bfb8      	it	lt
 8002c82:	425b      	neglt	r3, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	4b72      	ldr	r3, [pc, #456]	@ (8002e54 <locomote+0x69c>)
 8002c8a:	801a      	strh	r2, [r3, #0]
  setpoint2= (setpoint2 < 0)?(~setpoint2)+ 1: setpoint2;
 8002c8c:	4b72      	ldr	r3, [pc, #456]	@ (8002e58 <locomote+0x6a0>)
 8002c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bfb8      	it	lt
 8002c96:	425b      	neglt	r3, r3
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b21a      	sxth	r2, r3
 8002c9c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e58 <locomote+0x6a0>)
 8002c9e:	801a      	strh	r2, [r3, #0]
  setpoint3 =(setpoint3 < 0)?(~setpoint3)+ 1: setpoint3;
 8002ca0:	4b6e      	ldr	r3, [pc, #440]	@ (8002e5c <locomote+0x6a4>)
 8002ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bfb8      	it	lt
 8002caa:	425b      	neglt	r3, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	b21a      	sxth	r2, r3
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e5c <locomote+0x6a4>)
 8002cb2:	801a      	strh	r2, [r3, #0]
  basepwm[0] = base[0] * 980;
 8002cb4:	4b65      	ldr	r3, [pc, #404]	@ (8002e4c <locomote+0x694>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 7275 	mov.w	r2, #980	@ 0x3d4
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	4a67      	ldr	r2, [pc, #412]	@ (8002e60 <locomote+0x6a8>)
 8002cc2:	6013      	str	r3, [r2, #0]
  basepwm[1] = base[1] * 960;
 8002cc4:	4b61      	ldr	r3, [pc, #388]	@ (8002e4c <locomote+0x694>)
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	019b      	lsls	r3, r3, #6
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b63      	ldr	r3, [pc, #396]	@ (8002e60 <locomote+0x6a8>)
 8002cd4:	605a      	str	r2, [r3, #4]
  basepwm[2] = base[2] * 990;
 8002cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e4c <locomote+0x694>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f240 32de 	movw	r2, #990	@ 0x3de
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e60 <locomote+0x6a8>)
 8002ce4:	6093      	str	r3, [r2, #8]

  basepwm[0] = (basepwm[0]<0)?(~basepwm[0]) + 1:basepwm[0];
 8002ce6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e60 <locomote+0x6a8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bfb8      	it	lt
 8002cee:	425b      	neglt	r3, r3
 8002cf0:	4a5b      	ldr	r2, [pc, #364]	@ (8002e60 <locomote+0x6a8>)
 8002cf2:	6013      	str	r3, [r2, #0]
  basepwm[1] = (basepwm[1]<0)?(~basepwm[1]) + 1:basepwm[1];
 8002cf4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e60 <locomote+0x6a8>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bfb8      	it	lt
 8002cfc:	425b      	neglt	r3, r3
 8002cfe:	4a58      	ldr	r2, [pc, #352]	@ (8002e60 <locomote+0x6a8>)
 8002d00:	6053      	str	r3, [r2, #4]
  basepwm[2] = (basepwm[2]<0)?(~basepwm[2]) + 1:basepwm[2];
 8002d02:	4b57      	ldr	r3, [pc, #348]	@ (8002e60 <locomote+0x6a8>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bfb8      	it	lt
 8002d0a:	425b      	neglt	r3, r3
 8002d0c:	4a54      	ldr	r2, [pc, #336]	@ (8002e60 <locomote+0x6a8>)
 8002d0e:	6093      	str	r3, [r2, #8]

  // previous 4.28  high 4.36
  error1 = ((setpoint1 - rpm1) / 9.549) * 1075.2;
 8002d10:	4b50      	ldr	r3, [pc, #320]	@ (8002e54 <locomote+0x69c>)
 8002d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b52      	ldr	r3, [pc, #328]	@ (8002e64 <locomote+0x6ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc00 	bl	8000524 <__aeabi_i2d>
 8002d24:	a342      	add	r3, pc, #264	@ (adr r3, 8002e30 <locomote+0x678>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fd8f 	bl	800084c <__aeabi_ddiv>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	a340      	add	r3, pc, #256	@ (adr r3, 8002e38 <locomote+0x680>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd fc5c 	bl	80005f8 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7fd ff4e 	bl	8000be8 <__aeabi_d2f>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4a46      	ldr	r2, [pc, #280]	@ (8002e68 <locomote+0x6b0>)
 8002d50:	6013      	str	r3, [r2, #0]
  error2 = ((setpoint2 - rpm2) / 9.549) * 1075.2;
 8002d52:	4b41      	ldr	r3, [pc, #260]	@ (8002e58 <locomote+0x6a0>)
 8002d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b44      	ldr	r3, [pc, #272]	@ (8002e6c <locomote+0x6b4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fbdf 	bl	8000524 <__aeabi_i2d>
 8002d66:	a332      	add	r3, pc, #200	@ (adr r3, 8002e30 <locomote+0x678>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd fd6e 	bl	800084c <__aeabi_ddiv>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	a32f      	add	r3, pc, #188	@ (adr r3, 8002e38 <locomote+0x680>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f7fd fc3b 	bl	80005f8 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f7fd ff2d 	bl	8000be8 <__aeabi_d2f>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4a37      	ldr	r2, [pc, #220]	@ (8002e70 <locomote+0x6b8>)
 8002d92:	6013      	str	r3, [r2, #0]
  error3 = ((setpoint3 - rpm3) / 9.549) * 1075.2;
 8002d94:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <locomote+0x6a4>)
 8002d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b35      	ldr	r3, [pc, #212]	@ (8002e74 <locomote+0x6bc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fbbe 	bl	8000524 <__aeabi_i2d>
 8002da8:	a321      	add	r3, pc, #132	@ (adr r3, 8002e30 <locomote+0x678>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	f7fd fd4d 	bl	800084c <__aeabi_ddiv>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	a31f      	add	r3, pc, #124	@ (adr r3, 8002e38 <locomote+0x680>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fc1a 	bl	80005f8 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f7fd ff0c 	bl	8000be8 <__aeabi_d2f>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4a29      	ldr	r2, [pc, #164]	@ (8002e78 <locomote+0x6c0>)
 8002dd4:	6013      	str	r3, [r2, #0]


  if (HAL_GetTick() - previousmillis >= sampletime) {
 8002dd6:	f002 fc55 	bl	8005684 <HAL_GetTick>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	60fa      	str	r2, [r7, #12]
 8002de2:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <locomote+0x6c4>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dec:	4621      	mov	r1, r4
 8002dee:	ebb1 0802 	subs.w	r8, r1, r2
 8002df2:	4629      	mov	r1, r5
 8002df4:	eb61 0903 	sbc.w	r9, r1, r3
 8002df8:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <locomote+0x6c8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	17da      	asrs	r2, r3, #31
 8002dfe:	469a      	mov	sl, r3
 8002e00:	4693      	mov	fp, r2
 8002e02:	45d0      	cmp	r8, sl
 8002e04:	eb79 030b 	sbcs.w	r3, r9, fp
 8002e08:	f2c0 80d5 	blt.w	8002fb6 <locomote+0x7fe>
    pwm1 = basepwm[0] + kp1 * (error1) + kd1 * (error1 - preverror1);
 8002e0c:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <locomote+0x6a8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e18:	4b1a      	ldr	r3, [pc, #104]	@ (8002e84 <locomote+0x6cc>)
 8002e1a:	edd3 6a00 	vldr	s13, [r3]
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <locomote+0x6b0>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2c:	e02c      	b.n	8002e88 <locomote+0x6d0>
 8002e2e:	bf00      	nop
 8002e30:	872b020c 	.word	0x872b020c
 8002e34:	40231916 	.word	0x40231916
 8002e38:	cccccccd 	.word	0xcccccccd
 8002e3c:	4090cccc 	.word	0x4090cccc
 8002e40:	20000350 	.word	0x20000350
 8002e44:	20000358 	.word	0x20000358
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	200002d4 	.word	0x200002d4
 8002e50:	200002bc 	.word	0x200002bc
 8002e54:	2000035c 	.word	0x2000035c
 8002e58:	2000035e 	.word	0x2000035e
 8002e5c:	20000360 	.word	0x20000360
 8002e60:	200002c8 	.word	0x200002c8
 8002e64:	2000053c 	.word	0x2000053c
 8002e68:	20000370 	.word	0x20000370
 8002e6c:	20000540 	.word	0x20000540
 8002e70:	20000374 	.word	0x20000374
 8002e74:	20000544 	.word	0x20000544
 8002e78:	20000378 	.word	0x20000378
 8002e7c:	20000320 	.word	0x20000320
 8002e80:	20000028 	.word	0x20000028
 8002e84:	2000000c 	.word	0x2000000c
 8002e88:	4b62      	ldr	r3, [pc, #392]	@ (8003014 <locomote+0x85c>)
 8002e8a:	edd3 6a00 	vldr	s13, [r3]
 8002e8e:	4b62      	ldr	r3, [pc, #392]	@ (8003018 <locomote+0x860>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e98:	4b60      	ldr	r3, [pc, #384]	@ (800301c <locomote+0x864>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eaa:	ee17 2a90 	vmov	r2, s15
 8002eae:	4b5c      	ldr	r3, [pc, #368]	@ (8003020 <locomote+0x868>)
 8002eb0:	601a      	str	r2, [r3, #0]
    //     dir[0] = (dir[0] == 0) ? 1 : 0;
    //     dirchanged1_flag = true;
    //   }
    // }

    pwm1 = constrain(pwm1, 0, 40000);
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8003020 <locomote+0x868>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fa57 	bl	8001370 <constrain>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4a56      	ldr	r2, [pc, #344]	@ (8003020 <locomote+0x868>)
 8002ec6:	6013      	str	r3, [r2, #0]
    // prevPwm1 = currPwm1;
    pwm2 = basepwm[1] + kp2 * (error2) + kd2 * (error2 - preverror2);
 8002ec8:	4b56      	ldr	r3, [pc, #344]	@ (8003024 <locomote+0x86c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed4:	4b54      	ldr	r3, [pc, #336]	@ (8003028 <locomote+0x870>)
 8002ed6:	edd3 6a00 	vldr	s13, [r3]
 8002eda:	4b54      	ldr	r3, [pc, #336]	@ (800302c <locomote+0x874>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee8:	4b50      	ldr	r3, [pc, #320]	@ (800302c <locomote+0x874>)
 8002eea:	edd3 6a00 	vldr	s13, [r3]
 8002eee:	4b50      	ldr	r3, [pc, #320]	@ (8003030 <locomote+0x878>)
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8003034 <locomote+0x87c>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f0a:	ee17 2a90 	vmov	r2, s15
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003038 <locomote+0x880>)
 8002f10:	601a      	str	r2, [r3, #0]
    //     dir[1] = (dir[1] == 0) ? 1 : 0;
    //     dirchanged2_flag = true;
    //   }
    // }

    pwm2 = constrain(pwm2, 0, 40000);
 8002f12:	4b49      	ldr	r3, [pc, #292]	@ (8003038 <locomote+0x880>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fa27 	bl	8001370 <constrain>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4a44      	ldr	r2, [pc, #272]	@ (8003038 <locomote+0x880>)
 8002f26:	6013      	str	r3, [r2, #0]
    // prevPwm2 = currPwm2;
    pwm3 = basepwm[2]+ kp3 * (error3) + kd3 * (error3 - preverror3);
 8002f28:	4b3e      	ldr	r3, [pc, #248]	@ (8003024 <locomote+0x86c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f34:	4b41      	ldr	r3, [pc, #260]	@ (800303c <locomote+0x884>)
 8002f36:	edd3 6a00 	vldr	s13, [r3]
 8002f3a:	4b41      	ldr	r3, [pc, #260]	@ (8003040 <locomote+0x888>)
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f48:	4b3d      	ldr	r3, [pc, #244]	@ (8003040 <locomote+0x888>)
 8002f4a:	edd3 6a00 	vldr	s13, [r3]
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <locomote+0x88c>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f58:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <locomote+0x890>)
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6a:	ee17 2a90 	vmov	r2, s15
 8002f6e:	4b37      	ldr	r3, [pc, #220]	@ (800304c <locomote+0x894>)
 8002f70:	601a      	str	r2, [r3, #0]
    //   if (!dirchanged3_flag) {
    //     dir[2] = (dir[2] == 0) ? 1 : 0;
    //     dirchanged3_flag = true;
    //   }
    // }
    pwm3 = constrain(pwm3, 0, 40000);
 8002f72:	4b36      	ldr	r3, [pc, #216]	@ (800304c <locomote+0x894>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe f9f7 	bl	8001370 <constrain>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4a31      	ldr	r2, [pc, #196]	@ (800304c <locomote+0x894>)
 8002f86:	6013      	str	r3, [r2, #0]
    // prevPwm3 = currPwm3;
    preverror1 = error1;
 8002f88:	4b22      	ldr	r3, [pc, #136]	@ (8003014 <locomote+0x85c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	@ (8003018 <locomote+0x860>)
 8002f8e:	6013      	str	r3, [r2, #0]
    preverror2 = error2;
 8002f90:	4b26      	ldr	r3, [pc, #152]	@ (800302c <locomote+0x874>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a26      	ldr	r2, [pc, #152]	@ (8003030 <locomote+0x878>)
 8002f96:	6013      	str	r3, [r2, #0]
    preverror3 = error3;
 8002f98:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <locomote+0x888>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a29      	ldr	r2, [pc, #164]	@ (8003044 <locomote+0x88c>)
 8002f9e:	6013      	str	r3, [r2, #0]
    previousmillis = HAL_GetTick();
 8002fa0:	f002 fb70 	bl	8005684 <HAL_GetTick>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	4b28      	ldr	r3, [pc, #160]	@ (8003050 <locomote+0x898>)
 8002fae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002fb2:	e9c3 1200 	strd	r1, r2, [r3]
  }

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, dir[0]);
 8002fb6:	4b27      	ldr	r3, [pc, #156]	@ (8003054 <locomote+0x89c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fc2:	4825      	ldr	r0, [pc, #148]	@ (8003058 <locomote+0x8a0>)
 8002fc4:	f003 ff3a 	bl	8006e3c <HAL_GPIO_WritePin>
    TIM2->CCR3=pwm1;
 8002fc8:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <locomote+0x868>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, dir[1]);
 8002fd2:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <locomote+0x89c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fde:	481e      	ldr	r0, [pc, #120]	@ (8003058 <locomote+0x8a0>)
 8002fe0:	f003 ff2c 	bl	8006e3c <HAL_GPIO_WritePin>
  TIM2->CCR4=pwm2;
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <locomote+0x880>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fec:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, dir[2]);
 8002fee:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <locomote+0x89c>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ffa:	4818      	ldr	r0, [pc, #96]	@ (800305c <locomote+0x8a4>)
 8002ffc:	f003 ff1e 	bl	8006e3c <HAL_GPIO_WritePin>
   TIM2->CCR2=pwm3;
 8003000:	4b12      	ldr	r3, [pc, #72]	@ (800304c <locomote+0x894>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38




}
 800300a:	bf00      	nop
 800300c:	3738      	adds	r7, #56	@ 0x38
 800300e:	46bd      	mov	sp, r7
 8003010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003014:	20000370 	.word	0x20000370
 8003018:	2000037c 	.word	0x2000037c
 800301c:	20000018 	.word	0x20000018
 8003020:	20000364 	.word	0x20000364
 8003024:	200002c8 	.word	0x200002c8
 8003028:	20000010 	.word	0x20000010
 800302c:	20000374 	.word	0x20000374
 8003030:	20000380 	.word	0x20000380
 8003034:	2000001c 	.word	0x2000001c
 8003038:	20000368 	.word	0x20000368
 800303c:	20000014 	.word	0x20000014
 8003040:	20000378 	.word	0x20000378
 8003044:	20000384 	.word	0x20000384
 8003048:	20000020 	.word	0x20000020
 800304c:	2000036c 	.word	0x2000036c
 8003050:	20000320 	.word	0x20000320
 8003054:	200002bc 	.word	0x200002bc
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40020400 	.word	0x40020400

08003060 <autolocomote>:
 *      Author: RISHI
 */
#ifndef SRC_AUTOLOCOMOTION_H_
#define SRC_AUTOLOCOMOTION_H_

void autolocomote() {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	if (!autoloco) {
 8003064:	4b2b      	ldr	r3, [pc, #172]	@ (8003114 <autolocomote+0xb4>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	f083 0301 	eor.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d14e      	bne.n	8003110 <autolocomote+0xb0>
		return;
	}
	if(!isardistanceset){
 8003072:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <autolocomote+0xb8>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	f083 0301 	eor.w	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <autolocomote+0x2e>
		currentar = ARdistance;
 8003080:	4b26      	ldr	r3, [pc, #152]	@ (800311c <autolocomote+0xbc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a26      	ldr	r2, [pc, #152]	@ (8003120 <autolocomote+0xc0>)
 8003086:	6013      	str	r3, [r2, #0]
		isardistanceset = true;
 8003088:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <autolocomote+0xb8>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
	}

	err_auto =  targetauto - (currentar - ARdistance);
 800308e:	4b25      	ldr	r3, [pc, #148]	@ (8003124 <autolocomote+0xc4>)
 8003090:	ed93 7a00 	vldr	s14, [r3]
 8003094:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <autolocomote+0xc0>)
 8003096:	edd3 6a00 	vldr	s13, [r3]
 800309a:	4b20      	ldr	r3, [pc, #128]	@ (800311c <autolocomote+0xbc>)
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <autolocomote+0xc8>)
 80030aa:	edc3 7a00 	vstr	s15, [r3]
	if(abs(err_auto)<0.5){
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <autolocomote+0xc8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fa48 	bl	8000548 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	ec43 2b10 	vmov	d0, r2, r3
 80030c0:	f007 fcfe 	bl	800aac0 <abs>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dc03      	bgt.n	80030d2 <autolocomote+0x72>
		autoloco=false;
 80030ca:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <autolocomote+0xb4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
		return;
 80030d0:	e01f      	b.n	8003112 <autolocomote+0xb2>
	}
	vy = Kp_auto * (err_auto);
 80030d2:	4b16      	ldr	r3, [pc, #88]	@ (800312c <autolocomote+0xcc>)
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <autolocomote+0xc8>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	ee17 0a90 	vmov	r0, s15
 80030e6:	f7fd fa2f 	bl	8000548 <__aeabi_f2d>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4910      	ldr	r1, [pc, #64]	@ (8003130 <autolocomote+0xd0>)
 80030f0:	e9c1 2300 	strd	r2, r3, [r1]
	vx=0;
 80030f4:	490f      	ldr	r1, [pc, #60]	@ (8003134 <autolocomote+0xd4>)
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9c1 2300 	strd	r2, r3, [r1]
	prev_dis_auto = err_dis;
 8003102:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <autolocomote+0xd8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <autolocomote+0xdc>)
 8003108:	6013      	str	r3, [r2, #0]
	locomote();
 800310a:	f7ff fb55 	bl	80027b8 <locomote>
 800310e:	e000      	b.n	8003112 <autolocomote+0xb2>
		return;
 8003110:	bf00      	nop

}
 8003112:	bd80      	pop	{r7, pc}
 8003114:	200002af 	.word	0x200002af
 8003118:	200002b0 	.word	0x200002b0
 800311c:	20000058 	.word	0x20000058
 8003120:	200002e4 	.word	0x200002e4
 8003124:	20000008 	.word	0x20000008
 8003128:	20000394 	.word	0x20000394
 800312c:	20000060 	.word	0x20000060
 8003130:	20000350 	.word	0x20000350
 8003134:	20000348 	.word	0x20000348
 8003138:	200002e0 	.word	0x200002e0
 800313c:	20000398 	.word	0x20000398

08003140 <analogRead_pa4>:
//    else if (value > max) return max;
//    else return value;
//}

ADC_HandleTypeDef hadc1;
uint16_t analogRead_pa4() {
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 8003152:	2304      	movs	r3, #4
 8003154:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800315a:	2304      	movs	r3, #4
 800315c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	4619      	mov	r1, r3
 8003162:	480e      	ldr	r0, [pc, #56]	@ (800319c <analogRead_pa4+0x5c>)
 8003164:	f002 fca0 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <analogRead_pa4+0x32>
		Error_Handler();
 800316e:	f001 fa6b 	bl	8004648 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8003172:	480a      	ldr	r0, [pc, #40]	@ (800319c <analogRead_pa4+0x5c>)
 8003174:	f002 fafa 	bl	800576c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 8003178:	2114      	movs	r1, #20
 800317a:	4808      	ldr	r0, [pc, #32]	@ (800319c <analogRead_pa4+0x5c>)
 800317c:	f002 fbfb 	bl	8005976 <HAL_ADC_PollForConversion>
	uint16_t pot = HAL_ADC_GetValue(&hadc1);
 8003180:	4806      	ldr	r0, [pc, #24]	@ (800319c <analogRead_pa4+0x5c>)
 8003182:	f002 fc83 	bl	8005a8c <HAL_ADC_GetValue>
 8003186:	4603      	mov	r3, r0
 8003188:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 800318a:	4804      	ldr	r0, [pc, #16]	@ (800319c <analogRead_pa4+0x5c>)
 800318c:	f002 fbc0 	bl	8005910 <HAL_ADC_Stop>
	return pot;
 8003190:	8afb      	ldrh	r3, [r7, #22]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000564 	.word	0x20000564

080031a0 <dribble>:

void dribble() {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
	temp_pot = analogRead_pa4();
 80031a4:	f7ff ffcc 	bl	8003140 <analogRead_pa4>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b7b      	ldr	r3, [pc, #492]	@ (800339c <dribble+0x1fc>)
 80031ae:	601a      	str	r2, [r3, #0]

	if (!f_dribble) {
 80031b0:	4b7b      	ldr	r3, [pc, #492]	@ (80033a0 <dribble+0x200>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f040 80ec 	bne.w	8003398 <dribble+0x1f8>
		return;
	}

	if (fOperation == 1) {
 80031c0:	4b78      	ldr	r3, [pc, #480]	@ (80033a4 <dribble+0x204>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f040 80e8 	bne.w	800339a <dribble+0x1fa>

		if (HAL_GetTick() - prevmillis_d >= 50) {
 80031ca:	f002 fa5b 	bl	8005684 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b75      	ldr	r3, [pc, #468]	@ (80033a8 <dribble+0x208>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b31      	cmp	r3, #49	@ 0x31
 80031d8:	f240 80df 	bls.w	800339a <dribble+0x1fa>
			error_d = dribble_sp - temp_pot;
 80031dc:	4b73      	ldr	r3, [pc, #460]	@ (80033ac <dribble+0x20c>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b6e      	ldr	r3, [pc, #440]	@ (800339c <dribble+0x1fc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	4a72      	ldr	r2, [pc, #456]	@ (80033b0 <dribble+0x210>)
 80031e8:	6013      	str	r3, [r2, #0]
			(error_d >= 0) ?HAL_GPIO_WritePin(dirPort_d, dirPin_d, 0) :HAL_GPIO_WritePin(dirPort_d, dirPin_d, 1);
 80031ea:	4b71      	ldr	r3, [pc, #452]	@ (80033b0 <dribble+0x210>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	db06      	blt.n	8003200 <dribble+0x60>
 80031f2:	2200      	movs	r2, #0
 80031f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031f8:	486e      	ldr	r0, [pc, #440]	@ (80033b4 <dribble+0x214>)
 80031fa:	f003 fe1f 	bl	8006e3c <HAL_GPIO_WritePin>
 80031fe:	e005      	b.n	800320c <dribble+0x6c>
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003206:	486b      	ldr	r0, [pc, #428]	@ (80033b4 <dribble+0x214>)
 8003208:	f003 fe18 	bl	8006e3c <HAL_GPIO_WritePin>
			kart = abs(error_d);
 800320c:	4b68      	ldr	r3, [pc, #416]	@ (80033b0 <dribble+0x210>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	bfb8      	it	lt
 8003214:	425b      	neglt	r3, r3
 8003216:	4a68      	ldr	r2, [pc, #416]	@ (80033b8 <dribble+0x218>)
 8003218:	6013      	str	r3, [r2, #0]
			if (abs(error_d) <= 30) {
 800321a:	4b65      	ldr	r3, [pc, #404]	@ (80033b0 <dribble+0x210>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f113 0f1e 	cmn.w	r3, #30
 8003222:	db58      	blt.n	80032d6 <dribble+0x136>
 8003224:	4b62      	ldr	r3, [pc, #392]	@ (80033b0 <dribble+0x210>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b1e      	cmp	r3, #30
 800322a:	dc54      	bgt.n	80032d6 <dribble+0x136>

				TIM12->CCR2 = 0;
 800322c:	4b63      	ldr	r3, [pc, #396]	@ (80033bc <dribble+0x21c>)
 800322e:	2200      	movs	r2, #0
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38
				dalay(500);
 8003232:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003236:	f000 f8d9 	bl	80033ec <dalay>
				switch (count) {
 800323a:	4b61      	ldr	r3, [pc, #388]	@ (80033c0 <dribble+0x220>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d018      	beq.n	8003274 <dribble+0xd4>
 8003242:	2b01      	cmp	r3, #1
 8003244:	d145      	bne.n	80032d2 <dribble+0x132>
//					break;
//					}
				case 1:
//					if (dribble_sp == madhe) {
					// Serial.println(count);
					dribble_sp = var;
 8003246:	4b59      	ldr	r3, [pc, #356]	@ (80033ac <dribble+0x20c>)
 8003248:	f240 624f 	movw	r2, #1615	@ 0x64f
 800324c:	601a      	str	r2, [r3, #0]
					temp_pot = analogRead_pa4();
 800324e:	f7ff ff77 	bl	8003140 <analogRead_pa4>
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	4b51      	ldr	r3, [pc, #324]	@ (800339c <dribble+0x1fc>)
 8003258:	601a      	str	r2, [r3, #0]
//					prev_error_pot = 0;
//					error_d = dribble_sp - temp_pot;
//					count = 2;

					flag_amkette = true;
 800325a:	4b5a      	ldr	r3, [pc, #360]	@ (80033c4 <dribble+0x224>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
					f_dribble = false;
 8003260:	4b4f      	ldr	r3, [pc, #316]	@ (80033a0 <dribble+0x200>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
					fOperation = 0;
 8003266:	4b4f      	ldr	r3, [pc, #316]	@ (80033a4 <dribble+0x204>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
					count = 0;
 800326c:	4b54      	ldr	r3, [pc, #336]	@ (80033c0 <dribble+0x220>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

					break;
 8003272:	e02f      	b.n	80032d4 <dribble+0x134>
//					}
				case 0:

//					if (dribble_sp == var) {
					HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 8003274:	2201      	movs	r2, #1
 8003276:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800327a:	4853      	ldr	r0, [pc, #332]	@ (80033c8 <dribble+0x228>)
 800327c:	f003 fdde 	bl	8006e3c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 8003280:	2201      	movs	r2, #1
 8003282:	2108      	movs	r1, #8
 8003284:	4851      	ldr	r0, [pc, #324]	@ (80033cc <dribble+0x22c>)
 8003286:	f003 fdd9 	bl	8006e3c <HAL_GPIO_WritePin>
					dalay(1000);
 800328a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800328e:	f000 f8ad 	bl	80033ec <dalay>
					HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003298:	484b      	ldr	r0, [pc, #300]	@ (80033c8 <dribble+0x228>)
 800329a:	f003 fdcf 	bl	8006e3c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2108      	movs	r1, #8
 80032a2:	484a      	ldr	r0, [pc, #296]	@ (80033cc <dribble+0x22c>)
 80032a4:	f003 fdca 	bl	8006e3c <HAL_GPIO_WritePin>
					dribble_sp = khali;
 80032a8:	4b40      	ldr	r3, [pc, #256]	@ (80033ac <dribble+0x20c>)
 80032aa:	f640 6274 	movw	r2, #3700	@ 0xe74
 80032ae:	601a      	str	r2, [r3, #0]
					temp_pot = analogRead_pa4();
 80032b0:	f7ff ff46 	bl	8003140 <analogRead_pa4>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b38      	ldr	r3, [pc, #224]	@ (800339c <dribble+0x1fc>)
 80032ba:	601a      	str	r2, [r3, #0]
					error_d = dribble_sp - temp_pot;
 80032bc:	4b3b      	ldr	r3, [pc, #236]	@ (80033ac <dribble+0x20c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b36      	ldr	r3, [pc, #216]	@ (800339c <dribble+0x1fc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	4a3a      	ldr	r2, [pc, #232]	@ (80033b0 <dribble+0x210>)
 80032c8:	6013      	str	r3, [r2, #0]
					count = 1;
 80032ca:	4b3d      	ldr	r3, [pc, #244]	@ (80033c0 <dribble+0x220>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

					break;
 80032d0:	e000      	b.n	80032d4 <dribble+0x134>
//					}
				default:
					break;
 80032d2:	bf00      	nop
				switch (count) {
 80032d4:	e056      	b.n	8003384 <dribble+0x1e4>
				}

			} else {
				error_d = abs(error_d);
 80032d6:	4b36      	ldr	r3, [pc, #216]	@ (80033b0 <dribble+0x210>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bfb8      	it	lt
 80032de:	425b      	neglt	r3, r3
 80032e0:	4a33      	ldr	r2, [pc, #204]	@ (80033b0 <dribble+0x210>)
 80032e2:	6013      	str	r3, [r2, #0]
				if (error_d < 100) {
 80032e4:	4b32      	ldr	r3, [pc, #200]	@ (80033b0 <dribble+0x210>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b63      	cmp	r3, #99	@ 0x63
 80032ea:	dc07      	bgt.n	80032fc <dribble+0x15c>
					integral_d += error_d;
 80032ec:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <dribble+0x230>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b2f      	ldr	r3, [pc, #188]	@ (80033b0 <dribble+0x210>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4413      	add	r3, r2
 80032f6:	4a36      	ldr	r2, [pc, #216]	@ (80033d0 <dribble+0x230>)
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e002      	b.n	8003302 <dribble+0x162>
				} else {
					integral_d = 0;
 80032fc:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <dribble+0x230>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
				}
				pwm_dribble = 12000 + (error_d * kp_d) + kd_d * (error_d - prev_error_pot) + ki_d * integral_d; // + 0.014 * (error_d - prev_error_pot) + 0.001 * (integral);
 8003302:	4b2b      	ldr	r3, [pc, #172]	@ (80033b0 <dribble+0x210>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330e:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <dribble+0x234>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003318:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80033d8 <dribble+0x238>
 800331c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003320:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <dribble+0x210>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b2d      	ldr	r3, [pc, #180]	@ (80033dc <dribble+0x23c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003332:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <dribble+0x240>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800333c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003340:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <dribble+0x230>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	ee07 3a90 	vmov	s15, r3
 8003348:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800334c:	4b25      	ldr	r3, [pc, #148]	@ (80033e4 <dribble+0x244>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800335e:	ee17 2a90 	vmov	r2, s15
 8003362:	4b21      	ldr	r3, [pc, #132]	@ (80033e8 <dribble+0x248>)
 8003364:	601a      	str	r2, [r3, #0]
				pwm_dribble = constrain(pwm_dribble, 0, 65535);
 8003366:	4b20      	ldr	r3, [pc, #128]	@ (80033e8 <dribble+0x248>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd fffd 	bl	8001370 <constrain>
 8003376:	4603      	mov	r3, r0
 8003378:	4a1b      	ldr	r2, [pc, #108]	@ (80033e8 <dribble+0x248>)
 800337a:	6013      	str	r3, [r2, #0]
				TIM12->CCR2 = pwm_dribble;
 800337c:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <dribble+0x248>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <dribble+0x21c>)
 8003382:	639a      	str	r2, [r3, #56]	@ 0x38
//        analogWrite(pwmpin_d, pwm_dribble);
			}
			prevmillis_d = HAL_GetTick();
 8003384:	f002 f97e 	bl	8005684 <HAL_GetTick>
 8003388:	4603      	mov	r3, r0
 800338a:	4a07      	ldr	r2, [pc, #28]	@ (80033a8 <dribble+0x208>)
 800338c:	6013      	str	r3, [r2, #0]
			prev_error_pot = error_d;
 800338e:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <dribble+0x210>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <dribble+0x23c>)
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e000      	b.n	800339a <dribble+0x1fa>
		return;
 8003398:	bf00      	nop
		}
	}
}
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200003a4 	.word	0x200003a4
 80033a0:	200003a0 	.word	0x200003a0
 80033a4:	2000039c 	.word	0x2000039c
 80033a8:	200003ac 	.word	0x200003ac
 80033ac:	20000064 	.word	0x20000064
 80033b0:	200003b8 	.word	0x200003b8
 80033b4:	40020400 	.word	0x40020400
 80033b8:	20000560 	.word	0x20000560
 80033bc:	40001800 	.word	0x40001800
 80033c0:	200003b0 	.word	0x200003b0
 80033c4:	20000054 	.word	0x20000054
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	200003a8 	.word	0x200003a8
 80033d4:	20000068 	.word	0x20000068
 80033d8:	463b8000 	.word	0x463b8000
 80033dc:	200002b4 	.word	0x200002b4
 80033e0:	2000006c 	.word	0x2000006c
 80033e4:	20000070 	.word	0x20000070
 80033e8:	200003b4 	.word	0x200003b4

080033ec <dalay>:
//     }
//     prev_error_pot = error_pot;
//   }
// }

void dalay(int d) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	unsigned long prevmillis1 = HAL_GetTick();
 80033f4:	f002 f946 	bl	8005684 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - prevmillis1 <= d) {
 80033fa:	bf00      	nop
 80033fc:	f002 f942 	bl	8005684 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad2      	subs	r2, r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d9f7      	bls.n	80033fc <dalay+0x10>
		// locomotion();
		// locomote();
		// recievecmd();
		// encoders();
	}
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_TIM_IC_CaptureCallback>:
int u = 0;
bno055_vector_t v;

//uint32_t prev=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
//	else if(htim == &htim3)counter_lower= __HAL_TIM_GetCounter(&htim3);
//	else if(htim == &htim4) counter_4= __HAL_TIM_GetCounter(&htim4);
//	else if(htim == &htim5) counter_5= __HAL_TIM_GetCounter(&htim5);
//	else counter_8= __HAL_TIM_GetCounter(&htim8);

}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
//	if (huart == &huart2)
//		HAL_UART_Receive(&huart2, Ar_data, 29,10);
	if (huart == &huart5)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a0b      	ldr	r2, [pc, #44]	@ (8003464 <HAL_UART_RxCpltCallback+0x38>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d105      	bne.n	8003448 <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Receive_DMA(&huart5, Rx_data, 20);
 800343c:	2214      	movs	r2, #20
 800343e:	490a      	ldr	r1, [pc, #40]	@ (8003468 <HAL_UART_RxCpltCallback+0x3c>)
 8003440:	4808      	ldr	r0, [pc, #32]	@ (8003464 <HAL_UART_RxCpltCallback+0x38>)
 8003442:	f006 fa30 	bl	80098a6 <HAL_UART_Receive_DMA>
	else if (huart == &huart4) {
		HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
	}
}
 8003446:	e008      	b.n	800345a <HAL_UART_RxCpltCallback+0x2e>
	else if (huart == &huart4) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a08      	ldr	r2, [pc, #32]	@ (800346c <HAL_UART_RxCpltCallback+0x40>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d104      	bne.n	800345a <HAL_UART_RxCpltCallback+0x2e>
		HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
 8003450:	2203      	movs	r2, #3
 8003452:	4907      	ldr	r1, [pc, #28]	@ (8003470 <HAL_UART_RxCpltCallback+0x44>)
 8003454:	4805      	ldr	r0, [pc, #20]	@ (800346c <HAL_UART_RxCpltCallback+0x40>)
 8003456:	f006 fa26 	bl	80098a6 <HAL_UART_Receive_DMA>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000720 	.word	0x20000720
 8003468:	20000278 	.word	0x20000278
 800346c:	200006d8 	.word	0x200006d8
 8003470:	200002ac 	.word	0x200002ac

08003474 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003478:	f002 f89e 	bl	80055b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800347c:	f000 fb08 	bl	8003a90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003480:	f001 f81a 	bl	80044b8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003484:	f000 ffc2 	bl	800440c <MX_DMA_Init>
	MX_ADC1_Init();
 8003488:	f000 fb6c 	bl	8003b64 <MX_ADC1_Init>
	MX_I2C1_Init();
 800348c:	f000 fc22 	bl	8003cd4 <MX_I2C1_Init>
	MX_TIM1_Init();
 8003490:	f000 fc4e 	bl	8003d30 <MX_TIM1_Init>
	MX_TIM2_Init();
 8003494:	f000 fca4 	bl	8003de0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8003498:	f000 fd1c 	bl	8003ed4 <MX_TIM3_Init>
	MX_TIM4_Init();
 800349c:	f000 fd6e 	bl	8003f7c <MX_TIM4_Init>
	MX_TIM5_Init();
 80034a0:	f000 fdc0 	bl	8004024 <MX_TIM5_Init>
	MX_TIM8_Init();
 80034a4:	f000 fe12 	bl	80040cc <MX_TIM8_Init>
	MX_TIM9_Init();
 80034a8:	f000 fe68 	bl	800417c <MX_TIM9_Init>
	MX_TIM12_Init();
 80034ac:	f000 feb6 	bl	800421c <MX_TIM12_Init>
	MX_UART4_Init();
 80034b0:	f000 ff04 	bl	80042bc <MX_UART4_Init>
	MX_UART5_Init();
 80034b4:	f000 ff2c 	bl	8004310 <MX_UART5_Init>
	MX_USART1_UART_Init();
 80034b8:	f000 ff54 	bl	8004364 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80034bc:	f000 ff7c 	bl	80043b8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80034c0:	213c      	movs	r1, #60	@ 0x3c
 80034c2:	48bf      	ldr	r0, [pc, #764]	@ (80037c0 <main+0x34c>)
 80034c4:	f005 fb6e 	bl	8008ba4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80034c8:	213c      	movs	r1, #60	@ 0x3c
 80034ca:	48be      	ldr	r0, [pc, #760]	@ (80037c4 <main+0x350>)
 80034cc:	f005 fb6a 	bl	8008ba4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80034d0:	213c      	movs	r1, #60	@ 0x3c
 80034d2:	48bd      	ldr	r0, [pc, #756]	@ (80037c8 <main+0x354>)
 80034d4:	f005 fb66 	bl	8008ba4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80034d8:	213c      	movs	r1, #60	@ 0x3c
 80034da:	48bc      	ldr	r0, [pc, #752]	@ (80037cc <main+0x358>)
 80034dc:	f005 fb62 	bl	8008ba4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80034e0:	213c      	movs	r1, #60	@ 0x3c
 80034e2:	48bb      	ldr	r0, [pc, #748]	@ (80037d0 <main+0x35c>)
 80034e4:	f005 fb5e 	bl	8008ba4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80034e8:	2100      	movs	r1, #0
 80034ea:	48ba      	ldr	r0, [pc, #744]	@ (80037d4 <main+0x360>)
 80034ec:	f005 f9ec 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80034f0:	2104      	movs	r1, #4
 80034f2:	48b8      	ldr	r0, [pc, #736]	@ (80037d4 <main+0x360>)
 80034f4:	f005 f9e8 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80034f8:	2108      	movs	r1, #8
 80034fa:	48b6      	ldr	r0, [pc, #728]	@ (80037d4 <main+0x360>)
 80034fc:	f005 f9e4 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003500:	210c      	movs	r1, #12
 8003502:	48b4      	ldr	r0, [pc, #720]	@ (80037d4 <main+0x360>)
 8003504:	f005 f9e0 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003508:	2100      	movs	r1, #0
 800350a:	48b3      	ldr	r0, [pc, #716]	@ (80037d8 <main+0x364>)
 800350c:	f005 f9dc 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8003510:	2104      	movs	r1, #4
 8003512:	48b1      	ldr	r0, [pc, #708]	@ (80037d8 <main+0x364>)
 8003514:	f005 f9d8 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_3);
 8003518:	2108      	movs	r1, #8
 800351a:	48af      	ldr	r0, [pc, #700]	@ (80037d8 <main+0x364>)
 800351c:	f005 f9d4 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8003520:	2100      	movs	r1, #0
 8003522:	48ae      	ldr	r0, [pc, #696]	@ (80037dc <main+0x368>)
 8003524:	f005 f9d0 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8003528:	2104      	movs	r1, #4
 800352a:	48ac      	ldr	r0, [pc, #688]	@ (80037dc <main+0x368>)
 800352c:	f005 f9cc 	bl	80088c8 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_DMA(&huart5, Rx_data, 20);
 8003530:	2214      	movs	r2, #20
 8003532:	49ab      	ldr	r1, [pc, #684]	@ (80037e0 <main+0x36c>)
 8003534:	48ab      	ldr	r0, [pc, #684]	@ (80037e4 <main+0x370>)
 8003536:	f006 f9b6 	bl	80098a6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart4, Mp_data, 3);
 800353a:	2203      	movs	r2, #3
 800353c:	49aa      	ldr	r1, [pc, #680]	@ (80037e8 <main+0x374>)
 800353e:	48ab      	ldr	r0, [pc, #684]	@ (80037ec <main+0x378>)
 8003540:	f006 f9b1 	bl	80098a6 <HAL_UART_Receive_DMA>

	bno055_assignI2C(&hi2c1);
 8003544:	48aa      	ldr	r0, [pc, #680]	@ (80037f0 <main+0x37c>)
 8003546:	f7fd fde9 	bl	800111c <bno055_assignI2C>
	bno055_setup();
 800354a:	f7fd fda9 	bl	80010a0 <bno055_setup>
	HAL_Delay(200);
 800354e:	20c8      	movs	r0, #200	@ 0xc8
 8003550:	f002 f8a4 	bl	800569c <HAL_Delay>
	bno055_setOperationModeNDOF();
 8003554:	f7fd fd91 	bl	800107a <bno055_setOperationModeNDOF>
	if (hi2c1.State != HAL_I2C_STATE_READY) {
 8003558:	4ba5      	ldr	r3, [pc, #660]	@ (80037f0 <main+0x37c>)
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d005      	beq.n	8003570 <main+0xfc>
		HAL_I2C_DeInit(&hi2c1);
 8003564:	48a2      	ldr	r0, [pc, #648]	@ (80037f0 <main+0x37c>)
 8003566:	f003 fdc7 	bl	80070f8 <HAL_I2C_DeInit>
		HAL_I2C_Init(&hi2c1);
 800356a:	48a1      	ldr	r0, [pc, #644]	@ (80037f0 <main+0x37c>)
 800356c:	f003 fc80 	bl	8006e70 <HAL_I2C_Init>
	}
	HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 8003570:	2201      	movs	r2, #1
 8003572:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003576:	489f      	ldr	r0, [pc, #636]	@ (80037f4 <main+0x380>)
 8003578:	f003 fc60 	bl	8006e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 800357c:	2201      	movs	r2, #1
 800357e:	2108      	movs	r1, #8
 8003580:	489d      	ldr	r0, [pc, #628]	@ (80037f8 <main+0x384>)
 8003582:	f003 fc5b 	bl	8006e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 8003586:	2201      	movs	r2, #1
 8003588:	2110      	movs	r1, #16
 800358a:	489c      	ldr	r0, [pc, #624]	@ (80037fc <main+0x388>)
 800358c:	f003 fc56 	bl	8006e3c <HAL_GPIO_WritePin>
	dalay(200);
 8003590:	20c8      	movs	r0, #200	@ 0xc8
 8003592:	f7ff ff2b 	bl	80033ec <dalay>
	HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800359c:	4895      	ldr	r0, [pc, #596]	@ (80037f4 <main+0x380>)
 800359e:	f003 fc4d 	bl	8006e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2108      	movs	r1, #8
 80035a6:	4894      	ldr	r0, [pc, #592]	@ (80037f8 <main+0x384>)
 80035a8:	f003 fc48 	bl	8006e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2110      	movs	r1, #16
 80035b0:	4892      	ldr	r0, [pc, #584]	@ (80037fc <main+0x388>)
 80035b2:	f003 fc43 	bl	8006e3c <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {


		if (HAL_UART_Receive(&huart2, Ar_data, 29, 10) == HAL_OK) {
 80035b6:	230a      	movs	r3, #10
 80035b8:	221d      	movs	r2, #29
 80035ba:	4991      	ldr	r1, [pc, #580]	@ (8003800 <main+0x38c>)
 80035bc:	4891      	ldr	r0, [pc, #580]	@ (8003804 <main+0x390>)
 80035be:	f006 f8db 	bl	8009778 <HAL_UART_Receive>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <main+0x158>
//			Arvalueslo(&Ar_data);
			__NOP();
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <main+0x15a>
		} else {
			__NOP();
 80035cc:	bf00      	nop
//		if (HAL_GetTick() - prevviousmillisbno > 80) {
//
//			Z_Val = v.x;
//			prevviousmillisbno = HAL_GetTick();
//		}
		temp_pot = analogRead_pa4();
 80035ce:	f7ff fdb7 	bl	8003140 <analogRead_pa4>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003808 <main+0x394>)
 80035d8:	601a      	str	r2, [r3, #0]

//  		start

//		parseJS(&Rx_data);
//		parseJSAR(&Ar_data);
		Mpuvalueslo(&Mp_data);
 80035da:	4883      	ldr	r0, [pc, #524]	@ (80037e8 <main+0x374>)
 80035dc:	f7fe fcb4 	bl	8001f48 <Mpuvalueslo>
		Arvalueslo(&Ar_data);
 80035e0:	4887      	ldr	r0, [pc, #540]	@ (8003800 <main+0x38c>)
 80035e2:	f7fe fc83 	bl	8001eec <Arvalueslo>
		Rxvalueslo(&Rx_data);
 80035e6:	487e      	ldr	r0, [pc, #504]	@ (80037e0 <main+0x36c>)
 80035e8:	f7fe fbaa 	bl	8001d40 <Rxvalueslo>
		dribble();
 80035ec:	f7ff fdd8 	bl	80031a0 <dribble>
		rotors(Rotors_flag);
 80035f0:	4b86      	ldr	r3, [pc, #536]	@ (800380c <main+0x398>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe f981 	bl	80018fc <rotors>

		rpm_cal();
 80035fa:	f7fe facf 	bl	8001b9c <rpm_cal>
		autolocomote();
 80035fe:	f7ff fd2f 	bl	8003060 <autolocomote>
		switch (loco) {
 8003602:	4b83      	ldr	r3, [pc, #524]	@ (8003810 <main+0x39c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	3b41      	subs	r3, #65	@ 0x41
 8003608:	2b2e      	cmp	r3, #46	@ 0x2e
 800360a:	f200 81ff 	bhi.w	8003a0c <main+0x598>
 800360e:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <main+0x1a0>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003825 	.word	0x08003825
 8003618:	08003921 	.word	0x08003921
 800361c:	08003a0d 	.word	0x08003a0d
 8003620:	08003a0d 	.word	0x08003a0d
 8003624:	08003a0d 	.word	0x08003a0d
 8003628:	08003a0d 	.word	0x08003a0d
 800362c:	08003a0d 	.word	0x08003a0d
 8003630:	08003a0d 	.word	0x08003a0d
 8003634:	08003a0d 	.word	0x08003a0d
 8003638:	080039b1 	.word	0x080039b1
 800363c:	080036fd 	.word	0x080036fd
 8003640:	0800399d 	.word	0x0800399d
 8003644:	08003a0d 	.word	0x08003a0d
 8003648:	08003a0d 	.word	0x08003a0d
 800364c:	08003755 	.word	0x08003755
 8003650:	08003a0d 	.word	0x08003a0d
 8003654:	08003a0d 	.word	0x08003a0d
 8003658:	080039a7 	.word	0x080039a7
 800365c:	0800393b 	.word	0x0800393b
 8003660:	08003a0d 	.word	0x08003a0d
 8003664:	08003a0d 	.word	0x08003a0d
 8003668:	08003a0d 	.word	0x08003a0d
 800366c:	08003a0d 	.word	0x08003a0d
 8003670:	08003933 	.word	0x08003933
 8003674:	08003781 	.word	0x08003781
 8003678:	08003a0d 	.word	0x08003a0d
 800367c:	08003a0d 	.word	0x08003a0d
 8003680:	08003a0d 	.word	0x08003a0d
 8003684:	08003a0d 	.word	0x08003a0d
 8003688:	08003a0d 	.word	0x08003a0d
 800368c:	08003a0d 	.word	0x08003a0d
 8003690:	08003a0d 	.word	0x08003a0d
 8003694:	08003a0d 	.word	0x08003a0d
 8003698:	08003a1d 	.word	0x08003a1d
 800369c:	08003a0d 	.word	0x08003a0d
 80036a0:	080038b7 	.word	0x080038b7
 80036a4:	080038ed 	.word	0x080038ed
 80036a8:	08003a1d 	.word	0x08003a1d
 80036ac:	08003951 	.word	0x08003951
 80036b0:	08003a0d 	.word	0x08003a0d
 80036b4:	08003a0d 	.word	0x08003a0d
 80036b8:	08003a0d 	.word	0x08003a0d
 80036bc:	080036d1 	.word	0x080036d1
 80036c0:	08003a0d 	.word	0x08003a0d
 80036c4:	08003a0d 	.word	0x08003a0d
 80036c8:	08003a0d 	.word	0x08003a0d
 80036cc:	08003729 	.word	0x08003729
		case 'k':
			if (!alignn) {
 80036d0:	4b50      	ldr	r3, [pc, #320]	@ (8003814 <main+0x3a0>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	f083 0301 	eor.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <main+0x270>
				alignn = true;
 80036de:	4b4d      	ldr	r3, [pc, #308]	@ (8003814 <main+0x3a0>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
			}
			if (autoloco) {
 80036e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003818 <main+0x3a4>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <main+0x27e>
				autoloco = false;
 80036ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003818 <main+0x3a4>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
			}
			locomotion();
 80036f2:	f7fe fe85 	bl	8002400 <locomotion>
			locomote();
 80036f6:	f7ff f85f 	bl	80027b8 <locomote>
			break;
 80036fa:	e196      	b.n	8003a2a <main+0x5b6>
			//		      analogWrite(pwm_motor[2], 40);
			// locomotion();
			// locomote();
			break;
		case 'K':
			if (!alignn) {
 80036fc:	4b45      	ldr	r3, [pc, #276]	@ (8003814 <main+0x3a0>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	f083 0301 	eor.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <main+0x29c>
				alignn = true;
 800370a:	4b42      	ldr	r3, [pc, #264]	@ (8003814 <main+0x3a0>)
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
			}
			if (autoloco) {
 8003710:	4b41      	ldr	r3, [pc, #260]	@ (8003818 <main+0x3a4>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <main+0x2aa>
				autoloco = false;
 8003718:	4b3f      	ldr	r3, [pc, #252]	@ (8003818 <main+0x3a4>)
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
			}
			locomotion();
 800371e:	f7fe fe6f 	bl	8002400 <locomotion>
			locomote();
 8003722:	f7ff f849 	bl	80027b8 <locomote>
			break;
 8003726:	e180      	b.n	8003a2a <main+0x5b6>
		case 'o':
			if (!alignn) {
 8003728:	4b3a      	ldr	r3, [pc, #232]	@ (8003814 <main+0x3a0>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	f083 0301 	eor.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <main+0x2c8>
				alignn = true;
 8003736:	4b37      	ldr	r3, [pc, #220]	@ (8003814 <main+0x3a0>)
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
			}
			if (autoloco) {
 800373c:	4b36      	ldr	r3, [pc, #216]	@ (8003818 <main+0x3a4>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <main+0x2d6>
				autoloco = false;
 8003744:	4b34      	ldr	r3, [pc, #208]	@ (8003818 <main+0x3a4>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
			}
			locomotion();
 800374a:	f7fe fe59 	bl	8002400 <locomotion>
			locomote();
 800374e:	f7ff f833 	bl	80027b8 <locomote>
			break;
 8003752:	e16a      	b.n	8003a2a <main+0x5b6>
		case 'O':
			if (!alignn) {
 8003754:	4b2f      	ldr	r3, [pc, #188]	@ (8003814 <main+0x3a0>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f083 0301 	eor.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <main+0x2f4>
				alignn = true;
 8003762:	4b2c      	ldr	r3, [pc, #176]	@ (8003814 <main+0x3a0>)
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
			}
			if (autoloco) {
 8003768:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <main+0x3a4>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <main+0x302>
				autoloco = false;
 8003770:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <main+0x3a4>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
			}
			locomotion();
 8003776:	f7fe fe43 	bl	8002400 <locomotion>
			locomote();
 800377a:	f7ff f81d 	bl	80027b8 <locomote>
			break;
 800377e:	e154      	b.n	8003a2a <main+0x5b6>
		case 'Y':
			if (!alignn) {
 8003780:	4b24      	ldr	r3, [pc, #144]	@ (8003814 <main+0x3a0>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	f083 0301 	eor.w	r3, r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <main+0x320>
				alignn = true;
 800378e:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <main+0x3a0>)
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
			}

			if (flag_amkette) {
 8003794:	4b21      	ldr	r3, [pc, #132]	@ (800381c <main+0x3a8>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8141 	beq.w	8003a20 <main+0x5ac>
				if (autoloco) {
 800379e:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <main+0x3a4>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <main+0x338>
					autoloco = false;
 80037a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <main+0x3a4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
				}
				feed();
 80037ac:	f7fe f9d0 	bl	8001b50 <feed>
				isthreepointer = 0;
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <main+0x3ac>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
				flag_amkette = false;
 80037b6:	4b19      	ldr	r3, [pc, #100]	@ (800381c <main+0x3a8>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
			}
			break;
 80037bc:	e130      	b.n	8003a20 <main+0x5ac>
 80037be:	bf00      	nop
 80037c0:	200003c0 	.word	0x200003c0
 80037c4:	20000408 	.word	0x20000408
 80037c8:	20000450 	.word	0x20000450
 80037cc:	20000498 	.word	0x20000498
 80037d0:	200004e0 	.word	0x200004e0
 80037d4:	20000600 	.word	0x20000600
 80037d8:	20000648 	.word	0x20000648
 80037dc:	20000690 	.word	0x20000690
 80037e0:	20000278 	.word	0x20000278
 80037e4:	20000720 	.word	0x20000720
 80037e8:	200002ac 	.word	0x200002ac
 80037ec:	200006d8 	.word	0x200006d8
 80037f0:	200005ac 	.word	0x200005ac
 80037f4:	40020800 	.word	0x40020800
 80037f8:	40020c00 	.word	0x40020c00
 80037fc:	40020400 	.word	0x40020400
 8003800:	2000028c 	.word	0x2000028c
 8003804:	200007b0 	.word	0x200007b0
 8003808:	200003a4 	.word	0x200003a4
 800380c:	20000390 	.word	0x20000390
 8003810:	20000048 	.word	0x20000048
 8003814:	20000024 	.word	0x20000024
 8003818:	200002af 	.word	0x200002af
 800381c:	20000054 	.word	0x20000054
 8003820:	2000005c 	.word	0x2000005c
		case 'A':
			if (!alignn) {
 8003824:	4b81      	ldr	r3, [pc, #516]	@ (8003a2c <main+0x5b8>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	f083 0301 	eor.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <main+0x3c4>
				alignn = true;
 8003832:	4b7e      	ldr	r3, [pc, #504]	@ (8003a2c <main+0x5b8>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
			}
			if (flag_amkette) {
 8003838:	4b7d      	ldr	r3, [pc, #500]	@ (8003a30 <main+0x5bc>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80f1 	beq.w	8003a24 <main+0x5b0>
				if (fOperation == 0) {
 8003842:	4b7c      	ldr	r3, [pc, #496]	@ (8003a34 <main+0x5c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d131      	bne.n	80038ae <main+0x43a>
					if (autoloco) {
 800384a:	4b7b      	ldr	r3, [pc, #492]	@ (8003a38 <main+0x5c4>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <main+0x3e4>
						autoloco = false;
 8003852:	4b79      	ldr	r3, [pc, #484]	@ (8003a38 <main+0x5c4>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
					}
					f_dribble = true;
 8003858:	4b78      	ldr	r3, [pc, #480]	@ (8003a3c <main+0x5c8>)
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
					fOperation = 1;
 800385e:	4b75      	ldr	r3, [pc, #468]	@ (8003a34 <main+0x5c0>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 1);
 8003864:	2201      	movs	r2, #1
 8003866:	2102      	movs	r1, #2
 8003868:	4875      	ldr	r0, [pc, #468]	@ (8003a40 <main+0x5cc>)
 800386a:	f003 fae7 	bl	8006e3c <HAL_GPIO_WritePin>
					dalay(600);
 800386e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003872:	f7ff fdbb 	bl	80033ec <dalay>
					HAL_GPIO_WritePin(extendLower_Port, extendLower_Pin, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2102      	movs	r1, #2
 800387a:	4871      	ldr	r0, [pc, #452]	@ (8003a40 <main+0x5cc>)
 800387c:	f003 fade 	bl	8006e3c <HAL_GPIO_WritePin>
					dalay(600);
 8003880:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003884:	f7ff fdb2 	bl	80033ec <dalay>
					HAL_GPIO_WritePin(extendUpper_Port, extendUpper_Pin, 1);
 8003888:	2201      	movs	r2, #1
 800388a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800388e:	486d      	ldr	r0, [pc, #436]	@ (8003a44 <main+0x5d0>)
 8003890:	f003 fad4 	bl	8006e3c <HAL_GPIO_WritePin>
					dalay(150);
 8003894:	2096      	movs	r0, #150	@ 0x96
 8003896:	f7ff fda9 	bl	80033ec <dalay>
					HAL_GPIO_WritePin(extendUpper_Port, extendUpper_Pin, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038a0:	4868      	ldr	r0, [pc, #416]	@ (8003a44 <main+0x5d0>)
 80038a2:	f003 facb 	bl	8006e3c <HAL_GPIO_WritePin>
					dalay(300);
 80038a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80038aa:	f7ff fd9f 	bl	80033ec <dalay>
				}
				flag_amkette = false;
 80038ae:	4b60      	ldr	r3, [pc, #384]	@ (8003a30 <main+0x5bc>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80038b4:	e0b6      	b.n	8003a24 <main+0x5b0>

		case 'd':
			if (autoloco) {
 80038b6:	4b60      	ldr	r3, [pc, #384]	@ (8003a38 <main+0x5c4>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <main+0x450>
				autoloco = false;
 80038be:	4b5e      	ldr	r3, [pc, #376]	@ (8003a38 <main+0x5c4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
			}
			isthreepointer = 1;
 80038c4:	4b60      	ldr	r3, [pc, #384]	@ (8003a48 <main+0x5d4>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
			Rotors_flag = 1;
 80038ca:	4b60      	ldr	r3, [pc, #384]	@ (8003a4c <main+0x5d8>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
			kdLower = 0.05;
 80038d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003a50 <main+0x5dc>)
 80038d2:	4a60      	ldr	r2, [pc, #384]	@ (8003a54 <main+0x5e0>)
 80038d4:	601a      	str	r2, [r3, #0]
			kdUpper = 0.033;
 80038d6:	4b60      	ldr	r3, [pc, #384]	@ (8003a58 <main+0x5e4>)
 80038d8:	4a60      	ldr	r2, [pc, #384]	@ (8003a5c <main+0x5e8>)
 80038da:	601a      	str	r2, [r3, #0]
			kpLower = 0.25;
 80038dc:	4b60      	ldr	r3, [pc, #384]	@ (8003a60 <main+0x5ec>)
 80038de:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80038e2:	601a      	str	r2, [r3, #0]
			kpUpper = 0.2;
 80038e4:	4b5f      	ldr	r3, [pc, #380]	@ (8003a64 <main+0x5f0>)
 80038e6:	4a60      	ldr	r2, [pc, #384]	@ (8003a68 <main+0x5f4>)
 80038e8:	601a      	str	r2, [r3, #0]
			break;
 80038ea:	e09e      	b.n	8003a2a <main+0x5b6>
		case 'e':
			if (autoloco) {
 80038ec:	4b52      	ldr	r3, [pc, #328]	@ (8003a38 <main+0x5c4>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <main+0x486>
				autoloco = false;
 80038f4:	4b50      	ldr	r3, [pc, #320]	@ (8003a38 <main+0x5c4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
			}
			isthreepointer = 0;
 80038fa:	4b53      	ldr	r3, [pc, #332]	@ (8003a48 <main+0x5d4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
			Rotors_flag = 1;
 8003900:	4b52      	ldr	r3, [pc, #328]	@ (8003a4c <main+0x5d8>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
			kdLower = 0.05;
 8003906:	4b52      	ldr	r3, [pc, #328]	@ (8003a50 <main+0x5dc>)
 8003908:	4a52      	ldr	r2, [pc, #328]	@ (8003a54 <main+0x5e0>)
 800390a:	601a      	str	r2, [r3, #0]
			kdUpper = 0.033;
 800390c:	4b52      	ldr	r3, [pc, #328]	@ (8003a58 <main+0x5e4>)
 800390e:	4a53      	ldr	r2, [pc, #332]	@ (8003a5c <main+0x5e8>)
 8003910:	601a      	str	r2, [r3, #0]
			kpLower = 0.55;
 8003912:	4b53      	ldr	r3, [pc, #332]	@ (8003a60 <main+0x5ec>)
 8003914:	4a55      	ldr	r2, [pc, #340]	@ (8003a6c <main+0x5f8>)
 8003916:	601a      	str	r2, [r3, #0]
			kpUpper = 0.6;
 8003918:	4b52      	ldr	r3, [pc, #328]	@ (8003a64 <main+0x5f0>)
 800391a:	4a55      	ldr	r2, [pc, #340]	@ (8003a70 <main+0x5fc>)
 800391c:	601a      	str	r2, [r3, #0]
			break;
 800391e:	e084      	b.n	8003a2a <main+0x5b6>
//  		      kpUpper = 0.0;
//  		      baseLower = 0;
//  		      baseUpper = 0;
//  		      break;
		case 'B':
			if (autoloco) {
 8003920:	4b45      	ldr	r3, [pc, #276]	@ (8003a38 <main+0x5c4>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <main+0x4ba>
				autoloco = false;
 8003928:	4b43      	ldr	r3, [pc, #268]	@ (8003a38 <main+0x5c4>)
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
			}
			NVIC_SystemReset();
 800392e:	f7fd fbdf 	bl	80010f0 <__NVIC_SystemReset>
			break;
		case 'X':
			autoloco = true;
 8003932:	4b41      	ldr	r3, [pc, #260]	@ (8003a38 <main+0x5c4>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
			break;
 8003938:	e077      	b.n	8003a2a <main+0x5b6>
		case 'S':
			nexts = true;
 800393a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a74 <main+0x600>)
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
			flag_amkette = true;
 8003940:	4b3b      	ldr	r3, [pc, #236]	@ (8003a30 <main+0x5bc>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
			locomotion();
 8003946:	f7fe fd5b 	bl	8002400 <locomotion>
			locomote();
 800394a:	f7fe ff35 	bl	80027b8 <locomote>

			break;
 800394e:	e06c      	b.n	8003a2a <main+0x5b6>
		case 'g':
			if (nexts) {
 8003950:	4b48      	ldr	r3, [pc, #288]	@ (8003a74 <main+0x600>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d067      	beq.n	8003a28 <main+0x5b4>
				if (alpha == 0) {
 8003958:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <main+0x604>)
 800395a:	edd3 7a00 	vldr	s15, [r3]
 800395e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003966:	d103      	bne.n	8003970 <main+0x4fc>
					alignvalue = 180;
 8003968:	4b44      	ldr	r3, [pc, #272]	@ (8003a7c <main+0x608>)
 800396a:	4a45      	ldr	r2, [pc, #276]	@ (8003a80 <main+0x60c>)
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e00e      	b.n	800398e <main+0x51a>
				} else {
					alignvalue = Z_Val + alpha + 6;
 8003970:	4b44      	ldr	r3, [pc, #272]	@ (8003a84 <main+0x610>)
 8003972:	ed93 7a00 	vldr	s14, [r3]
 8003976:	4b40      	ldr	r3, [pc, #256]	@ (8003a78 <main+0x604>)
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003980:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003984:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003988:	4b3c      	ldr	r3, [pc, #240]	@ (8003a7c <main+0x608>)
 800398a:	edc3 7a00 	vstr	s15, [r3]
				}
				alignn = false;
 800398e:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <main+0x5b8>)
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
				nexts = false;
 8003994:	4b37      	ldr	r3, [pc, #220]	@ (8003a74 <main+0x600>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
			}

			break;
 800399a:	e045      	b.n	8003a28 <main+0x5b4>

		case 'L':
			locomotion();
 800399c:	f7fe fd30 	bl	8002400 <locomotion>
			locomote();
 80039a0:	f7fe ff0a 	bl	80027b8 <locomote>
			break;
 80039a4:	e041      	b.n	8003a2a <main+0x5b6>
		case 'R':
			locomotion();
 80039a6:	f7fe fd2b 	bl	8002400 <locomotion>
			locomote();
 80039aa:	f7fe ff05 	bl	80027b8 <locomote>
			break;
 80039ae:	e03c      	b.n	8003a2a <main+0x5b6>
		case 'J':
			if (autoloco) {
 80039b0:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <main+0x5c4>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <main+0x54a>
				autoloco = false;
 80039b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a38 <main+0x5c4>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
			}
			Rotors_flag = 0;
 80039be:	4b23      	ldr	r3, [pc, #140]	@ (8003a4c <main+0x5d8>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 1);
 80039c4:	2201      	movs	r2, #1
 80039c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039ca:	482f      	ldr	r0, [pc, #188]	@ (8003a88 <main+0x614>)
 80039cc:	f003 fa36 	bl	8006e3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 1);
 80039d0:	2201      	movs	r2, #1
 80039d2:	2108      	movs	r1, #8
 80039d4:	481a      	ldr	r0, [pc, #104]	@ (8003a40 <main+0x5cc>)
 80039d6:	f003 fa31 	bl	8006e3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 1);
 80039da:	2201      	movs	r2, #1
 80039dc:	2110      	movs	r1, #16
 80039de:	482b      	ldr	r0, [pc, #172]	@ (8003a8c <main+0x618>)
 80039e0:	f003 fa2c 	bl	8006e3c <HAL_GPIO_WritePin>
			dalay(200);
 80039e4:	20c8      	movs	r0, #200	@ 0xc8
 80039e6:	f7ff fd01 	bl	80033ec <dalay>
			HAL_GPIO_WritePin(retractLower_Port, retractLower_Pin, 0);
 80039ea:	2200      	movs	r2, #0
 80039ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039f0:	4825      	ldr	r0, [pc, #148]	@ (8003a88 <main+0x614>)
 80039f2:	f003 fa23 	bl	8006e3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(retractUpper_Port, retractUpper_Pin, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2108      	movs	r1, #8
 80039fa:	4811      	ldr	r0, [pc, #68]	@ (8003a40 <main+0x5cc>)
 80039fc:	f003 fa1e 	bl	8006e3c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(pistonDown_Port, pistonDown_Pin, 0);
 8003a00:	2200      	movs	r2, #0
 8003a02:	2110      	movs	r1, #16
 8003a04:	4821      	ldr	r0, [pc, #132]	@ (8003a8c <main+0x618>)
 8003a06:	f003 fa19 	bl	8006e3c <HAL_GPIO_WritePin>
			break;
 8003a0a:	e00e      	b.n	8003a2a <main+0x5b6>

		default:
			flag_amkette = true;
 8003a0c:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <main+0x5bc>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
			locomotion();
 8003a12:	f7fe fcf5 	bl	8002400 <locomotion>
			locomote();
 8003a16:	f7fe fecf 	bl	80027b8 <locomote>

			break;
 8003a1a:	e006      	b.n	8003a2a <main+0x5b6>
			break;
 8003a1c:	bf00      	nop
 8003a1e:	e5ca      	b.n	80035b6 <main+0x142>
			break;
 8003a20:	bf00      	nop
 8003a22:	e5c8      	b.n	80035b6 <main+0x142>
			break;
 8003a24:	bf00      	nop
 8003a26:	e5c6      	b.n	80035b6 <main+0x142>
			break;
 8003a28:	bf00      	nop
		if (HAL_UART_Receive(&huart2, Ar_data, 29, 10) == HAL_OK) {
 8003a2a:	e5c4      	b.n	80035b6 <main+0x142>
 8003a2c:	20000024 	.word	0x20000024
 8003a30:	20000054 	.word	0x20000054
 8003a34:	2000039c 	.word	0x2000039c
 8003a38:	200002af 	.word	0x200002af
 8003a3c:	200003a0 	.word	0x200003a0
 8003a40:	40020c00 	.word	0x40020c00
 8003a44:	40020000 	.word	0x40020000
 8003a48:	2000005c 	.word	0x2000005c
 8003a4c:	20000390 	.word	0x20000390
 8003a50:	20000388 	.word	0x20000388
 8003a54:	3d4ccccd 	.word	0x3d4ccccd
 8003a58:	2000038c 	.word	0x2000038c
 8003a5c:	3d072b02 	.word	0x3d072b02
 8003a60:	2000004c 	.word	0x2000004c
 8003a64:	20000050 	.word	0x20000050
 8003a68:	3e4ccccd 	.word	0x3e4ccccd
 8003a6c:	3f0ccccd 	.word	0x3f0ccccd
 8003a70:	3f19999a 	.word	0x3f19999a
 8003a74:	200002fc 	.word	0x200002fc
 8003a78:	200002b8 	.word	0x200002b8
 8003a7c:	200002f8 	.word	0x200002f8
 8003a80:	43340000 	.word	0x43340000
 8003a84:	20000328 	.word	0x20000328
 8003a88:	40020800 	.word	0x40020800
 8003a8c:	40020400 	.word	0x40020400

08003a90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b094      	sub	sp, #80	@ 0x50
 8003a94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003a96:	f107 0320 	add.w	r3, r7, #32
 8003a9a:	2230      	movs	r2, #48	@ 0x30
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f008 fbf2 	bl	800c288 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	4b28      	ldr	r3, [pc, #160]	@ (8003b5c <SystemClock_Config+0xcc>)
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	4a27      	ldr	r2, [pc, #156]	@ (8003b5c <SystemClock_Config+0xcc>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ac4:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <SystemClock_Config+0xcc>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <SystemClock_Config+0xd0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a21      	ldr	r2, [pc, #132]	@ (8003b60 <SystemClock_Config+0xd0>)
 8003ada:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b60 <SystemClock_Config+0xd0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003aec:	2302      	movs	r3, #2
 8003aee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003af0:	2301      	movs	r3, #1
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003af4:	2310      	movs	r3, #16
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003af8:	2302      	movs	r3, #2
 8003afa:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003afc:	2300      	movs	r3, #0
 8003afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003b00:	2308      	movs	r3, #8
 8003b02:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003b04:	23a8      	movs	r3, #168	@ 0xa8
 8003b06:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b0c:	2307      	movs	r3, #7
 8003b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003b10:	f107 0320 	add.w	r3, r7, #32
 8003b14:	4618      	mov	r0, r3
 8003b16:	f004 f9ef 	bl	8007ef8 <HAL_RCC_OscConfig>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <SystemClock_Config+0x94>
		Error_Handler();
 8003b20:	f000 fd92 	bl	8004648 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003b24:	230f      	movs	r3, #15
 8003b26:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b30:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b34:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b3a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003b3c:	f107 030c 	add.w	r3, r7, #12
 8003b40:	2105      	movs	r1, #5
 8003b42:	4618      	mov	r0, r3
 8003b44:	f004 fc50 	bl	80083e8 <HAL_RCC_ClockConfig>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <SystemClock_Config+0xc2>
		Error_Handler();
 8003b4e:	f000 fd7b 	bl	8004648 <Error_Handler>
	}
}
 8003b52:	bf00      	nop
 8003b54:	3750      	adds	r7, #80	@ 0x50
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40007000 	.word	0x40007000

08003b64 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8003b76:	4b54      	ldr	r3, [pc, #336]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003b78:	4a54      	ldr	r2, [pc, #336]	@ (8003ccc <MX_ADC1_Init+0x168>)
 8003b7a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b7c:	4b52      	ldr	r3, [pc, #328]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003b7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b82:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b84:	4b50      	ldr	r3, [pc, #320]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8003b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003b90:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003b96:	4b4c      	ldr	r3, [pc, #304]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.NbrOfDiscConversion = 1;
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ba4:	4b48      	ldr	r3, [pc, #288]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003baa:	4b47      	ldr	r3, [pc, #284]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003bac:	4a48      	ldr	r2, [pc, #288]	@ (8003cd0 <MX_ADC1_Init+0x16c>)
 8003bae:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bb0:	4b45      	ldr	r3, [pc, #276]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 8;
 8003bb6:	4b44      	ldr	r3, [pc, #272]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003bb8:	2208      	movs	r2, #8
 8003bba:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8003bbc:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bc4:	4b40      	ldr	r3, [pc, #256]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003bca:	483f      	ldr	r0, [pc, #252]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003bcc:	f001 fd8a 	bl	80056e4 <HAL_ADC_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_ADC1_Init+0x76>
		Error_Handler();
 8003bd6:	f000 fd37 	bl	8004648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8003bda:	2304      	movs	r3, #4
 8003bdc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8003bde:	2301      	movs	r3, #1
 8003be0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8003be2:	2304      	movs	r3, #4
 8003be4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003be6:	463b      	mov	r3, r7
 8003be8:	4619      	mov	r1, r3
 8003bea:	4837      	ldr	r0, [pc, #220]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003bec:	f001 ff5c 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_ADC1_Init+0x96>
		Error_Handler();
 8003bf6:	f000 fd27 	bl	8004648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8003bfa:	2305      	movs	r3, #5
 8003bfc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c02:	463b      	mov	r3, r7
 8003c04:	4619      	mov	r1, r3
 8003c06:	4830      	ldr	r0, [pc, #192]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003c08:	f001 ff4e 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_ADC1_Init+0xb2>
		Error_Handler();
 8003c12:	f000 fd19 	bl	8004648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8003c16:	230a      	movs	r3, #10
 8003c18:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c1e:	463b      	mov	r3, r7
 8003c20:	4619      	mov	r1, r3
 8003c22:	4829      	ldr	r0, [pc, #164]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003c24:	f001 ff40 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_ADC1_Init+0xce>
		Error_Handler();
 8003c2e:	f000 fd0b 	bl	8004648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 8003c32:	230b      	movs	r3, #11
 8003c34:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8003c36:	2304      	movs	r3, #4
 8003c38:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4822      	ldr	r0, [pc, #136]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003c40:	f001 ff32 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_ADC1_Init+0xea>
		Error_Handler();
 8003c4a:	f000 fcfd 	bl	8004648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8003c4e:	230c      	movs	r3, #12
 8003c50:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8003c52:	2305      	movs	r3, #5
 8003c54:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c56:	463b      	mov	r3, r7
 8003c58:	4619      	mov	r1, r3
 8003c5a:	481b      	ldr	r0, [pc, #108]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003c5c:	f001 ff24 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <MX_ADC1_Init+0x106>
		Error_Handler();
 8003c66:	f000 fcef 	bl	8004648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8003c6a:	230d      	movs	r3, #13
 8003c6c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 6;
 8003c6e:	2306      	movs	r3, #6
 8003c70:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c72:	463b      	mov	r3, r7
 8003c74:	4619      	mov	r1, r3
 8003c76:	4814      	ldr	r0, [pc, #80]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003c78:	f001 ff16 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <MX_ADC1_Init+0x122>
		Error_Handler();
 8003c82:	f000 fce1 	bl	8004648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8003c86:	230e      	movs	r3, #14
 8003c88:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 7;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c8e:	463b      	mov	r3, r7
 8003c90:	4619      	mov	r1, r3
 8003c92:	480d      	ldr	r0, [pc, #52]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003c94:	f001 ff08 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_ADC1_Init+0x13e>
		Error_Handler();
 8003c9e:	f000 fcd3 	bl	8004648 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 8003ca2:	230f      	movs	r3, #15
 8003ca4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 8;
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003caa:	463b      	mov	r3, r7
 8003cac:	4619      	mov	r1, r3
 8003cae:	4806      	ldr	r0, [pc, #24]	@ (8003cc8 <MX_ADC1_Init+0x164>)
 8003cb0:	f001 fefa 	bl	8005aa8 <HAL_ADC_ConfigChannel>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_ADC1_Init+0x15a>
		Error_Handler();
 8003cba:	f000 fcc5 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000564 	.word	0x20000564
 8003ccc:	40012000 	.word	0x40012000
 8003cd0:	0f000001 	.word	0x0f000001

08003cd4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003cd8:	4b12      	ldr	r3, [pc, #72]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003cda:	4a13      	ldr	r2, [pc, #76]	@ (8003d28 <MX_I2C1_Init+0x54>)
 8003cdc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003cde:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003ce0:	4a12      	ldr	r2, [pc, #72]	@ (8003d2c <MX_I2C1_Init+0x58>)
 8003ce2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003cea:	4b0e      	ldr	r3, [pc, #56]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003cf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cf6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003cfe:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d04:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003d10:	4804      	ldr	r0, [pc, #16]	@ (8003d24 <MX_I2C1_Init+0x50>)
 8003d12:	f003 f8ad 	bl	8006e70 <HAL_I2C_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8003d1c:	f000 fc94 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200005ac 	.word	0x200005ac
 8003d28:	40005400 	.word	0x40005400
 8003d2c:	000186a0 	.word	0x000186a0

08003d30 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	@ 0x30
 8003d34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d36:	f107 030c 	add.w	r3, r7, #12
 8003d3a:	2224      	movs	r2, #36	@ 0x24
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f008 faa2 	bl	800c288 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003d4c:	4b22      	ldr	r3, [pc, #136]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003d4e:	4a23      	ldr	r2, [pc, #140]	@ (8003ddc <MX_TIM1_Init+0xac>)
 8003d50:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003d52:	4b21      	ldr	r3, [pc, #132]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d58:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003d60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d64:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d66:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d72:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d80:	2301      	movs	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8003d88:	230a      	movs	r3, #10
 8003d8a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d90:	2301      	movs	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8003d98:	230a      	movs	r3, #10
 8003d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8003d9c:	f107 030c 	add.w	r3, r7, #12
 8003da0:	4619      	mov	r1, r3
 8003da2:	480d      	ldr	r0, [pc, #52]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003da4:	f004 fe58 	bl	8008a58 <HAL_TIM_Encoder_Init>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM1_Init+0x82>
		Error_Handler();
 8003dae:	f000 fc4b 	bl	8004648 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db2:	2300      	movs	r3, #0
 8003db4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4806      	ldr	r0, [pc, #24]	@ (8003dd8 <MX_TIM1_Init+0xa8>)
 8003dc0:	f005 fbfa 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8003dca:	f000 fc3d 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003dce:	bf00      	nop
 8003dd0:	3730      	adds	r7, #48	@ 0x30
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200003c0 	.word	0x200003c0
 8003ddc:	40010000 	.word	0x40010000

08003de0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	@ 0x28
 8003de4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003de6:	f107 0320 	add.w	r3, r7, #32
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	609a      	str	r2, [r3, #8]
 8003dfa:	60da      	str	r2, [r3, #12]
 8003dfc:	611a      	str	r2, [r3, #16]
 8003dfe:	615a      	str	r2, [r3, #20]
 8003e00:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003e02:	4b33      	ldr	r3, [pc, #204]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e08:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003e0a:	4b31      	ldr	r3, [pc, #196]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e10:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8003e16:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e1c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e24:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8003e2a:	4829      	ldr	r0, [pc, #164]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e2c:	f004 fcfc 	bl	8008828 <HAL_TIM_PWM_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <MX_TIM2_Init+0x5a>
		Error_Handler();
 8003e36:	f000 fc07 	bl	8004648 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003e42:	f107 0320 	add.w	r3, r7, #32
 8003e46:	4619      	mov	r1, r3
 8003e48:	4821      	ldr	r0, [pc, #132]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e4a:	f005 fbb5 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8003e54:	f000 fbf8 	bl	8004648 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e58:	2360      	movs	r3, #96	@ 0x60
 8003e5a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003e64:	2304      	movs	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4818      	ldr	r0, [pc, #96]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e70:	f005 f836 	bl	8008ee0 <HAL_TIM_PWM_ConfigChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8003e7a:	f000 fbe5 	bl	8004648 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8003e7e:	1d3b      	adds	r3, r7, #4
 8003e80:	2204      	movs	r2, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4812      	ldr	r0, [pc, #72]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e86:	f005 f82b 	bl	8008ee0 <HAL_TIM_PWM_ConfigChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8003e90:	f000 fbda 	bl	8004648 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	2208      	movs	r2, #8
 8003e98:	4619      	mov	r1, r3
 8003e9a:	480d      	ldr	r0, [pc, #52]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003e9c:	f005 f820 	bl	8008ee0 <HAL_TIM_PWM_ConfigChannel>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_TIM2_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8003ea6:	f000 fbcf 	bl	8004648 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	220c      	movs	r2, #12
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4807      	ldr	r0, [pc, #28]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003eb2:	f005 f815 	bl	8008ee0 <HAL_TIM_PWM_ConfigChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM2_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8003ebc:	f000 fbc4 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8003ec0:	4803      	ldr	r0, [pc, #12]	@ (8003ed0 <MX_TIM2_Init+0xf0>)
 8003ec2:	f000 fe8b 	bl	8004bdc <HAL_TIM_MspPostInit>

}
 8003ec6:	bf00      	nop
 8003ec8:	3728      	adds	r7, #40	@ 0x28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000600 	.word	0x20000600

08003ed4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	@ 0x30
 8003ed8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003eda:	f107 030c 	add.w	r3, r7, #12
 8003ede:	2224      	movs	r2, #36	@ 0x24
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f008 f9d0 	bl	800c288 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003ef0:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <MX_TIM3_Init+0xa0>)
 8003ef2:	4a21      	ldr	r2, [pc, #132]	@ (8003f78 <MX_TIM3_Init+0xa4>)
 8003ef4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f74 <MX_TIM3_Init+0xa0>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <MX_TIM3_Init+0xa0>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	@ (8003f74 <MX_TIM3_Init+0xa0>)
 8003f04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f08:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <MX_TIM3_Init+0xa0>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f10:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <MX_TIM3_Init+0xa0>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f16:	2303      	movs	r3, #3
 8003f18:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8003f26:	230a      	movs	r3, #10
 8003f28:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f32:	2300      	movs	r3, #0
 8003f34:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8003f36:	230a      	movs	r3, #10
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8003f3a:	f107 030c 	add.w	r3, r7, #12
 8003f3e:	4619      	mov	r1, r3
 8003f40:	480c      	ldr	r0, [pc, #48]	@ (8003f74 <MX_TIM3_Init+0xa0>)
 8003f42:	f004 fd89 	bl	8008a58 <HAL_TIM_Encoder_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8003f4c:	f000 fb7c 	bl	8004648 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4805      	ldr	r0, [pc, #20]	@ (8003f74 <MX_TIM3_Init+0xa0>)
 8003f5e:	f005 fb2b 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8003f68:	f000 fb6e 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003f6c:	bf00      	nop
 8003f6e:	3730      	adds	r7, #48	@ 0x30
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000408 	.word	0x20000408
 8003f78:	40000400 	.word	0x40000400

08003f7c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08c      	sub	sp, #48	@ 0x30
 8003f80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003f82:	f107 030c 	add.w	r3, r7, #12
 8003f86:	2224      	movs	r2, #36	@ 0x24
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f008 f97c 	bl	800c288 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003f98:	4b20      	ldr	r3, [pc, #128]	@ (800401c <MX_TIM4_Init+0xa0>)
 8003f9a:	4a21      	ldr	r2, [pc, #132]	@ (8004020 <MX_TIM4_Init+0xa4>)
 8003f9c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800401c <MX_TIM4_Init+0xa0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <MX_TIM4_Init+0xa0>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003faa:	4b1c      	ldr	r3, [pc, #112]	@ (800401c <MX_TIM4_Init+0xa0>)
 8003fac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fb0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800401c <MX_TIM4_Init+0xa0>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb8:	4b18      	ldr	r3, [pc, #96]	@ (800401c <MX_TIM4_Init+0xa0>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8003fce:	230a      	movs	r3, #10
 8003fd0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8003fde:	230a      	movs	r3, #10
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003fe2:	f107 030c 	add.w	r3, r7, #12
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	480c      	ldr	r0, [pc, #48]	@ (800401c <MX_TIM4_Init+0xa0>)
 8003fea:	f004 fd35 	bl	8008a58 <HAL_TIM_Encoder_Init>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8003ff4:	f000 fb28 	bl	8004648 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	4619      	mov	r1, r3
 8004004:	4805      	ldr	r0, [pc, #20]	@ (800401c <MX_TIM4_Init+0xa0>)
 8004006:	f005 fad7 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8004010:	f000 fb1a 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8004014:	bf00      	nop
 8004016:	3730      	adds	r7, #48	@ 0x30
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000450 	.word	0x20000450
 8004020:	40000800 	.word	0x40000800

08004024 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	@ 0x30
 8004028:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800402a:	f107 030c 	add.w	r3, r7, #12
 800402e:	2224      	movs	r2, #36	@ 0x24
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f008 f928 	bl	800c288 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8004040:	4b20      	ldr	r3, [pc, #128]	@ (80040c4 <MX_TIM5_Init+0xa0>)
 8004042:	4a21      	ldr	r2, [pc, #132]	@ (80040c8 <MX_TIM5_Init+0xa4>)
 8004044:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8004046:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <MX_TIM5_Init+0xa0>)
 8004048:	2200      	movs	r2, #0
 800404a:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404c:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <MX_TIM5_Init+0xa0>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8004052:	4b1c      	ldr	r3, [pc, #112]	@ (80040c4 <MX_TIM5_Init+0xa0>)
 8004054:	f04f 32ff 	mov.w	r2, #4294967295
 8004058:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800405a:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <MX_TIM5_Init+0xa0>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004060:	4b18      	ldr	r3, [pc, #96]	@ (80040c4 <MX_TIM5_Init+0xa0>)
 8004062:	2200      	movs	r2, #0
 8004064:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004066:	2303      	movs	r3, #3
 8004068:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800406a:	2302      	movs	r3, #2
 800406c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800406e:	2301      	movs	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8004076:	230a      	movs	r3, #10
 8004078:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800407a:	2302      	movs	r3, #2
 800407c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800407e:	2301      	movs	r3, #1
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004082:	2300      	movs	r3, #0
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8004086:	230a      	movs	r3, #10
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 800408a:	f107 030c 	add.w	r3, r7, #12
 800408e:	4619      	mov	r1, r3
 8004090:	480c      	ldr	r0, [pc, #48]	@ (80040c4 <MX_TIM5_Init+0xa0>)
 8004092:	f004 fce1 	bl	8008a58 <HAL_TIM_Encoder_Init>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_TIM5_Init+0x7c>
		Error_Handler();
 800409c:	f000 fad4 	bl	8004648 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4805      	ldr	r0, [pc, #20]	@ (80040c4 <MX_TIM5_Init+0xa0>)
 80040ae:	f005 fa83 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80040b8:	f000 fac6 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80040bc:	bf00      	nop
 80040be:	3730      	adds	r7, #48	@ 0x30
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000498 	.word	0x20000498
 80040c8:	40000c00 	.word	0x40000c00

080040cc <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08c      	sub	sp, #48	@ 0x30
 80040d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80040d2:	f107 030c 	add.w	r3, r7, #12
 80040d6:	2224      	movs	r2, #36	@ 0x24
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f008 f8d4 	bl	800c288 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80040e8:	4b22      	ldr	r3, [pc, #136]	@ (8004174 <MX_TIM8_Init+0xa8>)
 80040ea:	4a23      	ldr	r2, [pc, #140]	@ (8004178 <MX_TIM8_Init+0xac>)
 80040ec:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80040ee:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <MX_TIM8_Init+0xa8>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004174 <MX_TIM8_Init+0xa8>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80040fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004174 <MX_TIM8_Init+0xa8>)
 80040fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004100:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004102:	4b1c      	ldr	r3, [pc, #112]	@ (8004174 <MX_TIM8_Init+0xa8>)
 8004104:	2200      	movs	r2, #0
 8004106:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004108:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <MX_TIM8_Init+0xa8>)
 800410a:	2200      	movs	r2, #0
 800410c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800410e:	4b19      	ldr	r3, [pc, #100]	@ (8004174 <MX_TIM8_Init+0xa8>)
 8004110:	2200      	movs	r2, #0
 8004112:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004114:	2303      	movs	r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004118:	2302      	movs	r3, #2
 800411a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8004124:	230a      	movs	r3, #10
 8004126:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004128:	2302      	movs	r3, #2
 800412a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800412c:	2301      	movs	r3, #1
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004130:	2300      	movs	r3, #0
 8004132:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8004134:	230a      	movs	r3, #10
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 8004138:	f107 030c 	add.w	r3, r7, #12
 800413c:	4619      	mov	r1, r3
 800413e:	480d      	ldr	r0, [pc, #52]	@ (8004174 <MX_TIM8_Init+0xa8>)
 8004140:	f004 fc8a 	bl	8008a58 <HAL_TIM_Encoder_Init>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <MX_TIM8_Init+0x82>
		Error_Handler();
 800414a:	f000 fa7d 	bl	8004648 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4806      	ldr	r0, [pc, #24]	@ (8004174 <MX_TIM8_Init+0xa8>)
 800415c:	f005 fa2c 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <MX_TIM8_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8004166:	f000 fa6f 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800416a:	bf00      	nop
 800416c:	3730      	adds	r7, #48	@ 0x30
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	200004e0 	.word	0x200004e0
 8004178:	40010400 	.word	0x40010400

0800417c <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	611a      	str	r2, [r3, #16]
 8004190:	615a      	str	r2, [r3, #20]
 8004192:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8004194:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <MX_TIM9_Init+0x98>)
 8004196:	4a20      	ldr	r2, [pc, #128]	@ (8004218 <MX_TIM9_Init+0x9c>)
 8004198:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 800419a:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <MX_TIM9_Init+0x98>)
 800419c:	2200      	movs	r2, #0
 800419e:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004214 <MX_TIM9_Init+0x98>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 80041a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004214 <MX_TIM9_Init+0x98>)
 80041a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041ac:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ae:	4b19      	ldr	r3, [pc, #100]	@ (8004214 <MX_TIM9_Init+0x98>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041b4:	4b17      	ldr	r3, [pc, #92]	@ (8004214 <MX_TIM9_Init+0x98>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK) {
 80041ba:	4816      	ldr	r0, [pc, #88]	@ (8004214 <MX_TIM9_Init+0x98>)
 80041bc:	f004 fb34 	bl	8008828 <HAL_TIM_PWM_Init>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM9_Init+0x4e>
		Error_Handler();
 80041c6:	f000 fa3f 	bl	8004648 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041ca:	2360      	movs	r3, #96	@ 0x60
 80041cc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80041d6:	2304      	movs	r3, #4
 80041d8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1)
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	2200      	movs	r2, #0
 80041de:	4619      	mov	r1, r3
 80041e0:	480c      	ldr	r0, [pc, #48]	@ (8004214 <MX_TIM9_Init+0x98>)
 80041e2:	f004 fe7d 	bl	8008ee0 <HAL_TIM_PWM_ConfigChannel>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM9_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 80041ec:	f000 fa2c 	bl	8004648 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2)
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	2204      	movs	r2, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4807      	ldr	r0, [pc, #28]	@ (8004214 <MX_TIM9_Init+0x98>)
 80041f8:	f004 fe72 	bl	8008ee0 <HAL_TIM_PWM_ConfigChannel>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM9_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8004202:	f000 fa21 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 8004206:	4803      	ldr	r0, [pc, #12]	@ (8004214 <MX_TIM9_Init+0x98>)
 8004208:	f000 fce8 	bl	8004bdc <HAL_TIM_MspPostInit>

}
 800420c:	bf00      	nop
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000648 	.word	0x20000648
 8004218:	40014000 	.word	0x40014000

0800421c <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
 8004230:	615a      	str	r2, [r3, #20]
 8004232:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8004234:	4b1f      	ldr	r3, [pc, #124]	@ (80042b4 <MX_TIM12_Init+0x98>)
 8004236:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <MX_TIM12_Init+0x9c>)
 8004238:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 800423a:	4b1e      	ldr	r3, [pc, #120]	@ (80042b4 <MX_TIM12_Init+0x98>)
 800423c:	2200      	movs	r2, #0
 800423e:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004240:	4b1c      	ldr	r3, [pc, #112]	@ (80042b4 <MX_TIM12_Init+0x98>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 65535;
 8004246:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <MX_TIM12_Init+0x98>)
 8004248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800424c:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800424e:	4b19      	ldr	r3, [pc, #100]	@ (80042b4 <MX_TIM12_Init+0x98>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004254:	4b17      	ldr	r3, [pc, #92]	@ (80042b4 <MX_TIM12_Init+0x98>)
 8004256:	2200      	movs	r2, #0
 8004258:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 800425a:	4816      	ldr	r0, [pc, #88]	@ (80042b4 <MX_TIM12_Init+0x98>)
 800425c:	f004 fae4 	bl	8008828 <HAL_TIM_PWM_Init>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_TIM12_Init+0x4e>
		Error_Handler();
 8004266:	f000 f9ef 	bl	8004648 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800426a:	2360      	movs	r3, #96	@ 0x60
 800426c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004276:	2304      	movs	r3, #4
 8004278:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	2200      	movs	r2, #0
 800427e:	4619      	mov	r1, r3
 8004280:	480c      	ldr	r0, [pc, #48]	@ (80042b4 <MX_TIM12_Init+0x98>)
 8004282:	f004 fe2d 	bl	8008ee0 <HAL_TIM_PWM_ConfigChannel>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_TIM12_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 800428c:	f000 f9dc 	bl	8004648 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2)
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	2204      	movs	r2, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4807      	ldr	r0, [pc, #28]	@ (80042b4 <MX_TIM12_Init+0x98>)
 8004298:	f004 fe22 	bl	8008ee0 <HAL_TIM_PWM_ConfigChannel>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_TIM12_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80042a2:	f000 f9d1 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 80042a6:	4803      	ldr	r0, [pc, #12]	@ (80042b4 <MX_TIM12_Init+0x98>)
 80042a8:	f000 fc98 	bl	8004bdc <HAL_TIM_MspPostInit>

}
 80042ac:	bf00      	nop
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000690 	.word	0x20000690
 80042b8:	40001800 	.word	0x40001800

080042bc <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <MX_UART4_Init+0x50>)
 80042c4:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 38400;
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042c8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80042cc:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80042ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80042da:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042e2:	220c      	movs	r2, #12
 80042e4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042e6:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80042f2:	4805      	ldr	r0, [pc, #20]	@ (8004308 <MX_UART4_Init+0x4c>)
 80042f4:	f005 f9f0 	bl	80096d8 <HAL_UART_Init>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_UART4_Init+0x46>
		Error_Handler();
 80042fe:	f000 f9a3 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200006d8 	.word	0x200006d8
 800430c:	40004c00 	.word	0x40004c00

08004310 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8004314:	4b11      	ldr	r3, [pc, #68]	@ (800435c <MX_UART5_Init+0x4c>)
 8004316:	4a12      	ldr	r2, [pc, #72]	@ (8004360 <MX_UART5_Init+0x50>)
 8004318:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 38400;
 800431a:	4b10      	ldr	r3, [pc, #64]	@ (800435c <MX_UART5_Init+0x4c>)
 800431c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8004320:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004322:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <MX_UART5_Init+0x4c>)
 8004324:	2200      	movs	r2, #0
 8004326:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <MX_UART5_Init+0x4c>)
 800432a:	2200      	movs	r2, #0
 800432c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800432e:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <MX_UART5_Init+0x4c>)
 8004330:	2200      	movs	r2, #0
 8004332:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8004334:	4b09      	ldr	r3, [pc, #36]	@ (800435c <MX_UART5_Init+0x4c>)
 8004336:	220c      	movs	r2, #12
 8004338:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800433a:	4b08      	ldr	r3, [pc, #32]	@ (800435c <MX_UART5_Init+0x4c>)
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004340:	4b06      	ldr	r3, [pc, #24]	@ (800435c <MX_UART5_Init+0x4c>)
 8004342:	2200      	movs	r2, #0
 8004344:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8004346:	4805      	ldr	r0, [pc, #20]	@ (800435c <MX_UART5_Init+0x4c>)
 8004348:	f005 f9c6 	bl	80096d8 <HAL_UART_Init>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <MX_UART5_Init+0x46>
		Error_Handler();
 8004352:	f000 f979 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000720 	.word	0x20000720
 8004360:	40005000 	.word	0x40005000

08004364 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004368:	4b11      	ldr	r3, [pc, #68]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 800436a:	4a12      	ldr	r2, [pc, #72]	@ (80043b4 <MX_USART1_UART_Init+0x50>)
 800436c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800436e:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 8004370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004374:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004376:	4b0e      	ldr	r3, [pc, #56]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 800437e:	2200      	movs	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004382:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004388:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 800438a:	220c      	movs	r2, #12
 800438c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800438e:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004394:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 8004396:	2200      	movs	r2, #0
 8004398:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800439a:	4805      	ldr	r0, [pc, #20]	@ (80043b0 <MX_USART1_UART_Init+0x4c>)
 800439c:	f005 f99c 	bl	80096d8 <HAL_UART_Init>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80043a6:	f000 f94f 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000768 	.word	0x20000768
 80043b4:	40011000 	.word	0x40011000

080043b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043be:	4a12      	ldr	r2, [pc, #72]	@ (8004408 <MX_USART2_UART_Init+0x50>)
 80043c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80043c2:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043c4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80043c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80043d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80043dc:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043de:	220c      	movs	r2, #12
 80043e0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043e2:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043e8:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80043ee:	4805      	ldr	r0, [pc, #20]	@ (8004404 <MX_USART2_UART_Init+0x4c>)
 80043f0:	f005 f972 	bl	80096d8 <HAL_UART_Init>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80043fa:	f000 f925 	bl	8004648 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	200007b0 	.word	0x200007b0
 8004408:	40004400 	.word	0x40004400

0800440c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	4b27      	ldr	r3, [pc, #156]	@ (80044b4 <MX_DMA_Init+0xa8>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <MX_DMA_Init+0xa8>)
 800441c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004420:	6313      	str	r3, [r2, #48]	@ 0x30
 8004422:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <MX_DMA_Init+0xa8>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <MX_DMA_Init+0xa8>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <MX_DMA_Init+0xa8>)
 8004438:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800443c:	6313      	str	r3, [r2, #48]	@ 0x30
 800443e:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <MX_DMA_Init+0xa8>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800444a:	2200      	movs	r2, #0
 800444c:	2100      	movs	r1, #0
 800444e:	200b      	movs	r0, #11
 8004450:	f001 fe23 	bl	800609a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004454:	200b      	movs	r0, #11
 8004456:	f001 fe3c 	bl	80060d2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800445a:	2200      	movs	r2, #0
 800445c:	2100      	movs	r1, #0
 800445e:	200d      	movs	r0, #13
 8004460:	f001 fe1b 	bl	800609a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004464:	200d      	movs	r0, #13
 8004466:	f001 fe34 	bl	80060d2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800446a:	2200      	movs	r2, #0
 800446c:	2100      	movs	r1, #0
 800446e:	200f      	movs	r0, #15
 8004470:	f001 fe13 	bl	800609a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004474:	200f      	movs	r0, #15
 8004476:	f001 fe2c 	bl	80060d2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800447a:	2200      	movs	r2, #0
 800447c:	2100      	movs	r1, #0
 800447e:	202f      	movs	r0, #47	@ 0x2f
 8004480:	f001 fe0b 	bl	800609a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004484:	202f      	movs	r0, #47	@ 0x2f
 8004486:	f001 fe24 	bl	80060d2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800448a:	2200      	movs	r2, #0
 800448c:	2100      	movs	r1, #0
 800448e:	203a      	movs	r0, #58	@ 0x3a
 8004490:	f001 fe03 	bl	800609a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004494:	203a      	movs	r0, #58	@ 0x3a
 8004496:	f001 fe1c 	bl	80060d2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2100      	movs	r1, #0
 800449e:	2046      	movs	r0, #70	@ 0x46
 80044a0:	f001 fdfb 	bl	800609a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80044a4:	2046      	movs	r0, #70	@ 0x46
 80044a6:	f001 fe14 	bl	80060d2 <HAL_NVIC_EnableIRQ>

}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800

080044b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	@ 0x28
 80044bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80044be:	f107 0314 	add.w	r3, r7, #20
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	609a      	str	r2, [r3, #8]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	4b57      	ldr	r3, [pc, #348]	@ (8004630 <MX_GPIO_Init+0x178>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	4a56      	ldr	r2, [pc, #344]	@ (8004630 <MX_GPIO_Init+0x178>)
 80044d8:	f043 0310 	orr.w	r3, r3, #16
 80044dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80044de:	4b54      	ldr	r3, [pc, #336]	@ (8004630 <MX_GPIO_Init+0x178>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	4b50      	ldr	r3, [pc, #320]	@ (8004630 <MX_GPIO_Init+0x178>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	4a4f      	ldr	r2, [pc, #316]	@ (8004630 <MX_GPIO_Init+0x178>)
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004630 <MX_GPIO_Init+0x178>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b49      	ldr	r3, [pc, #292]	@ (8004630 <MX_GPIO_Init+0x178>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	4a48      	ldr	r2, [pc, #288]	@ (8004630 <MX_GPIO_Init+0x178>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6313      	str	r3, [r2, #48]	@ 0x30
 8004516:	4b46      	ldr	r3, [pc, #280]	@ (8004630 <MX_GPIO_Init+0x178>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	4b42      	ldr	r3, [pc, #264]	@ (8004630 <MX_GPIO_Init+0x178>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	4a41      	ldr	r2, [pc, #260]	@ (8004630 <MX_GPIO_Init+0x178>)
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	6313      	str	r3, [r2, #48]	@ 0x30
 8004532:	4b3f      	ldr	r3, [pc, #252]	@ (8004630 <MX_GPIO_Init+0x178>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <MX_GPIO_Init+0x178>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	4a3a      	ldr	r2, [pc, #232]	@ (8004630 <MX_GPIO_Init+0x178>)
 8004548:	f043 0308 	orr.w	r3, r3, #8
 800454c:	6313      	str	r3, [r2, #48]	@ 0x30
 800454e:	4b38      	ldr	r3, [pc, #224]	@ (8004630 <MX_GPIO_Init+0x178>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_0,
 800455a:	2200      	movs	r2, #0
 800455c:	2115      	movs	r1, #21
 800455e:	4835      	ldr	r0, [pc, #212]	@ (8004634 <MX_GPIO_Init+0x17c>)
 8004560:	f002 fc6c 	bl	8006e3c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 | GPIO_PIN_4 | GPIO_PIN_9,
 8004564:	2200      	movs	r2, #0
 8004566:	f242 2110 	movw	r1, #8720	@ 0x2210
 800456a:	4833      	ldr	r0, [pc, #204]	@ (8004638 <MX_GPIO_Init+0x180>)
 800456c:	f002 fc66 	bl	8006e3c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8004570:	2200      	movs	r2, #0
 8004572:	f648 018b 	movw	r1, #34955	@ 0x888b
 8004576:	4831      	ldr	r0, [pc, #196]	@ (800463c <MX_GPIO_Init+0x184>)
 8004578:	f002 fc60 	bl	8006e3c <HAL_GPIO_WritePin>
			GPIO_PIN_11 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3
					| GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800457c:	2200      	movs	r2, #0
 800457e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004582:	482f      	ldr	r0, [pc, #188]	@ (8004640 <MX_GPIO_Init+0x188>)
 8004584:	f002 fc5a 	bl	8006e3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8004588:	2200      	movs	r2, #0
 800458a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800458e:	482d      	ldr	r0, [pc, #180]	@ (8004644 <MX_GPIO_Init+0x18c>)
 8004590:	f002 fc54 	bl	8006e3c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PE2 PE4 PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_0;
 8004594:	2315      	movs	r3, #21
 8004596:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004598:	2301      	movs	r3, #1
 800459a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a0:	2300      	movs	r3, #0
 80045a2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	4619      	mov	r1, r3
 80045aa:	4822      	ldr	r0, [pc, #136]	@ (8004634 <MX_GPIO_Init+0x17c>)
 80045ac:	f002 f9ae 	bl	800690c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB4 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_4 | GPIO_PIN_9;
 80045b0:	f242 2310 	movw	r3, #8720	@ 0x2210
 80045b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045be:	2300      	movs	r3, #0
 80045c0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c2:	f107 0314 	add.w	r3, r7, #20
 80045c6:	4619      	mov	r1, r3
 80045c8:	481b      	ldr	r0, [pc, #108]	@ (8004638 <MX_GPIO_Init+0x180>)
 80045ca:	f002 f99f 	bl	800690c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD11 PD15 PD0 PD1
	 PD3 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1
 80045ce:	f648 038b 	movw	r3, #34955	@ 0x888b
 80045d2:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_3 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d4:	2301      	movs	r3, #1
 80045d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045dc:	2300      	movs	r3, #0
 80045de:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	4619      	mov	r1, r3
 80045e6:	4815      	ldr	r0, [pc, #84]	@ (800463c <MX_GPIO_Init+0x184>)
 80045e8:	f002 f990 	bl	800690c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80045ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045fe:	f107 0314 	add.w	r3, r7, #20
 8004602:	4619      	mov	r1, r3
 8004604:	480e      	ldr	r0, [pc, #56]	@ (8004640 <MX_GPIO_Init+0x188>)
 8004606:	f002 f981 	bl	800690c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800460a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800460e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004610:	2301      	movs	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004618:	2300      	movs	r3, #0
 800461a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	4619      	mov	r1, r3
 8004622:	4808      	ldr	r0, [pc, #32]	@ (8004644 <MX_GPIO_Init+0x18c>)
 8004624:	f002 f972 	bl	800690c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004628:	bf00      	nop
 800462a:	3728      	adds	r7, #40	@ 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	40021000 	.word	0x40021000
 8004638:	40020400 	.word	0x40020400
 800463c:	40020c00 	.word	0x40020c00
 8004640:	40020800 	.word	0x40020800
 8004644:	40020000 	.word	0x40020000

08004648 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800464c:	b672      	cpsid	i
}
 800464e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004650:	bf00      	nop
 8004652:	e7fd      	b.n	8004650 <Error_Handler+0x8>

08004654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <HAL_MspInit+0x4c>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	4a0f      	ldr	r2, [pc, #60]	@ (80046a0 <HAL_MspInit+0x4c>)
 8004664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004668:	6453      	str	r3, [r2, #68]	@ 0x44
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <HAL_MspInit+0x4c>)
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4b09      	ldr	r3, [pc, #36]	@ (80046a0 <HAL_MspInit+0x4c>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	4a08      	ldr	r2, [pc, #32]	@ (80046a0 <HAL_MspInit+0x4c>)
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004684:	6413      	str	r3, [r2, #64]	@ 0x40
 8004686:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <HAL_MspInit+0x4c>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004692:	2007      	movs	r0, #7
 8004694:	f001 fcf6 	bl	8006084 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800

080046a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	@ 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a24      	ldr	r2, [pc, #144]	@ (8004754 <HAL_ADC_MspInit+0xb0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d141      	bne.n	800474a <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	4b23      	ldr	r3, [pc, #140]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	4a22      	ldr	r2, [pc, #136]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046d6:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046f2:	4b19      	ldr	r3, [pc, #100]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	4b15      	ldr	r3, [pc, #84]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6313      	str	r3, [r2, #48]	@ 0x30
 800470e:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <HAL_ADC_MspInit+0xb4>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800471a:	233f      	movs	r3, #63	@ 0x3f
 800471c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800471e:	2303      	movs	r3, #3
 8004720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	4619      	mov	r1, r3
 800472c:	480b      	ldr	r0, [pc, #44]	@ (800475c <HAL_ADC_MspInit+0xb8>)
 800472e:	f002 f8ed 	bl	800690c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004732:	2330      	movs	r3, #48	@ 0x30
 8004734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004736:	2303      	movs	r3, #3
 8004738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473e:	f107 0314 	add.w	r3, r7, #20
 8004742:	4619      	mov	r1, r3
 8004744:	4806      	ldr	r0, [pc, #24]	@ (8004760 <HAL_ADC_MspInit+0xbc>)
 8004746:	f002 f8e1 	bl	800690c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800474a:	bf00      	nop
 800474c:	3728      	adds	r7, #40	@ 0x28
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40012000 	.word	0x40012000
 8004758:	40023800 	.word	0x40023800
 800475c:	40020800 	.word	0x40020800
 8004760:	40020000 	.word	0x40020000

08004764 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	@ 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <HAL_I2C_MspInit+0x84>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d12b      	bne.n	80047de <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <HAL_I2C_MspInit+0x88>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	4a17      	ldr	r2, [pc, #92]	@ (80047ec <HAL_I2C_MspInit+0x88>)
 8004790:	f043 0302 	orr.w	r3, r3, #2
 8004794:	6313      	str	r3, [r2, #48]	@ 0x30
 8004796:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <HAL_I2C_MspInit+0x88>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047a2:	23c0      	movs	r3, #192	@ 0xc0
 80047a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047a6:	2312      	movs	r3, #18
 80047a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ae:	2303      	movs	r3, #3
 80047b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047b2:	2304      	movs	r3, #4
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b6:	f107 0314 	add.w	r3, r7, #20
 80047ba:	4619      	mov	r1, r3
 80047bc:	480c      	ldr	r0, [pc, #48]	@ (80047f0 <HAL_I2C_MspInit+0x8c>)
 80047be:	f002 f8a5 	bl	800690c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	4b09      	ldr	r3, [pc, #36]	@ (80047ec <HAL_I2C_MspInit+0x88>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	4a08      	ldr	r2, [pc, #32]	@ (80047ec <HAL_I2C_MspInit+0x88>)
 80047cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d2:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <HAL_I2C_MspInit+0x88>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80047de:	bf00      	nop
 80047e0:	3728      	adds	r7, #40	@ 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40005400 	.word	0x40005400
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40020400 	.word	0x40020400

080047f4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0a      	ldr	r2, [pc, #40]	@ (800482c <HAL_I2C_MspDeInit+0x38>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004806:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <HAL_I2C_MspDeInit+0x3c>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	4a09      	ldr	r2, [pc, #36]	@ (8004830 <HAL_I2C_MspDeInit+0x3c>)
 800480c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004810:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004812:	2140      	movs	r1, #64	@ 0x40
 8004814:	4807      	ldr	r0, [pc, #28]	@ (8004834 <HAL_I2C_MspDeInit+0x40>)
 8004816:	f002 fa15 	bl	8006c44 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800481a:	2180      	movs	r1, #128	@ 0x80
 800481c:	4805      	ldr	r0, [pc, #20]	@ (8004834 <HAL_I2C_MspDeInit+0x40>)
 800481e:	f002 fa11 	bl	8006c44 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40005400 	.word	0x40005400
 8004830:	40023800 	.word	0x40023800
 8004834:	40020400 	.word	0x40020400

08004838 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b092      	sub	sp, #72	@ 0x48
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4aaa      	ldr	r2, [pc, #680]	@ (8004b00 <HAL_TIM_Encoder_MspInit+0x2c8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d14d      	bne.n	80048f6 <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	633b      	str	r3, [r7, #48]	@ 0x30
 800485e:	4ba9      	ldr	r3, [pc, #676]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004862:	4aa8      	ldr	r2, [pc, #672]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6453      	str	r3, [r2, #68]	@ 0x44
 800486a:	4ba6      	ldr	r3, [pc, #664]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	633b      	str	r3, [r7, #48]	@ 0x30
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800487a:	4ba2      	ldr	r3, [pc, #648]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	4aa1      	ldr	r2, [pc, #644]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004880:	f043 0310 	orr.w	r3, r3, #16
 8004884:	6313      	str	r3, [r2, #48]	@ 0x30
 8004886:	4b9f      	ldr	r3, [pc, #636]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004892:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004898:	2302      	movs	r3, #2
 800489a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489c:	2300      	movs	r3, #0
 800489e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a0:	2300      	movs	r3, #0
 80048a2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80048a4:	2301      	movs	r3, #1
 80048a6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80048ac:	4619      	mov	r1, r3
 80048ae:	4896      	ldr	r0, [pc, #600]	@ (8004b08 <HAL_TIM_Encoder_MspInit+0x2d0>)
 80048b0:	f002 f82c 	bl	800690c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80048b4:	2200      	movs	r2, #0
 80048b6:	2100      	movs	r1, #0
 80048b8:	2018      	movs	r0, #24
 80048ba:	f001 fbee 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80048be:	2018      	movs	r0, #24
 80048c0:	f001 fc07 	bl	80060d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80048c4:	2200      	movs	r2, #0
 80048c6:	2100      	movs	r1, #0
 80048c8:	2019      	movs	r0, #25
 80048ca:	f001 fbe6 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80048ce:	2019      	movs	r0, #25
 80048d0:	f001 fbff 	bl	80060d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80048d4:	2200      	movs	r2, #0
 80048d6:	2100      	movs	r1, #0
 80048d8:	201a      	movs	r0, #26
 80048da:	f001 fbde 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80048de:	201a      	movs	r0, #26
 80048e0:	f001 fbf7 	bl	80060d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80048e4:	2200      	movs	r2, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	201b      	movs	r0, #27
 80048ea:	f001 fbd6 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80048ee:	201b      	movs	r0, #27
 80048f0:	f001 fbef 	bl	80060d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80048f4:	e0ff      	b.n	8004af6 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM3)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a84      	ldr	r2, [pc, #528]	@ (8004b0c <HAL_TIM_Encoder_MspInit+0x2d4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d134      	bne.n	800496a <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004900:	2300      	movs	r3, #0
 8004902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004904:	4b7f      	ldr	r3, [pc, #508]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	4a7e      	ldr	r2, [pc, #504]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800490a:	f043 0302 	orr.w	r3, r3, #2
 800490e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004910:	4b7c      	ldr	r3, [pc, #496]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491c:	2300      	movs	r3, #0
 800491e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004920:	4b78      	ldr	r3, [pc, #480]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	4a77      	ldr	r2, [pc, #476]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6313      	str	r3, [r2, #48]	@ 0x30
 800492c:	4b75      	ldr	r3, [pc, #468]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004938:	23c0      	movs	r3, #192	@ 0xc0
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493c:	2302      	movs	r3, #2
 800493e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004940:	2300      	movs	r3, #0
 8004942:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004944:	2300      	movs	r3, #0
 8004946:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004948:	2302      	movs	r3, #2
 800494a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004950:	4619      	mov	r1, r3
 8004952:	486f      	ldr	r0, [pc, #444]	@ (8004b10 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8004954:	f001 ffda 	bl	800690c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004958:	2200      	movs	r2, #0
 800495a:	2100      	movs	r1, #0
 800495c:	201d      	movs	r0, #29
 800495e:	f001 fb9c 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004962:	201d      	movs	r0, #29
 8004964:	f001 fbb5 	bl	80060d2 <HAL_NVIC_EnableIRQ>
}
 8004968:	e0c5      	b.n	8004af6 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM4)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a69      	ldr	r2, [pc, #420]	@ (8004b14 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d135      	bne.n	80049e0 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004974:	2300      	movs	r3, #0
 8004976:	623b      	str	r3, [r7, #32]
 8004978:	4b62      	ldr	r3, [pc, #392]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	4a61      	ldr	r2, [pc, #388]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	6413      	str	r3, [r2, #64]	@ 0x40
 8004984:	4b5f      	ldr	r3, [pc, #380]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	623b      	str	r3, [r7, #32]
 800498e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	4b5b      	ldr	r3, [pc, #364]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	4a5a      	ldr	r2, [pc, #360]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 800499a:	f043 0308 	orr.w	r3, r3, #8
 800499e:	6313      	str	r3, [r2, #48]	@ 0x30
 80049a0:	4b58      	ldr	r3, [pc, #352]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80049ac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b2:	2302      	movs	r3, #2
 80049b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ba:	2300      	movs	r3, #0
 80049bc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80049be:	2302      	movs	r3, #2
 80049c0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80049c6:	4619      	mov	r1, r3
 80049c8:	4853      	ldr	r0, [pc, #332]	@ (8004b18 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80049ca:	f001 ff9f 	bl	800690c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	201e      	movs	r0, #30
 80049d4:	f001 fb61 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80049d8:	201e      	movs	r0, #30
 80049da:	f001 fb7a 	bl	80060d2 <HAL_NVIC_EnableIRQ>
}
 80049de:	e08a      	b.n	8004af6 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM5)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a4d      	ldr	r2, [pc, #308]	@ (8004b1c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d134      	bne.n	8004a54 <HAL_TIM_Encoder_MspInit+0x21c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	4b45      	ldr	r3, [pc, #276]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	4a44      	ldr	r2, [pc, #272]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80049f4:	f043 0308 	orr.w	r3, r3, #8
 80049f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049fa:	4b42      	ldr	r3, [pc, #264]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a16:	4b3b      	ldr	r3, [pc, #236]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a22:	2303      	movs	r3, #3
 8004a24:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a26:	2302      	movs	r3, #2
 8004a28:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004a32:	2302      	movs	r3, #2
 8004a34:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4834      	ldr	r0, [pc, #208]	@ (8004b10 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8004a3e:	f001 ff65 	bl	800690c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004a42:	2200      	movs	r2, #0
 8004a44:	2100      	movs	r1, #0
 8004a46:	2032      	movs	r0, #50	@ 0x32
 8004a48:	f001 fb27 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004a4c:	2032      	movs	r0, #50	@ 0x32
 8004a4e:	f001 fb40 	bl	80060d2 <HAL_NVIC_EnableIRQ>
}
 8004a52:	e050      	b.n	8004af6 <HAL_TIM_Encoder_MspInit+0x2be>
  else if(htim_encoder->Instance==TIM8)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a31      	ldr	r2, [pc, #196]	@ (8004b20 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d14b      	bne.n	8004af6 <HAL_TIM_Encoder_MspInit+0x2be>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	4b28      	ldr	r3, [pc, #160]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	4a27      	ldr	r2, [pc, #156]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a6e:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	4b21      	ldr	r3, [pc, #132]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	4a20      	ldr	r2, [pc, #128]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a84:	f043 0304 	orr.w	r3, r3, #4
 8004a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2cc>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a96:	23c0      	movs	r3, #192	@ 0xc0
 8004a98:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aaa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004aae:	4619      	mov	r1, r3
 8004ab0:	481c      	ldr	r0, [pc, #112]	@ (8004b24 <HAL_TIM_Encoder_MspInit+0x2ec>)
 8004ab2:	f001 ff2b 	bl	800690c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2100      	movs	r1, #0
 8004aba:	202b      	movs	r0, #43	@ 0x2b
 8004abc:	f001 faed 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004ac0:	202b      	movs	r0, #43	@ 0x2b
 8004ac2:	f001 fb06 	bl	80060d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2100      	movs	r1, #0
 8004aca:	202c      	movs	r0, #44	@ 0x2c
 8004acc:	f001 fae5 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004ad0:	202c      	movs	r0, #44	@ 0x2c
 8004ad2:	f001 fafe 	bl	80060d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2100      	movs	r1, #0
 8004ada:	202d      	movs	r0, #45	@ 0x2d
 8004adc:	f001 fadd 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004ae0:	202d      	movs	r0, #45	@ 0x2d
 8004ae2:	f001 faf6 	bl	80060d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2100      	movs	r1, #0
 8004aea:	202e      	movs	r0, #46	@ 0x2e
 8004aec:	f001 fad5 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004af0:	202e      	movs	r0, #46	@ 0x2e
 8004af2:	f001 faee 	bl	80060d2 <HAL_NVIC_EnableIRQ>
}
 8004af6:	bf00      	nop
 8004af8:	3748      	adds	r7, #72	@ 0x48
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40020000 	.word	0x40020000
 8004b14:	40000800 	.word	0x40000800
 8004b18:	40020c00 	.word	0x40020c00
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40010400 	.word	0x40010400
 8004b24:	40020800 	.word	0x40020800

08004b28 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	4b24      	ldr	r3, [pc, #144]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	4a23      	ldr	r2, [pc, #140]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b4a:	4b21      	ldr	r3, [pc, #132]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004b56:	e036      	b.n	8004bc6 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM9)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd4 <HAL_TIM_PWM_MspInit+0xac>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d116      	bne.n	8004b90 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	4a19      	ldr	r2, [pc, #100]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b72:	4b17      	ldr	r3, [pc, #92]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	2018      	movs	r0, #24
 8004b84:	f001 fa89 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004b88:	2018      	movs	r0, #24
 8004b8a:	f001 faa2 	bl	80060d2 <HAL_NVIC_EnableIRQ>
}
 8004b8e:	e01a      	b.n	8004bc6 <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM12)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a10      	ldr	r2, [pc, #64]	@ (8004bd8 <HAL_TIM_PWM_MspInit+0xb0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d115      	bne.n	8004bc6 <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004baa:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <HAL_TIM_PWM_MspInit+0xa8>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2100      	movs	r1, #0
 8004bba:	202b      	movs	r0, #43	@ 0x2b
 8004bbc:	f001 fa6d 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004bc0:	202b      	movs	r0, #43	@ 0x2b
 8004bc2:	f001 fa86 	bl	80060d2 <HAL_NVIC_EnableIRQ>
}
 8004bc6:	bf00      	nop
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40001800 	.word	0x40001800

08004bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	@ 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be4:	f107 031c 	add.w	r3, r7, #28
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	60da      	str	r2, [r3, #12]
 8004bf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfc:	d13e      	bne.n	8004c7c <HAL_TIM_MspPostInit+0xa0>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	4b44      	ldr	r3, [pc, #272]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c06:	4a43      	ldr	r2, [pc, #268]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c0e:	4b41      	ldr	r3, [pc, #260]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	4a3c      	ldr	r2, [pc, #240]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697b      	ldr	r3, [r7, #20]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8004c36:	f640 4308 	movw	r3, #3080	@ 0xc08
 8004c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c44:	2300      	movs	r3, #0
 8004c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4c:	f107 031c 	add.w	r3, r7, #28
 8004c50:	4619      	mov	r1, r3
 8004c52:	4831      	ldr	r0, [pc, #196]	@ (8004d18 <HAL_TIM_MspPostInit+0x13c>)
 8004c54:	f001 fe5a 	bl	800690c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c66:	2300      	movs	r3, #0
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c6e:	f107 031c 	add.w	r3, r7, #28
 8004c72:	4619      	mov	r1, r3
 8004c74:	4829      	ldr	r0, [pc, #164]	@ (8004d1c <HAL_TIM_MspPostInit+0x140>)
 8004c76:	f001 fe49 	bl	800690c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004c7a:	e047      	b.n	8004d0c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM9)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a27      	ldr	r2, [pc, #156]	@ (8004d20 <HAL_TIM_MspPostInit+0x144>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d11e      	bne.n	8004cc4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	4b22      	ldr	r3, [pc, #136]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	4a21      	ldr	r2, [pc, #132]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c90:	f043 0310 	orr.w	r3, r3, #16
 8004c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c96:	4b1f      	ldr	r3, [pc, #124]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004ca2:	2360      	movs	r3, #96	@ 0x60
 8004ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cb6:	f107 031c 	add.w	r3, r7, #28
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4819      	ldr	r0, [pc, #100]	@ (8004d24 <HAL_TIM_MspPostInit+0x148>)
 8004cbe:	f001 fe25 	bl	800690c <HAL_GPIO_Init>
}
 8004cc2:	e023      	b.n	8004d0c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <HAL_TIM_MspPostInit+0x14c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d11e      	bne.n	8004d0c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004cd8:	f043 0302 	orr.w	r3, r3, #2
 8004cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <HAL_TIM_MspPostInit+0x138>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004cea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004cfc:	2309      	movs	r3, #9
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d00:	f107 031c 	add.w	r3, r7, #28
 8004d04:	4619      	mov	r1, r3
 8004d06:	4804      	ldr	r0, [pc, #16]	@ (8004d18 <HAL_TIM_MspPostInit+0x13c>)
 8004d08:	f001 fe00 	bl	800690c <HAL_GPIO_Init>
}
 8004d0c:	bf00      	nop
 8004d0e:	3730      	adds	r7, #48	@ 0x30
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40020400 	.word	0x40020400
 8004d1c:	40020000 	.word	0x40020000
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40001800 	.word	0x40001800

08004d2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b090      	sub	sp, #64	@ 0x40
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a4a      	ldr	r2, [pc, #296]	@ (8004e74 <HAL_UART_MspInit+0x148>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	f040 80a0 	bne.w	8004e90 <HAL_UART_MspInit+0x164>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004d50:	2300      	movs	r3, #0
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d54:	4b48      	ldr	r3, [pc, #288]	@ (8004e78 <HAL_UART_MspInit+0x14c>)
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	4a47      	ldr	r2, [pc, #284]	@ (8004e78 <HAL_UART_MspInit+0x14c>)
 8004d5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d60:	4b45      	ldr	r3, [pc, #276]	@ (8004e78 <HAL_UART_MspInit+0x14c>)
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d70:	4b41      	ldr	r3, [pc, #260]	@ (8004e78 <HAL_UART_MspInit+0x14c>)
 8004d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d74:	4a40      	ldr	r2, [pc, #256]	@ (8004e78 <HAL_UART_MspInit+0x14c>)
 8004d76:	f043 0304 	orr.w	r3, r3, #4
 8004d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d7c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e78 <HAL_UART_MspInit+0x14c>)
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004d88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d96:	2303      	movs	r3, #3
 8004d98:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004da2:	4619      	mov	r1, r3
 8004da4:	4835      	ldr	r0, [pc, #212]	@ (8004e7c <HAL_UART_MspInit+0x150>)
 8004da6:	f001 fdb1 	bl	800690c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004daa:	4b35      	ldr	r3, [pc, #212]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dac:	4a35      	ldr	r2, [pc, #212]	@ (8004e84 <HAL_UART_MspInit+0x158>)
 8004dae:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004db0:	4b33      	ldr	r3, [pc, #204]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004db2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004db6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004db8:	4b31      	ldr	r3, [pc, #196]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dbe:	4b30      	ldr	r3, [pc, #192]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dca:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004dd8:	4b29      	ldr	r3, [pc, #164]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004dde:	4b28      	ldr	r3, [pc, #160]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004de4:	4b26      	ldr	r3, [pc, #152]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004dea:	4825      	ldr	r0, [pc, #148]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dec:	f001 f98c 	bl	8006108 <HAL_DMA_Init>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004df6:	f7ff fc27 	bl	8004648 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a20      	ldr	r2, [pc, #128]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e00:	4a1f      	ldr	r2, [pc, #124]	@ (8004e80 <HAL_UART_MspInit+0x154>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004e06:	4b20      	ldr	r3, [pc, #128]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e08:	4a20      	ldr	r2, [pc, #128]	@ (8004e8c <HAL_UART_MspInit+0x160>)
 8004e0a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004e12:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e14:	4b1c      	ldr	r3, [pc, #112]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e16:	2240      	movs	r2, #64	@ 0x40
 8004e18:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e20:	4b19      	ldr	r3, [pc, #100]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e26:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e28:	4b17      	ldr	r3, [pc, #92]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e2e:	4b16      	ldr	r3, [pc, #88]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004e34:	4b14      	ldr	r3, [pc, #80]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e3a:	4b13      	ldr	r3, [pc, #76]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e40:	4b11      	ldr	r3, [pc, #68]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004e46:	4810      	ldr	r0, [pc, #64]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e48:	f001 f95e 	bl	8006108 <HAL_DMA_Init>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004e52:	f7ff fbf9 	bl	8004648 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a0b      	ldr	r2, [pc, #44]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <HAL_UART_MspInit+0x15c>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004e62:	2200      	movs	r2, #0
 8004e64:	2100      	movs	r1, #0
 8004e66:	2034      	movs	r0, #52	@ 0x34
 8004e68:	f001 f917 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004e6c:	2034      	movs	r0, #52	@ 0x34
 8004e6e:	f001 f930 	bl	80060d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e72:	e194      	b.n	800519e <HAL_UART_MspInit+0x472>
 8004e74:	40004c00 	.word	0x40004c00
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40020800 	.word	0x40020800
 8004e80:	200007f8 	.word	0x200007f8
 8004e84:	40026040 	.word	0x40026040
 8004e88:	20000858 	.word	0x20000858
 8004e8c:	40026070 	.word	0x40026070
  else if(huart->Instance==UART5)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a59      	ldr	r2, [pc, #356]	@ (8004ffc <HAL_UART_MspInit+0x2d0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f040 80c0 	bne.w	800501c <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	4b57      	ldr	r3, [pc, #348]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	4a56      	ldr	r2, [pc, #344]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eac:	4b54      	ldr	r3, [pc, #336]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	4b50      	ldr	r3, [pc, #320]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	4a4f      	ldr	r2, [pc, #316]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004ec2:	f043 0304 	orr.w	r3, r3, #4
 8004ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	4b49      	ldr	r3, [pc, #292]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004edc:	4a48      	ldr	r2, [pc, #288]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004ede:	f043 0308 	orr.w	r3, r3, #8
 8004ee2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ee4:	4b46      	ldr	r3, [pc, #280]	@ (8005000 <HAL_UART_MspInit+0x2d4>)
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efe:	2303      	movs	r3, #3
 8004f00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004f02:	2308      	movs	r3, #8
 8004f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	483d      	ldr	r0, [pc, #244]	@ (8005004 <HAL_UART_MspInit+0x2d8>)
 8004f0e:	f001 fcfd 	bl	800690c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f12:	2304      	movs	r3, #4
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	2302      	movs	r3, #2
 8004f18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004f22:	2308      	movs	r3, #8
 8004f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4836      	ldr	r0, [pc, #216]	@ (8005008 <HAL_UART_MspInit+0x2dc>)
 8004f2e:	f001 fced 	bl	800690c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004f32:	4b36      	ldr	r3, [pc, #216]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f34:	4a36      	ldr	r2, [pc, #216]	@ (8005010 <HAL_UART_MspInit+0x2e4>)
 8004f36:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004f38:	4b34      	ldr	r3, [pc, #208]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004f3e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f40:	4b32      	ldr	r3, [pc, #200]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f46:	4b31      	ldr	r3, [pc, #196]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f52:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f54:	4b2d      	ldr	r3, [pc, #180]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004f60:	4b2a      	ldr	r3, [pc, #168]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f66:	4b29      	ldr	r3, [pc, #164]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f6c:	4b27      	ldr	r3, [pc, #156]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004f72:	4826      	ldr	r0, [pc, #152]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f74:	f001 f8c8 	bl	8006108 <HAL_DMA_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8004f7e:	f7ff fb63 	bl	8004648 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a21      	ldr	r2, [pc, #132]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f88:	4a20      	ldr	r2, [pc, #128]	@ (800500c <HAL_UART_MspInit+0x2e0>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8004f8e:	4b21      	ldr	r3, [pc, #132]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004f90:	4a21      	ldr	r2, [pc, #132]	@ (8005018 <HAL_UART_MspInit+0x2ec>)
 8004f92:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8004f94:	4b1f      	ldr	r3, [pc, #124]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004f96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004f9a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004f9e:	2240      	movs	r2, #64	@ 0x40
 8004fa0:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004faa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fae:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fb0:	4b18      	ldr	r3, [pc, #96]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fb6:	4b17      	ldr	r3, [pc, #92]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004fbc:	4b15      	ldr	r3, [pc, #84]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004fc2:	4b14      	ldr	r3, [pc, #80]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fc8:	4b12      	ldr	r3, [pc, #72]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004fce:	4811      	ldr	r0, [pc, #68]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fd0:	f001 f89a 	bl	8006108 <HAL_DMA_Init>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8004fda:	f7ff fb35 	bl	8004648 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8005014 <HAL_UART_MspInit+0x2e8>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	2100      	movs	r1, #0
 8004fee:	2035      	movs	r0, #53	@ 0x35
 8004ff0:	f001 f853 	bl	800609a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004ff4:	2035      	movs	r0, #53	@ 0x35
 8004ff6:	f001 f86c 	bl	80060d2 <HAL_NVIC_EnableIRQ>
}
 8004ffa:	e0d0      	b.n	800519e <HAL_UART_MspInit+0x472>
 8004ffc:	40005000 	.word	0x40005000
 8005000:	40023800 	.word	0x40023800
 8005004:	40020800 	.word	0x40020800
 8005008:	40020c00 	.word	0x40020c00
 800500c:	200008b8 	.word	0x200008b8
 8005010:	40026010 	.word	0x40026010
 8005014:	20000918 	.word	0x20000918
 8005018:	400260b8 	.word	0x400260b8
  else if(huart->Instance==USART1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a61      	ldr	r2, [pc, #388]	@ (80051a8 <HAL_UART_MspInit+0x47c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	f040 808a 	bne.w	800513c <HAL_UART_MspInit+0x410>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	4b5f      	ldr	r3, [pc, #380]	@ (80051ac <HAL_UART_MspInit+0x480>)
 800502e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005030:	4a5e      	ldr	r2, [pc, #376]	@ (80051ac <HAL_UART_MspInit+0x480>)
 8005032:	f043 0310 	orr.w	r3, r3, #16
 8005036:	6453      	str	r3, [r2, #68]	@ 0x44
 8005038:	4b5c      	ldr	r3, [pc, #368]	@ (80051ac <HAL_UART_MspInit+0x480>)
 800503a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	4b58      	ldr	r3, [pc, #352]	@ (80051ac <HAL_UART_MspInit+0x480>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504c:	4a57      	ldr	r2, [pc, #348]	@ (80051ac <HAL_UART_MspInit+0x480>)
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	6313      	str	r3, [r2, #48]	@ 0x30
 8005054:	4b55      	ldr	r3, [pc, #340]	@ (80051ac <HAL_UART_MspInit+0x480>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005060:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005066:	2302      	movs	r3, #2
 8005068:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506e:	2303      	movs	r3, #3
 8005070:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005072:	2307      	movs	r3, #7
 8005074:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800507a:	4619      	mov	r1, r3
 800507c:	484c      	ldr	r0, [pc, #304]	@ (80051b0 <HAL_UART_MspInit+0x484>)
 800507e:	f001 fc45 	bl	800690c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005082:	4b4c      	ldr	r3, [pc, #304]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 8005084:	4a4c      	ldr	r2, [pc, #304]	@ (80051b8 <HAL_UART_MspInit+0x48c>)
 8005086:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005088:	4b4a      	ldr	r3, [pc, #296]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 800508a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800508e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005090:	4b48      	ldr	r3, [pc, #288]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005096:	4b47      	ldr	r3, [pc, #284]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 8005098:	2200      	movs	r2, #0
 800509a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800509c:	4b45      	ldr	r3, [pc, #276]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 800509e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050a4:	4b43      	ldr	r3, [pc, #268]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050aa:	4b42      	ldr	r3, [pc, #264]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80050b0:	4b40      	ldr	r3, [pc, #256]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050b6:	4b3f      	ldr	r3, [pc, #252]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050bc:	4b3d      	ldr	r3, [pc, #244]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 80050be:	2200      	movs	r2, #0
 80050c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80050c2:	483c      	ldr	r0, [pc, #240]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 80050c4:	f001 f820 	bl	8006108 <HAL_DMA_Init>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 80050ce:	f7ff fabb 	bl	8004648 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a37      	ldr	r2, [pc, #220]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 80050d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050d8:	4a36      	ldr	r2, [pc, #216]	@ (80051b4 <HAL_UART_MspInit+0x488>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80050de:	4b37      	ldr	r3, [pc, #220]	@ (80051bc <HAL_UART_MspInit+0x490>)
 80050e0:	4a37      	ldr	r2, [pc, #220]	@ (80051c0 <HAL_UART_MspInit+0x494>)
 80050e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80050e4:	4b35      	ldr	r3, [pc, #212]	@ (80051bc <HAL_UART_MspInit+0x490>)
 80050e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80050ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050ec:	4b33      	ldr	r3, [pc, #204]	@ (80051bc <HAL_UART_MspInit+0x490>)
 80050ee:	2240      	movs	r2, #64	@ 0x40
 80050f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050f2:	4b32      	ldr	r3, [pc, #200]	@ (80051bc <HAL_UART_MspInit+0x490>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050f8:	4b30      	ldr	r3, [pc, #192]	@ (80051bc <HAL_UART_MspInit+0x490>)
 80050fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005100:	4b2e      	ldr	r3, [pc, #184]	@ (80051bc <HAL_UART_MspInit+0x490>)
 8005102:	2200      	movs	r2, #0
 8005104:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005106:	4b2d      	ldr	r3, [pc, #180]	@ (80051bc <HAL_UART_MspInit+0x490>)
 8005108:	2200      	movs	r2, #0
 800510a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800510c:	4b2b      	ldr	r3, [pc, #172]	@ (80051bc <HAL_UART_MspInit+0x490>)
 800510e:	2200      	movs	r2, #0
 8005110:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005112:	4b2a      	ldr	r3, [pc, #168]	@ (80051bc <HAL_UART_MspInit+0x490>)
 8005114:	2200      	movs	r2, #0
 8005116:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005118:	4b28      	ldr	r3, [pc, #160]	@ (80051bc <HAL_UART_MspInit+0x490>)
 800511a:	2200      	movs	r2, #0
 800511c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800511e:	4827      	ldr	r0, [pc, #156]	@ (80051bc <HAL_UART_MspInit+0x490>)
 8005120:	f000 fff2 	bl	8006108 <HAL_DMA_Init>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_UART_MspInit+0x402>
      Error_Handler();
 800512a:	f7ff fa8d 	bl	8004648 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a22      	ldr	r2, [pc, #136]	@ (80051bc <HAL_UART_MspInit+0x490>)
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
 8005134:	4a21      	ldr	r2, [pc, #132]	@ (80051bc <HAL_UART_MspInit+0x490>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800513a:	e030      	b.n	800519e <HAL_UART_MspInit+0x472>
  else if(huart->Instance==USART2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a20      	ldr	r2, [pc, #128]	@ (80051c4 <HAL_UART_MspInit+0x498>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d12b      	bne.n	800519e <HAL_UART_MspInit+0x472>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	4b18      	ldr	r3, [pc, #96]	@ (80051ac <HAL_UART_MspInit+0x480>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	4a17      	ldr	r2, [pc, #92]	@ (80051ac <HAL_UART_MspInit+0x480>)
 8005150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005154:	6413      	str	r3, [r2, #64]	@ 0x40
 8005156:	4b15      	ldr	r3, [pc, #84]	@ (80051ac <HAL_UART_MspInit+0x480>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	4b11      	ldr	r3, [pc, #68]	@ (80051ac <HAL_UART_MspInit+0x480>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	4a10      	ldr	r2, [pc, #64]	@ (80051ac <HAL_UART_MspInit+0x480>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6313      	str	r3, [r2, #48]	@ 0x30
 8005172:	4b0e      	ldr	r3, [pc, #56]	@ (80051ac <HAL_UART_MspInit+0x480>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800517e:	230c      	movs	r3, #12
 8005180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005182:	2302      	movs	r3, #2
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800518a:	2303      	movs	r3, #3
 800518c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800518e:	2307      	movs	r3, #7
 8005190:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005192:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005196:	4619      	mov	r1, r3
 8005198:	4805      	ldr	r0, [pc, #20]	@ (80051b0 <HAL_UART_MspInit+0x484>)
 800519a:	f001 fbb7 	bl	800690c <HAL_GPIO_Init>
}
 800519e:	bf00      	nop
 80051a0:	3740      	adds	r7, #64	@ 0x40
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40011000 	.word	0x40011000
 80051ac:	40023800 	.word	0x40023800
 80051b0:	40020000 	.word	0x40020000
 80051b4:	20000978 	.word	0x20000978
 80051b8:	40026440 	.word	0x40026440
 80051bc:	200009d8 	.word	0x200009d8
 80051c0:	400264b8 	.word	0x400264b8
 80051c4:	40004400 	.word	0x40004400

080051c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <NMI_Handler+0x4>

080051d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <HardFault_Handler+0x4>

080051d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <MemManage_Handler+0x4>

080051e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <BusFault_Handler+0x4>

080051e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <UsageFault_Handler+0x4>

080051f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800521e:	f000 fa1d 	bl	800565c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800522c:	4802      	ldr	r0, [pc, #8]	@ (8005238 <DMA1_Stream0_IRQHandler+0x10>)
 800522e:	f001 f903 	bl	8006438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200008b8 	.word	0x200008b8

0800523c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005240:	4802      	ldr	r0, [pc, #8]	@ (800524c <DMA1_Stream2_IRQHandler+0x10>)
 8005242:	f001 f8f9 	bl	8006438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	200007f8 	.word	0x200007f8

08005250 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005254:	4802      	ldr	r0, [pc, #8]	@ (8005260 <DMA1_Stream4_IRQHandler+0x10>)
 8005256:	f001 f8ef 	bl	8006438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000858 	.word	0x20000858

08005264 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005268:	4803      	ldr	r0, [pc, #12]	@ (8005278 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800526a:	f003 fd49 	bl	8008d00 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800526e:	4803      	ldr	r0, [pc, #12]	@ (800527c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8005270:	f003 fd46 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}
 8005278:	200003c0 	.word	0x200003c0
 800527c:	20000648 	.word	0x20000648

08005280 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005284:	4802      	ldr	r0, [pc, #8]	@ (8005290 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005286:	f003 fd3b 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800528a:	bf00      	nop
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	200003c0 	.word	0x200003c0

08005294 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005298:	4802      	ldr	r0, [pc, #8]	@ (80052a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800529a:	f003 fd31 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800529e:	bf00      	nop
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200003c0 	.word	0x200003c0

080052a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052ac:	4802      	ldr	r0, [pc, #8]	@ (80052b8 <TIM1_CC_IRQHandler+0x10>)
 80052ae:	f003 fd27 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	200003c0 	.word	0x200003c0

080052bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80052c0:	4802      	ldr	r0, [pc, #8]	@ (80052cc <TIM3_IRQHandler+0x10>)
 80052c2:	f003 fd1d 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000408 	.word	0x20000408

080052d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80052d4:	4802      	ldr	r0, [pc, #8]	@ (80052e0 <TIM4_IRQHandler+0x10>)
 80052d6:	f003 fd13 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000450 	.word	0x20000450

080052e4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80052e8:	4803      	ldr	r0, [pc, #12]	@ (80052f8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80052ea:	f003 fd09 	bl	8008d00 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80052ee:	4803      	ldr	r0, [pc, #12]	@ (80052fc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80052f0:	f003 fd06 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80052f4:	bf00      	nop
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	200004e0 	.word	0x200004e0
 80052fc:	20000690 	.word	0x20000690

08005300 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005304:	4802      	ldr	r0, [pc, #8]	@ (8005310 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005306:	f003 fcfb 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200004e0 	.word	0x200004e0

08005314 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005318:	4802      	ldr	r0, [pc, #8]	@ (8005324 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800531a:	f003 fcf1 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	200004e0 	.word	0x200004e0

08005328 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800532c:	4802      	ldr	r0, [pc, #8]	@ (8005338 <TIM8_CC_IRQHandler+0x10>)
 800532e:	f003 fce7 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200004e0 	.word	0x200004e0

0800533c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005340:	4802      	ldr	r0, [pc, #8]	@ (800534c <DMA1_Stream7_IRQHandler+0x10>)
 8005342:	f001 f879 	bl	8006438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005346:	bf00      	nop
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000918 	.word	0x20000918

08005350 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005354:	4802      	ldr	r0, [pc, #8]	@ (8005360 <TIM5_IRQHandler+0x10>)
 8005356:	f003 fcd3 	bl	8008d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000498 	.word	0x20000498

08005364 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005368:	4802      	ldr	r0, [pc, #8]	@ (8005374 <UART4_IRQHandler+0x10>)
 800536a:	f004 fac1 	bl	80098f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	200006d8 	.word	0x200006d8

08005378 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800537c:	4802      	ldr	r0, [pc, #8]	@ (8005388 <UART5_IRQHandler+0x10>)
 800537e:	f004 fab7 	bl	80098f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000720 	.word	0x20000720

0800538c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005390:	4802      	ldr	r0, [pc, #8]	@ (800539c <DMA2_Stream2_IRQHandler+0x10>)
 8005392:	f001 f851 	bl	8006438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000978 	.word	0x20000978

080053a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80053a4:	4802      	ldr	r0, [pc, #8]	@ (80053b0 <DMA2_Stream7_IRQHandler+0x10>)
 80053a6:	f001 f847 	bl	8006438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200009d8 	.word	0x200009d8

080053b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  return 1;
 80053b8:	2301      	movs	r3, #1
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <_kill>:

int _kill(int pid, int sig)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053ce:	f006 ffdf 	bl	800c390 <__errno>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2216      	movs	r2, #22
 80053d6:	601a      	str	r2, [r3, #0]
  return -1;
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <_exit>:

void _exit (int status)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80053ec:	f04f 31ff 	mov.w	r1, #4294967295
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ffe7 	bl	80053c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <_exit+0x12>

080053fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b086      	sub	sp, #24
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e00a      	b.n	8005422 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800540c:	f3af 8000 	nop.w
 8005410:	4601      	mov	r1, r0
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	60ba      	str	r2, [r7, #8]
 8005418:	b2ca      	uxtb	r2, r1
 800541a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	3301      	adds	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	429a      	cmp	r2, r3
 8005428:	dbf0      	blt.n	800540c <_read+0x12>
  }

  return len;
 800542a:	687b      	ldr	r3, [r7, #4]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e009      	b.n	800545a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	60ba      	str	r2, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	3301      	adds	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	dbf1      	blt.n	8005446 <_write+0x12>
  }
  return len;
 8005462:	687b      	ldr	r3, [r7, #4]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_close>:

int _close(int file)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005494:	605a      	str	r2, [r3, #4]
  return 0;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <_isatty>:

int _isatty(int file)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80054ac:	2301      	movs	r3, #1
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054dc:	4a14      	ldr	r2, [pc, #80]	@ (8005530 <_sbrk+0x5c>)
 80054de:	4b15      	ldr	r3, [pc, #84]	@ (8005534 <_sbrk+0x60>)
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054e8:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <_sbrk+0x64>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054f0:	4b11      	ldr	r3, [pc, #68]	@ (8005538 <_sbrk+0x64>)
 80054f2:	4a12      	ldr	r2, [pc, #72]	@ (800553c <_sbrk+0x68>)
 80054f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054f6:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <_sbrk+0x64>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	429a      	cmp	r2, r3
 8005502:	d207      	bcs.n	8005514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005504:	f006 ff44 	bl	800c390 <__errno>
 8005508:	4603      	mov	r3, r0
 800550a:	220c      	movs	r2, #12
 800550c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800550e:	f04f 33ff 	mov.w	r3, #4294967295
 8005512:	e009      	b.n	8005528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005514:	4b08      	ldr	r3, [pc, #32]	@ (8005538 <_sbrk+0x64>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800551a:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <_sbrk+0x64>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4413      	add	r3, r2
 8005522:	4a05      	ldr	r2, [pc, #20]	@ (8005538 <_sbrk+0x64>)
 8005524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005526:	68fb      	ldr	r3, [r7, #12]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20020000 	.word	0x20020000
 8005534:	00000400 	.word	0x00000400
 8005538:	20000a38 	.word	0x20000a38
 800553c:	20000b90 	.word	0x20000b90

08005540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005544:	4b06      	ldr	r3, [pc, #24]	@ (8005560 <SystemInit+0x20>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	4a05      	ldr	r2, [pc, #20]	@ (8005560 <SystemInit+0x20>)
 800554c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800559c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005568:	480d      	ldr	r0, [pc, #52]	@ (80055a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800556a:	490e      	ldr	r1, [pc, #56]	@ (80055a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800556c:	4a0e      	ldr	r2, [pc, #56]	@ (80055a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800556e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005570:	e002      	b.n	8005578 <LoopCopyDataInit>

08005572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005576:	3304      	adds	r3, #4

08005578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800557a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800557c:	d3f9      	bcc.n	8005572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800557e:	4a0b      	ldr	r2, [pc, #44]	@ (80055ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005580:	4c0b      	ldr	r4, [pc, #44]	@ (80055b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005584:	e001      	b.n	800558a <LoopFillZerobss>

08005586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005588:	3204      	adds	r2, #4

0800558a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800558a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800558c:	d3fb      	bcc.n	8005586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800558e:	f7ff ffd7 	bl	8005540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005592:	f006 ff03 	bl	800c39c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005596:	f7fd ff6d 	bl	8003474 <main>
  bx  lr    
 800559a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800559c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055a4:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80055a8:	08010208 	.word	0x08010208
  ldr r2, =_sbss
 80055ac:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80055b0:	20000b8c 	.word	0x20000b8c

080055b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055b4:	e7fe      	b.n	80055b4 <ADC_IRQHandler>
	...

080055b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055bc:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <HAL_Init+0x40>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0d      	ldr	r2, [pc, #52]	@ (80055f8 <HAL_Init+0x40>)
 80055c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055c8:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <HAL_Init+0x40>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <HAL_Init+0x40>)
 80055ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055d4:	4b08      	ldr	r3, [pc, #32]	@ (80055f8 <HAL_Init+0x40>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a07      	ldr	r2, [pc, #28]	@ (80055f8 <HAL_Init+0x40>)
 80055da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055e0:	2003      	movs	r0, #3
 80055e2:	f000 fd4f 	bl	8006084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055e6:	2000      	movs	r0, #0
 80055e8:	f000 f808 	bl	80055fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055ec:	f7ff f832 	bl	8004654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40023c00 	.word	0x40023c00

080055fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005604:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <HAL_InitTick+0x54>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b12      	ldr	r3, [pc, #72]	@ (8005654 <HAL_InitTick+0x58>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005612:	fbb3 f3f1 	udiv	r3, r3, r1
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fd67 	bl	80060ee <HAL_SYSTICK_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e00e      	b.n	8005648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b0f      	cmp	r3, #15
 800562e:	d80a      	bhi.n	8005646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005630:	2200      	movs	r2, #0
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	f000 fd2f 	bl	800609a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800563c:	4a06      	ldr	r2, [pc, #24]	@ (8005658 <HAL_InitTick+0x5c>)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	20000084 	.word	0x20000084
 8005654:	2000008c 	.word	0x2000008c
 8005658:	20000088 	.word	0x20000088

0800565c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005660:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_IncTick+0x20>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <HAL_IncTick+0x24>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4413      	add	r3, r2
 800566c:	4a04      	ldr	r2, [pc, #16]	@ (8005680 <HAL_IncTick+0x24>)
 800566e:	6013      	str	r3, [r2, #0]
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	2000008c 	.word	0x2000008c
 8005680:	20000a3c 	.word	0x20000a3c

08005684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return uwTick;
 8005688:	4b03      	ldr	r3, [pc, #12]	@ (8005698 <HAL_GetTick+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000a3c 	.word	0x20000a3c

0800569c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056a4:	f7ff ffee 	bl	8005684 <HAL_GetTick>
 80056a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d005      	beq.n	80056c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056b6:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <HAL_Delay+0x44>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056c2:	bf00      	nop
 80056c4:	f7ff ffde 	bl	8005684 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d8f7      	bhi.n	80056c4 <HAL_Delay+0x28>
  {
  }
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	2000008c 	.word	0x2000008c

080056e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e033      	b.n	8005762 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fe ffce 	bl	80046a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d118      	bne.n	8005754 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800572a:	f023 0302 	bic.w	r3, r3, #2
 800572e:	f043 0202 	orr.w	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fad8 	bl	8005cec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	f043 0201 	orr.w	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	641a      	str	r2, [r3, #64]	@ 0x40
 8005752:	e001      	b.n	8005758 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_ADC_Start+0x1a>
 8005782:	2302      	movs	r3, #2
 8005784:	e0b2      	b.n	80058ec <HAL_ADC_Start+0x180>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d018      	beq.n	80057ce <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057ac:	4b52      	ldr	r3, [pc, #328]	@ (80058f8 <HAL_ADC_Start+0x18c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a52      	ldr	r2, [pc, #328]	@ (80058fc <HAL_ADC_Start+0x190>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	0c9a      	lsrs	r2, r3, #18
 80057b8:	4613      	mov	r3, r2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	4413      	add	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80057c0:	e002      	b.n	80057c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f9      	bne.n	80057c2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d17a      	bne.n	80058d2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005806:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800581a:	d106      	bne.n	800582a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	f023 0206 	bic.w	r2, r3, #6
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	645a      	str	r2, [r3, #68]	@ 0x44
 8005828:	e002      	b.n	8005830 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005838:	4b31      	ldr	r3, [pc, #196]	@ (8005900 <HAL_ADC_Start+0x194>)
 800583a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005844:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2b00      	cmp	r3, #0
 8005850:	d12a      	bne.n	80058a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2b      	ldr	r2, [pc, #172]	@ (8005904 <HAL_ADC_Start+0x198>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d015      	beq.n	8005888 <HAL_ADC_Start+0x11c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a29      	ldr	r2, [pc, #164]	@ (8005908 <HAL_ADC_Start+0x19c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d105      	bne.n	8005872 <HAL_ADC_Start+0x106>
 8005866:	4b26      	ldr	r3, [pc, #152]	@ (8005900 <HAL_ADC_Start+0x194>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a25      	ldr	r2, [pc, #148]	@ (800590c <HAL_ADC_Start+0x1a0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d136      	bne.n	80058ea <HAL_ADC_Start+0x17e>
 800587c:	4b20      	ldr	r3, [pc, #128]	@ (8005900 <HAL_ADC_Start+0x194>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b00      	cmp	r3, #0
 8005886:	d130      	bne.n	80058ea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d129      	bne.n	80058ea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	e020      	b.n	80058ea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a15      	ldr	r2, [pc, #84]	@ (8005904 <HAL_ADC_Start+0x198>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d11b      	bne.n	80058ea <HAL_ADC_Start+0x17e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d114      	bne.n	80058ea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80058ce:	609a      	str	r2, [r3, #8]
 80058d0:	e00b      	b.n	80058ea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	f043 0210 	orr.w	r2, r3, #16
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	f043 0201 	orr.w	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20000084 	.word	0x20000084
 80058fc:	431bde83 	.word	0x431bde83
 8005900:	40012300 	.word	0x40012300
 8005904:	40012000 	.word	0x40012000
 8005908:	40012100 	.word	0x40012100
 800590c:	40012200 	.word	0x40012200

08005910 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_ADC_Stop+0x16>
 8005922:	2302      	movs	r3, #2
 8005924:	e021      	b.n	800596a <HAL_ADC_Stop+0x5a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	f043 0201 	orr.w	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005992:	d113      	bne.n	80059bc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800599e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a2:	d10b      	bne.n	80059bc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e063      	b.n	8005a84 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80059bc:	f7ff fe62 	bl	8005684 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80059c2:	e021      	b.n	8005a08 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d01d      	beq.n	8005a08 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <HAL_ADC_PollForConversion+0x6c>
 80059d2:	f7ff fe57 	bl	8005684 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d212      	bcs.n	8005a08 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d00b      	beq.n	8005a08 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	f043 0204 	orr.w	r2, r3, #4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e03d      	b.n	8005a84 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d1d6      	bne.n	80059c4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f06f 0212 	mvn.w	r2, #18
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d123      	bne.n	8005a82 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11f      	bne.n	8005a82 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a48:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d006      	beq.n	8005a5e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d111      	bne.n	8005a82 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d105      	bne.n	8005a82 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7a:	f043 0201 	orr.w	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_ADC_ConfigChannel+0x1c>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e105      	b.n	8005cd0 <HAL_ADC_ConfigChannel+0x228>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b09      	cmp	r3, #9
 8005ad2:	d925      	bls.n	8005b20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68d9      	ldr	r1, [r3, #12]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3b1e      	subs	r3, #30
 8005aea:	2207      	movs	r2, #7
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	43da      	mvns	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	400a      	ands	r2, r1
 8005af8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68d9      	ldr	r1, [r3, #12]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	4403      	add	r3, r0
 8005b12:	3b1e      	subs	r3, #30
 8005b14:	409a      	lsls	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	60da      	str	r2, [r3, #12]
 8005b1e:	e022      	b.n	8005b66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6919      	ldr	r1, [r3, #16]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4613      	mov	r3, r2
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	4413      	add	r3, r2
 8005b34:	2207      	movs	r2, #7
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	400a      	ands	r2, r1
 8005b42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6919      	ldr	r1, [r3, #16]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4618      	mov	r0, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	4403      	add	r3, r0
 8005b5c:	409a      	lsls	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b06      	cmp	r3, #6
 8005b6c:	d824      	bhi.n	8005bb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3b05      	subs	r3, #5
 8005b80:	221f      	movs	r2, #31
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43da      	mvns	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3b05      	subs	r3, #5
 8005baa:	fa00 f203 	lsl.w	r2, r0, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005bb6:	e04c      	b.n	8005c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	d824      	bhi.n	8005c0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	3b23      	subs	r3, #35	@ 0x23
 8005bd2:	221f      	movs	r2, #31
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	43da      	mvns	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	400a      	ands	r2, r1
 8005be0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	4618      	mov	r0, r3
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3b23      	subs	r3, #35	@ 0x23
 8005bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c08:	e023      	b.n	8005c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	3b41      	subs	r3, #65	@ 0x41
 8005c1c:	221f      	movs	r2, #31
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43da      	mvns	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	400a      	ands	r2, r1
 8005c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4618      	mov	r0, r3
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	3b41      	subs	r3, #65	@ 0x41
 8005c46:	fa00 f203 	lsl.w	r2, r0, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c52:	4b22      	ldr	r3, [pc, #136]	@ (8005cdc <HAL_ADC_ConfigChannel+0x234>)
 8005c54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a21      	ldr	r2, [pc, #132]	@ (8005ce0 <HAL_ADC_ConfigChannel+0x238>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d109      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x1cc>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b12      	cmp	r3, #18
 8005c66:	d105      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a19      	ldr	r2, [pc, #100]	@ (8005ce0 <HAL_ADC_ConfigChannel+0x238>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d123      	bne.n	8005cc6 <HAL_ADC_ConfigChannel+0x21e>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d003      	beq.n	8005c8e <HAL_ADC_ConfigChannel+0x1e6>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b11      	cmp	r3, #17
 8005c8c:	d11b      	bne.n	8005cc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d111      	bne.n	8005cc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <HAL_ADC_ConfigChannel+0x23c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a10      	ldr	r2, [pc, #64]	@ (8005ce8 <HAL_ADC_ConfigChannel+0x240>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	0c9a      	lsrs	r2, r3, #18
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005cb8:	e002      	b.n	8005cc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f9      	bne.n	8005cba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40012300 	.word	0x40012300
 8005ce0:	40012000 	.word	0x40012000
 8005ce4:	20000084 	.word	0x20000084
 8005ce8:	431bde83 	.word	0x431bde83

08005cec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cf4:	4b79      	ldr	r3, [pc, #484]	@ (8005edc <ADC_Init+0x1f0>)
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6859      	ldr	r1, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	021a      	lsls	r2, r3, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6859      	ldr	r1, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6899      	ldr	r1, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	4a58      	ldr	r2, [pc, #352]	@ (8005ee0 <ADC_Init+0x1f4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6899      	ldr	r1, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6899      	ldr	r1, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]
 8005dc8:	e00f      	b.n	8005dea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005de8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0202 	bic.w	r2, r2, #2
 8005df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6899      	ldr	r1, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7e1b      	ldrb	r3, [r3, #24]
 8005e04:	005a      	lsls	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01b      	beq.n	8005e50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	3b01      	subs	r3, #1
 8005e44:	035a      	lsls	r2, r3, #13
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	e007      	b.n	8005e60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	051a      	lsls	r2, r3, #20
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6899      	ldr	r1, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ea2:	025a      	lsls	r2, r3, #9
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6899      	ldr	r1, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	029a      	lsls	r2, r3, #10
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40012300 	.word	0x40012300
 8005ee0:	0f000001 	.word	0x0f000001

08005ee4 <__NVIC_SetPriorityGrouping>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <__NVIC_SetPriorityGrouping+0x44>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f00:	4013      	ands	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f16:	4a04      	ldr	r2, [pc, #16]	@ (8005f28 <__NVIC_SetPriorityGrouping+0x44>)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	60d3      	str	r3, [r2, #12]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	e000ed00 	.word	0xe000ed00

08005f2c <__NVIC_GetPriorityGrouping>:
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f30:	4b04      	ldr	r3, [pc, #16]	@ (8005f44 <__NVIC_GetPriorityGrouping+0x18>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	0a1b      	lsrs	r3, r3, #8
 8005f36:	f003 0307 	and.w	r3, r3, #7
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <__NVIC_EnableIRQ>:
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	db0b      	blt.n	8005f72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	f003 021f 	and.w	r2, r3, #31
 8005f60:	4907      	ldr	r1, [pc, #28]	@ (8005f80 <__NVIC_EnableIRQ+0x38>)
 8005f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2001      	movs	r0, #1
 8005f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	e000e100 	.word	0xe000e100

08005f84 <__NVIC_SetPriority>:
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	db0a      	blt.n	8005fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	490c      	ldr	r1, [pc, #48]	@ (8005fd0 <__NVIC_SetPriority+0x4c>)
 8005f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa2:	0112      	lsls	r2, r2, #4
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005fac:	e00a      	b.n	8005fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4908      	ldr	r1, [pc, #32]	@ (8005fd4 <__NVIC_SetPriority+0x50>)
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	0112      	lsls	r2, r2, #4
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	761a      	strb	r2, [r3, #24]
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	e000e100 	.word	0xe000e100
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <NVIC_EncodePriority>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	@ 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f1c3 0307 	rsb	r3, r3, #7
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	bf28      	it	cs
 8005ff6:	2304      	movcs	r3, #4
 8005ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d902      	bls.n	8006008 <NVIC_EncodePriority+0x30>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	3b03      	subs	r3, #3
 8006006:	e000      	b.n	800600a <NVIC_EncodePriority+0x32>
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800600c:	f04f 32ff 	mov.w	r2, #4294967295
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43da      	mvns	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	401a      	ands	r2, r3
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006020:	f04f 31ff 	mov.w	r1, #4294967295
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	fa01 f303 	lsl.w	r3, r1, r3
 800602a:	43d9      	mvns	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006030:	4313      	orrs	r3, r2
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	@ 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3b01      	subs	r3, #1
 800604c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006050:	d301      	bcc.n	8006056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006052:	2301      	movs	r3, #1
 8006054:	e00f      	b.n	8006076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006056:	4a0a      	ldr	r2, [pc, #40]	@ (8006080 <SysTick_Config+0x40>)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3b01      	subs	r3, #1
 800605c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800605e:	210f      	movs	r1, #15
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	f7ff ff8e 	bl	8005f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006068:	4b05      	ldr	r3, [pc, #20]	@ (8006080 <SysTick_Config+0x40>)
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800606e:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <SysTick_Config+0x40>)
 8006070:	2207      	movs	r2, #7
 8006072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	e000e010 	.word	0xe000e010

08006084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff ff29 	bl	8005ee4 <__NVIC_SetPriorityGrouping>
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800609a:	b580      	push	{r7, lr}
 800609c:	b086      	sub	sp, #24
 800609e:	af00      	add	r7, sp, #0
 80060a0:	4603      	mov	r3, r0
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]
 80060a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060ac:	f7ff ff3e 	bl	8005f2c <__NVIC_GetPriorityGrouping>
 80060b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	f7ff ff8e 	bl	8005fd8 <NVIC_EncodePriority>
 80060bc:	4602      	mov	r2, r0
 80060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff ff5d 	bl	8005f84 <__NVIC_SetPriority>
}
 80060ca:	bf00      	nop
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	4603      	mov	r3, r0
 80060da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff ff31 	bl	8005f48 <__NVIC_EnableIRQ>
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff ffa2 	bl	8006040 <SysTick_Config>
 80060fc:	4603      	mov	r3, r0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006114:	f7ff fab6 	bl	8005684 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e099      	b.n	8006258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006144:	e00f      	b.n	8006166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006146:	f7ff fa9d 	bl	8005684 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b05      	cmp	r3, #5
 8006152:	d908      	bls.n	8006166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2203      	movs	r2, #3
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e078      	b.n	8006258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e8      	bne.n	8006146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4b38      	ldr	r3, [pc, #224]	@ (8006260 <HAL_DMA_Init+0x158>)
 8006180:	4013      	ands	r3, r2
 8006182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800619e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d107      	bne.n	80061d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c8:	4313      	orrs	r3, r2
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d117      	bne.n	800622a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fb01 	bl	8006814 <DMA_CheckFifoParam>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2240      	movs	r2, #64	@ 0x40
 800621c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006226:	2301      	movs	r3, #1
 8006228:	e016      	b.n	8006258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fab8 	bl	80067a8 <DMA_CalcBaseAndBitshift>
 8006238:	4603      	mov	r3, r0
 800623a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006240:	223f      	movs	r2, #63	@ 0x3f
 8006242:	409a      	lsls	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	f010803f 	.word	0xf010803f

08006264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800627a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_DMA_Start_IT+0x26>
 8006286:	2302      	movs	r3, #2
 8006288:	e040      	b.n	800630c <HAL_DMA_Start_IT+0xa8>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d12f      	bne.n	80062fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fa4a 	bl	800674c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062bc:	223f      	movs	r2, #63	@ 0x3f
 80062be:	409a      	lsls	r2, r3
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0216 	orr.w	r2, r2, #22
 80062d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0208 	orr.w	r2, r2, #8
 80062ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e005      	b.n	800630a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006306:	2302      	movs	r3, #2
 8006308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006320:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006322:	f7ff f9af 	bl	8005684 <HAL_GetTick>
 8006326:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d008      	beq.n	8006346 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2280      	movs	r2, #128	@ 0x80
 8006338:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e052      	b.n	80063ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0216 	bic.w	r2, r2, #22
 8006354:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695a      	ldr	r2, [r3, #20]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006364:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_DMA_Abort+0x62>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0208 	bic.w	r2, r2, #8
 8006384:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006396:	e013      	b.n	80063c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006398:	f7ff f974 	bl	8005684 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d90c      	bls.n	80063c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2203      	movs	r2, #3
 80063b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e015      	b.n	80063ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e4      	bne.n	8006398 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d2:	223f      	movs	r2, #63	@ 0x3f
 80063d4:	409a      	lsls	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d004      	beq.n	8006412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2280      	movs	r2, #128	@ 0x80
 800640c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e00c      	b.n	800642c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2205      	movs	r2, #5
 8006416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006444:	4b8e      	ldr	r3, [pc, #568]	@ (8006680 <HAL_DMA_IRQHandler+0x248>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a8e      	ldr	r2, [pc, #568]	@ (8006684 <HAL_DMA_IRQHandler+0x24c>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	0a9b      	lsrs	r3, r3, #10
 8006450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006462:	2208      	movs	r2, #8
 8006464:	409a      	lsls	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01a      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d013      	beq.n	80064a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0204 	bic.w	r2, r2, #4
 800648a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006490:	2208      	movs	r2, #8
 8006492:	409a      	lsls	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649c:	f043 0201 	orr.w	r2, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a8:	2201      	movs	r2, #1
 80064aa:	409a      	lsls	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4013      	ands	r3, r2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d012      	beq.n	80064da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c6:	2201      	movs	r2, #1
 80064c8:	409a      	lsls	r2, r3
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d2:	f043 0202 	orr.w	r2, r3, #2
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064de:	2204      	movs	r2, #4
 80064e0:	409a      	lsls	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d012      	beq.n	8006510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064fc:	2204      	movs	r2, #4
 80064fe:	409a      	lsls	r2, r3
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006508:	f043 0204 	orr.w	r2, r3, #4
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006514:	2210      	movs	r2, #16
 8006516:	409a      	lsls	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d043      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d03c      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006532:	2210      	movs	r2, #16
 8006534:	409a      	lsls	r2, r3
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d018      	beq.n	800657a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d108      	bne.n	8006568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d024      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
 8006566:	e01f      	b.n	80065a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01b      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
 8006578:	e016      	b.n	80065a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d107      	bne.n	8006598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0208 	bic.w	r2, r2, #8
 8006596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ac:	2220      	movs	r2, #32
 80065ae:	409a      	lsls	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 808f 	beq.w	80066d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8087 	beq.w	80066d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ce:	2220      	movs	r2, #32
 80065d0:	409a      	lsls	r2, r3
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b05      	cmp	r3, #5
 80065e0:	d136      	bne.n	8006650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0216 	bic.w	r2, r2, #22
 80065f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695a      	ldr	r2, [r3, #20]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <HAL_DMA_IRQHandler+0x1da>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0208 	bic.w	r2, r2, #8
 8006620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006626:	223f      	movs	r2, #63	@ 0x3f
 8006628:	409a      	lsls	r2, r3
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006642:	2b00      	cmp	r3, #0
 8006644:	d07e      	beq.n	8006744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
        }
        return;
 800664e:	e079      	b.n	8006744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01d      	beq.n	800669a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10d      	bne.n	8006688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006670:	2b00      	cmp	r3, #0
 8006672:	d031      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
 800667c:	e02c      	b.n	80066d8 <HAL_DMA_IRQHandler+0x2a0>
 800667e:	bf00      	nop
 8006680:	20000084 	.word	0x20000084
 8006684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d023      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
 8006698:	e01e      	b.n	80066d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10f      	bne.n	80066c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0210 	bic.w	r2, r2, #16
 80066b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d032      	beq.n	8006746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d022      	beq.n	8006732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2205      	movs	r2, #5
 80066f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0201 	bic.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3301      	adds	r3, #1
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	429a      	cmp	r2, r3
 800670e:	d307      	bcc.n	8006720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f2      	bne.n	8006704 <HAL_DMA_IRQHandler+0x2cc>
 800671e:	e000      	b.n	8006722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	e000      	b.n	8006746 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006744:	bf00      	nop
    }
  }
}
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d108      	bne.n	800678c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800678a:	e007      	b.n	800679c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]
}
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	3b10      	subs	r3, #16
 80067b8:	4a14      	ldr	r2, [pc, #80]	@ (800680c <DMA_CalcBaseAndBitshift+0x64>)
 80067ba:	fba2 2303 	umull	r2, r3, r2, r3
 80067be:	091b      	lsrs	r3, r3, #4
 80067c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067c2:	4a13      	ldr	r2, [pc, #76]	@ (8006810 <DMA_CalcBaseAndBitshift+0x68>)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d909      	bls.n	80067ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	1d1a      	adds	r2, r3, #4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80067e8:	e007      	b.n	80067fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	aaaaaaab 	.word	0xaaaaaaab
 8006810:	0800fc3c 	.word	0x0800fc3c

08006814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d11f      	bne.n	800686e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d856      	bhi.n	80068e2 <DMA_CheckFifoParam+0xce>
 8006834:	a201      	add	r2, pc, #4	@ (adr r2, 800683c <DMA_CheckFifoParam+0x28>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	0800684d 	.word	0x0800684d
 8006840:	0800685f 	.word	0x0800685f
 8006844:	0800684d 	.word	0x0800684d
 8006848:	080068e3 	.word	0x080068e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d046      	beq.n	80068e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800685c:	e043      	b.n	80068e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006866:	d140      	bne.n	80068ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800686c:	e03d      	b.n	80068ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006876:	d121      	bne.n	80068bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d837      	bhi.n	80068ee <DMA_CheckFifoParam+0xda>
 800687e:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <DMA_CheckFifoParam+0x70>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	08006895 	.word	0x08006895
 8006888:	0800689b 	.word	0x0800689b
 800688c:	08006895 	.word	0x08006895
 8006890:	080068ad 	.word	0x080068ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
      break;
 8006898:	e030      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d025      	beq.n	80068f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068aa:	e022      	b.n	80068f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068b4:	d11f      	bne.n	80068f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068ba:	e01c      	b.n	80068f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d903      	bls.n	80068ca <DMA_CheckFifoParam+0xb6>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d003      	beq.n	80068d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068c8:	e018      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	73fb      	strb	r3, [r7, #15]
      break;
 80068ce:	e015      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00e      	beq.n	80068fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
      break;
 80068e0:	e00b      	b.n	80068fa <DMA_CheckFifoParam+0xe6>
      break;
 80068e2:	bf00      	nop
 80068e4:	e00a      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068e6:	bf00      	nop
 80068e8:	e008      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068ea:	bf00      	nop
 80068ec:	e006      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068ee:	bf00      	nop
 80068f0:	e004      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068f2:	bf00      	nop
 80068f4:	e002      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;   
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <DMA_CheckFifoParam+0xe8>
      break;
 80068fa:	bf00      	nop
    }
  } 
  
  return status; 
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop

0800690c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800690c:	b480      	push	{r7}
 800690e:	b089      	sub	sp, #36	@ 0x24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800691e:	2300      	movs	r3, #0
 8006920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	e16b      	b.n	8006c00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006928:	2201      	movs	r2, #1
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4013      	ands	r3, r2
 800693a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	429a      	cmp	r2, r3
 8006942:	f040 815a 	bne.w	8006bfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d005      	beq.n	800695e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800695a:	2b02      	cmp	r3, #2
 800695c:	d130      	bne.n	80069c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	2203      	movs	r2, #3
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	43db      	mvns	r3, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	4013      	ands	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	4313      	orrs	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006994:	2201      	movs	r2, #1
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	43db      	mvns	r3, r3
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	4013      	ands	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	f003 0201 	and.w	r2, r3, #1
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d017      	beq.n	80069fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	2203      	movs	r2, #3
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	4013      	ands	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d123      	bne.n	8006a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	08da      	lsrs	r2, r3, #3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3208      	adds	r2, #8
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	220f      	movs	r2, #15
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	43db      	mvns	r3, r3
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	08da      	lsrs	r2, r3, #3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3208      	adds	r2, #8
 8006a4a:	69b9      	ldr	r1, [r7, #24]
 8006a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	43db      	mvns	r3, r3
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 0203 	and.w	r2, r3, #3
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80b4 	beq.w	8006bfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	4b60      	ldr	r3, [pc, #384]	@ (8006c18 <HAL_GPIO_Init+0x30c>)
 8006a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9a:	4a5f      	ldr	r2, [pc, #380]	@ (8006c18 <HAL_GPIO_Init+0x30c>)
 8006a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8006c18 <HAL_GPIO_Init+0x30c>)
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006aae:	4a5b      	ldr	r2, [pc, #364]	@ (8006c1c <HAL_GPIO_Init+0x310>)
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	089b      	lsrs	r3, r3, #2
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	220f      	movs	r2, #15
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	43db      	mvns	r3, r3
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a52      	ldr	r2, [pc, #328]	@ (8006c20 <HAL_GPIO_Init+0x314>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d02b      	beq.n	8006b32 <HAL_GPIO_Init+0x226>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a51      	ldr	r2, [pc, #324]	@ (8006c24 <HAL_GPIO_Init+0x318>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d025      	beq.n	8006b2e <HAL_GPIO_Init+0x222>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a50      	ldr	r2, [pc, #320]	@ (8006c28 <HAL_GPIO_Init+0x31c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d01f      	beq.n	8006b2a <HAL_GPIO_Init+0x21e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a4f      	ldr	r2, [pc, #316]	@ (8006c2c <HAL_GPIO_Init+0x320>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d019      	beq.n	8006b26 <HAL_GPIO_Init+0x21a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a4e      	ldr	r2, [pc, #312]	@ (8006c30 <HAL_GPIO_Init+0x324>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <HAL_GPIO_Init+0x216>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a4d      	ldr	r2, [pc, #308]	@ (8006c34 <HAL_GPIO_Init+0x328>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00d      	beq.n	8006b1e <HAL_GPIO_Init+0x212>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a4c      	ldr	r2, [pc, #304]	@ (8006c38 <HAL_GPIO_Init+0x32c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d007      	beq.n	8006b1a <HAL_GPIO_Init+0x20e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8006c3c <HAL_GPIO_Init+0x330>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d101      	bne.n	8006b16 <HAL_GPIO_Init+0x20a>
 8006b12:	2307      	movs	r3, #7
 8006b14:	e00e      	b.n	8006b34 <HAL_GPIO_Init+0x228>
 8006b16:	2308      	movs	r3, #8
 8006b18:	e00c      	b.n	8006b34 <HAL_GPIO_Init+0x228>
 8006b1a:	2306      	movs	r3, #6
 8006b1c:	e00a      	b.n	8006b34 <HAL_GPIO_Init+0x228>
 8006b1e:	2305      	movs	r3, #5
 8006b20:	e008      	b.n	8006b34 <HAL_GPIO_Init+0x228>
 8006b22:	2304      	movs	r3, #4
 8006b24:	e006      	b.n	8006b34 <HAL_GPIO_Init+0x228>
 8006b26:	2303      	movs	r3, #3
 8006b28:	e004      	b.n	8006b34 <HAL_GPIO_Init+0x228>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e002      	b.n	8006b34 <HAL_GPIO_Init+0x228>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <HAL_GPIO_Init+0x228>
 8006b32:	2300      	movs	r3, #0
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	f002 0203 	and.w	r2, r2, #3
 8006b3a:	0092      	lsls	r2, r2, #2
 8006b3c:	4093      	lsls	r3, r2
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b44:	4935      	ldr	r1, [pc, #212]	@ (8006c1c <HAL_GPIO_Init+0x310>)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	089b      	lsrs	r3, r3, #2
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b52:	4b3b      	ldr	r3, [pc, #236]	@ (8006c40 <HAL_GPIO_Init+0x334>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b76:	4a32      	ldr	r2, [pc, #200]	@ (8006c40 <HAL_GPIO_Init+0x334>)
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b7c:	4b30      	ldr	r3, [pc, #192]	@ (8006c40 <HAL_GPIO_Init+0x334>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	43db      	mvns	r3, r3
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ba0:	4a27      	ldr	r2, [pc, #156]	@ (8006c40 <HAL_GPIO_Init+0x334>)
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006ba6:	4b26      	ldr	r3, [pc, #152]	@ (8006c40 <HAL_GPIO_Init+0x334>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bca:	4a1d      	ldr	r2, [pc, #116]	@ (8006c40 <HAL_GPIO_Init+0x334>)
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c40 <HAL_GPIO_Init+0x334>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bf4:	4a12      	ldr	r2, [pc, #72]	@ (8006c40 <HAL_GPIO_Init+0x334>)
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2b0f      	cmp	r3, #15
 8006c04:	f67f ae90 	bls.w	8006928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	3724      	adds	r7, #36	@ 0x24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	40013800 	.word	0x40013800
 8006c20:	40020000 	.word	0x40020000
 8006c24:	40020400 	.word	0x40020400
 8006c28:	40020800 	.word	0x40020800
 8006c2c:	40020c00 	.word	0x40020c00
 8006c30:	40021000 	.word	0x40021000
 8006c34:	40021400 	.word	0x40021400
 8006c38:	40021800 	.word	0x40021800
 8006c3c:	40021c00 	.word	0x40021c00
 8006c40:	40013c00 	.word	0x40013c00

08006c44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e0cd      	b.n	8006dfc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c60:	2201      	movs	r2, #1
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	f040 80bd 	bne.w	8006df6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006c7c:	4a65      	ldr	r2, [pc, #404]	@ (8006e14 <HAL_GPIO_DeInit+0x1d0>)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	089b      	lsrs	r3, r3, #2
 8006c82:	3302      	adds	r3, #2
 8006c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c88:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	220f      	movs	r2, #15
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8006e18 <HAL_GPIO_DeInit+0x1d4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d02b      	beq.n	8006cfe <HAL_GPIO_DeInit+0xba>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a5c      	ldr	r2, [pc, #368]	@ (8006e1c <HAL_GPIO_DeInit+0x1d8>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d025      	beq.n	8006cfa <HAL_GPIO_DeInit+0xb6>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a5b      	ldr	r2, [pc, #364]	@ (8006e20 <HAL_GPIO_DeInit+0x1dc>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01f      	beq.n	8006cf6 <HAL_GPIO_DeInit+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8006e24 <HAL_GPIO_DeInit+0x1e0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d019      	beq.n	8006cf2 <HAL_GPIO_DeInit+0xae>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a59      	ldr	r2, [pc, #356]	@ (8006e28 <HAL_GPIO_DeInit+0x1e4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_GPIO_DeInit+0xaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a58      	ldr	r2, [pc, #352]	@ (8006e2c <HAL_GPIO_DeInit+0x1e8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00d      	beq.n	8006cea <HAL_GPIO_DeInit+0xa6>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a57      	ldr	r2, [pc, #348]	@ (8006e30 <HAL_GPIO_DeInit+0x1ec>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d007      	beq.n	8006ce6 <HAL_GPIO_DeInit+0xa2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a56      	ldr	r2, [pc, #344]	@ (8006e34 <HAL_GPIO_DeInit+0x1f0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d101      	bne.n	8006ce2 <HAL_GPIO_DeInit+0x9e>
 8006cde:	2307      	movs	r3, #7
 8006ce0:	e00e      	b.n	8006d00 <HAL_GPIO_DeInit+0xbc>
 8006ce2:	2308      	movs	r3, #8
 8006ce4:	e00c      	b.n	8006d00 <HAL_GPIO_DeInit+0xbc>
 8006ce6:	2306      	movs	r3, #6
 8006ce8:	e00a      	b.n	8006d00 <HAL_GPIO_DeInit+0xbc>
 8006cea:	2305      	movs	r3, #5
 8006cec:	e008      	b.n	8006d00 <HAL_GPIO_DeInit+0xbc>
 8006cee:	2304      	movs	r3, #4
 8006cf0:	e006      	b.n	8006d00 <HAL_GPIO_DeInit+0xbc>
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e004      	b.n	8006d00 <HAL_GPIO_DeInit+0xbc>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e002      	b.n	8006d00 <HAL_GPIO_DeInit+0xbc>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <HAL_GPIO_DeInit+0xbc>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	f002 0203 	and.w	r2, r2, #3
 8006d06:	0092      	lsls	r2, r2, #2
 8006d08:	4093      	lsls	r3, r2
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d132      	bne.n	8006d76 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d10:	4b49      	ldr	r3, [pc, #292]	@ (8006e38 <HAL_GPIO_DeInit+0x1f4>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	43db      	mvns	r3, r3
 8006d18:	4947      	ldr	r1, [pc, #284]	@ (8006e38 <HAL_GPIO_DeInit+0x1f4>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d1e:	4b46      	ldr	r3, [pc, #280]	@ (8006e38 <HAL_GPIO_DeInit+0x1f4>)
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	4944      	ldr	r1, [pc, #272]	@ (8006e38 <HAL_GPIO_DeInit+0x1f4>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006d2c:	4b42      	ldr	r3, [pc, #264]	@ (8006e38 <HAL_GPIO_DeInit+0x1f4>)
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	43db      	mvns	r3, r3
 8006d34:	4940      	ldr	r1, [pc, #256]	@ (8006e38 <HAL_GPIO_DeInit+0x1f4>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e38 <HAL_GPIO_DeInit+0x1f4>)
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	493d      	ldr	r1, [pc, #244]	@ (8006e38 <HAL_GPIO_DeInit+0x1f4>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	220f      	movs	r2, #15
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006d58:	4a2e      	ldr	r2, [pc, #184]	@ (8006e14 <HAL_GPIO_DeInit+0x1d0>)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	089b      	lsrs	r3, r3, #2
 8006d5e:	3302      	adds	r3, #2
 8006d60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	43da      	mvns	r2, r3
 8006d68:	482a      	ldr	r0, [pc, #168]	@ (8006e14 <HAL_GPIO_DeInit+0x1d0>)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	089b      	lsrs	r3, r3, #2
 8006d6e:	400a      	ands	r2, r1
 8006d70:	3302      	adds	r3, #2
 8006d72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	2103      	movs	r1, #3
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	43db      	mvns	r3, r3
 8006d86:	401a      	ands	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	08da      	lsrs	r2, r3, #3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3208      	adds	r2, #8
 8006d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	220f      	movs	r2, #15
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43db      	mvns	r3, r3
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	08d2      	lsrs	r2, r2, #3
 8006dac:	4019      	ands	r1, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3208      	adds	r2, #8
 8006db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	2103      	movs	r1, #3
 8006dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	401a      	ands	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd8:	43db      	mvns	r3, r3
 8006dda:	401a      	ands	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	2103      	movs	r1, #3
 8006dea:	fa01 f303 	lsl.w	r3, r1, r3
 8006dee:	43db      	mvns	r3, r3
 8006df0:	401a      	ands	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b0f      	cmp	r3, #15
 8006e00:	f67f af2e 	bls.w	8006c60 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40013800 	.word	0x40013800
 8006e18:	40020000 	.word	0x40020000
 8006e1c:	40020400 	.word	0x40020400
 8006e20:	40020800 	.word	0x40020800
 8006e24:	40020c00 	.word	0x40020c00
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	40021400 	.word	0x40021400
 8006e30:	40021800 	.word	0x40021800
 8006e34:	40021c00 	.word	0x40021c00
 8006e38:	40013c00 	.word	0x40013c00

08006e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	807b      	strh	r3, [r7, #2]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e4c:	787b      	ldrb	r3, [r7, #1]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e52:	887a      	ldrh	r2, [r7, #2]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e58:	e003      	b.n	8006e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e5a:	887b      	ldrh	r3, [r7, #2]
 8006e5c:	041a      	lsls	r2, r3, #16
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	619a      	str	r2, [r3, #24]
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e12b      	b.n	80070da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fd fc64 	bl	8004764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2224      	movs	r2, #36	@ 0x24
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0201 	bic.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ed4:	f001 fc80 	bl	80087d8 <HAL_RCC_GetPCLK1Freq>
 8006ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	4a81      	ldr	r2, [pc, #516]	@ (80070e4 <HAL_I2C_Init+0x274>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d807      	bhi.n	8006ef4 <HAL_I2C_Init+0x84>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4a80      	ldr	r2, [pc, #512]	@ (80070e8 <HAL_I2C_Init+0x278>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bf94      	ite	ls
 8006eec:	2301      	movls	r3, #1
 8006eee:	2300      	movhi	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	e006      	b.n	8006f02 <HAL_I2C_Init+0x92>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a7d      	ldr	r2, [pc, #500]	@ (80070ec <HAL_I2C_Init+0x27c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	bf94      	ite	ls
 8006efc:	2301      	movls	r3, #1
 8006efe:	2300      	movhi	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e0e7      	b.n	80070da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a78      	ldr	r2, [pc, #480]	@ (80070f0 <HAL_I2C_Init+0x280>)
 8006f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f12:	0c9b      	lsrs	r3, r3, #18
 8006f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4a6a      	ldr	r2, [pc, #424]	@ (80070e4 <HAL_I2C_Init+0x274>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d802      	bhi.n	8006f44 <HAL_I2C_Init+0xd4>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	3301      	adds	r3, #1
 8006f42:	e009      	b.n	8006f58 <HAL_I2C_Init+0xe8>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	4a69      	ldr	r2, [pc, #420]	@ (80070f4 <HAL_I2C_Init+0x284>)
 8006f50:	fba2 2303 	umull	r2, r3, r2, r3
 8006f54:	099b      	lsrs	r3, r3, #6
 8006f56:	3301      	adds	r3, #1
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006f6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	495c      	ldr	r1, [pc, #368]	@ (80070e4 <HAL_I2C_Init+0x274>)
 8006f74:	428b      	cmp	r3, r1
 8006f76:	d819      	bhi.n	8006fac <HAL_I2C_Init+0x13c>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1e59      	subs	r1, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f86:	1c59      	adds	r1, r3, #1
 8006f88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006f8c:	400b      	ands	r3, r1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <HAL_I2C_Init+0x138>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1e59      	subs	r1, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fa6:	e051      	b.n	800704c <HAL_I2C_Init+0x1dc>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	e04f      	b.n	800704c <HAL_I2C_Init+0x1dc>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d111      	bne.n	8006fd8 <HAL_I2C_Init+0x168>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	1e58      	subs	r0, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6859      	ldr	r1, [r3, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	440b      	add	r3, r1
 8006fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e012      	b.n	8006ffe <HAL_I2C_Init+0x18e>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	1e58      	subs	r0, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6859      	ldr	r1, [r3, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	0099      	lsls	r1, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_I2C_Init+0x196>
 8007002:	2301      	movs	r3, #1
 8007004:	e022      	b.n	800704c <HAL_I2C_Init+0x1dc>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10e      	bne.n	800702c <HAL_I2C_Init+0x1bc>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1e58      	subs	r0, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6859      	ldr	r1, [r3, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	440b      	add	r3, r1
 800701c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007020:	3301      	adds	r3, #1
 8007022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800702a:	e00f      	b.n	800704c <HAL_I2C_Init+0x1dc>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	1e58      	subs	r0, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6859      	ldr	r1, [r3, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	0099      	lsls	r1, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007042:	3301      	adds	r3, #1
 8007044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007048:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	6809      	ldr	r1, [r1, #0]
 8007050:	4313      	orrs	r3, r2
 8007052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69da      	ldr	r2, [r3, #28]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	431a      	orrs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800707a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6911      	ldr	r1, [r2, #16]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68d2      	ldr	r2, [r2, #12]
 8007086:	4311      	orrs	r1, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	430b      	orrs	r3, r1
 800708e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695a      	ldr	r2, [r3, #20]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0201 	orr.w	r2, r2, #1
 80070ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	000186a0 	.word	0x000186a0
 80070e8:	001e847f 	.word	0x001e847f
 80070ec:	003d08ff 	.word	0x003d08ff
 80070f0:	431bde83 	.word	0x431bde83
 80070f4:	10624dd3 	.word	0x10624dd3

080070f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e021      	b.n	800714e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2224      	movs	r2, #36	@ 0x24
 800710e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fd fb66 	bl	80047f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	461a      	mov	r2, r3
 8007164:	460b      	mov	r3, r1
 8007166:	817b      	strh	r3, [r7, #10]
 8007168:	4613      	mov	r3, r2
 800716a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800716c:	f7fe fa8a 	bl	8005684 <HAL_GetTick>
 8007170:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b20      	cmp	r3, #32
 800717c:	f040 80e0 	bne.w	8007340 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	2319      	movs	r3, #25
 8007186:	2201      	movs	r2, #1
 8007188:	4970      	ldr	r1, [pc, #448]	@ (800734c <HAL_I2C_Master_Transmit+0x1f4>)
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fc7e 	bl	8007a8c <I2C_WaitOnFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
 8007198:	e0d3      	b.n	8007342 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_I2C_Master_Transmit+0x50>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e0cc      	b.n	8007342 <HAL_I2C_Master_Transmit+0x1ea>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d007      	beq.n	80071ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0201 	orr.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2221      	movs	r2, #33	@ 0x21
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2210      	movs	r2, #16
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	893a      	ldrh	r2, [r7, #8]
 80071fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a50      	ldr	r2, [pc, #320]	@ (8007350 <HAL_I2C_Master_Transmit+0x1f8>)
 800720e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007210:	8979      	ldrh	r1, [r7, #10]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	6a3a      	ldr	r2, [r7, #32]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 fae8 	bl	80077ec <I2C_MasterRequestWrite>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e08d      	b.n	8007342 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007226:	2300      	movs	r3, #0
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800723c:	e066      	b.n	800730c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	6a39      	ldr	r1, [r7, #32]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fd3c 	bl	8007cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00d      	beq.n	800726a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	2b04      	cmp	r3, #4
 8007254:	d107      	bne.n	8007266 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007264:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e06b      	b.n	8007342 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d11b      	bne.n	80072e0 <HAL_I2C_Master_Transmit+0x188>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d017      	beq.n	80072e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	6a39      	ldr	r1, [r7, #32]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fd33 	bl	8007d50 <I2C_WaitOnBTFFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00d      	beq.n	800730c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d107      	bne.n	8007308 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007306:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e01a      	b.n	8007342 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007310:	2b00      	cmp	r3, #0
 8007312:	d194      	bne.n	800723e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	e000      	b.n	8007342 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007340:	2302      	movs	r3, #2
  }
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	00100002 	.word	0x00100002
 8007350:	ffff0000 	.word	0xffff0000

08007354 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	@ 0x30
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	461a      	mov	r2, r3
 8007360:	460b      	mov	r3, r1
 8007362:	817b      	strh	r3, [r7, #10]
 8007364:	4613      	mov	r3, r2
 8007366:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007368:	f7fe f98c 	bl	8005684 <HAL_GetTick>
 800736c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b20      	cmp	r3, #32
 8007378:	f040 8217 	bne.w	80077aa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	2319      	movs	r3, #25
 8007382:	2201      	movs	r2, #1
 8007384:	497c      	ldr	r1, [pc, #496]	@ (8007578 <HAL_I2C_Master_Receive+0x224>)
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fb80 	bl	8007a8c <I2C_WaitOnFlagUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007392:	2302      	movs	r3, #2
 8007394:	e20a      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_I2C_Master_Receive+0x50>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e203      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d007      	beq.n	80073ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2222      	movs	r2, #34	@ 0x22
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2210      	movs	r2, #16
 80073e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	893a      	ldrh	r2, [r7, #8]
 80073fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a5c      	ldr	r2, [pc, #368]	@ (800757c <HAL_I2C_Master_Receive+0x228>)
 800740a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800740c:	8979      	ldrh	r1, [r7, #10]
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fa6c 	bl	80078f0 <I2C_MasterRequestRead>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e1c4      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007426:	2b00      	cmp	r3, #0
 8007428:	d113      	bne.n	8007452 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742a:	2300      	movs	r3, #0
 800742c:	623b      	str	r3, [r7, #32]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	623b      	str	r3, [r7, #32]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	623b      	str	r3, [r7, #32]
 800743e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	e198      	b.n	8007784 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007456:	2b01      	cmp	r3, #1
 8007458:	d11b      	bne.n	8007492 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007468:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800746a:	2300      	movs	r3, #0
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	e178      	b.n	8007784 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007496:	2b02      	cmp	r3, #2
 8007498:	d11b      	bne.n	80074d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ba:	2300      	movs	r3, #0
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	e158      	b.n	8007784 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80074e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80074f8:	e144      	b.n	8007784 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074fe:	2b03      	cmp	r3, #3
 8007500:	f200 80f1 	bhi.w	80076e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007508:	2b01      	cmp	r3, #1
 800750a:	d123      	bne.n	8007554 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800750c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800750e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fc65 	bl	8007de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e145      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007552:	e117      	b.n	8007784 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007558:	2b02      	cmp	r3, #2
 800755a:	d14e      	bne.n	80075fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	2200      	movs	r2, #0
 8007564:	4906      	ldr	r1, [pc, #24]	@ (8007580 <HAL_I2C_Master_Receive+0x22c>)
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fa90 	bl	8007a8c <I2C_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e11a      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
 8007576:	bf00      	nop
 8007578:	00100002 	.word	0x00100002
 800757c:	ffff0000 	.word	0xffff0000
 8007580:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075f8:	e0c4      	b.n	8007784 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	2200      	movs	r2, #0
 8007602:	496c      	ldr	r1, [pc, #432]	@ (80077b4 <HAL_I2C_Master_Receive+0x460>)
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fa41 	bl	8007a8c <I2C_WaitOnFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e0cb      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691a      	ldr	r2, [r3, #16]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	2200      	movs	r2, #0
 800765e:	4955      	ldr	r1, [pc, #340]	@ (80077b4 <HAL_I2C_Master_Receive+0x460>)
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fa13 	bl	8007a8c <I2C_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e09d      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800767e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076e4:	e04e      	b.n	8007784 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fb78 	bl	8007de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e058      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b04      	cmp	r3, #4
 8007738:	d124      	bne.n	8007784 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800773e:	2b03      	cmp	r3, #3
 8007740:	d107      	bne.n	8007752 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007750:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	f47f aeb6 	bne.w	80074fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e000      	b.n	80077ac <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3728      	adds	r7, #40	@ 0x28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	00010004 	.word	0x00010004

080077b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c6:	b2db      	uxtb	r3, r3
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	460b      	mov	r3, r1
 80077fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d006      	beq.n	8007816 <I2C_MasterRequestWrite+0x2a>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d003      	beq.n	8007816 <I2C_MasterRequestWrite+0x2a>
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007814:	d108      	bne.n	8007828 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e00b      	b.n	8007840 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782c:	2b12      	cmp	r3, #18
 800782e:	d107      	bne.n	8007840 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800783e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 f91d 	bl	8007a8c <I2C_WaitOnFlagUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00d      	beq.n	8007874 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007866:	d103      	bne.n	8007870 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800786e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e035      	b.n	80078e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800787c:	d108      	bne.n	8007890 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800787e:	897b      	ldrh	r3, [r7, #10]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	461a      	mov	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800788c:	611a      	str	r2, [r3, #16]
 800788e:	e01b      	b.n	80078c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007890:	897b      	ldrh	r3, [r7, #10]
 8007892:	11db      	asrs	r3, r3, #7
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f003 0306 	and.w	r3, r3, #6
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f063 030f 	orn	r3, r3, #15
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	490e      	ldr	r1, [pc, #56]	@ (80078e8 <I2C_MasterRequestWrite+0xfc>)
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 f966 	bl	8007b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e010      	b.n	80078e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80078be:	897b      	ldrh	r3, [r7, #10]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4907      	ldr	r1, [pc, #28]	@ (80078ec <I2C_MasterRequestWrite+0x100>)
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 f956 	bl	8007b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e000      	b.n	80078e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	00010008 	.word	0x00010008
 80078ec:	00010002 	.word	0x00010002

080078f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	607a      	str	r2, [r7, #4]
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	460b      	mov	r3, r1
 80078fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007904:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007914:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d006      	beq.n	800792a <I2C_MasterRequestRead+0x3a>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d003      	beq.n	800792a <I2C_MasterRequestRead+0x3a>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007928:	d108      	bne.n	800793c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e00b      	b.n	8007954 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007940:	2b11      	cmp	r3, #17
 8007942:	d107      	bne.n	8007954 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f893 	bl	8007a8c <I2C_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00d      	beq.n	8007988 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800797a:	d103      	bne.n	8007984 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007982:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e079      	b.n	8007a7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007990:	d108      	bne.n	80079a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007992:	897b      	ldrh	r3, [r7, #10]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f043 0301 	orr.w	r3, r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	611a      	str	r2, [r3, #16]
 80079a2:	e05f      	b.n	8007a64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80079a4:	897b      	ldrh	r3, [r7, #10]
 80079a6:	11db      	asrs	r3, r3, #7
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0306 	and.w	r3, r3, #6
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	f063 030f 	orn	r3, r3, #15
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4930      	ldr	r1, [pc, #192]	@ (8007a84 <I2C_MasterRequestRead+0x194>)
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f8dc 	bl	8007b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e054      	b.n	8007a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80079d2:	897b      	ldrh	r3, [r7, #10]
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	4929      	ldr	r1, [pc, #164]	@ (8007a88 <I2C_MasterRequestRead+0x198>)
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f8cc 	bl	8007b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e044      	b.n	8007a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f2:	2300      	movs	r3, #0
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f831 	bl	8007a8c <I2C_WaitOnFlagUntilTimeout>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00d      	beq.n	8007a4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3e:	d103      	bne.n	8007a48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a46:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e017      	b.n	8007a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007a4c:	897b      	ldrh	r3, [r7, #10]
 8007a4e:	11db      	asrs	r3, r3, #7
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f003 0306 	and.w	r3, r3, #6
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	f063 030e 	orn	r3, r3, #14
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4907      	ldr	r1, [pc, #28]	@ (8007a88 <I2C_MasterRequestRead+0x198>)
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f888 	bl	8007b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	00010008 	.word	0x00010008
 8007a88:	00010002 	.word	0x00010002

08007a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a9c:	e048      	b.n	8007b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa4:	d044      	beq.n	8007b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa6:	f7fd fded 	bl	8005684 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d302      	bcc.n	8007abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d139      	bne.n	8007b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	0c1b      	lsrs	r3, r3, #16
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d10d      	bne.n	8007ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	43da      	mvns	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	e00c      	b.n	8007afc <I2C_WaitOnFlagUntilTimeout+0x70>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	43da      	mvns	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	4013      	ands	r3, r2
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bf0c      	ite	eq
 8007af4:	2301      	moveq	r3, #1
 8007af6:	2300      	movne	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d116      	bne.n	8007b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	f043 0220 	orr.w	r2, r3, #32
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e023      	b.n	8007b78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	0c1b      	lsrs	r3, r3, #16
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d10d      	bne.n	8007b56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	43da      	mvns	r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	4013      	ands	r3, r2
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2301      	moveq	r3, #1
 8007b4e:	2300      	movne	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	461a      	mov	r2, r3
 8007b54:	e00c      	b.n	8007b70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	43da      	mvns	r2, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4013      	ands	r3, r2
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d093      	beq.n	8007a9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b8e:	e071      	b.n	8007c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b9e:	d123      	bne.n	8007be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd4:	f043 0204 	orr.w	r2, r3, #4
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e067      	b.n	8007cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d041      	beq.n	8007c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf0:	f7fd fd48 	bl	8005684 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d302      	bcc.n	8007c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d136      	bne.n	8007c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	0c1b      	lsrs	r3, r3, #16
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d10c      	bne.n	8007c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	43da      	mvns	r2, r3
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bf14      	ite	ne
 8007c22:	2301      	movne	r3, #1
 8007c24:	2300      	moveq	r3, #0
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	e00b      	b.n	8007c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	43da      	mvns	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4013      	ands	r3, r2
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf14      	ite	ne
 8007c3c:	2301      	movne	r3, #1
 8007c3e:	2300      	moveq	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d016      	beq.n	8007c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c60:	f043 0220 	orr.w	r2, r3, #32
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e021      	b.n	8007cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	0c1b      	lsrs	r3, r3, #16
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10c      	bne.n	8007c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	43da      	mvns	r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bf14      	ite	ne
 8007c90:	2301      	movne	r3, #1
 8007c92:	2300      	moveq	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	e00b      	b.n	8007cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	43da      	mvns	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf14      	ite	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	2300      	moveq	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f47f af6d 	bne.w	8007b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ccc:	e034      	b.n	8007d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f8e3 	bl	8007e9a <I2C_IsAcknowledgeFailed>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e034      	b.n	8007d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce4:	d028      	beq.n	8007d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce6:	f7fd fccd 	bl	8005684 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d11d      	bne.n	8007d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d06:	2b80      	cmp	r3, #128	@ 0x80
 8007d08:	d016      	beq.n	8007d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	f043 0220 	orr.w	r2, r3, #32
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e007      	b.n	8007d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d42:	2b80      	cmp	r3, #128	@ 0x80
 8007d44:	d1c3      	bne.n	8007cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d5c:	e034      	b.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 f89b 	bl	8007e9a <I2C_IsAcknowledgeFailed>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e034      	b.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d028      	beq.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d76:	f7fd fc85 	bl	8005684 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d11d      	bne.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f003 0304 	and.w	r3, r3, #4
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d016      	beq.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db4:	f043 0220 	orr.w	r2, r3, #32
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e007      	b.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d1c3      	bne.n	8007d5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dec:	e049      	b.n	8007e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d119      	bne.n	8007e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0210 	mvn.w	r2, #16
 8007e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e030      	b.n	8007e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e30:	f7fd fc28 	bl	8005684 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d302      	bcc.n	8007e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d11d      	bne.n	8007e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e50:	2b40      	cmp	r3, #64	@ 0x40
 8007e52:	d016      	beq.n	8007e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6e:	f043 0220 	orr.w	r2, r3, #32
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e007      	b.n	8007e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e8c:	2b40      	cmp	r3, #64	@ 0x40
 8007e8e:	d1ae      	bne.n	8007dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eb0:	d11b      	bne.n	8007eea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007eba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed6:	f043 0204 	orr.w	r2, r3, #4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e267      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d075      	beq.n	8008002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f16:	4b88      	ldr	r3, [pc, #544]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 030c 	and.w	r3, r3, #12
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d00c      	beq.n	8007f3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f22:	4b85      	ldr	r3, [pc, #532]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d112      	bne.n	8007f54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f2e:	4b82      	ldr	r3, [pc, #520]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f3a:	d10b      	bne.n	8007f54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f3c:	4b7e      	ldr	r3, [pc, #504]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d05b      	beq.n	8008000 <HAL_RCC_OscConfig+0x108>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d157      	bne.n	8008000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e242      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f5c:	d106      	bne.n	8007f6c <HAL_RCC_OscConfig+0x74>
 8007f5e:	4b76      	ldr	r3, [pc, #472]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a75      	ldr	r2, [pc, #468]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	e01d      	b.n	8007fa8 <HAL_RCC_OscConfig+0xb0>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCC_OscConfig+0x98>
 8007f76:	4b70      	ldr	r3, [pc, #448]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a6f      	ldr	r2, [pc, #444]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	4b6d      	ldr	r3, [pc, #436]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a6c      	ldr	r2, [pc, #432]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e00b      	b.n	8007fa8 <HAL_RCC_OscConfig+0xb0>
 8007f90:	4b69      	ldr	r3, [pc, #420]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a68      	ldr	r2, [pc, #416]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	4b66      	ldr	r3, [pc, #408]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a65      	ldr	r2, [pc, #404]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d013      	beq.n	8007fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb0:	f7fd fb68 	bl	8005684 <HAL_GetTick>
 8007fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fb8:	f7fd fb64 	bl	8005684 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b64      	cmp	r3, #100	@ 0x64
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e207      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fca:	4b5b      	ldr	r3, [pc, #364]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0f0      	beq.n	8007fb8 <HAL_RCC_OscConfig+0xc0>
 8007fd6:	e014      	b.n	8008002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fd8:	f7fd fb54 	bl	8005684 <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fde:	e008      	b.n	8007ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fe0:	f7fd fb50 	bl	8005684 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b64      	cmp	r3, #100	@ 0x64
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e1f3      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ff2:	4b51      	ldr	r3, [pc, #324]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1f0      	bne.n	8007fe0 <HAL_RCC_OscConfig+0xe8>
 8007ffe:	e000      	b.n	8008002 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d063      	beq.n	80080d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800800e:	4b4a      	ldr	r3, [pc, #296]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 030c 	and.w	r3, r3, #12
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800801a:	4b47      	ldr	r3, [pc, #284]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008022:	2b08      	cmp	r3, #8
 8008024:	d11c      	bne.n	8008060 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008026:	4b44      	ldr	r3, [pc, #272]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d116      	bne.n	8008060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008032:	4b41      	ldr	r3, [pc, #260]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <HAL_RCC_OscConfig+0x152>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d001      	beq.n	800804a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e1c7      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800804a:	4b3b      	ldr	r3, [pc, #236]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4937      	ldr	r1, [pc, #220]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 800805a:	4313      	orrs	r3, r2
 800805c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800805e:	e03a      	b.n	80080d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d020      	beq.n	80080aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008068:	4b34      	ldr	r3, [pc, #208]	@ (800813c <HAL_RCC_OscConfig+0x244>)
 800806a:	2201      	movs	r2, #1
 800806c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806e:	f7fd fb09 	bl	8005684 <HAL_GetTick>
 8008072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008074:	e008      	b.n	8008088 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008076:	f7fd fb05 	bl	8005684 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d901      	bls.n	8008088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e1a8      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008088:	4b2b      	ldr	r3, [pc, #172]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0f0      	beq.n	8008076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008094:	4b28      	ldr	r3, [pc, #160]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	4925      	ldr	r1, [pc, #148]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	600b      	str	r3, [r1, #0]
 80080a8:	e015      	b.n	80080d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080aa:	4b24      	ldr	r3, [pc, #144]	@ (800813c <HAL_RCC_OscConfig+0x244>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fd fae8 	bl	8005684 <HAL_GetTick>
 80080b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080b8:	f7fd fae4 	bl	8005684 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e187      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f0      	bne.n	80080b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d036      	beq.n	8008150 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d016      	beq.n	8008118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ea:	4b15      	ldr	r3, [pc, #84]	@ (8008140 <HAL_RCC_OscConfig+0x248>)
 80080ec:	2201      	movs	r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f0:	f7fd fac8 	bl	8005684 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080f8:	f7fd fac4 	bl	8005684 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e167      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800810a:	4b0b      	ldr	r3, [pc, #44]	@ (8008138 <HAL_RCC_OscConfig+0x240>)
 800810c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCC_OscConfig+0x200>
 8008116:	e01b      	b.n	8008150 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008118:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <HAL_RCC_OscConfig+0x248>)
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800811e:	f7fd fab1 	bl	8005684 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008124:	e00e      	b.n	8008144 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008126:	f7fd faad 	bl	8005684 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d907      	bls.n	8008144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e150      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
 8008138:	40023800 	.word	0x40023800
 800813c:	42470000 	.word	0x42470000
 8008140:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008144:	4b88      	ldr	r3, [pc, #544]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1ea      	bne.n	8008126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 8097 	beq.w	800828c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800815e:	2300      	movs	r3, #0
 8008160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008162:	4b81      	ldr	r3, [pc, #516]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10f      	bne.n	800818e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800816e:	2300      	movs	r3, #0
 8008170:	60bb      	str	r3, [r7, #8]
 8008172:	4b7d      	ldr	r3, [pc, #500]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008176:	4a7c      	ldr	r2, [pc, #496]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800817c:	6413      	str	r3, [r2, #64]	@ 0x40
 800817e:	4b7a      	ldr	r3, [pc, #488]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008186:	60bb      	str	r3, [r7, #8]
 8008188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800818a:	2301      	movs	r3, #1
 800818c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800818e:	4b77      	ldr	r3, [pc, #476]	@ (800836c <HAL_RCC_OscConfig+0x474>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008196:	2b00      	cmp	r3, #0
 8008198:	d118      	bne.n	80081cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800819a:	4b74      	ldr	r3, [pc, #464]	@ (800836c <HAL_RCC_OscConfig+0x474>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a73      	ldr	r2, [pc, #460]	@ (800836c <HAL_RCC_OscConfig+0x474>)
 80081a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081a6:	f7fd fa6d 	bl	8005684 <HAL_GetTick>
 80081aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ac:	e008      	b.n	80081c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ae:	f7fd fa69 	bl	8005684 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e10c      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081c0:	4b6a      	ldr	r3, [pc, #424]	@ (800836c <HAL_RCC_OscConfig+0x474>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0f0      	beq.n	80081ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d106      	bne.n	80081e2 <HAL_RCC_OscConfig+0x2ea>
 80081d4:	4b64      	ldr	r3, [pc, #400]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 80081d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d8:	4a63      	ldr	r2, [pc, #396]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	6713      	str	r3, [r2, #112]	@ 0x70
 80081e0:	e01c      	b.n	800821c <HAL_RCC_OscConfig+0x324>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b05      	cmp	r3, #5
 80081e8:	d10c      	bne.n	8008204 <HAL_RCC_OscConfig+0x30c>
 80081ea:	4b5f      	ldr	r3, [pc, #380]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 80081ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ee:	4a5e      	ldr	r2, [pc, #376]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 80081f0:	f043 0304 	orr.w	r3, r3, #4
 80081f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80081f6:	4b5c      	ldr	r3, [pc, #368]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 80081f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081fa:	4a5b      	ldr	r2, [pc, #364]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 80081fc:	f043 0301 	orr.w	r3, r3, #1
 8008200:	6713      	str	r3, [r2, #112]	@ 0x70
 8008202:	e00b      	b.n	800821c <HAL_RCC_OscConfig+0x324>
 8008204:	4b58      	ldr	r3, [pc, #352]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008208:	4a57      	ldr	r2, [pc, #348]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008210:	4b55      	ldr	r3, [pc, #340]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008214:	4a54      	ldr	r2, [pc, #336]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008216:	f023 0304 	bic.w	r3, r3, #4
 800821a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d015      	beq.n	8008250 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008224:	f7fd fa2e 	bl	8005684 <HAL_GetTick>
 8008228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800822a:	e00a      	b.n	8008242 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822c:	f7fd fa2a 	bl	8005684 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800823a:	4293      	cmp	r3, r2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e0cb      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008242:	4b49      	ldr	r3, [pc, #292]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0ee      	beq.n	800822c <HAL_RCC_OscConfig+0x334>
 800824e:	e014      	b.n	800827a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008250:	f7fd fa18 	bl	8005684 <HAL_GetTick>
 8008254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008256:	e00a      	b.n	800826e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008258:	f7fd fa14 	bl	8005684 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008266:	4293      	cmp	r3, r2
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e0b5      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800826e:	4b3e      	ldr	r3, [pc, #248]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1ee      	bne.n	8008258 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d105      	bne.n	800828c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008280:	4b39      	ldr	r3, [pc, #228]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008284:	4a38      	ldr	r2, [pc, #224]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800828a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 80a1 	beq.w	80083d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008296:	4b34      	ldr	r3, [pc, #208]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 030c 	and.w	r3, r3, #12
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d05c      	beq.n	800835c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d141      	bne.n	800832e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082aa:	4b31      	ldr	r3, [pc, #196]	@ (8008370 <HAL_RCC_OscConfig+0x478>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082b0:	f7fd f9e8 	bl	8005684 <HAL_GetTick>
 80082b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082b6:	e008      	b.n	80082ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082b8:	f7fd f9e4 	bl	8005684 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d901      	bls.n	80082ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e087      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082ca:	4b27      	ldr	r3, [pc, #156]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1f0      	bne.n	80082b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69da      	ldr	r2, [r3, #28]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e4:	019b      	lsls	r3, r3, #6
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ec:	085b      	lsrs	r3, r3, #1
 80082ee:	3b01      	subs	r3, #1
 80082f0:	041b      	lsls	r3, r3, #16
 80082f2:	431a      	orrs	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f8:	061b      	lsls	r3, r3, #24
 80082fa:	491b      	ldr	r1, [pc, #108]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008300:	4b1b      	ldr	r3, [pc, #108]	@ (8008370 <HAL_RCC_OscConfig+0x478>)
 8008302:	2201      	movs	r2, #1
 8008304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008306:	f7fd f9bd 	bl	8005684 <HAL_GetTick>
 800830a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800830c:	e008      	b.n	8008320 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800830e:	f7fd f9b9 	bl	8005684 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d901      	bls.n	8008320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e05c      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008320:	4b11      	ldr	r3, [pc, #68]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0f0      	beq.n	800830e <HAL_RCC_OscConfig+0x416>
 800832c:	e054      	b.n	80083d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800832e:	4b10      	ldr	r3, [pc, #64]	@ (8008370 <HAL_RCC_OscConfig+0x478>)
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008334:	f7fd f9a6 	bl	8005684 <HAL_GetTick>
 8008338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800833a:	e008      	b.n	800834e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800833c:	f7fd f9a2 	bl	8005684 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	2b02      	cmp	r3, #2
 8008348:	d901      	bls.n	800834e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e045      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800834e:	4b06      	ldr	r3, [pc, #24]	@ (8008368 <HAL_RCC_OscConfig+0x470>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1f0      	bne.n	800833c <HAL_RCC_OscConfig+0x444>
 800835a:	e03d      	b.n	80083d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d107      	bne.n	8008374 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e038      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
 8008368:	40023800 	.word	0x40023800
 800836c:	40007000 	.word	0x40007000
 8008370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008374:	4b1b      	ldr	r3, [pc, #108]	@ (80083e4 <HAL_RCC_OscConfig+0x4ec>)
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d028      	beq.n	80083d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800838c:	429a      	cmp	r2, r3
 800838e:	d121      	bne.n	80083d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800839a:	429a      	cmp	r2, r3
 800839c:	d11a      	bne.n	80083d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80083a4:	4013      	ands	r3, r2
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80083aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d111      	bne.n	80083d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	085b      	lsrs	r3, r3, #1
 80083bc:	3b01      	subs	r3, #1
 80083be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d107      	bne.n	80083d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d001      	beq.n	80083d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e000      	b.n	80083da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	40023800 	.word	0x40023800

080083e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e0cc      	b.n	8008596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083fc:	4b68      	ldr	r3, [pc, #416]	@ (80085a0 <HAL_RCC_ClockConfig+0x1b8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0307 	and.w	r3, r3, #7
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	429a      	cmp	r2, r3
 8008408:	d90c      	bls.n	8008424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800840a:	4b65      	ldr	r3, [pc, #404]	@ (80085a0 <HAL_RCC_ClockConfig+0x1b8>)
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008412:	4b63      	ldr	r3, [pc, #396]	@ (80085a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d001      	beq.n	8008424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e0b8      	b.n	8008596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b00      	cmp	r3, #0
 800842e:	d020      	beq.n	8008472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800843c:	4b59      	ldr	r3, [pc, #356]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	4a58      	ldr	r2, [pc, #352]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008442:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008446:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0308 	and.w	r3, r3, #8
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008454:	4b53      	ldr	r3, [pc, #332]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	4a52      	ldr	r2, [pc, #328]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 800845a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800845e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008460:	4b50      	ldr	r3, [pc, #320]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	494d      	ldr	r1, [pc, #308]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 800846e:	4313      	orrs	r3, r2
 8008470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d044      	beq.n	8008508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d107      	bne.n	8008496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008486:	4b47      	ldr	r3, [pc, #284]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d119      	bne.n	80084c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e07f      	b.n	8008596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d003      	beq.n	80084a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d107      	bne.n	80084b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084a6:	4b3f      	ldr	r3, [pc, #252]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d109      	bne.n	80084c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e06f      	b.n	8008596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084b6:	4b3b      	ldr	r3, [pc, #236]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e067      	b.n	8008596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084c6:	4b37      	ldr	r3, [pc, #220]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f023 0203 	bic.w	r2, r3, #3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	4934      	ldr	r1, [pc, #208]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084d8:	f7fd f8d4 	bl	8005684 <HAL_GetTick>
 80084dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084de:	e00a      	b.n	80084f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084e0:	f7fd f8d0 	bl	8005684 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e04f      	b.n	8008596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084f6:	4b2b      	ldr	r3, [pc, #172]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 020c 	and.w	r2, r3, #12
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	429a      	cmp	r2, r3
 8008506:	d1eb      	bne.n	80084e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008508:	4b25      	ldr	r3, [pc, #148]	@ (80085a0 <HAL_RCC_ClockConfig+0x1b8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d20c      	bcs.n	8008530 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008516:	4b22      	ldr	r3, [pc, #136]	@ (80085a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800851e:	4b20      	ldr	r3, [pc, #128]	@ (80085a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d001      	beq.n	8008530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e032      	b.n	8008596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800853c:	4b19      	ldr	r3, [pc, #100]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	4916      	ldr	r1, [pc, #88]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 800854a:	4313      	orrs	r3, r2
 800854c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800855a:	4b12      	ldr	r3, [pc, #72]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	490e      	ldr	r1, [pc, #56]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 800856a:	4313      	orrs	r3, r2
 800856c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800856e:	f000 f821 	bl	80085b4 <HAL_RCC_GetSysClockFreq>
 8008572:	4602      	mov	r2, r0
 8008574:	4b0b      	ldr	r3, [pc, #44]	@ (80085a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	091b      	lsrs	r3, r3, #4
 800857a:	f003 030f 	and.w	r3, r3, #15
 800857e:	490a      	ldr	r1, [pc, #40]	@ (80085a8 <HAL_RCC_ClockConfig+0x1c0>)
 8008580:	5ccb      	ldrb	r3, [r1, r3]
 8008582:	fa22 f303 	lsr.w	r3, r2, r3
 8008586:	4a09      	ldr	r2, [pc, #36]	@ (80085ac <HAL_RCC_ClockConfig+0x1c4>)
 8008588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800858a:	4b09      	ldr	r3, [pc, #36]	@ (80085b0 <HAL_RCC_ClockConfig+0x1c8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f7fd f834 	bl	80055fc <HAL_InitTick>

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	40023c00 	.word	0x40023c00
 80085a4:	40023800 	.word	0x40023800
 80085a8:	0800fc24 	.word	0x0800fc24
 80085ac:	20000084 	.word	0x20000084
 80085b0:	20000088 	.word	0x20000088

080085b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085b8:	b094      	sub	sp, #80	@ 0x50
 80085ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085cc:	4b79      	ldr	r3, [pc, #484]	@ (80087b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f003 030c 	and.w	r3, r3, #12
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d00d      	beq.n	80085f4 <HAL_RCC_GetSysClockFreq+0x40>
 80085d8:	2b08      	cmp	r3, #8
 80085da:	f200 80e1 	bhi.w	80087a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d002      	beq.n	80085e8 <HAL_RCC_GetSysClockFreq+0x34>
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d003      	beq.n	80085ee <HAL_RCC_GetSysClockFreq+0x3a>
 80085e6:	e0db      	b.n	80087a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085e8:	4b73      	ldr	r3, [pc, #460]	@ (80087b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80085ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80085ec:	e0db      	b.n	80087a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085ee:	4b73      	ldr	r3, [pc, #460]	@ (80087bc <HAL_RCC_GetSysClockFreq+0x208>)
 80085f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80085f2:	e0d8      	b.n	80087a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085f4:	4b6f      	ldr	r3, [pc, #444]	@ (80087b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085fe:	4b6d      	ldr	r3, [pc, #436]	@ (80087b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d063      	beq.n	80086d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800860a:	4b6a      	ldr	r3, [pc, #424]	@ (80087b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	099b      	lsrs	r3, r3, #6
 8008610:	2200      	movs	r2, #0
 8008612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008614:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861c:	633b      	str	r3, [r7, #48]	@ 0x30
 800861e:	2300      	movs	r3, #0
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34
 8008622:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008626:	4622      	mov	r2, r4
 8008628:	462b      	mov	r3, r5
 800862a:	f04f 0000 	mov.w	r0, #0
 800862e:	f04f 0100 	mov.w	r1, #0
 8008632:	0159      	lsls	r1, r3, #5
 8008634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008638:	0150      	lsls	r0, r2, #5
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4621      	mov	r1, r4
 8008640:	1a51      	subs	r1, r2, r1
 8008642:	6139      	str	r1, [r7, #16]
 8008644:	4629      	mov	r1, r5
 8008646:	eb63 0301 	sbc.w	r3, r3, r1
 800864a:	617b      	str	r3, [r7, #20]
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008658:	4659      	mov	r1, fp
 800865a:	018b      	lsls	r3, r1, #6
 800865c:	4651      	mov	r1, sl
 800865e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008662:	4651      	mov	r1, sl
 8008664:	018a      	lsls	r2, r1, #6
 8008666:	4651      	mov	r1, sl
 8008668:	ebb2 0801 	subs.w	r8, r2, r1
 800866c:	4659      	mov	r1, fp
 800866e:	eb63 0901 	sbc.w	r9, r3, r1
 8008672:	f04f 0200 	mov.w	r2, #0
 8008676:	f04f 0300 	mov.w	r3, #0
 800867a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800867e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008686:	4690      	mov	r8, r2
 8008688:	4699      	mov	r9, r3
 800868a:	4623      	mov	r3, r4
 800868c:	eb18 0303 	adds.w	r3, r8, r3
 8008690:	60bb      	str	r3, [r7, #8]
 8008692:	462b      	mov	r3, r5
 8008694:	eb49 0303 	adc.w	r3, r9, r3
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	f04f 0200 	mov.w	r2, #0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80086a6:	4629      	mov	r1, r5
 80086a8:	024b      	lsls	r3, r1, #9
 80086aa:	4621      	mov	r1, r4
 80086ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80086b0:	4621      	mov	r1, r4
 80086b2:	024a      	lsls	r2, r1, #9
 80086b4:	4610      	mov	r0, r2
 80086b6:	4619      	mov	r1, r3
 80086b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ba:	2200      	movs	r2, #0
 80086bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086c4:	f7f8 fae0 	bl	8000c88 <__aeabi_uldivmod>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4613      	mov	r3, r2
 80086ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086d0:	e058      	b.n	8008784 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086d2:	4b38      	ldr	r3, [pc, #224]	@ (80087b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	099b      	lsrs	r3, r3, #6
 80086d8:	2200      	movs	r2, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	4611      	mov	r1, r2
 80086de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80086e2:	623b      	str	r3, [r7, #32]
 80086e4:	2300      	movs	r3, #0
 80086e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80086e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	f04f 0000 	mov.w	r0, #0
 80086f4:	f04f 0100 	mov.w	r1, #0
 80086f8:	0159      	lsls	r1, r3, #5
 80086fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086fe:	0150      	lsls	r0, r2, #5
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4641      	mov	r1, r8
 8008706:	ebb2 0a01 	subs.w	sl, r2, r1
 800870a:	4649      	mov	r1, r9
 800870c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800871c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008720:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008724:	ebb2 040a 	subs.w	r4, r2, sl
 8008728:	eb63 050b 	sbc.w	r5, r3, fp
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	00eb      	lsls	r3, r5, #3
 8008736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800873a:	00e2      	lsls	r2, r4, #3
 800873c:	4614      	mov	r4, r2
 800873e:	461d      	mov	r5, r3
 8008740:	4643      	mov	r3, r8
 8008742:	18e3      	adds	r3, r4, r3
 8008744:	603b      	str	r3, [r7, #0]
 8008746:	464b      	mov	r3, r9
 8008748:	eb45 0303 	adc.w	r3, r5, r3
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	f04f 0300 	mov.w	r3, #0
 8008756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800875a:	4629      	mov	r1, r5
 800875c:	028b      	lsls	r3, r1, #10
 800875e:	4621      	mov	r1, r4
 8008760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008764:	4621      	mov	r1, r4
 8008766:	028a      	lsls	r2, r1, #10
 8008768:	4610      	mov	r0, r2
 800876a:	4619      	mov	r1, r3
 800876c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800876e:	2200      	movs	r2, #0
 8008770:	61bb      	str	r3, [r7, #24]
 8008772:	61fa      	str	r2, [r7, #28]
 8008774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008778:	f7f8 fa86 	bl	8000c88 <__aeabi_uldivmod>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4613      	mov	r3, r2
 8008782:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008784:	4b0b      	ldr	r3, [pc, #44]	@ (80087b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	0c1b      	lsrs	r3, r3, #16
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	3301      	adds	r3, #1
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008794:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008798:	fbb2 f3f3 	udiv	r3, r2, r3
 800879c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800879e:	e002      	b.n	80087a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087a0:	4b05      	ldr	r3, [pc, #20]	@ (80087b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80087a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3750      	adds	r7, #80	@ 0x50
 80087ac:	46bd      	mov	sp, r7
 80087ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087b2:	bf00      	nop
 80087b4:	40023800 	.word	0x40023800
 80087b8:	00f42400 	.word	0x00f42400
 80087bc:	007a1200 	.word	0x007a1200

080087c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087c4:	4b03      	ldr	r3, [pc, #12]	@ (80087d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80087c6:	681b      	ldr	r3, [r3, #0]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20000084 	.word	0x20000084

080087d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80087dc:	f7ff fff0 	bl	80087c0 <HAL_RCC_GetHCLKFreq>
 80087e0:	4602      	mov	r2, r0
 80087e2:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	0a9b      	lsrs	r3, r3, #10
 80087e8:	f003 0307 	and.w	r3, r3, #7
 80087ec:	4903      	ldr	r1, [pc, #12]	@ (80087fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80087ee:	5ccb      	ldrb	r3, [r1, r3]
 80087f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	40023800 	.word	0x40023800
 80087fc:	0800fc34 	.word	0x0800fc34

08008800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008804:	f7ff ffdc 	bl	80087c0 <HAL_RCC_GetHCLKFreq>
 8008808:	4602      	mov	r2, r0
 800880a:	4b05      	ldr	r3, [pc, #20]	@ (8008820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	0b5b      	lsrs	r3, r3, #13
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	4903      	ldr	r1, [pc, #12]	@ (8008824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008816:	5ccb      	ldrb	r3, [r1, r3]
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800881c:	4618      	mov	r0, r3
 800881e:	bd80      	pop	{r7, pc}
 8008820:	40023800 	.word	0x40023800
 8008824:	0800fc34 	.word	0x0800fc34

08008828 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e041      	b.n	80088be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7fc f96a 	bl	8004b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f000 fc24 	bl	80090b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d109      	bne.n	80088ec <HAL_TIM_PWM_Start+0x24>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	bf14      	ite	ne
 80088e4:	2301      	movne	r3, #1
 80088e6:	2300      	moveq	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	e022      	b.n	8008932 <HAL_TIM_PWM_Start+0x6a>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d109      	bne.n	8008906 <HAL_TIM_PWM_Start+0x3e>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	bf14      	ite	ne
 80088fe:	2301      	movne	r3, #1
 8008900:	2300      	moveq	r3, #0
 8008902:	b2db      	uxtb	r3, r3
 8008904:	e015      	b.n	8008932 <HAL_TIM_PWM_Start+0x6a>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b08      	cmp	r3, #8
 800890a:	d109      	bne.n	8008920 <HAL_TIM_PWM_Start+0x58>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	bf14      	ite	ne
 8008918:	2301      	movne	r3, #1
 800891a:	2300      	moveq	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	e008      	b.n	8008932 <HAL_TIM_PWM_Start+0x6a>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b01      	cmp	r3, #1
 800892a:	bf14      	ite	ne
 800892c:	2301      	movne	r3, #1
 800892e:	2300      	moveq	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e07c      	b.n	8008a34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d104      	bne.n	800894a <HAL_TIM_PWM_Start+0x82>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008948:	e013      	b.n	8008972 <HAL_TIM_PWM_Start+0xaa>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b04      	cmp	r3, #4
 800894e:	d104      	bne.n	800895a <HAL_TIM_PWM_Start+0x92>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008958:	e00b      	b.n	8008972 <HAL_TIM_PWM_Start+0xaa>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b08      	cmp	r3, #8
 800895e:	d104      	bne.n	800896a <HAL_TIM_PWM_Start+0xa2>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008968:	e003      	b.n	8008972 <HAL_TIM_PWM_Start+0xaa>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2202      	movs	r2, #2
 800896e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2201      	movs	r2, #1
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fdf6 	bl	800956c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a2d      	ldr	r2, [pc, #180]	@ (8008a3c <HAL_TIM_PWM_Start+0x174>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <HAL_TIM_PWM_Start+0xcc>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a2c      	ldr	r2, [pc, #176]	@ (8008a40 <HAL_TIM_PWM_Start+0x178>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d101      	bne.n	8008998 <HAL_TIM_PWM_Start+0xd0>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <HAL_TIM_PWM_Start+0xd2>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d007      	beq.n	80089ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a22      	ldr	r2, [pc, #136]	@ (8008a3c <HAL_TIM_PWM_Start+0x174>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d022      	beq.n	80089fe <HAL_TIM_PWM_Start+0x136>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c0:	d01d      	beq.n	80089fe <HAL_TIM_PWM_Start+0x136>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a44 <HAL_TIM_PWM_Start+0x17c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d018      	beq.n	80089fe <HAL_TIM_PWM_Start+0x136>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <HAL_TIM_PWM_Start+0x180>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <HAL_TIM_PWM_Start+0x136>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a1c      	ldr	r2, [pc, #112]	@ (8008a4c <HAL_TIM_PWM_Start+0x184>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00e      	beq.n	80089fe <HAL_TIM_PWM_Start+0x136>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a16      	ldr	r2, [pc, #88]	@ (8008a40 <HAL_TIM_PWM_Start+0x178>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d009      	beq.n	80089fe <HAL_TIM_PWM_Start+0x136>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a18      	ldr	r2, [pc, #96]	@ (8008a50 <HAL_TIM_PWM_Start+0x188>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d004      	beq.n	80089fe <HAL_TIM_PWM_Start+0x136>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a16      	ldr	r2, [pc, #88]	@ (8008a54 <HAL_TIM_PWM_Start+0x18c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d111      	bne.n	8008a22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b06      	cmp	r3, #6
 8008a0e:	d010      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0201 	orr.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a20:	e007      	b.n	8008a32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0201 	orr.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	40010000 	.word	0x40010000
 8008a40:	40010400 	.word	0x40010400
 8008a44:	40000400 	.word	0x40000400
 8008a48:	40000800 	.word	0x40000800
 8008a4c:	40000c00 	.word	0x40000c00
 8008a50:	40014000 	.word	0x40014000
 8008a54:	40001800 	.word	0x40001800

08008a58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e097      	b.n	8008b9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d106      	bne.n	8008a86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7fb fed9 	bl	8004838 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2202      	movs	r2, #2
 8008a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a9c:	f023 0307 	bic.w	r3, r3, #7
 8008aa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f000 fb01 	bl	80090b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ada:	f023 0303 	bic.w	r3, r3, #3
 8008ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	4313      	orrs	r3, r2
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008af8:	f023 030c 	bic.w	r3, r3, #12
 8008afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	4313      	orrs	r3, r2
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	011a      	lsls	r2, r3, #4
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	031b      	lsls	r3, r3, #12
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008b36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008b3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008bbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008bcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d110      	bne.n	8008bf6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d102      	bne.n	8008be0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008bda:	7b7b      	ldrb	r3, [r7, #13]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d001      	beq.n	8008be4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e089      	b.n	8008cf8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bf4:	e031      	b.n	8008c5a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d110      	bne.n	8008c1e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d102      	bne.n	8008c08 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c02:	7b3b      	ldrb	r3, [r7, #12]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d001      	beq.n	8008c0c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e075      	b.n	8008cf8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c1c:	e01d      	b.n	8008c5a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d108      	bne.n	8008c36 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d105      	bne.n	8008c36 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c2a:	7b7b      	ldrb	r3, [r7, #13]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d102      	bne.n	8008c36 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c30:	7b3b      	ldrb	r3, [r7, #12]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d001      	beq.n	8008c3a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e05e      	b.n	8008cf8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2202      	movs	r2, #2
 8008c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d010      	beq.n	8008c88 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008c66:	e01f      	b.n	8008ca8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	2100      	movs	r1, #0
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fc7b 	bl	800956c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0202 	orr.w	r2, r2, #2
 8008c84:	60da      	str	r2, [r3, #12]
      break;
 8008c86:	e02e      	b.n	8008ce6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	2104      	movs	r1, #4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fc6b 	bl	800956c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0204 	orr.w	r2, r2, #4
 8008ca4:	60da      	str	r2, [r3, #12]
      break;
 8008ca6:	e01e      	b.n	8008ce6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2201      	movs	r2, #1
 8008cae:	2100      	movs	r1, #0
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fc5b 	bl	800956c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	2104      	movs	r1, #4
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fc54 	bl	800956c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f042 0202 	orr.w	r2, r2, #2
 8008cd2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 0204 	orr.w	r2, r2, #4
 8008ce2:	60da      	str	r2, [r3, #12]
      break;
 8008ce4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f042 0201 	orr.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d020      	beq.n	8008d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01b      	beq.n	8008d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f06f 0202 	mvn.w	r2, #2
 8008d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7fa fb63 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 8008d50:	e005      	b.n	8008d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f990 	bl	8009078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f997 	bl	800908c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	f003 0304 	and.w	r3, r3, #4
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d020      	beq.n	8008db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01b      	beq.n	8008db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f06f 0204 	mvn.w	r2, #4
 8008d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2202      	movs	r2, #2
 8008d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7fa fb3d 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 8008d9c:	e005      	b.n	8008daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f96a 	bl	8009078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f971 	bl	800908c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f003 0308 	and.w	r3, r3, #8
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d020      	beq.n	8008dfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f003 0308 	and.w	r3, r3, #8
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01b      	beq.n	8008dfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f06f 0208 	mvn.w	r2, #8
 8008dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2204      	movs	r2, #4
 8008dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7fa fb17 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 8008de8:	e005      	b.n	8008df6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f944 	bl	8009078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f94b 	bl	800908c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f003 0310 	and.w	r3, r3, #16
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d020      	beq.n	8008e48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f003 0310 	and.w	r3, r3, #16
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01b      	beq.n	8008e48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f06f 0210 	mvn.w	r2, #16
 8008e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2208      	movs	r2, #8
 8008e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fa faf1 	bl	8003416 <HAL_TIM_IC_CaptureCallback>
 8008e34:	e005      	b.n	8008e42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f91e 	bl	8009078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f925 	bl	800908c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00c      	beq.n	8008e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d007      	beq.n	8008e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0201 	mvn.w	r2, #1
 8008e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f8fc 	bl	8009064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00c      	beq.n	8008e90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fc1a 	bl	80096c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00c      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f8f6 	bl	80090a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00c      	beq.n	8008ed8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f06f 0220 	mvn.w	r2, #32
 8008ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fbec 	bl	80096b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d101      	bne.n	8008efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008efa:	2302      	movs	r3, #2
 8008efc:	e0ae      	b.n	800905c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b0c      	cmp	r3, #12
 8008f0a:	f200 809f 	bhi.w	800904c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f49 	.word	0x08008f49
 8008f18:	0800904d 	.word	0x0800904d
 8008f1c:	0800904d 	.word	0x0800904d
 8008f20:	0800904d 	.word	0x0800904d
 8008f24:	08008f89 	.word	0x08008f89
 8008f28:	0800904d 	.word	0x0800904d
 8008f2c:	0800904d 	.word	0x0800904d
 8008f30:	0800904d 	.word	0x0800904d
 8008f34:	08008fcb 	.word	0x08008fcb
 8008f38:	0800904d 	.word	0x0800904d
 8008f3c:	0800904d 	.word	0x0800904d
 8008f40:	0800904d 	.word	0x0800904d
 8008f44:	0800900b 	.word	0x0800900b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68b9      	ldr	r1, [r7, #8]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f95c 	bl	800920c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0208 	orr.w	r2, r2, #8
 8008f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699a      	ldr	r2, [r3, #24]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0204 	bic.w	r2, r2, #4
 8008f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6999      	ldr	r1, [r3, #24]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	691a      	ldr	r2, [r3, #16]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	619a      	str	r2, [r3, #24]
      break;
 8008f86:	e064      	b.n	8009052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f9ac 	bl	80092ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6999      	ldr	r1, [r3, #24]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	021a      	lsls	r2, r3, #8
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	619a      	str	r2, [r3, #24]
      break;
 8008fc8:	e043      	b.n	8009052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fa01 	bl	80093d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69da      	ldr	r2, [r3, #28]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f042 0208 	orr.w	r2, r2, #8
 8008fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69da      	ldr	r2, [r3, #28]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0204 	bic.w	r2, r2, #4
 8008ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69d9      	ldr	r1, [r3, #28]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	61da      	str	r2, [r3, #28]
      break;
 8009008:	e023      	b.n	8009052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fa55 	bl	80094c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69da      	ldr	r2, [r3, #28]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69d9      	ldr	r1, [r3, #28]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	021a      	lsls	r2, r3, #8
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	61da      	str	r2, [r3, #28]
      break;
 800904a:	e002      	b.n	8009052 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	75fb      	strb	r3, [r7, #23]
      break;
 8009050:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800905a:	7dfb      	ldrb	r3, [r7, #23]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a46      	ldr	r2, [pc, #280]	@ (80091e0 <TIM_Base_SetConfig+0x12c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d013      	beq.n	80090f4 <TIM_Base_SetConfig+0x40>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090d2:	d00f      	beq.n	80090f4 <TIM_Base_SetConfig+0x40>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a43      	ldr	r2, [pc, #268]	@ (80091e4 <TIM_Base_SetConfig+0x130>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00b      	beq.n	80090f4 <TIM_Base_SetConfig+0x40>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a42      	ldr	r2, [pc, #264]	@ (80091e8 <TIM_Base_SetConfig+0x134>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d007      	beq.n	80090f4 <TIM_Base_SetConfig+0x40>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a41      	ldr	r2, [pc, #260]	@ (80091ec <TIM_Base_SetConfig+0x138>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d003      	beq.n	80090f4 <TIM_Base_SetConfig+0x40>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a40      	ldr	r2, [pc, #256]	@ (80091f0 <TIM_Base_SetConfig+0x13c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d108      	bne.n	8009106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a35      	ldr	r2, [pc, #212]	@ (80091e0 <TIM_Base_SetConfig+0x12c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d02b      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009114:	d027      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a32      	ldr	r2, [pc, #200]	@ (80091e4 <TIM_Base_SetConfig+0x130>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d023      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a31      	ldr	r2, [pc, #196]	@ (80091e8 <TIM_Base_SetConfig+0x134>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d01f      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a30      	ldr	r2, [pc, #192]	@ (80091ec <TIM_Base_SetConfig+0x138>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d01b      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a2f      	ldr	r2, [pc, #188]	@ (80091f0 <TIM_Base_SetConfig+0x13c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d017      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a2e      	ldr	r2, [pc, #184]	@ (80091f4 <TIM_Base_SetConfig+0x140>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d013      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a2d      	ldr	r2, [pc, #180]	@ (80091f8 <TIM_Base_SetConfig+0x144>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d00f      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a2c      	ldr	r2, [pc, #176]	@ (80091fc <TIM_Base_SetConfig+0x148>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d00b      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a2b      	ldr	r2, [pc, #172]	@ (8009200 <TIM_Base_SetConfig+0x14c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d007      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a2a      	ldr	r2, [pc, #168]	@ (8009204 <TIM_Base_SetConfig+0x150>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d003      	beq.n	8009166 <TIM_Base_SetConfig+0xb2>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a29      	ldr	r2, [pc, #164]	@ (8009208 <TIM_Base_SetConfig+0x154>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d108      	bne.n	8009178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800916c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	4313      	orrs	r3, r2
 8009176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a10      	ldr	r2, [pc, #64]	@ (80091e0 <TIM_Base_SetConfig+0x12c>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d003      	beq.n	80091ac <TIM_Base_SetConfig+0xf8>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a12      	ldr	r2, [pc, #72]	@ (80091f0 <TIM_Base_SetConfig+0x13c>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d103      	bne.n	80091b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d105      	bne.n	80091d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f023 0201 	bic.w	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	611a      	str	r2, [r3, #16]
  }
}
 80091d2:	bf00      	nop
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	40010000 	.word	0x40010000
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00
 80091f0:	40010400 	.word	0x40010400
 80091f4:	40014000 	.word	0x40014000
 80091f8:	40014400 	.word	0x40014400
 80091fc:	40014800 	.word	0x40014800
 8009200:	40001800 	.word	0x40001800
 8009204:	40001c00 	.word	0x40001c00
 8009208:	40002000 	.word	0x40002000

0800920c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	f023 0201 	bic.w	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800923a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0303 	bic.w	r3, r3, #3
 8009242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f023 0302 	bic.w	r3, r3, #2
 8009254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4313      	orrs	r3, r2
 800925e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a20      	ldr	r2, [pc, #128]	@ (80092e4 <TIM_OC1_SetConfig+0xd8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d003      	beq.n	8009270 <TIM_OC1_SetConfig+0x64>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a1f      	ldr	r2, [pc, #124]	@ (80092e8 <TIM_OC1_SetConfig+0xdc>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d10c      	bne.n	800928a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f023 0308 	bic.w	r3, r3, #8
 8009276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f023 0304 	bic.w	r3, r3, #4
 8009288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a15      	ldr	r2, [pc, #84]	@ (80092e4 <TIM_OC1_SetConfig+0xd8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d003      	beq.n	800929a <TIM_OC1_SetConfig+0x8e>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a14      	ldr	r2, [pc, #80]	@ (80092e8 <TIM_OC1_SetConfig+0xdc>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d111      	bne.n	80092be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	699b      	ldr	r3, [r3, #24]
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	621a      	str	r2, [r3, #32]
}
 80092d8:	bf00      	nop
 80092da:	371c      	adds	r7, #28
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	40010000 	.word	0x40010000
 80092e8:	40010400 	.word	0x40010400

080092ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	f023 0210 	bic.w	r2, r3, #16
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800931a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	4313      	orrs	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f023 0320 	bic.w	r3, r3, #32
 8009336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	4313      	orrs	r3, r2
 8009342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a22      	ldr	r2, [pc, #136]	@ (80093d0 <TIM_OC2_SetConfig+0xe4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d003      	beq.n	8009354 <TIM_OC2_SetConfig+0x68>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a21      	ldr	r2, [pc, #132]	@ (80093d4 <TIM_OC2_SetConfig+0xe8>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d10d      	bne.n	8009370 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800935a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800936e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a17      	ldr	r2, [pc, #92]	@ (80093d0 <TIM_OC2_SetConfig+0xe4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d003      	beq.n	8009380 <TIM_OC2_SetConfig+0x94>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a16      	ldr	r2, [pc, #88]	@ (80093d4 <TIM_OC2_SetConfig+0xe8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d113      	bne.n	80093a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800938e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	4313      	orrs	r3, r2
 800939a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	621a      	str	r2, [r3, #32]
}
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	40010000 	.word	0x40010000
 80093d4:	40010400 	.word	0x40010400

080093d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	4313      	orrs	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a21      	ldr	r2, [pc, #132]	@ (80094b8 <TIM_OC3_SetConfig+0xe0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d003      	beq.n	800943e <TIM_OC3_SetConfig+0x66>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a20      	ldr	r2, [pc, #128]	@ (80094bc <TIM_OC3_SetConfig+0xe4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d10d      	bne.n	800945a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	4313      	orrs	r3, r2
 8009450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a16      	ldr	r2, [pc, #88]	@ (80094b8 <TIM_OC3_SetConfig+0xe0>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d003      	beq.n	800946a <TIM_OC3_SetConfig+0x92>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a15      	ldr	r2, [pc, #84]	@ (80094bc <TIM_OC3_SetConfig+0xe4>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d113      	bne.n	8009492 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	011b      	lsls	r3, r3, #4
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	4313      	orrs	r3, r2
 8009490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	621a      	str	r2, [r3, #32]
}
 80094ac:	bf00      	nop
 80094ae:	371c      	adds	r7, #28
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	40010000 	.word	0x40010000
 80094bc:	40010400 	.word	0x40010400

080094c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800950a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	031b      	lsls	r3, r3, #12
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	4313      	orrs	r3, r2
 8009516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a12      	ldr	r2, [pc, #72]	@ (8009564 <TIM_OC4_SetConfig+0xa4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <TIM_OC4_SetConfig+0x68>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a11      	ldr	r2, [pc, #68]	@ (8009568 <TIM_OC4_SetConfig+0xa8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d109      	bne.n	800953c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800952e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	019b      	lsls	r3, r3, #6
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	4313      	orrs	r3, r2
 800953a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	621a      	str	r2, [r3, #32]
}
 8009556:	bf00      	nop
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40010000 	.word	0x40010000
 8009568:	40010400 	.word	0x40010400

0800956c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f003 031f 	and.w	r3, r3, #31
 800957e:	2201      	movs	r2, #1
 8009580:	fa02 f303 	lsl.w	r3, r2, r3
 8009584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6a1a      	ldr	r2, [r3, #32]
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	43db      	mvns	r3, r3
 800958e:	401a      	ands	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a1a      	ldr	r2, [r3, #32]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f003 031f 	and.w	r3, r3, #31
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	fa01 f303 	lsl.w	r3, r1, r3
 80095a4:	431a      	orrs	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	621a      	str	r2, [r3, #32]
}
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
	...

080095b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d101      	bne.n	80095d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095cc:	2302      	movs	r3, #2
 80095ce:	e05a      	b.n	8009686 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a21      	ldr	r2, [pc, #132]	@ (8009694 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d022      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800961c:	d01d      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1d      	ldr	r2, [pc, #116]	@ (8009698 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d018      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1b      	ldr	r2, [pc, #108]	@ (800969c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1a      	ldr	r2, [pc, #104]	@ (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d00e      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a18      	ldr	r2, [pc, #96]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d009      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a17      	ldr	r2, [pc, #92]	@ (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d004      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a15      	ldr	r2, [pc, #84]	@ (80096ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d10c      	bne.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	4313      	orrs	r3, r2
 800966a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	40010000 	.word	0x40010000
 8009698:	40000400 	.word	0x40000400
 800969c:	40000800 	.word	0x40000800
 80096a0:	40000c00 	.word	0x40000c00
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40014000 	.word	0x40014000
 80096ac:	40001800 	.word	0x40001800

080096b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e042      	b.n	8009770 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d106      	bne.n	8009704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7fb fb14 	bl	8004d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2224      	movs	r2, #36	@ 0x24
 8009708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800971a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 ff5b 	bl	800a5d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695a      	ldr	r2, [r3, #20]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2220      	movs	r2, #32
 800975c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2220      	movs	r2, #32
 8009764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08a      	sub	sp, #40	@ 0x28
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	4613      	mov	r3, r2
 8009786:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b20      	cmp	r3, #32
 8009796:	f040 8081 	bne.w	800989c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <HAL_UART_Receive+0x2e>
 80097a0:	88fb      	ldrh	r3, [r7, #6]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e079      	b.n	800989e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2222      	movs	r2, #34	@ 0x22
 80097b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097be:	f7fb ff61 	bl	8005684 <HAL_GetTick>
 80097c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	88fa      	ldrh	r2, [r7, #6]
 80097c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	88fa      	ldrh	r2, [r7, #6]
 80097ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097d8:	d108      	bne.n	80097ec <HAL_UART_Receive+0x74>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d104      	bne.n	80097ec <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	61bb      	str	r3, [r7, #24]
 80097ea:	e003      	b.n	80097f4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80097f4:	e047      	b.n	8009886 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2200      	movs	r2, #0
 80097fe:	2120      	movs	r1, #32
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 fc2f 	bl	800a064 <UART_WaitOnFlagUntilTimeout>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e042      	b.n	800989e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10c      	bne.n	8009838 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982a:	b29a      	uxth	r2, r3
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	3302      	adds	r3, #2
 8009834:	61bb      	str	r3, [r7, #24]
 8009836:	e01f      	b.n	8009878 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009840:	d007      	beq.n	8009852 <HAL_UART_Receive+0xda>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <HAL_UART_Receive+0xe8>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d106      	bne.n	8009860 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	b2da      	uxtb	r2, r3
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	e008      	b.n	8009872 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800986c:	b2da      	uxtb	r2, r3
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	3301      	adds	r3, #1
 8009876:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800988a:	b29b      	uxth	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1b2      	bne.n	80097f6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2220      	movs	r2, #32
 8009894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	e000      	b.n	800989e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800989c:	2302      	movs	r3, #2
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	4613      	mov	r3, r2
 80098b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d112      	bne.n	80098e6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <HAL_UART_Receive_DMA+0x26>
 80098c6:	88fb      	ldrh	r3, [r7, #6]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e00b      	b.n	80098e8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80098d6:	88fb      	ldrh	r3, [r7, #6]
 80098d8:	461a      	mov	r2, r3
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 fc1b 	bl	800a118 <UART_Start_Receive_DMA>
 80098e2:	4603      	mov	r3, r0
 80098e4:	e000      	b.n	80098e8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80098e6:	2302      	movs	r3, #2
  }
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b0ba      	sub	sp, #232	@ 0xe8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009916:	2300      	movs	r3, #0
 8009918:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800991c:	2300      	movs	r3, #0
 800991e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800992e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10f      	bne.n	8009956 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800993a:	f003 0320 	and.w	r3, r3, #32
 800993e:	2b00      	cmp	r3, #0
 8009940:	d009      	beq.n	8009956 <HAL_UART_IRQHandler+0x66>
 8009942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009946:	f003 0320 	and.w	r3, r3, #32
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fd83 	bl	800a45a <UART_Receive_IT>
      return;
 8009954:	e25b      	b.n	8009e0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 80de 	beq.w	8009b1c <HAL_UART_IRQHandler+0x22c>
 8009960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b00      	cmp	r3, #0
 800996a:	d106      	bne.n	800997a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800996c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009970:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 80d1 	beq.w	8009b1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800997a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00b      	beq.n	800999e <HAL_UART_IRQHandler+0xae>
 8009986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800998a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800998e:	2b00      	cmp	r3, #0
 8009990:	d005      	beq.n	800999e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009996:	f043 0201 	orr.w	r2, r3, #1
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800999e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099a2:	f003 0304 	and.w	r3, r3, #4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00b      	beq.n	80099c2 <HAL_UART_IRQHandler+0xd2>
 80099aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d005      	beq.n	80099c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ba:	f043 0202 	orr.w	r2, r3, #2
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c6:	f003 0302 	and.w	r3, r3, #2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00b      	beq.n	80099e6 <HAL_UART_IRQHandler+0xf6>
 80099ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d005      	beq.n	80099e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099de:	f043 0204 	orr.w	r2, r3, #4
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d011      	beq.n	8009a16 <HAL_UART_IRQHandler+0x126>
 80099f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d105      	bne.n	8009a0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80099fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0e:	f043 0208 	orr.w	r2, r3, #8
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 81f2 	beq.w	8009e04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d008      	beq.n	8009a3e <HAL_UART_IRQHandler+0x14e>
 8009a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fd0e 	bl	800a45a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a48:	2b40      	cmp	r3, #64	@ 0x40
 8009a4a:	bf0c      	ite	eq
 8009a4c:	2301      	moveq	r3, #1
 8009a4e:	2300      	movne	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a5a:	f003 0308 	and.w	r3, r3, #8
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d103      	bne.n	8009a6a <HAL_UART_IRQHandler+0x17a>
 8009a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d04f      	beq.n	8009b0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fc16 	bl	800a29c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a7a:	2b40      	cmp	r3, #64	@ 0x40
 8009a7c:	d141      	bne.n	8009b02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3314      	adds	r3, #20
 8009a84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3314      	adds	r3, #20
 8009aa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009aaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009aae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1d9      	bne.n	8009a7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d013      	beq.n	8009afa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8009cd0 <HAL_UART_IRQHandler+0x3e0>)
 8009ad8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fc fc88 	bl	80063f4 <HAL_DMA_Abort_IT>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d016      	beq.n	8009b18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af8:	e00e      	b.n	8009b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f99e 	bl	8009e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b00:	e00a      	b.n	8009b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f99a 	bl	8009e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b08:	e006      	b.n	8009b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f996 	bl	8009e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009b16:	e175      	b.n	8009e04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b18:	bf00      	nop
    return;
 8009b1a:	e173      	b.n	8009e04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	f040 814f 	bne.w	8009dc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b2a:	f003 0310 	and.w	r3, r3, #16
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 8148 	beq.w	8009dc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b38:	f003 0310 	and.w	r3, r3, #16
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 8141 	beq.w	8009dc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b42:	2300      	movs	r3, #0
 8009b44:	60bb      	str	r3, [r7, #8]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	60bb      	str	r3, [r7, #8]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	60bb      	str	r3, [r7, #8]
 8009b56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b62:	2b40      	cmp	r3, #64	@ 0x40
 8009b64:	f040 80b6 	bne.w	8009cd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 8145 	beq.w	8009e08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b86:	429a      	cmp	r2, r3
 8009b88:	f080 813e 	bcs.w	8009e08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b9e:	f000 8088 	beq.w	8009cb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	330c      	adds	r3, #12
 8009ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009bb0:	e853 3f00 	ldrex	r3, [r3]
 8009bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	330c      	adds	r3, #12
 8009bca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009bce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009bd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1d9      	bne.n	8009ba2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3314      	adds	r3, #20
 8009bf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c00:	f023 0301 	bic.w	r3, r3, #1
 8009c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3314      	adds	r3, #20
 8009c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e1      	bne.n	8009bee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3314      	adds	r3, #20
 8009c30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3314      	adds	r3, #20
 8009c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c56:	e841 2300 	strex	r3, r2, [r1]
 8009c5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e3      	bne.n	8009c2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2220      	movs	r2, #32
 8009c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	330c      	adds	r3, #12
 8009c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c7a:	e853 3f00 	ldrex	r3, [r3]
 8009c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c82:	f023 0310 	bic.w	r3, r3, #16
 8009c86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	330c      	adds	r3, #12
 8009c90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009c94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c9c:	e841 2300 	strex	r3, r2, [r1]
 8009ca0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e3      	bne.n	8009c70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fc fb31 	bl	8006314 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f8c1 	bl	8009e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cce:	e09b      	b.n	8009e08 <HAL_UART_IRQHandler+0x518>
 8009cd0:	0800a363 	.word	0x0800a363
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 808e 	beq.w	8009e0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 8089 	beq.w	8009e0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	330c      	adds	r3, #12
 8009d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	330c      	adds	r3, #12
 8009d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009d1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e3      	bne.n	8009cfa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3314      	adds	r3, #20
 8009d38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	623b      	str	r3, [r7, #32]
   return(result);
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3314      	adds	r3, #20
 8009d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d56:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e3      	bne.n	8009d32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	330c      	adds	r3, #12
 8009d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0310 	bic.w	r3, r3, #16
 8009d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	330c      	adds	r3, #12
 8009d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009d9c:	61fa      	str	r2, [r7, #28]
 8009d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	69b9      	ldr	r1, [r7, #24]
 8009da2:	69fa      	ldr	r2, [r7, #28]
 8009da4:	e841 2300 	strex	r3, r2, [r1]
 8009da8:	617b      	str	r3, [r7, #20]
   return(result);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1e3      	bne.n	8009d78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009db6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f847 	bl	8009e50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dc2:	e023      	b.n	8009e0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <HAL_UART_IRQHandler+0x4f4>
 8009dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fad4 	bl	800a38a <UART_Transmit_IT>
    return;
 8009de2:	e014      	b.n	8009e0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00e      	beq.n	8009e0e <HAL_UART_IRQHandler+0x51e>
 8009df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d008      	beq.n	8009e0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fb14 	bl	800a42a <UART_EndTransmit_IT>
    return;
 8009e02:	e004      	b.n	8009e0e <HAL_UART_IRQHandler+0x51e>
    return;
 8009e04:	bf00      	nop
 8009e06:	e002      	b.n	8009e0e <HAL_UART_IRQHandler+0x51e>
      return;
 8009e08:	bf00      	nop
 8009e0a:	e000      	b.n	8009e0e <HAL_UART_IRQHandler+0x51e>
      return;
 8009e0c:	bf00      	nop
  }
}
 8009e0e:	37e8      	adds	r7, #232	@ 0xe8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b09c      	sub	sp, #112	@ 0x70
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d172      	bne.n	8009f6a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e86:	2200      	movs	r2, #0
 8009e88:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	330c      	adds	r3, #12
 8009e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	330c      	adds	r3, #12
 8009ea8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009eaa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009eac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009eb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e5      	bne.n	8009e8a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed0:	f023 0301 	bic.w	r3, r3, #1
 8009ed4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3314      	adds	r3, #20
 8009edc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ede:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e5      	bne.n	8009ebe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3314      	adds	r3, #20
 8009ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	623b      	str	r3, [r7, #32]
   return(result);
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f08:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3314      	adds	r3, #20
 8009f10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f12:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e5      	bne.n	8009ef2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d119      	bne.n	8009f6a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	330c      	adds	r3, #12
 8009f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f023 0310 	bic.w	r3, r3, #16
 8009f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	330c      	adds	r3, #12
 8009f54:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009f56:	61fa      	str	r2, [r7, #28]
 8009f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	69b9      	ldr	r1, [r7, #24]
 8009f5c:	69fa      	ldr	r2, [r7, #28]
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	617b      	str	r3, [r7, #20]
   return(result);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e5      	bne.n	8009f36 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d106      	bne.n	8009f86 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f80:	f7ff ff66 	bl	8009e50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f84:	e002      	b.n	8009f8c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009f86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f88:	f7f9 fa50 	bl	800342c <HAL_UART_RxCpltCallback>
}
 8009f8c:	bf00      	nop
 8009f8e:	3770      	adds	r7, #112	@ 0x70
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d108      	bne.n	8009fc2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009fb4:	085b      	lsrs	r3, r3, #1
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	4619      	mov	r1, r3
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff ff48 	bl	8009e50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009fc0:	e002      	b.n	8009fc8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f7ff ff30 	bl	8009e28 <HAL_UART_RxHalfCpltCallback>
}
 8009fc8:	bf00      	nop
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fec:	2b80      	cmp	r3, #128	@ 0x80
 8009fee:	bf0c      	ite	eq
 8009ff0:	2301      	moveq	r3, #1
 8009ff2:	2300      	movne	r3, #0
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b21      	cmp	r3, #33	@ 0x21
 800a002:	d108      	bne.n	800a016 <UART_DMAError+0x46>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d005      	beq.n	800a016 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2200      	movs	r2, #0
 800a00e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a010:	68b8      	ldr	r0, [r7, #8]
 800a012:	f000 f91b 	bl	800a24c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a020:	2b40      	cmp	r3, #64	@ 0x40
 800a022:	bf0c      	ite	eq
 800a024:	2301      	moveq	r3, #1
 800a026:	2300      	movne	r3, #0
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b22      	cmp	r3, #34	@ 0x22
 800a036:	d108      	bne.n	800a04a <UART_DMAError+0x7a>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2200      	movs	r2, #0
 800a042:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a044:	68b8      	ldr	r0, [r7, #8]
 800a046:	f000 f929 	bl	800a29c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a04e:	f043 0210 	orr.w	r2, r3, #16
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a056:	68b8      	ldr	r0, [r7, #8]
 800a058:	f7ff fef0 	bl	8009e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a05c:	bf00      	nop
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	4613      	mov	r3, r2
 800a072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a074:	e03b      	b.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07c:	d037      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a07e:	f7fb fb01 	bl	8005684 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	6a3a      	ldr	r2, [r7, #32]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d302      	bcc.n	800a094 <UART_WaitOnFlagUntilTimeout+0x30>
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e03a      	b.n	800a10e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f003 0304 	and.w	r3, r3, #4
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d023      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x8a>
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b80      	cmp	r3, #128	@ 0x80
 800a0aa:	d020      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x8a>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b40      	cmp	r3, #64	@ 0x40
 800a0b0:	d01d      	beq.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0308 	and.w	r3, r3, #8
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d116      	bne.n	800a0ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	617b      	str	r3, [r7, #20]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	617b      	str	r3, [r7, #20]
 800a0d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 f8e0 	bl	800a29c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2208      	movs	r2, #8
 800a0e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e00f      	b.n	800a10e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	bf0c      	ite	eq
 800a0fe:	2301      	moveq	r3, #1
 800a100:	2300      	movne	r3, #0
 800a102:	b2db      	uxtb	r3, r3
 800a104:	461a      	mov	r2, r3
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d0b4      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b098      	sub	sp, #96	@ 0x60
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	88fa      	ldrh	r2, [r7, #6]
 800a130:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2222      	movs	r2, #34	@ 0x22
 800a13c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a144:	4a3e      	ldr	r2, [pc, #248]	@ (800a240 <UART_Start_Receive_DMA+0x128>)
 800a146:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a14c:	4a3d      	ldr	r2, [pc, #244]	@ (800a244 <UART_Start_Receive_DMA+0x12c>)
 800a14e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a154:	4a3c      	ldr	r2, [pc, #240]	@ (800a248 <UART_Start_Receive_DMA+0x130>)
 800a156:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a15c:	2200      	movs	r2, #0
 800a15e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a160:	f107 0308 	add.w	r3, r7, #8
 800a164:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3304      	adds	r3, #4
 800a170:	4619      	mov	r1, r3
 800a172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	88fb      	ldrh	r3, [r7, #6]
 800a178:	f7fc f874 	bl	8006264 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a17c:	2300      	movs	r3, #0
 800a17e:	613b      	str	r3, [r7, #16]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	613b      	str	r3, [r7, #16]
 800a190:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d019      	beq.n	800a1ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	330c      	adds	r3, #12
 800a1b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a1c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a1c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e5      	bne.n	800a19a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3314      	adds	r3, #20
 800a1d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e0:	f043 0301 	orr.w	r3, r3, #1
 800a1e4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3314      	adds	r3, #20
 800a1ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a1f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a1f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e5      	bne.n	800a1ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3314      	adds	r3, #20
 800a208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	617b      	str	r3, [r7, #20]
   return(result);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a218:	653b      	str	r3, [r7, #80]	@ 0x50
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3314      	adds	r3, #20
 800a220:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a222:	627a      	str	r2, [r7, #36]	@ 0x24
 800a224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6a39      	ldr	r1, [r7, #32]
 800a228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e5      	bne.n	800a202 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3760      	adds	r7, #96	@ 0x60
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	08009e69 	.word	0x08009e69
 800a244:	08009f95 	.word	0x08009f95
 800a248:	08009fd1 	.word	0x08009fd1

0800a24c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b089      	sub	sp, #36	@ 0x24
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	330c      	adds	r3, #12
 800a25a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	60bb      	str	r3, [r7, #8]
   return(result);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a26a:	61fb      	str	r3, [r7, #28]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	330c      	adds	r3, #12
 800a272:	69fa      	ldr	r2, [r7, #28]
 800a274:	61ba      	str	r2, [r7, #24]
 800a276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a278:	6979      	ldr	r1, [r7, #20]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	e841 2300 	strex	r3, r2, [r1]
 800a280:	613b      	str	r3, [r7, #16]
   return(result);
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e5      	bne.n	800a254 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2220      	movs	r2, #32
 800a28c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a290:	bf00      	nop
 800a292:	3724      	adds	r7, #36	@ 0x24
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b095      	sub	sp, #84	@ 0x54
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	330c      	adds	r3, #12
 800a2c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2c4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e5      	bne.n	800a2a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3314      	adds	r3, #20
 800a2de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	f023 0301 	bic.w	r3, r3, #1
 800a2ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3314      	adds	r3, #20
 800a2f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e5      	bne.n	800a2d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a310:	2b01      	cmp	r3, #1
 800a312:	d119      	bne.n	800a348 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	330c      	adds	r3, #12
 800a31a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	60bb      	str	r3, [r7, #8]
   return(result);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	f023 0310 	bic.w	r3, r3, #16
 800a32a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	330c      	adds	r3, #12
 800a332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a334:	61ba      	str	r2, [r7, #24]
 800a336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6979      	ldr	r1, [r7, #20]
 800a33a:	69ba      	ldr	r2, [r7, #24]
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	613b      	str	r3, [r7, #16]
   return(result);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e5      	bne.n	800a314 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2220      	movs	r2, #32
 800a34c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a356:	bf00      	nop
 800a358:	3754      	adds	r7, #84	@ 0x54
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7ff fd5d 	bl	8009e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b085      	sub	sp, #20
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b21      	cmp	r3, #33	@ 0x21
 800a39c:	d13e      	bne.n	800a41c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3a6:	d114      	bne.n	800a3d2 <UART_Transmit_IT+0x48>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d110      	bne.n	800a3d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	881b      	ldrh	r3, [r3, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	1c9a      	adds	r2, r3, #2
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	621a      	str	r2, [r3, #32]
 800a3d0:	e008      	b.n	800a3e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	1c59      	adds	r1, r3, #1
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	6211      	str	r1, [r2, #32]
 800a3dc:	781a      	ldrb	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10f      	bne.n	800a418 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a406:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a416:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	e000      	b.n	800a41e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a41c:	2302      	movs	r3, #2
  }
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a440:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2220      	movs	r2, #32
 800a446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff fce2 	bl	8009e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b08c      	sub	sp, #48	@ 0x30
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b22      	cmp	r3, #34	@ 0x22
 800a46c:	f040 80ae 	bne.w	800a5cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a478:	d117      	bne.n	800a4aa <UART_Receive_IT+0x50>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d113      	bne.n	800a4aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a482:	2300      	movs	r3, #0
 800a484:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	b29b      	uxth	r3, r3
 800a494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a498:	b29a      	uxth	r2, r3
 800a49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a2:	1c9a      	adds	r2, r3, #2
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a4a8:	e026      	b.n	800a4f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4bc:	d007      	beq.n	800a4ce <UART_Receive_IT+0x74>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <UART_Receive_IT+0x82>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d106      	bne.n	800a4dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d8:	701a      	strb	r2, [r3, #0]
 800a4da:	e008      	b.n	800a4ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	3b01      	subs	r3, #1
 800a500:	b29b      	uxth	r3, r3
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	4619      	mov	r1, r3
 800a506:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d15d      	bne.n	800a5c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68da      	ldr	r2, [r3, #12]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f022 0220 	bic.w	r2, r2, #32
 800a51a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a52a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	695a      	ldr	r2, [r3, #20]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 0201 	bic.w	r2, r2, #1
 800a53a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2220      	movs	r2, #32
 800a540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d135      	bne.n	800a5be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	330c      	adds	r3, #12
 800a55e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	e853 3f00 	ldrex	r3, [r3]
 800a566:	613b      	str	r3, [r7, #16]
   return(result);
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f023 0310 	bic.w	r3, r3, #16
 800a56e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	330c      	adds	r3, #12
 800a576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a578:	623a      	str	r2, [r7, #32]
 800a57a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57c:	69f9      	ldr	r1, [r7, #28]
 800a57e:	6a3a      	ldr	r2, [r7, #32]
 800a580:	e841 2300 	strex	r3, r2, [r1]
 800a584:	61bb      	str	r3, [r7, #24]
   return(result);
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1e5      	bne.n	800a558 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0310 	and.w	r3, r3, #16
 800a596:	2b10      	cmp	r3, #16
 800a598:	d10a      	bne.n	800a5b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a59a:	2300      	movs	r3, #0
 800a59c:	60fb      	str	r3, [r7, #12]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	60fb      	str	r3, [r7, #12]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff fc4a 	bl	8009e50 <HAL_UARTEx_RxEventCallback>
 800a5bc:	e002      	b.n	800a5c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7f8 ff34 	bl	800342c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	e002      	b.n	800a5ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e000      	b.n	800a5ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a5cc:	2302      	movs	r3, #2
  }
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3730      	adds	r7, #48	@ 0x30
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5dc:	b0c0      	sub	sp, #256	@ 0x100
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f4:	68d9      	ldr	r1, [r3, #12]
 800a5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	ea40 0301 	orr.w	r3, r0, r1
 800a600:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	431a      	orrs	r2, r3
 800a610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	431a      	orrs	r2, r3
 800a618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	4313      	orrs	r3, r2
 800a620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a630:	f021 010c 	bic.w	r1, r1, #12
 800a634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a63e:	430b      	orrs	r3, r1
 800a640:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a64e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a652:	6999      	ldr	r1, [r3, #24]
 800a654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	ea40 0301 	orr.w	r3, r0, r1
 800a65e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	4b8f      	ldr	r3, [pc, #572]	@ (800a8a4 <UART_SetConfig+0x2cc>)
 800a668:	429a      	cmp	r2, r3
 800a66a:	d005      	beq.n	800a678 <UART_SetConfig+0xa0>
 800a66c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b8d      	ldr	r3, [pc, #564]	@ (800a8a8 <UART_SetConfig+0x2d0>)
 800a674:	429a      	cmp	r2, r3
 800a676:	d104      	bne.n	800a682 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a678:	f7fe f8c2 	bl	8008800 <HAL_RCC_GetPCLK2Freq>
 800a67c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a680:	e003      	b.n	800a68a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a682:	f7fe f8a9 	bl	80087d8 <HAL_RCC_GetPCLK1Freq>
 800a686:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a68e:	69db      	ldr	r3, [r3, #28]
 800a690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a694:	f040 810c 	bne.w	800a8b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a69c:	2200      	movs	r2, #0
 800a69e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a6a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a6a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	1891      	adds	r1, r2, r2
 800a6b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a6b2:	415b      	adcs	r3, r3
 800a6b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	eb12 0801 	adds.w	r8, r2, r1
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	eb43 0901 	adc.w	r9, r3, r1
 800a6c6:	f04f 0200 	mov.w	r2, #0
 800a6ca:	f04f 0300 	mov.w	r3, #0
 800a6ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6da:	4690      	mov	r8, r2
 800a6dc:	4699      	mov	r9, r3
 800a6de:	4623      	mov	r3, r4
 800a6e0:	eb18 0303 	adds.w	r3, r8, r3
 800a6e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	eb49 0303 	adc.w	r3, r9, r3
 800a6ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a6fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a702:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a706:	460b      	mov	r3, r1
 800a708:	18db      	adds	r3, r3, r3
 800a70a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a70c:	4613      	mov	r3, r2
 800a70e:	eb42 0303 	adc.w	r3, r2, r3
 800a712:	657b      	str	r3, [r7, #84]	@ 0x54
 800a714:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a718:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a71c:	f7f6 fab4 	bl	8000c88 <__aeabi_uldivmod>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4b61      	ldr	r3, [pc, #388]	@ (800a8ac <UART_SetConfig+0x2d4>)
 800a726:	fba3 2302 	umull	r2, r3, r3, r2
 800a72a:	095b      	lsrs	r3, r3, #5
 800a72c:	011c      	lsls	r4, r3, #4
 800a72e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a732:	2200      	movs	r2, #0
 800a734:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a738:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a73c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a740:	4642      	mov	r2, r8
 800a742:	464b      	mov	r3, r9
 800a744:	1891      	adds	r1, r2, r2
 800a746:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a748:	415b      	adcs	r3, r3
 800a74a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a74c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a750:	4641      	mov	r1, r8
 800a752:	eb12 0a01 	adds.w	sl, r2, r1
 800a756:	4649      	mov	r1, r9
 800a758:	eb43 0b01 	adc.w	fp, r3, r1
 800a75c:	f04f 0200 	mov.w	r2, #0
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a768:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a76c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a770:	4692      	mov	sl, r2
 800a772:	469b      	mov	fp, r3
 800a774:	4643      	mov	r3, r8
 800a776:	eb1a 0303 	adds.w	r3, sl, r3
 800a77a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a77e:	464b      	mov	r3, r9
 800a780:	eb4b 0303 	adc.w	r3, fp, r3
 800a784:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a794:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a798:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a79c:	460b      	mov	r3, r1
 800a79e:	18db      	adds	r3, r3, r3
 800a7a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	eb42 0303 	adc.w	r3, r2, r3
 800a7a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a7ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a7b2:	f7f6 fa69 	bl	8000c88 <__aeabi_uldivmod>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a8ac <UART_SetConfig+0x2d4>)
 800a7be:	fba3 2301 	umull	r2, r3, r3, r1
 800a7c2:	095b      	lsrs	r3, r3, #5
 800a7c4:	2264      	movs	r2, #100	@ 0x64
 800a7c6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ca:	1acb      	subs	r3, r1, r3
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a7d2:	4b36      	ldr	r3, [pc, #216]	@ (800a8ac <UART_SetConfig+0x2d4>)
 800a7d4:	fba3 2302 	umull	r2, r3, r3, r2
 800a7d8:	095b      	lsrs	r3, r3, #5
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a7e0:	441c      	add	r4, r3
 800a7e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a7f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a7f4:	4642      	mov	r2, r8
 800a7f6:	464b      	mov	r3, r9
 800a7f8:	1891      	adds	r1, r2, r2
 800a7fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a7fc:	415b      	adcs	r3, r3
 800a7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a800:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a804:	4641      	mov	r1, r8
 800a806:	1851      	adds	r1, r2, r1
 800a808:	6339      	str	r1, [r7, #48]	@ 0x30
 800a80a:	4649      	mov	r1, r9
 800a80c:	414b      	adcs	r3, r1
 800a80e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a810:	f04f 0200 	mov.w	r2, #0
 800a814:	f04f 0300 	mov.w	r3, #0
 800a818:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a81c:	4659      	mov	r1, fp
 800a81e:	00cb      	lsls	r3, r1, #3
 800a820:	4651      	mov	r1, sl
 800a822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a826:	4651      	mov	r1, sl
 800a828:	00ca      	lsls	r2, r1, #3
 800a82a:	4610      	mov	r0, r2
 800a82c:	4619      	mov	r1, r3
 800a82e:	4603      	mov	r3, r0
 800a830:	4642      	mov	r2, r8
 800a832:	189b      	adds	r3, r3, r2
 800a834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a838:	464b      	mov	r3, r9
 800a83a:	460a      	mov	r2, r1
 800a83c:	eb42 0303 	adc.w	r3, r2, r3
 800a840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a850:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a854:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a858:	460b      	mov	r3, r1
 800a85a:	18db      	adds	r3, r3, r3
 800a85c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a85e:	4613      	mov	r3, r2
 800a860:	eb42 0303 	adc.w	r3, r2, r3
 800a864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a86a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a86e:	f7f6 fa0b 	bl	8000c88 <__aeabi_uldivmod>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	4b0d      	ldr	r3, [pc, #52]	@ (800a8ac <UART_SetConfig+0x2d4>)
 800a878:	fba3 1302 	umull	r1, r3, r3, r2
 800a87c:	095b      	lsrs	r3, r3, #5
 800a87e:	2164      	movs	r1, #100	@ 0x64
 800a880:	fb01 f303 	mul.w	r3, r1, r3
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	3332      	adds	r3, #50	@ 0x32
 800a88a:	4a08      	ldr	r2, [pc, #32]	@ (800a8ac <UART_SetConfig+0x2d4>)
 800a88c:	fba2 2303 	umull	r2, r3, r2, r3
 800a890:	095b      	lsrs	r3, r3, #5
 800a892:	f003 0207 	and.w	r2, r3, #7
 800a896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4422      	add	r2, r4
 800a89e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8a0:	e106      	b.n	800aab0 <UART_SetConfig+0x4d8>
 800a8a2:	bf00      	nop
 800a8a4:	40011000 	.word	0x40011000
 800a8a8:	40011400 	.word	0x40011400
 800a8ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a8ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a8be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a8c2:	4642      	mov	r2, r8
 800a8c4:	464b      	mov	r3, r9
 800a8c6:	1891      	adds	r1, r2, r2
 800a8c8:	6239      	str	r1, [r7, #32]
 800a8ca:	415b      	adcs	r3, r3
 800a8cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8d2:	4641      	mov	r1, r8
 800a8d4:	1854      	adds	r4, r2, r1
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	eb43 0501 	adc.w	r5, r3, r1
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	f04f 0300 	mov.w	r3, #0
 800a8e4:	00eb      	lsls	r3, r5, #3
 800a8e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8ea:	00e2      	lsls	r2, r4, #3
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	461d      	mov	r5, r3
 800a8f0:	4643      	mov	r3, r8
 800a8f2:	18e3      	adds	r3, r4, r3
 800a8f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8f8:	464b      	mov	r3, r9
 800a8fa:	eb45 0303 	adc.w	r3, r5, r3
 800a8fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a90e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a912:	f04f 0200 	mov.w	r2, #0
 800a916:	f04f 0300 	mov.w	r3, #0
 800a91a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a91e:	4629      	mov	r1, r5
 800a920:	008b      	lsls	r3, r1, #2
 800a922:	4621      	mov	r1, r4
 800a924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a928:	4621      	mov	r1, r4
 800a92a:	008a      	lsls	r2, r1, #2
 800a92c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a930:	f7f6 f9aa 	bl	8000c88 <__aeabi_uldivmod>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4b60      	ldr	r3, [pc, #384]	@ (800aabc <UART_SetConfig+0x4e4>)
 800a93a:	fba3 2302 	umull	r2, r3, r3, r2
 800a93e:	095b      	lsrs	r3, r3, #5
 800a940:	011c      	lsls	r4, r3, #4
 800a942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a946:	2200      	movs	r2, #0
 800a948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a94c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a950:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a954:	4642      	mov	r2, r8
 800a956:	464b      	mov	r3, r9
 800a958:	1891      	adds	r1, r2, r2
 800a95a:	61b9      	str	r1, [r7, #24]
 800a95c:	415b      	adcs	r3, r3
 800a95e:	61fb      	str	r3, [r7, #28]
 800a960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a964:	4641      	mov	r1, r8
 800a966:	1851      	adds	r1, r2, r1
 800a968:	6139      	str	r1, [r7, #16]
 800a96a:	4649      	mov	r1, r9
 800a96c:	414b      	adcs	r3, r1
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	f04f 0200 	mov.w	r2, #0
 800a974:	f04f 0300 	mov.w	r3, #0
 800a978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a97c:	4659      	mov	r1, fp
 800a97e:	00cb      	lsls	r3, r1, #3
 800a980:	4651      	mov	r1, sl
 800a982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a986:	4651      	mov	r1, sl
 800a988:	00ca      	lsls	r2, r1, #3
 800a98a:	4610      	mov	r0, r2
 800a98c:	4619      	mov	r1, r3
 800a98e:	4603      	mov	r3, r0
 800a990:	4642      	mov	r2, r8
 800a992:	189b      	adds	r3, r3, r2
 800a994:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a998:	464b      	mov	r3, r9
 800a99a:	460a      	mov	r2, r1
 800a99c:	eb42 0303 	adc.w	r3, r2, r3
 800a9a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a9a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a9b0:	f04f 0200 	mov.w	r2, #0
 800a9b4:	f04f 0300 	mov.w	r3, #0
 800a9b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a9bc:	4649      	mov	r1, r9
 800a9be:	008b      	lsls	r3, r1, #2
 800a9c0:	4641      	mov	r1, r8
 800a9c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9c6:	4641      	mov	r1, r8
 800a9c8:	008a      	lsls	r2, r1, #2
 800a9ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a9ce:	f7f6 f95b 	bl	8000c88 <__aeabi_uldivmod>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	4b38      	ldr	r3, [pc, #224]	@ (800aabc <UART_SetConfig+0x4e4>)
 800a9da:	fba3 2301 	umull	r2, r3, r3, r1
 800a9de:	095b      	lsrs	r3, r3, #5
 800a9e0:	2264      	movs	r2, #100	@ 0x64
 800a9e2:	fb02 f303 	mul.w	r3, r2, r3
 800a9e6:	1acb      	subs	r3, r1, r3
 800a9e8:	011b      	lsls	r3, r3, #4
 800a9ea:	3332      	adds	r3, #50	@ 0x32
 800a9ec:	4a33      	ldr	r2, [pc, #204]	@ (800aabc <UART_SetConfig+0x4e4>)
 800a9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f2:	095b      	lsrs	r3, r3, #5
 800a9f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9f8:	441c      	add	r4, r3
 800a9fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9fe:	2200      	movs	r2, #0
 800aa00:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa02:	677a      	str	r2, [r7, #116]	@ 0x74
 800aa04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800aa08:	4642      	mov	r2, r8
 800aa0a:	464b      	mov	r3, r9
 800aa0c:	1891      	adds	r1, r2, r2
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	415b      	adcs	r3, r3
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa18:	4641      	mov	r1, r8
 800aa1a:	1851      	adds	r1, r2, r1
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	4649      	mov	r1, r9
 800aa20:	414b      	adcs	r3, r1
 800aa22:	607b      	str	r3, [r7, #4]
 800aa24:	f04f 0200 	mov.w	r2, #0
 800aa28:	f04f 0300 	mov.w	r3, #0
 800aa2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa30:	4659      	mov	r1, fp
 800aa32:	00cb      	lsls	r3, r1, #3
 800aa34:	4651      	mov	r1, sl
 800aa36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa3a:	4651      	mov	r1, sl
 800aa3c:	00ca      	lsls	r2, r1, #3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	4619      	mov	r1, r3
 800aa42:	4603      	mov	r3, r0
 800aa44:	4642      	mov	r2, r8
 800aa46:	189b      	adds	r3, r3, r2
 800aa48:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	460a      	mov	r2, r1
 800aa4e:	eb42 0303 	adc.w	r3, r2, r3
 800aa52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa5e:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa60:	f04f 0200 	mov.w	r2, #0
 800aa64:	f04f 0300 	mov.w	r3, #0
 800aa68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	008b      	lsls	r3, r1, #2
 800aa70:	4641      	mov	r1, r8
 800aa72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa76:	4641      	mov	r1, r8
 800aa78:	008a      	lsls	r2, r1, #2
 800aa7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa7e:	f7f6 f903 	bl	8000c88 <__aeabi_uldivmod>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4b0d      	ldr	r3, [pc, #52]	@ (800aabc <UART_SetConfig+0x4e4>)
 800aa88:	fba3 1302 	umull	r1, r3, r3, r2
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	2164      	movs	r1, #100	@ 0x64
 800aa90:	fb01 f303 	mul.w	r3, r1, r3
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	3332      	adds	r3, #50	@ 0x32
 800aa9a:	4a08      	ldr	r2, [pc, #32]	@ (800aabc <UART_SetConfig+0x4e4>)
 800aa9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	f003 020f 	and.w	r2, r3, #15
 800aaa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4422      	add	r2, r4
 800aaae:	609a      	str	r2, [r3, #8]
}
 800aab0:	bf00      	nop
 800aab2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aab6:	46bd      	mov	sp, r7
 800aab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aabc:	51eb851f 	.word	0x51eb851f

0800aac0 <abs>:
 800aac0:	2800      	cmp	r0, #0
 800aac2:	bfb8      	it	lt
 800aac4:	4240      	neglt	r0, r0
 800aac6:	4770      	bx	lr

0800aac8 <atoi>:
 800aac8:	220a      	movs	r2, #10
 800aaca:	2100      	movs	r1, #0
 800aacc:	f000 bf6a 	b.w	800b9a4 <strtol>

0800aad0 <malloc>:
 800aad0:	4b02      	ldr	r3, [pc, #8]	@ (800aadc <malloc+0xc>)
 800aad2:	4601      	mov	r1, r0
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	f000 b825 	b.w	800ab24 <_malloc_r>
 800aada:	bf00      	nop
 800aadc:	20000208 	.word	0x20000208

0800aae0 <sbrk_aligned>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	4e0f      	ldr	r6, [pc, #60]	@ (800ab20 <sbrk_aligned+0x40>)
 800aae4:	460c      	mov	r4, r1
 800aae6:	6831      	ldr	r1, [r6, #0]
 800aae8:	4605      	mov	r5, r0
 800aaea:	b911      	cbnz	r1, 800aaf2 <sbrk_aligned+0x12>
 800aaec:	f001 fc2e 	bl	800c34c <_sbrk_r>
 800aaf0:	6030      	str	r0, [r6, #0]
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f001 fc29 	bl	800c34c <_sbrk_r>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d103      	bne.n	800ab06 <sbrk_aligned+0x26>
 800aafe:	f04f 34ff 	mov.w	r4, #4294967295
 800ab02:	4620      	mov	r0, r4
 800ab04:	bd70      	pop	{r4, r5, r6, pc}
 800ab06:	1cc4      	adds	r4, r0, #3
 800ab08:	f024 0403 	bic.w	r4, r4, #3
 800ab0c:	42a0      	cmp	r0, r4
 800ab0e:	d0f8      	beq.n	800ab02 <sbrk_aligned+0x22>
 800ab10:	1a21      	subs	r1, r4, r0
 800ab12:	4628      	mov	r0, r5
 800ab14:	f001 fc1a 	bl	800c34c <_sbrk_r>
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d1f2      	bne.n	800ab02 <sbrk_aligned+0x22>
 800ab1c:	e7ef      	b.n	800aafe <sbrk_aligned+0x1e>
 800ab1e:	bf00      	nop
 800ab20:	20000a40 	.word	0x20000a40

0800ab24 <_malloc_r>:
 800ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	1ccd      	adds	r5, r1, #3
 800ab2a:	f025 0503 	bic.w	r5, r5, #3
 800ab2e:	3508      	adds	r5, #8
 800ab30:	2d0c      	cmp	r5, #12
 800ab32:	bf38      	it	cc
 800ab34:	250c      	movcc	r5, #12
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	4606      	mov	r6, r0
 800ab3a:	db01      	blt.n	800ab40 <_malloc_r+0x1c>
 800ab3c:	42a9      	cmp	r1, r5
 800ab3e:	d904      	bls.n	800ab4a <_malloc_r+0x26>
 800ab40:	230c      	movs	r3, #12
 800ab42:	6033      	str	r3, [r6, #0]
 800ab44:	2000      	movs	r0, #0
 800ab46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac20 <_malloc_r+0xfc>
 800ab4e:	f000 f869 	bl	800ac24 <__malloc_lock>
 800ab52:	f8d8 3000 	ldr.w	r3, [r8]
 800ab56:	461c      	mov	r4, r3
 800ab58:	bb44      	cbnz	r4, 800abac <_malloc_r+0x88>
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f7ff ffbf 	bl	800aae0 <sbrk_aligned>
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	4604      	mov	r4, r0
 800ab66:	d158      	bne.n	800ac1a <_malloc_r+0xf6>
 800ab68:	f8d8 4000 	ldr.w	r4, [r8]
 800ab6c:	4627      	mov	r7, r4
 800ab6e:	2f00      	cmp	r7, #0
 800ab70:	d143      	bne.n	800abfa <_malloc_r+0xd6>
 800ab72:	2c00      	cmp	r4, #0
 800ab74:	d04b      	beq.n	800ac0e <_malloc_r+0xea>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	4639      	mov	r1, r7
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	eb04 0903 	add.w	r9, r4, r3
 800ab80:	f001 fbe4 	bl	800c34c <_sbrk_r>
 800ab84:	4581      	cmp	r9, r0
 800ab86:	d142      	bne.n	800ac0e <_malloc_r+0xea>
 800ab88:	6821      	ldr	r1, [r4, #0]
 800ab8a:	1a6d      	subs	r5, r5, r1
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f7ff ffa6 	bl	800aae0 <sbrk_aligned>
 800ab94:	3001      	adds	r0, #1
 800ab96:	d03a      	beq.n	800ac0e <_malloc_r+0xea>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	442b      	add	r3, r5
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	f8d8 3000 	ldr.w	r3, [r8]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	bb62      	cbnz	r2, 800ac00 <_malloc_r+0xdc>
 800aba6:	f8c8 7000 	str.w	r7, [r8]
 800abaa:	e00f      	b.n	800abcc <_malloc_r+0xa8>
 800abac:	6822      	ldr	r2, [r4, #0]
 800abae:	1b52      	subs	r2, r2, r5
 800abb0:	d420      	bmi.n	800abf4 <_malloc_r+0xd0>
 800abb2:	2a0b      	cmp	r2, #11
 800abb4:	d917      	bls.n	800abe6 <_malloc_r+0xc2>
 800abb6:	1961      	adds	r1, r4, r5
 800abb8:	42a3      	cmp	r3, r4
 800abba:	6025      	str	r5, [r4, #0]
 800abbc:	bf18      	it	ne
 800abbe:	6059      	strne	r1, [r3, #4]
 800abc0:	6863      	ldr	r3, [r4, #4]
 800abc2:	bf08      	it	eq
 800abc4:	f8c8 1000 	streq.w	r1, [r8]
 800abc8:	5162      	str	r2, [r4, r5]
 800abca:	604b      	str	r3, [r1, #4]
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 f82f 	bl	800ac30 <__malloc_unlock>
 800abd2:	f104 000b 	add.w	r0, r4, #11
 800abd6:	1d23      	adds	r3, r4, #4
 800abd8:	f020 0007 	bic.w	r0, r0, #7
 800abdc:	1ac2      	subs	r2, r0, r3
 800abde:	bf1c      	itt	ne
 800abe0:	1a1b      	subne	r3, r3, r0
 800abe2:	50a3      	strne	r3, [r4, r2]
 800abe4:	e7af      	b.n	800ab46 <_malloc_r+0x22>
 800abe6:	6862      	ldr	r2, [r4, #4]
 800abe8:	42a3      	cmp	r3, r4
 800abea:	bf0c      	ite	eq
 800abec:	f8c8 2000 	streq.w	r2, [r8]
 800abf0:	605a      	strne	r2, [r3, #4]
 800abf2:	e7eb      	b.n	800abcc <_malloc_r+0xa8>
 800abf4:	4623      	mov	r3, r4
 800abf6:	6864      	ldr	r4, [r4, #4]
 800abf8:	e7ae      	b.n	800ab58 <_malloc_r+0x34>
 800abfa:	463c      	mov	r4, r7
 800abfc:	687f      	ldr	r7, [r7, #4]
 800abfe:	e7b6      	b.n	800ab6e <_malloc_r+0x4a>
 800ac00:	461a      	mov	r2, r3
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	d1fb      	bne.n	800ac00 <_malloc_r+0xdc>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	6053      	str	r3, [r2, #4]
 800ac0c:	e7de      	b.n	800abcc <_malloc_r+0xa8>
 800ac0e:	230c      	movs	r3, #12
 800ac10:	6033      	str	r3, [r6, #0]
 800ac12:	4630      	mov	r0, r6
 800ac14:	f000 f80c 	bl	800ac30 <__malloc_unlock>
 800ac18:	e794      	b.n	800ab44 <_malloc_r+0x20>
 800ac1a:	6005      	str	r5, [r0, #0]
 800ac1c:	e7d6      	b.n	800abcc <_malloc_r+0xa8>
 800ac1e:	bf00      	nop
 800ac20:	20000a44 	.word	0x20000a44

0800ac24 <__malloc_lock>:
 800ac24:	4801      	ldr	r0, [pc, #4]	@ (800ac2c <__malloc_lock+0x8>)
 800ac26:	f001 bbde 	b.w	800c3e6 <__retarget_lock_acquire_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	20000b88 	.word	0x20000b88

0800ac30 <__malloc_unlock>:
 800ac30:	4801      	ldr	r0, [pc, #4]	@ (800ac38 <__malloc_unlock+0x8>)
 800ac32:	f001 bbd9 	b.w	800c3e8 <__retarget_lock_release_recursive>
 800ac36:	bf00      	nop
 800ac38:	20000b88 	.word	0x20000b88

0800ac3c <_realloc_r>:
 800ac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac40:	4607      	mov	r7, r0
 800ac42:	4614      	mov	r4, r2
 800ac44:	460d      	mov	r5, r1
 800ac46:	b921      	cbnz	r1, 800ac52 <_realloc_r+0x16>
 800ac48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	f7ff bf69 	b.w	800ab24 <_malloc_r>
 800ac52:	b92a      	cbnz	r2, 800ac60 <_realloc_r+0x24>
 800ac54:	f001 fbe6 	bl	800c424 <_free_r>
 800ac58:	4625      	mov	r5, r4
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac60:	f002 fc20 	bl	800d4a4 <_malloc_usable_size_r>
 800ac64:	4284      	cmp	r4, r0
 800ac66:	4606      	mov	r6, r0
 800ac68:	d802      	bhi.n	800ac70 <_realloc_r+0x34>
 800ac6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac6e:	d8f4      	bhi.n	800ac5a <_realloc_r+0x1e>
 800ac70:	4621      	mov	r1, r4
 800ac72:	4638      	mov	r0, r7
 800ac74:	f7ff ff56 	bl	800ab24 <_malloc_r>
 800ac78:	4680      	mov	r8, r0
 800ac7a:	b908      	cbnz	r0, 800ac80 <_realloc_r+0x44>
 800ac7c:	4645      	mov	r5, r8
 800ac7e:	e7ec      	b.n	800ac5a <_realloc_r+0x1e>
 800ac80:	42b4      	cmp	r4, r6
 800ac82:	4622      	mov	r2, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	bf28      	it	cs
 800ac88:	4632      	movcs	r2, r6
 800ac8a:	f001 fbae 	bl	800c3ea <memcpy>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4638      	mov	r0, r7
 800ac92:	f001 fbc7 	bl	800c424 <_free_r>
 800ac96:	e7f1      	b.n	800ac7c <_realloc_r+0x40>

0800ac98 <sulp>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	460d      	mov	r5, r1
 800ac9e:	ec45 4b10 	vmov	d0, r4, r5
 800aca2:	4616      	mov	r6, r2
 800aca4:	f002 fac0 	bl	800d228 <__ulp>
 800aca8:	ec51 0b10 	vmov	r0, r1, d0
 800acac:	b17e      	cbz	r6, 800acce <sulp+0x36>
 800acae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acb2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	dd09      	ble.n	800acce <sulp+0x36>
 800acba:	051b      	lsls	r3, r3, #20
 800acbc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800acc0:	2400      	movs	r4, #0
 800acc2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800acc6:	4622      	mov	r2, r4
 800acc8:	462b      	mov	r3, r5
 800acca:	f7f5 fc95 	bl	80005f8 <__aeabi_dmul>
 800acce:	ec41 0b10 	vmov	d0, r0, r1
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	0000      	movs	r0, r0
	...

0800acd8 <_strtod_l>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	b09f      	sub	sp, #124	@ 0x7c
 800acde:	460c      	mov	r4, r1
 800ace0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ace2:	2200      	movs	r2, #0
 800ace4:	921a      	str	r2, [sp, #104]	@ 0x68
 800ace6:	9005      	str	r0, [sp, #20]
 800ace8:	f04f 0a00 	mov.w	sl, #0
 800acec:	f04f 0b00 	mov.w	fp, #0
 800acf0:	460a      	mov	r2, r1
 800acf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800acf4:	7811      	ldrb	r1, [r2, #0]
 800acf6:	292b      	cmp	r1, #43	@ 0x2b
 800acf8:	d04a      	beq.n	800ad90 <_strtod_l+0xb8>
 800acfa:	d838      	bhi.n	800ad6e <_strtod_l+0x96>
 800acfc:	290d      	cmp	r1, #13
 800acfe:	d832      	bhi.n	800ad66 <_strtod_l+0x8e>
 800ad00:	2908      	cmp	r1, #8
 800ad02:	d832      	bhi.n	800ad6a <_strtod_l+0x92>
 800ad04:	2900      	cmp	r1, #0
 800ad06:	d03b      	beq.n	800ad80 <_strtod_l+0xa8>
 800ad08:	2200      	movs	r2, #0
 800ad0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ad0e:	782a      	ldrb	r2, [r5, #0]
 800ad10:	2a30      	cmp	r2, #48	@ 0x30
 800ad12:	f040 80b2 	bne.w	800ae7a <_strtod_l+0x1a2>
 800ad16:	786a      	ldrb	r2, [r5, #1]
 800ad18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad1c:	2a58      	cmp	r2, #88	@ 0x58
 800ad1e:	d16e      	bne.n	800adfe <_strtod_l+0x126>
 800ad20:	9302      	str	r3, [sp, #8]
 800ad22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	ab1a      	add	r3, sp, #104	@ 0x68
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	4a8f      	ldr	r2, [pc, #572]	@ (800af68 <_strtod_l+0x290>)
 800ad2c:	9805      	ldr	r0, [sp, #20]
 800ad2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ad30:	a919      	add	r1, sp, #100	@ 0x64
 800ad32:	f001 fc29 	bl	800c588 <__gethex>
 800ad36:	f010 060f 	ands.w	r6, r0, #15
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	d005      	beq.n	800ad4a <_strtod_l+0x72>
 800ad3e:	2e06      	cmp	r6, #6
 800ad40:	d128      	bne.n	800ad94 <_strtod_l+0xbc>
 800ad42:	3501      	adds	r5, #1
 800ad44:	2300      	movs	r3, #0
 800ad46:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad48:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f040 858e 	bne.w	800b86e <_strtod_l+0xb96>
 800ad52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad54:	b1cb      	cbz	r3, 800ad8a <_strtod_l+0xb2>
 800ad56:	4652      	mov	r2, sl
 800ad58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad5c:	ec43 2b10 	vmov	d0, r2, r3
 800ad60:	b01f      	add	sp, #124	@ 0x7c
 800ad62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad66:	2920      	cmp	r1, #32
 800ad68:	d1ce      	bne.n	800ad08 <_strtod_l+0x30>
 800ad6a:	3201      	adds	r2, #1
 800ad6c:	e7c1      	b.n	800acf2 <_strtod_l+0x1a>
 800ad6e:	292d      	cmp	r1, #45	@ 0x2d
 800ad70:	d1ca      	bne.n	800ad08 <_strtod_l+0x30>
 800ad72:	2101      	movs	r1, #1
 800ad74:	910e      	str	r1, [sp, #56]	@ 0x38
 800ad76:	1c51      	adds	r1, r2, #1
 800ad78:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad7a:	7852      	ldrb	r2, [r2, #1]
 800ad7c:	2a00      	cmp	r2, #0
 800ad7e:	d1c5      	bne.n	800ad0c <_strtod_l+0x34>
 800ad80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad82:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f040 8570 	bne.w	800b86a <_strtod_l+0xb92>
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	e7e5      	b.n	800ad5c <_strtod_l+0x84>
 800ad90:	2100      	movs	r1, #0
 800ad92:	e7ef      	b.n	800ad74 <_strtod_l+0x9c>
 800ad94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad96:	b13a      	cbz	r2, 800ada8 <_strtod_l+0xd0>
 800ad98:	2135      	movs	r1, #53	@ 0x35
 800ad9a:	a81c      	add	r0, sp, #112	@ 0x70
 800ad9c:	f002 fb3e 	bl	800d41c <__copybits>
 800ada0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ada2:	9805      	ldr	r0, [sp, #20]
 800ada4:	f001 ff14 	bl	800cbd0 <_Bfree>
 800ada8:	3e01      	subs	r6, #1
 800adaa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800adac:	2e04      	cmp	r6, #4
 800adae:	d806      	bhi.n	800adbe <_strtod_l+0xe6>
 800adb0:	e8df f006 	tbb	[pc, r6]
 800adb4:	201d0314 	.word	0x201d0314
 800adb8:	14          	.byte	0x14
 800adb9:	00          	.byte	0x00
 800adba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800adbe:	05e1      	lsls	r1, r4, #23
 800adc0:	bf48      	it	mi
 800adc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800adc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adca:	0d1b      	lsrs	r3, r3, #20
 800adcc:	051b      	lsls	r3, r3, #20
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1bb      	bne.n	800ad4a <_strtod_l+0x72>
 800add2:	f001 fadd 	bl	800c390 <__errno>
 800add6:	2322      	movs	r3, #34	@ 0x22
 800add8:	6003      	str	r3, [r0, #0]
 800adda:	e7b6      	b.n	800ad4a <_strtod_l+0x72>
 800addc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ade0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ade4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ade8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800adec:	e7e7      	b.n	800adbe <_strtod_l+0xe6>
 800adee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800af70 <_strtod_l+0x298>
 800adf2:	e7e4      	b.n	800adbe <_strtod_l+0xe6>
 800adf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800adf8:	f04f 3aff 	mov.w	sl, #4294967295
 800adfc:	e7df      	b.n	800adbe <_strtod_l+0xe6>
 800adfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae04:	785b      	ldrb	r3, [r3, #1]
 800ae06:	2b30      	cmp	r3, #48	@ 0x30
 800ae08:	d0f9      	beq.n	800adfe <_strtod_l+0x126>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d09d      	beq.n	800ad4a <_strtod_l+0x72>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	2700      	movs	r7, #0
 800ae12:	9308      	str	r3, [sp, #32]
 800ae14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae16:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae18:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ae1a:	46b9      	mov	r9, r7
 800ae1c:	220a      	movs	r2, #10
 800ae1e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ae20:	7805      	ldrb	r5, [r0, #0]
 800ae22:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ae26:	b2d9      	uxtb	r1, r3
 800ae28:	2909      	cmp	r1, #9
 800ae2a:	d928      	bls.n	800ae7e <_strtod_l+0x1a6>
 800ae2c:	494f      	ldr	r1, [pc, #316]	@ (800af6c <_strtod_l+0x294>)
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f001 fa32 	bl	800c298 <strncmp>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d032      	beq.n	800ae9e <_strtod_l+0x1c6>
 800ae38:	2000      	movs	r0, #0
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae3e:	464d      	mov	r5, r9
 800ae40:	4603      	mov	r3, r0
 800ae42:	2a65      	cmp	r2, #101	@ 0x65
 800ae44:	d001      	beq.n	800ae4a <_strtod_l+0x172>
 800ae46:	2a45      	cmp	r2, #69	@ 0x45
 800ae48:	d114      	bne.n	800ae74 <_strtod_l+0x19c>
 800ae4a:	b91d      	cbnz	r5, 800ae54 <_strtod_l+0x17c>
 800ae4c:	9a08      	ldr	r2, [sp, #32]
 800ae4e:	4302      	orrs	r2, r0
 800ae50:	d096      	beq.n	800ad80 <_strtod_l+0xa8>
 800ae52:	2500      	movs	r5, #0
 800ae54:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae56:	1c62      	adds	r2, r4, #1
 800ae58:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae5a:	7862      	ldrb	r2, [r4, #1]
 800ae5c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae5e:	d07a      	beq.n	800af56 <_strtod_l+0x27e>
 800ae60:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae62:	d07e      	beq.n	800af62 <_strtod_l+0x28a>
 800ae64:	f04f 0c00 	mov.w	ip, #0
 800ae68:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae6c:	2909      	cmp	r1, #9
 800ae6e:	f240 8085 	bls.w	800af7c <_strtod_l+0x2a4>
 800ae72:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae74:	f04f 0800 	mov.w	r8, #0
 800ae78:	e0a5      	b.n	800afc6 <_strtod_l+0x2ee>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e7c8      	b.n	800ae10 <_strtod_l+0x138>
 800ae7e:	f1b9 0f08 	cmp.w	r9, #8
 800ae82:	bfd8      	it	le
 800ae84:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ae86:	f100 0001 	add.w	r0, r0, #1
 800ae8a:	bfda      	itte	le
 800ae8c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ae92:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ae96:	f109 0901 	add.w	r9, r9, #1
 800ae9a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae9c:	e7bf      	b.n	800ae1e <_strtod_l+0x146>
 800ae9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aea4:	785a      	ldrb	r2, [r3, #1]
 800aea6:	f1b9 0f00 	cmp.w	r9, #0
 800aeaa:	d03b      	beq.n	800af24 <_strtod_l+0x24c>
 800aeac:	900a      	str	r0, [sp, #40]	@ 0x28
 800aeae:	464d      	mov	r5, r9
 800aeb0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aeb4:	2b09      	cmp	r3, #9
 800aeb6:	d912      	bls.n	800aede <_strtod_l+0x206>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e7c2      	b.n	800ae42 <_strtod_l+0x16a>
 800aebc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	9219      	str	r2, [sp, #100]	@ 0x64
 800aec2:	785a      	ldrb	r2, [r3, #1]
 800aec4:	3001      	adds	r0, #1
 800aec6:	2a30      	cmp	r2, #48	@ 0x30
 800aec8:	d0f8      	beq.n	800aebc <_strtod_l+0x1e4>
 800aeca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aece:	2b08      	cmp	r3, #8
 800aed0:	f200 84d2 	bhi.w	800b878 <_strtod_l+0xba0>
 800aed4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aed6:	900a      	str	r0, [sp, #40]	@ 0x28
 800aed8:	2000      	movs	r0, #0
 800aeda:	930c      	str	r3, [sp, #48]	@ 0x30
 800aedc:	4605      	mov	r5, r0
 800aede:	3a30      	subs	r2, #48	@ 0x30
 800aee0:	f100 0301 	add.w	r3, r0, #1
 800aee4:	d018      	beq.n	800af18 <_strtod_l+0x240>
 800aee6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aee8:	4419      	add	r1, r3
 800aeea:	910a      	str	r1, [sp, #40]	@ 0x28
 800aeec:	462e      	mov	r6, r5
 800aeee:	f04f 0e0a 	mov.w	lr, #10
 800aef2:	1c71      	adds	r1, r6, #1
 800aef4:	eba1 0c05 	sub.w	ip, r1, r5
 800aef8:	4563      	cmp	r3, ip
 800aefa:	dc15      	bgt.n	800af28 <_strtod_l+0x250>
 800aefc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800af00:	182b      	adds	r3, r5, r0
 800af02:	2b08      	cmp	r3, #8
 800af04:	f105 0501 	add.w	r5, r5, #1
 800af08:	4405      	add	r5, r0
 800af0a:	dc1a      	bgt.n	800af42 <_strtod_l+0x26a>
 800af0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af0e:	230a      	movs	r3, #10
 800af10:	fb03 2301 	mla	r3, r3, r1, r2
 800af14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af16:	2300      	movs	r3, #0
 800af18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af1a:	1c51      	adds	r1, r2, #1
 800af1c:	9119      	str	r1, [sp, #100]	@ 0x64
 800af1e:	7852      	ldrb	r2, [r2, #1]
 800af20:	4618      	mov	r0, r3
 800af22:	e7c5      	b.n	800aeb0 <_strtod_l+0x1d8>
 800af24:	4648      	mov	r0, r9
 800af26:	e7ce      	b.n	800aec6 <_strtod_l+0x1ee>
 800af28:	2e08      	cmp	r6, #8
 800af2a:	dc05      	bgt.n	800af38 <_strtod_l+0x260>
 800af2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800af2e:	fb0e f606 	mul.w	r6, lr, r6
 800af32:	960b      	str	r6, [sp, #44]	@ 0x2c
 800af34:	460e      	mov	r6, r1
 800af36:	e7dc      	b.n	800aef2 <_strtod_l+0x21a>
 800af38:	2910      	cmp	r1, #16
 800af3a:	bfd8      	it	le
 800af3c:	fb0e f707 	mulle.w	r7, lr, r7
 800af40:	e7f8      	b.n	800af34 <_strtod_l+0x25c>
 800af42:	2b0f      	cmp	r3, #15
 800af44:	bfdc      	itt	le
 800af46:	230a      	movle	r3, #10
 800af48:	fb03 2707 	mlale	r7, r3, r7, r2
 800af4c:	e7e3      	b.n	800af16 <_strtod_l+0x23e>
 800af4e:	2300      	movs	r3, #0
 800af50:	930a      	str	r3, [sp, #40]	@ 0x28
 800af52:	2301      	movs	r3, #1
 800af54:	e77a      	b.n	800ae4c <_strtod_l+0x174>
 800af56:	f04f 0c00 	mov.w	ip, #0
 800af5a:	1ca2      	adds	r2, r4, #2
 800af5c:	9219      	str	r2, [sp, #100]	@ 0x64
 800af5e:	78a2      	ldrb	r2, [r4, #2]
 800af60:	e782      	b.n	800ae68 <_strtod_l+0x190>
 800af62:	f04f 0c01 	mov.w	ip, #1
 800af66:	e7f8      	b.n	800af5a <_strtod_l+0x282>
 800af68:	0800fde0 	.word	0x0800fde0
 800af6c:	0800fc44 	.word	0x0800fc44
 800af70:	7ff00000 	.word	0x7ff00000
 800af74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af76:	1c51      	adds	r1, r2, #1
 800af78:	9119      	str	r1, [sp, #100]	@ 0x64
 800af7a:	7852      	ldrb	r2, [r2, #1]
 800af7c:	2a30      	cmp	r2, #48	@ 0x30
 800af7e:	d0f9      	beq.n	800af74 <_strtod_l+0x29c>
 800af80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800af84:	2908      	cmp	r1, #8
 800af86:	f63f af75 	bhi.w	800ae74 <_strtod_l+0x19c>
 800af8a:	3a30      	subs	r2, #48	@ 0x30
 800af8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800af8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af90:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af92:	f04f 080a 	mov.w	r8, #10
 800af96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af98:	1c56      	adds	r6, r2, #1
 800af9a:	9619      	str	r6, [sp, #100]	@ 0x64
 800af9c:	7852      	ldrb	r2, [r2, #1]
 800af9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800afa2:	f1be 0f09 	cmp.w	lr, #9
 800afa6:	d939      	bls.n	800b01c <_strtod_l+0x344>
 800afa8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800afaa:	1a76      	subs	r6, r6, r1
 800afac:	2e08      	cmp	r6, #8
 800afae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800afb2:	dc03      	bgt.n	800afbc <_strtod_l+0x2e4>
 800afb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afb6:	4588      	cmp	r8, r1
 800afb8:	bfa8      	it	ge
 800afba:	4688      	movge	r8, r1
 800afbc:	f1bc 0f00 	cmp.w	ip, #0
 800afc0:	d001      	beq.n	800afc6 <_strtod_l+0x2ee>
 800afc2:	f1c8 0800 	rsb	r8, r8, #0
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	d14e      	bne.n	800b068 <_strtod_l+0x390>
 800afca:	9908      	ldr	r1, [sp, #32]
 800afcc:	4308      	orrs	r0, r1
 800afce:	f47f aebc 	bne.w	800ad4a <_strtod_l+0x72>
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f47f aed4 	bne.w	800ad80 <_strtod_l+0xa8>
 800afd8:	2a69      	cmp	r2, #105	@ 0x69
 800afda:	d028      	beq.n	800b02e <_strtod_l+0x356>
 800afdc:	dc25      	bgt.n	800b02a <_strtod_l+0x352>
 800afde:	2a49      	cmp	r2, #73	@ 0x49
 800afe0:	d025      	beq.n	800b02e <_strtod_l+0x356>
 800afe2:	2a4e      	cmp	r2, #78	@ 0x4e
 800afe4:	f47f aecc 	bne.w	800ad80 <_strtod_l+0xa8>
 800afe8:	499a      	ldr	r1, [pc, #616]	@ (800b254 <_strtod_l+0x57c>)
 800afea:	a819      	add	r0, sp, #100	@ 0x64
 800afec:	f001 fcee 	bl	800c9cc <__match>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	f43f aec5 	beq.w	800ad80 <_strtod_l+0xa8>
 800aff6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	2b28      	cmp	r3, #40	@ 0x28
 800affc:	d12e      	bne.n	800b05c <_strtod_l+0x384>
 800affe:	4996      	ldr	r1, [pc, #600]	@ (800b258 <_strtod_l+0x580>)
 800b000:	aa1c      	add	r2, sp, #112	@ 0x70
 800b002:	a819      	add	r0, sp, #100	@ 0x64
 800b004:	f001 fcf6 	bl	800c9f4 <__hexnan>
 800b008:	2805      	cmp	r0, #5
 800b00a:	d127      	bne.n	800b05c <_strtod_l+0x384>
 800b00c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b00e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b012:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b016:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b01a:	e696      	b.n	800ad4a <_strtod_l+0x72>
 800b01c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b01e:	fb08 2101 	mla	r1, r8, r1, r2
 800b022:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b026:	9209      	str	r2, [sp, #36]	@ 0x24
 800b028:	e7b5      	b.n	800af96 <_strtod_l+0x2be>
 800b02a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b02c:	e7da      	b.n	800afe4 <_strtod_l+0x30c>
 800b02e:	498b      	ldr	r1, [pc, #556]	@ (800b25c <_strtod_l+0x584>)
 800b030:	a819      	add	r0, sp, #100	@ 0x64
 800b032:	f001 fccb 	bl	800c9cc <__match>
 800b036:	2800      	cmp	r0, #0
 800b038:	f43f aea2 	beq.w	800ad80 <_strtod_l+0xa8>
 800b03c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b03e:	4988      	ldr	r1, [pc, #544]	@ (800b260 <_strtod_l+0x588>)
 800b040:	3b01      	subs	r3, #1
 800b042:	a819      	add	r0, sp, #100	@ 0x64
 800b044:	9319      	str	r3, [sp, #100]	@ 0x64
 800b046:	f001 fcc1 	bl	800c9cc <__match>
 800b04a:	b910      	cbnz	r0, 800b052 <_strtod_l+0x37a>
 800b04c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b04e:	3301      	adds	r3, #1
 800b050:	9319      	str	r3, [sp, #100]	@ 0x64
 800b052:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b270 <_strtod_l+0x598>
 800b056:	f04f 0a00 	mov.w	sl, #0
 800b05a:	e676      	b.n	800ad4a <_strtod_l+0x72>
 800b05c:	4881      	ldr	r0, [pc, #516]	@ (800b264 <_strtod_l+0x58c>)
 800b05e:	f001 f9d3 	bl	800c408 <nan>
 800b062:	ec5b ab10 	vmov	sl, fp, d0
 800b066:	e670      	b.n	800ad4a <_strtod_l+0x72>
 800b068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b06a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b06c:	eba8 0303 	sub.w	r3, r8, r3
 800b070:	f1b9 0f00 	cmp.w	r9, #0
 800b074:	bf08      	it	eq
 800b076:	46a9      	moveq	r9, r5
 800b078:	2d10      	cmp	r5, #16
 800b07a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b07c:	462c      	mov	r4, r5
 800b07e:	bfa8      	it	ge
 800b080:	2410      	movge	r4, #16
 800b082:	f7f5 fa3f 	bl	8000504 <__aeabi_ui2d>
 800b086:	2d09      	cmp	r5, #9
 800b088:	4682      	mov	sl, r0
 800b08a:	468b      	mov	fp, r1
 800b08c:	dc13      	bgt.n	800b0b6 <_strtod_l+0x3de>
 800b08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b090:	2b00      	cmp	r3, #0
 800b092:	f43f ae5a 	beq.w	800ad4a <_strtod_l+0x72>
 800b096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b098:	dd78      	ble.n	800b18c <_strtod_l+0x4b4>
 800b09a:	2b16      	cmp	r3, #22
 800b09c:	dc5f      	bgt.n	800b15e <_strtod_l+0x486>
 800b09e:	4972      	ldr	r1, [pc, #456]	@ (800b268 <_strtod_l+0x590>)
 800b0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0a8:	4652      	mov	r2, sl
 800b0aa:	465b      	mov	r3, fp
 800b0ac:	f7f5 faa4 	bl	80005f8 <__aeabi_dmul>
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	468b      	mov	fp, r1
 800b0b4:	e649      	b.n	800ad4a <_strtod_l+0x72>
 800b0b6:	4b6c      	ldr	r3, [pc, #432]	@ (800b268 <_strtod_l+0x590>)
 800b0b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b0c0:	f7f5 fa9a 	bl	80005f8 <__aeabi_dmul>
 800b0c4:	4682      	mov	sl, r0
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	468b      	mov	fp, r1
 800b0ca:	f7f5 fa1b 	bl	8000504 <__aeabi_ui2d>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	4650      	mov	r0, sl
 800b0d4:	4659      	mov	r1, fp
 800b0d6:	f7f5 f8d9 	bl	800028c <__adddf3>
 800b0da:	2d0f      	cmp	r5, #15
 800b0dc:	4682      	mov	sl, r0
 800b0de:	468b      	mov	fp, r1
 800b0e0:	ddd5      	ble.n	800b08e <_strtod_l+0x3b6>
 800b0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e4:	1b2c      	subs	r4, r5, r4
 800b0e6:	441c      	add	r4, r3
 800b0e8:	2c00      	cmp	r4, #0
 800b0ea:	f340 8093 	ble.w	800b214 <_strtod_l+0x53c>
 800b0ee:	f014 030f 	ands.w	r3, r4, #15
 800b0f2:	d00a      	beq.n	800b10a <_strtod_l+0x432>
 800b0f4:	495c      	ldr	r1, [pc, #368]	@ (800b268 <_strtod_l+0x590>)
 800b0f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0fa:	4652      	mov	r2, sl
 800b0fc:	465b      	mov	r3, fp
 800b0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b102:	f7f5 fa79 	bl	80005f8 <__aeabi_dmul>
 800b106:	4682      	mov	sl, r0
 800b108:	468b      	mov	fp, r1
 800b10a:	f034 040f 	bics.w	r4, r4, #15
 800b10e:	d073      	beq.n	800b1f8 <_strtod_l+0x520>
 800b110:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b114:	dd49      	ble.n	800b1aa <_strtod_l+0x4d2>
 800b116:	2400      	movs	r4, #0
 800b118:	46a0      	mov	r8, r4
 800b11a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b11c:	46a1      	mov	r9, r4
 800b11e:	9a05      	ldr	r2, [sp, #20]
 800b120:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b270 <_strtod_l+0x598>
 800b124:	2322      	movs	r3, #34	@ 0x22
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	f04f 0a00 	mov.w	sl, #0
 800b12c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f43f ae0b 	beq.w	800ad4a <_strtod_l+0x72>
 800b134:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b136:	9805      	ldr	r0, [sp, #20]
 800b138:	f001 fd4a 	bl	800cbd0 <_Bfree>
 800b13c:	9805      	ldr	r0, [sp, #20]
 800b13e:	4649      	mov	r1, r9
 800b140:	f001 fd46 	bl	800cbd0 <_Bfree>
 800b144:	9805      	ldr	r0, [sp, #20]
 800b146:	4641      	mov	r1, r8
 800b148:	f001 fd42 	bl	800cbd0 <_Bfree>
 800b14c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b14e:	9805      	ldr	r0, [sp, #20]
 800b150:	f001 fd3e 	bl	800cbd0 <_Bfree>
 800b154:	9805      	ldr	r0, [sp, #20]
 800b156:	4621      	mov	r1, r4
 800b158:	f001 fd3a 	bl	800cbd0 <_Bfree>
 800b15c:	e5f5      	b.n	800ad4a <_strtod_l+0x72>
 800b15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b160:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b164:	4293      	cmp	r3, r2
 800b166:	dbbc      	blt.n	800b0e2 <_strtod_l+0x40a>
 800b168:	4c3f      	ldr	r4, [pc, #252]	@ (800b268 <_strtod_l+0x590>)
 800b16a:	f1c5 050f 	rsb	r5, r5, #15
 800b16e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b172:	4652      	mov	r2, sl
 800b174:	465b      	mov	r3, fp
 800b176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b17a:	f7f5 fa3d 	bl	80005f8 <__aeabi_dmul>
 800b17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b180:	1b5d      	subs	r5, r3, r5
 800b182:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b186:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b18a:	e78f      	b.n	800b0ac <_strtod_l+0x3d4>
 800b18c:	3316      	adds	r3, #22
 800b18e:	dba8      	blt.n	800b0e2 <_strtod_l+0x40a>
 800b190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b192:	eba3 0808 	sub.w	r8, r3, r8
 800b196:	4b34      	ldr	r3, [pc, #208]	@ (800b268 <_strtod_l+0x590>)
 800b198:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b19c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	f7f5 fb52 	bl	800084c <__aeabi_ddiv>
 800b1a8:	e782      	b.n	800b0b0 <_strtod_l+0x3d8>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	4f2f      	ldr	r7, [pc, #188]	@ (800b26c <_strtod_l+0x594>)
 800b1ae:	1124      	asrs	r4, r4, #4
 800b1b0:	4650      	mov	r0, sl
 800b1b2:	4659      	mov	r1, fp
 800b1b4:	461e      	mov	r6, r3
 800b1b6:	2c01      	cmp	r4, #1
 800b1b8:	dc21      	bgt.n	800b1fe <_strtod_l+0x526>
 800b1ba:	b10b      	cbz	r3, 800b1c0 <_strtod_l+0x4e8>
 800b1bc:	4682      	mov	sl, r0
 800b1be:	468b      	mov	fp, r1
 800b1c0:	492a      	ldr	r1, [pc, #168]	@ (800b26c <_strtod_l+0x594>)
 800b1c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b1c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b1ca:	4652      	mov	r2, sl
 800b1cc:	465b      	mov	r3, fp
 800b1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1d2:	f7f5 fa11 	bl	80005f8 <__aeabi_dmul>
 800b1d6:	4b26      	ldr	r3, [pc, #152]	@ (800b270 <_strtod_l+0x598>)
 800b1d8:	460a      	mov	r2, r1
 800b1da:	400b      	ands	r3, r1
 800b1dc:	4925      	ldr	r1, [pc, #148]	@ (800b274 <_strtod_l+0x59c>)
 800b1de:	428b      	cmp	r3, r1
 800b1e0:	4682      	mov	sl, r0
 800b1e2:	d898      	bhi.n	800b116 <_strtod_l+0x43e>
 800b1e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b1e8:	428b      	cmp	r3, r1
 800b1ea:	bf86      	itte	hi
 800b1ec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b278 <_strtod_l+0x5a0>
 800b1f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b1f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9308      	str	r3, [sp, #32]
 800b1fc:	e076      	b.n	800b2ec <_strtod_l+0x614>
 800b1fe:	07e2      	lsls	r2, r4, #31
 800b200:	d504      	bpl.n	800b20c <_strtod_l+0x534>
 800b202:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b206:	f7f5 f9f7 	bl	80005f8 <__aeabi_dmul>
 800b20a:	2301      	movs	r3, #1
 800b20c:	3601      	adds	r6, #1
 800b20e:	1064      	asrs	r4, r4, #1
 800b210:	3708      	adds	r7, #8
 800b212:	e7d0      	b.n	800b1b6 <_strtod_l+0x4de>
 800b214:	d0f0      	beq.n	800b1f8 <_strtod_l+0x520>
 800b216:	4264      	negs	r4, r4
 800b218:	f014 020f 	ands.w	r2, r4, #15
 800b21c:	d00a      	beq.n	800b234 <_strtod_l+0x55c>
 800b21e:	4b12      	ldr	r3, [pc, #72]	@ (800b268 <_strtod_l+0x590>)
 800b220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b224:	4650      	mov	r0, sl
 800b226:	4659      	mov	r1, fp
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f7f5 fb0e 	bl	800084c <__aeabi_ddiv>
 800b230:	4682      	mov	sl, r0
 800b232:	468b      	mov	fp, r1
 800b234:	1124      	asrs	r4, r4, #4
 800b236:	d0df      	beq.n	800b1f8 <_strtod_l+0x520>
 800b238:	2c1f      	cmp	r4, #31
 800b23a:	dd1f      	ble.n	800b27c <_strtod_l+0x5a4>
 800b23c:	2400      	movs	r4, #0
 800b23e:	46a0      	mov	r8, r4
 800b240:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b242:	46a1      	mov	r9, r4
 800b244:	9a05      	ldr	r2, [sp, #20]
 800b246:	2322      	movs	r3, #34	@ 0x22
 800b248:	f04f 0a00 	mov.w	sl, #0
 800b24c:	f04f 0b00 	mov.w	fp, #0
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	e76b      	b.n	800b12c <_strtod_l+0x454>
 800b254:	0800fc4f 	.word	0x0800fc4f
 800b258:	0800fdcc 	.word	0x0800fdcc
 800b25c:	0800fc46 	.word	0x0800fc46
 800b260:	0800fc49 	.word	0x0800fc49
 800b264:	0800fdc9 	.word	0x0800fdc9
 800b268:	0800ff58 	.word	0x0800ff58
 800b26c:	0800ff30 	.word	0x0800ff30
 800b270:	7ff00000 	.word	0x7ff00000
 800b274:	7ca00000 	.word	0x7ca00000
 800b278:	7fefffff 	.word	0x7fefffff
 800b27c:	f014 0310 	ands.w	r3, r4, #16
 800b280:	bf18      	it	ne
 800b282:	236a      	movne	r3, #106	@ 0x6a
 800b284:	4ea9      	ldr	r6, [pc, #676]	@ (800b52c <_strtod_l+0x854>)
 800b286:	9308      	str	r3, [sp, #32]
 800b288:	4650      	mov	r0, sl
 800b28a:	4659      	mov	r1, fp
 800b28c:	2300      	movs	r3, #0
 800b28e:	07e7      	lsls	r7, r4, #31
 800b290:	d504      	bpl.n	800b29c <_strtod_l+0x5c4>
 800b292:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b296:	f7f5 f9af 	bl	80005f8 <__aeabi_dmul>
 800b29a:	2301      	movs	r3, #1
 800b29c:	1064      	asrs	r4, r4, #1
 800b29e:	f106 0608 	add.w	r6, r6, #8
 800b2a2:	d1f4      	bne.n	800b28e <_strtod_l+0x5b6>
 800b2a4:	b10b      	cbz	r3, 800b2aa <_strtod_l+0x5d2>
 800b2a6:	4682      	mov	sl, r0
 800b2a8:	468b      	mov	fp, r1
 800b2aa:	9b08      	ldr	r3, [sp, #32]
 800b2ac:	b1b3      	cbz	r3, 800b2dc <_strtod_l+0x604>
 800b2ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	4659      	mov	r1, fp
 800b2ba:	dd0f      	ble.n	800b2dc <_strtod_l+0x604>
 800b2bc:	2b1f      	cmp	r3, #31
 800b2be:	dd56      	ble.n	800b36e <_strtod_l+0x696>
 800b2c0:	2b34      	cmp	r3, #52	@ 0x34
 800b2c2:	bfde      	ittt	le
 800b2c4:	f04f 33ff 	movle.w	r3, #4294967295
 800b2c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b2cc:	4093      	lslle	r3, r2
 800b2ce:	f04f 0a00 	mov.w	sl, #0
 800b2d2:	bfcc      	ite	gt
 800b2d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b2d8:	ea03 0b01 	andle.w	fp, r3, r1
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2300      	movs	r3, #0
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	4659      	mov	r1, fp
 800b2e4:	f7f5 fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d1a7      	bne.n	800b23c <_strtod_l+0x564>
 800b2ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b2f2:	9805      	ldr	r0, [sp, #20]
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	464a      	mov	r2, r9
 800b2f8:	f001 fcd2 	bl	800cca0 <__s2b>
 800b2fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f43f af09 	beq.w	800b116 <_strtod_l+0x43e>
 800b304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b308:	2a00      	cmp	r2, #0
 800b30a:	eba3 0308 	sub.w	r3, r3, r8
 800b30e:	bfa8      	it	ge
 800b310:	2300      	movge	r3, #0
 800b312:	9312      	str	r3, [sp, #72]	@ 0x48
 800b314:	2400      	movs	r4, #0
 800b316:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b31a:	9316      	str	r3, [sp, #88]	@ 0x58
 800b31c:	46a0      	mov	r8, r4
 800b31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b320:	9805      	ldr	r0, [sp, #20]
 800b322:	6859      	ldr	r1, [r3, #4]
 800b324:	f001 fc14 	bl	800cb50 <_Balloc>
 800b328:	4681      	mov	r9, r0
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f43f aef7 	beq.w	800b11e <_strtod_l+0x446>
 800b330:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b332:	691a      	ldr	r2, [r3, #16]
 800b334:	3202      	adds	r2, #2
 800b336:	f103 010c 	add.w	r1, r3, #12
 800b33a:	0092      	lsls	r2, r2, #2
 800b33c:	300c      	adds	r0, #12
 800b33e:	f001 f854 	bl	800c3ea <memcpy>
 800b342:	ec4b ab10 	vmov	d0, sl, fp
 800b346:	9805      	ldr	r0, [sp, #20]
 800b348:	aa1c      	add	r2, sp, #112	@ 0x70
 800b34a:	a91b      	add	r1, sp, #108	@ 0x6c
 800b34c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b350:	f001 ffda 	bl	800d308 <__d2b>
 800b354:	901a      	str	r0, [sp, #104]	@ 0x68
 800b356:	2800      	cmp	r0, #0
 800b358:	f43f aee1 	beq.w	800b11e <_strtod_l+0x446>
 800b35c:	9805      	ldr	r0, [sp, #20]
 800b35e:	2101      	movs	r1, #1
 800b360:	f001 fd34 	bl	800cdcc <__i2b>
 800b364:	4680      	mov	r8, r0
 800b366:	b948      	cbnz	r0, 800b37c <_strtod_l+0x6a4>
 800b368:	f04f 0800 	mov.w	r8, #0
 800b36c:	e6d7      	b.n	800b11e <_strtod_l+0x446>
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295
 800b372:	fa02 f303 	lsl.w	r3, r2, r3
 800b376:	ea03 0a0a 	and.w	sl, r3, sl
 800b37a:	e7af      	b.n	800b2dc <_strtod_l+0x604>
 800b37c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b37e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b380:	2d00      	cmp	r5, #0
 800b382:	bfab      	itete	ge
 800b384:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b386:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b388:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b38a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b38c:	bfac      	ite	ge
 800b38e:	18ef      	addge	r7, r5, r3
 800b390:	1b5e      	sublt	r6, r3, r5
 800b392:	9b08      	ldr	r3, [sp, #32]
 800b394:	1aed      	subs	r5, r5, r3
 800b396:	4415      	add	r5, r2
 800b398:	4b65      	ldr	r3, [pc, #404]	@ (800b530 <_strtod_l+0x858>)
 800b39a:	3d01      	subs	r5, #1
 800b39c:	429d      	cmp	r5, r3
 800b39e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b3a2:	da50      	bge.n	800b446 <_strtod_l+0x76e>
 800b3a4:	1b5b      	subs	r3, r3, r5
 800b3a6:	2b1f      	cmp	r3, #31
 800b3a8:	eba2 0203 	sub.w	r2, r2, r3
 800b3ac:	f04f 0101 	mov.w	r1, #1
 800b3b0:	dc3d      	bgt.n	800b42e <_strtod_l+0x756>
 800b3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3bc:	18bd      	adds	r5, r7, r2
 800b3be:	9b08      	ldr	r3, [sp, #32]
 800b3c0:	42af      	cmp	r7, r5
 800b3c2:	4416      	add	r6, r2
 800b3c4:	441e      	add	r6, r3
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	bfa8      	it	ge
 800b3ca:	462b      	movge	r3, r5
 800b3cc:	42b3      	cmp	r3, r6
 800b3ce:	bfa8      	it	ge
 800b3d0:	4633      	movge	r3, r6
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	bfc2      	ittt	gt
 800b3d6:	1aed      	subgt	r5, r5, r3
 800b3d8:	1af6      	subgt	r6, r6, r3
 800b3da:	1aff      	subgt	r7, r7, r3
 800b3dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	dd16      	ble.n	800b410 <_strtod_l+0x738>
 800b3e2:	4641      	mov	r1, r8
 800b3e4:	9805      	ldr	r0, [sp, #20]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f001 fda8 	bl	800cf3c <__pow5mult>
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d0ba      	beq.n	800b368 <_strtod_l+0x690>
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b3f6:	9805      	ldr	r0, [sp, #20]
 800b3f8:	f001 fcfe 	bl	800cdf8 <__multiply>
 800b3fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f43f ae8d 	beq.w	800b11e <_strtod_l+0x446>
 800b404:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b406:	9805      	ldr	r0, [sp, #20]
 800b408:	f001 fbe2 	bl	800cbd0 <_Bfree>
 800b40c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b40e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b410:	2d00      	cmp	r5, #0
 800b412:	dc1d      	bgt.n	800b450 <_strtod_l+0x778>
 800b414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b416:	2b00      	cmp	r3, #0
 800b418:	dd23      	ble.n	800b462 <_strtod_l+0x78a>
 800b41a:	4649      	mov	r1, r9
 800b41c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b41e:	9805      	ldr	r0, [sp, #20]
 800b420:	f001 fd8c 	bl	800cf3c <__pow5mult>
 800b424:	4681      	mov	r9, r0
 800b426:	b9e0      	cbnz	r0, 800b462 <_strtod_l+0x78a>
 800b428:	f04f 0900 	mov.w	r9, #0
 800b42c:	e677      	b.n	800b11e <_strtod_l+0x446>
 800b42e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b432:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b436:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b43a:	35e2      	adds	r5, #226	@ 0xe2
 800b43c:	fa01 f305 	lsl.w	r3, r1, r5
 800b440:	9310      	str	r3, [sp, #64]	@ 0x40
 800b442:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b444:	e7ba      	b.n	800b3bc <_strtod_l+0x6e4>
 800b446:	2300      	movs	r3, #0
 800b448:	9310      	str	r3, [sp, #64]	@ 0x40
 800b44a:	2301      	movs	r3, #1
 800b44c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b44e:	e7b5      	b.n	800b3bc <_strtod_l+0x6e4>
 800b450:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b452:	9805      	ldr	r0, [sp, #20]
 800b454:	462a      	mov	r2, r5
 800b456:	f001 fdcb 	bl	800cff0 <__lshift>
 800b45a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d1d9      	bne.n	800b414 <_strtod_l+0x73c>
 800b460:	e65d      	b.n	800b11e <_strtod_l+0x446>
 800b462:	2e00      	cmp	r6, #0
 800b464:	dd07      	ble.n	800b476 <_strtod_l+0x79e>
 800b466:	4649      	mov	r1, r9
 800b468:	9805      	ldr	r0, [sp, #20]
 800b46a:	4632      	mov	r2, r6
 800b46c:	f001 fdc0 	bl	800cff0 <__lshift>
 800b470:	4681      	mov	r9, r0
 800b472:	2800      	cmp	r0, #0
 800b474:	d0d8      	beq.n	800b428 <_strtod_l+0x750>
 800b476:	2f00      	cmp	r7, #0
 800b478:	dd08      	ble.n	800b48c <_strtod_l+0x7b4>
 800b47a:	4641      	mov	r1, r8
 800b47c:	9805      	ldr	r0, [sp, #20]
 800b47e:	463a      	mov	r2, r7
 800b480:	f001 fdb6 	bl	800cff0 <__lshift>
 800b484:	4680      	mov	r8, r0
 800b486:	2800      	cmp	r0, #0
 800b488:	f43f ae49 	beq.w	800b11e <_strtod_l+0x446>
 800b48c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b48e:	9805      	ldr	r0, [sp, #20]
 800b490:	464a      	mov	r2, r9
 800b492:	f001 fe35 	bl	800d100 <__mdiff>
 800b496:	4604      	mov	r4, r0
 800b498:	2800      	cmp	r0, #0
 800b49a:	f43f ae40 	beq.w	800b11e <_strtod_l+0x446>
 800b49e:	68c3      	ldr	r3, [r0, #12]
 800b4a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60c3      	str	r3, [r0, #12]
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	f001 fe0e 	bl	800d0c8 <__mcmp>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	da45      	bge.n	800b53c <_strtod_l+0x864>
 800b4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4b2:	ea53 030a 	orrs.w	r3, r3, sl
 800b4b6:	d16b      	bne.n	800b590 <_strtod_l+0x8b8>
 800b4b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d167      	bne.n	800b590 <_strtod_l+0x8b8>
 800b4c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4c4:	0d1b      	lsrs	r3, r3, #20
 800b4c6:	051b      	lsls	r3, r3, #20
 800b4c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4cc:	d960      	bls.n	800b590 <_strtod_l+0x8b8>
 800b4ce:	6963      	ldr	r3, [r4, #20]
 800b4d0:	b913      	cbnz	r3, 800b4d8 <_strtod_l+0x800>
 800b4d2:	6923      	ldr	r3, [r4, #16]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	dd5b      	ble.n	800b590 <_strtod_l+0x8b8>
 800b4d8:	4621      	mov	r1, r4
 800b4da:	2201      	movs	r2, #1
 800b4dc:	9805      	ldr	r0, [sp, #20]
 800b4de:	f001 fd87 	bl	800cff0 <__lshift>
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	f001 fdef 	bl	800d0c8 <__mcmp>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	dd50      	ble.n	800b590 <_strtod_l+0x8b8>
 800b4ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4f2:	9a08      	ldr	r2, [sp, #32]
 800b4f4:	0d1b      	lsrs	r3, r3, #20
 800b4f6:	051b      	lsls	r3, r3, #20
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	d06a      	beq.n	800b5d2 <_strtod_l+0x8fa>
 800b4fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b500:	d867      	bhi.n	800b5d2 <_strtod_l+0x8fa>
 800b502:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b506:	f67f ae9d 	bls.w	800b244 <_strtod_l+0x56c>
 800b50a:	4b0a      	ldr	r3, [pc, #40]	@ (800b534 <_strtod_l+0x85c>)
 800b50c:	4650      	mov	r0, sl
 800b50e:	4659      	mov	r1, fp
 800b510:	2200      	movs	r2, #0
 800b512:	f7f5 f871 	bl	80005f8 <__aeabi_dmul>
 800b516:	4b08      	ldr	r3, [pc, #32]	@ (800b538 <_strtod_l+0x860>)
 800b518:	400b      	ands	r3, r1
 800b51a:	4682      	mov	sl, r0
 800b51c:	468b      	mov	fp, r1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f47f ae08 	bne.w	800b134 <_strtod_l+0x45c>
 800b524:	9a05      	ldr	r2, [sp, #20]
 800b526:	2322      	movs	r3, #34	@ 0x22
 800b528:	6013      	str	r3, [r2, #0]
 800b52a:	e603      	b.n	800b134 <_strtod_l+0x45c>
 800b52c:	0800fdf8 	.word	0x0800fdf8
 800b530:	fffffc02 	.word	0xfffffc02
 800b534:	39500000 	.word	0x39500000
 800b538:	7ff00000 	.word	0x7ff00000
 800b53c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b540:	d165      	bne.n	800b60e <_strtod_l+0x936>
 800b542:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b548:	b35a      	cbz	r2, 800b5a2 <_strtod_l+0x8ca>
 800b54a:	4a9f      	ldr	r2, [pc, #636]	@ (800b7c8 <_strtod_l+0xaf0>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d12b      	bne.n	800b5a8 <_strtod_l+0x8d0>
 800b550:	9b08      	ldr	r3, [sp, #32]
 800b552:	4651      	mov	r1, sl
 800b554:	b303      	cbz	r3, 800b598 <_strtod_l+0x8c0>
 800b556:	4b9d      	ldr	r3, [pc, #628]	@ (800b7cc <_strtod_l+0xaf4>)
 800b558:	465a      	mov	r2, fp
 800b55a:	4013      	ands	r3, r2
 800b55c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b560:	f04f 32ff 	mov.w	r2, #4294967295
 800b564:	d81b      	bhi.n	800b59e <_strtod_l+0x8c6>
 800b566:	0d1b      	lsrs	r3, r3, #20
 800b568:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b56c:	fa02 f303 	lsl.w	r3, r2, r3
 800b570:	4299      	cmp	r1, r3
 800b572:	d119      	bne.n	800b5a8 <_strtod_l+0x8d0>
 800b574:	4b96      	ldr	r3, [pc, #600]	@ (800b7d0 <_strtod_l+0xaf8>)
 800b576:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b578:	429a      	cmp	r2, r3
 800b57a:	d102      	bne.n	800b582 <_strtod_l+0x8aa>
 800b57c:	3101      	adds	r1, #1
 800b57e:	f43f adce 	beq.w	800b11e <_strtod_l+0x446>
 800b582:	4b92      	ldr	r3, [pc, #584]	@ (800b7cc <_strtod_l+0xaf4>)
 800b584:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b586:	401a      	ands	r2, r3
 800b588:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b58c:	f04f 0a00 	mov.w	sl, #0
 800b590:	9b08      	ldr	r3, [sp, #32]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1b9      	bne.n	800b50a <_strtod_l+0x832>
 800b596:	e5cd      	b.n	800b134 <_strtod_l+0x45c>
 800b598:	f04f 33ff 	mov.w	r3, #4294967295
 800b59c:	e7e8      	b.n	800b570 <_strtod_l+0x898>
 800b59e:	4613      	mov	r3, r2
 800b5a0:	e7e6      	b.n	800b570 <_strtod_l+0x898>
 800b5a2:	ea53 030a 	orrs.w	r3, r3, sl
 800b5a6:	d0a2      	beq.n	800b4ee <_strtod_l+0x816>
 800b5a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5aa:	b1db      	cbz	r3, 800b5e4 <_strtod_l+0x90c>
 800b5ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5ae:	4213      	tst	r3, r2
 800b5b0:	d0ee      	beq.n	800b590 <_strtod_l+0x8b8>
 800b5b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5b4:	9a08      	ldr	r2, [sp, #32]
 800b5b6:	4650      	mov	r0, sl
 800b5b8:	4659      	mov	r1, fp
 800b5ba:	b1bb      	cbz	r3, 800b5ec <_strtod_l+0x914>
 800b5bc:	f7ff fb6c 	bl	800ac98 <sulp>
 800b5c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5c4:	ec53 2b10 	vmov	r2, r3, d0
 800b5c8:	f7f4 fe60 	bl	800028c <__adddf3>
 800b5cc:	4682      	mov	sl, r0
 800b5ce:	468b      	mov	fp, r1
 800b5d0:	e7de      	b.n	800b590 <_strtod_l+0x8b8>
 800b5d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b5d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b5da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b5de:	f04f 3aff 	mov.w	sl, #4294967295
 800b5e2:	e7d5      	b.n	800b590 <_strtod_l+0x8b8>
 800b5e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5e6:	ea13 0f0a 	tst.w	r3, sl
 800b5ea:	e7e1      	b.n	800b5b0 <_strtod_l+0x8d8>
 800b5ec:	f7ff fb54 	bl	800ac98 <sulp>
 800b5f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5f4:	ec53 2b10 	vmov	r2, r3, d0
 800b5f8:	f7f4 fe46 	bl	8000288 <__aeabi_dsub>
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2300      	movs	r3, #0
 800b600:	4682      	mov	sl, r0
 800b602:	468b      	mov	fp, r1
 800b604:	f7f5 fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d0c1      	beq.n	800b590 <_strtod_l+0x8b8>
 800b60c:	e61a      	b.n	800b244 <_strtod_l+0x56c>
 800b60e:	4641      	mov	r1, r8
 800b610:	4620      	mov	r0, r4
 800b612:	f001 fed1 	bl	800d3b8 <__ratio>
 800b616:	ec57 6b10 	vmov	r6, r7, d0
 800b61a:	2200      	movs	r2, #0
 800b61c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b620:	4630      	mov	r0, r6
 800b622:	4639      	mov	r1, r7
 800b624:	f7f5 fa64 	bl	8000af0 <__aeabi_dcmple>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d06f      	beq.n	800b70c <_strtod_l+0xa34>
 800b62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d17a      	bne.n	800b728 <_strtod_l+0xa50>
 800b632:	f1ba 0f00 	cmp.w	sl, #0
 800b636:	d158      	bne.n	800b6ea <_strtod_l+0xa12>
 800b638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b63a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d15a      	bne.n	800b6f8 <_strtod_l+0xa20>
 800b642:	4b64      	ldr	r3, [pc, #400]	@ (800b7d4 <_strtod_l+0xafc>)
 800b644:	2200      	movs	r2, #0
 800b646:	4630      	mov	r0, r6
 800b648:	4639      	mov	r1, r7
 800b64a:	f7f5 fa47 	bl	8000adc <__aeabi_dcmplt>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d159      	bne.n	800b706 <_strtod_l+0xa2e>
 800b652:	4630      	mov	r0, r6
 800b654:	4639      	mov	r1, r7
 800b656:	4b60      	ldr	r3, [pc, #384]	@ (800b7d8 <_strtod_l+0xb00>)
 800b658:	2200      	movs	r2, #0
 800b65a:	f7f4 ffcd 	bl	80005f8 <__aeabi_dmul>
 800b65e:	4606      	mov	r6, r0
 800b660:	460f      	mov	r7, r1
 800b662:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b666:	9606      	str	r6, [sp, #24]
 800b668:	9307      	str	r3, [sp, #28]
 800b66a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b66e:	4d57      	ldr	r5, [pc, #348]	@ (800b7cc <_strtod_l+0xaf4>)
 800b670:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b676:	401d      	ands	r5, r3
 800b678:	4b58      	ldr	r3, [pc, #352]	@ (800b7dc <_strtod_l+0xb04>)
 800b67a:	429d      	cmp	r5, r3
 800b67c:	f040 80b2 	bne.w	800b7e4 <_strtod_l+0xb0c>
 800b680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b682:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b686:	ec4b ab10 	vmov	d0, sl, fp
 800b68a:	f001 fdcd 	bl	800d228 <__ulp>
 800b68e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b692:	ec51 0b10 	vmov	r0, r1, d0
 800b696:	f7f4 ffaf 	bl	80005f8 <__aeabi_dmul>
 800b69a:	4652      	mov	r2, sl
 800b69c:	465b      	mov	r3, fp
 800b69e:	f7f4 fdf5 	bl	800028c <__adddf3>
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4949      	ldr	r1, [pc, #292]	@ (800b7cc <_strtod_l+0xaf4>)
 800b6a6:	4a4e      	ldr	r2, [pc, #312]	@ (800b7e0 <_strtod_l+0xb08>)
 800b6a8:	4019      	ands	r1, r3
 800b6aa:	4291      	cmp	r1, r2
 800b6ac:	4682      	mov	sl, r0
 800b6ae:	d942      	bls.n	800b736 <_strtod_l+0xa5e>
 800b6b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6b2:	4b47      	ldr	r3, [pc, #284]	@ (800b7d0 <_strtod_l+0xaf8>)
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d103      	bne.n	800b6c0 <_strtod_l+0x9e8>
 800b6b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	f43f ad2f 	beq.w	800b11e <_strtod_l+0x446>
 800b6c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b7d0 <_strtod_l+0xaf8>
 800b6c4:	f04f 3aff 	mov.w	sl, #4294967295
 800b6c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6ca:	9805      	ldr	r0, [sp, #20]
 800b6cc:	f001 fa80 	bl	800cbd0 <_Bfree>
 800b6d0:	9805      	ldr	r0, [sp, #20]
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	f001 fa7c 	bl	800cbd0 <_Bfree>
 800b6d8:	9805      	ldr	r0, [sp, #20]
 800b6da:	4641      	mov	r1, r8
 800b6dc:	f001 fa78 	bl	800cbd0 <_Bfree>
 800b6e0:	9805      	ldr	r0, [sp, #20]
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	f001 fa74 	bl	800cbd0 <_Bfree>
 800b6e8:	e619      	b.n	800b31e <_strtod_l+0x646>
 800b6ea:	f1ba 0f01 	cmp.w	sl, #1
 800b6ee:	d103      	bne.n	800b6f8 <_strtod_l+0xa20>
 800b6f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f43f ada6 	beq.w	800b244 <_strtod_l+0x56c>
 800b6f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b7a8 <_strtod_l+0xad0>
 800b6fc:	4f35      	ldr	r7, [pc, #212]	@ (800b7d4 <_strtod_l+0xafc>)
 800b6fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b702:	2600      	movs	r6, #0
 800b704:	e7b1      	b.n	800b66a <_strtod_l+0x992>
 800b706:	4f34      	ldr	r7, [pc, #208]	@ (800b7d8 <_strtod_l+0xb00>)
 800b708:	2600      	movs	r6, #0
 800b70a:	e7aa      	b.n	800b662 <_strtod_l+0x98a>
 800b70c:	4b32      	ldr	r3, [pc, #200]	@ (800b7d8 <_strtod_l+0xb00>)
 800b70e:	4630      	mov	r0, r6
 800b710:	4639      	mov	r1, r7
 800b712:	2200      	movs	r2, #0
 800b714:	f7f4 ff70 	bl	80005f8 <__aeabi_dmul>
 800b718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b71a:	4606      	mov	r6, r0
 800b71c:	460f      	mov	r7, r1
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d09f      	beq.n	800b662 <_strtod_l+0x98a>
 800b722:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b726:	e7a0      	b.n	800b66a <_strtod_l+0x992>
 800b728:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b7b0 <_strtod_l+0xad8>
 800b72c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b730:	ec57 6b17 	vmov	r6, r7, d7
 800b734:	e799      	b.n	800b66a <_strtod_l+0x992>
 800b736:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b73a:	9b08      	ldr	r3, [sp, #32]
 800b73c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1c1      	bne.n	800b6c8 <_strtod_l+0x9f0>
 800b744:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b748:	0d1b      	lsrs	r3, r3, #20
 800b74a:	051b      	lsls	r3, r3, #20
 800b74c:	429d      	cmp	r5, r3
 800b74e:	d1bb      	bne.n	800b6c8 <_strtod_l+0x9f0>
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f5 fab0 	bl	8000cb8 <__aeabi_d2lz>
 800b758:	f7f4 ff20 	bl	800059c <__aeabi_l2d>
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	4630      	mov	r0, r6
 800b762:	4639      	mov	r1, r7
 800b764:	f7f4 fd90 	bl	8000288 <__aeabi_dsub>
 800b768:	460b      	mov	r3, r1
 800b76a:	4602      	mov	r2, r0
 800b76c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b770:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b776:	ea46 060a 	orr.w	r6, r6, sl
 800b77a:	431e      	orrs	r6, r3
 800b77c:	d06f      	beq.n	800b85e <_strtod_l+0xb86>
 800b77e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7b8 <_strtod_l+0xae0>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f7f5 f9aa 	bl	8000adc <__aeabi_dcmplt>
 800b788:	2800      	cmp	r0, #0
 800b78a:	f47f acd3 	bne.w	800b134 <_strtod_l+0x45c>
 800b78e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b7c0 <_strtod_l+0xae8>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b798:	f7f5 f9be 	bl	8000b18 <__aeabi_dcmpgt>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d093      	beq.n	800b6c8 <_strtod_l+0x9f0>
 800b7a0:	e4c8      	b.n	800b134 <_strtod_l+0x45c>
 800b7a2:	bf00      	nop
 800b7a4:	f3af 8000 	nop.w
 800b7a8:	00000000 	.word	0x00000000
 800b7ac:	bff00000 	.word	0xbff00000
 800b7b0:	00000000 	.word	0x00000000
 800b7b4:	3ff00000 	.word	0x3ff00000
 800b7b8:	94a03595 	.word	0x94a03595
 800b7bc:	3fdfffff 	.word	0x3fdfffff
 800b7c0:	35afe535 	.word	0x35afe535
 800b7c4:	3fe00000 	.word	0x3fe00000
 800b7c8:	000fffff 	.word	0x000fffff
 800b7cc:	7ff00000 	.word	0x7ff00000
 800b7d0:	7fefffff 	.word	0x7fefffff
 800b7d4:	3ff00000 	.word	0x3ff00000
 800b7d8:	3fe00000 	.word	0x3fe00000
 800b7dc:	7fe00000 	.word	0x7fe00000
 800b7e0:	7c9fffff 	.word	0x7c9fffff
 800b7e4:	9b08      	ldr	r3, [sp, #32]
 800b7e6:	b323      	cbz	r3, 800b832 <_strtod_l+0xb5a>
 800b7e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b7ec:	d821      	bhi.n	800b832 <_strtod_l+0xb5a>
 800b7ee:	a328      	add	r3, pc, #160	@ (adr r3, 800b890 <_strtod_l+0xbb8>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f5 f97a 	bl	8000af0 <__aeabi_dcmple>
 800b7fc:	b1a0      	cbz	r0, 800b828 <_strtod_l+0xb50>
 800b7fe:	4639      	mov	r1, r7
 800b800:	4630      	mov	r0, r6
 800b802:	f7f5 f9d1 	bl	8000ba8 <__aeabi_d2uiz>
 800b806:	2801      	cmp	r0, #1
 800b808:	bf38      	it	cc
 800b80a:	2001      	movcc	r0, #1
 800b80c:	f7f4 fe7a 	bl	8000504 <__aeabi_ui2d>
 800b810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b812:	4606      	mov	r6, r0
 800b814:	460f      	mov	r7, r1
 800b816:	b9fb      	cbnz	r3, 800b858 <_strtod_l+0xb80>
 800b818:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b81c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b81e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b820:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b824:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b828:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b82a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b82e:	1b5b      	subs	r3, r3, r5
 800b830:	9311      	str	r3, [sp, #68]	@ 0x44
 800b832:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b836:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b83a:	f001 fcf5 	bl	800d228 <__ulp>
 800b83e:	4650      	mov	r0, sl
 800b840:	ec53 2b10 	vmov	r2, r3, d0
 800b844:	4659      	mov	r1, fp
 800b846:	f7f4 fed7 	bl	80005f8 <__aeabi_dmul>
 800b84a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b84e:	f7f4 fd1d 	bl	800028c <__adddf3>
 800b852:	4682      	mov	sl, r0
 800b854:	468b      	mov	fp, r1
 800b856:	e770      	b.n	800b73a <_strtod_l+0xa62>
 800b858:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b85c:	e7e0      	b.n	800b820 <_strtod_l+0xb48>
 800b85e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b898 <_strtod_l+0xbc0>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	f7f5 f93a 	bl	8000adc <__aeabi_dcmplt>
 800b868:	e798      	b.n	800b79c <_strtod_l+0xac4>
 800b86a:	2300      	movs	r3, #0
 800b86c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b86e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	f7ff ba6d 	b.w	800ad52 <_strtod_l+0x7a>
 800b878:	2a65      	cmp	r2, #101	@ 0x65
 800b87a:	f43f ab68 	beq.w	800af4e <_strtod_l+0x276>
 800b87e:	2a45      	cmp	r2, #69	@ 0x45
 800b880:	f43f ab65 	beq.w	800af4e <_strtod_l+0x276>
 800b884:	2301      	movs	r3, #1
 800b886:	f7ff bba0 	b.w	800afca <_strtod_l+0x2f2>
 800b88a:	bf00      	nop
 800b88c:	f3af 8000 	nop.w
 800b890:	ffc00000 	.word	0xffc00000
 800b894:	41dfffff 	.word	0x41dfffff
 800b898:	94a03595 	.word	0x94a03595
 800b89c:	3fcfffff 	.word	0x3fcfffff

0800b8a0 <_strtod_r>:
 800b8a0:	4b01      	ldr	r3, [pc, #4]	@ (800b8a8 <_strtod_r+0x8>)
 800b8a2:	f7ff ba19 	b.w	800acd8 <_strtod_l>
 800b8a6:	bf00      	nop
 800b8a8:	2000009c 	.word	0x2000009c

0800b8ac <_strtol_l.isra.0>:
 800b8ac:	2b24      	cmp	r3, #36	@ 0x24
 800b8ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b2:	4686      	mov	lr, r0
 800b8b4:	4690      	mov	r8, r2
 800b8b6:	d801      	bhi.n	800b8bc <_strtol_l.isra.0+0x10>
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d106      	bne.n	800b8ca <_strtol_l.isra.0+0x1e>
 800b8bc:	f000 fd68 	bl	800c390 <__errno>
 800b8c0:	2316      	movs	r3, #22
 800b8c2:	6003      	str	r3, [r0, #0]
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ca:	4834      	ldr	r0, [pc, #208]	@ (800b99c <_strtol_l.isra.0+0xf0>)
 800b8cc:	460d      	mov	r5, r1
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8d4:	5d06      	ldrb	r6, [r0, r4]
 800b8d6:	f016 0608 	ands.w	r6, r6, #8
 800b8da:	d1f8      	bne.n	800b8ce <_strtol_l.isra.0+0x22>
 800b8dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800b8de:	d110      	bne.n	800b902 <_strtol_l.isra.0+0x56>
 800b8e0:	782c      	ldrb	r4, [r5, #0]
 800b8e2:	2601      	movs	r6, #1
 800b8e4:	1c95      	adds	r5, r2, #2
 800b8e6:	f033 0210 	bics.w	r2, r3, #16
 800b8ea:	d115      	bne.n	800b918 <_strtol_l.isra.0+0x6c>
 800b8ec:	2c30      	cmp	r4, #48	@ 0x30
 800b8ee:	d10d      	bne.n	800b90c <_strtol_l.isra.0+0x60>
 800b8f0:	782a      	ldrb	r2, [r5, #0]
 800b8f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b8f6:	2a58      	cmp	r2, #88	@ 0x58
 800b8f8:	d108      	bne.n	800b90c <_strtol_l.isra.0+0x60>
 800b8fa:	786c      	ldrb	r4, [r5, #1]
 800b8fc:	3502      	adds	r5, #2
 800b8fe:	2310      	movs	r3, #16
 800b900:	e00a      	b.n	800b918 <_strtol_l.isra.0+0x6c>
 800b902:	2c2b      	cmp	r4, #43	@ 0x2b
 800b904:	bf04      	itt	eq
 800b906:	782c      	ldrbeq	r4, [r5, #0]
 800b908:	1c95      	addeq	r5, r2, #2
 800b90a:	e7ec      	b.n	800b8e6 <_strtol_l.isra.0+0x3a>
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1f6      	bne.n	800b8fe <_strtol_l.isra.0+0x52>
 800b910:	2c30      	cmp	r4, #48	@ 0x30
 800b912:	bf14      	ite	ne
 800b914:	230a      	movne	r3, #10
 800b916:	2308      	moveq	r3, #8
 800b918:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b91c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b920:	2200      	movs	r2, #0
 800b922:	fbbc f9f3 	udiv	r9, ip, r3
 800b926:	4610      	mov	r0, r2
 800b928:	fb03 ca19 	mls	sl, r3, r9, ip
 800b92c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b930:	2f09      	cmp	r7, #9
 800b932:	d80f      	bhi.n	800b954 <_strtol_l.isra.0+0xa8>
 800b934:	463c      	mov	r4, r7
 800b936:	42a3      	cmp	r3, r4
 800b938:	dd1b      	ble.n	800b972 <_strtol_l.isra.0+0xc6>
 800b93a:	1c57      	adds	r7, r2, #1
 800b93c:	d007      	beq.n	800b94e <_strtol_l.isra.0+0xa2>
 800b93e:	4581      	cmp	r9, r0
 800b940:	d314      	bcc.n	800b96c <_strtol_l.isra.0+0xc0>
 800b942:	d101      	bne.n	800b948 <_strtol_l.isra.0+0x9c>
 800b944:	45a2      	cmp	sl, r4
 800b946:	db11      	blt.n	800b96c <_strtol_l.isra.0+0xc0>
 800b948:	fb00 4003 	mla	r0, r0, r3, r4
 800b94c:	2201      	movs	r2, #1
 800b94e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b952:	e7eb      	b.n	800b92c <_strtol_l.isra.0+0x80>
 800b954:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b958:	2f19      	cmp	r7, #25
 800b95a:	d801      	bhi.n	800b960 <_strtol_l.isra.0+0xb4>
 800b95c:	3c37      	subs	r4, #55	@ 0x37
 800b95e:	e7ea      	b.n	800b936 <_strtol_l.isra.0+0x8a>
 800b960:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b964:	2f19      	cmp	r7, #25
 800b966:	d804      	bhi.n	800b972 <_strtol_l.isra.0+0xc6>
 800b968:	3c57      	subs	r4, #87	@ 0x57
 800b96a:	e7e4      	b.n	800b936 <_strtol_l.isra.0+0x8a>
 800b96c:	f04f 32ff 	mov.w	r2, #4294967295
 800b970:	e7ed      	b.n	800b94e <_strtol_l.isra.0+0xa2>
 800b972:	1c53      	adds	r3, r2, #1
 800b974:	d108      	bne.n	800b988 <_strtol_l.isra.0+0xdc>
 800b976:	2322      	movs	r3, #34	@ 0x22
 800b978:	f8ce 3000 	str.w	r3, [lr]
 800b97c:	4660      	mov	r0, ip
 800b97e:	f1b8 0f00 	cmp.w	r8, #0
 800b982:	d0a0      	beq.n	800b8c6 <_strtol_l.isra.0+0x1a>
 800b984:	1e69      	subs	r1, r5, #1
 800b986:	e006      	b.n	800b996 <_strtol_l.isra.0+0xea>
 800b988:	b106      	cbz	r6, 800b98c <_strtol_l.isra.0+0xe0>
 800b98a:	4240      	negs	r0, r0
 800b98c:	f1b8 0f00 	cmp.w	r8, #0
 800b990:	d099      	beq.n	800b8c6 <_strtol_l.isra.0+0x1a>
 800b992:	2a00      	cmp	r2, #0
 800b994:	d1f6      	bne.n	800b984 <_strtol_l.isra.0+0xd8>
 800b996:	f8c8 1000 	str.w	r1, [r8]
 800b99a:	e794      	b.n	800b8c6 <_strtol_l.isra.0+0x1a>
 800b99c:	0800fe21 	.word	0x0800fe21

0800b9a0 <_strtol_r>:
 800b9a0:	f7ff bf84 	b.w	800b8ac <_strtol_l.isra.0>

0800b9a4 <strtol>:
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	460a      	mov	r2, r1
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	4802      	ldr	r0, [pc, #8]	@ (800b9b4 <strtol+0x10>)
 800b9ac:	6800      	ldr	r0, [r0, #0]
 800b9ae:	f7ff bf7d 	b.w	800b8ac <_strtol_l.isra.0>
 800b9b2:	bf00      	nop
 800b9b4:	20000208 	.word	0x20000208

0800b9b8 <_scanf_float>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	b087      	sub	sp, #28
 800b9be:	4691      	mov	r9, r2
 800b9c0:	9303      	str	r3, [sp, #12]
 800b9c2:	688b      	ldr	r3, [r1, #8]
 800b9c4:	1e5a      	subs	r2, r3, #1
 800b9c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b9ca:	bf81      	itttt	hi
 800b9cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b9d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b9d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b9d8:	608b      	strhi	r3, [r1, #8]
 800b9da:	680b      	ldr	r3, [r1, #0]
 800b9dc:	460a      	mov	r2, r1
 800b9de:	f04f 0500 	mov.w	r5, #0
 800b9e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b9e6:	f842 3b1c 	str.w	r3, [r2], #28
 800b9ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b9ee:	4680      	mov	r8, r0
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	bf98      	it	ls
 800b9f4:	f04f 0b00 	movls.w	fp, #0
 800b9f8:	9201      	str	r2, [sp, #4]
 800b9fa:	4616      	mov	r6, r2
 800b9fc:	46aa      	mov	sl, r5
 800b9fe:	462f      	mov	r7, r5
 800ba00:	9502      	str	r5, [sp, #8]
 800ba02:	68a2      	ldr	r2, [r4, #8]
 800ba04:	b15a      	cbz	r2, 800ba1e <_scanf_float+0x66>
 800ba06:	f8d9 3000 	ldr.w	r3, [r9]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba0e:	d863      	bhi.n	800bad8 <_scanf_float+0x120>
 800ba10:	2b40      	cmp	r3, #64	@ 0x40
 800ba12:	d83b      	bhi.n	800ba8c <_scanf_float+0xd4>
 800ba14:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ba18:	b2c8      	uxtb	r0, r1
 800ba1a:	280e      	cmp	r0, #14
 800ba1c:	d939      	bls.n	800ba92 <_scanf_float+0xda>
 800ba1e:	b11f      	cbz	r7, 800ba28 <_scanf_float+0x70>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba2c:	f1ba 0f01 	cmp.w	sl, #1
 800ba30:	f200 8114 	bhi.w	800bc5c <_scanf_float+0x2a4>
 800ba34:	9b01      	ldr	r3, [sp, #4]
 800ba36:	429e      	cmp	r6, r3
 800ba38:	f200 8105 	bhi.w	800bc46 <_scanf_float+0x28e>
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	b007      	add	sp, #28
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ba48:	2a0d      	cmp	r2, #13
 800ba4a:	d8e8      	bhi.n	800ba1e <_scanf_float+0x66>
 800ba4c:	a101      	add	r1, pc, #4	@ (adr r1, 800ba54 <_scanf_float+0x9c>)
 800ba4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba52:	bf00      	nop
 800ba54:	0800bb9d 	.word	0x0800bb9d
 800ba58:	0800ba1f 	.word	0x0800ba1f
 800ba5c:	0800ba1f 	.word	0x0800ba1f
 800ba60:	0800ba1f 	.word	0x0800ba1f
 800ba64:	0800bbf9 	.word	0x0800bbf9
 800ba68:	0800bbd3 	.word	0x0800bbd3
 800ba6c:	0800ba1f 	.word	0x0800ba1f
 800ba70:	0800ba1f 	.word	0x0800ba1f
 800ba74:	0800bbab 	.word	0x0800bbab
 800ba78:	0800ba1f 	.word	0x0800ba1f
 800ba7c:	0800ba1f 	.word	0x0800ba1f
 800ba80:	0800ba1f 	.word	0x0800ba1f
 800ba84:	0800ba1f 	.word	0x0800ba1f
 800ba88:	0800bb67 	.word	0x0800bb67
 800ba8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ba90:	e7da      	b.n	800ba48 <_scanf_float+0x90>
 800ba92:	290e      	cmp	r1, #14
 800ba94:	d8c3      	bhi.n	800ba1e <_scanf_float+0x66>
 800ba96:	a001      	add	r0, pc, #4	@ (adr r0, 800ba9c <_scanf_float+0xe4>)
 800ba98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ba9c:	0800bb57 	.word	0x0800bb57
 800baa0:	0800ba1f 	.word	0x0800ba1f
 800baa4:	0800bb57 	.word	0x0800bb57
 800baa8:	0800bbe7 	.word	0x0800bbe7
 800baac:	0800ba1f 	.word	0x0800ba1f
 800bab0:	0800baf9 	.word	0x0800baf9
 800bab4:	0800bb3d 	.word	0x0800bb3d
 800bab8:	0800bb3d 	.word	0x0800bb3d
 800babc:	0800bb3d 	.word	0x0800bb3d
 800bac0:	0800bb3d 	.word	0x0800bb3d
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bb3d 	.word	0x0800bb3d
 800bacc:	0800bb3d 	.word	0x0800bb3d
 800bad0:	0800bb3d 	.word	0x0800bb3d
 800bad4:	0800bb3d 	.word	0x0800bb3d
 800bad8:	2b6e      	cmp	r3, #110	@ 0x6e
 800bada:	d809      	bhi.n	800baf0 <_scanf_float+0x138>
 800badc:	2b60      	cmp	r3, #96	@ 0x60
 800bade:	d8b1      	bhi.n	800ba44 <_scanf_float+0x8c>
 800bae0:	2b54      	cmp	r3, #84	@ 0x54
 800bae2:	d07b      	beq.n	800bbdc <_scanf_float+0x224>
 800bae4:	2b59      	cmp	r3, #89	@ 0x59
 800bae6:	d19a      	bne.n	800ba1e <_scanf_float+0x66>
 800bae8:	2d07      	cmp	r5, #7
 800baea:	d198      	bne.n	800ba1e <_scanf_float+0x66>
 800baec:	2508      	movs	r5, #8
 800baee:	e02f      	b.n	800bb50 <_scanf_float+0x198>
 800baf0:	2b74      	cmp	r3, #116	@ 0x74
 800baf2:	d073      	beq.n	800bbdc <_scanf_float+0x224>
 800baf4:	2b79      	cmp	r3, #121	@ 0x79
 800baf6:	e7f6      	b.n	800bae6 <_scanf_float+0x12e>
 800baf8:	6821      	ldr	r1, [r4, #0]
 800bafa:	05c8      	lsls	r0, r1, #23
 800bafc:	d51e      	bpl.n	800bb3c <_scanf_float+0x184>
 800bafe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bb02:	6021      	str	r1, [r4, #0]
 800bb04:	3701      	adds	r7, #1
 800bb06:	f1bb 0f00 	cmp.w	fp, #0
 800bb0a:	d003      	beq.n	800bb14 <_scanf_float+0x15c>
 800bb0c:	3201      	adds	r2, #1
 800bb0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb12:	60a2      	str	r2, [r4, #8]
 800bb14:	68a3      	ldr	r3, [r4, #8]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	60a3      	str	r3, [r4, #8]
 800bb1a:	6923      	ldr	r3, [r4, #16]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	6123      	str	r3, [r4, #16]
 800bb20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f8c9 3004 	str.w	r3, [r9, #4]
 800bb2c:	f340 8082 	ble.w	800bc34 <_scanf_float+0x27c>
 800bb30:	f8d9 3000 	ldr.w	r3, [r9]
 800bb34:	3301      	adds	r3, #1
 800bb36:	f8c9 3000 	str.w	r3, [r9]
 800bb3a:	e762      	b.n	800ba02 <_scanf_float+0x4a>
 800bb3c:	eb1a 0105 	adds.w	r1, sl, r5
 800bb40:	f47f af6d 	bne.w	800ba1e <_scanf_float+0x66>
 800bb44:	6822      	ldr	r2, [r4, #0]
 800bb46:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bb4a:	6022      	str	r2, [r4, #0]
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	468a      	mov	sl, r1
 800bb50:	f806 3b01 	strb.w	r3, [r6], #1
 800bb54:	e7de      	b.n	800bb14 <_scanf_float+0x15c>
 800bb56:	6822      	ldr	r2, [r4, #0]
 800bb58:	0610      	lsls	r0, r2, #24
 800bb5a:	f57f af60 	bpl.w	800ba1e <_scanf_float+0x66>
 800bb5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb62:	6022      	str	r2, [r4, #0]
 800bb64:	e7f4      	b.n	800bb50 <_scanf_float+0x198>
 800bb66:	f1ba 0f00 	cmp.w	sl, #0
 800bb6a:	d10c      	bne.n	800bb86 <_scanf_float+0x1ce>
 800bb6c:	b977      	cbnz	r7, 800bb8c <_scanf_float+0x1d4>
 800bb6e:	6822      	ldr	r2, [r4, #0]
 800bb70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bb74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bb78:	d108      	bne.n	800bb8c <_scanf_float+0x1d4>
 800bb7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb7e:	6022      	str	r2, [r4, #0]
 800bb80:	f04f 0a01 	mov.w	sl, #1
 800bb84:	e7e4      	b.n	800bb50 <_scanf_float+0x198>
 800bb86:	f1ba 0f02 	cmp.w	sl, #2
 800bb8a:	d050      	beq.n	800bc2e <_scanf_float+0x276>
 800bb8c:	2d01      	cmp	r5, #1
 800bb8e:	d002      	beq.n	800bb96 <_scanf_float+0x1de>
 800bb90:	2d04      	cmp	r5, #4
 800bb92:	f47f af44 	bne.w	800ba1e <_scanf_float+0x66>
 800bb96:	3501      	adds	r5, #1
 800bb98:	b2ed      	uxtb	r5, r5
 800bb9a:	e7d9      	b.n	800bb50 <_scanf_float+0x198>
 800bb9c:	f1ba 0f01 	cmp.w	sl, #1
 800bba0:	f47f af3d 	bne.w	800ba1e <_scanf_float+0x66>
 800bba4:	f04f 0a02 	mov.w	sl, #2
 800bba8:	e7d2      	b.n	800bb50 <_scanf_float+0x198>
 800bbaa:	b975      	cbnz	r5, 800bbca <_scanf_float+0x212>
 800bbac:	2f00      	cmp	r7, #0
 800bbae:	f47f af37 	bne.w	800ba20 <_scanf_float+0x68>
 800bbb2:	6822      	ldr	r2, [r4, #0]
 800bbb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bbb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bbbc:	f040 8103 	bne.w	800bdc6 <_scanf_float+0x40e>
 800bbc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bbc4:	6022      	str	r2, [r4, #0]
 800bbc6:	2501      	movs	r5, #1
 800bbc8:	e7c2      	b.n	800bb50 <_scanf_float+0x198>
 800bbca:	2d03      	cmp	r5, #3
 800bbcc:	d0e3      	beq.n	800bb96 <_scanf_float+0x1de>
 800bbce:	2d05      	cmp	r5, #5
 800bbd0:	e7df      	b.n	800bb92 <_scanf_float+0x1da>
 800bbd2:	2d02      	cmp	r5, #2
 800bbd4:	f47f af23 	bne.w	800ba1e <_scanf_float+0x66>
 800bbd8:	2503      	movs	r5, #3
 800bbda:	e7b9      	b.n	800bb50 <_scanf_float+0x198>
 800bbdc:	2d06      	cmp	r5, #6
 800bbde:	f47f af1e 	bne.w	800ba1e <_scanf_float+0x66>
 800bbe2:	2507      	movs	r5, #7
 800bbe4:	e7b4      	b.n	800bb50 <_scanf_float+0x198>
 800bbe6:	6822      	ldr	r2, [r4, #0]
 800bbe8:	0591      	lsls	r1, r2, #22
 800bbea:	f57f af18 	bpl.w	800ba1e <_scanf_float+0x66>
 800bbee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bbf2:	6022      	str	r2, [r4, #0]
 800bbf4:	9702      	str	r7, [sp, #8]
 800bbf6:	e7ab      	b.n	800bb50 <_scanf_float+0x198>
 800bbf8:	6822      	ldr	r2, [r4, #0]
 800bbfa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bbfe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bc02:	d005      	beq.n	800bc10 <_scanf_float+0x258>
 800bc04:	0550      	lsls	r0, r2, #21
 800bc06:	f57f af0a 	bpl.w	800ba1e <_scanf_float+0x66>
 800bc0a:	2f00      	cmp	r7, #0
 800bc0c:	f000 80db 	beq.w	800bdc6 <_scanf_float+0x40e>
 800bc10:	0591      	lsls	r1, r2, #22
 800bc12:	bf58      	it	pl
 800bc14:	9902      	ldrpl	r1, [sp, #8]
 800bc16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc1a:	bf58      	it	pl
 800bc1c:	1a79      	subpl	r1, r7, r1
 800bc1e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bc22:	bf58      	it	pl
 800bc24:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bc28:	6022      	str	r2, [r4, #0]
 800bc2a:	2700      	movs	r7, #0
 800bc2c:	e790      	b.n	800bb50 <_scanf_float+0x198>
 800bc2e:	f04f 0a03 	mov.w	sl, #3
 800bc32:	e78d      	b.n	800bb50 <_scanf_float+0x198>
 800bc34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bc38:	4649      	mov	r1, r9
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	4798      	blx	r3
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f43f aedf 	beq.w	800ba02 <_scanf_float+0x4a>
 800bc44:	e6eb      	b.n	800ba1e <_scanf_float+0x66>
 800bc46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc4e:	464a      	mov	r2, r9
 800bc50:	4640      	mov	r0, r8
 800bc52:	4798      	blx	r3
 800bc54:	6923      	ldr	r3, [r4, #16]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	6123      	str	r3, [r4, #16]
 800bc5a:	e6eb      	b.n	800ba34 <_scanf_float+0x7c>
 800bc5c:	1e6b      	subs	r3, r5, #1
 800bc5e:	2b06      	cmp	r3, #6
 800bc60:	d824      	bhi.n	800bcac <_scanf_float+0x2f4>
 800bc62:	2d02      	cmp	r5, #2
 800bc64:	d836      	bhi.n	800bcd4 <_scanf_float+0x31c>
 800bc66:	9b01      	ldr	r3, [sp, #4]
 800bc68:	429e      	cmp	r6, r3
 800bc6a:	f67f aee7 	bls.w	800ba3c <_scanf_float+0x84>
 800bc6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc76:	464a      	mov	r2, r9
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4798      	blx	r3
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	e7f0      	b.n	800bc66 <_scanf_float+0x2ae>
 800bc84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc88:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bc8c:	464a      	mov	r2, r9
 800bc8e:	4640      	mov	r0, r8
 800bc90:	4798      	blx	r3
 800bc92:	6923      	ldr	r3, [r4, #16]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	6123      	str	r3, [r4, #16]
 800bc98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc9c:	fa5f fa8a 	uxtb.w	sl, sl
 800bca0:	f1ba 0f02 	cmp.w	sl, #2
 800bca4:	d1ee      	bne.n	800bc84 <_scanf_float+0x2cc>
 800bca6:	3d03      	subs	r5, #3
 800bca8:	b2ed      	uxtb	r5, r5
 800bcaa:	1b76      	subs	r6, r6, r5
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	05da      	lsls	r2, r3, #23
 800bcb0:	d530      	bpl.n	800bd14 <_scanf_float+0x35c>
 800bcb2:	055b      	lsls	r3, r3, #21
 800bcb4:	d511      	bpl.n	800bcda <_scanf_float+0x322>
 800bcb6:	9b01      	ldr	r3, [sp, #4]
 800bcb8:	429e      	cmp	r6, r3
 800bcba:	f67f aebf 	bls.w	800ba3c <_scanf_float+0x84>
 800bcbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcc6:	464a      	mov	r2, r9
 800bcc8:	4640      	mov	r0, r8
 800bcca:	4798      	blx	r3
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	6123      	str	r3, [r4, #16]
 800bcd2:	e7f0      	b.n	800bcb6 <_scanf_float+0x2fe>
 800bcd4:	46aa      	mov	sl, r5
 800bcd6:	46b3      	mov	fp, r6
 800bcd8:	e7de      	b.n	800bc98 <_scanf_float+0x2e0>
 800bcda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bcde:	6923      	ldr	r3, [r4, #16]
 800bce0:	2965      	cmp	r1, #101	@ 0x65
 800bce2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bce6:	f106 35ff 	add.w	r5, r6, #4294967295
 800bcea:	6123      	str	r3, [r4, #16]
 800bcec:	d00c      	beq.n	800bd08 <_scanf_float+0x350>
 800bcee:	2945      	cmp	r1, #69	@ 0x45
 800bcf0:	d00a      	beq.n	800bd08 <_scanf_float+0x350>
 800bcf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcf6:	464a      	mov	r2, r9
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	4798      	blx	r3
 800bcfc:	6923      	ldr	r3, [r4, #16]
 800bcfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	1eb5      	subs	r5, r6, #2
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd0c:	464a      	mov	r2, r9
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4798      	blx	r3
 800bd12:	462e      	mov	r6, r5
 800bd14:	6822      	ldr	r2, [r4, #0]
 800bd16:	f012 0210 	ands.w	r2, r2, #16
 800bd1a:	d001      	beq.n	800bd20 <_scanf_float+0x368>
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	e68e      	b.n	800ba3e <_scanf_float+0x86>
 800bd20:	7032      	strb	r2, [r6, #0]
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bd28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd2c:	d125      	bne.n	800bd7a <_scanf_float+0x3c2>
 800bd2e:	9b02      	ldr	r3, [sp, #8]
 800bd30:	429f      	cmp	r7, r3
 800bd32:	d00a      	beq.n	800bd4a <_scanf_float+0x392>
 800bd34:	1bda      	subs	r2, r3, r7
 800bd36:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bd3a:	429e      	cmp	r6, r3
 800bd3c:	bf28      	it	cs
 800bd3e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bd42:	4922      	ldr	r1, [pc, #136]	@ (800bdcc <_scanf_float+0x414>)
 800bd44:	4630      	mov	r0, r6
 800bd46:	f000 f977 	bl	800c038 <siprintf>
 800bd4a:	9901      	ldr	r1, [sp, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f7ff fda6 	bl	800b8a0 <_strtod_r>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	6821      	ldr	r1, [r4, #0]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f011 0f02 	tst.w	r1, #2
 800bd5e:	ec57 6b10 	vmov	r6, r7, d0
 800bd62:	f103 0204 	add.w	r2, r3, #4
 800bd66:	d015      	beq.n	800bd94 <_scanf_float+0x3dc>
 800bd68:	9903      	ldr	r1, [sp, #12]
 800bd6a:	600a      	str	r2, [r1, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	e9c3 6700 	strd	r6, r7, [r3]
 800bd72:	68e3      	ldr	r3, [r4, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60e3      	str	r3, [r4, #12]
 800bd78:	e7d0      	b.n	800bd1c <_scanf_float+0x364>
 800bd7a:	9b04      	ldr	r3, [sp, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0e4      	beq.n	800bd4a <_scanf_float+0x392>
 800bd80:	9905      	ldr	r1, [sp, #20]
 800bd82:	230a      	movs	r3, #10
 800bd84:	3101      	adds	r1, #1
 800bd86:	4640      	mov	r0, r8
 800bd88:	f7ff fe0a 	bl	800b9a0 <_strtol_r>
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	9e05      	ldr	r6, [sp, #20]
 800bd90:	1ac2      	subs	r2, r0, r3
 800bd92:	e7d0      	b.n	800bd36 <_scanf_float+0x37e>
 800bd94:	f011 0f04 	tst.w	r1, #4
 800bd98:	9903      	ldr	r1, [sp, #12]
 800bd9a:	600a      	str	r2, [r1, #0]
 800bd9c:	d1e6      	bne.n	800bd6c <_scanf_float+0x3b4>
 800bd9e:	681d      	ldr	r5, [r3, #0]
 800bda0:	4632      	mov	r2, r6
 800bda2:	463b      	mov	r3, r7
 800bda4:	4630      	mov	r0, r6
 800bda6:	4639      	mov	r1, r7
 800bda8:	f7f4 fec0 	bl	8000b2c <__aeabi_dcmpun>
 800bdac:	b128      	cbz	r0, 800bdba <_scanf_float+0x402>
 800bdae:	4808      	ldr	r0, [pc, #32]	@ (800bdd0 <_scanf_float+0x418>)
 800bdb0:	f000 fb32 	bl	800c418 <nanf>
 800bdb4:	ed85 0a00 	vstr	s0, [r5]
 800bdb8:	e7db      	b.n	800bd72 <_scanf_float+0x3ba>
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 ff13 	bl	8000be8 <__aeabi_d2f>
 800bdc2:	6028      	str	r0, [r5, #0]
 800bdc4:	e7d5      	b.n	800bd72 <_scanf_float+0x3ba>
 800bdc6:	2700      	movs	r7, #0
 800bdc8:	e62e      	b.n	800ba28 <_scanf_float+0x70>
 800bdca:	bf00      	nop
 800bdcc:	0800fc52 	.word	0x0800fc52
 800bdd0:	0800fdc9 	.word	0x0800fdc9

0800bdd4 <std>:
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	b510      	push	{r4, lr}
 800bdd8:	4604      	mov	r4, r0
 800bdda:	e9c0 3300 	strd	r3, r3, [r0]
 800bdde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bde2:	6083      	str	r3, [r0, #8]
 800bde4:	8181      	strh	r1, [r0, #12]
 800bde6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bde8:	81c2      	strh	r2, [r0, #14]
 800bdea:	6183      	str	r3, [r0, #24]
 800bdec:	4619      	mov	r1, r3
 800bdee:	2208      	movs	r2, #8
 800bdf0:	305c      	adds	r0, #92	@ 0x5c
 800bdf2:	f000 fa49 	bl	800c288 <memset>
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800be2c <std+0x58>)
 800bdf8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	@ (800be30 <std+0x5c>)
 800bdfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bdfe:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <std+0x60>)
 800be00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be02:	4b0d      	ldr	r3, [pc, #52]	@ (800be38 <std+0x64>)
 800be04:	6323      	str	r3, [r4, #48]	@ 0x30
 800be06:	4b0d      	ldr	r3, [pc, #52]	@ (800be3c <std+0x68>)
 800be08:	6224      	str	r4, [r4, #32]
 800be0a:	429c      	cmp	r4, r3
 800be0c:	d006      	beq.n	800be1c <std+0x48>
 800be0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be12:	4294      	cmp	r4, r2
 800be14:	d002      	beq.n	800be1c <std+0x48>
 800be16:	33d0      	adds	r3, #208	@ 0xd0
 800be18:	429c      	cmp	r4, r3
 800be1a:	d105      	bne.n	800be28 <std+0x54>
 800be1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be24:	f000 bade 	b.w	800c3e4 <__retarget_lock_init_recursive>
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	bf00      	nop
 800be2c:	0800c0d5 	.word	0x0800c0d5
 800be30:	0800c0fb 	.word	0x0800c0fb
 800be34:	0800c133 	.word	0x0800c133
 800be38:	0800c157 	.word	0x0800c157
 800be3c:	20000a48 	.word	0x20000a48

0800be40 <stdio_exit_handler>:
 800be40:	4a02      	ldr	r2, [pc, #8]	@ (800be4c <stdio_exit_handler+0xc>)
 800be42:	4903      	ldr	r1, [pc, #12]	@ (800be50 <stdio_exit_handler+0x10>)
 800be44:	4803      	ldr	r0, [pc, #12]	@ (800be54 <stdio_exit_handler+0x14>)
 800be46:	f000 b869 	b.w	800bf1c <_fwalk_sglue>
 800be4a:	bf00      	nop
 800be4c:	20000090 	.word	0x20000090
 800be50:	0800e45d 	.word	0x0800e45d
 800be54:	2000020c 	.word	0x2000020c

0800be58 <cleanup_stdio>:
 800be58:	6841      	ldr	r1, [r0, #4]
 800be5a:	4b0c      	ldr	r3, [pc, #48]	@ (800be8c <cleanup_stdio+0x34>)
 800be5c:	4299      	cmp	r1, r3
 800be5e:	b510      	push	{r4, lr}
 800be60:	4604      	mov	r4, r0
 800be62:	d001      	beq.n	800be68 <cleanup_stdio+0x10>
 800be64:	f002 fafa 	bl	800e45c <_fflush_r>
 800be68:	68a1      	ldr	r1, [r4, #8]
 800be6a:	4b09      	ldr	r3, [pc, #36]	@ (800be90 <cleanup_stdio+0x38>)
 800be6c:	4299      	cmp	r1, r3
 800be6e:	d002      	beq.n	800be76 <cleanup_stdio+0x1e>
 800be70:	4620      	mov	r0, r4
 800be72:	f002 faf3 	bl	800e45c <_fflush_r>
 800be76:	68e1      	ldr	r1, [r4, #12]
 800be78:	4b06      	ldr	r3, [pc, #24]	@ (800be94 <cleanup_stdio+0x3c>)
 800be7a:	4299      	cmp	r1, r3
 800be7c:	d004      	beq.n	800be88 <cleanup_stdio+0x30>
 800be7e:	4620      	mov	r0, r4
 800be80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be84:	f002 baea 	b.w	800e45c <_fflush_r>
 800be88:	bd10      	pop	{r4, pc}
 800be8a:	bf00      	nop
 800be8c:	20000a48 	.word	0x20000a48
 800be90:	20000ab0 	.word	0x20000ab0
 800be94:	20000b18 	.word	0x20000b18

0800be98 <global_stdio_init.part.0>:
 800be98:	b510      	push	{r4, lr}
 800be9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bec8 <global_stdio_init.part.0+0x30>)
 800be9c:	4c0b      	ldr	r4, [pc, #44]	@ (800becc <global_stdio_init.part.0+0x34>)
 800be9e:	4a0c      	ldr	r2, [pc, #48]	@ (800bed0 <global_stdio_init.part.0+0x38>)
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	4620      	mov	r0, r4
 800bea4:	2200      	movs	r2, #0
 800bea6:	2104      	movs	r1, #4
 800bea8:	f7ff ff94 	bl	800bdd4 <std>
 800beac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800beb0:	2201      	movs	r2, #1
 800beb2:	2109      	movs	r1, #9
 800beb4:	f7ff ff8e 	bl	800bdd4 <std>
 800beb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bebc:	2202      	movs	r2, #2
 800bebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec2:	2112      	movs	r1, #18
 800bec4:	f7ff bf86 	b.w	800bdd4 <std>
 800bec8:	20000b80 	.word	0x20000b80
 800becc:	20000a48 	.word	0x20000a48
 800bed0:	0800be41 	.word	0x0800be41

0800bed4 <__sfp_lock_acquire>:
 800bed4:	4801      	ldr	r0, [pc, #4]	@ (800bedc <__sfp_lock_acquire+0x8>)
 800bed6:	f000 ba86 	b.w	800c3e6 <__retarget_lock_acquire_recursive>
 800beda:	bf00      	nop
 800bedc:	20000b89 	.word	0x20000b89

0800bee0 <__sfp_lock_release>:
 800bee0:	4801      	ldr	r0, [pc, #4]	@ (800bee8 <__sfp_lock_release+0x8>)
 800bee2:	f000 ba81 	b.w	800c3e8 <__retarget_lock_release_recursive>
 800bee6:	bf00      	nop
 800bee8:	20000b89 	.word	0x20000b89

0800beec <__sinit>:
 800beec:	b510      	push	{r4, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	f7ff fff0 	bl	800bed4 <__sfp_lock_acquire>
 800bef4:	6a23      	ldr	r3, [r4, #32]
 800bef6:	b11b      	cbz	r3, 800bf00 <__sinit+0x14>
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befc:	f7ff bff0 	b.w	800bee0 <__sfp_lock_release>
 800bf00:	4b04      	ldr	r3, [pc, #16]	@ (800bf14 <__sinit+0x28>)
 800bf02:	6223      	str	r3, [r4, #32]
 800bf04:	4b04      	ldr	r3, [pc, #16]	@ (800bf18 <__sinit+0x2c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1f5      	bne.n	800bef8 <__sinit+0xc>
 800bf0c:	f7ff ffc4 	bl	800be98 <global_stdio_init.part.0>
 800bf10:	e7f2      	b.n	800bef8 <__sinit+0xc>
 800bf12:	bf00      	nop
 800bf14:	0800be59 	.word	0x0800be59
 800bf18:	20000b80 	.word	0x20000b80

0800bf1c <_fwalk_sglue>:
 800bf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf20:	4607      	mov	r7, r0
 800bf22:	4688      	mov	r8, r1
 800bf24:	4614      	mov	r4, r2
 800bf26:	2600      	movs	r6, #0
 800bf28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf2c:	f1b9 0901 	subs.w	r9, r9, #1
 800bf30:	d505      	bpl.n	800bf3e <_fwalk_sglue+0x22>
 800bf32:	6824      	ldr	r4, [r4, #0]
 800bf34:	2c00      	cmp	r4, #0
 800bf36:	d1f7      	bne.n	800bf28 <_fwalk_sglue+0xc>
 800bf38:	4630      	mov	r0, r6
 800bf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d907      	bls.n	800bf54 <_fwalk_sglue+0x38>
 800bf44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	d003      	beq.n	800bf54 <_fwalk_sglue+0x38>
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	4638      	mov	r0, r7
 800bf50:	47c0      	blx	r8
 800bf52:	4306      	orrs	r6, r0
 800bf54:	3568      	adds	r5, #104	@ 0x68
 800bf56:	e7e9      	b.n	800bf2c <_fwalk_sglue+0x10>

0800bf58 <iprintf>:
 800bf58:	b40f      	push	{r0, r1, r2, r3}
 800bf5a:	b507      	push	{r0, r1, r2, lr}
 800bf5c:	4906      	ldr	r1, [pc, #24]	@ (800bf78 <iprintf+0x20>)
 800bf5e:	ab04      	add	r3, sp, #16
 800bf60:	6808      	ldr	r0, [r1, #0]
 800bf62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf66:	6881      	ldr	r1, [r0, #8]
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	f001 fe01 	bl	800db70 <_vfiprintf_r>
 800bf6e:	b003      	add	sp, #12
 800bf70:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf74:	b004      	add	sp, #16
 800bf76:	4770      	bx	lr
 800bf78:	20000208 	.word	0x20000208

0800bf7c <_puts_r>:
 800bf7c:	6a03      	ldr	r3, [r0, #32]
 800bf7e:	b570      	push	{r4, r5, r6, lr}
 800bf80:	6884      	ldr	r4, [r0, #8]
 800bf82:	4605      	mov	r5, r0
 800bf84:	460e      	mov	r6, r1
 800bf86:	b90b      	cbnz	r3, 800bf8c <_puts_r+0x10>
 800bf88:	f7ff ffb0 	bl	800beec <__sinit>
 800bf8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf8e:	07db      	lsls	r3, r3, #31
 800bf90:	d405      	bmi.n	800bf9e <_puts_r+0x22>
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	0598      	lsls	r0, r3, #22
 800bf96:	d402      	bmi.n	800bf9e <_puts_r+0x22>
 800bf98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf9a:	f000 fa24 	bl	800c3e6 <__retarget_lock_acquire_recursive>
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	0719      	lsls	r1, r3, #28
 800bfa2:	d502      	bpl.n	800bfaa <_puts_r+0x2e>
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d135      	bne.n	800c016 <_puts_r+0x9a>
 800bfaa:	4621      	mov	r1, r4
 800bfac:	4628      	mov	r0, r5
 800bfae:	f000 f915 	bl	800c1dc <__swsetup_r>
 800bfb2:	b380      	cbz	r0, 800c016 <_puts_r+0x9a>
 800bfb4:	f04f 35ff 	mov.w	r5, #4294967295
 800bfb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfba:	07da      	lsls	r2, r3, #31
 800bfbc:	d405      	bmi.n	800bfca <_puts_r+0x4e>
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	059b      	lsls	r3, r3, #22
 800bfc2:	d402      	bmi.n	800bfca <_puts_r+0x4e>
 800bfc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfc6:	f000 fa0f 	bl	800c3e8 <__retarget_lock_release_recursive>
 800bfca:	4628      	mov	r0, r5
 800bfcc:	bd70      	pop	{r4, r5, r6, pc}
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	da04      	bge.n	800bfdc <_puts_r+0x60>
 800bfd2:	69a2      	ldr	r2, [r4, #24]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	dc17      	bgt.n	800c008 <_puts_r+0x8c>
 800bfd8:	290a      	cmp	r1, #10
 800bfda:	d015      	beq.n	800c008 <_puts_r+0x8c>
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	6022      	str	r2, [r4, #0]
 800bfe2:	7019      	strb	r1, [r3, #0]
 800bfe4:	68a3      	ldr	r3, [r4, #8]
 800bfe6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfea:	3b01      	subs	r3, #1
 800bfec:	60a3      	str	r3, [r4, #8]
 800bfee:	2900      	cmp	r1, #0
 800bff0:	d1ed      	bne.n	800bfce <_puts_r+0x52>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	da11      	bge.n	800c01a <_puts_r+0x9e>
 800bff6:	4622      	mov	r2, r4
 800bff8:	210a      	movs	r1, #10
 800bffa:	4628      	mov	r0, r5
 800bffc:	f000 f8af 	bl	800c15e <__swbuf_r>
 800c000:	3001      	adds	r0, #1
 800c002:	d0d7      	beq.n	800bfb4 <_puts_r+0x38>
 800c004:	250a      	movs	r5, #10
 800c006:	e7d7      	b.n	800bfb8 <_puts_r+0x3c>
 800c008:	4622      	mov	r2, r4
 800c00a:	4628      	mov	r0, r5
 800c00c:	f000 f8a7 	bl	800c15e <__swbuf_r>
 800c010:	3001      	adds	r0, #1
 800c012:	d1e7      	bne.n	800bfe4 <_puts_r+0x68>
 800c014:	e7ce      	b.n	800bfb4 <_puts_r+0x38>
 800c016:	3e01      	subs	r6, #1
 800c018:	e7e4      	b.n	800bfe4 <_puts_r+0x68>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	1c5a      	adds	r2, r3, #1
 800c01e:	6022      	str	r2, [r4, #0]
 800c020:	220a      	movs	r2, #10
 800c022:	701a      	strb	r2, [r3, #0]
 800c024:	e7ee      	b.n	800c004 <_puts_r+0x88>
	...

0800c028 <puts>:
 800c028:	4b02      	ldr	r3, [pc, #8]	@ (800c034 <puts+0xc>)
 800c02a:	4601      	mov	r1, r0
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	f7ff bfa5 	b.w	800bf7c <_puts_r>
 800c032:	bf00      	nop
 800c034:	20000208 	.word	0x20000208

0800c038 <siprintf>:
 800c038:	b40e      	push	{r1, r2, r3}
 800c03a:	b510      	push	{r4, lr}
 800c03c:	b09d      	sub	sp, #116	@ 0x74
 800c03e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c040:	9002      	str	r0, [sp, #8]
 800c042:	9006      	str	r0, [sp, #24]
 800c044:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c048:	480a      	ldr	r0, [pc, #40]	@ (800c074 <siprintf+0x3c>)
 800c04a:	9107      	str	r1, [sp, #28]
 800c04c:	9104      	str	r1, [sp, #16]
 800c04e:	490a      	ldr	r1, [pc, #40]	@ (800c078 <siprintf+0x40>)
 800c050:	f853 2b04 	ldr.w	r2, [r3], #4
 800c054:	9105      	str	r1, [sp, #20]
 800c056:	2400      	movs	r4, #0
 800c058:	a902      	add	r1, sp, #8
 800c05a:	6800      	ldr	r0, [r0, #0]
 800c05c:	9301      	str	r3, [sp, #4]
 800c05e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c060:	f001 fa90 	bl	800d584 <_svfiprintf_r>
 800c064:	9b02      	ldr	r3, [sp, #8]
 800c066:	701c      	strb	r4, [r3, #0]
 800c068:	b01d      	add	sp, #116	@ 0x74
 800c06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c06e:	b003      	add	sp, #12
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	20000208 	.word	0x20000208
 800c078:	ffff0208 	.word	0xffff0208

0800c07c <siscanf>:
 800c07c:	b40e      	push	{r1, r2, r3}
 800c07e:	b570      	push	{r4, r5, r6, lr}
 800c080:	b09d      	sub	sp, #116	@ 0x74
 800c082:	ac21      	add	r4, sp, #132	@ 0x84
 800c084:	2500      	movs	r5, #0
 800c086:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c08a:	f854 6b04 	ldr.w	r6, [r4], #4
 800c08e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c092:	951b      	str	r5, [sp, #108]	@ 0x6c
 800c094:	9002      	str	r0, [sp, #8]
 800c096:	9006      	str	r0, [sp, #24]
 800c098:	f7f4 f89a 	bl	80001d0 <strlen>
 800c09c:	4b0b      	ldr	r3, [pc, #44]	@ (800c0cc <siscanf+0x50>)
 800c09e:	9003      	str	r0, [sp, #12]
 800c0a0:	9007      	str	r0, [sp, #28]
 800c0a2:	480b      	ldr	r0, [pc, #44]	@ (800c0d0 <siscanf+0x54>)
 800c0a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c0aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c0ae:	4632      	mov	r2, r6
 800c0b0:	4623      	mov	r3, r4
 800c0b2:	a902      	add	r1, sp, #8
 800c0b4:	6800      	ldr	r0, [r0, #0]
 800c0b6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c0b8:	9514      	str	r5, [sp, #80]	@ 0x50
 800c0ba:	9401      	str	r4, [sp, #4]
 800c0bc:	f001 fbb8 	bl	800d830 <__ssvfiscanf_r>
 800c0c0:	b01d      	add	sp, #116	@ 0x74
 800c0c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0c6:	b003      	add	sp, #12
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	0800c0f7 	.word	0x0800c0f7
 800c0d0:	20000208 	.word	0x20000208

0800c0d4 <__sread>:
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0dc:	f000 f924 	bl	800c328 <_read_r>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	bfab      	itete	ge
 800c0e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0e8:	181b      	addge	r3, r3, r0
 800c0ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0ee:	bfac      	ite	ge
 800c0f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c0f2:	81a3      	strhlt	r3, [r4, #12]
 800c0f4:	bd10      	pop	{r4, pc}

0800c0f6 <__seofread>:
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	4770      	bx	lr

0800c0fa <__swrite>:
 800c0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fe:	461f      	mov	r7, r3
 800c100:	898b      	ldrh	r3, [r1, #12]
 800c102:	05db      	lsls	r3, r3, #23
 800c104:	4605      	mov	r5, r0
 800c106:	460c      	mov	r4, r1
 800c108:	4616      	mov	r6, r2
 800c10a:	d505      	bpl.n	800c118 <__swrite+0x1e>
 800c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c110:	2302      	movs	r3, #2
 800c112:	2200      	movs	r2, #0
 800c114:	f000 f8f6 	bl	800c304 <_lseek_r>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c11e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	4632      	mov	r2, r6
 800c126:	463b      	mov	r3, r7
 800c128:	4628      	mov	r0, r5
 800c12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c12e:	f000 b91d 	b.w	800c36c <_write_r>

0800c132 <__sseek>:
 800c132:	b510      	push	{r4, lr}
 800c134:	460c      	mov	r4, r1
 800c136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c13a:	f000 f8e3 	bl	800c304 <_lseek_r>
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	bf15      	itete	ne
 800c144:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c146:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c14a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c14e:	81a3      	strheq	r3, [r4, #12]
 800c150:	bf18      	it	ne
 800c152:	81a3      	strhne	r3, [r4, #12]
 800c154:	bd10      	pop	{r4, pc}

0800c156 <__sclose>:
 800c156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15a:	f000 b8c3 	b.w	800c2e4 <_close_r>

0800c15e <__swbuf_r>:
 800c15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c160:	460e      	mov	r6, r1
 800c162:	4614      	mov	r4, r2
 800c164:	4605      	mov	r5, r0
 800c166:	b118      	cbz	r0, 800c170 <__swbuf_r+0x12>
 800c168:	6a03      	ldr	r3, [r0, #32]
 800c16a:	b90b      	cbnz	r3, 800c170 <__swbuf_r+0x12>
 800c16c:	f7ff febe 	bl	800beec <__sinit>
 800c170:	69a3      	ldr	r3, [r4, #24]
 800c172:	60a3      	str	r3, [r4, #8]
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	071a      	lsls	r2, r3, #28
 800c178:	d501      	bpl.n	800c17e <__swbuf_r+0x20>
 800c17a:	6923      	ldr	r3, [r4, #16]
 800c17c:	b943      	cbnz	r3, 800c190 <__swbuf_r+0x32>
 800c17e:	4621      	mov	r1, r4
 800c180:	4628      	mov	r0, r5
 800c182:	f000 f82b 	bl	800c1dc <__swsetup_r>
 800c186:	b118      	cbz	r0, 800c190 <__swbuf_r+0x32>
 800c188:	f04f 37ff 	mov.w	r7, #4294967295
 800c18c:	4638      	mov	r0, r7
 800c18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	6922      	ldr	r2, [r4, #16]
 800c194:	1a98      	subs	r0, r3, r2
 800c196:	6963      	ldr	r3, [r4, #20]
 800c198:	b2f6      	uxtb	r6, r6
 800c19a:	4283      	cmp	r3, r0
 800c19c:	4637      	mov	r7, r6
 800c19e:	dc05      	bgt.n	800c1ac <__swbuf_r+0x4e>
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f002 f95a 	bl	800e45c <_fflush_r>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d1ed      	bne.n	800c188 <__swbuf_r+0x2a>
 800c1ac:	68a3      	ldr	r3, [r4, #8]
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	60a3      	str	r3, [r4, #8]
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	6022      	str	r2, [r4, #0]
 800c1b8:	701e      	strb	r6, [r3, #0]
 800c1ba:	6962      	ldr	r2, [r4, #20]
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d004      	beq.n	800c1cc <__swbuf_r+0x6e>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	07db      	lsls	r3, r3, #31
 800c1c6:	d5e1      	bpl.n	800c18c <__swbuf_r+0x2e>
 800c1c8:	2e0a      	cmp	r6, #10
 800c1ca:	d1df      	bne.n	800c18c <__swbuf_r+0x2e>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f002 f944 	bl	800e45c <_fflush_r>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d0d9      	beq.n	800c18c <__swbuf_r+0x2e>
 800c1d8:	e7d6      	b.n	800c188 <__swbuf_r+0x2a>
	...

0800c1dc <__swsetup_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4b29      	ldr	r3, [pc, #164]	@ (800c284 <__swsetup_r+0xa8>)
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	6818      	ldr	r0, [r3, #0]
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	b118      	cbz	r0, 800c1f0 <__swsetup_r+0x14>
 800c1e8:	6a03      	ldr	r3, [r0, #32]
 800c1ea:	b90b      	cbnz	r3, 800c1f0 <__swsetup_r+0x14>
 800c1ec:	f7ff fe7e 	bl	800beec <__sinit>
 800c1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f4:	0719      	lsls	r1, r3, #28
 800c1f6:	d422      	bmi.n	800c23e <__swsetup_r+0x62>
 800c1f8:	06da      	lsls	r2, r3, #27
 800c1fa:	d407      	bmi.n	800c20c <__swsetup_r+0x30>
 800c1fc:	2209      	movs	r2, #9
 800c1fe:	602a      	str	r2, [r5, #0]
 800c200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	f04f 30ff 	mov.w	r0, #4294967295
 800c20a:	e033      	b.n	800c274 <__swsetup_r+0x98>
 800c20c:	0758      	lsls	r0, r3, #29
 800c20e:	d512      	bpl.n	800c236 <__swsetup_r+0x5a>
 800c210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c212:	b141      	cbz	r1, 800c226 <__swsetup_r+0x4a>
 800c214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c218:	4299      	cmp	r1, r3
 800c21a:	d002      	beq.n	800c222 <__swsetup_r+0x46>
 800c21c:	4628      	mov	r0, r5
 800c21e:	f000 f901 	bl	800c424 <_free_r>
 800c222:	2300      	movs	r3, #0
 800c224:	6363      	str	r3, [r4, #52]	@ 0x34
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c22c:	81a3      	strh	r3, [r4, #12]
 800c22e:	2300      	movs	r3, #0
 800c230:	6063      	str	r3, [r4, #4]
 800c232:	6923      	ldr	r3, [r4, #16]
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f043 0308 	orr.w	r3, r3, #8
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	b94b      	cbnz	r3, 800c256 <__swsetup_r+0x7a>
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c24c:	d003      	beq.n	800c256 <__swsetup_r+0x7a>
 800c24e:	4621      	mov	r1, r4
 800c250:	4628      	mov	r0, r5
 800c252:	f002 f951 	bl	800e4f8 <__smakebuf_r>
 800c256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c25a:	f013 0201 	ands.w	r2, r3, #1
 800c25e:	d00a      	beq.n	800c276 <__swsetup_r+0x9a>
 800c260:	2200      	movs	r2, #0
 800c262:	60a2      	str	r2, [r4, #8]
 800c264:	6962      	ldr	r2, [r4, #20]
 800c266:	4252      	negs	r2, r2
 800c268:	61a2      	str	r2, [r4, #24]
 800c26a:	6922      	ldr	r2, [r4, #16]
 800c26c:	b942      	cbnz	r2, 800c280 <__swsetup_r+0xa4>
 800c26e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c272:	d1c5      	bne.n	800c200 <__swsetup_r+0x24>
 800c274:	bd38      	pop	{r3, r4, r5, pc}
 800c276:	0799      	lsls	r1, r3, #30
 800c278:	bf58      	it	pl
 800c27a:	6962      	ldrpl	r2, [r4, #20]
 800c27c:	60a2      	str	r2, [r4, #8]
 800c27e:	e7f4      	b.n	800c26a <__swsetup_r+0x8e>
 800c280:	2000      	movs	r0, #0
 800c282:	e7f7      	b.n	800c274 <__swsetup_r+0x98>
 800c284:	20000208 	.word	0x20000208

0800c288 <memset>:
 800c288:	4402      	add	r2, r0
 800c28a:	4603      	mov	r3, r0
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d100      	bne.n	800c292 <memset+0xa>
 800c290:	4770      	bx	lr
 800c292:	f803 1b01 	strb.w	r1, [r3], #1
 800c296:	e7f9      	b.n	800c28c <memset+0x4>

0800c298 <strncmp>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	b16a      	cbz	r2, 800c2b8 <strncmp+0x20>
 800c29c:	3901      	subs	r1, #1
 800c29e:	1884      	adds	r4, r0, r2
 800c2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d103      	bne.n	800c2b4 <strncmp+0x1c>
 800c2ac:	42a0      	cmp	r0, r4
 800c2ae:	d001      	beq.n	800c2b4 <strncmp+0x1c>
 800c2b0:	2a00      	cmp	r2, #0
 800c2b2:	d1f5      	bne.n	800c2a0 <strncmp+0x8>
 800c2b4:	1ad0      	subs	r0, r2, r3
 800c2b6:	bd10      	pop	{r4, pc}
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	e7fc      	b.n	800c2b6 <strncmp+0x1e>

0800c2bc <strncpy>:
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	3901      	subs	r1, #1
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	b132      	cbz	r2, 800c2d2 <strncpy+0x16>
 800c2c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c2c8:	f803 4b01 	strb.w	r4, [r3], #1
 800c2cc:	3a01      	subs	r2, #1
 800c2ce:	2c00      	cmp	r4, #0
 800c2d0:	d1f7      	bne.n	800c2c2 <strncpy+0x6>
 800c2d2:	441a      	add	r2, r3
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d100      	bne.n	800c2dc <strncpy+0x20>
 800c2da:	bd10      	pop	{r4, pc}
 800c2dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c2e0:	e7f9      	b.n	800c2d6 <strncpy+0x1a>
	...

0800c2e4 <_close_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4d06      	ldr	r5, [pc, #24]	@ (800c300 <_close_r+0x1c>)
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	602b      	str	r3, [r5, #0]
 800c2f0:	f7f9 f8bc 	bl	800546c <_close>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_close_r+0x1a>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_close_r+0x1a>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	20000b84 	.word	0x20000b84

0800c304 <_lseek_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	@ (800c324 <_lseek_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f7f9 f8d1 	bl	80054ba <_lseek>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_lseek_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_lseek_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20000b84 	.word	0x20000b84

0800c328 <_read_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d07      	ldr	r5, [pc, #28]	@ (800c348 <_read_r+0x20>)
 800c32c:	4604      	mov	r4, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	4611      	mov	r1, r2
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f7f9 f85f 	bl	80053fa <_read>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_read_r+0x1e>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_read_r+0x1e>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20000b84 	.word	0x20000b84

0800c34c <_sbrk_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d06      	ldr	r5, [pc, #24]	@ (800c368 <_sbrk_r+0x1c>)
 800c350:	2300      	movs	r3, #0
 800c352:	4604      	mov	r4, r0
 800c354:	4608      	mov	r0, r1
 800c356:	602b      	str	r3, [r5, #0]
 800c358:	f7f9 f8bc 	bl	80054d4 <_sbrk>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_sbrk_r+0x1a>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_sbrk_r+0x1a>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	20000b84 	.word	0x20000b84

0800c36c <_write_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d07      	ldr	r5, [pc, #28]	@ (800c38c <_write_r+0x20>)
 800c370:	4604      	mov	r4, r0
 800c372:	4608      	mov	r0, r1
 800c374:	4611      	mov	r1, r2
 800c376:	2200      	movs	r2, #0
 800c378:	602a      	str	r2, [r5, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	f7f9 f85a 	bl	8005434 <_write>
 800c380:	1c43      	adds	r3, r0, #1
 800c382:	d102      	bne.n	800c38a <_write_r+0x1e>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	b103      	cbz	r3, 800c38a <_write_r+0x1e>
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	20000b84 	.word	0x20000b84

0800c390 <__errno>:
 800c390:	4b01      	ldr	r3, [pc, #4]	@ (800c398 <__errno+0x8>)
 800c392:	6818      	ldr	r0, [r3, #0]
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	20000208 	.word	0x20000208

0800c39c <__libc_init_array>:
 800c39c:	b570      	push	{r4, r5, r6, lr}
 800c39e:	4d0d      	ldr	r5, [pc, #52]	@ (800c3d4 <__libc_init_array+0x38>)
 800c3a0:	4c0d      	ldr	r4, [pc, #52]	@ (800c3d8 <__libc_init_array+0x3c>)
 800c3a2:	1b64      	subs	r4, r4, r5
 800c3a4:	10a4      	asrs	r4, r4, #2
 800c3a6:	2600      	movs	r6, #0
 800c3a8:	42a6      	cmp	r6, r4
 800c3aa:	d109      	bne.n	800c3c0 <__libc_init_array+0x24>
 800c3ac:	4d0b      	ldr	r5, [pc, #44]	@ (800c3dc <__libc_init_array+0x40>)
 800c3ae:	4c0c      	ldr	r4, [pc, #48]	@ (800c3e0 <__libc_init_array+0x44>)
 800c3b0:	f003 fb06 	bl	800f9c0 <_init>
 800c3b4:	1b64      	subs	r4, r4, r5
 800c3b6:	10a4      	asrs	r4, r4, #2
 800c3b8:	2600      	movs	r6, #0
 800c3ba:	42a6      	cmp	r6, r4
 800c3bc:	d105      	bne.n	800c3ca <__libc_init_array+0x2e>
 800c3be:	bd70      	pop	{r4, r5, r6, pc}
 800c3c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c4:	4798      	blx	r3
 800c3c6:	3601      	adds	r6, #1
 800c3c8:	e7ee      	b.n	800c3a8 <__libc_init_array+0xc>
 800c3ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ce:	4798      	blx	r3
 800c3d0:	3601      	adds	r6, #1
 800c3d2:	e7f2      	b.n	800c3ba <__libc_init_array+0x1e>
 800c3d4:	08010200 	.word	0x08010200
 800c3d8:	08010200 	.word	0x08010200
 800c3dc:	08010200 	.word	0x08010200
 800c3e0:	08010204 	.word	0x08010204

0800c3e4 <__retarget_lock_init_recursive>:
 800c3e4:	4770      	bx	lr

0800c3e6 <__retarget_lock_acquire_recursive>:
 800c3e6:	4770      	bx	lr

0800c3e8 <__retarget_lock_release_recursive>:
 800c3e8:	4770      	bx	lr

0800c3ea <memcpy>:
 800c3ea:	440a      	add	r2, r1
 800c3ec:	4291      	cmp	r1, r2
 800c3ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3f2:	d100      	bne.n	800c3f6 <memcpy+0xc>
 800c3f4:	4770      	bx	lr
 800c3f6:	b510      	push	{r4, lr}
 800c3f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c400:	4291      	cmp	r1, r2
 800c402:	d1f9      	bne.n	800c3f8 <memcpy+0xe>
 800c404:	bd10      	pop	{r4, pc}
	...

0800c408 <nan>:
 800c408:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c410 <nan+0x8>
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	00000000 	.word	0x00000000
 800c414:	7ff80000 	.word	0x7ff80000

0800c418 <nanf>:
 800c418:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c420 <nanf+0x8>
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	7fc00000 	.word	0x7fc00000

0800c424 <_free_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4605      	mov	r5, r0
 800c428:	2900      	cmp	r1, #0
 800c42a:	d041      	beq.n	800c4b0 <_free_r+0x8c>
 800c42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c430:	1f0c      	subs	r4, r1, #4
 800c432:	2b00      	cmp	r3, #0
 800c434:	bfb8      	it	lt
 800c436:	18e4      	addlt	r4, r4, r3
 800c438:	f7fe fbf4 	bl	800ac24 <__malloc_lock>
 800c43c:	4a1d      	ldr	r2, [pc, #116]	@ (800c4b4 <_free_r+0x90>)
 800c43e:	6813      	ldr	r3, [r2, #0]
 800c440:	b933      	cbnz	r3, 800c450 <_free_r+0x2c>
 800c442:	6063      	str	r3, [r4, #4]
 800c444:	6014      	str	r4, [r2, #0]
 800c446:	4628      	mov	r0, r5
 800c448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c44c:	f7fe bbf0 	b.w	800ac30 <__malloc_unlock>
 800c450:	42a3      	cmp	r3, r4
 800c452:	d908      	bls.n	800c466 <_free_r+0x42>
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	1821      	adds	r1, r4, r0
 800c458:	428b      	cmp	r3, r1
 800c45a:	bf01      	itttt	eq
 800c45c:	6819      	ldreq	r1, [r3, #0]
 800c45e:	685b      	ldreq	r3, [r3, #4]
 800c460:	1809      	addeq	r1, r1, r0
 800c462:	6021      	streq	r1, [r4, #0]
 800c464:	e7ed      	b.n	800c442 <_free_r+0x1e>
 800c466:	461a      	mov	r2, r3
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	b10b      	cbz	r3, 800c470 <_free_r+0x4c>
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	d9fa      	bls.n	800c466 <_free_r+0x42>
 800c470:	6811      	ldr	r1, [r2, #0]
 800c472:	1850      	adds	r0, r2, r1
 800c474:	42a0      	cmp	r0, r4
 800c476:	d10b      	bne.n	800c490 <_free_r+0x6c>
 800c478:	6820      	ldr	r0, [r4, #0]
 800c47a:	4401      	add	r1, r0
 800c47c:	1850      	adds	r0, r2, r1
 800c47e:	4283      	cmp	r3, r0
 800c480:	6011      	str	r1, [r2, #0]
 800c482:	d1e0      	bne.n	800c446 <_free_r+0x22>
 800c484:	6818      	ldr	r0, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	6053      	str	r3, [r2, #4]
 800c48a:	4408      	add	r0, r1
 800c48c:	6010      	str	r0, [r2, #0]
 800c48e:	e7da      	b.n	800c446 <_free_r+0x22>
 800c490:	d902      	bls.n	800c498 <_free_r+0x74>
 800c492:	230c      	movs	r3, #12
 800c494:	602b      	str	r3, [r5, #0]
 800c496:	e7d6      	b.n	800c446 <_free_r+0x22>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	1821      	adds	r1, r4, r0
 800c49c:	428b      	cmp	r3, r1
 800c49e:	bf04      	itt	eq
 800c4a0:	6819      	ldreq	r1, [r3, #0]
 800c4a2:	685b      	ldreq	r3, [r3, #4]
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	bf04      	itt	eq
 800c4a8:	1809      	addeq	r1, r1, r0
 800c4aa:	6021      	streq	r1, [r4, #0]
 800c4ac:	6054      	str	r4, [r2, #4]
 800c4ae:	e7ca      	b.n	800c446 <_free_r+0x22>
 800c4b0:	bd38      	pop	{r3, r4, r5, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20000a44 	.word	0x20000a44

0800c4b8 <rshift>:
 800c4b8:	6903      	ldr	r3, [r0, #16]
 800c4ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c4be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4c6:	f100 0414 	add.w	r4, r0, #20
 800c4ca:	dd45      	ble.n	800c558 <rshift+0xa0>
 800c4cc:	f011 011f 	ands.w	r1, r1, #31
 800c4d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4d8:	d10c      	bne.n	800c4f4 <rshift+0x3c>
 800c4da:	f100 0710 	add.w	r7, r0, #16
 800c4de:	4629      	mov	r1, r5
 800c4e0:	42b1      	cmp	r1, r6
 800c4e2:	d334      	bcc.n	800c54e <rshift+0x96>
 800c4e4:	1a9b      	subs	r3, r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	1eea      	subs	r2, r5, #3
 800c4ea:	4296      	cmp	r6, r2
 800c4ec:	bf38      	it	cc
 800c4ee:	2300      	movcc	r3, #0
 800c4f0:	4423      	add	r3, r4
 800c4f2:	e015      	b.n	800c520 <rshift+0x68>
 800c4f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4f8:	f1c1 0820 	rsb	r8, r1, #32
 800c4fc:	40cf      	lsrs	r7, r1
 800c4fe:	f105 0e04 	add.w	lr, r5, #4
 800c502:	46a1      	mov	r9, r4
 800c504:	4576      	cmp	r6, lr
 800c506:	46f4      	mov	ip, lr
 800c508:	d815      	bhi.n	800c536 <rshift+0x7e>
 800c50a:	1a9a      	subs	r2, r3, r2
 800c50c:	0092      	lsls	r2, r2, #2
 800c50e:	3a04      	subs	r2, #4
 800c510:	3501      	adds	r5, #1
 800c512:	42ae      	cmp	r6, r5
 800c514:	bf38      	it	cc
 800c516:	2200      	movcc	r2, #0
 800c518:	18a3      	adds	r3, r4, r2
 800c51a:	50a7      	str	r7, [r4, r2]
 800c51c:	b107      	cbz	r7, 800c520 <rshift+0x68>
 800c51e:	3304      	adds	r3, #4
 800c520:	1b1a      	subs	r2, r3, r4
 800c522:	42a3      	cmp	r3, r4
 800c524:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c528:	bf08      	it	eq
 800c52a:	2300      	moveq	r3, #0
 800c52c:	6102      	str	r2, [r0, #16]
 800c52e:	bf08      	it	eq
 800c530:	6143      	streq	r3, [r0, #20]
 800c532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c536:	f8dc c000 	ldr.w	ip, [ip]
 800c53a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c53e:	ea4c 0707 	orr.w	r7, ip, r7
 800c542:	f849 7b04 	str.w	r7, [r9], #4
 800c546:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c54a:	40cf      	lsrs	r7, r1
 800c54c:	e7da      	b.n	800c504 <rshift+0x4c>
 800c54e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c552:	f847 cf04 	str.w	ip, [r7, #4]!
 800c556:	e7c3      	b.n	800c4e0 <rshift+0x28>
 800c558:	4623      	mov	r3, r4
 800c55a:	e7e1      	b.n	800c520 <rshift+0x68>

0800c55c <__hexdig_fun>:
 800c55c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c560:	2b09      	cmp	r3, #9
 800c562:	d802      	bhi.n	800c56a <__hexdig_fun+0xe>
 800c564:	3820      	subs	r0, #32
 800c566:	b2c0      	uxtb	r0, r0
 800c568:	4770      	bx	lr
 800c56a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c56e:	2b05      	cmp	r3, #5
 800c570:	d801      	bhi.n	800c576 <__hexdig_fun+0x1a>
 800c572:	3847      	subs	r0, #71	@ 0x47
 800c574:	e7f7      	b.n	800c566 <__hexdig_fun+0xa>
 800c576:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c57a:	2b05      	cmp	r3, #5
 800c57c:	d801      	bhi.n	800c582 <__hexdig_fun+0x26>
 800c57e:	3827      	subs	r0, #39	@ 0x27
 800c580:	e7f1      	b.n	800c566 <__hexdig_fun+0xa>
 800c582:	2000      	movs	r0, #0
 800c584:	4770      	bx	lr
	...

0800c588 <__gethex>:
 800c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58c:	b085      	sub	sp, #20
 800c58e:	468a      	mov	sl, r1
 800c590:	9302      	str	r3, [sp, #8]
 800c592:	680b      	ldr	r3, [r1, #0]
 800c594:	9001      	str	r0, [sp, #4]
 800c596:	4690      	mov	r8, r2
 800c598:	1c9c      	adds	r4, r3, #2
 800c59a:	46a1      	mov	r9, r4
 800c59c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c5a0:	2830      	cmp	r0, #48	@ 0x30
 800c5a2:	d0fa      	beq.n	800c59a <__gethex+0x12>
 800c5a4:	eba9 0303 	sub.w	r3, r9, r3
 800c5a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800c5ac:	f7ff ffd6 	bl	800c55c <__hexdig_fun>
 800c5b0:	4605      	mov	r5, r0
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d168      	bne.n	800c688 <__gethex+0x100>
 800c5b6:	49a0      	ldr	r1, [pc, #640]	@ (800c838 <__gethex+0x2b0>)
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	4648      	mov	r0, r9
 800c5bc:	f7ff fe6c 	bl	800c298 <strncmp>
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d167      	bne.n	800c696 <__gethex+0x10e>
 800c5c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c5ca:	4626      	mov	r6, r4
 800c5cc:	f7ff ffc6 	bl	800c55c <__hexdig_fun>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d062      	beq.n	800c69a <__gethex+0x112>
 800c5d4:	4623      	mov	r3, r4
 800c5d6:	7818      	ldrb	r0, [r3, #0]
 800c5d8:	2830      	cmp	r0, #48	@ 0x30
 800c5da:	4699      	mov	r9, r3
 800c5dc:	f103 0301 	add.w	r3, r3, #1
 800c5e0:	d0f9      	beq.n	800c5d6 <__gethex+0x4e>
 800c5e2:	f7ff ffbb 	bl	800c55c <__hexdig_fun>
 800c5e6:	fab0 f580 	clz	r5, r0
 800c5ea:	096d      	lsrs	r5, r5, #5
 800c5ec:	f04f 0b01 	mov.w	fp, #1
 800c5f0:	464a      	mov	r2, r9
 800c5f2:	4616      	mov	r6, r2
 800c5f4:	3201      	adds	r2, #1
 800c5f6:	7830      	ldrb	r0, [r6, #0]
 800c5f8:	f7ff ffb0 	bl	800c55c <__hexdig_fun>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d1f8      	bne.n	800c5f2 <__gethex+0x6a>
 800c600:	498d      	ldr	r1, [pc, #564]	@ (800c838 <__gethex+0x2b0>)
 800c602:	2201      	movs	r2, #1
 800c604:	4630      	mov	r0, r6
 800c606:	f7ff fe47 	bl	800c298 <strncmp>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d13f      	bne.n	800c68e <__gethex+0x106>
 800c60e:	b944      	cbnz	r4, 800c622 <__gethex+0x9a>
 800c610:	1c74      	adds	r4, r6, #1
 800c612:	4622      	mov	r2, r4
 800c614:	4616      	mov	r6, r2
 800c616:	3201      	adds	r2, #1
 800c618:	7830      	ldrb	r0, [r6, #0]
 800c61a:	f7ff ff9f 	bl	800c55c <__hexdig_fun>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d1f8      	bne.n	800c614 <__gethex+0x8c>
 800c622:	1ba4      	subs	r4, r4, r6
 800c624:	00a7      	lsls	r7, r4, #2
 800c626:	7833      	ldrb	r3, [r6, #0]
 800c628:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c62c:	2b50      	cmp	r3, #80	@ 0x50
 800c62e:	d13e      	bne.n	800c6ae <__gethex+0x126>
 800c630:	7873      	ldrb	r3, [r6, #1]
 800c632:	2b2b      	cmp	r3, #43	@ 0x2b
 800c634:	d033      	beq.n	800c69e <__gethex+0x116>
 800c636:	2b2d      	cmp	r3, #45	@ 0x2d
 800c638:	d034      	beq.n	800c6a4 <__gethex+0x11c>
 800c63a:	1c71      	adds	r1, r6, #1
 800c63c:	2400      	movs	r4, #0
 800c63e:	7808      	ldrb	r0, [r1, #0]
 800c640:	f7ff ff8c 	bl	800c55c <__hexdig_fun>
 800c644:	1e43      	subs	r3, r0, #1
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b18      	cmp	r3, #24
 800c64a:	d830      	bhi.n	800c6ae <__gethex+0x126>
 800c64c:	f1a0 0210 	sub.w	r2, r0, #16
 800c650:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c654:	f7ff ff82 	bl	800c55c <__hexdig_fun>
 800c658:	f100 3cff 	add.w	ip, r0, #4294967295
 800c65c:	fa5f fc8c 	uxtb.w	ip, ip
 800c660:	f1bc 0f18 	cmp.w	ip, #24
 800c664:	f04f 030a 	mov.w	r3, #10
 800c668:	d91e      	bls.n	800c6a8 <__gethex+0x120>
 800c66a:	b104      	cbz	r4, 800c66e <__gethex+0xe6>
 800c66c:	4252      	negs	r2, r2
 800c66e:	4417      	add	r7, r2
 800c670:	f8ca 1000 	str.w	r1, [sl]
 800c674:	b1ed      	cbz	r5, 800c6b2 <__gethex+0x12a>
 800c676:	f1bb 0f00 	cmp.w	fp, #0
 800c67a:	bf0c      	ite	eq
 800c67c:	2506      	moveq	r5, #6
 800c67e:	2500      	movne	r5, #0
 800c680:	4628      	mov	r0, r5
 800c682:	b005      	add	sp, #20
 800c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	2500      	movs	r5, #0
 800c68a:	462c      	mov	r4, r5
 800c68c:	e7b0      	b.n	800c5f0 <__gethex+0x68>
 800c68e:	2c00      	cmp	r4, #0
 800c690:	d1c7      	bne.n	800c622 <__gethex+0x9a>
 800c692:	4627      	mov	r7, r4
 800c694:	e7c7      	b.n	800c626 <__gethex+0x9e>
 800c696:	464e      	mov	r6, r9
 800c698:	462f      	mov	r7, r5
 800c69a:	2501      	movs	r5, #1
 800c69c:	e7c3      	b.n	800c626 <__gethex+0x9e>
 800c69e:	2400      	movs	r4, #0
 800c6a0:	1cb1      	adds	r1, r6, #2
 800c6a2:	e7cc      	b.n	800c63e <__gethex+0xb6>
 800c6a4:	2401      	movs	r4, #1
 800c6a6:	e7fb      	b.n	800c6a0 <__gethex+0x118>
 800c6a8:	fb03 0002 	mla	r0, r3, r2, r0
 800c6ac:	e7ce      	b.n	800c64c <__gethex+0xc4>
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	e7de      	b.n	800c670 <__gethex+0xe8>
 800c6b2:	eba6 0309 	sub.w	r3, r6, r9
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	2b07      	cmp	r3, #7
 800c6bc:	dc0a      	bgt.n	800c6d4 <__gethex+0x14c>
 800c6be:	9801      	ldr	r0, [sp, #4]
 800c6c0:	f000 fa46 	bl	800cb50 <_Balloc>
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	b940      	cbnz	r0, 800c6da <__gethex+0x152>
 800c6c8:	4b5c      	ldr	r3, [pc, #368]	@ (800c83c <__gethex+0x2b4>)
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	21e4      	movs	r1, #228	@ 0xe4
 800c6ce:	485c      	ldr	r0, [pc, #368]	@ (800c840 <__gethex+0x2b8>)
 800c6d0:	f001 fffe 	bl	800e6d0 <__assert_func>
 800c6d4:	3101      	adds	r1, #1
 800c6d6:	105b      	asrs	r3, r3, #1
 800c6d8:	e7ef      	b.n	800c6ba <__gethex+0x132>
 800c6da:	f100 0a14 	add.w	sl, r0, #20
 800c6de:	2300      	movs	r3, #0
 800c6e0:	4655      	mov	r5, sl
 800c6e2:	469b      	mov	fp, r3
 800c6e4:	45b1      	cmp	r9, r6
 800c6e6:	d337      	bcc.n	800c758 <__gethex+0x1d0>
 800c6e8:	f845 bb04 	str.w	fp, [r5], #4
 800c6ec:	eba5 050a 	sub.w	r5, r5, sl
 800c6f0:	10ad      	asrs	r5, r5, #2
 800c6f2:	6125      	str	r5, [r4, #16]
 800c6f4:	4658      	mov	r0, fp
 800c6f6:	f000 fb1d 	bl	800cd34 <__hi0bits>
 800c6fa:	016d      	lsls	r5, r5, #5
 800c6fc:	f8d8 6000 	ldr.w	r6, [r8]
 800c700:	1a2d      	subs	r5, r5, r0
 800c702:	42b5      	cmp	r5, r6
 800c704:	dd54      	ble.n	800c7b0 <__gethex+0x228>
 800c706:	1bad      	subs	r5, r5, r6
 800c708:	4629      	mov	r1, r5
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 fea9 	bl	800d462 <__any_on>
 800c710:	4681      	mov	r9, r0
 800c712:	b178      	cbz	r0, 800c734 <__gethex+0x1ac>
 800c714:	1e6b      	subs	r3, r5, #1
 800c716:	1159      	asrs	r1, r3, #5
 800c718:	f003 021f 	and.w	r2, r3, #31
 800c71c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c720:	f04f 0901 	mov.w	r9, #1
 800c724:	fa09 f202 	lsl.w	r2, r9, r2
 800c728:	420a      	tst	r2, r1
 800c72a:	d003      	beq.n	800c734 <__gethex+0x1ac>
 800c72c:	454b      	cmp	r3, r9
 800c72e:	dc36      	bgt.n	800c79e <__gethex+0x216>
 800c730:	f04f 0902 	mov.w	r9, #2
 800c734:	4629      	mov	r1, r5
 800c736:	4620      	mov	r0, r4
 800c738:	f7ff febe 	bl	800c4b8 <rshift>
 800c73c:	442f      	add	r7, r5
 800c73e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c742:	42bb      	cmp	r3, r7
 800c744:	da42      	bge.n	800c7cc <__gethex+0x244>
 800c746:	9801      	ldr	r0, [sp, #4]
 800c748:	4621      	mov	r1, r4
 800c74a:	f000 fa41 	bl	800cbd0 <_Bfree>
 800c74e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c750:	2300      	movs	r3, #0
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	25a3      	movs	r5, #163	@ 0xa3
 800c756:	e793      	b.n	800c680 <__gethex+0xf8>
 800c758:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c75c:	2a2e      	cmp	r2, #46	@ 0x2e
 800c75e:	d012      	beq.n	800c786 <__gethex+0x1fe>
 800c760:	2b20      	cmp	r3, #32
 800c762:	d104      	bne.n	800c76e <__gethex+0x1e6>
 800c764:	f845 bb04 	str.w	fp, [r5], #4
 800c768:	f04f 0b00 	mov.w	fp, #0
 800c76c:	465b      	mov	r3, fp
 800c76e:	7830      	ldrb	r0, [r6, #0]
 800c770:	9303      	str	r3, [sp, #12]
 800c772:	f7ff fef3 	bl	800c55c <__hexdig_fun>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	f000 000f 	and.w	r0, r0, #15
 800c77c:	4098      	lsls	r0, r3
 800c77e:	ea4b 0b00 	orr.w	fp, fp, r0
 800c782:	3304      	adds	r3, #4
 800c784:	e7ae      	b.n	800c6e4 <__gethex+0x15c>
 800c786:	45b1      	cmp	r9, r6
 800c788:	d8ea      	bhi.n	800c760 <__gethex+0x1d8>
 800c78a:	492b      	ldr	r1, [pc, #172]	@ (800c838 <__gethex+0x2b0>)
 800c78c:	9303      	str	r3, [sp, #12]
 800c78e:	2201      	movs	r2, #1
 800c790:	4630      	mov	r0, r6
 800c792:	f7ff fd81 	bl	800c298 <strncmp>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	2800      	cmp	r0, #0
 800c79a:	d1e1      	bne.n	800c760 <__gethex+0x1d8>
 800c79c:	e7a2      	b.n	800c6e4 <__gethex+0x15c>
 800c79e:	1ea9      	subs	r1, r5, #2
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f000 fe5e 	bl	800d462 <__any_on>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d0c2      	beq.n	800c730 <__gethex+0x1a8>
 800c7aa:	f04f 0903 	mov.w	r9, #3
 800c7ae:	e7c1      	b.n	800c734 <__gethex+0x1ac>
 800c7b0:	da09      	bge.n	800c7c6 <__gethex+0x23e>
 800c7b2:	1b75      	subs	r5, r6, r5
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	9801      	ldr	r0, [sp, #4]
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	f000 fc19 	bl	800cff0 <__lshift>
 800c7be:	1b7f      	subs	r7, r7, r5
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	f100 0a14 	add.w	sl, r0, #20
 800c7c6:	f04f 0900 	mov.w	r9, #0
 800c7ca:	e7b8      	b.n	800c73e <__gethex+0x1b6>
 800c7cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c7d0:	42bd      	cmp	r5, r7
 800c7d2:	dd6f      	ble.n	800c8b4 <__gethex+0x32c>
 800c7d4:	1bed      	subs	r5, r5, r7
 800c7d6:	42ae      	cmp	r6, r5
 800c7d8:	dc34      	bgt.n	800c844 <__gethex+0x2bc>
 800c7da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d022      	beq.n	800c828 <__gethex+0x2a0>
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d024      	beq.n	800c830 <__gethex+0x2a8>
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d115      	bne.n	800c816 <__gethex+0x28e>
 800c7ea:	42ae      	cmp	r6, r5
 800c7ec:	d113      	bne.n	800c816 <__gethex+0x28e>
 800c7ee:	2e01      	cmp	r6, #1
 800c7f0:	d10b      	bne.n	800c80a <__gethex+0x282>
 800c7f2:	9a02      	ldr	r2, [sp, #8]
 800c7f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	6123      	str	r3, [r4, #16]
 800c7fe:	f8ca 3000 	str.w	r3, [sl]
 800c802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c804:	2562      	movs	r5, #98	@ 0x62
 800c806:	601c      	str	r4, [r3, #0]
 800c808:	e73a      	b.n	800c680 <__gethex+0xf8>
 800c80a:	1e71      	subs	r1, r6, #1
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 fe28 	bl	800d462 <__any_on>
 800c812:	2800      	cmp	r0, #0
 800c814:	d1ed      	bne.n	800c7f2 <__gethex+0x26a>
 800c816:	9801      	ldr	r0, [sp, #4]
 800c818:	4621      	mov	r1, r4
 800c81a:	f000 f9d9 	bl	800cbd0 <_Bfree>
 800c81e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c820:	2300      	movs	r3, #0
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	2550      	movs	r5, #80	@ 0x50
 800c826:	e72b      	b.n	800c680 <__gethex+0xf8>
 800c828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1f3      	bne.n	800c816 <__gethex+0x28e>
 800c82e:	e7e0      	b.n	800c7f2 <__gethex+0x26a>
 800c830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1dd      	bne.n	800c7f2 <__gethex+0x26a>
 800c836:	e7ee      	b.n	800c816 <__gethex+0x28e>
 800c838:	0800fc44 	.word	0x0800fc44
 800c83c:	0800fc5f 	.word	0x0800fc5f
 800c840:	0800fc70 	.word	0x0800fc70
 800c844:	1e6f      	subs	r7, r5, #1
 800c846:	f1b9 0f00 	cmp.w	r9, #0
 800c84a:	d130      	bne.n	800c8ae <__gethex+0x326>
 800c84c:	b127      	cbz	r7, 800c858 <__gethex+0x2d0>
 800c84e:	4639      	mov	r1, r7
 800c850:	4620      	mov	r0, r4
 800c852:	f000 fe06 	bl	800d462 <__any_on>
 800c856:	4681      	mov	r9, r0
 800c858:	117a      	asrs	r2, r7, #5
 800c85a:	2301      	movs	r3, #1
 800c85c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c860:	f007 071f 	and.w	r7, r7, #31
 800c864:	40bb      	lsls	r3, r7
 800c866:	4213      	tst	r3, r2
 800c868:	4629      	mov	r1, r5
 800c86a:	4620      	mov	r0, r4
 800c86c:	bf18      	it	ne
 800c86e:	f049 0902 	orrne.w	r9, r9, #2
 800c872:	f7ff fe21 	bl	800c4b8 <rshift>
 800c876:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c87a:	1b76      	subs	r6, r6, r5
 800c87c:	2502      	movs	r5, #2
 800c87e:	f1b9 0f00 	cmp.w	r9, #0
 800c882:	d047      	beq.n	800c914 <__gethex+0x38c>
 800c884:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d015      	beq.n	800c8b8 <__gethex+0x330>
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d017      	beq.n	800c8c0 <__gethex+0x338>
 800c890:	2b01      	cmp	r3, #1
 800c892:	d109      	bne.n	800c8a8 <__gethex+0x320>
 800c894:	f019 0f02 	tst.w	r9, #2
 800c898:	d006      	beq.n	800c8a8 <__gethex+0x320>
 800c89a:	f8da 3000 	ldr.w	r3, [sl]
 800c89e:	ea49 0903 	orr.w	r9, r9, r3
 800c8a2:	f019 0f01 	tst.w	r9, #1
 800c8a6:	d10e      	bne.n	800c8c6 <__gethex+0x33e>
 800c8a8:	f045 0510 	orr.w	r5, r5, #16
 800c8ac:	e032      	b.n	800c914 <__gethex+0x38c>
 800c8ae:	f04f 0901 	mov.w	r9, #1
 800c8b2:	e7d1      	b.n	800c858 <__gethex+0x2d0>
 800c8b4:	2501      	movs	r5, #1
 800c8b6:	e7e2      	b.n	800c87e <__gethex+0x2f6>
 800c8b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ba:	f1c3 0301 	rsb	r3, r3, #1
 800c8be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0f0      	beq.n	800c8a8 <__gethex+0x320>
 800c8c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8ca:	f104 0314 	add.w	r3, r4, #20
 800c8ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8d6:	f04f 0c00 	mov.w	ip, #0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8e4:	d01b      	beq.n	800c91e <__gethex+0x396>
 800c8e6:	3201      	adds	r2, #1
 800c8e8:	6002      	str	r2, [r0, #0]
 800c8ea:	2d02      	cmp	r5, #2
 800c8ec:	f104 0314 	add.w	r3, r4, #20
 800c8f0:	d13c      	bne.n	800c96c <__gethex+0x3e4>
 800c8f2:	f8d8 2000 	ldr.w	r2, [r8]
 800c8f6:	3a01      	subs	r2, #1
 800c8f8:	42b2      	cmp	r2, r6
 800c8fa:	d109      	bne.n	800c910 <__gethex+0x388>
 800c8fc:	1171      	asrs	r1, r6, #5
 800c8fe:	2201      	movs	r2, #1
 800c900:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c904:	f006 061f 	and.w	r6, r6, #31
 800c908:	fa02 f606 	lsl.w	r6, r2, r6
 800c90c:	421e      	tst	r6, r3
 800c90e:	d13a      	bne.n	800c986 <__gethex+0x3fe>
 800c910:	f045 0520 	orr.w	r5, r5, #32
 800c914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c916:	601c      	str	r4, [r3, #0]
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	601f      	str	r7, [r3, #0]
 800c91c:	e6b0      	b.n	800c680 <__gethex+0xf8>
 800c91e:	4299      	cmp	r1, r3
 800c920:	f843 cc04 	str.w	ip, [r3, #-4]
 800c924:	d8d9      	bhi.n	800c8da <__gethex+0x352>
 800c926:	68a3      	ldr	r3, [r4, #8]
 800c928:	459b      	cmp	fp, r3
 800c92a:	db17      	blt.n	800c95c <__gethex+0x3d4>
 800c92c:	6861      	ldr	r1, [r4, #4]
 800c92e:	9801      	ldr	r0, [sp, #4]
 800c930:	3101      	adds	r1, #1
 800c932:	f000 f90d 	bl	800cb50 <_Balloc>
 800c936:	4681      	mov	r9, r0
 800c938:	b918      	cbnz	r0, 800c942 <__gethex+0x3ba>
 800c93a:	4b1a      	ldr	r3, [pc, #104]	@ (800c9a4 <__gethex+0x41c>)
 800c93c:	4602      	mov	r2, r0
 800c93e:	2184      	movs	r1, #132	@ 0x84
 800c940:	e6c5      	b.n	800c6ce <__gethex+0x146>
 800c942:	6922      	ldr	r2, [r4, #16]
 800c944:	3202      	adds	r2, #2
 800c946:	f104 010c 	add.w	r1, r4, #12
 800c94a:	0092      	lsls	r2, r2, #2
 800c94c:	300c      	adds	r0, #12
 800c94e:	f7ff fd4c 	bl	800c3ea <memcpy>
 800c952:	4621      	mov	r1, r4
 800c954:	9801      	ldr	r0, [sp, #4]
 800c956:	f000 f93b 	bl	800cbd0 <_Bfree>
 800c95a:	464c      	mov	r4, r9
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c964:	6122      	str	r2, [r4, #16]
 800c966:	2201      	movs	r2, #1
 800c968:	615a      	str	r2, [r3, #20]
 800c96a:	e7be      	b.n	800c8ea <__gethex+0x362>
 800c96c:	6922      	ldr	r2, [r4, #16]
 800c96e:	455a      	cmp	r2, fp
 800c970:	dd0b      	ble.n	800c98a <__gethex+0x402>
 800c972:	2101      	movs	r1, #1
 800c974:	4620      	mov	r0, r4
 800c976:	f7ff fd9f 	bl	800c4b8 <rshift>
 800c97a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c97e:	3701      	adds	r7, #1
 800c980:	42bb      	cmp	r3, r7
 800c982:	f6ff aee0 	blt.w	800c746 <__gethex+0x1be>
 800c986:	2501      	movs	r5, #1
 800c988:	e7c2      	b.n	800c910 <__gethex+0x388>
 800c98a:	f016 061f 	ands.w	r6, r6, #31
 800c98e:	d0fa      	beq.n	800c986 <__gethex+0x3fe>
 800c990:	4453      	add	r3, sl
 800c992:	f1c6 0620 	rsb	r6, r6, #32
 800c996:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c99a:	f000 f9cb 	bl	800cd34 <__hi0bits>
 800c99e:	42b0      	cmp	r0, r6
 800c9a0:	dbe7      	blt.n	800c972 <__gethex+0x3ea>
 800c9a2:	e7f0      	b.n	800c986 <__gethex+0x3fe>
 800c9a4:	0800fc5f 	.word	0x0800fc5f

0800c9a8 <L_shift>:
 800c9a8:	f1c2 0208 	rsb	r2, r2, #8
 800c9ac:	0092      	lsls	r2, r2, #2
 800c9ae:	b570      	push	{r4, r5, r6, lr}
 800c9b0:	f1c2 0620 	rsb	r6, r2, #32
 800c9b4:	6843      	ldr	r3, [r0, #4]
 800c9b6:	6804      	ldr	r4, [r0, #0]
 800c9b8:	fa03 f506 	lsl.w	r5, r3, r6
 800c9bc:	432c      	orrs	r4, r5
 800c9be:	40d3      	lsrs	r3, r2
 800c9c0:	6004      	str	r4, [r0, #0]
 800c9c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9c6:	4288      	cmp	r0, r1
 800c9c8:	d3f4      	bcc.n	800c9b4 <L_shift+0xc>
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}

0800c9cc <__match>:
 800c9cc:	b530      	push	{r4, r5, lr}
 800c9ce:	6803      	ldr	r3, [r0, #0]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9d6:	b914      	cbnz	r4, 800c9de <__match+0x12>
 800c9d8:	6003      	str	r3, [r0, #0]
 800c9da:	2001      	movs	r0, #1
 800c9dc:	bd30      	pop	{r4, r5, pc}
 800c9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c9e6:	2d19      	cmp	r5, #25
 800c9e8:	bf98      	it	ls
 800c9ea:	3220      	addls	r2, #32
 800c9ec:	42a2      	cmp	r2, r4
 800c9ee:	d0f0      	beq.n	800c9d2 <__match+0x6>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	e7f3      	b.n	800c9dc <__match+0x10>

0800c9f4 <__hexnan>:
 800c9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f8:	680b      	ldr	r3, [r1, #0]
 800c9fa:	6801      	ldr	r1, [r0, #0]
 800c9fc:	115e      	asrs	r6, r3, #5
 800c9fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca02:	f013 031f 	ands.w	r3, r3, #31
 800ca06:	b087      	sub	sp, #28
 800ca08:	bf18      	it	ne
 800ca0a:	3604      	addne	r6, #4
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	1f37      	subs	r7, r6, #4
 800ca10:	4682      	mov	sl, r0
 800ca12:	4690      	mov	r8, r2
 800ca14:	9301      	str	r3, [sp, #4]
 800ca16:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca1a:	46b9      	mov	r9, r7
 800ca1c:	463c      	mov	r4, r7
 800ca1e:	9502      	str	r5, [sp, #8]
 800ca20:	46ab      	mov	fp, r5
 800ca22:	784a      	ldrb	r2, [r1, #1]
 800ca24:	1c4b      	adds	r3, r1, #1
 800ca26:	9303      	str	r3, [sp, #12]
 800ca28:	b342      	cbz	r2, 800ca7c <__hexnan+0x88>
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	9105      	str	r1, [sp, #20]
 800ca2e:	9204      	str	r2, [sp, #16]
 800ca30:	f7ff fd94 	bl	800c55c <__hexdig_fun>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d151      	bne.n	800cadc <__hexnan+0xe8>
 800ca38:	9a04      	ldr	r2, [sp, #16]
 800ca3a:	9905      	ldr	r1, [sp, #20]
 800ca3c:	2a20      	cmp	r2, #32
 800ca3e:	d818      	bhi.n	800ca72 <__hexnan+0x7e>
 800ca40:	9b02      	ldr	r3, [sp, #8]
 800ca42:	459b      	cmp	fp, r3
 800ca44:	dd13      	ble.n	800ca6e <__hexnan+0x7a>
 800ca46:	454c      	cmp	r4, r9
 800ca48:	d206      	bcs.n	800ca58 <__hexnan+0x64>
 800ca4a:	2d07      	cmp	r5, #7
 800ca4c:	dc04      	bgt.n	800ca58 <__hexnan+0x64>
 800ca4e:	462a      	mov	r2, r5
 800ca50:	4649      	mov	r1, r9
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7ff ffa8 	bl	800c9a8 <L_shift>
 800ca58:	4544      	cmp	r4, r8
 800ca5a:	d952      	bls.n	800cb02 <__hexnan+0x10e>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f1a4 0904 	sub.w	r9, r4, #4
 800ca62:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca66:	f8cd b008 	str.w	fp, [sp, #8]
 800ca6a:	464c      	mov	r4, r9
 800ca6c:	461d      	mov	r5, r3
 800ca6e:	9903      	ldr	r1, [sp, #12]
 800ca70:	e7d7      	b.n	800ca22 <__hexnan+0x2e>
 800ca72:	2a29      	cmp	r2, #41	@ 0x29
 800ca74:	d157      	bne.n	800cb26 <__hexnan+0x132>
 800ca76:	3102      	adds	r1, #2
 800ca78:	f8ca 1000 	str.w	r1, [sl]
 800ca7c:	f1bb 0f00 	cmp.w	fp, #0
 800ca80:	d051      	beq.n	800cb26 <__hexnan+0x132>
 800ca82:	454c      	cmp	r4, r9
 800ca84:	d206      	bcs.n	800ca94 <__hexnan+0xa0>
 800ca86:	2d07      	cmp	r5, #7
 800ca88:	dc04      	bgt.n	800ca94 <__hexnan+0xa0>
 800ca8a:	462a      	mov	r2, r5
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f7ff ff8a 	bl	800c9a8 <L_shift>
 800ca94:	4544      	cmp	r4, r8
 800ca96:	d936      	bls.n	800cb06 <__hexnan+0x112>
 800ca98:	f1a8 0204 	sub.w	r2, r8, #4
 800ca9c:	4623      	mov	r3, r4
 800ca9e:	f853 1b04 	ldr.w	r1, [r3], #4
 800caa2:	f842 1f04 	str.w	r1, [r2, #4]!
 800caa6:	429f      	cmp	r7, r3
 800caa8:	d2f9      	bcs.n	800ca9e <__hexnan+0xaa>
 800caaa:	1b3b      	subs	r3, r7, r4
 800caac:	f023 0303 	bic.w	r3, r3, #3
 800cab0:	3304      	adds	r3, #4
 800cab2:	3401      	adds	r4, #1
 800cab4:	3e03      	subs	r6, #3
 800cab6:	42b4      	cmp	r4, r6
 800cab8:	bf88      	it	hi
 800caba:	2304      	movhi	r3, #4
 800cabc:	4443      	add	r3, r8
 800cabe:	2200      	movs	r2, #0
 800cac0:	f843 2b04 	str.w	r2, [r3], #4
 800cac4:	429f      	cmp	r7, r3
 800cac6:	d2fb      	bcs.n	800cac0 <__hexnan+0xcc>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	b91b      	cbnz	r3, 800cad4 <__hexnan+0xe0>
 800cacc:	4547      	cmp	r7, r8
 800cace:	d128      	bne.n	800cb22 <__hexnan+0x12e>
 800cad0:	2301      	movs	r3, #1
 800cad2:	603b      	str	r3, [r7, #0]
 800cad4:	2005      	movs	r0, #5
 800cad6:	b007      	add	sp, #28
 800cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cadc:	3501      	adds	r5, #1
 800cade:	2d08      	cmp	r5, #8
 800cae0:	f10b 0b01 	add.w	fp, fp, #1
 800cae4:	dd06      	ble.n	800caf4 <__hexnan+0x100>
 800cae6:	4544      	cmp	r4, r8
 800cae8:	d9c1      	bls.n	800ca6e <__hexnan+0x7a>
 800caea:	2300      	movs	r3, #0
 800caec:	f844 3c04 	str.w	r3, [r4, #-4]
 800caf0:	2501      	movs	r5, #1
 800caf2:	3c04      	subs	r4, #4
 800caf4:	6822      	ldr	r2, [r4, #0]
 800caf6:	f000 000f 	and.w	r0, r0, #15
 800cafa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cafe:	6020      	str	r0, [r4, #0]
 800cb00:	e7b5      	b.n	800ca6e <__hexnan+0x7a>
 800cb02:	2508      	movs	r5, #8
 800cb04:	e7b3      	b.n	800ca6e <__hexnan+0x7a>
 800cb06:	9b01      	ldr	r3, [sp, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d0dd      	beq.n	800cac8 <__hexnan+0xd4>
 800cb0c:	f1c3 0320 	rsb	r3, r3, #32
 800cb10:	f04f 32ff 	mov.w	r2, #4294967295
 800cb14:	40da      	lsrs	r2, r3
 800cb16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb20:	e7d2      	b.n	800cac8 <__hexnan+0xd4>
 800cb22:	3f04      	subs	r7, #4
 800cb24:	e7d0      	b.n	800cac8 <__hexnan+0xd4>
 800cb26:	2004      	movs	r0, #4
 800cb28:	e7d5      	b.n	800cad6 <__hexnan+0xe2>

0800cb2a <__ascii_mbtowc>:
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	b901      	cbnz	r1, 800cb30 <__ascii_mbtowc+0x6>
 800cb2e:	a901      	add	r1, sp, #4
 800cb30:	b142      	cbz	r2, 800cb44 <__ascii_mbtowc+0x1a>
 800cb32:	b14b      	cbz	r3, 800cb48 <__ascii_mbtowc+0x1e>
 800cb34:	7813      	ldrb	r3, [r2, #0]
 800cb36:	600b      	str	r3, [r1, #0]
 800cb38:	7812      	ldrb	r2, [r2, #0]
 800cb3a:	1e10      	subs	r0, r2, #0
 800cb3c:	bf18      	it	ne
 800cb3e:	2001      	movne	r0, #1
 800cb40:	b002      	add	sp, #8
 800cb42:	4770      	bx	lr
 800cb44:	4610      	mov	r0, r2
 800cb46:	e7fb      	b.n	800cb40 <__ascii_mbtowc+0x16>
 800cb48:	f06f 0001 	mvn.w	r0, #1
 800cb4c:	e7f8      	b.n	800cb40 <__ascii_mbtowc+0x16>
	...

0800cb50 <_Balloc>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	69c6      	ldr	r6, [r0, #28]
 800cb54:	4604      	mov	r4, r0
 800cb56:	460d      	mov	r5, r1
 800cb58:	b976      	cbnz	r6, 800cb78 <_Balloc+0x28>
 800cb5a:	2010      	movs	r0, #16
 800cb5c:	f7fd ffb8 	bl	800aad0 <malloc>
 800cb60:	4602      	mov	r2, r0
 800cb62:	61e0      	str	r0, [r4, #28]
 800cb64:	b920      	cbnz	r0, 800cb70 <_Balloc+0x20>
 800cb66:	4b18      	ldr	r3, [pc, #96]	@ (800cbc8 <_Balloc+0x78>)
 800cb68:	4818      	ldr	r0, [pc, #96]	@ (800cbcc <_Balloc+0x7c>)
 800cb6a:	216b      	movs	r1, #107	@ 0x6b
 800cb6c:	f001 fdb0 	bl	800e6d0 <__assert_func>
 800cb70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb74:	6006      	str	r6, [r0, #0]
 800cb76:	60c6      	str	r6, [r0, #12]
 800cb78:	69e6      	ldr	r6, [r4, #28]
 800cb7a:	68f3      	ldr	r3, [r6, #12]
 800cb7c:	b183      	cbz	r3, 800cba0 <_Balloc+0x50>
 800cb7e:	69e3      	ldr	r3, [r4, #28]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb86:	b9b8      	cbnz	r0, 800cbb8 <_Balloc+0x68>
 800cb88:	2101      	movs	r1, #1
 800cb8a:	fa01 f605 	lsl.w	r6, r1, r5
 800cb8e:	1d72      	adds	r2, r6, #5
 800cb90:	0092      	lsls	r2, r2, #2
 800cb92:	4620      	mov	r0, r4
 800cb94:	f001 fdba 	bl	800e70c <_calloc_r>
 800cb98:	b160      	cbz	r0, 800cbb4 <_Balloc+0x64>
 800cb9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb9e:	e00e      	b.n	800cbbe <_Balloc+0x6e>
 800cba0:	2221      	movs	r2, #33	@ 0x21
 800cba2:	2104      	movs	r1, #4
 800cba4:	4620      	mov	r0, r4
 800cba6:	f001 fdb1 	bl	800e70c <_calloc_r>
 800cbaa:	69e3      	ldr	r3, [r4, #28]
 800cbac:	60f0      	str	r0, [r6, #12]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1e4      	bne.n	800cb7e <_Balloc+0x2e>
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}
 800cbb8:	6802      	ldr	r2, [r0, #0]
 800cbba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbc4:	e7f7      	b.n	800cbb6 <_Balloc+0x66>
 800cbc6:	bf00      	nop
 800cbc8:	0800fcd0 	.word	0x0800fcd0
 800cbcc:	0800fce7 	.word	0x0800fce7

0800cbd0 <_Bfree>:
 800cbd0:	b570      	push	{r4, r5, r6, lr}
 800cbd2:	69c6      	ldr	r6, [r0, #28]
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	b976      	cbnz	r6, 800cbf8 <_Bfree+0x28>
 800cbda:	2010      	movs	r0, #16
 800cbdc:	f7fd ff78 	bl	800aad0 <malloc>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	61e8      	str	r0, [r5, #28]
 800cbe4:	b920      	cbnz	r0, 800cbf0 <_Bfree+0x20>
 800cbe6:	4b09      	ldr	r3, [pc, #36]	@ (800cc0c <_Bfree+0x3c>)
 800cbe8:	4809      	ldr	r0, [pc, #36]	@ (800cc10 <_Bfree+0x40>)
 800cbea:	218f      	movs	r1, #143	@ 0x8f
 800cbec:	f001 fd70 	bl	800e6d0 <__assert_func>
 800cbf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbf4:	6006      	str	r6, [r0, #0]
 800cbf6:	60c6      	str	r6, [r0, #12]
 800cbf8:	b13c      	cbz	r4, 800cc0a <_Bfree+0x3a>
 800cbfa:	69eb      	ldr	r3, [r5, #28]
 800cbfc:	6862      	ldr	r2, [r4, #4]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc04:	6021      	str	r1, [r4, #0]
 800cc06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc0a:	bd70      	pop	{r4, r5, r6, pc}
 800cc0c:	0800fcd0 	.word	0x0800fcd0
 800cc10:	0800fce7 	.word	0x0800fce7

0800cc14 <__multadd>:
 800cc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc18:	690d      	ldr	r5, [r1, #16]
 800cc1a:	4607      	mov	r7, r0
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	461e      	mov	r6, r3
 800cc20:	f101 0c14 	add.w	ip, r1, #20
 800cc24:	2000      	movs	r0, #0
 800cc26:	f8dc 3000 	ldr.w	r3, [ip]
 800cc2a:	b299      	uxth	r1, r3
 800cc2c:	fb02 6101 	mla	r1, r2, r1, r6
 800cc30:	0c1e      	lsrs	r6, r3, #16
 800cc32:	0c0b      	lsrs	r3, r1, #16
 800cc34:	fb02 3306 	mla	r3, r2, r6, r3
 800cc38:	b289      	uxth	r1, r1
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc40:	4285      	cmp	r5, r0
 800cc42:	f84c 1b04 	str.w	r1, [ip], #4
 800cc46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc4a:	dcec      	bgt.n	800cc26 <__multadd+0x12>
 800cc4c:	b30e      	cbz	r6, 800cc92 <__multadd+0x7e>
 800cc4e:	68a3      	ldr	r3, [r4, #8]
 800cc50:	42ab      	cmp	r3, r5
 800cc52:	dc19      	bgt.n	800cc88 <__multadd+0x74>
 800cc54:	6861      	ldr	r1, [r4, #4]
 800cc56:	4638      	mov	r0, r7
 800cc58:	3101      	adds	r1, #1
 800cc5a:	f7ff ff79 	bl	800cb50 <_Balloc>
 800cc5e:	4680      	mov	r8, r0
 800cc60:	b928      	cbnz	r0, 800cc6e <__multadd+0x5a>
 800cc62:	4602      	mov	r2, r0
 800cc64:	4b0c      	ldr	r3, [pc, #48]	@ (800cc98 <__multadd+0x84>)
 800cc66:	480d      	ldr	r0, [pc, #52]	@ (800cc9c <__multadd+0x88>)
 800cc68:	21ba      	movs	r1, #186	@ 0xba
 800cc6a:	f001 fd31 	bl	800e6d0 <__assert_func>
 800cc6e:	6922      	ldr	r2, [r4, #16]
 800cc70:	3202      	adds	r2, #2
 800cc72:	f104 010c 	add.w	r1, r4, #12
 800cc76:	0092      	lsls	r2, r2, #2
 800cc78:	300c      	adds	r0, #12
 800cc7a:	f7ff fbb6 	bl	800c3ea <memcpy>
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4638      	mov	r0, r7
 800cc82:	f7ff ffa5 	bl	800cbd0 <_Bfree>
 800cc86:	4644      	mov	r4, r8
 800cc88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc8c:	3501      	adds	r5, #1
 800cc8e:	615e      	str	r6, [r3, #20]
 800cc90:	6125      	str	r5, [r4, #16]
 800cc92:	4620      	mov	r0, r4
 800cc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc98:	0800fc5f 	.word	0x0800fc5f
 800cc9c:	0800fce7 	.word	0x0800fce7

0800cca0 <__s2b>:
 800cca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cca4:	460c      	mov	r4, r1
 800cca6:	4615      	mov	r5, r2
 800cca8:	461f      	mov	r7, r3
 800ccaa:	2209      	movs	r2, #9
 800ccac:	3308      	adds	r3, #8
 800ccae:	4606      	mov	r6, r0
 800ccb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	db09      	blt.n	800ccd0 <__s2b+0x30>
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	f7ff ff47 	bl	800cb50 <_Balloc>
 800ccc2:	b940      	cbnz	r0, 800ccd6 <__s2b+0x36>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	4b19      	ldr	r3, [pc, #100]	@ (800cd2c <__s2b+0x8c>)
 800ccc8:	4819      	ldr	r0, [pc, #100]	@ (800cd30 <__s2b+0x90>)
 800ccca:	21d3      	movs	r1, #211	@ 0xd3
 800cccc:	f001 fd00 	bl	800e6d0 <__assert_func>
 800ccd0:	0052      	lsls	r2, r2, #1
 800ccd2:	3101      	adds	r1, #1
 800ccd4:	e7f0      	b.n	800ccb8 <__s2b+0x18>
 800ccd6:	9b08      	ldr	r3, [sp, #32]
 800ccd8:	6143      	str	r3, [r0, #20]
 800ccda:	2d09      	cmp	r5, #9
 800ccdc:	f04f 0301 	mov.w	r3, #1
 800cce0:	6103      	str	r3, [r0, #16]
 800cce2:	dd16      	ble.n	800cd12 <__s2b+0x72>
 800cce4:	f104 0909 	add.w	r9, r4, #9
 800cce8:	46c8      	mov	r8, r9
 800ccea:	442c      	add	r4, r5
 800ccec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ccf0:	4601      	mov	r1, r0
 800ccf2:	3b30      	subs	r3, #48	@ 0x30
 800ccf4:	220a      	movs	r2, #10
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	f7ff ff8c 	bl	800cc14 <__multadd>
 800ccfc:	45a0      	cmp	r8, r4
 800ccfe:	d1f5      	bne.n	800ccec <__s2b+0x4c>
 800cd00:	f1a5 0408 	sub.w	r4, r5, #8
 800cd04:	444c      	add	r4, r9
 800cd06:	1b2d      	subs	r5, r5, r4
 800cd08:	1963      	adds	r3, r4, r5
 800cd0a:	42bb      	cmp	r3, r7
 800cd0c:	db04      	blt.n	800cd18 <__s2b+0x78>
 800cd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd12:	340a      	adds	r4, #10
 800cd14:	2509      	movs	r5, #9
 800cd16:	e7f6      	b.n	800cd06 <__s2b+0x66>
 800cd18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd1c:	4601      	mov	r1, r0
 800cd1e:	3b30      	subs	r3, #48	@ 0x30
 800cd20:	220a      	movs	r2, #10
 800cd22:	4630      	mov	r0, r6
 800cd24:	f7ff ff76 	bl	800cc14 <__multadd>
 800cd28:	e7ee      	b.n	800cd08 <__s2b+0x68>
 800cd2a:	bf00      	nop
 800cd2c:	0800fc5f 	.word	0x0800fc5f
 800cd30:	0800fce7 	.word	0x0800fce7

0800cd34 <__hi0bits>:
 800cd34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd38:	4603      	mov	r3, r0
 800cd3a:	bf36      	itet	cc
 800cd3c:	0403      	lslcc	r3, r0, #16
 800cd3e:	2000      	movcs	r0, #0
 800cd40:	2010      	movcc	r0, #16
 800cd42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd46:	bf3c      	itt	cc
 800cd48:	021b      	lslcc	r3, r3, #8
 800cd4a:	3008      	addcc	r0, #8
 800cd4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd50:	bf3c      	itt	cc
 800cd52:	011b      	lslcc	r3, r3, #4
 800cd54:	3004      	addcc	r0, #4
 800cd56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd5a:	bf3c      	itt	cc
 800cd5c:	009b      	lslcc	r3, r3, #2
 800cd5e:	3002      	addcc	r0, #2
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	db05      	blt.n	800cd70 <__hi0bits+0x3c>
 800cd64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd68:	f100 0001 	add.w	r0, r0, #1
 800cd6c:	bf08      	it	eq
 800cd6e:	2020      	moveq	r0, #32
 800cd70:	4770      	bx	lr

0800cd72 <__lo0bits>:
 800cd72:	6803      	ldr	r3, [r0, #0]
 800cd74:	4602      	mov	r2, r0
 800cd76:	f013 0007 	ands.w	r0, r3, #7
 800cd7a:	d00b      	beq.n	800cd94 <__lo0bits+0x22>
 800cd7c:	07d9      	lsls	r1, r3, #31
 800cd7e:	d421      	bmi.n	800cdc4 <__lo0bits+0x52>
 800cd80:	0798      	lsls	r0, r3, #30
 800cd82:	bf49      	itett	mi
 800cd84:	085b      	lsrmi	r3, r3, #1
 800cd86:	089b      	lsrpl	r3, r3, #2
 800cd88:	2001      	movmi	r0, #1
 800cd8a:	6013      	strmi	r3, [r2, #0]
 800cd8c:	bf5c      	itt	pl
 800cd8e:	6013      	strpl	r3, [r2, #0]
 800cd90:	2002      	movpl	r0, #2
 800cd92:	4770      	bx	lr
 800cd94:	b299      	uxth	r1, r3
 800cd96:	b909      	cbnz	r1, 800cd9c <__lo0bits+0x2a>
 800cd98:	0c1b      	lsrs	r3, r3, #16
 800cd9a:	2010      	movs	r0, #16
 800cd9c:	b2d9      	uxtb	r1, r3
 800cd9e:	b909      	cbnz	r1, 800cda4 <__lo0bits+0x32>
 800cda0:	3008      	adds	r0, #8
 800cda2:	0a1b      	lsrs	r3, r3, #8
 800cda4:	0719      	lsls	r1, r3, #28
 800cda6:	bf04      	itt	eq
 800cda8:	091b      	lsreq	r3, r3, #4
 800cdaa:	3004      	addeq	r0, #4
 800cdac:	0799      	lsls	r1, r3, #30
 800cdae:	bf04      	itt	eq
 800cdb0:	089b      	lsreq	r3, r3, #2
 800cdb2:	3002      	addeq	r0, #2
 800cdb4:	07d9      	lsls	r1, r3, #31
 800cdb6:	d403      	bmi.n	800cdc0 <__lo0bits+0x4e>
 800cdb8:	085b      	lsrs	r3, r3, #1
 800cdba:	f100 0001 	add.w	r0, r0, #1
 800cdbe:	d003      	beq.n	800cdc8 <__lo0bits+0x56>
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	4770      	bx	lr
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	4770      	bx	lr
 800cdc8:	2020      	movs	r0, #32
 800cdca:	4770      	bx	lr

0800cdcc <__i2b>:
 800cdcc:	b510      	push	{r4, lr}
 800cdce:	460c      	mov	r4, r1
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	f7ff febd 	bl	800cb50 <_Balloc>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	b928      	cbnz	r0, 800cde6 <__i2b+0x1a>
 800cdda:	4b05      	ldr	r3, [pc, #20]	@ (800cdf0 <__i2b+0x24>)
 800cddc:	4805      	ldr	r0, [pc, #20]	@ (800cdf4 <__i2b+0x28>)
 800cdde:	f240 1145 	movw	r1, #325	@ 0x145
 800cde2:	f001 fc75 	bl	800e6d0 <__assert_func>
 800cde6:	2301      	movs	r3, #1
 800cde8:	6144      	str	r4, [r0, #20]
 800cdea:	6103      	str	r3, [r0, #16]
 800cdec:	bd10      	pop	{r4, pc}
 800cdee:	bf00      	nop
 800cdf0:	0800fc5f 	.word	0x0800fc5f
 800cdf4:	0800fce7 	.word	0x0800fce7

0800cdf8 <__multiply>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	4617      	mov	r7, r2
 800cdfe:	690a      	ldr	r2, [r1, #16]
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	bfa8      	it	ge
 800ce06:	463b      	movge	r3, r7
 800ce08:	4689      	mov	r9, r1
 800ce0a:	bfa4      	itt	ge
 800ce0c:	460f      	movge	r7, r1
 800ce0e:	4699      	movge	r9, r3
 800ce10:	693d      	ldr	r5, [r7, #16]
 800ce12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	eb05 060a 	add.w	r6, r5, sl
 800ce1e:	42b3      	cmp	r3, r6
 800ce20:	b085      	sub	sp, #20
 800ce22:	bfb8      	it	lt
 800ce24:	3101      	addlt	r1, #1
 800ce26:	f7ff fe93 	bl	800cb50 <_Balloc>
 800ce2a:	b930      	cbnz	r0, 800ce3a <__multiply+0x42>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	4b41      	ldr	r3, [pc, #260]	@ (800cf34 <__multiply+0x13c>)
 800ce30:	4841      	ldr	r0, [pc, #260]	@ (800cf38 <__multiply+0x140>)
 800ce32:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce36:	f001 fc4b 	bl	800e6d0 <__assert_func>
 800ce3a:	f100 0414 	add.w	r4, r0, #20
 800ce3e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ce42:	4623      	mov	r3, r4
 800ce44:	2200      	movs	r2, #0
 800ce46:	4573      	cmp	r3, lr
 800ce48:	d320      	bcc.n	800ce8c <__multiply+0x94>
 800ce4a:	f107 0814 	add.w	r8, r7, #20
 800ce4e:	f109 0114 	add.w	r1, r9, #20
 800ce52:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ce56:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ce5a:	9302      	str	r3, [sp, #8]
 800ce5c:	1beb      	subs	r3, r5, r7
 800ce5e:	3b15      	subs	r3, #21
 800ce60:	f023 0303 	bic.w	r3, r3, #3
 800ce64:	3304      	adds	r3, #4
 800ce66:	3715      	adds	r7, #21
 800ce68:	42bd      	cmp	r5, r7
 800ce6a:	bf38      	it	cc
 800ce6c:	2304      	movcc	r3, #4
 800ce6e:	9301      	str	r3, [sp, #4]
 800ce70:	9b02      	ldr	r3, [sp, #8]
 800ce72:	9103      	str	r1, [sp, #12]
 800ce74:	428b      	cmp	r3, r1
 800ce76:	d80c      	bhi.n	800ce92 <__multiply+0x9a>
 800ce78:	2e00      	cmp	r6, #0
 800ce7a:	dd03      	ble.n	800ce84 <__multiply+0x8c>
 800ce7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d055      	beq.n	800cf30 <__multiply+0x138>
 800ce84:	6106      	str	r6, [r0, #16]
 800ce86:	b005      	add	sp, #20
 800ce88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8c:	f843 2b04 	str.w	r2, [r3], #4
 800ce90:	e7d9      	b.n	800ce46 <__multiply+0x4e>
 800ce92:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce96:	f1ba 0f00 	cmp.w	sl, #0
 800ce9a:	d01f      	beq.n	800cedc <__multiply+0xe4>
 800ce9c:	46c4      	mov	ip, r8
 800ce9e:	46a1      	mov	r9, r4
 800cea0:	2700      	movs	r7, #0
 800cea2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cea6:	f8d9 3000 	ldr.w	r3, [r9]
 800ceaa:	fa1f fb82 	uxth.w	fp, r2
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	fb0a 330b 	mla	r3, sl, fp, r3
 800ceb4:	443b      	add	r3, r7
 800ceb6:	f8d9 7000 	ldr.w	r7, [r9]
 800ceba:	0c12      	lsrs	r2, r2, #16
 800cebc:	0c3f      	lsrs	r7, r7, #16
 800cebe:	fb0a 7202 	mla	r2, sl, r2, r7
 800cec2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cecc:	4565      	cmp	r5, ip
 800cece:	f849 3b04 	str.w	r3, [r9], #4
 800ced2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ced6:	d8e4      	bhi.n	800cea2 <__multiply+0xaa>
 800ced8:	9b01      	ldr	r3, [sp, #4]
 800ceda:	50e7      	str	r7, [r4, r3]
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cee2:	3104      	adds	r1, #4
 800cee4:	f1b9 0f00 	cmp.w	r9, #0
 800cee8:	d020      	beq.n	800cf2c <__multiply+0x134>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	4647      	mov	r7, r8
 800ceee:	46a4      	mov	ip, r4
 800cef0:	f04f 0a00 	mov.w	sl, #0
 800cef4:	f8b7 b000 	ldrh.w	fp, [r7]
 800cef8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cefc:	fb09 220b 	mla	r2, r9, fp, r2
 800cf00:	4452      	add	r2, sl
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf08:	f84c 3b04 	str.w	r3, [ip], #4
 800cf0c:	f857 3b04 	ldr.w	r3, [r7], #4
 800cf10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf14:	f8bc 3000 	ldrh.w	r3, [ip]
 800cf18:	fb09 330a 	mla	r3, r9, sl, r3
 800cf1c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cf20:	42bd      	cmp	r5, r7
 800cf22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf26:	d8e5      	bhi.n	800cef4 <__multiply+0xfc>
 800cf28:	9a01      	ldr	r2, [sp, #4]
 800cf2a:	50a3      	str	r3, [r4, r2]
 800cf2c:	3404      	adds	r4, #4
 800cf2e:	e79f      	b.n	800ce70 <__multiply+0x78>
 800cf30:	3e01      	subs	r6, #1
 800cf32:	e7a1      	b.n	800ce78 <__multiply+0x80>
 800cf34:	0800fc5f 	.word	0x0800fc5f
 800cf38:	0800fce7 	.word	0x0800fce7

0800cf3c <__pow5mult>:
 800cf3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf40:	4615      	mov	r5, r2
 800cf42:	f012 0203 	ands.w	r2, r2, #3
 800cf46:	4607      	mov	r7, r0
 800cf48:	460e      	mov	r6, r1
 800cf4a:	d007      	beq.n	800cf5c <__pow5mult+0x20>
 800cf4c:	4c25      	ldr	r4, [pc, #148]	@ (800cfe4 <__pow5mult+0xa8>)
 800cf4e:	3a01      	subs	r2, #1
 800cf50:	2300      	movs	r3, #0
 800cf52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf56:	f7ff fe5d 	bl	800cc14 <__multadd>
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	10ad      	asrs	r5, r5, #2
 800cf5e:	d03d      	beq.n	800cfdc <__pow5mult+0xa0>
 800cf60:	69fc      	ldr	r4, [r7, #28]
 800cf62:	b97c      	cbnz	r4, 800cf84 <__pow5mult+0x48>
 800cf64:	2010      	movs	r0, #16
 800cf66:	f7fd fdb3 	bl	800aad0 <malloc>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	61f8      	str	r0, [r7, #28]
 800cf6e:	b928      	cbnz	r0, 800cf7c <__pow5mult+0x40>
 800cf70:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe8 <__pow5mult+0xac>)
 800cf72:	481e      	ldr	r0, [pc, #120]	@ (800cfec <__pow5mult+0xb0>)
 800cf74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf78:	f001 fbaa 	bl	800e6d0 <__assert_func>
 800cf7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf80:	6004      	str	r4, [r0, #0]
 800cf82:	60c4      	str	r4, [r0, #12]
 800cf84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf8c:	b94c      	cbnz	r4, 800cfa2 <__pow5mult+0x66>
 800cf8e:	f240 2171 	movw	r1, #625	@ 0x271
 800cf92:	4638      	mov	r0, r7
 800cf94:	f7ff ff1a 	bl	800cdcc <__i2b>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	6003      	str	r3, [r0, #0]
 800cfa2:	f04f 0900 	mov.w	r9, #0
 800cfa6:	07eb      	lsls	r3, r5, #31
 800cfa8:	d50a      	bpl.n	800cfc0 <__pow5mult+0x84>
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4622      	mov	r2, r4
 800cfae:	4638      	mov	r0, r7
 800cfb0:	f7ff ff22 	bl	800cdf8 <__multiply>
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	4680      	mov	r8, r0
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7ff fe09 	bl	800cbd0 <_Bfree>
 800cfbe:	4646      	mov	r6, r8
 800cfc0:	106d      	asrs	r5, r5, #1
 800cfc2:	d00b      	beq.n	800cfdc <__pow5mult+0xa0>
 800cfc4:	6820      	ldr	r0, [r4, #0]
 800cfc6:	b938      	cbnz	r0, 800cfd8 <__pow5mult+0x9c>
 800cfc8:	4622      	mov	r2, r4
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4638      	mov	r0, r7
 800cfce:	f7ff ff13 	bl	800cdf8 <__multiply>
 800cfd2:	6020      	str	r0, [r4, #0]
 800cfd4:	f8c0 9000 	str.w	r9, [r0]
 800cfd8:	4604      	mov	r4, r0
 800cfda:	e7e4      	b.n	800cfa6 <__pow5mult+0x6a>
 800cfdc:	4630      	mov	r0, r6
 800cfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe2:	bf00      	nop
 800cfe4:	0800ff24 	.word	0x0800ff24
 800cfe8:	0800fcd0 	.word	0x0800fcd0
 800cfec:	0800fce7 	.word	0x0800fce7

0800cff0 <__lshift>:
 800cff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff4:	460c      	mov	r4, r1
 800cff6:	6849      	ldr	r1, [r1, #4]
 800cff8:	6923      	ldr	r3, [r4, #16]
 800cffa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cffe:	68a3      	ldr	r3, [r4, #8]
 800d000:	4607      	mov	r7, r0
 800d002:	4691      	mov	r9, r2
 800d004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d008:	f108 0601 	add.w	r6, r8, #1
 800d00c:	42b3      	cmp	r3, r6
 800d00e:	db0b      	blt.n	800d028 <__lshift+0x38>
 800d010:	4638      	mov	r0, r7
 800d012:	f7ff fd9d 	bl	800cb50 <_Balloc>
 800d016:	4605      	mov	r5, r0
 800d018:	b948      	cbnz	r0, 800d02e <__lshift+0x3e>
 800d01a:	4602      	mov	r2, r0
 800d01c:	4b28      	ldr	r3, [pc, #160]	@ (800d0c0 <__lshift+0xd0>)
 800d01e:	4829      	ldr	r0, [pc, #164]	@ (800d0c4 <__lshift+0xd4>)
 800d020:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d024:	f001 fb54 	bl	800e6d0 <__assert_func>
 800d028:	3101      	adds	r1, #1
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	e7ee      	b.n	800d00c <__lshift+0x1c>
 800d02e:	2300      	movs	r3, #0
 800d030:	f100 0114 	add.w	r1, r0, #20
 800d034:	f100 0210 	add.w	r2, r0, #16
 800d038:	4618      	mov	r0, r3
 800d03a:	4553      	cmp	r3, sl
 800d03c:	db33      	blt.n	800d0a6 <__lshift+0xb6>
 800d03e:	6920      	ldr	r0, [r4, #16]
 800d040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d044:	f104 0314 	add.w	r3, r4, #20
 800d048:	f019 091f 	ands.w	r9, r9, #31
 800d04c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d054:	d02b      	beq.n	800d0ae <__lshift+0xbe>
 800d056:	f1c9 0e20 	rsb	lr, r9, #32
 800d05a:	468a      	mov	sl, r1
 800d05c:	2200      	movs	r2, #0
 800d05e:	6818      	ldr	r0, [r3, #0]
 800d060:	fa00 f009 	lsl.w	r0, r0, r9
 800d064:	4310      	orrs	r0, r2
 800d066:	f84a 0b04 	str.w	r0, [sl], #4
 800d06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06e:	459c      	cmp	ip, r3
 800d070:	fa22 f20e 	lsr.w	r2, r2, lr
 800d074:	d8f3      	bhi.n	800d05e <__lshift+0x6e>
 800d076:	ebac 0304 	sub.w	r3, ip, r4
 800d07a:	3b15      	subs	r3, #21
 800d07c:	f023 0303 	bic.w	r3, r3, #3
 800d080:	3304      	adds	r3, #4
 800d082:	f104 0015 	add.w	r0, r4, #21
 800d086:	4560      	cmp	r0, ip
 800d088:	bf88      	it	hi
 800d08a:	2304      	movhi	r3, #4
 800d08c:	50ca      	str	r2, [r1, r3]
 800d08e:	b10a      	cbz	r2, 800d094 <__lshift+0xa4>
 800d090:	f108 0602 	add.w	r6, r8, #2
 800d094:	3e01      	subs	r6, #1
 800d096:	4638      	mov	r0, r7
 800d098:	612e      	str	r6, [r5, #16]
 800d09a:	4621      	mov	r1, r4
 800d09c:	f7ff fd98 	bl	800cbd0 <_Bfree>
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	e7c5      	b.n	800d03a <__lshift+0x4a>
 800d0ae:	3904      	subs	r1, #4
 800d0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0b8:	459c      	cmp	ip, r3
 800d0ba:	d8f9      	bhi.n	800d0b0 <__lshift+0xc0>
 800d0bc:	e7ea      	b.n	800d094 <__lshift+0xa4>
 800d0be:	bf00      	nop
 800d0c0:	0800fc5f 	.word	0x0800fc5f
 800d0c4:	0800fce7 	.word	0x0800fce7

0800d0c8 <__mcmp>:
 800d0c8:	690a      	ldr	r2, [r1, #16]
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	6900      	ldr	r0, [r0, #16]
 800d0ce:	1a80      	subs	r0, r0, r2
 800d0d0:	b530      	push	{r4, r5, lr}
 800d0d2:	d10e      	bne.n	800d0f2 <__mcmp+0x2a>
 800d0d4:	3314      	adds	r3, #20
 800d0d6:	3114      	adds	r1, #20
 800d0d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d0dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d0e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0e8:	4295      	cmp	r5, r2
 800d0ea:	d003      	beq.n	800d0f4 <__mcmp+0x2c>
 800d0ec:	d205      	bcs.n	800d0fa <__mcmp+0x32>
 800d0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f2:	bd30      	pop	{r4, r5, pc}
 800d0f4:	42a3      	cmp	r3, r4
 800d0f6:	d3f3      	bcc.n	800d0e0 <__mcmp+0x18>
 800d0f8:	e7fb      	b.n	800d0f2 <__mcmp+0x2a>
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	e7f9      	b.n	800d0f2 <__mcmp+0x2a>
	...

0800d100 <__mdiff>:
 800d100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d104:	4689      	mov	r9, r1
 800d106:	4606      	mov	r6, r0
 800d108:	4611      	mov	r1, r2
 800d10a:	4648      	mov	r0, r9
 800d10c:	4614      	mov	r4, r2
 800d10e:	f7ff ffdb 	bl	800d0c8 <__mcmp>
 800d112:	1e05      	subs	r5, r0, #0
 800d114:	d112      	bne.n	800d13c <__mdiff+0x3c>
 800d116:	4629      	mov	r1, r5
 800d118:	4630      	mov	r0, r6
 800d11a:	f7ff fd19 	bl	800cb50 <_Balloc>
 800d11e:	4602      	mov	r2, r0
 800d120:	b928      	cbnz	r0, 800d12e <__mdiff+0x2e>
 800d122:	4b3f      	ldr	r3, [pc, #252]	@ (800d220 <__mdiff+0x120>)
 800d124:	f240 2137 	movw	r1, #567	@ 0x237
 800d128:	483e      	ldr	r0, [pc, #248]	@ (800d224 <__mdiff+0x124>)
 800d12a:	f001 fad1 	bl	800e6d0 <__assert_func>
 800d12e:	2301      	movs	r3, #1
 800d130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d134:	4610      	mov	r0, r2
 800d136:	b003      	add	sp, #12
 800d138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13c:	bfbc      	itt	lt
 800d13e:	464b      	movlt	r3, r9
 800d140:	46a1      	movlt	r9, r4
 800d142:	4630      	mov	r0, r6
 800d144:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d148:	bfba      	itte	lt
 800d14a:	461c      	movlt	r4, r3
 800d14c:	2501      	movlt	r5, #1
 800d14e:	2500      	movge	r5, #0
 800d150:	f7ff fcfe 	bl	800cb50 <_Balloc>
 800d154:	4602      	mov	r2, r0
 800d156:	b918      	cbnz	r0, 800d160 <__mdiff+0x60>
 800d158:	4b31      	ldr	r3, [pc, #196]	@ (800d220 <__mdiff+0x120>)
 800d15a:	f240 2145 	movw	r1, #581	@ 0x245
 800d15e:	e7e3      	b.n	800d128 <__mdiff+0x28>
 800d160:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d164:	6926      	ldr	r6, [r4, #16]
 800d166:	60c5      	str	r5, [r0, #12]
 800d168:	f109 0310 	add.w	r3, r9, #16
 800d16c:	f109 0514 	add.w	r5, r9, #20
 800d170:	f104 0e14 	add.w	lr, r4, #20
 800d174:	f100 0b14 	add.w	fp, r0, #20
 800d178:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d17c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d180:	9301      	str	r3, [sp, #4]
 800d182:	46d9      	mov	r9, fp
 800d184:	f04f 0c00 	mov.w	ip, #0
 800d188:	9b01      	ldr	r3, [sp, #4]
 800d18a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d18e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d192:	9301      	str	r3, [sp, #4]
 800d194:	fa1f f38a 	uxth.w	r3, sl
 800d198:	4619      	mov	r1, r3
 800d19a:	b283      	uxth	r3, r0
 800d19c:	1acb      	subs	r3, r1, r3
 800d19e:	0c00      	lsrs	r0, r0, #16
 800d1a0:	4463      	add	r3, ip
 800d1a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1b0:	4576      	cmp	r6, lr
 800d1b2:	f849 3b04 	str.w	r3, [r9], #4
 800d1b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1ba:	d8e5      	bhi.n	800d188 <__mdiff+0x88>
 800d1bc:	1b33      	subs	r3, r6, r4
 800d1be:	3b15      	subs	r3, #21
 800d1c0:	f023 0303 	bic.w	r3, r3, #3
 800d1c4:	3415      	adds	r4, #21
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	42a6      	cmp	r6, r4
 800d1ca:	bf38      	it	cc
 800d1cc:	2304      	movcc	r3, #4
 800d1ce:	441d      	add	r5, r3
 800d1d0:	445b      	add	r3, fp
 800d1d2:	461e      	mov	r6, r3
 800d1d4:	462c      	mov	r4, r5
 800d1d6:	4544      	cmp	r4, r8
 800d1d8:	d30e      	bcc.n	800d1f8 <__mdiff+0xf8>
 800d1da:	f108 0103 	add.w	r1, r8, #3
 800d1de:	1b49      	subs	r1, r1, r5
 800d1e0:	f021 0103 	bic.w	r1, r1, #3
 800d1e4:	3d03      	subs	r5, #3
 800d1e6:	45a8      	cmp	r8, r5
 800d1e8:	bf38      	it	cc
 800d1ea:	2100      	movcc	r1, #0
 800d1ec:	440b      	add	r3, r1
 800d1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1f2:	b191      	cbz	r1, 800d21a <__mdiff+0x11a>
 800d1f4:	6117      	str	r7, [r2, #16]
 800d1f6:	e79d      	b.n	800d134 <__mdiff+0x34>
 800d1f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d1fc:	46e6      	mov	lr, ip
 800d1fe:	0c08      	lsrs	r0, r1, #16
 800d200:	fa1c fc81 	uxtah	ip, ip, r1
 800d204:	4471      	add	r1, lr
 800d206:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d20a:	b289      	uxth	r1, r1
 800d20c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d210:	f846 1b04 	str.w	r1, [r6], #4
 800d214:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d218:	e7dd      	b.n	800d1d6 <__mdiff+0xd6>
 800d21a:	3f01      	subs	r7, #1
 800d21c:	e7e7      	b.n	800d1ee <__mdiff+0xee>
 800d21e:	bf00      	nop
 800d220:	0800fc5f 	.word	0x0800fc5f
 800d224:	0800fce7 	.word	0x0800fce7

0800d228 <__ulp>:
 800d228:	b082      	sub	sp, #8
 800d22a:	ed8d 0b00 	vstr	d0, [sp]
 800d22e:	9a01      	ldr	r2, [sp, #4]
 800d230:	4b0f      	ldr	r3, [pc, #60]	@ (800d270 <__ulp+0x48>)
 800d232:	4013      	ands	r3, r2
 800d234:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d238:	2b00      	cmp	r3, #0
 800d23a:	dc08      	bgt.n	800d24e <__ulp+0x26>
 800d23c:	425b      	negs	r3, r3
 800d23e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d242:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d246:	da04      	bge.n	800d252 <__ulp+0x2a>
 800d248:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d24c:	4113      	asrs	r3, r2
 800d24e:	2200      	movs	r2, #0
 800d250:	e008      	b.n	800d264 <__ulp+0x3c>
 800d252:	f1a2 0314 	sub.w	r3, r2, #20
 800d256:	2b1e      	cmp	r3, #30
 800d258:	bfda      	itte	le
 800d25a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d25e:	40da      	lsrle	r2, r3
 800d260:	2201      	movgt	r2, #1
 800d262:	2300      	movs	r3, #0
 800d264:	4619      	mov	r1, r3
 800d266:	4610      	mov	r0, r2
 800d268:	ec41 0b10 	vmov	d0, r0, r1
 800d26c:	b002      	add	sp, #8
 800d26e:	4770      	bx	lr
 800d270:	7ff00000 	.word	0x7ff00000

0800d274 <__b2d>:
 800d274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d278:	6906      	ldr	r6, [r0, #16]
 800d27a:	f100 0814 	add.w	r8, r0, #20
 800d27e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d282:	1f37      	subs	r7, r6, #4
 800d284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d288:	4610      	mov	r0, r2
 800d28a:	f7ff fd53 	bl	800cd34 <__hi0bits>
 800d28e:	f1c0 0320 	rsb	r3, r0, #32
 800d292:	280a      	cmp	r0, #10
 800d294:	600b      	str	r3, [r1, #0]
 800d296:	491b      	ldr	r1, [pc, #108]	@ (800d304 <__b2d+0x90>)
 800d298:	dc15      	bgt.n	800d2c6 <__b2d+0x52>
 800d29a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d29e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d2a2:	45b8      	cmp	r8, r7
 800d2a4:	ea43 0501 	orr.w	r5, r3, r1
 800d2a8:	bf34      	ite	cc
 800d2aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2ae:	2300      	movcs	r3, #0
 800d2b0:	3015      	adds	r0, #21
 800d2b2:	fa02 f000 	lsl.w	r0, r2, r0
 800d2b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800d2ba:	4303      	orrs	r3, r0
 800d2bc:	461c      	mov	r4, r3
 800d2be:	ec45 4b10 	vmov	d0, r4, r5
 800d2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c6:	45b8      	cmp	r8, r7
 800d2c8:	bf3a      	itte	cc
 800d2ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800d2d2:	2300      	movcs	r3, #0
 800d2d4:	380b      	subs	r0, #11
 800d2d6:	d012      	beq.n	800d2fe <__b2d+0x8a>
 800d2d8:	f1c0 0120 	rsb	r1, r0, #32
 800d2dc:	fa23 f401 	lsr.w	r4, r3, r1
 800d2e0:	4082      	lsls	r2, r0
 800d2e2:	4322      	orrs	r2, r4
 800d2e4:	4547      	cmp	r7, r8
 800d2e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d2ea:	bf8c      	ite	hi
 800d2ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d2f0:	2200      	movls	r2, #0
 800d2f2:	4083      	lsls	r3, r0
 800d2f4:	40ca      	lsrs	r2, r1
 800d2f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	e7de      	b.n	800d2bc <__b2d+0x48>
 800d2fe:	ea42 0501 	orr.w	r5, r2, r1
 800d302:	e7db      	b.n	800d2bc <__b2d+0x48>
 800d304:	3ff00000 	.word	0x3ff00000

0800d308 <__d2b>:
 800d308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d30c:	460f      	mov	r7, r1
 800d30e:	2101      	movs	r1, #1
 800d310:	ec59 8b10 	vmov	r8, r9, d0
 800d314:	4616      	mov	r6, r2
 800d316:	f7ff fc1b 	bl	800cb50 <_Balloc>
 800d31a:	4604      	mov	r4, r0
 800d31c:	b930      	cbnz	r0, 800d32c <__d2b+0x24>
 800d31e:	4602      	mov	r2, r0
 800d320:	4b23      	ldr	r3, [pc, #140]	@ (800d3b0 <__d2b+0xa8>)
 800d322:	4824      	ldr	r0, [pc, #144]	@ (800d3b4 <__d2b+0xac>)
 800d324:	f240 310f 	movw	r1, #783	@ 0x30f
 800d328:	f001 f9d2 	bl	800e6d0 <__assert_func>
 800d32c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d334:	b10d      	cbz	r5, 800d33a <__d2b+0x32>
 800d336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	f1b8 0300 	subs.w	r3, r8, #0
 800d340:	d023      	beq.n	800d38a <__d2b+0x82>
 800d342:	4668      	mov	r0, sp
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	f7ff fd14 	bl	800cd72 <__lo0bits>
 800d34a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d34e:	b1d0      	cbz	r0, 800d386 <__d2b+0x7e>
 800d350:	f1c0 0320 	rsb	r3, r0, #32
 800d354:	fa02 f303 	lsl.w	r3, r2, r3
 800d358:	430b      	orrs	r3, r1
 800d35a:	40c2      	lsrs	r2, r0
 800d35c:	6163      	str	r3, [r4, #20]
 800d35e:	9201      	str	r2, [sp, #4]
 800d360:	9b01      	ldr	r3, [sp, #4]
 800d362:	61a3      	str	r3, [r4, #24]
 800d364:	2b00      	cmp	r3, #0
 800d366:	bf0c      	ite	eq
 800d368:	2201      	moveq	r2, #1
 800d36a:	2202      	movne	r2, #2
 800d36c:	6122      	str	r2, [r4, #16]
 800d36e:	b1a5      	cbz	r5, 800d39a <__d2b+0x92>
 800d370:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d374:	4405      	add	r5, r0
 800d376:	603d      	str	r5, [r7, #0]
 800d378:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d37c:	6030      	str	r0, [r6, #0]
 800d37e:	4620      	mov	r0, r4
 800d380:	b003      	add	sp, #12
 800d382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d386:	6161      	str	r1, [r4, #20]
 800d388:	e7ea      	b.n	800d360 <__d2b+0x58>
 800d38a:	a801      	add	r0, sp, #4
 800d38c:	f7ff fcf1 	bl	800cd72 <__lo0bits>
 800d390:	9b01      	ldr	r3, [sp, #4]
 800d392:	6163      	str	r3, [r4, #20]
 800d394:	3020      	adds	r0, #32
 800d396:	2201      	movs	r2, #1
 800d398:	e7e8      	b.n	800d36c <__d2b+0x64>
 800d39a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d39e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d3a2:	6038      	str	r0, [r7, #0]
 800d3a4:	6918      	ldr	r0, [r3, #16]
 800d3a6:	f7ff fcc5 	bl	800cd34 <__hi0bits>
 800d3aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3ae:	e7e5      	b.n	800d37c <__d2b+0x74>
 800d3b0:	0800fc5f 	.word	0x0800fc5f
 800d3b4:	0800fce7 	.word	0x0800fce7

0800d3b8 <__ratio>:
 800d3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3bc:	b085      	sub	sp, #20
 800d3be:	e9cd 1000 	strd	r1, r0, [sp]
 800d3c2:	a902      	add	r1, sp, #8
 800d3c4:	f7ff ff56 	bl	800d274 <__b2d>
 800d3c8:	9800      	ldr	r0, [sp, #0]
 800d3ca:	a903      	add	r1, sp, #12
 800d3cc:	ec55 4b10 	vmov	r4, r5, d0
 800d3d0:	f7ff ff50 	bl	800d274 <__b2d>
 800d3d4:	9b01      	ldr	r3, [sp, #4]
 800d3d6:	6919      	ldr	r1, [r3, #16]
 800d3d8:	9b00      	ldr	r3, [sp, #0]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	1ac9      	subs	r1, r1, r3
 800d3de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d3e2:	1a9b      	subs	r3, r3, r2
 800d3e4:	ec5b ab10 	vmov	sl, fp, d0
 800d3e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	bfce      	itee	gt
 800d3f0:	462a      	movgt	r2, r5
 800d3f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3f6:	465a      	movle	r2, fp
 800d3f8:	462f      	mov	r7, r5
 800d3fa:	46d9      	mov	r9, fp
 800d3fc:	bfcc      	ite	gt
 800d3fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d402:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d406:	464b      	mov	r3, r9
 800d408:	4652      	mov	r2, sl
 800d40a:	4620      	mov	r0, r4
 800d40c:	4639      	mov	r1, r7
 800d40e:	f7f3 fa1d 	bl	800084c <__aeabi_ddiv>
 800d412:	ec41 0b10 	vmov	d0, r0, r1
 800d416:	b005      	add	sp, #20
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d41c <__copybits>:
 800d41c:	3901      	subs	r1, #1
 800d41e:	b570      	push	{r4, r5, r6, lr}
 800d420:	1149      	asrs	r1, r1, #5
 800d422:	6914      	ldr	r4, [r2, #16]
 800d424:	3101      	adds	r1, #1
 800d426:	f102 0314 	add.w	r3, r2, #20
 800d42a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d42e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d432:	1f05      	subs	r5, r0, #4
 800d434:	42a3      	cmp	r3, r4
 800d436:	d30c      	bcc.n	800d452 <__copybits+0x36>
 800d438:	1aa3      	subs	r3, r4, r2
 800d43a:	3b11      	subs	r3, #17
 800d43c:	f023 0303 	bic.w	r3, r3, #3
 800d440:	3211      	adds	r2, #17
 800d442:	42a2      	cmp	r2, r4
 800d444:	bf88      	it	hi
 800d446:	2300      	movhi	r3, #0
 800d448:	4418      	add	r0, r3
 800d44a:	2300      	movs	r3, #0
 800d44c:	4288      	cmp	r0, r1
 800d44e:	d305      	bcc.n	800d45c <__copybits+0x40>
 800d450:	bd70      	pop	{r4, r5, r6, pc}
 800d452:	f853 6b04 	ldr.w	r6, [r3], #4
 800d456:	f845 6f04 	str.w	r6, [r5, #4]!
 800d45a:	e7eb      	b.n	800d434 <__copybits+0x18>
 800d45c:	f840 3b04 	str.w	r3, [r0], #4
 800d460:	e7f4      	b.n	800d44c <__copybits+0x30>

0800d462 <__any_on>:
 800d462:	f100 0214 	add.w	r2, r0, #20
 800d466:	6900      	ldr	r0, [r0, #16]
 800d468:	114b      	asrs	r3, r1, #5
 800d46a:	4298      	cmp	r0, r3
 800d46c:	b510      	push	{r4, lr}
 800d46e:	db11      	blt.n	800d494 <__any_on+0x32>
 800d470:	dd0a      	ble.n	800d488 <__any_on+0x26>
 800d472:	f011 011f 	ands.w	r1, r1, #31
 800d476:	d007      	beq.n	800d488 <__any_on+0x26>
 800d478:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d47c:	fa24 f001 	lsr.w	r0, r4, r1
 800d480:	fa00 f101 	lsl.w	r1, r0, r1
 800d484:	428c      	cmp	r4, r1
 800d486:	d10b      	bne.n	800d4a0 <__any_on+0x3e>
 800d488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d803      	bhi.n	800d498 <__any_on+0x36>
 800d490:	2000      	movs	r0, #0
 800d492:	bd10      	pop	{r4, pc}
 800d494:	4603      	mov	r3, r0
 800d496:	e7f7      	b.n	800d488 <__any_on+0x26>
 800d498:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d49c:	2900      	cmp	r1, #0
 800d49e:	d0f5      	beq.n	800d48c <__any_on+0x2a>
 800d4a0:	2001      	movs	r0, #1
 800d4a2:	e7f6      	b.n	800d492 <__any_on+0x30>

0800d4a4 <_malloc_usable_size_r>:
 800d4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a8:	1f18      	subs	r0, r3, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	bfbc      	itt	lt
 800d4ae:	580b      	ldrlt	r3, [r1, r0]
 800d4b0:	18c0      	addlt	r0, r0, r3
 800d4b2:	4770      	bx	lr

0800d4b4 <__ascii_wctomb>:
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	4608      	mov	r0, r1
 800d4b8:	b141      	cbz	r1, 800d4cc <__ascii_wctomb+0x18>
 800d4ba:	2aff      	cmp	r2, #255	@ 0xff
 800d4bc:	d904      	bls.n	800d4c8 <__ascii_wctomb+0x14>
 800d4be:	228a      	movs	r2, #138	@ 0x8a
 800d4c0:	601a      	str	r2, [r3, #0]
 800d4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c6:	4770      	bx	lr
 800d4c8:	700a      	strb	r2, [r1, #0]
 800d4ca:	2001      	movs	r0, #1
 800d4cc:	4770      	bx	lr

0800d4ce <__ssputs_r>:
 800d4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d2:	688e      	ldr	r6, [r1, #8]
 800d4d4:	461f      	mov	r7, r3
 800d4d6:	42be      	cmp	r6, r7
 800d4d8:	680b      	ldr	r3, [r1, #0]
 800d4da:	4682      	mov	sl, r0
 800d4dc:	460c      	mov	r4, r1
 800d4de:	4690      	mov	r8, r2
 800d4e0:	d82d      	bhi.n	800d53e <__ssputs_r+0x70>
 800d4e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4e6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4ea:	d026      	beq.n	800d53a <__ssputs_r+0x6c>
 800d4ec:	6965      	ldr	r5, [r4, #20]
 800d4ee:	6909      	ldr	r1, [r1, #16]
 800d4f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4f4:	eba3 0901 	sub.w	r9, r3, r1
 800d4f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4fc:	1c7b      	adds	r3, r7, #1
 800d4fe:	444b      	add	r3, r9
 800d500:	106d      	asrs	r5, r5, #1
 800d502:	429d      	cmp	r5, r3
 800d504:	bf38      	it	cc
 800d506:	461d      	movcc	r5, r3
 800d508:	0553      	lsls	r3, r2, #21
 800d50a:	d527      	bpl.n	800d55c <__ssputs_r+0x8e>
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7fd fb09 	bl	800ab24 <_malloc_r>
 800d512:	4606      	mov	r6, r0
 800d514:	b360      	cbz	r0, 800d570 <__ssputs_r+0xa2>
 800d516:	6921      	ldr	r1, [r4, #16]
 800d518:	464a      	mov	r2, r9
 800d51a:	f7fe ff66 	bl	800c3ea <memcpy>
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d528:	81a3      	strh	r3, [r4, #12]
 800d52a:	6126      	str	r6, [r4, #16]
 800d52c:	6165      	str	r5, [r4, #20]
 800d52e:	444e      	add	r6, r9
 800d530:	eba5 0509 	sub.w	r5, r5, r9
 800d534:	6026      	str	r6, [r4, #0]
 800d536:	60a5      	str	r5, [r4, #8]
 800d538:	463e      	mov	r6, r7
 800d53a:	42be      	cmp	r6, r7
 800d53c:	d900      	bls.n	800d540 <__ssputs_r+0x72>
 800d53e:	463e      	mov	r6, r7
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	4632      	mov	r2, r6
 800d544:	4641      	mov	r1, r8
 800d546:	f001 f886 	bl	800e656 <memmove>
 800d54a:	68a3      	ldr	r3, [r4, #8]
 800d54c:	1b9b      	subs	r3, r3, r6
 800d54e:	60a3      	str	r3, [r4, #8]
 800d550:	6823      	ldr	r3, [r4, #0]
 800d552:	4433      	add	r3, r6
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	2000      	movs	r0, #0
 800d558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d55c:	462a      	mov	r2, r5
 800d55e:	f7fd fb6d 	bl	800ac3c <_realloc_r>
 800d562:	4606      	mov	r6, r0
 800d564:	2800      	cmp	r0, #0
 800d566:	d1e0      	bne.n	800d52a <__ssputs_r+0x5c>
 800d568:	6921      	ldr	r1, [r4, #16]
 800d56a:	4650      	mov	r0, sl
 800d56c:	f7fe ff5a 	bl	800c424 <_free_r>
 800d570:	230c      	movs	r3, #12
 800d572:	f8ca 3000 	str.w	r3, [sl]
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d57c:	81a3      	strh	r3, [r4, #12]
 800d57e:	f04f 30ff 	mov.w	r0, #4294967295
 800d582:	e7e9      	b.n	800d558 <__ssputs_r+0x8a>

0800d584 <_svfiprintf_r>:
 800d584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d588:	4698      	mov	r8, r3
 800d58a:	898b      	ldrh	r3, [r1, #12]
 800d58c:	061b      	lsls	r3, r3, #24
 800d58e:	b09d      	sub	sp, #116	@ 0x74
 800d590:	4607      	mov	r7, r0
 800d592:	460d      	mov	r5, r1
 800d594:	4614      	mov	r4, r2
 800d596:	d510      	bpl.n	800d5ba <_svfiprintf_r+0x36>
 800d598:	690b      	ldr	r3, [r1, #16]
 800d59a:	b973      	cbnz	r3, 800d5ba <_svfiprintf_r+0x36>
 800d59c:	2140      	movs	r1, #64	@ 0x40
 800d59e:	f7fd fac1 	bl	800ab24 <_malloc_r>
 800d5a2:	6028      	str	r0, [r5, #0]
 800d5a4:	6128      	str	r0, [r5, #16]
 800d5a6:	b930      	cbnz	r0, 800d5b6 <_svfiprintf_r+0x32>
 800d5a8:	230c      	movs	r3, #12
 800d5aa:	603b      	str	r3, [r7, #0]
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	b01d      	add	sp, #116	@ 0x74
 800d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b6:	2340      	movs	r3, #64	@ 0x40
 800d5b8:	616b      	str	r3, [r5, #20]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5be:	2320      	movs	r3, #32
 800d5c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5c8:	2330      	movs	r3, #48	@ 0x30
 800d5ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d768 <_svfiprintf_r+0x1e4>
 800d5ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5d2:	f04f 0901 	mov.w	r9, #1
 800d5d6:	4623      	mov	r3, r4
 800d5d8:	469a      	mov	sl, r3
 800d5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5de:	b10a      	cbz	r2, 800d5e4 <_svfiprintf_r+0x60>
 800d5e0:	2a25      	cmp	r2, #37	@ 0x25
 800d5e2:	d1f9      	bne.n	800d5d8 <_svfiprintf_r+0x54>
 800d5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d5e8:	d00b      	beq.n	800d602 <_svfiprintf_r+0x7e>
 800d5ea:	465b      	mov	r3, fp
 800d5ec:	4622      	mov	r2, r4
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f7ff ff6c 	bl	800d4ce <__ssputs_r>
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	f000 80a7 	beq.w	800d74a <_svfiprintf_r+0x1c6>
 800d5fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5fe:	445a      	add	r2, fp
 800d600:	9209      	str	r2, [sp, #36]	@ 0x24
 800d602:	f89a 3000 	ldrb.w	r3, [sl]
 800d606:	2b00      	cmp	r3, #0
 800d608:	f000 809f 	beq.w	800d74a <_svfiprintf_r+0x1c6>
 800d60c:	2300      	movs	r3, #0
 800d60e:	f04f 32ff 	mov.w	r2, #4294967295
 800d612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d616:	f10a 0a01 	add.w	sl, sl, #1
 800d61a:	9304      	str	r3, [sp, #16]
 800d61c:	9307      	str	r3, [sp, #28]
 800d61e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d622:	931a      	str	r3, [sp, #104]	@ 0x68
 800d624:	4654      	mov	r4, sl
 800d626:	2205      	movs	r2, #5
 800d628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d62c:	484e      	ldr	r0, [pc, #312]	@ (800d768 <_svfiprintf_r+0x1e4>)
 800d62e:	f7f2 fdd7 	bl	80001e0 <memchr>
 800d632:	9a04      	ldr	r2, [sp, #16]
 800d634:	b9d8      	cbnz	r0, 800d66e <_svfiprintf_r+0xea>
 800d636:	06d0      	lsls	r0, r2, #27
 800d638:	bf44      	itt	mi
 800d63a:	2320      	movmi	r3, #32
 800d63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d640:	0711      	lsls	r1, r2, #28
 800d642:	bf44      	itt	mi
 800d644:	232b      	movmi	r3, #43	@ 0x2b
 800d646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d64a:	f89a 3000 	ldrb.w	r3, [sl]
 800d64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d650:	d015      	beq.n	800d67e <_svfiprintf_r+0xfa>
 800d652:	9a07      	ldr	r2, [sp, #28]
 800d654:	4654      	mov	r4, sl
 800d656:	2000      	movs	r0, #0
 800d658:	f04f 0c0a 	mov.w	ip, #10
 800d65c:	4621      	mov	r1, r4
 800d65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d662:	3b30      	subs	r3, #48	@ 0x30
 800d664:	2b09      	cmp	r3, #9
 800d666:	d94b      	bls.n	800d700 <_svfiprintf_r+0x17c>
 800d668:	b1b0      	cbz	r0, 800d698 <_svfiprintf_r+0x114>
 800d66a:	9207      	str	r2, [sp, #28]
 800d66c:	e014      	b.n	800d698 <_svfiprintf_r+0x114>
 800d66e:	eba0 0308 	sub.w	r3, r0, r8
 800d672:	fa09 f303 	lsl.w	r3, r9, r3
 800d676:	4313      	orrs	r3, r2
 800d678:	9304      	str	r3, [sp, #16]
 800d67a:	46a2      	mov	sl, r4
 800d67c:	e7d2      	b.n	800d624 <_svfiprintf_r+0xa0>
 800d67e:	9b03      	ldr	r3, [sp, #12]
 800d680:	1d19      	adds	r1, r3, #4
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	9103      	str	r1, [sp, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	bfbb      	ittet	lt
 800d68a:	425b      	neglt	r3, r3
 800d68c:	f042 0202 	orrlt.w	r2, r2, #2
 800d690:	9307      	strge	r3, [sp, #28]
 800d692:	9307      	strlt	r3, [sp, #28]
 800d694:	bfb8      	it	lt
 800d696:	9204      	strlt	r2, [sp, #16]
 800d698:	7823      	ldrb	r3, [r4, #0]
 800d69a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d69c:	d10a      	bne.n	800d6b4 <_svfiprintf_r+0x130>
 800d69e:	7863      	ldrb	r3, [r4, #1]
 800d6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6a2:	d132      	bne.n	800d70a <_svfiprintf_r+0x186>
 800d6a4:	9b03      	ldr	r3, [sp, #12]
 800d6a6:	1d1a      	adds	r2, r3, #4
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	9203      	str	r2, [sp, #12]
 800d6ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6b0:	3402      	adds	r4, #2
 800d6b2:	9305      	str	r3, [sp, #20]
 800d6b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d778 <_svfiprintf_r+0x1f4>
 800d6b8:	7821      	ldrb	r1, [r4, #0]
 800d6ba:	2203      	movs	r2, #3
 800d6bc:	4650      	mov	r0, sl
 800d6be:	f7f2 fd8f 	bl	80001e0 <memchr>
 800d6c2:	b138      	cbz	r0, 800d6d4 <_svfiprintf_r+0x150>
 800d6c4:	9b04      	ldr	r3, [sp, #16]
 800d6c6:	eba0 000a 	sub.w	r0, r0, sl
 800d6ca:	2240      	movs	r2, #64	@ 0x40
 800d6cc:	4082      	lsls	r2, r0
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	3401      	adds	r4, #1
 800d6d2:	9304      	str	r3, [sp, #16]
 800d6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d8:	4824      	ldr	r0, [pc, #144]	@ (800d76c <_svfiprintf_r+0x1e8>)
 800d6da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6de:	2206      	movs	r2, #6
 800d6e0:	f7f2 fd7e 	bl	80001e0 <memchr>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d036      	beq.n	800d756 <_svfiprintf_r+0x1d2>
 800d6e8:	4b21      	ldr	r3, [pc, #132]	@ (800d770 <_svfiprintf_r+0x1ec>)
 800d6ea:	bb1b      	cbnz	r3, 800d734 <_svfiprintf_r+0x1b0>
 800d6ec:	9b03      	ldr	r3, [sp, #12]
 800d6ee:	3307      	adds	r3, #7
 800d6f0:	f023 0307 	bic.w	r3, r3, #7
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	9303      	str	r3, [sp, #12]
 800d6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6fa:	4433      	add	r3, r6
 800d6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6fe:	e76a      	b.n	800d5d6 <_svfiprintf_r+0x52>
 800d700:	fb0c 3202 	mla	r2, ip, r2, r3
 800d704:	460c      	mov	r4, r1
 800d706:	2001      	movs	r0, #1
 800d708:	e7a8      	b.n	800d65c <_svfiprintf_r+0xd8>
 800d70a:	2300      	movs	r3, #0
 800d70c:	3401      	adds	r4, #1
 800d70e:	9305      	str	r3, [sp, #20]
 800d710:	4619      	mov	r1, r3
 800d712:	f04f 0c0a 	mov.w	ip, #10
 800d716:	4620      	mov	r0, r4
 800d718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d71c:	3a30      	subs	r2, #48	@ 0x30
 800d71e:	2a09      	cmp	r2, #9
 800d720:	d903      	bls.n	800d72a <_svfiprintf_r+0x1a6>
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0c6      	beq.n	800d6b4 <_svfiprintf_r+0x130>
 800d726:	9105      	str	r1, [sp, #20]
 800d728:	e7c4      	b.n	800d6b4 <_svfiprintf_r+0x130>
 800d72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d72e:	4604      	mov	r4, r0
 800d730:	2301      	movs	r3, #1
 800d732:	e7f0      	b.n	800d716 <_svfiprintf_r+0x192>
 800d734:	ab03      	add	r3, sp, #12
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	462a      	mov	r2, r5
 800d73a:	4b0e      	ldr	r3, [pc, #56]	@ (800d774 <_svfiprintf_r+0x1f0>)
 800d73c:	a904      	add	r1, sp, #16
 800d73e:	4638      	mov	r0, r7
 800d740:	f3af 8000 	nop.w
 800d744:	1c42      	adds	r2, r0, #1
 800d746:	4606      	mov	r6, r0
 800d748:	d1d6      	bne.n	800d6f8 <_svfiprintf_r+0x174>
 800d74a:	89ab      	ldrh	r3, [r5, #12]
 800d74c:	065b      	lsls	r3, r3, #25
 800d74e:	f53f af2d 	bmi.w	800d5ac <_svfiprintf_r+0x28>
 800d752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d754:	e72c      	b.n	800d5b0 <_svfiprintf_r+0x2c>
 800d756:	ab03      	add	r3, sp, #12
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	462a      	mov	r2, r5
 800d75c:	4b05      	ldr	r3, [pc, #20]	@ (800d774 <_svfiprintf_r+0x1f0>)
 800d75e:	a904      	add	r1, sp, #16
 800d760:	4638      	mov	r0, r7
 800d762:	f000 fb8b 	bl	800de7c <_printf_i>
 800d766:	e7ed      	b.n	800d744 <_svfiprintf_r+0x1c0>
 800d768:	0800fd40 	.word	0x0800fd40
 800d76c:	0800fd4a 	.word	0x0800fd4a
 800d770:	00000000 	.word	0x00000000
 800d774:	0800d4cf 	.word	0x0800d4cf
 800d778:	0800fd46 	.word	0x0800fd46

0800d77c <_sungetc_r>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	1c4b      	adds	r3, r1, #1
 800d780:	4614      	mov	r4, r2
 800d782:	d103      	bne.n	800d78c <_sungetc_r+0x10>
 800d784:	f04f 35ff 	mov.w	r5, #4294967295
 800d788:	4628      	mov	r0, r5
 800d78a:	bd38      	pop	{r3, r4, r5, pc}
 800d78c:	8993      	ldrh	r3, [r2, #12]
 800d78e:	f023 0320 	bic.w	r3, r3, #32
 800d792:	8193      	strh	r3, [r2, #12]
 800d794:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d796:	6852      	ldr	r2, [r2, #4]
 800d798:	b2cd      	uxtb	r5, r1
 800d79a:	b18b      	cbz	r3, 800d7c0 <_sungetc_r+0x44>
 800d79c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	dd08      	ble.n	800d7b4 <_sungetc_r+0x38>
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	1e5a      	subs	r2, r3, #1
 800d7a6:	6022      	str	r2, [r4, #0]
 800d7a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d7ac:	6863      	ldr	r3, [r4, #4]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	6063      	str	r3, [r4, #4]
 800d7b2:	e7e9      	b.n	800d788 <_sungetc_r+0xc>
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	f000 ff14 	bl	800e5e2 <__submore>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d0f1      	beq.n	800d7a2 <_sungetc_r+0x26>
 800d7be:	e7e1      	b.n	800d784 <_sungetc_r+0x8>
 800d7c0:	6921      	ldr	r1, [r4, #16]
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	b151      	cbz	r1, 800d7dc <_sungetc_r+0x60>
 800d7c6:	4299      	cmp	r1, r3
 800d7c8:	d208      	bcs.n	800d7dc <_sungetc_r+0x60>
 800d7ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d7ce:	42a9      	cmp	r1, r5
 800d7d0:	d104      	bne.n	800d7dc <_sungetc_r+0x60>
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	3201      	adds	r2, #1
 800d7d6:	6023      	str	r3, [r4, #0]
 800d7d8:	6062      	str	r2, [r4, #4]
 800d7da:	e7d5      	b.n	800d788 <_sungetc_r+0xc>
 800d7dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d7e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d7ea:	4623      	mov	r3, r4
 800d7ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e7dc      	b.n	800d7b0 <_sungetc_r+0x34>

0800d7f6 <__ssrefill_r>:
 800d7f6:	b510      	push	{r4, lr}
 800d7f8:	460c      	mov	r4, r1
 800d7fa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d7fc:	b169      	cbz	r1, 800d81a <__ssrefill_r+0x24>
 800d7fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d802:	4299      	cmp	r1, r3
 800d804:	d001      	beq.n	800d80a <__ssrefill_r+0x14>
 800d806:	f7fe fe0d 	bl	800c424 <_free_r>
 800d80a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d80c:	6063      	str	r3, [r4, #4]
 800d80e:	2000      	movs	r0, #0
 800d810:	6360      	str	r0, [r4, #52]	@ 0x34
 800d812:	b113      	cbz	r3, 800d81a <__ssrefill_r+0x24>
 800d814:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	bd10      	pop	{r4, pc}
 800d81a:	6923      	ldr	r3, [r4, #16]
 800d81c:	6023      	str	r3, [r4, #0]
 800d81e:	2300      	movs	r3, #0
 800d820:	6063      	str	r3, [r4, #4]
 800d822:	89a3      	ldrh	r3, [r4, #12]
 800d824:	f043 0320 	orr.w	r3, r3, #32
 800d828:	81a3      	strh	r3, [r4, #12]
 800d82a:	f04f 30ff 	mov.w	r0, #4294967295
 800d82e:	e7f3      	b.n	800d818 <__ssrefill_r+0x22>

0800d830 <__ssvfiscanf_r>:
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	460c      	mov	r4, r1
 800d836:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d83a:	2100      	movs	r1, #0
 800d83c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d840:	49a6      	ldr	r1, [pc, #664]	@ (800dadc <__ssvfiscanf_r+0x2ac>)
 800d842:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d844:	f10d 0804 	add.w	r8, sp, #4
 800d848:	49a5      	ldr	r1, [pc, #660]	@ (800dae0 <__ssvfiscanf_r+0x2b0>)
 800d84a:	4fa6      	ldr	r7, [pc, #664]	@ (800dae4 <__ssvfiscanf_r+0x2b4>)
 800d84c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d850:	4606      	mov	r6, r0
 800d852:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	f892 9000 	ldrb.w	r9, [r2]
 800d85a:	f1b9 0f00 	cmp.w	r9, #0
 800d85e:	f000 8158 	beq.w	800db12 <__ssvfiscanf_r+0x2e2>
 800d862:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d866:	f013 0308 	ands.w	r3, r3, #8
 800d86a:	f102 0501 	add.w	r5, r2, #1
 800d86e:	d019      	beq.n	800d8a4 <__ssvfiscanf_r+0x74>
 800d870:	6863      	ldr	r3, [r4, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	dd0f      	ble.n	800d896 <__ssvfiscanf_r+0x66>
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	781a      	ldrb	r2, [r3, #0]
 800d87a:	5cba      	ldrb	r2, [r7, r2]
 800d87c:	0712      	lsls	r2, r2, #28
 800d87e:	d401      	bmi.n	800d884 <__ssvfiscanf_r+0x54>
 800d880:	462a      	mov	r2, r5
 800d882:	e7e8      	b.n	800d856 <__ssvfiscanf_r+0x26>
 800d884:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d886:	3201      	adds	r2, #1
 800d888:	9245      	str	r2, [sp, #276]	@ 0x114
 800d88a:	6862      	ldr	r2, [r4, #4]
 800d88c:	3301      	adds	r3, #1
 800d88e:	3a01      	subs	r2, #1
 800d890:	6062      	str	r2, [r4, #4]
 800d892:	6023      	str	r3, [r4, #0]
 800d894:	e7ec      	b.n	800d870 <__ssvfiscanf_r+0x40>
 800d896:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d898:	4621      	mov	r1, r4
 800d89a:	4630      	mov	r0, r6
 800d89c:	4798      	blx	r3
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d0e9      	beq.n	800d876 <__ssvfiscanf_r+0x46>
 800d8a2:	e7ed      	b.n	800d880 <__ssvfiscanf_r+0x50>
 800d8a4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d8a8:	f040 8085 	bne.w	800d9b6 <__ssvfiscanf_r+0x186>
 800d8ac:	9341      	str	r3, [sp, #260]	@ 0x104
 800d8ae:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d8b0:	7853      	ldrb	r3, [r2, #1]
 800d8b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8b4:	bf02      	ittt	eq
 800d8b6:	2310      	moveq	r3, #16
 800d8b8:	1c95      	addeq	r5, r2, #2
 800d8ba:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d8bc:	220a      	movs	r2, #10
 800d8be:	46aa      	mov	sl, r5
 800d8c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d8c4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d8c8:	2b09      	cmp	r3, #9
 800d8ca:	d91e      	bls.n	800d90a <__ssvfiscanf_r+0xda>
 800d8cc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800dae8 <__ssvfiscanf_r+0x2b8>
 800d8d0:	2203      	movs	r2, #3
 800d8d2:	4658      	mov	r0, fp
 800d8d4:	f7f2 fc84 	bl	80001e0 <memchr>
 800d8d8:	b138      	cbz	r0, 800d8ea <__ssvfiscanf_r+0xba>
 800d8da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d8dc:	eba0 000b 	sub.w	r0, r0, fp
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	4083      	lsls	r3, r0
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	9341      	str	r3, [sp, #260]	@ 0x104
 800d8e8:	4655      	mov	r5, sl
 800d8ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d8ee:	2b78      	cmp	r3, #120	@ 0x78
 800d8f0:	d806      	bhi.n	800d900 <__ssvfiscanf_r+0xd0>
 800d8f2:	2b57      	cmp	r3, #87	@ 0x57
 800d8f4:	d810      	bhi.n	800d918 <__ssvfiscanf_r+0xe8>
 800d8f6:	2b25      	cmp	r3, #37	@ 0x25
 800d8f8:	d05d      	beq.n	800d9b6 <__ssvfiscanf_r+0x186>
 800d8fa:	d857      	bhi.n	800d9ac <__ssvfiscanf_r+0x17c>
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d075      	beq.n	800d9ec <__ssvfiscanf_r+0x1bc>
 800d900:	2303      	movs	r3, #3
 800d902:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d904:	230a      	movs	r3, #10
 800d906:	9342      	str	r3, [sp, #264]	@ 0x108
 800d908:	e088      	b.n	800da1c <__ssvfiscanf_r+0x1ec>
 800d90a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d90c:	fb02 1103 	mla	r1, r2, r3, r1
 800d910:	3930      	subs	r1, #48	@ 0x30
 800d912:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d914:	4655      	mov	r5, sl
 800d916:	e7d2      	b.n	800d8be <__ssvfiscanf_r+0x8e>
 800d918:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d91c:	2a20      	cmp	r2, #32
 800d91e:	d8ef      	bhi.n	800d900 <__ssvfiscanf_r+0xd0>
 800d920:	a101      	add	r1, pc, #4	@ (adr r1, 800d928 <__ssvfiscanf_r+0xf8>)
 800d922:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d926:	bf00      	nop
 800d928:	0800d9fb 	.word	0x0800d9fb
 800d92c:	0800d901 	.word	0x0800d901
 800d930:	0800d901 	.word	0x0800d901
 800d934:	0800da55 	.word	0x0800da55
 800d938:	0800d901 	.word	0x0800d901
 800d93c:	0800d901 	.word	0x0800d901
 800d940:	0800d901 	.word	0x0800d901
 800d944:	0800d901 	.word	0x0800d901
 800d948:	0800d901 	.word	0x0800d901
 800d94c:	0800d901 	.word	0x0800d901
 800d950:	0800d901 	.word	0x0800d901
 800d954:	0800da6b 	.word	0x0800da6b
 800d958:	0800da51 	.word	0x0800da51
 800d95c:	0800d9b3 	.word	0x0800d9b3
 800d960:	0800d9b3 	.word	0x0800d9b3
 800d964:	0800d9b3 	.word	0x0800d9b3
 800d968:	0800d901 	.word	0x0800d901
 800d96c:	0800da0d 	.word	0x0800da0d
 800d970:	0800d901 	.word	0x0800d901
 800d974:	0800d901 	.word	0x0800d901
 800d978:	0800d901 	.word	0x0800d901
 800d97c:	0800d901 	.word	0x0800d901
 800d980:	0800da7b 	.word	0x0800da7b
 800d984:	0800da15 	.word	0x0800da15
 800d988:	0800d9f3 	.word	0x0800d9f3
 800d98c:	0800d901 	.word	0x0800d901
 800d990:	0800d901 	.word	0x0800d901
 800d994:	0800da77 	.word	0x0800da77
 800d998:	0800d901 	.word	0x0800d901
 800d99c:	0800da51 	.word	0x0800da51
 800d9a0:	0800d901 	.word	0x0800d901
 800d9a4:	0800d901 	.word	0x0800d901
 800d9a8:	0800d9fb 	.word	0x0800d9fb
 800d9ac:	3b45      	subs	r3, #69	@ 0x45
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	d8a6      	bhi.n	800d900 <__ssvfiscanf_r+0xd0>
 800d9b2:	2305      	movs	r3, #5
 800d9b4:	e031      	b.n	800da1a <__ssvfiscanf_r+0x1ea>
 800d9b6:	6863      	ldr	r3, [r4, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	dd0d      	ble.n	800d9d8 <__ssvfiscanf_r+0x1a8>
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	781a      	ldrb	r2, [r3, #0]
 800d9c0:	454a      	cmp	r2, r9
 800d9c2:	f040 80a6 	bne.w	800db12 <__ssvfiscanf_r+0x2e2>
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	6862      	ldr	r2, [r4, #4]
 800d9ca:	6023      	str	r3, [r4, #0]
 800d9cc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d9ce:	3a01      	subs	r2, #1
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	6062      	str	r2, [r4, #4]
 800d9d4:	9345      	str	r3, [sp, #276]	@ 0x114
 800d9d6:	e753      	b.n	800d880 <__ssvfiscanf_r+0x50>
 800d9d8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d9da:	4621      	mov	r1, r4
 800d9dc:	4630      	mov	r0, r6
 800d9de:	4798      	blx	r3
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d0eb      	beq.n	800d9bc <__ssvfiscanf_r+0x18c>
 800d9e4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	f040 808b 	bne.w	800db02 <__ssvfiscanf_r+0x2d2>
 800d9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f0:	e08b      	b.n	800db0a <__ssvfiscanf_r+0x2da>
 800d9f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d9f4:	f042 0220 	orr.w	r2, r2, #32
 800d9f8:	9241      	str	r2, [sp, #260]	@ 0x104
 800d9fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d9fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da00:	9241      	str	r2, [sp, #260]	@ 0x104
 800da02:	2210      	movs	r2, #16
 800da04:	2b6e      	cmp	r3, #110	@ 0x6e
 800da06:	9242      	str	r2, [sp, #264]	@ 0x108
 800da08:	d902      	bls.n	800da10 <__ssvfiscanf_r+0x1e0>
 800da0a:	e005      	b.n	800da18 <__ssvfiscanf_r+0x1e8>
 800da0c:	2300      	movs	r3, #0
 800da0e:	9342      	str	r3, [sp, #264]	@ 0x108
 800da10:	2303      	movs	r3, #3
 800da12:	e002      	b.n	800da1a <__ssvfiscanf_r+0x1ea>
 800da14:	2308      	movs	r3, #8
 800da16:	9342      	str	r3, [sp, #264]	@ 0x108
 800da18:	2304      	movs	r3, #4
 800da1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800da1c:	6863      	ldr	r3, [r4, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	dd39      	ble.n	800da96 <__ssvfiscanf_r+0x266>
 800da22:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da24:	0659      	lsls	r1, r3, #25
 800da26:	d404      	bmi.n	800da32 <__ssvfiscanf_r+0x202>
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	781a      	ldrb	r2, [r3, #0]
 800da2c:	5cba      	ldrb	r2, [r7, r2]
 800da2e:	0712      	lsls	r2, r2, #28
 800da30:	d438      	bmi.n	800daa4 <__ssvfiscanf_r+0x274>
 800da32:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800da34:	2b02      	cmp	r3, #2
 800da36:	dc47      	bgt.n	800dac8 <__ssvfiscanf_r+0x298>
 800da38:	466b      	mov	r3, sp
 800da3a:	4622      	mov	r2, r4
 800da3c:	a941      	add	r1, sp, #260	@ 0x104
 800da3e:	4630      	mov	r0, r6
 800da40:	f000 fb3a 	bl	800e0b8 <_scanf_chars>
 800da44:	2801      	cmp	r0, #1
 800da46:	d064      	beq.n	800db12 <__ssvfiscanf_r+0x2e2>
 800da48:	2802      	cmp	r0, #2
 800da4a:	f47f af19 	bne.w	800d880 <__ssvfiscanf_r+0x50>
 800da4e:	e7c9      	b.n	800d9e4 <__ssvfiscanf_r+0x1b4>
 800da50:	220a      	movs	r2, #10
 800da52:	e7d7      	b.n	800da04 <__ssvfiscanf_r+0x1d4>
 800da54:	4629      	mov	r1, r5
 800da56:	4640      	mov	r0, r8
 800da58:	f000 fd8a 	bl	800e570 <__sccl>
 800da5c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da62:	9341      	str	r3, [sp, #260]	@ 0x104
 800da64:	4605      	mov	r5, r0
 800da66:	2301      	movs	r3, #1
 800da68:	e7d7      	b.n	800da1a <__ssvfiscanf_r+0x1ea>
 800da6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da70:	9341      	str	r3, [sp, #260]	@ 0x104
 800da72:	2300      	movs	r3, #0
 800da74:	e7d1      	b.n	800da1a <__ssvfiscanf_r+0x1ea>
 800da76:	2302      	movs	r3, #2
 800da78:	e7cf      	b.n	800da1a <__ssvfiscanf_r+0x1ea>
 800da7a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800da7c:	06c3      	lsls	r3, r0, #27
 800da7e:	f53f aeff 	bmi.w	800d880 <__ssvfiscanf_r+0x50>
 800da82:	9b00      	ldr	r3, [sp, #0]
 800da84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800da86:	1d19      	adds	r1, r3, #4
 800da88:	9100      	str	r1, [sp, #0]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	07c0      	lsls	r0, r0, #31
 800da8e:	bf4c      	ite	mi
 800da90:	801a      	strhmi	r2, [r3, #0]
 800da92:	601a      	strpl	r2, [r3, #0]
 800da94:	e6f4      	b.n	800d880 <__ssvfiscanf_r+0x50>
 800da96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800da98:	4621      	mov	r1, r4
 800da9a:	4630      	mov	r0, r6
 800da9c:	4798      	blx	r3
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d0bf      	beq.n	800da22 <__ssvfiscanf_r+0x1f2>
 800daa2:	e79f      	b.n	800d9e4 <__ssvfiscanf_r+0x1b4>
 800daa4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800daa6:	3201      	adds	r2, #1
 800daa8:	9245      	str	r2, [sp, #276]	@ 0x114
 800daaa:	6862      	ldr	r2, [r4, #4]
 800daac:	3a01      	subs	r2, #1
 800daae:	2a00      	cmp	r2, #0
 800dab0:	6062      	str	r2, [r4, #4]
 800dab2:	dd02      	ble.n	800daba <__ssvfiscanf_r+0x28a>
 800dab4:	3301      	adds	r3, #1
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	e7b6      	b.n	800da28 <__ssvfiscanf_r+0x1f8>
 800daba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dabc:	4621      	mov	r1, r4
 800dabe:	4630      	mov	r0, r6
 800dac0:	4798      	blx	r3
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d0b0      	beq.n	800da28 <__ssvfiscanf_r+0x1f8>
 800dac6:	e78d      	b.n	800d9e4 <__ssvfiscanf_r+0x1b4>
 800dac8:	2b04      	cmp	r3, #4
 800daca:	dc0f      	bgt.n	800daec <__ssvfiscanf_r+0x2bc>
 800dacc:	466b      	mov	r3, sp
 800dace:	4622      	mov	r2, r4
 800dad0:	a941      	add	r1, sp, #260	@ 0x104
 800dad2:	4630      	mov	r0, r6
 800dad4:	f000 fb4a 	bl	800e16c <_scanf_i>
 800dad8:	e7b4      	b.n	800da44 <__ssvfiscanf_r+0x214>
 800dada:	bf00      	nop
 800dadc:	0800d77d 	.word	0x0800d77d
 800dae0:	0800d7f7 	.word	0x0800d7f7
 800dae4:	0800fe21 	.word	0x0800fe21
 800dae8:	0800fd46 	.word	0x0800fd46
 800daec:	4b0a      	ldr	r3, [pc, #40]	@ (800db18 <__ssvfiscanf_r+0x2e8>)
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f43f aec6 	beq.w	800d880 <__ssvfiscanf_r+0x50>
 800daf4:	466b      	mov	r3, sp
 800daf6:	4622      	mov	r2, r4
 800daf8:	a941      	add	r1, sp, #260	@ 0x104
 800dafa:	4630      	mov	r0, r6
 800dafc:	f7fd ff5c 	bl	800b9b8 <_scanf_float>
 800db00:	e7a0      	b.n	800da44 <__ssvfiscanf_r+0x214>
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	065b      	lsls	r3, r3, #25
 800db06:	f53f af71 	bmi.w	800d9ec <__ssvfiscanf_r+0x1bc>
 800db0a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800db0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db12:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800db14:	e7f9      	b.n	800db0a <__ssvfiscanf_r+0x2da>
 800db16:	bf00      	nop
 800db18:	0800b9b9 	.word	0x0800b9b9

0800db1c <__sfputc_r>:
 800db1c:	6893      	ldr	r3, [r2, #8]
 800db1e:	3b01      	subs	r3, #1
 800db20:	2b00      	cmp	r3, #0
 800db22:	b410      	push	{r4}
 800db24:	6093      	str	r3, [r2, #8]
 800db26:	da08      	bge.n	800db3a <__sfputc_r+0x1e>
 800db28:	6994      	ldr	r4, [r2, #24]
 800db2a:	42a3      	cmp	r3, r4
 800db2c:	db01      	blt.n	800db32 <__sfputc_r+0x16>
 800db2e:	290a      	cmp	r1, #10
 800db30:	d103      	bne.n	800db3a <__sfputc_r+0x1e>
 800db32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db36:	f7fe bb12 	b.w	800c15e <__swbuf_r>
 800db3a:	6813      	ldr	r3, [r2, #0]
 800db3c:	1c58      	adds	r0, r3, #1
 800db3e:	6010      	str	r0, [r2, #0]
 800db40:	7019      	strb	r1, [r3, #0]
 800db42:	4608      	mov	r0, r1
 800db44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <__sfputs_r>:
 800db4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4c:	4606      	mov	r6, r0
 800db4e:	460f      	mov	r7, r1
 800db50:	4614      	mov	r4, r2
 800db52:	18d5      	adds	r5, r2, r3
 800db54:	42ac      	cmp	r4, r5
 800db56:	d101      	bne.n	800db5c <__sfputs_r+0x12>
 800db58:	2000      	movs	r0, #0
 800db5a:	e007      	b.n	800db6c <__sfputs_r+0x22>
 800db5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db60:	463a      	mov	r2, r7
 800db62:	4630      	mov	r0, r6
 800db64:	f7ff ffda 	bl	800db1c <__sfputc_r>
 800db68:	1c43      	adds	r3, r0, #1
 800db6a:	d1f3      	bne.n	800db54 <__sfputs_r+0xa>
 800db6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db70 <_vfiprintf_r>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	460d      	mov	r5, r1
 800db76:	b09d      	sub	sp, #116	@ 0x74
 800db78:	4614      	mov	r4, r2
 800db7a:	4698      	mov	r8, r3
 800db7c:	4606      	mov	r6, r0
 800db7e:	b118      	cbz	r0, 800db88 <_vfiprintf_r+0x18>
 800db80:	6a03      	ldr	r3, [r0, #32]
 800db82:	b90b      	cbnz	r3, 800db88 <_vfiprintf_r+0x18>
 800db84:	f7fe f9b2 	bl	800beec <__sinit>
 800db88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db8a:	07d9      	lsls	r1, r3, #31
 800db8c:	d405      	bmi.n	800db9a <_vfiprintf_r+0x2a>
 800db8e:	89ab      	ldrh	r3, [r5, #12]
 800db90:	059a      	lsls	r2, r3, #22
 800db92:	d402      	bmi.n	800db9a <_vfiprintf_r+0x2a>
 800db94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db96:	f7fe fc26 	bl	800c3e6 <__retarget_lock_acquire_recursive>
 800db9a:	89ab      	ldrh	r3, [r5, #12]
 800db9c:	071b      	lsls	r3, r3, #28
 800db9e:	d501      	bpl.n	800dba4 <_vfiprintf_r+0x34>
 800dba0:	692b      	ldr	r3, [r5, #16]
 800dba2:	b99b      	cbnz	r3, 800dbcc <_vfiprintf_r+0x5c>
 800dba4:	4629      	mov	r1, r5
 800dba6:	4630      	mov	r0, r6
 800dba8:	f7fe fb18 	bl	800c1dc <__swsetup_r>
 800dbac:	b170      	cbz	r0, 800dbcc <_vfiprintf_r+0x5c>
 800dbae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbb0:	07dc      	lsls	r4, r3, #31
 800dbb2:	d504      	bpl.n	800dbbe <_vfiprintf_r+0x4e>
 800dbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb8:	b01d      	add	sp, #116	@ 0x74
 800dbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbe:	89ab      	ldrh	r3, [r5, #12]
 800dbc0:	0598      	lsls	r0, r3, #22
 800dbc2:	d4f7      	bmi.n	800dbb4 <_vfiprintf_r+0x44>
 800dbc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbc6:	f7fe fc0f 	bl	800c3e8 <__retarget_lock_release_recursive>
 800dbca:	e7f3      	b.n	800dbb4 <_vfiprintf_r+0x44>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbd0:	2320      	movs	r3, #32
 800dbd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbda:	2330      	movs	r3, #48	@ 0x30
 800dbdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd8c <_vfiprintf_r+0x21c>
 800dbe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbe4:	f04f 0901 	mov.w	r9, #1
 800dbe8:	4623      	mov	r3, r4
 800dbea:	469a      	mov	sl, r3
 800dbec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbf0:	b10a      	cbz	r2, 800dbf6 <_vfiprintf_r+0x86>
 800dbf2:	2a25      	cmp	r2, #37	@ 0x25
 800dbf4:	d1f9      	bne.n	800dbea <_vfiprintf_r+0x7a>
 800dbf6:	ebba 0b04 	subs.w	fp, sl, r4
 800dbfa:	d00b      	beq.n	800dc14 <_vfiprintf_r+0xa4>
 800dbfc:	465b      	mov	r3, fp
 800dbfe:	4622      	mov	r2, r4
 800dc00:	4629      	mov	r1, r5
 800dc02:	4630      	mov	r0, r6
 800dc04:	f7ff ffa1 	bl	800db4a <__sfputs_r>
 800dc08:	3001      	adds	r0, #1
 800dc0a:	f000 80a7 	beq.w	800dd5c <_vfiprintf_r+0x1ec>
 800dc0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc10:	445a      	add	r2, fp
 800dc12:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc14:	f89a 3000 	ldrb.w	r3, [sl]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 809f 	beq.w	800dd5c <_vfiprintf_r+0x1ec>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f04f 32ff 	mov.w	r2, #4294967295
 800dc24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc28:	f10a 0a01 	add.w	sl, sl, #1
 800dc2c:	9304      	str	r3, [sp, #16]
 800dc2e:	9307      	str	r3, [sp, #28]
 800dc30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc34:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc36:	4654      	mov	r4, sl
 800dc38:	2205      	movs	r2, #5
 800dc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc3e:	4853      	ldr	r0, [pc, #332]	@ (800dd8c <_vfiprintf_r+0x21c>)
 800dc40:	f7f2 face 	bl	80001e0 <memchr>
 800dc44:	9a04      	ldr	r2, [sp, #16]
 800dc46:	b9d8      	cbnz	r0, 800dc80 <_vfiprintf_r+0x110>
 800dc48:	06d1      	lsls	r1, r2, #27
 800dc4a:	bf44      	itt	mi
 800dc4c:	2320      	movmi	r3, #32
 800dc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc52:	0713      	lsls	r3, r2, #28
 800dc54:	bf44      	itt	mi
 800dc56:	232b      	movmi	r3, #43	@ 0x2b
 800dc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc60:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc62:	d015      	beq.n	800dc90 <_vfiprintf_r+0x120>
 800dc64:	9a07      	ldr	r2, [sp, #28]
 800dc66:	4654      	mov	r4, sl
 800dc68:	2000      	movs	r0, #0
 800dc6a:	f04f 0c0a 	mov.w	ip, #10
 800dc6e:	4621      	mov	r1, r4
 800dc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc74:	3b30      	subs	r3, #48	@ 0x30
 800dc76:	2b09      	cmp	r3, #9
 800dc78:	d94b      	bls.n	800dd12 <_vfiprintf_r+0x1a2>
 800dc7a:	b1b0      	cbz	r0, 800dcaa <_vfiprintf_r+0x13a>
 800dc7c:	9207      	str	r2, [sp, #28]
 800dc7e:	e014      	b.n	800dcaa <_vfiprintf_r+0x13a>
 800dc80:	eba0 0308 	sub.w	r3, r0, r8
 800dc84:	fa09 f303 	lsl.w	r3, r9, r3
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	9304      	str	r3, [sp, #16]
 800dc8c:	46a2      	mov	sl, r4
 800dc8e:	e7d2      	b.n	800dc36 <_vfiprintf_r+0xc6>
 800dc90:	9b03      	ldr	r3, [sp, #12]
 800dc92:	1d19      	adds	r1, r3, #4
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	9103      	str	r1, [sp, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	bfbb      	ittet	lt
 800dc9c:	425b      	neglt	r3, r3
 800dc9e:	f042 0202 	orrlt.w	r2, r2, #2
 800dca2:	9307      	strge	r3, [sp, #28]
 800dca4:	9307      	strlt	r3, [sp, #28]
 800dca6:	bfb8      	it	lt
 800dca8:	9204      	strlt	r2, [sp, #16]
 800dcaa:	7823      	ldrb	r3, [r4, #0]
 800dcac:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcae:	d10a      	bne.n	800dcc6 <_vfiprintf_r+0x156>
 800dcb0:	7863      	ldrb	r3, [r4, #1]
 800dcb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcb4:	d132      	bne.n	800dd1c <_vfiprintf_r+0x1ac>
 800dcb6:	9b03      	ldr	r3, [sp, #12]
 800dcb8:	1d1a      	adds	r2, r3, #4
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	9203      	str	r2, [sp, #12]
 800dcbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcc2:	3402      	adds	r4, #2
 800dcc4:	9305      	str	r3, [sp, #20]
 800dcc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd9c <_vfiprintf_r+0x22c>
 800dcca:	7821      	ldrb	r1, [r4, #0]
 800dccc:	2203      	movs	r2, #3
 800dcce:	4650      	mov	r0, sl
 800dcd0:	f7f2 fa86 	bl	80001e0 <memchr>
 800dcd4:	b138      	cbz	r0, 800dce6 <_vfiprintf_r+0x176>
 800dcd6:	9b04      	ldr	r3, [sp, #16]
 800dcd8:	eba0 000a 	sub.w	r0, r0, sl
 800dcdc:	2240      	movs	r2, #64	@ 0x40
 800dcde:	4082      	lsls	r2, r0
 800dce0:	4313      	orrs	r3, r2
 800dce2:	3401      	adds	r4, #1
 800dce4:	9304      	str	r3, [sp, #16]
 800dce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcea:	4829      	ldr	r0, [pc, #164]	@ (800dd90 <_vfiprintf_r+0x220>)
 800dcec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcf0:	2206      	movs	r2, #6
 800dcf2:	f7f2 fa75 	bl	80001e0 <memchr>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d03f      	beq.n	800dd7a <_vfiprintf_r+0x20a>
 800dcfa:	4b26      	ldr	r3, [pc, #152]	@ (800dd94 <_vfiprintf_r+0x224>)
 800dcfc:	bb1b      	cbnz	r3, 800dd46 <_vfiprintf_r+0x1d6>
 800dcfe:	9b03      	ldr	r3, [sp, #12]
 800dd00:	3307      	adds	r3, #7
 800dd02:	f023 0307 	bic.w	r3, r3, #7
 800dd06:	3308      	adds	r3, #8
 800dd08:	9303      	str	r3, [sp, #12]
 800dd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0c:	443b      	add	r3, r7
 800dd0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd10:	e76a      	b.n	800dbe8 <_vfiprintf_r+0x78>
 800dd12:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd16:	460c      	mov	r4, r1
 800dd18:	2001      	movs	r0, #1
 800dd1a:	e7a8      	b.n	800dc6e <_vfiprintf_r+0xfe>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	3401      	adds	r4, #1
 800dd20:	9305      	str	r3, [sp, #20]
 800dd22:	4619      	mov	r1, r3
 800dd24:	f04f 0c0a 	mov.w	ip, #10
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd2e:	3a30      	subs	r2, #48	@ 0x30
 800dd30:	2a09      	cmp	r2, #9
 800dd32:	d903      	bls.n	800dd3c <_vfiprintf_r+0x1cc>
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d0c6      	beq.n	800dcc6 <_vfiprintf_r+0x156>
 800dd38:	9105      	str	r1, [sp, #20]
 800dd3a:	e7c4      	b.n	800dcc6 <_vfiprintf_r+0x156>
 800dd3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd40:	4604      	mov	r4, r0
 800dd42:	2301      	movs	r3, #1
 800dd44:	e7f0      	b.n	800dd28 <_vfiprintf_r+0x1b8>
 800dd46:	ab03      	add	r3, sp, #12
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	462a      	mov	r2, r5
 800dd4c:	4b12      	ldr	r3, [pc, #72]	@ (800dd98 <_vfiprintf_r+0x228>)
 800dd4e:	a904      	add	r1, sp, #16
 800dd50:	4630      	mov	r0, r6
 800dd52:	f3af 8000 	nop.w
 800dd56:	4607      	mov	r7, r0
 800dd58:	1c78      	adds	r0, r7, #1
 800dd5a:	d1d6      	bne.n	800dd0a <_vfiprintf_r+0x19a>
 800dd5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd5e:	07d9      	lsls	r1, r3, #31
 800dd60:	d405      	bmi.n	800dd6e <_vfiprintf_r+0x1fe>
 800dd62:	89ab      	ldrh	r3, [r5, #12]
 800dd64:	059a      	lsls	r2, r3, #22
 800dd66:	d402      	bmi.n	800dd6e <_vfiprintf_r+0x1fe>
 800dd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd6a:	f7fe fb3d 	bl	800c3e8 <__retarget_lock_release_recursive>
 800dd6e:	89ab      	ldrh	r3, [r5, #12]
 800dd70:	065b      	lsls	r3, r3, #25
 800dd72:	f53f af1f 	bmi.w	800dbb4 <_vfiprintf_r+0x44>
 800dd76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd78:	e71e      	b.n	800dbb8 <_vfiprintf_r+0x48>
 800dd7a:	ab03      	add	r3, sp, #12
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	462a      	mov	r2, r5
 800dd80:	4b05      	ldr	r3, [pc, #20]	@ (800dd98 <_vfiprintf_r+0x228>)
 800dd82:	a904      	add	r1, sp, #16
 800dd84:	4630      	mov	r0, r6
 800dd86:	f000 f879 	bl	800de7c <_printf_i>
 800dd8a:	e7e4      	b.n	800dd56 <_vfiprintf_r+0x1e6>
 800dd8c:	0800fd40 	.word	0x0800fd40
 800dd90:	0800fd4a 	.word	0x0800fd4a
 800dd94:	00000000 	.word	0x00000000
 800dd98:	0800db4b 	.word	0x0800db4b
 800dd9c:	0800fd46 	.word	0x0800fd46

0800dda0 <_printf_common>:
 800dda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dda4:	4616      	mov	r6, r2
 800dda6:	4698      	mov	r8, r3
 800dda8:	688a      	ldr	r2, [r1, #8]
 800ddaa:	690b      	ldr	r3, [r1, #16]
 800ddac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	bfb8      	it	lt
 800ddb4:	4613      	movlt	r3, r2
 800ddb6:	6033      	str	r3, [r6, #0]
 800ddb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ddbc:	4607      	mov	r7, r0
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	b10a      	cbz	r2, 800ddc6 <_printf_common+0x26>
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	6033      	str	r3, [r6, #0]
 800ddc6:	6823      	ldr	r3, [r4, #0]
 800ddc8:	0699      	lsls	r1, r3, #26
 800ddca:	bf42      	ittt	mi
 800ddcc:	6833      	ldrmi	r3, [r6, #0]
 800ddce:	3302      	addmi	r3, #2
 800ddd0:	6033      	strmi	r3, [r6, #0]
 800ddd2:	6825      	ldr	r5, [r4, #0]
 800ddd4:	f015 0506 	ands.w	r5, r5, #6
 800ddd8:	d106      	bne.n	800dde8 <_printf_common+0x48>
 800ddda:	f104 0a19 	add.w	sl, r4, #25
 800ddde:	68e3      	ldr	r3, [r4, #12]
 800dde0:	6832      	ldr	r2, [r6, #0]
 800dde2:	1a9b      	subs	r3, r3, r2
 800dde4:	42ab      	cmp	r3, r5
 800dde6:	dc26      	bgt.n	800de36 <_printf_common+0x96>
 800dde8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ddec:	6822      	ldr	r2, [r4, #0]
 800ddee:	3b00      	subs	r3, #0
 800ddf0:	bf18      	it	ne
 800ddf2:	2301      	movne	r3, #1
 800ddf4:	0692      	lsls	r2, r2, #26
 800ddf6:	d42b      	bmi.n	800de50 <_printf_common+0xb0>
 800ddf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ddfc:	4641      	mov	r1, r8
 800ddfe:	4638      	mov	r0, r7
 800de00:	47c8      	blx	r9
 800de02:	3001      	adds	r0, #1
 800de04:	d01e      	beq.n	800de44 <_printf_common+0xa4>
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	6922      	ldr	r2, [r4, #16]
 800de0a:	f003 0306 	and.w	r3, r3, #6
 800de0e:	2b04      	cmp	r3, #4
 800de10:	bf02      	ittt	eq
 800de12:	68e5      	ldreq	r5, [r4, #12]
 800de14:	6833      	ldreq	r3, [r6, #0]
 800de16:	1aed      	subeq	r5, r5, r3
 800de18:	68a3      	ldr	r3, [r4, #8]
 800de1a:	bf0c      	ite	eq
 800de1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de20:	2500      	movne	r5, #0
 800de22:	4293      	cmp	r3, r2
 800de24:	bfc4      	itt	gt
 800de26:	1a9b      	subgt	r3, r3, r2
 800de28:	18ed      	addgt	r5, r5, r3
 800de2a:	2600      	movs	r6, #0
 800de2c:	341a      	adds	r4, #26
 800de2e:	42b5      	cmp	r5, r6
 800de30:	d11a      	bne.n	800de68 <_printf_common+0xc8>
 800de32:	2000      	movs	r0, #0
 800de34:	e008      	b.n	800de48 <_printf_common+0xa8>
 800de36:	2301      	movs	r3, #1
 800de38:	4652      	mov	r2, sl
 800de3a:	4641      	mov	r1, r8
 800de3c:	4638      	mov	r0, r7
 800de3e:	47c8      	blx	r9
 800de40:	3001      	adds	r0, #1
 800de42:	d103      	bne.n	800de4c <_printf_common+0xac>
 800de44:	f04f 30ff 	mov.w	r0, #4294967295
 800de48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de4c:	3501      	adds	r5, #1
 800de4e:	e7c6      	b.n	800ddde <_printf_common+0x3e>
 800de50:	18e1      	adds	r1, r4, r3
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	2030      	movs	r0, #48	@ 0x30
 800de56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800de5a:	4422      	add	r2, r4
 800de5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800de60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800de64:	3302      	adds	r3, #2
 800de66:	e7c7      	b.n	800ddf8 <_printf_common+0x58>
 800de68:	2301      	movs	r3, #1
 800de6a:	4622      	mov	r2, r4
 800de6c:	4641      	mov	r1, r8
 800de6e:	4638      	mov	r0, r7
 800de70:	47c8      	blx	r9
 800de72:	3001      	adds	r0, #1
 800de74:	d0e6      	beq.n	800de44 <_printf_common+0xa4>
 800de76:	3601      	adds	r6, #1
 800de78:	e7d9      	b.n	800de2e <_printf_common+0x8e>
	...

0800de7c <_printf_i>:
 800de7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de80:	7e0f      	ldrb	r7, [r1, #24]
 800de82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de84:	2f78      	cmp	r7, #120	@ 0x78
 800de86:	4691      	mov	r9, r2
 800de88:	4680      	mov	r8, r0
 800de8a:	460c      	mov	r4, r1
 800de8c:	469a      	mov	sl, r3
 800de8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de92:	d807      	bhi.n	800dea4 <_printf_i+0x28>
 800de94:	2f62      	cmp	r7, #98	@ 0x62
 800de96:	d80a      	bhi.n	800deae <_printf_i+0x32>
 800de98:	2f00      	cmp	r7, #0
 800de9a:	f000 80d1 	beq.w	800e040 <_printf_i+0x1c4>
 800de9e:	2f58      	cmp	r7, #88	@ 0x58
 800dea0:	f000 80b8 	beq.w	800e014 <_printf_i+0x198>
 800dea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dea8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800deac:	e03a      	b.n	800df24 <_printf_i+0xa8>
 800deae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800deb2:	2b15      	cmp	r3, #21
 800deb4:	d8f6      	bhi.n	800dea4 <_printf_i+0x28>
 800deb6:	a101      	add	r1, pc, #4	@ (adr r1, 800debc <_printf_i+0x40>)
 800deb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800debc:	0800df15 	.word	0x0800df15
 800dec0:	0800df29 	.word	0x0800df29
 800dec4:	0800dea5 	.word	0x0800dea5
 800dec8:	0800dea5 	.word	0x0800dea5
 800decc:	0800dea5 	.word	0x0800dea5
 800ded0:	0800dea5 	.word	0x0800dea5
 800ded4:	0800df29 	.word	0x0800df29
 800ded8:	0800dea5 	.word	0x0800dea5
 800dedc:	0800dea5 	.word	0x0800dea5
 800dee0:	0800dea5 	.word	0x0800dea5
 800dee4:	0800dea5 	.word	0x0800dea5
 800dee8:	0800e027 	.word	0x0800e027
 800deec:	0800df53 	.word	0x0800df53
 800def0:	0800dfe1 	.word	0x0800dfe1
 800def4:	0800dea5 	.word	0x0800dea5
 800def8:	0800dea5 	.word	0x0800dea5
 800defc:	0800e049 	.word	0x0800e049
 800df00:	0800dea5 	.word	0x0800dea5
 800df04:	0800df53 	.word	0x0800df53
 800df08:	0800dea5 	.word	0x0800dea5
 800df0c:	0800dea5 	.word	0x0800dea5
 800df10:	0800dfe9 	.word	0x0800dfe9
 800df14:	6833      	ldr	r3, [r6, #0]
 800df16:	1d1a      	adds	r2, r3, #4
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	6032      	str	r2, [r6, #0]
 800df1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df24:	2301      	movs	r3, #1
 800df26:	e09c      	b.n	800e062 <_printf_i+0x1e6>
 800df28:	6833      	ldr	r3, [r6, #0]
 800df2a:	6820      	ldr	r0, [r4, #0]
 800df2c:	1d19      	adds	r1, r3, #4
 800df2e:	6031      	str	r1, [r6, #0]
 800df30:	0606      	lsls	r6, r0, #24
 800df32:	d501      	bpl.n	800df38 <_printf_i+0xbc>
 800df34:	681d      	ldr	r5, [r3, #0]
 800df36:	e003      	b.n	800df40 <_printf_i+0xc4>
 800df38:	0645      	lsls	r5, r0, #25
 800df3a:	d5fb      	bpl.n	800df34 <_printf_i+0xb8>
 800df3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df40:	2d00      	cmp	r5, #0
 800df42:	da03      	bge.n	800df4c <_printf_i+0xd0>
 800df44:	232d      	movs	r3, #45	@ 0x2d
 800df46:	426d      	negs	r5, r5
 800df48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df4c:	4858      	ldr	r0, [pc, #352]	@ (800e0b0 <_printf_i+0x234>)
 800df4e:	230a      	movs	r3, #10
 800df50:	e011      	b.n	800df76 <_printf_i+0xfa>
 800df52:	6821      	ldr	r1, [r4, #0]
 800df54:	6833      	ldr	r3, [r6, #0]
 800df56:	0608      	lsls	r0, r1, #24
 800df58:	f853 5b04 	ldr.w	r5, [r3], #4
 800df5c:	d402      	bmi.n	800df64 <_printf_i+0xe8>
 800df5e:	0649      	lsls	r1, r1, #25
 800df60:	bf48      	it	mi
 800df62:	b2ad      	uxthmi	r5, r5
 800df64:	2f6f      	cmp	r7, #111	@ 0x6f
 800df66:	4852      	ldr	r0, [pc, #328]	@ (800e0b0 <_printf_i+0x234>)
 800df68:	6033      	str	r3, [r6, #0]
 800df6a:	bf14      	ite	ne
 800df6c:	230a      	movne	r3, #10
 800df6e:	2308      	moveq	r3, #8
 800df70:	2100      	movs	r1, #0
 800df72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df76:	6866      	ldr	r6, [r4, #4]
 800df78:	60a6      	str	r6, [r4, #8]
 800df7a:	2e00      	cmp	r6, #0
 800df7c:	db05      	blt.n	800df8a <_printf_i+0x10e>
 800df7e:	6821      	ldr	r1, [r4, #0]
 800df80:	432e      	orrs	r6, r5
 800df82:	f021 0104 	bic.w	r1, r1, #4
 800df86:	6021      	str	r1, [r4, #0]
 800df88:	d04b      	beq.n	800e022 <_printf_i+0x1a6>
 800df8a:	4616      	mov	r6, r2
 800df8c:	fbb5 f1f3 	udiv	r1, r5, r3
 800df90:	fb03 5711 	mls	r7, r3, r1, r5
 800df94:	5dc7      	ldrb	r7, [r0, r7]
 800df96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df9a:	462f      	mov	r7, r5
 800df9c:	42bb      	cmp	r3, r7
 800df9e:	460d      	mov	r5, r1
 800dfa0:	d9f4      	bls.n	800df8c <_printf_i+0x110>
 800dfa2:	2b08      	cmp	r3, #8
 800dfa4:	d10b      	bne.n	800dfbe <_printf_i+0x142>
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	07df      	lsls	r7, r3, #31
 800dfaa:	d508      	bpl.n	800dfbe <_printf_i+0x142>
 800dfac:	6923      	ldr	r3, [r4, #16]
 800dfae:	6861      	ldr	r1, [r4, #4]
 800dfb0:	4299      	cmp	r1, r3
 800dfb2:	bfde      	ittt	le
 800dfb4:	2330      	movle	r3, #48	@ 0x30
 800dfb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dfba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dfbe:	1b92      	subs	r2, r2, r6
 800dfc0:	6122      	str	r2, [r4, #16]
 800dfc2:	f8cd a000 	str.w	sl, [sp]
 800dfc6:	464b      	mov	r3, r9
 800dfc8:	aa03      	add	r2, sp, #12
 800dfca:	4621      	mov	r1, r4
 800dfcc:	4640      	mov	r0, r8
 800dfce:	f7ff fee7 	bl	800dda0 <_printf_common>
 800dfd2:	3001      	adds	r0, #1
 800dfd4:	d14a      	bne.n	800e06c <_printf_i+0x1f0>
 800dfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfda:	b004      	add	sp, #16
 800dfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	f043 0320 	orr.w	r3, r3, #32
 800dfe6:	6023      	str	r3, [r4, #0]
 800dfe8:	4832      	ldr	r0, [pc, #200]	@ (800e0b4 <_printf_i+0x238>)
 800dfea:	2778      	movs	r7, #120	@ 0x78
 800dfec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	6831      	ldr	r1, [r6, #0]
 800dff4:	061f      	lsls	r7, r3, #24
 800dff6:	f851 5b04 	ldr.w	r5, [r1], #4
 800dffa:	d402      	bmi.n	800e002 <_printf_i+0x186>
 800dffc:	065f      	lsls	r7, r3, #25
 800dffe:	bf48      	it	mi
 800e000:	b2ad      	uxthmi	r5, r5
 800e002:	6031      	str	r1, [r6, #0]
 800e004:	07d9      	lsls	r1, r3, #31
 800e006:	bf44      	itt	mi
 800e008:	f043 0320 	orrmi.w	r3, r3, #32
 800e00c:	6023      	strmi	r3, [r4, #0]
 800e00e:	b11d      	cbz	r5, 800e018 <_printf_i+0x19c>
 800e010:	2310      	movs	r3, #16
 800e012:	e7ad      	b.n	800df70 <_printf_i+0xf4>
 800e014:	4826      	ldr	r0, [pc, #152]	@ (800e0b0 <_printf_i+0x234>)
 800e016:	e7e9      	b.n	800dfec <_printf_i+0x170>
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	f023 0320 	bic.w	r3, r3, #32
 800e01e:	6023      	str	r3, [r4, #0]
 800e020:	e7f6      	b.n	800e010 <_printf_i+0x194>
 800e022:	4616      	mov	r6, r2
 800e024:	e7bd      	b.n	800dfa2 <_printf_i+0x126>
 800e026:	6833      	ldr	r3, [r6, #0]
 800e028:	6825      	ldr	r5, [r4, #0]
 800e02a:	6961      	ldr	r1, [r4, #20]
 800e02c:	1d18      	adds	r0, r3, #4
 800e02e:	6030      	str	r0, [r6, #0]
 800e030:	062e      	lsls	r6, r5, #24
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	d501      	bpl.n	800e03a <_printf_i+0x1be>
 800e036:	6019      	str	r1, [r3, #0]
 800e038:	e002      	b.n	800e040 <_printf_i+0x1c4>
 800e03a:	0668      	lsls	r0, r5, #25
 800e03c:	d5fb      	bpl.n	800e036 <_printf_i+0x1ba>
 800e03e:	8019      	strh	r1, [r3, #0]
 800e040:	2300      	movs	r3, #0
 800e042:	6123      	str	r3, [r4, #16]
 800e044:	4616      	mov	r6, r2
 800e046:	e7bc      	b.n	800dfc2 <_printf_i+0x146>
 800e048:	6833      	ldr	r3, [r6, #0]
 800e04a:	1d1a      	adds	r2, r3, #4
 800e04c:	6032      	str	r2, [r6, #0]
 800e04e:	681e      	ldr	r6, [r3, #0]
 800e050:	6862      	ldr	r2, [r4, #4]
 800e052:	2100      	movs	r1, #0
 800e054:	4630      	mov	r0, r6
 800e056:	f7f2 f8c3 	bl	80001e0 <memchr>
 800e05a:	b108      	cbz	r0, 800e060 <_printf_i+0x1e4>
 800e05c:	1b80      	subs	r0, r0, r6
 800e05e:	6060      	str	r0, [r4, #4]
 800e060:	6863      	ldr	r3, [r4, #4]
 800e062:	6123      	str	r3, [r4, #16]
 800e064:	2300      	movs	r3, #0
 800e066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e06a:	e7aa      	b.n	800dfc2 <_printf_i+0x146>
 800e06c:	6923      	ldr	r3, [r4, #16]
 800e06e:	4632      	mov	r2, r6
 800e070:	4649      	mov	r1, r9
 800e072:	4640      	mov	r0, r8
 800e074:	47d0      	blx	sl
 800e076:	3001      	adds	r0, #1
 800e078:	d0ad      	beq.n	800dfd6 <_printf_i+0x15a>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	079b      	lsls	r3, r3, #30
 800e07e:	d413      	bmi.n	800e0a8 <_printf_i+0x22c>
 800e080:	68e0      	ldr	r0, [r4, #12]
 800e082:	9b03      	ldr	r3, [sp, #12]
 800e084:	4298      	cmp	r0, r3
 800e086:	bfb8      	it	lt
 800e088:	4618      	movlt	r0, r3
 800e08a:	e7a6      	b.n	800dfda <_printf_i+0x15e>
 800e08c:	2301      	movs	r3, #1
 800e08e:	4632      	mov	r2, r6
 800e090:	4649      	mov	r1, r9
 800e092:	4640      	mov	r0, r8
 800e094:	47d0      	blx	sl
 800e096:	3001      	adds	r0, #1
 800e098:	d09d      	beq.n	800dfd6 <_printf_i+0x15a>
 800e09a:	3501      	adds	r5, #1
 800e09c:	68e3      	ldr	r3, [r4, #12]
 800e09e:	9903      	ldr	r1, [sp, #12]
 800e0a0:	1a5b      	subs	r3, r3, r1
 800e0a2:	42ab      	cmp	r3, r5
 800e0a4:	dcf2      	bgt.n	800e08c <_printf_i+0x210>
 800e0a6:	e7eb      	b.n	800e080 <_printf_i+0x204>
 800e0a8:	2500      	movs	r5, #0
 800e0aa:	f104 0619 	add.w	r6, r4, #25
 800e0ae:	e7f5      	b.n	800e09c <_printf_i+0x220>
 800e0b0:	0800fd51 	.word	0x0800fd51
 800e0b4:	0800fd62 	.word	0x0800fd62

0800e0b8 <_scanf_chars>:
 800e0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0bc:	4615      	mov	r5, r2
 800e0be:	688a      	ldr	r2, [r1, #8]
 800e0c0:	4680      	mov	r8, r0
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	b932      	cbnz	r2, 800e0d4 <_scanf_chars+0x1c>
 800e0c6:	698a      	ldr	r2, [r1, #24]
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	bf14      	ite	ne
 800e0cc:	f04f 32ff 	movne.w	r2, #4294967295
 800e0d0:	2201      	moveq	r2, #1
 800e0d2:	608a      	str	r2, [r1, #8]
 800e0d4:	6822      	ldr	r2, [r4, #0]
 800e0d6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e168 <_scanf_chars+0xb0>
 800e0da:	06d1      	lsls	r1, r2, #27
 800e0dc:	bf5f      	itttt	pl
 800e0de:	681a      	ldrpl	r2, [r3, #0]
 800e0e0:	1d11      	addpl	r1, r2, #4
 800e0e2:	6019      	strpl	r1, [r3, #0]
 800e0e4:	6816      	ldrpl	r6, [r2, #0]
 800e0e6:	2700      	movs	r7, #0
 800e0e8:	69a0      	ldr	r0, [r4, #24]
 800e0ea:	b188      	cbz	r0, 800e110 <_scanf_chars+0x58>
 800e0ec:	2801      	cmp	r0, #1
 800e0ee:	d107      	bne.n	800e100 <_scanf_chars+0x48>
 800e0f0:	682b      	ldr	r3, [r5, #0]
 800e0f2:	781a      	ldrb	r2, [r3, #0]
 800e0f4:	6963      	ldr	r3, [r4, #20]
 800e0f6:	5c9b      	ldrb	r3, [r3, r2]
 800e0f8:	b953      	cbnz	r3, 800e110 <_scanf_chars+0x58>
 800e0fa:	2f00      	cmp	r7, #0
 800e0fc:	d031      	beq.n	800e162 <_scanf_chars+0xaa>
 800e0fe:	e022      	b.n	800e146 <_scanf_chars+0x8e>
 800e100:	2802      	cmp	r0, #2
 800e102:	d120      	bne.n	800e146 <_scanf_chars+0x8e>
 800e104:	682b      	ldr	r3, [r5, #0]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e10c:	071b      	lsls	r3, r3, #28
 800e10e:	d41a      	bmi.n	800e146 <_scanf_chars+0x8e>
 800e110:	6823      	ldr	r3, [r4, #0]
 800e112:	06da      	lsls	r2, r3, #27
 800e114:	bf5e      	ittt	pl
 800e116:	682b      	ldrpl	r3, [r5, #0]
 800e118:	781b      	ldrbpl	r3, [r3, #0]
 800e11a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e11e:	682a      	ldr	r2, [r5, #0]
 800e120:	686b      	ldr	r3, [r5, #4]
 800e122:	3201      	adds	r2, #1
 800e124:	602a      	str	r2, [r5, #0]
 800e126:	68a2      	ldr	r2, [r4, #8]
 800e128:	3b01      	subs	r3, #1
 800e12a:	3a01      	subs	r2, #1
 800e12c:	606b      	str	r3, [r5, #4]
 800e12e:	3701      	adds	r7, #1
 800e130:	60a2      	str	r2, [r4, #8]
 800e132:	b142      	cbz	r2, 800e146 <_scanf_chars+0x8e>
 800e134:	2b00      	cmp	r3, #0
 800e136:	dcd7      	bgt.n	800e0e8 <_scanf_chars+0x30>
 800e138:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e13c:	4629      	mov	r1, r5
 800e13e:	4640      	mov	r0, r8
 800e140:	4798      	blx	r3
 800e142:	2800      	cmp	r0, #0
 800e144:	d0d0      	beq.n	800e0e8 <_scanf_chars+0x30>
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	f013 0310 	ands.w	r3, r3, #16
 800e14c:	d105      	bne.n	800e15a <_scanf_chars+0xa2>
 800e14e:	68e2      	ldr	r2, [r4, #12]
 800e150:	3201      	adds	r2, #1
 800e152:	60e2      	str	r2, [r4, #12]
 800e154:	69a2      	ldr	r2, [r4, #24]
 800e156:	b102      	cbz	r2, 800e15a <_scanf_chars+0xa2>
 800e158:	7033      	strb	r3, [r6, #0]
 800e15a:	6923      	ldr	r3, [r4, #16]
 800e15c:	443b      	add	r3, r7
 800e15e:	6123      	str	r3, [r4, #16]
 800e160:	2000      	movs	r0, #0
 800e162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e166:	bf00      	nop
 800e168:	0800fe21 	.word	0x0800fe21

0800e16c <_scanf_i>:
 800e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e170:	4698      	mov	r8, r3
 800e172:	4b74      	ldr	r3, [pc, #464]	@ (800e344 <_scanf_i+0x1d8>)
 800e174:	460c      	mov	r4, r1
 800e176:	4682      	mov	sl, r0
 800e178:	4616      	mov	r6, r2
 800e17a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e17e:	b087      	sub	sp, #28
 800e180:	ab03      	add	r3, sp, #12
 800e182:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e186:	4b70      	ldr	r3, [pc, #448]	@ (800e348 <_scanf_i+0x1dc>)
 800e188:	69a1      	ldr	r1, [r4, #24]
 800e18a:	4a70      	ldr	r2, [pc, #448]	@ (800e34c <_scanf_i+0x1e0>)
 800e18c:	2903      	cmp	r1, #3
 800e18e:	bf08      	it	eq
 800e190:	461a      	moveq	r2, r3
 800e192:	68a3      	ldr	r3, [r4, #8]
 800e194:	9201      	str	r2, [sp, #4]
 800e196:	1e5a      	subs	r2, r3, #1
 800e198:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e19c:	bf88      	it	hi
 800e19e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e1a2:	4627      	mov	r7, r4
 800e1a4:	bf82      	ittt	hi
 800e1a6:	eb03 0905 	addhi.w	r9, r3, r5
 800e1aa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e1ae:	60a3      	strhi	r3, [r4, #8]
 800e1b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e1b4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e1b8:	bf98      	it	ls
 800e1ba:	f04f 0900 	movls.w	r9, #0
 800e1be:	6023      	str	r3, [r4, #0]
 800e1c0:	463d      	mov	r5, r7
 800e1c2:	f04f 0b00 	mov.w	fp, #0
 800e1c6:	6831      	ldr	r1, [r6, #0]
 800e1c8:	ab03      	add	r3, sp, #12
 800e1ca:	7809      	ldrb	r1, [r1, #0]
 800e1cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e1d0:	2202      	movs	r2, #2
 800e1d2:	f7f2 f805 	bl	80001e0 <memchr>
 800e1d6:	b328      	cbz	r0, 800e224 <_scanf_i+0xb8>
 800e1d8:	f1bb 0f01 	cmp.w	fp, #1
 800e1dc:	d159      	bne.n	800e292 <_scanf_i+0x126>
 800e1de:	6862      	ldr	r2, [r4, #4]
 800e1e0:	b92a      	cbnz	r2, 800e1ee <_scanf_i+0x82>
 800e1e2:	6822      	ldr	r2, [r4, #0]
 800e1e4:	2108      	movs	r1, #8
 800e1e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e1ea:	6061      	str	r1, [r4, #4]
 800e1ec:	6022      	str	r2, [r4, #0]
 800e1ee:	6822      	ldr	r2, [r4, #0]
 800e1f0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e1f4:	6022      	str	r2, [r4, #0]
 800e1f6:	68a2      	ldr	r2, [r4, #8]
 800e1f8:	1e51      	subs	r1, r2, #1
 800e1fa:	60a1      	str	r1, [r4, #8]
 800e1fc:	b192      	cbz	r2, 800e224 <_scanf_i+0xb8>
 800e1fe:	6832      	ldr	r2, [r6, #0]
 800e200:	1c51      	adds	r1, r2, #1
 800e202:	6031      	str	r1, [r6, #0]
 800e204:	7812      	ldrb	r2, [r2, #0]
 800e206:	f805 2b01 	strb.w	r2, [r5], #1
 800e20a:	6872      	ldr	r2, [r6, #4]
 800e20c:	3a01      	subs	r2, #1
 800e20e:	2a00      	cmp	r2, #0
 800e210:	6072      	str	r2, [r6, #4]
 800e212:	dc07      	bgt.n	800e224 <_scanf_i+0xb8>
 800e214:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e218:	4631      	mov	r1, r6
 800e21a:	4650      	mov	r0, sl
 800e21c:	4790      	blx	r2
 800e21e:	2800      	cmp	r0, #0
 800e220:	f040 8085 	bne.w	800e32e <_scanf_i+0x1c2>
 800e224:	f10b 0b01 	add.w	fp, fp, #1
 800e228:	f1bb 0f03 	cmp.w	fp, #3
 800e22c:	d1cb      	bne.n	800e1c6 <_scanf_i+0x5a>
 800e22e:	6863      	ldr	r3, [r4, #4]
 800e230:	b90b      	cbnz	r3, 800e236 <_scanf_i+0xca>
 800e232:	230a      	movs	r3, #10
 800e234:	6063      	str	r3, [r4, #4]
 800e236:	6863      	ldr	r3, [r4, #4]
 800e238:	4945      	ldr	r1, [pc, #276]	@ (800e350 <_scanf_i+0x1e4>)
 800e23a:	6960      	ldr	r0, [r4, #20]
 800e23c:	1ac9      	subs	r1, r1, r3
 800e23e:	f000 f997 	bl	800e570 <__sccl>
 800e242:	f04f 0b00 	mov.w	fp, #0
 800e246:	68a3      	ldr	r3, [r4, #8]
 800e248:	6822      	ldr	r2, [r4, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d03d      	beq.n	800e2ca <_scanf_i+0x15e>
 800e24e:	6831      	ldr	r1, [r6, #0]
 800e250:	6960      	ldr	r0, [r4, #20]
 800e252:	f891 c000 	ldrb.w	ip, [r1]
 800e256:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d035      	beq.n	800e2ca <_scanf_i+0x15e>
 800e25e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e262:	d124      	bne.n	800e2ae <_scanf_i+0x142>
 800e264:	0510      	lsls	r0, r2, #20
 800e266:	d522      	bpl.n	800e2ae <_scanf_i+0x142>
 800e268:	f10b 0b01 	add.w	fp, fp, #1
 800e26c:	f1b9 0f00 	cmp.w	r9, #0
 800e270:	d003      	beq.n	800e27a <_scanf_i+0x10e>
 800e272:	3301      	adds	r3, #1
 800e274:	f109 39ff 	add.w	r9, r9, #4294967295
 800e278:	60a3      	str	r3, [r4, #8]
 800e27a:	6873      	ldr	r3, [r6, #4]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	2b00      	cmp	r3, #0
 800e280:	6073      	str	r3, [r6, #4]
 800e282:	dd1b      	ble.n	800e2bc <_scanf_i+0x150>
 800e284:	6833      	ldr	r3, [r6, #0]
 800e286:	3301      	adds	r3, #1
 800e288:	6033      	str	r3, [r6, #0]
 800e28a:	68a3      	ldr	r3, [r4, #8]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	60a3      	str	r3, [r4, #8]
 800e290:	e7d9      	b.n	800e246 <_scanf_i+0xda>
 800e292:	f1bb 0f02 	cmp.w	fp, #2
 800e296:	d1ae      	bne.n	800e1f6 <_scanf_i+0x8a>
 800e298:	6822      	ldr	r2, [r4, #0]
 800e29a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e29e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e2a2:	d1c4      	bne.n	800e22e <_scanf_i+0xc2>
 800e2a4:	2110      	movs	r1, #16
 800e2a6:	6061      	str	r1, [r4, #4]
 800e2a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e2ac:	e7a2      	b.n	800e1f4 <_scanf_i+0x88>
 800e2ae:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e2b2:	6022      	str	r2, [r4, #0]
 800e2b4:	780b      	ldrb	r3, [r1, #0]
 800e2b6:	f805 3b01 	strb.w	r3, [r5], #1
 800e2ba:	e7de      	b.n	800e27a <_scanf_i+0x10e>
 800e2bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	4650      	mov	r0, sl
 800e2c4:	4798      	blx	r3
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d0df      	beq.n	800e28a <_scanf_i+0x11e>
 800e2ca:	6823      	ldr	r3, [r4, #0]
 800e2cc:	05d9      	lsls	r1, r3, #23
 800e2ce:	d50d      	bpl.n	800e2ec <_scanf_i+0x180>
 800e2d0:	42bd      	cmp	r5, r7
 800e2d2:	d909      	bls.n	800e2e8 <_scanf_i+0x17c>
 800e2d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e2d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e2dc:	4632      	mov	r2, r6
 800e2de:	4650      	mov	r0, sl
 800e2e0:	4798      	blx	r3
 800e2e2:	f105 39ff 	add.w	r9, r5, #4294967295
 800e2e6:	464d      	mov	r5, r9
 800e2e8:	42bd      	cmp	r5, r7
 800e2ea:	d028      	beq.n	800e33e <_scanf_i+0x1d2>
 800e2ec:	6822      	ldr	r2, [r4, #0]
 800e2ee:	f012 0210 	ands.w	r2, r2, #16
 800e2f2:	d113      	bne.n	800e31c <_scanf_i+0x1b0>
 800e2f4:	702a      	strb	r2, [r5, #0]
 800e2f6:	6863      	ldr	r3, [r4, #4]
 800e2f8:	9e01      	ldr	r6, [sp, #4]
 800e2fa:	4639      	mov	r1, r7
 800e2fc:	4650      	mov	r0, sl
 800e2fe:	47b0      	blx	r6
 800e300:	f8d8 3000 	ldr.w	r3, [r8]
 800e304:	6821      	ldr	r1, [r4, #0]
 800e306:	1d1a      	adds	r2, r3, #4
 800e308:	f8c8 2000 	str.w	r2, [r8]
 800e30c:	f011 0f20 	tst.w	r1, #32
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	d00f      	beq.n	800e334 <_scanf_i+0x1c8>
 800e314:	6018      	str	r0, [r3, #0]
 800e316:	68e3      	ldr	r3, [r4, #12]
 800e318:	3301      	adds	r3, #1
 800e31a:	60e3      	str	r3, [r4, #12]
 800e31c:	6923      	ldr	r3, [r4, #16]
 800e31e:	1bed      	subs	r5, r5, r7
 800e320:	445d      	add	r5, fp
 800e322:	442b      	add	r3, r5
 800e324:	6123      	str	r3, [r4, #16]
 800e326:	2000      	movs	r0, #0
 800e328:	b007      	add	sp, #28
 800e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e32e:	f04f 0b00 	mov.w	fp, #0
 800e332:	e7ca      	b.n	800e2ca <_scanf_i+0x15e>
 800e334:	07ca      	lsls	r2, r1, #31
 800e336:	bf4c      	ite	mi
 800e338:	8018      	strhmi	r0, [r3, #0]
 800e33a:	6018      	strpl	r0, [r3, #0]
 800e33c:	e7eb      	b.n	800e316 <_scanf_i+0x1aa>
 800e33e:	2001      	movs	r0, #1
 800e340:	e7f2      	b.n	800e328 <_scanf_i+0x1bc>
 800e342:	bf00      	nop
 800e344:	0800fc18 	.word	0x0800fc18
 800e348:	0800b9a1 	.word	0x0800b9a1
 800e34c:	0800e811 	.word	0x0800e811
 800e350:	0800fd83 	.word	0x0800fd83

0800e354 <__sflush_r>:
 800e354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	0716      	lsls	r6, r2, #28
 800e35e:	4605      	mov	r5, r0
 800e360:	460c      	mov	r4, r1
 800e362:	d454      	bmi.n	800e40e <__sflush_r+0xba>
 800e364:	684b      	ldr	r3, [r1, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	dc02      	bgt.n	800e370 <__sflush_r+0x1c>
 800e36a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	dd48      	ble.n	800e402 <__sflush_r+0xae>
 800e370:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e372:	2e00      	cmp	r6, #0
 800e374:	d045      	beq.n	800e402 <__sflush_r+0xae>
 800e376:	2300      	movs	r3, #0
 800e378:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e37c:	682f      	ldr	r7, [r5, #0]
 800e37e:	6a21      	ldr	r1, [r4, #32]
 800e380:	602b      	str	r3, [r5, #0]
 800e382:	d030      	beq.n	800e3e6 <__sflush_r+0x92>
 800e384:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	0759      	lsls	r1, r3, #29
 800e38a:	d505      	bpl.n	800e398 <__sflush_r+0x44>
 800e38c:	6863      	ldr	r3, [r4, #4]
 800e38e:	1ad2      	subs	r2, r2, r3
 800e390:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e392:	b10b      	cbz	r3, 800e398 <__sflush_r+0x44>
 800e394:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e396:	1ad2      	subs	r2, r2, r3
 800e398:	2300      	movs	r3, #0
 800e39a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e39c:	6a21      	ldr	r1, [r4, #32]
 800e39e:	4628      	mov	r0, r5
 800e3a0:	47b0      	blx	r6
 800e3a2:	1c43      	adds	r3, r0, #1
 800e3a4:	89a3      	ldrh	r3, [r4, #12]
 800e3a6:	d106      	bne.n	800e3b6 <__sflush_r+0x62>
 800e3a8:	6829      	ldr	r1, [r5, #0]
 800e3aa:	291d      	cmp	r1, #29
 800e3ac:	d82b      	bhi.n	800e406 <__sflush_r+0xb2>
 800e3ae:	4a2a      	ldr	r2, [pc, #168]	@ (800e458 <__sflush_r+0x104>)
 800e3b0:	40ca      	lsrs	r2, r1
 800e3b2:	07d6      	lsls	r6, r2, #31
 800e3b4:	d527      	bpl.n	800e406 <__sflush_r+0xb2>
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	6062      	str	r2, [r4, #4]
 800e3ba:	04d9      	lsls	r1, r3, #19
 800e3bc:	6922      	ldr	r2, [r4, #16]
 800e3be:	6022      	str	r2, [r4, #0]
 800e3c0:	d504      	bpl.n	800e3cc <__sflush_r+0x78>
 800e3c2:	1c42      	adds	r2, r0, #1
 800e3c4:	d101      	bne.n	800e3ca <__sflush_r+0x76>
 800e3c6:	682b      	ldr	r3, [r5, #0]
 800e3c8:	b903      	cbnz	r3, 800e3cc <__sflush_r+0x78>
 800e3ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3ce:	602f      	str	r7, [r5, #0]
 800e3d0:	b1b9      	cbz	r1, 800e402 <__sflush_r+0xae>
 800e3d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3d6:	4299      	cmp	r1, r3
 800e3d8:	d002      	beq.n	800e3e0 <__sflush_r+0x8c>
 800e3da:	4628      	mov	r0, r5
 800e3dc:	f7fe f822 	bl	800c424 <_free_r>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3e4:	e00d      	b.n	800e402 <__sflush_r+0xae>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	47b0      	blx	r6
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	1c50      	adds	r0, r2, #1
 800e3f0:	d1c9      	bne.n	800e386 <__sflush_r+0x32>
 800e3f2:	682b      	ldr	r3, [r5, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d0c6      	beq.n	800e386 <__sflush_r+0x32>
 800e3f8:	2b1d      	cmp	r3, #29
 800e3fa:	d001      	beq.n	800e400 <__sflush_r+0xac>
 800e3fc:	2b16      	cmp	r3, #22
 800e3fe:	d11e      	bne.n	800e43e <__sflush_r+0xea>
 800e400:	602f      	str	r7, [r5, #0]
 800e402:	2000      	movs	r0, #0
 800e404:	e022      	b.n	800e44c <__sflush_r+0xf8>
 800e406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e40a:	b21b      	sxth	r3, r3
 800e40c:	e01b      	b.n	800e446 <__sflush_r+0xf2>
 800e40e:	690f      	ldr	r7, [r1, #16]
 800e410:	2f00      	cmp	r7, #0
 800e412:	d0f6      	beq.n	800e402 <__sflush_r+0xae>
 800e414:	0793      	lsls	r3, r2, #30
 800e416:	680e      	ldr	r6, [r1, #0]
 800e418:	bf08      	it	eq
 800e41a:	694b      	ldreq	r3, [r1, #20]
 800e41c:	600f      	str	r7, [r1, #0]
 800e41e:	bf18      	it	ne
 800e420:	2300      	movne	r3, #0
 800e422:	eba6 0807 	sub.w	r8, r6, r7
 800e426:	608b      	str	r3, [r1, #8]
 800e428:	f1b8 0f00 	cmp.w	r8, #0
 800e42c:	dde9      	ble.n	800e402 <__sflush_r+0xae>
 800e42e:	6a21      	ldr	r1, [r4, #32]
 800e430:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e432:	4643      	mov	r3, r8
 800e434:	463a      	mov	r2, r7
 800e436:	4628      	mov	r0, r5
 800e438:	47b0      	blx	r6
 800e43a:	2800      	cmp	r0, #0
 800e43c:	dc08      	bgt.n	800e450 <__sflush_r+0xfc>
 800e43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e446:	81a3      	strh	r3, [r4, #12]
 800e448:	f04f 30ff 	mov.w	r0, #4294967295
 800e44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e450:	4407      	add	r7, r0
 800e452:	eba8 0800 	sub.w	r8, r8, r0
 800e456:	e7e7      	b.n	800e428 <__sflush_r+0xd4>
 800e458:	20400001 	.word	0x20400001

0800e45c <_fflush_r>:
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	690b      	ldr	r3, [r1, #16]
 800e460:	4605      	mov	r5, r0
 800e462:	460c      	mov	r4, r1
 800e464:	b913      	cbnz	r3, 800e46c <_fflush_r+0x10>
 800e466:	2500      	movs	r5, #0
 800e468:	4628      	mov	r0, r5
 800e46a:	bd38      	pop	{r3, r4, r5, pc}
 800e46c:	b118      	cbz	r0, 800e476 <_fflush_r+0x1a>
 800e46e:	6a03      	ldr	r3, [r0, #32]
 800e470:	b90b      	cbnz	r3, 800e476 <_fflush_r+0x1a>
 800e472:	f7fd fd3b 	bl	800beec <__sinit>
 800e476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d0f3      	beq.n	800e466 <_fflush_r+0xa>
 800e47e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e480:	07d0      	lsls	r0, r2, #31
 800e482:	d404      	bmi.n	800e48e <_fflush_r+0x32>
 800e484:	0599      	lsls	r1, r3, #22
 800e486:	d402      	bmi.n	800e48e <_fflush_r+0x32>
 800e488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e48a:	f7fd ffac 	bl	800c3e6 <__retarget_lock_acquire_recursive>
 800e48e:	4628      	mov	r0, r5
 800e490:	4621      	mov	r1, r4
 800e492:	f7ff ff5f 	bl	800e354 <__sflush_r>
 800e496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e498:	07da      	lsls	r2, r3, #31
 800e49a:	4605      	mov	r5, r0
 800e49c:	d4e4      	bmi.n	800e468 <_fflush_r+0xc>
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	059b      	lsls	r3, r3, #22
 800e4a2:	d4e1      	bmi.n	800e468 <_fflush_r+0xc>
 800e4a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4a6:	f7fd ff9f 	bl	800c3e8 <__retarget_lock_release_recursive>
 800e4aa:	e7dd      	b.n	800e468 <_fflush_r+0xc>

0800e4ac <__swhatbuf_r>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4b4:	2900      	cmp	r1, #0
 800e4b6:	b096      	sub	sp, #88	@ 0x58
 800e4b8:	4615      	mov	r5, r2
 800e4ba:	461e      	mov	r6, r3
 800e4bc:	da0d      	bge.n	800e4da <__swhatbuf_r+0x2e>
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e4c4:	f04f 0100 	mov.w	r1, #0
 800e4c8:	bf14      	ite	ne
 800e4ca:	2340      	movne	r3, #64	@ 0x40
 800e4cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	6031      	str	r1, [r6, #0]
 800e4d4:	602b      	str	r3, [r5, #0]
 800e4d6:	b016      	add	sp, #88	@ 0x58
 800e4d8:	bd70      	pop	{r4, r5, r6, pc}
 800e4da:	466a      	mov	r2, sp
 800e4dc:	f000 f8d6 	bl	800e68c <_fstat_r>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	dbec      	blt.n	800e4be <__swhatbuf_r+0x12>
 800e4e4:	9901      	ldr	r1, [sp, #4]
 800e4e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4ee:	4259      	negs	r1, r3
 800e4f0:	4159      	adcs	r1, r3
 800e4f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4f6:	e7eb      	b.n	800e4d0 <__swhatbuf_r+0x24>

0800e4f8 <__smakebuf_r>:
 800e4f8:	898b      	ldrh	r3, [r1, #12]
 800e4fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4fc:	079d      	lsls	r5, r3, #30
 800e4fe:	4606      	mov	r6, r0
 800e500:	460c      	mov	r4, r1
 800e502:	d507      	bpl.n	800e514 <__smakebuf_r+0x1c>
 800e504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e508:	6023      	str	r3, [r4, #0]
 800e50a:	6123      	str	r3, [r4, #16]
 800e50c:	2301      	movs	r3, #1
 800e50e:	6163      	str	r3, [r4, #20]
 800e510:	b003      	add	sp, #12
 800e512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e514:	ab01      	add	r3, sp, #4
 800e516:	466a      	mov	r2, sp
 800e518:	f7ff ffc8 	bl	800e4ac <__swhatbuf_r>
 800e51c:	9f00      	ldr	r7, [sp, #0]
 800e51e:	4605      	mov	r5, r0
 800e520:	4639      	mov	r1, r7
 800e522:	4630      	mov	r0, r6
 800e524:	f7fc fafe 	bl	800ab24 <_malloc_r>
 800e528:	b948      	cbnz	r0, 800e53e <__smakebuf_r+0x46>
 800e52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e52e:	059a      	lsls	r2, r3, #22
 800e530:	d4ee      	bmi.n	800e510 <__smakebuf_r+0x18>
 800e532:	f023 0303 	bic.w	r3, r3, #3
 800e536:	f043 0302 	orr.w	r3, r3, #2
 800e53a:	81a3      	strh	r3, [r4, #12]
 800e53c:	e7e2      	b.n	800e504 <__smakebuf_r+0xc>
 800e53e:	89a3      	ldrh	r3, [r4, #12]
 800e540:	6020      	str	r0, [r4, #0]
 800e542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e546:	81a3      	strh	r3, [r4, #12]
 800e548:	9b01      	ldr	r3, [sp, #4]
 800e54a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e54e:	b15b      	cbz	r3, 800e568 <__smakebuf_r+0x70>
 800e550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e554:	4630      	mov	r0, r6
 800e556:	f000 f8ab 	bl	800e6b0 <_isatty_r>
 800e55a:	b128      	cbz	r0, 800e568 <__smakebuf_r+0x70>
 800e55c:	89a3      	ldrh	r3, [r4, #12]
 800e55e:	f023 0303 	bic.w	r3, r3, #3
 800e562:	f043 0301 	orr.w	r3, r3, #1
 800e566:	81a3      	strh	r3, [r4, #12]
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	431d      	orrs	r5, r3
 800e56c:	81a5      	strh	r5, [r4, #12]
 800e56e:	e7cf      	b.n	800e510 <__smakebuf_r+0x18>

0800e570 <__sccl>:
 800e570:	b570      	push	{r4, r5, r6, lr}
 800e572:	780b      	ldrb	r3, [r1, #0]
 800e574:	4604      	mov	r4, r0
 800e576:	2b5e      	cmp	r3, #94	@ 0x5e
 800e578:	bf0b      	itete	eq
 800e57a:	784b      	ldrbeq	r3, [r1, #1]
 800e57c:	1c4a      	addne	r2, r1, #1
 800e57e:	1c8a      	addeq	r2, r1, #2
 800e580:	2100      	movne	r1, #0
 800e582:	bf08      	it	eq
 800e584:	2101      	moveq	r1, #1
 800e586:	3801      	subs	r0, #1
 800e588:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e58c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e590:	42a8      	cmp	r0, r5
 800e592:	d1fb      	bne.n	800e58c <__sccl+0x1c>
 800e594:	b90b      	cbnz	r3, 800e59a <__sccl+0x2a>
 800e596:	1e50      	subs	r0, r2, #1
 800e598:	bd70      	pop	{r4, r5, r6, pc}
 800e59a:	f081 0101 	eor.w	r1, r1, #1
 800e59e:	54e1      	strb	r1, [r4, r3]
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e5a8:	2d2d      	cmp	r5, #45	@ 0x2d
 800e5aa:	d005      	beq.n	800e5b8 <__sccl+0x48>
 800e5ac:	2d5d      	cmp	r5, #93	@ 0x5d
 800e5ae:	d016      	beq.n	800e5de <__sccl+0x6e>
 800e5b0:	2d00      	cmp	r5, #0
 800e5b2:	d0f1      	beq.n	800e598 <__sccl+0x28>
 800e5b4:	462b      	mov	r3, r5
 800e5b6:	e7f2      	b.n	800e59e <__sccl+0x2e>
 800e5b8:	7846      	ldrb	r6, [r0, #1]
 800e5ba:	2e5d      	cmp	r6, #93	@ 0x5d
 800e5bc:	d0fa      	beq.n	800e5b4 <__sccl+0x44>
 800e5be:	42b3      	cmp	r3, r6
 800e5c0:	dcf8      	bgt.n	800e5b4 <__sccl+0x44>
 800e5c2:	3002      	adds	r0, #2
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	3201      	adds	r2, #1
 800e5c8:	4296      	cmp	r6, r2
 800e5ca:	54a1      	strb	r1, [r4, r2]
 800e5cc:	dcfb      	bgt.n	800e5c6 <__sccl+0x56>
 800e5ce:	1af2      	subs	r2, r6, r3
 800e5d0:	3a01      	subs	r2, #1
 800e5d2:	1c5d      	adds	r5, r3, #1
 800e5d4:	42b3      	cmp	r3, r6
 800e5d6:	bfa8      	it	ge
 800e5d8:	2200      	movge	r2, #0
 800e5da:	18ab      	adds	r3, r5, r2
 800e5dc:	e7e1      	b.n	800e5a2 <__sccl+0x32>
 800e5de:	4610      	mov	r0, r2
 800e5e0:	e7da      	b.n	800e598 <__sccl+0x28>

0800e5e2 <__submore>:
 800e5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e5ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5ee:	4299      	cmp	r1, r3
 800e5f0:	d11d      	bne.n	800e62e <__submore+0x4c>
 800e5f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e5f6:	f7fc fa95 	bl	800ab24 <_malloc_r>
 800e5fa:	b918      	cbnz	r0, 800e604 <__submore+0x22>
 800e5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e608:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e60a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e60e:	6360      	str	r0, [r4, #52]	@ 0x34
 800e610:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e614:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e618:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e61c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e620:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e624:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e628:	6020      	str	r0, [r4, #0]
 800e62a:	2000      	movs	r0, #0
 800e62c:	e7e8      	b.n	800e600 <__submore+0x1e>
 800e62e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e630:	0077      	lsls	r7, r6, #1
 800e632:	463a      	mov	r2, r7
 800e634:	f7fc fb02 	bl	800ac3c <_realloc_r>
 800e638:	4605      	mov	r5, r0
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d0de      	beq.n	800e5fc <__submore+0x1a>
 800e63e:	eb00 0806 	add.w	r8, r0, r6
 800e642:	4601      	mov	r1, r0
 800e644:	4632      	mov	r2, r6
 800e646:	4640      	mov	r0, r8
 800e648:	f7fd fecf 	bl	800c3ea <memcpy>
 800e64c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e650:	f8c4 8000 	str.w	r8, [r4]
 800e654:	e7e9      	b.n	800e62a <__submore+0x48>

0800e656 <memmove>:
 800e656:	4288      	cmp	r0, r1
 800e658:	b510      	push	{r4, lr}
 800e65a:	eb01 0402 	add.w	r4, r1, r2
 800e65e:	d902      	bls.n	800e666 <memmove+0x10>
 800e660:	4284      	cmp	r4, r0
 800e662:	4623      	mov	r3, r4
 800e664:	d807      	bhi.n	800e676 <memmove+0x20>
 800e666:	1e43      	subs	r3, r0, #1
 800e668:	42a1      	cmp	r1, r4
 800e66a:	d008      	beq.n	800e67e <memmove+0x28>
 800e66c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e670:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e674:	e7f8      	b.n	800e668 <memmove+0x12>
 800e676:	4402      	add	r2, r0
 800e678:	4601      	mov	r1, r0
 800e67a:	428a      	cmp	r2, r1
 800e67c:	d100      	bne.n	800e680 <memmove+0x2a>
 800e67e:	bd10      	pop	{r4, pc}
 800e680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e684:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e688:	e7f7      	b.n	800e67a <memmove+0x24>
	...

0800e68c <_fstat_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	4d07      	ldr	r5, [pc, #28]	@ (800e6ac <_fstat_r+0x20>)
 800e690:	2300      	movs	r3, #0
 800e692:	4604      	mov	r4, r0
 800e694:	4608      	mov	r0, r1
 800e696:	4611      	mov	r1, r2
 800e698:	602b      	str	r3, [r5, #0]
 800e69a:	f7f6 fef3 	bl	8005484 <_fstat>
 800e69e:	1c43      	adds	r3, r0, #1
 800e6a0:	d102      	bne.n	800e6a8 <_fstat_r+0x1c>
 800e6a2:	682b      	ldr	r3, [r5, #0]
 800e6a4:	b103      	cbz	r3, 800e6a8 <_fstat_r+0x1c>
 800e6a6:	6023      	str	r3, [r4, #0]
 800e6a8:	bd38      	pop	{r3, r4, r5, pc}
 800e6aa:	bf00      	nop
 800e6ac:	20000b84 	.word	0x20000b84

0800e6b0 <_isatty_r>:
 800e6b0:	b538      	push	{r3, r4, r5, lr}
 800e6b2:	4d06      	ldr	r5, [pc, #24]	@ (800e6cc <_isatty_r+0x1c>)
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	602b      	str	r3, [r5, #0]
 800e6bc:	f7f6 fef2 	bl	80054a4 <_isatty>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_isatty_r+0x1a>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_isatty_r+0x1a>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	20000b84 	.word	0x20000b84

0800e6d0 <__assert_func>:
 800e6d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6d2:	4614      	mov	r4, r2
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	4b09      	ldr	r3, [pc, #36]	@ (800e6fc <__assert_func+0x2c>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4605      	mov	r5, r0
 800e6dc:	68d8      	ldr	r0, [r3, #12]
 800e6de:	b14c      	cbz	r4, 800e6f4 <__assert_func+0x24>
 800e6e0:	4b07      	ldr	r3, [pc, #28]	@ (800e700 <__assert_func+0x30>)
 800e6e2:	9100      	str	r1, [sp, #0]
 800e6e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6e8:	4906      	ldr	r1, [pc, #24]	@ (800e704 <__assert_func+0x34>)
 800e6ea:	462b      	mov	r3, r5
 800e6ec:	f000 f892 	bl	800e814 <fiprintf>
 800e6f0:	f000 f8a2 	bl	800e838 <abort>
 800e6f4:	4b04      	ldr	r3, [pc, #16]	@ (800e708 <__assert_func+0x38>)
 800e6f6:	461c      	mov	r4, r3
 800e6f8:	e7f3      	b.n	800e6e2 <__assert_func+0x12>
 800e6fa:	bf00      	nop
 800e6fc:	20000208 	.word	0x20000208
 800e700:	0800fd8e 	.word	0x0800fd8e
 800e704:	0800fd9b 	.word	0x0800fd9b
 800e708:	0800fdc9 	.word	0x0800fdc9

0800e70c <_calloc_r>:
 800e70c:	b570      	push	{r4, r5, r6, lr}
 800e70e:	fba1 5402 	umull	r5, r4, r1, r2
 800e712:	b934      	cbnz	r4, 800e722 <_calloc_r+0x16>
 800e714:	4629      	mov	r1, r5
 800e716:	f7fc fa05 	bl	800ab24 <_malloc_r>
 800e71a:	4606      	mov	r6, r0
 800e71c:	b928      	cbnz	r0, 800e72a <_calloc_r+0x1e>
 800e71e:	4630      	mov	r0, r6
 800e720:	bd70      	pop	{r4, r5, r6, pc}
 800e722:	220c      	movs	r2, #12
 800e724:	6002      	str	r2, [r0, #0]
 800e726:	2600      	movs	r6, #0
 800e728:	e7f9      	b.n	800e71e <_calloc_r+0x12>
 800e72a:	462a      	mov	r2, r5
 800e72c:	4621      	mov	r1, r4
 800e72e:	f7fd fdab 	bl	800c288 <memset>
 800e732:	e7f4      	b.n	800e71e <_calloc_r+0x12>

0800e734 <_strtoul_l.isra.0>:
 800e734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e738:	4e34      	ldr	r6, [pc, #208]	@ (800e80c <_strtoul_l.isra.0+0xd8>)
 800e73a:	4686      	mov	lr, r0
 800e73c:	460d      	mov	r5, r1
 800e73e:	4628      	mov	r0, r5
 800e740:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e744:	5d37      	ldrb	r7, [r6, r4]
 800e746:	f017 0708 	ands.w	r7, r7, #8
 800e74a:	d1f8      	bne.n	800e73e <_strtoul_l.isra.0+0xa>
 800e74c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e74e:	d110      	bne.n	800e772 <_strtoul_l.isra.0+0x3e>
 800e750:	782c      	ldrb	r4, [r5, #0]
 800e752:	2701      	movs	r7, #1
 800e754:	1c85      	adds	r5, r0, #2
 800e756:	f033 0010 	bics.w	r0, r3, #16
 800e75a:	d115      	bne.n	800e788 <_strtoul_l.isra.0+0x54>
 800e75c:	2c30      	cmp	r4, #48	@ 0x30
 800e75e:	d10d      	bne.n	800e77c <_strtoul_l.isra.0+0x48>
 800e760:	7828      	ldrb	r0, [r5, #0]
 800e762:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e766:	2858      	cmp	r0, #88	@ 0x58
 800e768:	d108      	bne.n	800e77c <_strtoul_l.isra.0+0x48>
 800e76a:	786c      	ldrb	r4, [r5, #1]
 800e76c:	3502      	adds	r5, #2
 800e76e:	2310      	movs	r3, #16
 800e770:	e00a      	b.n	800e788 <_strtoul_l.isra.0+0x54>
 800e772:	2c2b      	cmp	r4, #43	@ 0x2b
 800e774:	bf04      	itt	eq
 800e776:	782c      	ldrbeq	r4, [r5, #0]
 800e778:	1c85      	addeq	r5, r0, #2
 800e77a:	e7ec      	b.n	800e756 <_strtoul_l.isra.0+0x22>
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1f6      	bne.n	800e76e <_strtoul_l.isra.0+0x3a>
 800e780:	2c30      	cmp	r4, #48	@ 0x30
 800e782:	bf14      	ite	ne
 800e784:	230a      	movne	r3, #10
 800e786:	2308      	moveq	r3, #8
 800e788:	f04f 38ff 	mov.w	r8, #4294967295
 800e78c:	2600      	movs	r6, #0
 800e78e:	fbb8 f8f3 	udiv	r8, r8, r3
 800e792:	fb03 f908 	mul.w	r9, r3, r8
 800e796:	ea6f 0909 	mvn.w	r9, r9
 800e79a:	4630      	mov	r0, r6
 800e79c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e7a0:	f1bc 0f09 	cmp.w	ip, #9
 800e7a4:	d810      	bhi.n	800e7c8 <_strtoul_l.isra.0+0x94>
 800e7a6:	4664      	mov	r4, ip
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	dd1e      	ble.n	800e7ea <_strtoul_l.isra.0+0xb6>
 800e7ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e7b0:	d007      	beq.n	800e7c2 <_strtoul_l.isra.0+0x8e>
 800e7b2:	4580      	cmp	r8, r0
 800e7b4:	d316      	bcc.n	800e7e4 <_strtoul_l.isra.0+0xb0>
 800e7b6:	d101      	bne.n	800e7bc <_strtoul_l.isra.0+0x88>
 800e7b8:	45a1      	cmp	r9, r4
 800e7ba:	db13      	blt.n	800e7e4 <_strtoul_l.isra.0+0xb0>
 800e7bc:	fb00 4003 	mla	r0, r0, r3, r4
 800e7c0:	2601      	movs	r6, #1
 800e7c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7c6:	e7e9      	b.n	800e79c <_strtoul_l.isra.0+0x68>
 800e7c8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e7cc:	f1bc 0f19 	cmp.w	ip, #25
 800e7d0:	d801      	bhi.n	800e7d6 <_strtoul_l.isra.0+0xa2>
 800e7d2:	3c37      	subs	r4, #55	@ 0x37
 800e7d4:	e7e8      	b.n	800e7a8 <_strtoul_l.isra.0+0x74>
 800e7d6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e7da:	f1bc 0f19 	cmp.w	ip, #25
 800e7de:	d804      	bhi.n	800e7ea <_strtoul_l.isra.0+0xb6>
 800e7e0:	3c57      	subs	r4, #87	@ 0x57
 800e7e2:	e7e1      	b.n	800e7a8 <_strtoul_l.isra.0+0x74>
 800e7e4:	f04f 36ff 	mov.w	r6, #4294967295
 800e7e8:	e7eb      	b.n	800e7c2 <_strtoul_l.isra.0+0x8e>
 800e7ea:	1c73      	adds	r3, r6, #1
 800e7ec:	d106      	bne.n	800e7fc <_strtoul_l.isra.0+0xc8>
 800e7ee:	2322      	movs	r3, #34	@ 0x22
 800e7f0:	f8ce 3000 	str.w	r3, [lr]
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	b932      	cbnz	r2, 800e806 <_strtoul_l.isra.0+0xd2>
 800e7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7fc:	b107      	cbz	r7, 800e800 <_strtoul_l.isra.0+0xcc>
 800e7fe:	4240      	negs	r0, r0
 800e800:	2a00      	cmp	r2, #0
 800e802:	d0f9      	beq.n	800e7f8 <_strtoul_l.isra.0+0xc4>
 800e804:	b106      	cbz	r6, 800e808 <_strtoul_l.isra.0+0xd4>
 800e806:	1e69      	subs	r1, r5, #1
 800e808:	6011      	str	r1, [r2, #0]
 800e80a:	e7f5      	b.n	800e7f8 <_strtoul_l.isra.0+0xc4>
 800e80c:	0800fe21 	.word	0x0800fe21

0800e810 <_strtoul_r>:
 800e810:	f7ff bf90 	b.w	800e734 <_strtoul_l.isra.0>

0800e814 <fiprintf>:
 800e814:	b40e      	push	{r1, r2, r3}
 800e816:	b503      	push	{r0, r1, lr}
 800e818:	4601      	mov	r1, r0
 800e81a:	ab03      	add	r3, sp, #12
 800e81c:	4805      	ldr	r0, [pc, #20]	@ (800e834 <fiprintf+0x20>)
 800e81e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e822:	6800      	ldr	r0, [r0, #0]
 800e824:	9301      	str	r3, [sp, #4]
 800e826:	f7ff f9a3 	bl	800db70 <_vfiprintf_r>
 800e82a:	b002      	add	sp, #8
 800e82c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e830:	b003      	add	sp, #12
 800e832:	4770      	bx	lr
 800e834:	20000208 	.word	0x20000208

0800e838 <abort>:
 800e838:	b508      	push	{r3, lr}
 800e83a:	2006      	movs	r0, #6
 800e83c:	f000 f82c 	bl	800e898 <raise>
 800e840:	2001      	movs	r0, #1
 800e842:	f7f6 fdcf 	bl	80053e4 <_exit>

0800e846 <_raise_r>:
 800e846:	291f      	cmp	r1, #31
 800e848:	b538      	push	{r3, r4, r5, lr}
 800e84a:	4605      	mov	r5, r0
 800e84c:	460c      	mov	r4, r1
 800e84e:	d904      	bls.n	800e85a <_raise_r+0x14>
 800e850:	2316      	movs	r3, #22
 800e852:	6003      	str	r3, [r0, #0]
 800e854:	f04f 30ff 	mov.w	r0, #4294967295
 800e858:	bd38      	pop	{r3, r4, r5, pc}
 800e85a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e85c:	b112      	cbz	r2, 800e864 <_raise_r+0x1e>
 800e85e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e862:	b94b      	cbnz	r3, 800e878 <_raise_r+0x32>
 800e864:	4628      	mov	r0, r5
 800e866:	f000 f831 	bl	800e8cc <_getpid_r>
 800e86a:	4622      	mov	r2, r4
 800e86c:	4601      	mov	r1, r0
 800e86e:	4628      	mov	r0, r5
 800e870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e874:	f000 b818 	b.w	800e8a8 <_kill_r>
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d00a      	beq.n	800e892 <_raise_r+0x4c>
 800e87c:	1c59      	adds	r1, r3, #1
 800e87e:	d103      	bne.n	800e888 <_raise_r+0x42>
 800e880:	2316      	movs	r3, #22
 800e882:	6003      	str	r3, [r0, #0]
 800e884:	2001      	movs	r0, #1
 800e886:	e7e7      	b.n	800e858 <_raise_r+0x12>
 800e888:	2100      	movs	r1, #0
 800e88a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e88e:	4620      	mov	r0, r4
 800e890:	4798      	blx	r3
 800e892:	2000      	movs	r0, #0
 800e894:	e7e0      	b.n	800e858 <_raise_r+0x12>
	...

0800e898 <raise>:
 800e898:	4b02      	ldr	r3, [pc, #8]	@ (800e8a4 <raise+0xc>)
 800e89a:	4601      	mov	r1, r0
 800e89c:	6818      	ldr	r0, [r3, #0]
 800e89e:	f7ff bfd2 	b.w	800e846 <_raise_r>
 800e8a2:	bf00      	nop
 800e8a4:	20000208 	.word	0x20000208

0800e8a8 <_kill_r>:
 800e8a8:	b538      	push	{r3, r4, r5, lr}
 800e8aa:	4d07      	ldr	r5, [pc, #28]	@ (800e8c8 <_kill_r+0x20>)
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	4608      	mov	r0, r1
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	602b      	str	r3, [r5, #0]
 800e8b6:	f7f6 fd85 	bl	80053c4 <_kill>
 800e8ba:	1c43      	adds	r3, r0, #1
 800e8bc:	d102      	bne.n	800e8c4 <_kill_r+0x1c>
 800e8be:	682b      	ldr	r3, [r5, #0]
 800e8c0:	b103      	cbz	r3, 800e8c4 <_kill_r+0x1c>
 800e8c2:	6023      	str	r3, [r4, #0]
 800e8c4:	bd38      	pop	{r3, r4, r5, pc}
 800e8c6:	bf00      	nop
 800e8c8:	20000b84 	.word	0x20000b84

0800e8cc <_getpid_r>:
 800e8cc:	f7f6 bd72 	b.w	80053b4 <_getpid>

0800e8d0 <cos>:
 800e8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8d2:	ec53 2b10 	vmov	r2, r3, d0
 800e8d6:	4826      	ldr	r0, [pc, #152]	@ (800e970 <cos+0xa0>)
 800e8d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e8dc:	4281      	cmp	r1, r0
 800e8de:	d806      	bhi.n	800e8ee <cos+0x1e>
 800e8e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e968 <cos+0x98>
 800e8e4:	b005      	add	sp, #20
 800e8e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8ea:	f000 b899 	b.w	800ea20 <__kernel_cos>
 800e8ee:	4821      	ldr	r0, [pc, #132]	@ (800e974 <cos+0xa4>)
 800e8f0:	4281      	cmp	r1, r0
 800e8f2:	d908      	bls.n	800e906 <cos+0x36>
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	f7f1 fcc6 	bl	8000288 <__aeabi_dsub>
 800e8fc:	ec41 0b10 	vmov	d0, r0, r1
 800e900:	b005      	add	sp, #20
 800e902:	f85d fb04 	ldr.w	pc, [sp], #4
 800e906:	4668      	mov	r0, sp
 800e908:	f000 fa0e 	bl	800ed28 <__ieee754_rem_pio2>
 800e90c:	f000 0003 	and.w	r0, r0, #3
 800e910:	2801      	cmp	r0, #1
 800e912:	d00b      	beq.n	800e92c <cos+0x5c>
 800e914:	2802      	cmp	r0, #2
 800e916:	d015      	beq.n	800e944 <cos+0x74>
 800e918:	b9d8      	cbnz	r0, 800e952 <cos+0x82>
 800e91a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e91e:	ed9d 0b00 	vldr	d0, [sp]
 800e922:	f000 f87d 	bl	800ea20 <__kernel_cos>
 800e926:	ec51 0b10 	vmov	r0, r1, d0
 800e92a:	e7e7      	b.n	800e8fc <cos+0x2c>
 800e92c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e930:	ed9d 0b00 	vldr	d0, [sp]
 800e934:	f000 f93c 	bl	800ebb0 <__kernel_sin>
 800e938:	ec53 2b10 	vmov	r2, r3, d0
 800e93c:	4610      	mov	r0, r2
 800e93e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e942:	e7db      	b.n	800e8fc <cos+0x2c>
 800e944:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e948:	ed9d 0b00 	vldr	d0, [sp]
 800e94c:	f000 f868 	bl	800ea20 <__kernel_cos>
 800e950:	e7f2      	b.n	800e938 <cos+0x68>
 800e952:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e956:	ed9d 0b00 	vldr	d0, [sp]
 800e95a:	2001      	movs	r0, #1
 800e95c:	f000 f928 	bl	800ebb0 <__kernel_sin>
 800e960:	e7e1      	b.n	800e926 <cos+0x56>
 800e962:	bf00      	nop
 800e964:	f3af 8000 	nop.w
	...
 800e970:	3fe921fb 	.word	0x3fe921fb
 800e974:	7fefffff 	.word	0x7fefffff

0800e978 <sin>:
 800e978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e97a:	ec53 2b10 	vmov	r2, r3, d0
 800e97e:	4826      	ldr	r0, [pc, #152]	@ (800ea18 <sin+0xa0>)
 800e980:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e984:	4281      	cmp	r1, r0
 800e986:	d807      	bhi.n	800e998 <sin+0x20>
 800e988:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ea10 <sin+0x98>
 800e98c:	2000      	movs	r0, #0
 800e98e:	b005      	add	sp, #20
 800e990:	f85d eb04 	ldr.w	lr, [sp], #4
 800e994:	f000 b90c 	b.w	800ebb0 <__kernel_sin>
 800e998:	4820      	ldr	r0, [pc, #128]	@ (800ea1c <sin+0xa4>)
 800e99a:	4281      	cmp	r1, r0
 800e99c:	d908      	bls.n	800e9b0 <sin+0x38>
 800e99e:	4610      	mov	r0, r2
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	f7f1 fc71 	bl	8000288 <__aeabi_dsub>
 800e9a6:	ec41 0b10 	vmov	d0, r0, r1
 800e9aa:	b005      	add	sp, #20
 800e9ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9b0:	4668      	mov	r0, sp
 800e9b2:	f000 f9b9 	bl	800ed28 <__ieee754_rem_pio2>
 800e9b6:	f000 0003 	and.w	r0, r0, #3
 800e9ba:	2801      	cmp	r0, #1
 800e9bc:	d00c      	beq.n	800e9d8 <sin+0x60>
 800e9be:	2802      	cmp	r0, #2
 800e9c0:	d011      	beq.n	800e9e6 <sin+0x6e>
 800e9c2:	b9e8      	cbnz	r0, 800ea00 <sin+0x88>
 800e9c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9c8:	ed9d 0b00 	vldr	d0, [sp]
 800e9cc:	2001      	movs	r0, #1
 800e9ce:	f000 f8ef 	bl	800ebb0 <__kernel_sin>
 800e9d2:	ec51 0b10 	vmov	r0, r1, d0
 800e9d6:	e7e6      	b.n	800e9a6 <sin+0x2e>
 800e9d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9dc:	ed9d 0b00 	vldr	d0, [sp]
 800e9e0:	f000 f81e 	bl	800ea20 <__kernel_cos>
 800e9e4:	e7f5      	b.n	800e9d2 <sin+0x5a>
 800e9e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9ea:	ed9d 0b00 	vldr	d0, [sp]
 800e9ee:	2001      	movs	r0, #1
 800e9f0:	f000 f8de 	bl	800ebb0 <__kernel_sin>
 800e9f4:	ec53 2b10 	vmov	r2, r3, d0
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e9fe:	e7d2      	b.n	800e9a6 <sin+0x2e>
 800ea00:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea04:	ed9d 0b00 	vldr	d0, [sp]
 800ea08:	f000 f80a 	bl	800ea20 <__kernel_cos>
 800ea0c:	e7f2      	b.n	800e9f4 <sin+0x7c>
 800ea0e:	bf00      	nop
	...
 800ea18:	3fe921fb 	.word	0x3fe921fb
 800ea1c:	7fefffff 	.word	0x7fefffff

0800ea20 <__kernel_cos>:
 800ea20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea24:	ec57 6b10 	vmov	r6, r7, d0
 800ea28:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ea2c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800ea30:	ed8d 1b00 	vstr	d1, [sp]
 800ea34:	d206      	bcs.n	800ea44 <__kernel_cos+0x24>
 800ea36:	4630      	mov	r0, r6
 800ea38:	4639      	mov	r1, r7
 800ea3a:	f7f2 f88d 	bl	8000b58 <__aeabi_d2iz>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	f000 8088 	beq.w	800eb54 <__kernel_cos+0x134>
 800ea44:	4632      	mov	r2, r6
 800ea46:	463b      	mov	r3, r7
 800ea48:	4630      	mov	r0, r6
 800ea4a:	4639      	mov	r1, r7
 800ea4c:	f7f1 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ea50:	4b51      	ldr	r3, [pc, #324]	@ (800eb98 <__kernel_cos+0x178>)
 800ea52:	2200      	movs	r2, #0
 800ea54:	4604      	mov	r4, r0
 800ea56:	460d      	mov	r5, r1
 800ea58:	f7f1 fdce 	bl	80005f8 <__aeabi_dmul>
 800ea5c:	a340      	add	r3, pc, #256	@ (adr r3, 800eb60 <__kernel_cos+0x140>)
 800ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea62:	4682      	mov	sl, r0
 800ea64:	468b      	mov	fp, r1
 800ea66:	4620      	mov	r0, r4
 800ea68:	4629      	mov	r1, r5
 800ea6a:	f7f1 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ea6e:	a33e      	add	r3, pc, #248	@ (adr r3, 800eb68 <__kernel_cos+0x148>)
 800ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea74:	f7f1 fc0a 	bl	800028c <__adddf3>
 800ea78:	4622      	mov	r2, r4
 800ea7a:	462b      	mov	r3, r5
 800ea7c:	f7f1 fdbc 	bl	80005f8 <__aeabi_dmul>
 800ea80:	a33b      	add	r3, pc, #236	@ (adr r3, 800eb70 <__kernel_cos+0x150>)
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f7f1 fbff 	bl	8000288 <__aeabi_dsub>
 800ea8a:	4622      	mov	r2, r4
 800ea8c:	462b      	mov	r3, r5
 800ea8e:	f7f1 fdb3 	bl	80005f8 <__aeabi_dmul>
 800ea92:	a339      	add	r3, pc, #228	@ (adr r3, 800eb78 <__kernel_cos+0x158>)
 800ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea98:	f7f1 fbf8 	bl	800028c <__adddf3>
 800ea9c:	4622      	mov	r2, r4
 800ea9e:	462b      	mov	r3, r5
 800eaa0:	f7f1 fdaa 	bl	80005f8 <__aeabi_dmul>
 800eaa4:	a336      	add	r3, pc, #216	@ (adr r3, 800eb80 <__kernel_cos+0x160>)
 800eaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaaa:	f7f1 fbed 	bl	8000288 <__aeabi_dsub>
 800eaae:	4622      	mov	r2, r4
 800eab0:	462b      	mov	r3, r5
 800eab2:	f7f1 fda1 	bl	80005f8 <__aeabi_dmul>
 800eab6:	a334      	add	r3, pc, #208	@ (adr r3, 800eb88 <__kernel_cos+0x168>)
 800eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabc:	f7f1 fbe6 	bl	800028c <__adddf3>
 800eac0:	4622      	mov	r2, r4
 800eac2:	462b      	mov	r3, r5
 800eac4:	f7f1 fd98 	bl	80005f8 <__aeabi_dmul>
 800eac8:	4622      	mov	r2, r4
 800eaca:	462b      	mov	r3, r5
 800eacc:	f7f1 fd94 	bl	80005f8 <__aeabi_dmul>
 800ead0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ead4:	4604      	mov	r4, r0
 800ead6:	460d      	mov	r5, r1
 800ead8:	4630      	mov	r0, r6
 800eada:	4639      	mov	r1, r7
 800eadc:	f7f1 fd8c 	bl	80005f8 <__aeabi_dmul>
 800eae0:	460b      	mov	r3, r1
 800eae2:	4602      	mov	r2, r0
 800eae4:	4629      	mov	r1, r5
 800eae6:	4620      	mov	r0, r4
 800eae8:	f7f1 fbce 	bl	8000288 <__aeabi_dsub>
 800eaec:	4b2b      	ldr	r3, [pc, #172]	@ (800eb9c <__kernel_cos+0x17c>)
 800eaee:	4598      	cmp	r8, r3
 800eaf0:	4606      	mov	r6, r0
 800eaf2:	460f      	mov	r7, r1
 800eaf4:	d810      	bhi.n	800eb18 <__kernel_cos+0xf8>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	4650      	mov	r0, sl
 800eafc:	4659      	mov	r1, fp
 800eafe:	f7f1 fbc3 	bl	8000288 <__aeabi_dsub>
 800eb02:	460b      	mov	r3, r1
 800eb04:	4926      	ldr	r1, [pc, #152]	@ (800eba0 <__kernel_cos+0x180>)
 800eb06:	4602      	mov	r2, r0
 800eb08:	2000      	movs	r0, #0
 800eb0a:	f7f1 fbbd 	bl	8000288 <__aeabi_dsub>
 800eb0e:	ec41 0b10 	vmov	d0, r0, r1
 800eb12:	b003      	add	sp, #12
 800eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb18:	4b22      	ldr	r3, [pc, #136]	@ (800eba4 <__kernel_cos+0x184>)
 800eb1a:	4921      	ldr	r1, [pc, #132]	@ (800eba0 <__kernel_cos+0x180>)
 800eb1c:	4598      	cmp	r8, r3
 800eb1e:	bf8c      	ite	hi
 800eb20:	4d21      	ldrhi	r5, [pc, #132]	@ (800eba8 <__kernel_cos+0x188>)
 800eb22:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800eb26:	2400      	movs	r4, #0
 800eb28:	4622      	mov	r2, r4
 800eb2a:	462b      	mov	r3, r5
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	f7f1 fbab 	bl	8000288 <__aeabi_dsub>
 800eb32:	4622      	mov	r2, r4
 800eb34:	4680      	mov	r8, r0
 800eb36:	4689      	mov	r9, r1
 800eb38:	462b      	mov	r3, r5
 800eb3a:	4650      	mov	r0, sl
 800eb3c:	4659      	mov	r1, fp
 800eb3e:	f7f1 fba3 	bl	8000288 <__aeabi_dsub>
 800eb42:	4632      	mov	r2, r6
 800eb44:	463b      	mov	r3, r7
 800eb46:	f7f1 fb9f 	bl	8000288 <__aeabi_dsub>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	4640      	mov	r0, r8
 800eb50:	4649      	mov	r1, r9
 800eb52:	e7da      	b.n	800eb0a <__kernel_cos+0xea>
 800eb54:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800eb90 <__kernel_cos+0x170>
 800eb58:	e7db      	b.n	800eb12 <__kernel_cos+0xf2>
 800eb5a:	bf00      	nop
 800eb5c:	f3af 8000 	nop.w
 800eb60:	be8838d4 	.word	0xbe8838d4
 800eb64:	bda8fae9 	.word	0xbda8fae9
 800eb68:	bdb4b1c4 	.word	0xbdb4b1c4
 800eb6c:	3e21ee9e 	.word	0x3e21ee9e
 800eb70:	809c52ad 	.word	0x809c52ad
 800eb74:	3e927e4f 	.word	0x3e927e4f
 800eb78:	19cb1590 	.word	0x19cb1590
 800eb7c:	3efa01a0 	.word	0x3efa01a0
 800eb80:	16c15177 	.word	0x16c15177
 800eb84:	3f56c16c 	.word	0x3f56c16c
 800eb88:	5555554c 	.word	0x5555554c
 800eb8c:	3fa55555 	.word	0x3fa55555
 800eb90:	00000000 	.word	0x00000000
 800eb94:	3ff00000 	.word	0x3ff00000
 800eb98:	3fe00000 	.word	0x3fe00000
 800eb9c:	3fd33332 	.word	0x3fd33332
 800eba0:	3ff00000 	.word	0x3ff00000
 800eba4:	3fe90000 	.word	0x3fe90000
 800eba8:	3fd20000 	.word	0x3fd20000
 800ebac:	00000000 	.word	0x00000000

0800ebb0 <__kernel_sin>:
 800ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb4:	ec55 4b10 	vmov	r4, r5, d0
 800ebb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ebbc:	b085      	sub	sp, #20
 800ebbe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ebc2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ebc6:	4680      	mov	r8, r0
 800ebc8:	d205      	bcs.n	800ebd6 <__kernel_sin+0x26>
 800ebca:	4620      	mov	r0, r4
 800ebcc:	4629      	mov	r1, r5
 800ebce:	f7f1 ffc3 	bl	8000b58 <__aeabi_d2iz>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d052      	beq.n	800ec7c <__kernel_sin+0xcc>
 800ebd6:	4622      	mov	r2, r4
 800ebd8:	462b      	mov	r3, r5
 800ebda:	4620      	mov	r0, r4
 800ebdc:	4629      	mov	r1, r5
 800ebde:	f7f1 fd0b 	bl	80005f8 <__aeabi_dmul>
 800ebe2:	4682      	mov	sl, r0
 800ebe4:	468b      	mov	fp, r1
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	460b      	mov	r3, r1
 800ebea:	4620      	mov	r0, r4
 800ebec:	4629      	mov	r1, r5
 800ebee:	f7f1 fd03 	bl	80005f8 <__aeabi_dmul>
 800ebf2:	a342      	add	r3, pc, #264	@ (adr r3, 800ecfc <__kernel_sin+0x14c>)
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	e9cd 0100 	strd	r0, r1, [sp]
 800ebfc:	4650      	mov	r0, sl
 800ebfe:	4659      	mov	r1, fp
 800ec00:	f7f1 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ec04:	a33f      	add	r3, pc, #252	@ (adr r3, 800ed04 <__kernel_sin+0x154>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	f7f1 fb3d 	bl	8000288 <__aeabi_dsub>
 800ec0e:	4652      	mov	r2, sl
 800ec10:	465b      	mov	r3, fp
 800ec12:	f7f1 fcf1 	bl	80005f8 <__aeabi_dmul>
 800ec16:	a33d      	add	r3, pc, #244	@ (adr r3, 800ed0c <__kernel_sin+0x15c>)
 800ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1c:	f7f1 fb36 	bl	800028c <__adddf3>
 800ec20:	4652      	mov	r2, sl
 800ec22:	465b      	mov	r3, fp
 800ec24:	f7f1 fce8 	bl	80005f8 <__aeabi_dmul>
 800ec28:	a33a      	add	r3, pc, #232	@ (adr r3, 800ed14 <__kernel_sin+0x164>)
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	f7f1 fb2b 	bl	8000288 <__aeabi_dsub>
 800ec32:	4652      	mov	r2, sl
 800ec34:	465b      	mov	r3, fp
 800ec36:	f7f1 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ec3a:	a338      	add	r3, pc, #224	@ (adr r3, 800ed1c <__kernel_sin+0x16c>)
 800ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec40:	f7f1 fb24 	bl	800028c <__adddf3>
 800ec44:	4606      	mov	r6, r0
 800ec46:	460f      	mov	r7, r1
 800ec48:	f1b8 0f00 	cmp.w	r8, #0
 800ec4c:	d11b      	bne.n	800ec86 <__kernel_sin+0xd6>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4650      	mov	r0, sl
 800ec54:	4659      	mov	r1, fp
 800ec56:	f7f1 fccf 	bl	80005f8 <__aeabi_dmul>
 800ec5a:	a325      	add	r3, pc, #148	@ (adr r3, 800ecf0 <__kernel_sin+0x140>)
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	f7f1 fb12 	bl	8000288 <__aeabi_dsub>
 800ec64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec68:	f7f1 fcc6 	bl	80005f8 <__aeabi_dmul>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	460b      	mov	r3, r1
 800ec70:	4620      	mov	r0, r4
 800ec72:	4629      	mov	r1, r5
 800ec74:	f7f1 fb0a 	bl	800028c <__adddf3>
 800ec78:	4604      	mov	r4, r0
 800ec7a:	460d      	mov	r5, r1
 800ec7c:	ec45 4b10 	vmov	d0, r4, r5
 800ec80:	b005      	add	sp, #20
 800ec82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec8a:	4b1b      	ldr	r3, [pc, #108]	@ (800ecf8 <__kernel_sin+0x148>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f7f1 fcb3 	bl	80005f8 <__aeabi_dmul>
 800ec92:	4632      	mov	r2, r6
 800ec94:	4680      	mov	r8, r0
 800ec96:	4689      	mov	r9, r1
 800ec98:	463b      	mov	r3, r7
 800ec9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec9e:	f7f1 fcab 	bl	80005f8 <__aeabi_dmul>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	4640      	mov	r0, r8
 800eca8:	4649      	mov	r1, r9
 800ecaa:	f7f1 faed 	bl	8000288 <__aeabi_dsub>
 800ecae:	4652      	mov	r2, sl
 800ecb0:	465b      	mov	r3, fp
 800ecb2:	f7f1 fca1 	bl	80005f8 <__aeabi_dmul>
 800ecb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecba:	f7f1 fae5 	bl	8000288 <__aeabi_dsub>
 800ecbe:	a30c      	add	r3, pc, #48	@ (adr r3, 800ecf0 <__kernel_sin+0x140>)
 800ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	460f      	mov	r7, r1
 800ecc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eccc:	f7f1 fc94 	bl	80005f8 <__aeabi_dmul>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	4639      	mov	r1, r7
 800ecd8:	f7f1 fad8 	bl	800028c <__adddf3>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	460b      	mov	r3, r1
 800ece0:	4620      	mov	r0, r4
 800ece2:	4629      	mov	r1, r5
 800ece4:	f7f1 fad0 	bl	8000288 <__aeabi_dsub>
 800ece8:	e7c6      	b.n	800ec78 <__kernel_sin+0xc8>
 800ecea:	bf00      	nop
 800ecec:	f3af 8000 	nop.w
 800ecf0:	55555549 	.word	0x55555549
 800ecf4:	3fc55555 	.word	0x3fc55555
 800ecf8:	3fe00000 	.word	0x3fe00000
 800ecfc:	5acfd57c 	.word	0x5acfd57c
 800ed00:	3de5d93a 	.word	0x3de5d93a
 800ed04:	8a2b9ceb 	.word	0x8a2b9ceb
 800ed08:	3e5ae5e6 	.word	0x3e5ae5e6
 800ed0c:	57b1fe7d 	.word	0x57b1fe7d
 800ed10:	3ec71de3 	.word	0x3ec71de3
 800ed14:	19c161d5 	.word	0x19c161d5
 800ed18:	3f2a01a0 	.word	0x3f2a01a0
 800ed1c:	1110f8a6 	.word	0x1110f8a6
 800ed20:	3f811111 	.word	0x3f811111
 800ed24:	00000000 	.word	0x00000000

0800ed28 <__ieee754_rem_pio2>:
 800ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	ec57 6b10 	vmov	r6, r7, d0
 800ed30:	4bc5      	ldr	r3, [pc, #788]	@ (800f048 <__ieee754_rem_pio2+0x320>)
 800ed32:	b08d      	sub	sp, #52	@ 0x34
 800ed34:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ed38:	4598      	cmp	r8, r3
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	9704      	str	r7, [sp, #16]
 800ed3e:	d807      	bhi.n	800ed50 <__ieee754_rem_pio2+0x28>
 800ed40:	2200      	movs	r2, #0
 800ed42:	2300      	movs	r3, #0
 800ed44:	ed80 0b00 	vstr	d0, [r0]
 800ed48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ed4c:	2500      	movs	r5, #0
 800ed4e:	e028      	b.n	800eda2 <__ieee754_rem_pio2+0x7a>
 800ed50:	4bbe      	ldr	r3, [pc, #760]	@ (800f04c <__ieee754_rem_pio2+0x324>)
 800ed52:	4598      	cmp	r8, r3
 800ed54:	d878      	bhi.n	800ee48 <__ieee754_rem_pio2+0x120>
 800ed56:	9b04      	ldr	r3, [sp, #16]
 800ed58:	4dbd      	ldr	r5, [pc, #756]	@ (800f050 <__ieee754_rem_pio2+0x328>)
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f010 <__ieee754_rem_pio2+0x2e8>)
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	4639      	mov	r1, r7
 800ed66:	dd38      	ble.n	800edda <__ieee754_rem_pio2+0xb2>
 800ed68:	f7f1 fa8e 	bl	8000288 <__aeabi_dsub>
 800ed6c:	45a8      	cmp	r8, r5
 800ed6e:	4606      	mov	r6, r0
 800ed70:	460f      	mov	r7, r1
 800ed72:	d01a      	beq.n	800edaa <__ieee754_rem_pio2+0x82>
 800ed74:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f018 <__ieee754_rem_pio2+0x2f0>)
 800ed76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7a:	f7f1 fa85 	bl	8000288 <__aeabi_dsub>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	4680      	mov	r8, r0
 800ed84:	4689      	mov	r9, r1
 800ed86:	4630      	mov	r0, r6
 800ed88:	4639      	mov	r1, r7
 800ed8a:	f7f1 fa7d 	bl	8000288 <__aeabi_dsub>
 800ed8e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f018 <__ieee754_rem_pio2+0x2f0>)
 800ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed94:	f7f1 fa78 	bl	8000288 <__aeabi_dsub>
 800ed98:	e9c4 8900 	strd	r8, r9, [r4]
 800ed9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eda0:	2501      	movs	r5, #1
 800eda2:	4628      	mov	r0, r5
 800eda4:	b00d      	add	sp, #52	@ 0x34
 800eda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edaa:	a39d      	add	r3, pc, #628	@ (adr r3, 800f020 <__ieee754_rem_pio2+0x2f8>)
 800edac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb0:	f7f1 fa6a 	bl	8000288 <__aeabi_dsub>
 800edb4:	a39c      	add	r3, pc, #624	@ (adr r3, 800f028 <__ieee754_rem_pio2+0x300>)
 800edb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edba:	4606      	mov	r6, r0
 800edbc:	460f      	mov	r7, r1
 800edbe:	f7f1 fa63 	bl	8000288 <__aeabi_dsub>
 800edc2:	4602      	mov	r2, r0
 800edc4:	460b      	mov	r3, r1
 800edc6:	4680      	mov	r8, r0
 800edc8:	4689      	mov	r9, r1
 800edca:	4630      	mov	r0, r6
 800edcc:	4639      	mov	r1, r7
 800edce:	f7f1 fa5b 	bl	8000288 <__aeabi_dsub>
 800edd2:	a395      	add	r3, pc, #596	@ (adr r3, 800f028 <__ieee754_rem_pio2+0x300>)
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	e7dc      	b.n	800ed94 <__ieee754_rem_pio2+0x6c>
 800edda:	f7f1 fa57 	bl	800028c <__adddf3>
 800edde:	45a8      	cmp	r8, r5
 800ede0:	4606      	mov	r6, r0
 800ede2:	460f      	mov	r7, r1
 800ede4:	d018      	beq.n	800ee18 <__ieee754_rem_pio2+0xf0>
 800ede6:	a38c      	add	r3, pc, #560	@ (adr r3, 800f018 <__ieee754_rem_pio2+0x2f0>)
 800ede8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edec:	f7f1 fa4e 	bl	800028c <__adddf3>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	4680      	mov	r8, r0
 800edf6:	4689      	mov	r9, r1
 800edf8:	4630      	mov	r0, r6
 800edfa:	4639      	mov	r1, r7
 800edfc:	f7f1 fa44 	bl	8000288 <__aeabi_dsub>
 800ee00:	a385      	add	r3, pc, #532	@ (adr r3, 800f018 <__ieee754_rem_pio2+0x2f0>)
 800ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee06:	f7f1 fa41 	bl	800028c <__adddf3>
 800ee0a:	f04f 35ff 	mov.w	r5, #4294967295
 800ee0e:	e9c4 8900 	strd	r8, r9, [r4]
 800ee12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee16:	e7c4      	b.n	800eda2 <__ieee754_rem_pio2+0x7a>
 800ee18:	a381      	add	r3, pc, #516	@ (adr r3, 800f020 <__ieee754_rem_pio2+0x2f8>)
 800ee1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1e:	f7f1 fa35 	bl	800028c <__adddf3>
 800ee22:	a381      	add	r3, pc, #516	@ (adr r3, 800f028 <__ieee754_rem_pio2+0x300>)
 800ee24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee28:	4606      	mov	r6, r0
 800ee2a:	460f      	mov	r7, r1
 800ee2c:	f7f1 fa2e 	bl	800028c <__adddf3>
 800ee30:	4602      	mov	r2, r0
 800ee32:	460b      	mov	r3, r1
 800ee34:	4680      	mov	r8, r0
 800ee36:	4689      	mov	r9, r1
 800ee38:	4630      	mov	r0, r6
 800ee3a:	4639      	mov	r1, r7
 800ee3c:	f7f1 fa24 	bl	8000288 <__aeabi_dsub>
 800ee40:	a379      	add	r3, pc, #484	@ (adr r3, 800f028 <__ieee754_rem_pio2+0x300>)
 800ee42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee46:	e7de      	b.n	800ee06 <__ieee754_rem_pio2+0xde>
 800ee48:	4b82      	ldr	r3, [pc, #520]	@ (800f054 <__ieee754_rem_pio2+0x32c>)
 800ee4a:	4598      	cmp	r8, r3
 800ee4c:	f200 80d1 	bhi.w	800eff2 <__ieee754_rem_pio2+0x2ca>
 800ee50:	f000 f966 	bl	800f120 <fabs>
 800ee54:	ec57 6b10 	vmov	r6, r7, d0
 800ee58:	a375      	add	r3, pc, #468	@ (adr r3, 800f030 <__ieee754_rem_pio2+0x308>)
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	4630      	mov	r0, r6
 800ee60:	4639      	mov	r1, r7
 800ee62:	f7f1 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ee66:	4b7c      	ldr	r3, [pc, #496]	@ (800f058 <__ieee754_rem_pio2+0x330>)
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f7f1 fa0f 	bl	800028c <__adddf3>
 800ee6e:	f7f1 fe73 	bl	8000b58 <__aeabi_d2iz>
 800ee72:	4605      	mov	r5, r0
 800ee74:	f7f1 fb56 	bl	8000524 <__aeabi_i2d>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee80:	a363      	add	r3, pc, #396	@ (adr r3, 800f010 <__ieee754_rem_pio2+0x2e8>)
 800ee82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee86:	f7f1 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	4630      	mov	r0, r6
 800ee90:	4639      	mov	r1, r7
 800ee92:	f7f1 f9f9 	bl	8000288 <__aeabi_dsub>
 800ee96:	a360      	add	r3, pc, #384	@ (adr r3, 800f018 <__ieee754_rem_pio2+0x2f0>)
 800ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9c:	4682      	mov	sl, r0
 800ee9e:	468b      	mov	fp, r1
 800eea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eea4:	f7f1 fba8 	bl	80005f8 <__aeabi_dmul>
 800eea8:	2d1f      	cmp	r5, #31
 800eeaa:	4606      	mov	r6, r0
 800eeac:	460f      	mov	r7, r1
 800eeae:	dc0c      	bgt.n	800eeca <__ieee754_rem_pio2+0x1a2>
 800eeb0:	4b6a      	ldr	r3, [pc, #424]	@ (800f05c <__ieee754_rem_pio2+0x334>)
 800eeb2:	1e6a      	subs	r2, r5, #1
 800eeb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeb8:	4543      	cmp	r3, r8
 800eeba:	d006      	beq.n	800eeca <__ieee754_rem_pio2+0x1a2>
 800eebc:	4632      	mov	r2, r6
 800eebe:	463b      	mov	r3, r7
 800eec0:	4650      	mov	r0, sl
 800eec2:	4659      	mov	r1, fp
 800eec4:	f7f1 f9e0 	bl	8000288 <__aeabi_dsub>
 800eec8:	e00e      	b.n	800eee8 <__ieee754_rem_pio2+0x1c0>
 800eeca:	463b      	mov	r3, r7
 800eecc:	4632      	mov	r2, r6
 800eece:	4650      	mov	r0, sl
 800eed0:	4659      	mov	r1, fp
 800eed2:	f7f1 f9d9 	bl	8000288 <__aeabi_dsub>
 800eed6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eeda:	9305      	str	r3, [sp, #20]
 800eedc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eee0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800eee4:	2b10      	cmp	r3, #16
 800eee6:	dc02      	bgt.n	800eeee <__ieee754_rem_pio2+0x1c6>
 800eee8:	e9c4 0100 	strd	r0, r1, [r4]
 800eeec:	e039      	b.n	800ef62 <__ieee754_rem_pio2+0x23a>
 800eeee:	a34c      	add	r3, pc, #304	@ (adr r3, 800f020 <__ieee754_rem_pio2+0x2f8>)
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eef8:	f7f1 fb7e 	bl	80005f8 <__aeabi_dmul>
 800eefc:	4606      	mov	r6, r0
 800eefe:	460f      	mov	r7, r1
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
 800ef04:	4650      	mov	r0, sl
 800ef06:	4659      	mov	r1, fp
 800ef08:	f7f1 f9be 	bl	8000288 <__aeabi_dsub>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	460b      	mov	r3, r1
 800ef10:	4680      	mov	r8, r0
 800ef12:	4689      	mov	r9, r1
 800ef14:	4650      	mov	r0, sl
 800ef16:	4659      	mov	r1, fp
 800ef18:	f7f1 f9b6 	bl	8000288 <__aeabi_dsub>
 800ef1c:	4632      	mov	r2, r6
 800ef1e:	463b      	mov	r3, r7
 800ef20:	f7f1 f9b2 	bl	8000288 <__aeabi_dsub>
 800ef24:	a340      	add	r3, pc, #256	@ (adr r3, 800f028 <__ieee754_rem_pio2+0x300>)
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	460f      	mov	r7, r1
 800ef2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef32:	f7f1 fb61 	bl	80005f8 <__aeabi_dmul>
 800ef36:	4632      	mov	r2, r6
 800ef38:	463b      	mov	r3, r7
 800ef3a:	f7f1 f9a5 	bl	8000288 <__aeabi_dsub>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4606      	mov	r6, r0
 800ef44:	460f      	mov	r7, r1
 800ef46:	4640      	mov	r0, r8
 800ef48:	4649      	mov	r1, r9
 800ef4a:	f7f1 f99d 	bl	8000288 <__aeabi_dsub>
 800ef4e:	9a05      	ldr	r2, [sp, #20]
 800ef50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	2b31      	cmp	r3, #49	@ 0x31
 800ef58:	dc20      	bgt.n	800ef9c <__ieee754_rem_pio2+0x274>
 800ef5a:	e9c4 0100 	strd	r0, r1, [r4]
 800ef5e:	46c2      	mov	sl, r8
 800ef60:	46cb      	mov	fp, r9
 800ef62:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ef66:	4650      	mov	r0, sl
 800ef68:	4642      	mov	r2, r8
 800ef6a:	464b      	mov	r3, r9
 800ef6c:	4659      	mov	r1, fp
 800ef6e:	f7f1 f98b 	bl	8000288 <__aeabi_dsub>
 800ef72:	463b      	mov	r3, r7
 800ef74:	4632      	mov	r2, r6
 800ef76:	f7f1 f987 	bl	8000288 <__aeabi_dsub>
 800ef7a:	9b04      	ldr	r3, [sp, #16]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef82:	f6bf af0e 	bge.w	800eda2 <__ieee754_rem_pio2+0x7a>
 800ef86:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ef8a:	6063      	str	r3, [r4, #4]
 800ef8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef90:	f8c4 8000 	str.w	r8, [r4]
 800ef94:	60a0      	str	r0, [r4, #8]
 800ef96:	60e3      	str	r3, [r4, #12]
 800ef98:	426d      	negs	r5, r5
 800ef9a:	e702      	b.n	800eda2 <__ieee754_rem_pio2+0x7a>
 800ef9c:	a326      	add	r3, pc, #152	@ (adr r3, 800f038 <__ieee754_rem_pio2+0x310>)
 800ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efa6:	f7f1 fb27 	bl	80005f8 <__aeabi_dmul>
 800efaa:	4606      	mov	r6, r0
 800efac:	460f      	mov	r7, r1
 800efae:	4602      	mov	r2, r0
 800efb0:	460b      	mov	r3, r1
 800efb2:	4640      	mov	r0, r8
 800efb4:	4649      	mov	r1, r9
 800efb6:	f7f1 f967 	bl	8000288 <__aeabi_dsub>
 800efba:	4602      	mov	r2, r0
 800efbc:	460b      	mov	r3, r1
 800efbe:	4682      	mov	sl, r0
 800efc0:	468b      	mov	fp, r1
 800efc2:	4640      	mov	r0, r8
 800efc4:	4649      	mov	r1, r9
 800efc6:	f7f1 f95f 	bl	8000288 <__aeabi_dsub>
 800efca:	4632      	mov	r2, r6
 800efcc:	463b      	mov	r3, r7
 800efce:	f7f1 f95b 	bl	8000288 <__aeabi_dsub>
 800efd2:	a31b      	add	r3, pc, #108	@ (adr r3, 800f040 <__ieee754_rem_pio2+0x318>)
 800efd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd8:	4606      	mov	r6, r0
 800efda:	460f      	mov	r7, r1
 800efdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efe0:	f7f1 fb0a 	bl	80005f8 <__aeabi_dmul>
 800efe4:	4632      	mov	r2, r6
 800efe6:	463b      	mov	r3, r7
 800efe8:	f7f1 f94e 	bl	8000288 <__aeabi_dsub>
 800efec:	4606      	mov	r6, r0
 800efee:	460f      	mov	r7, r1
 800eff0:	e764      	b.n	800eebc <__ieee754_rem_pio2+0x194>
 800eff2:	4b1b      	ldr	r3, [pc, #108]	@ (800f060 <__ieee754_rem_pio2+0x338>)
 800eff4:	4598      	cmp	r8, r3
 800eff6:	d935      	bls.n	800f064 <__ieee754_rem_pio2+0x33c>
 800eff8:	4632      	mov	r2, r6
 800effa:	463b      	mov	r3, r7
 800effc:	4630      	mov	r0, r6
 800effe:	4639      	mov	r1, r7
 800f000:	f7f1 f942 	bl	8000288 <__aeabi_dsub>
 800f004:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f008:	e9c4 0100 	strd	r0, r1, [r4]
 800f00c:	e69e      	b.n	800ed4c <__ieee754_rem_pio2+0x24>
 800f00e:	bf00      	nop
 800f010:	54400000 	.word	0x54400000
 800f014:	3ff921fb 	.word	0x3ff921fb
 800f018:	1a626331 	.word	0x1a626331
 800f01c:	3dd0b461 	.word	0x3dd0b461
 800f020:	1a600000 	.word	0x1a600000
 800f024:	3dd0b461 	.word	0x3dd0b461
 800f028:	2e037073 	.word	0x2e037073
 800f02c:	3ba3198a 	.word	0x3ba3198a
 800f030:	6dc9c883 	.word	0x6dc9c883
 800f034:	3fe45f30 	.word	0x3fe45f30
 800f038:	2e000000 	.word	0x2e000000
 800f03c:	3ba3198a 	.word	0x3ba3198a
 800f040:	252049c1 	.word	0x252049c1
 800f044:	397b839a 	.word	0x397b839a
 800f048:	3fe921fb 	.word	0x3fe921fb
 800f04c:	4002d97b 	.word	0x4002d97b
 800f050:	3ff921fb 	.word	0x3ff921fb
 800f054:	413921fb 	.word	0x413921fb
 800f058:	3fe00000 	.word	0x3fe00000
 800f05c:	08010020 	.word	0x08010020
 800f060:	7fefffff 	.word	0x7fefffff
 800f064:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f068:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f06c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f070:	4630      	mov	r0, r6
 800f072:	460f      	mov	r7, r1
 800f074:	f7f1 fd70 	bl	8000b58 <__aeabi_d2iz>
 800f078:	f7f1 fa54 	bl	8000524 <__aeabi_i2d>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4630      	mov	r0, r6
 800f082:	4639      	mov	r1, r7
 800f084:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f088:	f7f1 f8fe 	bl	8000288 <__aeabi_dsub>
 800f08c:	4b22      	ldr	r3, [pc, #136]	@ (800f118 <__ieee754_rem_pio2+0x3f0>)
 800f08e:	2200      	movs	r2, #0
 800f090:	f7f1 fab2 	bl	80005f8 <__aeabi_dmul>
 800f094:	460f      	mov	r7, r1
 800f096:	4606      	mov	r6, r0
 800f098:	f7f1 fd5e 	bl	8000b58 <__aeabi_d2iz>
 800f09c:	f7f1 fa42 	bl	8000524 <__aeabi_i2d>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	4639      	mov	r1, r7
 800f0a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f0ac:	f7f1 f8ec 	bl	8000288 <__aeabi_dsub>
 800f0b0:	4b19      	ldr	r3, [pc, #100]	@ (800f118 <__ieee754_rem_pio2+0x3f0>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f7f1 faa0 	bl	80005f8 <__aeabi_dmul>
 800f0b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f0bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f0c0:	f04f 0803 	mov.w	r8, #3
 800f0c4:	2600      	movs	r6, #0
 800f0c6:	2700      	movs	r7, #0
 800f0c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f0cc:	4632      	mov	r2, r6
 800f0ce:	463b      	mov	r3, r7
 800f0d0:	46c2      	mov	sl, r8
 800f0d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0d6:	f7f1 fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	d1f4      	bne.n	800f0c8 <__ieee754_rem_pio2+0x3a0>
 800f0de:	4b0f      	ldr	r3, [pc, #60]	@ (800f11c <__ieee754_rem_pio2+0x3f4>)
 800f0e0:	9301      	str	r3, [sp, #4]
 800f0e2:	2302      	movs	r3, #2
 800f0e4:	9300      	str	r3, [sp, #0]
 800f0e6:	462a      	mov	r2, r5
 800f0e8:	4653      	mov	r3, sl
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	a806      	add	r0, sp, #24
 800f0ee:	f000 f81f 	bl	800f130 <__kernel_rem_pio2>
 800f0f2:	9b04      	ldr	r3, [sp, #16]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	f6bf ae53 	bge.w	800eda2 <__ieee754_rem_pio2+0x7a>
 800f0fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f100:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f104:	e9c4 2300 	strd	r2, r3, [r4]
 800f108:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f10c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f110:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f114:	e740      	b.n	800ef98 <__ieee754_rem_pio2+0x270>
 800f116:	bf00      	nop
 800f118:	41700000 	.word	0x41700000
 800f11c:	080100a0 	.word	0x080100a0

0800f120 <fabs>:
 800f120:	ec51 0b10 	vmov	r0, r1, d0
 800f124:	4602      	mov	r2, r0
 800f126:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f12a:	ec43 2b10 	vmov	d0, r2, r3
 800f12e:	4770      	bx	lr

0800f130 <__kernel_rem_pio2>:
 800f130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f134:	ed2d 8b02 	vpush	{d8}
 800f138:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f13c:	f112 0f14 	cmn.w	r2, #20
 800f140:	9306      	str	r3, [sp, #24]
 800f142:	9104      	str	r1, [sp, #16]
 800f144:	4bc2      	ldr	r3, [pc, #776]	@ (800f450 <__kernel_rem_pio2+0x320>)
 800f146:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f148:	9008      	str	r0, [sp, #32]
 800f14a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	9b06      	ldr	r3, [sp, #24]
 800f152:	f103 33ff 	add.w	r3, r3, #4294967295
 800f156:	bfa8      	it	ge
 800f158:	1ed4      	subge	r4, r2, #3
 800f15a:	9305      	str	r3, [sp, #20]
 800f15c:	bfb2      	itee	lt
 800f15e:	2400      	movlt	r4, #0
 800f160:	2318      	movge	r3, #24
 800f162:	fb94 f4f3 	sdivge	r4, r4, r3
 800f166:	f06f 0317 	mvn.w	r3, #23
 800f16a:	fb04 3303 	mla	r3, r4, r3, r3
 800f16e:	eb03 0b02 	add.w	fp, r3, r2
 800f172:	9b00      	ldr	r3, [sp, #0]
 800f174:	9a05      	ldr	r2, [sp, #20]
 800f176:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800f440 <__kernel_rem_pio2+0x310>
 800f17a:	eb03 0802 	add.w	r8, r3, r2
 800f17e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f180:	1aa7      	subs	r7, r4, r2
 800f182:	ae20      	add	r6, sp, #128	@ 0x80
 800f184:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f188:	2500      	movs	r5, #0
 800f18a:	4545      	cmp	r5, r8
 800f18c:	dd12      	ble.n	800f1b4 <__kernel_rem_pio2+0x84>
 800f18e:	9b06      	ldr	r3, [sp, #24]
 800f190:	aa20      	add	r2, sp, #128	@ 0x80
 800f192:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f196:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f19a:	2700      	movs	r7, #0
 800f19c:	9b00      	ldr	r3, [sp, #0]
 800f19e:	429f      	cmp	r7, r3
 800f1a0:	dc2e      	bgt.n	800f200 <__kernel_rem_pio2+0xd0>
 800f1a2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800f440 <__kernel_rem_pio2+0x310>
 800f1a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f1aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f1ae:	46a8      	mov	r8, r5
 800f1b0:	2600      	movs	r6, #0
 800f1b2:	e01b      	b.n	800f1ec <__kernel_rem_pio2+0xbc>
 800f1b4:	42ef      	cmn	r7, r5
 800f1b6:	d407      	bmi.n	800f1c8 <__kernel_rem_pio2+0x98>
 800f1b8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f1bc:	f7f1 f9b2 	bl	8000524 <__aeabi_i2d>
 800f1c0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f1c4:	3501      	adds	r5, #1
 800f1c6:	e7e0      	b.n	800f18a <__kernel_rem_pio2+0x5a>
 800f1c8:	ec51 0b18 	vmov	r0, r1, d8
 800f1cc:	e7f8      	b.n	800f1c0 <__kernel_rem_pio2+0x90>
 800f1ce:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800f1d2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f1d6:	f7f1 fa0f 	bl	80005f8 <__aeabi_dmul>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1e2:	f7f1 f853 	bl	800028c <__adddf3>
 800f1e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1ea:	3601      	adds	r6, #1
 800f1ec:	9b05      	ldr	r3, [sp, #20]
 800f1ee:	429e      	cmp	r6, r3
 800f1f0:	dded      	ble.n	800f1ce <__kernel_rem_pio2+0x9e>
 800f1f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1f6:	3701      	adds	r7, #1
 800f1f8:	ecaa 7b02 	vstmia	sl!, {d7}
 800f1fc:	3508      	adds	r5, #8
 800f1fe:	e7cd      	b.n	800f19c <__kernel_rem_pio2+0x6c>
 800f200:	9b00      	ldr	r3, [sp, #0]
 800f202:	f8dd 8000 	ldr.w	r8, [sp]
 800f206:	aa0c      	add	r2, sp, #48	@ 0x30
 800f208:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f20c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f20e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f210:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f214:	9309      	str	r3, [sp, #36]	@ 0x24
 800f216:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f21a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f21c:	ab98      	add	r3, sp, #608	@ 0x260
 800f21e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f222:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f226:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f22a:	ac0c      	add	r4, sp, #48	@ 0x30
 800f22c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f22e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f232:	46a1      	mov	r9, r4
 800f234:	46c2      	mov	sl, r8
 800f236:	f1ba 0f00 	cmp.w	sl, #0
 800f23a:	dc77      	bgt.n	800f32c <__kernel_rem_pio2+0x1fc>
 800f23c:	4658      	mov	r0, fp
 800f23e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f242:	f000 fac5 	bl	800f7d0 <scalbn>
 800f246:	ec57 6b10 	vmov	r6, r7, d0
 800f24a:	2200      	movs	r2, #0
 800f24c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f250:	4630      	mov	r0, r6
 800f252:	4639      	mov	r1, r7
 800f254:	f7f1 f9d0 	bl	80005f8 <__aeabi_dmul>
 800f258:	ec41 0b10 	vmov	d0, r0, r1
 800f25c:	f000 fb34 	bl	800f8c8 <floor>
 800f260:	4b7c      	ldr	r3, [pc, #496]	@ (800f454 <__kernel_rem_pio2+0x324>)
 800f262:	ec51 0b10 	vmov	r0, r1, d0
 800f266:	2200      	movs	r2, #0
 800f268:	f7f1 f9c6 	bl	80005f8 <__aeabi_dmul>
 800f26c:	4602      	mov	r2, r0
 800f26e:	460b      	mov	r3, r1
 800f270:	4630      	mov	r0, r6
 800f272:	4639      	mov	r1, r7
 800f274:	f7f1 f808 	bl	8000288 <__aeabi_dsub>
 800f278:	460f      	mov	r7, r1
 800f27a:	4606      	mov	r6, r0
 800f27c:	f7f1 fc6c 	bl	8000b58 <__aeabi_d2iz>
 800f280:	9002      	str	r0, [sp, #8]
 800f282:	f7f1 f94f 	bl	8000524 <__aeabi_i2d>
 800f286:	4602      	mov	r2, r0
 800f288:	460b      	mov	r3, r1
 800f28a:	4630      	mov	r0, r6
 800f28c:	4639      	mov	r1, r7
 800f28e:	f7f0 fffb 	bl	8000288 <__aeabi_dsub>
 800f292:	f1bb 0f00 	cmp.w	fp, #0
 800f296:	4606      	mov	r6, r0
 800f298:	460f      	mov	r7, r1
 800f29a:	dd6c      	ble.n	800f376 <__kernel_rem_pio2+0x246>
 800f29c:	f108 31ff 	add.w	r1, r8, #4294967295
 800f2a0:	ab0c      	add	r3, sp, #48	@ 0x30
 800f2a2:	9d02      	ldr	r5, [sp, #8]
 800f2a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2a8:	f1cb 0018 	rsb	r0, fp, #24
 800f2ac:	fa43 f200 	asr.w	r2, r3, r0
 800f2b0:	4415      	add	r5, r2
 800f2b2:	4082      	lsls	r2, r0
 800f2b4:	1a9b      	subs	r3, r3, r2
 800f2b6:	aa0c      	add	r2, sp, #48	@ 0x30
 800f2b8:	9502      	str	r5, [sp, #8]
 800f2ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f2be:	f1cb 0217 	rsb	r2, fp, #23
 800f2c2:	fa43 f902 	asr.w	r9, r3, r2
 800f2c6:	f1b9 0f00 	cmp.w	r9, #0
 800f2ca:	dd64      	ble.n	800f396 <__kernel_rem_pio2+0x266>
 800f2cc:	9b02      	ldr	r3, [sp, #8]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	9302      	str	r3, [sp, #8]
 800f2d4:	4615      	mov	r5, r2
 800f2d6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f2da:	4590      	cmp	r8, r2
 800f2dc:	f300 80a1 	bgt.w	800f422 <__kernel_rem_pio2+0x2f2>
 800f2e0:	f1bb 0f00 	cmp.w	fp, #0
 800f2e4:	dd07      	ble.n	800f2f6 <__kernel_rem_pio2+0x1c6>
 800f2e6:	f1bb 0f01 	cmp.w	fp, #1
 800f2ea:	f000 80c1 	beq.w	800f470 <__kernel_rem_pio2+0x340>
 800f2ee:	f1bb 0f02 	cmp.w	fp, #2
 800f2f2:	f000 80c8 	beq.w	800f486 <__kernel_rem_pio2+0x356>
 800f2f6:	f1b9 0f02 	cmp.w	r9, #2
 800f2fa:	d14c      	bne.n	800f396 <__kernel_rem_pio2+0x266>
 800f2fc:	4632      	mov	r2, r6
 800f2fe:	463b      	mov	r3, r7
 800f300:	4955      	ldr	r1, [pc, #340]	@ (800f458 <__kernel_rem_pio2+0x328>)
 800f302:	2000      	movs	r0, #0
 800f304:	f7f0 ffc0 	bl	8000288 <__aeabi_dsub>
 800f308:	4606      	mov	r6, r0
 800f30a:	460f      	mov	r7, r1
 800f30c:	2d00      	cmp	r5, #0
 800f30e:	d042      	beq.n	800f396 <__kernel_rem_pio2+0x266>
 800f310:	4658      	mov	r0, fp
 800f312:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800f448 <__kernel_rem_pio2+0x318>
 800f316:	f000 fa5b 	bl	800f7d0 <scalbn>
 800f31a:	4630      	mov	r0, r6
 800f31c:	4639      	mov	r1, r7
 800f31e:	ec53 2b10 	vmov	r2, r3, d0
 800f322:	f7f0 ffb1 	bl	8000288 <__aeabi_dsub>
 800f326:	4606      	mov	r6, r0
 800f328:	460f      	mov	r7, r1
 800f32a:	e034      	b.n	800f396 <__kernel_rem_pio2+0x266>
 800f32c:	4b4b      	ldr	r3, [pc, #300]	@ (800f45c <__kernel_rem_pio2+0x32c>)
 800f32e:	2200      	movs	r2, #0
 800f330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f334:	f7f1 f960 	bl	80005f8 <__aeabi_dmul>
 800f338:	f7f1 fc0e 	bl	8000b58 <__aeabi_d2iz>
 800f33c:	f7f1 f8f2 	bl	8000524 <__aeabi_i2d>
 800f340:	4b47      	ldr	r3, [pc, #284]	@ (800f460 <__kernel_rem_pio2+0x330>)
 800f342:	2200      	movs	r2, #0
 800f344:	4606      	mov	r6, r0
 800f346:	460f      	mov	r7, r1
 800f348:	f7f1 f956 	bl	80005f8 <__aeabi_dmul>
 800f34c:	4602      	mov	r2, r0
 800f34e:	460b      	mov	r3, r1
 800f350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f354:	f7f0 ff98 	bl	8000288 <__aeabi_dsub>
 800f358:	f7f1 fbfe 	bl	8000b58 <__aeabi_d2iz>
 800f35c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f360:	f849 0b04 	str.w	r0, [r9], #4
 800f364:	4639      	mov	r1, r7
 800f366:	4630      	mov	r0, r6
 800f368:	f7f0 ff90 	bl	800028c <__adddf3>
 800f36c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f374:	e75f      	b.n	800f236 <__kernel_rem_pio2+0x106>
 800f376:	d107      	bne.n	800f388 <__kernel_rem_pio2+0x258>
 800f378:	f108 33ff 	add.w	r3, r8, #4294967295
 800f37c:	aa0c      	add	r2, sp, #48	@ 0x30
 800f37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f382:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f386:	e79e      	b.n	800f2c6 <__kernel_rem_pio2+0x196>
 800f388:	4b36      	ldr	r3, [pc, #216]	@ (800f464 <__kernel_rem_pio2+0x334>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	f7f1 fbba 	bl	8000b04 <__aeabi_dcmpge>
 800f390:	2800      	cmp	r0, #0
 800f392:	d143      	bne.n	800f41c <__kernel_rem_pio2+0x2ec>
 800f394:	4681      	mov	r9, r0
 800f396:	2200      	movs	r2, #0
 800f398:	2300      	movs	r3, #0
 800f39a:	4630      	mov	r0, r6
 800f39c:	4639      	mov	r1, r7
 800f39e:	f7f1 fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	f000 80c1 	beq.w	800f52a <__kernel_rem_pio2+0x3fa>
 800f3a8:	f108 33ff 	add.w	r3, r8, #4294967295
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	9900      	ldr	r1, [sp, #0]
 800f3b0:	428b      	cmp	r3, r1
 800f3b2:	da70      	bge.n	800f496 <__kernel_rem_pio2+0x366>
 800f3b4:	2a00      	cmp	r2, #0
 800f3b6:	f000 808b 	beq.w	800f4d0 <__kernel_rem_pio2+0x3a0>
 800f3ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3be:	ab0c      	add	r3, sp, #48	@ 0x30
 800f3c0:	f1ab 0b18 	sub.w	fp, fp, #24
 800f3c4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d0f6      	beq.n	800f3ba <__kernel_rem_pio2+0x28a>
 800f3cc:	4658      	mov	r0, fp
 800f3ce:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800f448 <__kernel_rem_pio2+0x318>
 800f3d2:	f000 f9fd 	bl	800f7d0 <scalbn>
 800f3d6:	f108 0301 	add.w	r3, r8, #1
 800f3da:	00da      	lsls	r2, r3, #3
 800f3dc:	9205      	str	r2, [sp, #20]
 800f3de:	ec55 4b10 	vmov	r4, r5, d0
 800f3e2:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f3e4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800f45c <__kernel_rem_pio2+0x32c>
 800f3e8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f3ec:	4646      	mov	r6, r8
 800f3ee:	f04f 0a00 	mov.w	sl, #0
 800f3f2:	2e00      	cmp	r6, #0
 800f3f4:	f280 80d1 	bge.w	800f59a <__kernel_rem_pio2+0x46a>
 800f3f8:	4644      	mov	r4, r8
 800f3fa:	2c00      	cmp	r4, #0
 800f3fc:	f2c0 80ff 	blt.w	800f5fe <__kernel_rem_pio2+0x4ce>
 800f400:	4b19      	ldr	r3, [pc, #100]	@ (800f468 <__kernel_rem_pio2+0x338>)
 800f402:	461f      	mov	r7, r3
 800f404:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f406:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f40a:	9306      	str	r3, [sp, #24]
 800f40c:	f04f 0a00 	mov.w	sl, #0
 800f410:	f04f 0b00 	mov.w	fp, #0
 800f414:	2600      	movs	r6, #0
 800f416:	eba8 0504 	sub.w	r5, r8, r4
 800f41a:	e0e4      	b.n	800f5e6 <__kernel_rem_pio2+0x4b6>
 800f41c:	f04f 0902 	mov.w	r9, #2
 800f420:	e754      	b.n	800f2cc <__kernel_rem_pio2+0x19c>
 800f422:	f854 3b04 	ldr.w	r3, [r4], #4
 800f426:	bb0d      	cbnz	r5, 800f46c <__kernel_rem_pio2+0x33c>
 800f428:	b123      	cbz	r3, 800f434 <__kernel_rem_pio2+0x304>
 800f42a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f42e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f432:	2301      	movs	r3, #1
 800f434:	3201      	adds	r2, #1
 800f436:	461d      	mov	r5, r3
 800f438:	e74f      	b.n	800f2da <__kernel_rem_pio2+0x1aa>
 800f43a:	bf00      	nop
 800f43c:	f3af 8000 	nop.w
	...
 800f44c:	3ff00000 	.word	0x3ff00000
 800f450:	080101e8 	.word	0x080101e8
 800f454:	40200000 	.word	0x40200000
 800f458:	3ff00000 	.word	0x3ff00000
 800f45c:	3e700000 	.word	0x3e700000
 800f460:	41700000 	.word	0x41700000
 800f464:	3fe00000 	.word	0x3fe00000
 800f468:	080101a8 	.word	0x080101a8
 800f46c:	1acb      	subs	r3, r1, r3
 800f46e:	e7de      	b.n	800f42e <__kernel_rem_pio2+0x2fe>
 800f470:	f108 32ff 	add.w	r2, r8, #4294967295
 800f474:	ab0c      	add	r3, sp, #48	@ 0x30
 800f476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f47a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f47e:	a90c      	add	r1, sp, #48	@ 0x30
 800f480:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f484:	e737      	b.n	800f2f6 <__kernel_rem_pio2+0x1c6>
 800f486:	f108 32ff 	add.w	r2, r8, #4294967295
 800f48a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f490:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f494:	e7f3      	b.n	800f47e <__kernel_rem_pio2+0x34e>
 800f496:	a90c      	add	r1, sp, #48	@ 0x30
 800f498:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f49c:	3b01      	subs	r3, #1
 800f49e:	430a      	orrs	r2, r1
 800f4a0:	e785      	b.n	800f3ae <__kernel_rem_pio2+0x27e>
 800f4a2:	3401      	adds	r4, #1
 800f4a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f4a8:	2a00      	cmp	r2, #0
 800f4aa:	d0fa      	beq.n	800f4a2 <__kernel_rem_pio2+0x372>
 800f4ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f4b2:	eb0d 0503 	add.w	r5, sp, r3
 800f4b6:	9b06      	ldr	r3, [sp, #24]
 800f4b8:	aa20      	add	r2, sp, #128	@ 0x80
 800f4ba:	4443      	add	r3, r8
 800f4bc:	f108 0701 	add.w	r7, r8, #1
 800f4c0:	3d98      	subs	r5, #152	@ 0x98
 800f4c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f4c6:	4444      	add	r4, r8
 800f4c8:	42bc      	cmp	r4, r7
 800f4ca:	da04      	bge.n	800f4d6 <__kernel_rem_pio2+0x3a6>
 800f4cc:	46a0      	mov	r8, r4
 800f4ce:	e6a2      	b.n	800f216 <__kernel_rem_pio2+0xe6>
 800f4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4d2:	2401      	movs	r4, #1
 800f4d4:	e7e6      	b.n	800f4a4 <__kernel_rem_pio2+0x374>
 800f4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f4dc:	f7f1 f822 	bl	8000524 <__aeabi_i2d>
 800f4e0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800f7a0 <__kernel_rem_pio2+0x670>
 800f4e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f4e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f4ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4f0:	46b2      	mov	sl, r6
 800f4f2:	f04f 0800 	mov.w	r8, #0
 800f4f6:	9b05      	ldr	r3, [sp, #20]
 800f4f8:	4598      	cmp	r8, r3
 800f4fa:	dd05      	ble.n	800f508 <__kernel_rem_pio2+0x3d8>
 800f4fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f500:	3701      	adds	r7, #1
 800f502:	eca5 7b02 	vstmia	r5!, {d7}
 800f506:	e7df      	b.n	800f4c8 <__kernel_rem_pio2+0x398>
 800f508:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f50c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f510:	f7f1 f872 	bl	80005f8 <__aeabi_dmul>
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f51c:	f7f0 feb6 	bl	800028c <__adddf3>
 800f520:	f108 0801 	add.w	r8, r8, #1
 800f524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f528:	e7e5      	b.n	800f4f6 <__kernel_rem_pio2+0x3c6>
 800f52a:	f1cb 0000 	rsb	r0, fp, #0
 800f52e:	ec47 6b10 	vmov	d0, r6, r7
 800f532:	f000 f94d 	bl	800f7d0 <scalbn>
 800f536:	ec55 4b10 	vmov	r4, r5, d0
 800f53a:	4b9b      	ldr	r3, [pc, #620]	@ (800f7a8 <__kernel_rem_pio2+0x678>)
 800f53c:	2200      	movs	r2, #0
 800f53e:	4620      	mov	r0, r4
 800f540:	4629      	mov	r1, r5
 800f542:	f7f1 fadf 	bl	8000b04 <__aeabi_dcmpge>
 800f546:	b300      	cbz	r0, 800f58a <__kernel_rem_pio2+0x45a>
 800f548:	4b98      	ldr	r3, [pc, #608]	@ (800f7ac <__kernel_rem_pio2+0x67c>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	4620      	mov	r0, r4
 800f54e:	4629      	mov	r1, r5
 800f550:	f7f1 f852 	bl	80005f8 <__aeabi_dmul>
 800f554:	f7f1 fb00 	bl	8000b58 <__aeabi_d2iz>
 800f558:	4606      	mov	r6, r0
 800f55a:	f7f0 ffe3 	bl	8000524 <__aeabi_i2d>
 800f55e:	4b92      	ldr	r3, [pc, #584]	@ (800f7a8 <__kernel_rem_pio2+0x678>)
 800f560:	2200      	movs	r2, #0
 800f562:	f7f1 f849 	bl	80005f8 <__aeabi_dmul>
 800f566:	460b      	mov	r3, r1
 800f568:	4602      	mov	r2, r0
 800f56a:	4629      	mov	r1, r5
 800f56c:	4620      	mov	r0, r4
 800f56e:	f7f0 fe8b 	bl	8000288 <__aeabi_dsub>
 800f572:	f7f1 faf1 	bl	8000b58 <__aeabi_d2iz>
 800f576:	ab0c      	add	r3, sp, #48	@ 0x30
 800f578:	f10b 0b18 	add.w	fp, fp, #24
 800f57c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f580:	f108 0801 	add.w	r8, r8, #1
 800f584:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f588:	e720      	b.n	800f3cc <__kernel_rem_pio2+0x29c>
 800f58a:	4620      	mov	r0, r4
 800f58c:	4629      	mov	r1, r5
 800f58e:	f7f1 fae3 	bl	8000b58 <__aeabi_d2iz>
 800f592:	ab0c      	add	r3, sp, #48	@ 0x30
 800f594:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f598:	e718      	b.n	800f3cc <__kernel_rem_pio2+0x29c>
 800f59a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f59c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f5a0:	f7f0 ffc0 	bl	8000524 <__aeabi_i2d>
 800f5a4:	4622      	mov	r2, r4
 800f5a6:	462b      	mov	r3, r5
 800f5a8:	f7f1 f826 	bl	80005f8 <__aeabi_dmul>
 800f5ac:	4652      	mov	r2, sl
 800f5ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f5b2:	465b      	mov	r3, fp
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	4629      	mov	r1, r5
 800f5b8:	f7f1 f81e 	bl	80005f8 <__aeabi_dmul>
 800f5bc:	3e01      	subs	r6, #1
 800f5be:	4604      	mov	r4, r0
 800f5c0:	460d      	mov	r5, r1
 800f5c2:	e716      	b.n	800f3f2 <__kernel_rem_pio2+0x2c2>
 800f5c4:	9906      	ldr	r1, [sp, #24]
 800f5c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f5ca:	9106      	str	r1, [sp, #24]
 800f5cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f5d0:	f7f1 f812 	bl	80005f8 <__aeabi_dmul>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	4650      	mov	r0, sl
 800f5da:	4659      	mov	r1, fp
 800f5dc:	f7f0 fe56 	bl	800028c <__adddf3>
 800f5e0:	3601      	adds	r6, #1
 800f5e2:	4682      	mov	sl, r0
 800f5e4:	468b      	mov	fp, r1
 800f5e6:	9b00      	ldr	r3, [sp, #0]
 800f5e8:	429e      	cmp	r6, r3
 800f5ea:	dc01      	bgt.n	800f5f0 <__kernel_rem_pio2+0x4c0>
 800f5ec:	42ae      	cmp	r6, r5
 800f5ee:	dde9      	ble.n	800f5c4 <__kernel_rem_pio2+0x494>
 800f5f0:	ab48      	add	r3, sp, #288	@ 0x120
 800f5f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f5f6:	e9c5 ab00 	strd	sl, fp, [r5]
 800f5fa:	3c01      	subs	r4, #1
 800f5fc:	e6fd      	b.n	800f3fa <__kernel_rem_pio2+0x2ca>
 800f5fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f600:	2b02      	cmp	r3, #2
 800f602:	dc0b      	bgt.n	800f61c <__kernel_rem_pio2+0x4ec>
 800f604:	2b00      	cmp	r3, #0
 800f606:	dc35      	bgt.n	800f674 <__kernel_rem_pio2+0x544>
 800f608:	d059      	beq.n	800f6be <__kernel_rem_pio2+0x58e>
 800f60a:	9b02      	ldr	r3, [sp, #8]
 800f60c:	f003 0007 	and.w	r0, r3, #7
 800f610:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f614:	ecbd 8b02 	vpop	{d8}
 800f618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d1f3      	bne.n	800f60a <__kernel_rem_pio2+0x4da>
 800f622:	9b05      	ldr	r3, [sp, #20]
 800f624:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f628:	eb0d 0403 	add.w	r4, sp, r3
 800f62c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f630:	4625      	mov	r5, r4
 800f632:	46c2      	mov	sl, r8
 800f634:	f1ba 0f00 	cmp.w	sl, #0
 800f638:	dc69      	bgt.n	800f70e <__kernel_rem_pio2+0x5de>
 800f63a:	4645      	mov	r5, r8
 800f63c:	2d01      	cmp	r5, #1
 800f63e:	f300 8087 	bgt.w	800f750 <__kernel_rem_pio2+0x620>
 800f642:	9c05      	ldr	r4, [sp, #20]
 800f644:	ab48      	add	r3, sp, #288	@ 0x120
 800f646:	441c      	add	r4, r3
 800f648:	2000      	movs	r0, #0
 800f64a:	2100      	movs	r1, #0
 800f64c:	f1b8 0f01 	cmp.w	r8, #1
 800f650:	f300 809c 	bgt.w	800f78c <__kernel_rem_pio2+0x65c>
 800f654:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800f658:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800f65c:	f1b9 0f00 	cmp.w	r9, #0
 800f660:	f040 80a6 	bne.w	800f7b0 <__kernel_rem_pio2+0x680>
 800f664:	9b04      	ldr	r3, [sp, #16]
 800f666:	e9c3 5600 	strd	r5, r6, [r3]
 800f66a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f66e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f672:	e7ca      	b.n	800f60a <__kernel_rem_pio2+0x4da>
 800f674:	9d05      	ldr	r5, [sp, #20]
 800f676:	ab48      	add	r3, sp, #288	@ 0x120
 800f678:	441d      	add	r5, r3
 800f67a:	4644      	mov	r4, r8
 800f67c:	2000      	movs	r0, #0
 800f67e:	2100      	movs	r1, #0
 800f680:	2c00      	cmp	r4, #0
 800f682:	da35      	bge.n	800f6f0 <__kernel_rem_pio2+0x5c0>
 800f684:	f1b9 0f00 	cmp.w	r9, #0
 800f688:	d038      	beq.n	800f6fc <__kernel_rem_pio2+0x5cc>
 800f68a:	4602      	mov	r2, r0
 800f68c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f690:	9c04      	ldr	r4, [sp, #16]
 800f692:	e9c4 2300 	strd	r2, r3, [r4]
 800f696:	4602      	mov	r2, r0
 800f698:	460b      	mov	r3, r1
 800f69a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f69e:	f7f0 fdf3 	bl	8000288 <__aeabi_dsub>
 800f6a2:	ad4a      	add	r5, sp, #296	@ 0x128
 800f6a4:	2401      	movs	r4, #1
 800f6a6:	45a0      	cmp	r8, r4
 800f6a8:	da2b      	bge.n	800f702 <__kernel_rem_pio2+0x5d2>
 800f6aa:	f1b9 0f00 	cmp.w	r9, #0
 800f6ae:	d002      	beq.n	800f6b6 <__kernel_rem_pio2+0x586>
 800f6b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	9b04      	ldr	r3, [sp, #16]
 800f6b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f6bc:	e7a5      	b.n	800f60a <__kernel_rem_pio2+0x4da>
 800f6be:	9c05      	ldr	r4, [sp, #20]
 800f6c0:	ab48      	add	r3, sp, #288	@ 0x120
 800f6c2:	441c      	add	r4, r3
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	f1b8 0f00 	cmp.w	r8, #0
 800f6cc:	da09      	bge.n	800f6e2 <__kernel_rem_pio2+0x5b2>
 800f6ce:	f1b9 0f00 	cmp.w	r9, #0
 800f6d2:	d002      	beq.n	800f6da <__kernel_rem_pio2+0x5aa>
 800f6d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f6d8:	4619      	mov	r1, r3
 800f6da:	9b04      	ldr	r3, [sp, #16]
 800f6dc:	e9c3 0100 	strd	r0, r1, [r3]
 800f6e0:	e793      	b.n	800f60a <__kernel_rem_pio2+0x4da>
 800f6e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f6e6:	f7f0 fdd1 	bl	800028c <__adddf3>
 800f6ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800f6ee:	e7eb      	b.n	800f6c8 <__kernel_rem_pio2+0x598>
 800f6f0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f6f4:	f7f0 fdca 	bl	800028c <__adddf3>
 800f6f8:	3c01      	subs	r4, #1
 800f6fa:	e7c1      	b.n	800f680 <__kernel_rem_pio2+0x550>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
 800f700:	e7c6      	b.n	800f690 <__kernel_rem_pio2+0x560>
 800f702:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f706:	f7f0 fdc1 	bl	800028c <__adddf3>
 800f70a:	3401      	adds	r4, #1
 800f70c:	e7cb      	b.n	800f6a6 <__kernel_rem_pio2+0x576>
 800f70e:	ed35 7b02 	vldmdb	r5!, {d7}
 800f712:	ed8d 7b00 	vstr	d7, [sp]
 800f716:	ed95 7b02 	vldr	d7, [r5, #8]
 800f71a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f71e:	ec53 2b17 	vmov	r2, r3, d7
 800f722:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f726:	f7f0 fdb1 	bl	800028c <__adddf3>
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	4606      	mov	r6, r0
 800f730:	460f      	mov	r7, r1
 800f732:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f736:	f7f0 fda7 	bl	8000288 <__aeabi_dsub>
 800f73a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f73e:	f7f0 fda5 	bl	800028c <__adddf3>
 800f742:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f746:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f74a:	e9c5 6700 	strd	r6, r7, [r5]
 800f74e:	e771      	b.n	800f634 <__kernel_rem_pio2+0x504>
 800f750:	ed34 7b02 	vldmdb	r4!, {d7}
 800f754:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f758:	ec51 0b17 	vmov	r0, r1, d7
 800f75c:	4652      	mov	r2, sl
 800f75e:	465b      	mov	r3, fp
 800f760:	ed8d 7b00 	vstr	d7, [sp]
 800f764:	f7f0 fd92 	bl	800028c <__adddf3>
 800f768:	4602      	mov	r2, r0
 800f76a:	460b      	mov	r3, r1
 800f76c:	4606      	mov	r6, r0
 800f76e:	460f      	mov	r7, r1
 800f770:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f774:	f7f0 fd88 	bl	8000288 <__aeabi_dsub>
 800f778:	4652      	mov	r2, sl
 800f77a:	465b      	mov	r3, fp
 800f77c:	f7f0 fd86 	bl	800028c <__adddf3>
 800f780:	3d01      	subs	r5, #1
 800f782:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f786:	e9c4 6700 	strd	r6, r7, [r4]
 800f78a:	e757      	b.n	800f63c <__kernel_rem_pio2+0x50c>
 800f78c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f790:	f7f0 fd7c 	bl	800028c <__adddf3>
 800f794:	f108 38ff 	add.w	r8, r8, #4294967295
 800f798:	e758      	b.n	800f64c <__kernel_rem_pio2+0x51c>
 800f79a:	bf00      	nop
 800f79c:	f3af 8000 	nop.w
	...
 800f7a8:	41700000 	.word	0x41700000
 800f7ac:	3e700000 	.word	0x3e700000
 800f7b0:	9b04      	ldr	r3, [sp, #16]
 800f7b2:	9a04      	ldr	r2, [sp, #16]
 800f7b4:	601d      	str	r5, [r3, #0]
 800f7b6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800f7ba:	605c      	str	r4, [r3, #4]
 800f7bc:	609f      	str	r7, [r3, #8]
 800f7be:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800f7c2:	60d3      	str	r3, [r2, #12]
 800f7c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f7c8:	6110      	str	r0, [r2, #16]
 800f7ca:	6153      	str	r3, [r2, #20]
 800f7cc:	e71d      	b.n	800f60a <__kernel_rem_pio2+0x4da>
 800f7ce:	bf00      	nop

0800f7d0 <scalbn>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	ec55 4b10 	vmov	r4, r5, d0
 800f7d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f7da:	4606      	mov	r6, r0
 800f7dc:	462b      	mov	r3, r5
 800f7de:	b991      	cbnz	r1, 800f806 <scalbn+0x36>
 800f7e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f7e4:	4323      	orrs	r3, r4
 800f7e6:	d03b      	beq.n	800f860 <scalbn+0x90>
 800f7e8:	4b33      	ldr	r3, [pc, #204]	@ (800f8b8 <scalbn+0xe8>)
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	4629      	mov	r1, r5
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f7f0 ff02 	bl	80005f8 <__aeabi_dmul>
 800f7f4:	4b31      	ldr	r3, [pc, #196]	@ (800f8bc <scalbn+0xec>)
 800f7f6:	429e      	cmp	r6, r3
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	460d      	mov	r5, r1
 800f7fc:	da0f      	bge.n	800f81e <scalbn+0x4e>
 800f7fe:	a326      	add	r3, pc, #152	@ (adr r3, 800f898 <scalbn+0xc8>)
 800f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f804:	e01e      	b.n	800f844 <scalbn+0x74>
 800f806:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f80a:	4291      	cmp	r1, r2
 800f80c:	d10b      	bne.n	800f826 <scalbn+0x56>
 800f80e:	4622      	mov	r2, r4
 800f810:	4620      	mov	r0, r4
 800f812:	4629      	mov	r1, r5
 800f814:	f7f0 fd3a 	bl	800028c <__adddf3>
 800f818:	4604      	mov	r4, r0
 800f81a:	460d      	mov	r5, r1
 800f81c:	e020      	b.n	800f860 <scalbn+0x90>
 800f81e:	460b      	mov	r3, r1
 800f820:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f824:	3936      	subs	r1, #54	@ 0x36
 800f826:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f82a:	4296      	cmp	r6, r2
 800f82c:	dd0d      	ble.n	800f84a <scalbn+0x7a>
 800f82e:	2d00      	cmp	r5, #0
 800f830:	a11b      	add	r1, pc, #108	@ (adr r1, 800f8a0 <scalbn+0xd0>)
 800f832:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f836:	da02      	bge.n	800f83e <scalbn+0x6e>
 800f838:	a11b      	add	r1, pc, #108	@ (adr r1, 800f8a8 <scalbn+0xd8>)
 800f83a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f83e:	a318      	add	r3, pc, #96	@ (adr r3, 800f8a0 <scalbn+0xd0>)
 800f840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f844:	f7f0 fed8 	bl	80005f8 <__aeabi_dmul>
 800f848:	e7e6      	b.n	800f818 <scalbn+0x48>
 800f84a:	1872      	adds	r2, r6, r1
 800f84c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f850:	428a      	cmp	r2, r1
 800f852:	dcec      	bgt.n	800f82e <scalbn+0x5e>
 800f854:	2a00      	cmp	r2, #0
 800f856:	dd06      	ble.n	800f866 <scalbn+0x96>
 800f858:	f36f 531e 	bfc	r3, #20, #11
 800f85c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f860:	ec45 4b10 	vmov	d0, r4, r5
 800f864:	bd70      	pop	{r4, r5, r6, pc}
 800f866:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f86a:	da08      	bge.n	800f87e <scalbn+0xae>
 800f86c:	2d00      	cmp	r5, #0
 800f86e:	a10a      	add	r1, pc, #40	@ (adr r1, 800f898 <scalbn+0xc8>)
 800f870:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f874:	dac3      	bge.n	800f7fe <scalbn+0x2e>
 800f876:	a10e      	add	r1, pc, #56	@ (adr r1, 800f8b0 <scalbn+0xe0>)
 800f878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f87c:	e7bf      	b.n	800f7fe <scalbn+0x2e>
 800f87e:	3236      	adds	r2, #54	@ 0x36
 800f880:	f36f 531e 	bfc	r3, #20, #11
 800f884:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f888:	4620      	mov	r0, r4
 800f88a:	4b0d      	ldr	r3, [pc, #52]	@ (800f8c0 <scalbn+0xf0>)
 800f88c:	4629      	mov	r1, r5
 800f88e:	2200      	movs	r2, #0
 800f890:	e7d8      	b.n	800f844 <scalbn+0x74>
 800f892:	bf00      	nop
 800f894:	f3af 8000 	nop.w
 800f898:	c2f8f359 	.word	0xc2f8f359
 800f89c:	01a56e1f 	.word	0x01a56e1f
 800f8a0:	8800759c 	.word	0x8800759c
 800f8a4:	7e37e43c 	.word	0x7e37e43c
 800f8a8:	8800759c 	.word	0x8800759c
 800f8ac:	fe37e43c 	.word	0xfe37e43c
 800f8b0:	c2f8f359 	.word	0xc2f8f359
 800f8b4:	81a56e1f 	.word	0x81a56e1f
 800f8b8:	43500000 	.word	0x43500000
 800f8bc:	ffff3cb0 	.word	0xffff3cb0
 800f8c0:	3c900000 	.word	0x3c900000
 800f8c4:	00000000 	.word	0x00000000

0800f8c8 <floor>:
 800f8c8:	ec51 0b10 	vmov	r0, r1, d0
 800f8cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f8d8:	2e13      	cmp	r6, #19
 800f8da:	460c      	mov	r4, r1
 800f8dc:	4605      	mov	r5, r0
 800f8de:	4680      	mov	r8, r0
 800f8e0:	dc34      	bgt.n	800f94c <floor+0x84>
 800f8e2:	2e00      	cmp	r6, #0
 800f8e4:	da17      	bge.n	800f916 <floor+0x4e>
 800f8e6:	a332      	add	r3, pc, #200	@ (adr r3, 800f9b0 <floor+0xe8>)
 800f8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ec:	f7f0 fcce 	bl	800028c <__adddf3>
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	f7f1 f910 	bl	8000b18 <__aeabi_dcmpgt>
 800f8f8:	b150      	cbz	r0, 800f910 <floor+0x48>
 800f8fa:	2c00      	cmp	r4, #0
 800f8fc:	da55      	bge.n	800f9aa <floor+0xe2>
 800f8fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f902:	432c      	orrs	r4, r5
 800f904:	2500      	movs	r5, #0
 800f906:	42ac      	cmp	r4, r5
 800f908:	4c2b      	ldr	r4, [pc, #172]	@ (800f9b8 <floor+0xf0>)
 800f90a:	bf08      	it	eq
 800f90c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f910:	4621      	mov	r1, r4
 800f912:	4628      	mov	r0, r5
 800f914:	e023      	b.n	800f95e <floor+0x96>
 800f916:	4f29      	ldr	r7, [pc, #164]	@ (800f9bc <floor+0xf4>)
 800f918:	4137      	asrs	r7, r6
 800f91a:	ea01 0307 	and.w	r3, r1, r7
 800f91e:	4303      	orrs	r3, r0
 800f920:	d01d      	beq.n	800f95e <floor+0x96>
 800f922:	a323      	add	r3, pc, #140	@ (adr r3, 800f9b0 <floor+0xe8>)
 800f924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f928:	f7f0 fcb0 	bl	800028c <__adddf3>
 800f92c:	2200      	movs	r2, #0
 800f92e:	2300      	movs	r3, #0
 800f930:	f7f1 f8f2 	bl	8000b18 <__aeabi_dcmpgt>
 800f934:	2800      	cmp	r0, #0
 800f936:	d0eb      	beq.n	800f910 <floor+0x48>
 800f938:	2c00      	cmp	r4, #0
 800f93a:	bfbe      	ittt	lt
 800f93c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f940:	4133      	asrlt	r3, r6
 800f942:	18e4      	addlt	r4, r4, r3
 800f944:	ea24 0407 	bic.w	r4, r4, r7
 800f948:	2500      	movs	r5, #0
 800f94a:	e7e1      	b.n	800f910 <floor+0x48>
 800f94c:	2e33      	cmp	r6, #51	@ 0x33
 800f94e:	dd0a      	ble.n	800f966 <floor+0x9e>
 800f950:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f954:	d103      	bne.n	800f95e <floor+0x96>
 800f956:	4602      	mov	r2, r0
 800f958:	460b      	mov	r3, r1
 800f95a:	f7f0 fc97 	bl	800028c <__adddf3>
 800f95e:	ec41 0b10 	vmov	d0, r0, r1
 800f962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f966:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f96a:	f04f 37ff 	mov.w	r7, #4294967295
 800f96e:	40df      	lsrs	r7, r3
 800f970:	4207      	tst	r7, r0
 800f972:	d0f4      	beq.n	800f95e <floor+0x96>
 800f974:	a30e      	add	r3, pc, #56	@ (adr r3, 800f9b0 <floor+0xe8>)
 800f976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97a:	f7f0 fc87 	bl	800028c <__adddf3>
 800f97e:	2200      	movs	r2, #0
 800f980:	2300      	movs	r3, #0
 800f982:	f7f1 f8c9 	bl	8000b18 <__aeabi_dcmpgt>
 800f986:	2800      	cmp	r0, #0
 800f988:	d0c2      	beq.n	800f910 <floor+0x48>
 800f98a:	2c00      	cmp	r4, #0
 800f98c:	da0a      	bge.n	800f9a4 <floor+0xdc>
 800f98e:	2e14      	cmp	r6, #20
 800f990:	d101      	bne.n	800f996 <floor+0xce>
 800f992:	3401      	adds	r4, #1
 800f994:	e006      	b.n	800f9a4 <floor+0xdc>
 800f996:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f99a:	2301      	movs	r3, #1
 800f99c:	40b3      	lsls	r3, r6
 800f99e:	441d      	add	r5, r3
 800f9a0:	4545      	cmp	r5, r8
 800f9a2:	d3f6      	bcc.n	800f992 <floor+0xca>
 800f9a4:	ea25 0507 	bic.w	r5, r5, r7
 800f9a8:	e7b2      	b.n	800f910 <floor+0x48>
 800f9aa:	2500      	movs	r5, #0
 800f9ac:	462c      	mov	r4, r5
 800f9ae:	e7af      	b.n	800f910 <floor+0x48>
 800f9b0:	8800759c 	.word	0x8800759c
 800f9b4:	7e37e43c 	.word	0x7e37e43c
 800f9b8:	bff00000 	.word	0xbff00000
 800f9bc:	000fffff 	.word	0x000fffff

0800f9c0 <_init>:
 800f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c2:	bf00      	nop
 800f9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9c6:	bc08      	pop	{r3}
 800f9c8:	469e      	mov	lr, r3
 800f9ca:	4770      	bx	lr

0800f9cc <_fini>:
 800f9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ce:	bf00      	nop
 800f9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9d2:	bc08      	pop	{r3}
 800f9d4:	469e      	mov	lr, r3
 800f9d6:	4770      	bx	lr
